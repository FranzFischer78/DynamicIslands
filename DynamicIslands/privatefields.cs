namespace RaftGame.Private
{

	public static class PrivateAccessor_ShakeByDistance
	{

		private static readonly System.Lazy<FieldAccessor<ShakeByDistance, EZCameraShake.CameraShakeInstance>> __shakeInstance =
				new System.Lazy<FieldAccessor<ShakeByDistance, EZCameraShake.CameraShakeInstance>>(() => FieldAccessor<ShakeByDistance, EZCameraShake.CameraShakeInstance>.Create("_shakeInstance"));

		public static EZCameraShake.CameraShakeInstance Get_shakeInstance(this ShakeByDistance __self) => __shakeInstance.Value.GetValue(__self);
		public static void Set_shakeInstance(this ShakeByDistance __self, EZCameraShake.CameraShakeInstance value) => __shakeInstance.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<ShakeByDistance>> _Start757602046 =
				new System.Lazy<MethodAccessor<ShakeByDistance>>(() => MethodAccessor<ShakeByDistance>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<ShakeByDistance>> _Update757602046 =
				new System.Lazy<MethodAccessor<ShakeByDistance>>(() => MethodAccessor<ShakeByDistance>.Create("Update"));

		public static void Start(this ShakeByDistance __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this ShakeByDistance __self) => _Update757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_ShakeOnKeyPress
	{

		private static readonly System.Lazy<MethodAccessor<ShakeOnKeyPress>> _Update757602046 =
				new System.Lazy<MethodAccessor<ShakeOnKeyPress>>(() => MethodAccessor<ShakeOnKeyPress>.Create("Update"));

		public static void Update(this ShakeOnKeyPress __self) => _Update757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_ShakeOnTrigger
	{

		private static readonly System.Lazy<FieldAccessor<ShakeOnTrigger, EZCameraShake.CameraShakeInstance>> __shakeInstance =
				new System.Lazy<FieldAccessor<ShakeOnTrigger, EZCameraShake.CameraShakeInstance>>(() => FieldAccessor<ShakeOnTrigger, EZCameraShake.CameraShakeInstance>.Create("_shakeInstance"));

		public static EZCameraShake.CameraShakeInstance Get_shakeInstance(this ShakeOnTrigger __self) => __shakeInstance.Value.GetValue(__self);
		public static void Set_shakeInstance(this ShakeOnTrigger __self, EZCameraShake.CameraShakeInstance value) => __shakeInstance.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<ShakeOnTrigger>> _Start757602046 =
				new System.Lazy<MethodAccessor<ShakeOnTrigger>>(() => MethodAccessor<ShakeOnTrigger>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<ShakeOnTrigger>> _OnTriggerEnter3468606003 =
				new System.Lazy<MethodAccessor<ShakeOnTrigger>>(() => MethodAccessor<ShakeOnTrigger>.Create("OnTriggerEnter", typeof(UnityEngine.Collider)));
		private static readonly System.Lazy<MethodAccessor<ShakeOnTrigger>> _OnTriggerExit3468606003 =
				new System.Lazy<MethodAccessor<ShakeOnTrigger>>(() => MethodAccessor<ShakeOnTrigger>.Create("OnTriggerExit", typeof(UnityEngine.Collider)));

		public static void Start(this ShakeOnTrigger __self) => _Start757602046.Value.Invoke(__self);
		public static void OnTriggerEnter(this ShakeOnTrigger __self, UnityEngine.Collider c) => _OnTriggerEnter3468606003.Value.Invoke(__self, c);
		public static void OnTriggerExit(this ShakeOnTrigger __self, UnityEngine.Collider c) => _OnTriggerExit3468606003.Value.Invoke(__self, c);

	}

	public static class PrivateAccessor_ShakeDemo
	{

		private static readonly System.Lazy<FieldAccessor<ShakeDemo, UnityEngine.Vector3>> _posInf =
				new System.Lazy<FieldAccessor<ShakeDemo, UnityEngine.Vector3>>(() => FieldAccessor<ShakeDemo, UnityEngine.Vector3>.Create("posInf"));
		private static readonly System.Lazy<FieldAccessor<ShakeDemo, UnityEngine.Vector3>> _rotInf =
				new System.Lazy<FieldAccessor<ShakeDemo, UnityEngine.Vector3>>(() => FieldAccessor<ShakeDemo, UnityEngine.Vector3>.Create("rotInf"));
		private static readonly System.Lazy<FieldAccessor<ShakeDemo, float>> _magn =
				new System.Lazy<FieldAccessor<ShakeDemo, float>>(() => FieldAccessor<ShakeDemo, float>.Create("magn"));
		private static readonly System.Lazy<FieldAccessor<ShakeDemo, float>> _rough =
				new System.Lazy<FieldAccessor<ShakeDemo, float>>(() => FieldAccessor<ShakeDemo, float>.Create("rough"));
		private static readonly System.Lazy<FieldAccessor<ShakeDemo, float>> _fadeIn =
				new System.Lazy<FieldAccessor<ShakeDemo, float>>(() => FieldAccessor<ShakeDemo, float>.Create("fadeIn"));
		private static readonly System.Lazy<FieldAccessor<ShakeDemo, float>> _fadeOut =
				new System.Lazy<FieldAccessor<ShakeDemo, float>>(() => FieldAccessor<ShakeDemo, float>.Create("fadeOut"));
		private static readonly System.Lazy<FieldAccessor<ShakeDemo, bool>> _modValues =
				new System.Lazy<FieldAccessor<ShakeDemo, bool>>(() => FieldAccessor<ShakeDemo, bool>.Create("modValues"));
		private static readonly System.Lazy<FieldAccessor<ShakeDemo, bool>> _showList =
				new System.Lazy<FieldAccessor<ShakeDemo, bool>>(() => FieldAccessor<ShakeDemo, bool>.Create("showList"));
		private static readonly System.Lazy<FieldAccessor<ShakeDemo, EZCameraShake.CameraShakeInstance>> _shake =
				new System.Lazy<FieldAccessor<ShakeDemo, EZCameraShake.CameraShakeInstance>>(() => FieldAccessor<ShakeDemo, EZCameraShake.CameraShakeInstance>.Create("shake"));

		public static UnityEngine.Vector3 GetPosInf(this ShakeDemo __self) => _posInf.Value.GetValue(__self);
		public static void SetPosInf(this ShakeDemo __self, UnityEngine.Vector3 value) => _posInf.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetRotInf(this ShakeDemo __self) => _rotInf.Value.GetValue(__self);
		public static void SetRotInf(this ShakeDemo __self, UnityEngine.Vector3 value) => _rotInf.Value.SetValue(__self, value);
		public static float GetMagn(this ShakeDemo __self) => _magn.Value.GetValue(__self);
		public static void SetMagn(this ShakeDemo __self, float value) => _magn.Value.SetValue(__self, value);
		public static float GetRough(this ShakeDemo __self) => _rough.Value.GetValue(__self);
		public static void SetRough(this ShakeDemo __self, float value) => _rough.Value.SetValue(__self, value);
		public static float GetFadeIn(this ShakeDemo __self) => _fadeIn.Value.GetValue(__self);
		public static void SetFadeIn(this ShakeDemo __self, float value) => _fadeIn.Value.SetValue(__self, value);
		public static float GetFadeOut(this ShakeDemo __self) => _fadeOut.Value.GetValue(__self);
		public static void SetFadeOut(this ShakeDemo __self, float value) => _fadeOut.Value.SetValue(__self, value);
		public static bool GetModValues(this ShakeDemo __self) => _modValues.Value.GetValue(__self);
		public static void SetModValues(this ShakeDemo __self, bool value) => _modValues.Value.SetValue(__self, value);
		public static bool GetShowList(this ShakeDemo __self) => _showList.Value.GetValue(__self);
		public static void SetShowList(this ShakeDemo __self, bool value) => _showList.Value.SetValue(__self, value);
		public static EZCameraShake.CameraShakeInstance GetShake(this ShakeDemo __self) => _shake.Value.GetValue(__self);
		public static void SetShake(this ShakeDemo __self, EZCameraShake.CameraShakeInstance value) => _shake.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<ShakeDemo>> _OnGUI757602046 =
				new System.Lazy<MethodAccessor<ShakeDemo>>(() => MethodAccessor<ShakeDemo>.Create("OnGUI"));

		public static void OnGUI(this ShakeDemo __self) => _OnGUI757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_HeightTest
	{

		private static readonly System.Lazy<MethodAccessor<HeightTest>> _Update757602046 =
				new System.Lazy<MethodAccessor<HeightTest>>(() => MethodAccessor<HeightTest>.Create("Update"));

		public static void Update(this HeightTest __self) => _Update757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_ReplacementTest
	{

		private static readonly System.Lazy<MethodAccessor<ReplacementTest>> _Start757602046 =
				new System.Lazy<MethodAccessor<ReplacementTest>>(() => MethodAccessor<ReplacementTest>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<ReplacementTest>> _Update757602046 =
				new System.Lazy<MethodAccessor<ReplacementTest>>(() => MethodAccessor<ReplacementTest>.Create("Update"));

		public static void Start(this ReplacementTest __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this ReplacementTest __self) => _Update757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_ExampleWheelController
	{

		private static readonly System.Lazy<FieldAccessor<ExampleWheelController, UnityEngine.Rigidbody>> _m_Rigidbody =
				new System.Lazy<FieldAccessor<ExampleWheelController, UnityEngine.Rigidbody>>(() => FieldAccessor<ExampleWheelController, UnityEngine.Rigidbody>.Create("m_Rigidbody"));

		public static UnityEngine.Rigidbody GetM_Rigidbody(this ExampleWheelController __self) => _m_Rigidbody.Value.GetValue(__self);
		public static void SetM_Rigidbody(this ExampleWheelController __self, UnityEngine.Rigidbody value) => _m_Rigidbody.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<ExampleWheelController>> _Start757602046 =
				new System.Lazy<MethodAccessor<ExampleWheelController>>(() => MethodAccessor<ExampleWheelController>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<ExampleWheelController>> _Update757602046 =
				new System.Lazy<MethodAccessor<ExampleWheelController>>(() => MethodAccessor<ExampleWheelController>.Create("Update"));

		public static void Start(this ExampleWheelController __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this ExampleWheelController __self) => _Update757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_EnableCameraDepthInForward
	{

		private static readonly System.Lazy<MethodAccessor<EnableCameraDepthInForward>> _Start757602046 =
				new System.Lazy<MethodAccessor<EnableCameraDepthInForward>>(() => MethodAccessor<EnableCameraDepthInForward>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<EnableCameraDepthInForward>> _Set757602046 =
				new System.Lazy<MethodAccessor<EnableCameraDepthInForward>>(() => MethodAccessor<EnableCameraDepthInForward>.Create("Set"));

		public static void Start(this EnableCameraDepthInForward __self) => _Start757602046.Value.Invoke(__self);
		public static void Set(this EnableCameraDepthInForward __self) => _Set757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_SoftNormalsToVertexColor
	{

		private static readonly System.Lazy<MethodAccessor<SoftNormalsToVertexColor>> _OnDrawGizmos757602046 =
				new System.Lazy<MethodAccessor<SoftNormalsToVertexColor>>(() => MethodAccessor<SoftNormalsToVertexColor>.Create("OnDrawGizmos"));
		private static readonly System.Lazy<MethodAccessor<SoftNormalsToVertexColor>> _Awake757602046 =
				new System.Lazy<MethodAccessor<SoftNormalsToVertexColor>>(() => MethodAccessor<SoftNormalsToVertexColor>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<SoftNormalsToVertexColor>> _TryGenerate757602046 =
				new System.Lazy<MethodAccessor<SoftNormalsToVertexColor>>(() => MethodAccessor<SoftNormalsToVertexColor>.Create("TryGenerate"));
		private static readonly System.Lazy<MethodAccessor<SoftNormalsToVertexColor>> _Generate3437154596 =
				new System.Lazy<MethodAccessor<SoftNormalsToVertexColor>>(() => MethodAccessor<SoftNormalsToVertexColor>.Create("Generate", typeof(UnityEngine.Mesh)));

		public static void OnDrawGizmos(this SoftNormalsToVertexColor __self) => _OnDrawGizmos757602046.Value.Invoke(__self);
		public static void Awake(this SoftNormalsToVertexColor __self) => _Awake757602046.Value.Invoke(__self);
		public static void TryGenerate(this SoftNormalsToVertexColor __self) => _TryGenerate757602046.Value.Invoke(__self);
		public static void Generate(this SoftNormalsToVertexColor __self, UnityEngine.Mesh m) => _Generate3437154596.Value.Invoke(__self, m);

	}

	public static class PrivateAccessor_SteamManager
	{

		private static readonly System.Lazy<FieldAccessor<SteamManager, bool>> _m_bInitialized =
				new System.Lazy<FieldAccessor<SteamManager, bool>>(() => FieldAccessor<SteamManager, bool>.Create("m_bInitialized"));
		private static readonly System.Lazy<FieldAccessor<SteamManager, Steamworks.SteamAPIWarningMessageHook_t>> _m_SteamAPIWarningMessageHook =
				new System.Lazy<FieldAccessor<SteamManager, Steamworks.SteamAPIWarningMessageHook_t>>(() => FieldAccessor<SteamManager, Steamworks.SteamAPIWarningMessageHook_t>.Create("m_SteamAPIWarningMessageHook"));

		public static bool GetM_bInitialized(this SteamManager __self) => _m_bInitialized.Value.GetValue(__self);
		public static void SetM_bInitialized(this SteamManager __self, bool value) => _m_bInitialized.Value.SetValue(__self, value);
		public static Steamworks.SteamAPIWarningMessageHook_t GetM_SteamAPIWarningMessageHook(this SteamManager __self) => _m_SteamAPIWarningMessageHook.Value.GetValue(__self);
		public static void SetM_SteamAPIWarningMessageHook(this SteamManager __self, Steamworks.SteamAPIWarningMessageHook_t value) => _m_SteamAPIWarningMessageHook.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<SteamManager>> _Awake757602046 =
				new System.Lazy<MethodAccessor<SteamManager>>(() => MethodAccessor<SteamManager>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<SteamManager>> _OnEnable757602046 =
				new System.Lazy<MethodAccessor<SteamManager>>(() => MethodAccessor<SteamManager>.Create("OnEnable"));
		private static readonly System.Lazy<MethodAccessor<SteamManager>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<SteamManager>>(() => MethodAccessor<SteamManager>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<SteamManager>> _Update757602046 =
				new System.Lazy<MethodAccessor<SteamManager>>(() => MethodAccessor<SteamManager>.Create("Update"));

		public static void Awake(this SteamManager __self) => _Awake757602046.Value.Invoke(__self);
		public static void OnEnable(this SteamManager __self) => _OnEnable757602046.Value.Invoke(__self);
		public static void OnDestroy(this SteamManager __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void Update(this SteamManager __self) => _Update757602046.Value.Invoke(__self);

	}

	public static class Private_SteamManager
	{

		private static readonly System.Lazy<StaticFieldAccessor<SteamManager>> _s_instance =
				new System.Lazy<StaticFieldAccessor<SteamManager>>(() => StaticFieldAccessor<SteamManager>.Create(typeof(SteamManager), "s_instance"));
		private static readonly System.Lazy<StaticFieldAccessor<bool>> _s_EverInialized =
				new System.Lazy<StaticFieldAccessor<bool>>(() => StaticFieldAccessor<bool>.Create(typeof(SteamManager), "s_EverInialized"));

		public static SteamManager GetS_instance() => _s_instance.Value.GetValue();
		public static void SetS_instance(SteamManager value) => _s_instance.Value.SetValue(value);
		public static bool GetS_EverInialized() => _s_EverInialized.Value.GetValue();
		public static void SetS_EverInialized(bool value) => _s_EverInialized.Value.SetValue(value);

		private static readonly System.Lazy<StaticMethodAccessor> _SteamAPIDebugTextHook3911217518 =
				new System.Lazy<StaticMethodAccessor>(() => StaticMethodAccessor.Create(typeof(SteamManager), "SteamAPIDebugTextHook", typeof(int), typeof(System.Text.StringBuilder)));

		public static void SteamAPIDebugTextHook(int nSeverity, System.Text.StringBuilder pchDebugText) => _SteamAPIDebugTextHook3911217518.Value.Invoke(nSeverity, pchDebugText);

	}

	public static class PrivateAccessor_VolumetricLight
	{

		private static readonly System.Lazy<FieldAccessor<VolumetricLight, UnityEngine.Light>> __light =
				new System.Lazy<FieldAccessor<VolumetricLight, UnityEngine.Light>>(() => FieldAccessor<VolumetricLight, UnityEngine.Light>.Create("_light"));
		private static readonly System.Lazy<FieldAccessor<VolumetricLight, UnityEngine.Material>> __material =
				new System.Lazy<FieldAccessor<VolumetricLight, UnityEngine.Material>>(() => FieldAccessor<VolumetricLight, UnityEngine.Material>.Create("_material"));
		private static readonly System.Lazy<FieldAccessor<VolumetricLight, UnityEngine.Rendering.CommandBuffer>> __commandBuffer =
				new System.Lazy<FieldAccessor<VolumetricLight, UnityEngine.Rendering.CommandBuffer>>(() => FieldAccessor<VolumetricLight, UnityEngine.Rendering.CommandBuffer>.Create("_commandBuffer"));
		private static readonly System.Lazy<FieldAccessor<VolumetricLight, UnityEngine.Rendering.CommandBuffer>> __cascadeShadowCommandBuffer =
				new System.Lazy<FieldAccessor<VolumetricLight, UnityEngine.Rendering.CommandBuffer>>(() => FieldAccessor<VolumetricLight, UnityEngine.Rendering.CommandBuffer>.Create("_cascadeShadowCommandBuffer"));
		private static readonly System.Lazy<FieldAccessor<VolumetricLight, UnityEngine.Vector4[]>> __frustumCorners =
				new System.Lazy<FieldAccessor<VolumetricLight, UnityEngine.Vector4[]>>(() => FieldAccessor<VolumetricLight, UnityEngine.Vector4[]>.Create("_frustumCorners"));
		private static readonly System.Lazy<FieldAccessor<VolumetricLight, bool>> __reversedZ =
				new System.Lazy<FieldAccessor<VolumetricLight, bool>>(() => FieldAccessor<VolumetricLight, bool>.Create("_reversedZ"));

		public static UnityEngine.Light Get_light(this VolumetricLight __self) => __light.Value.GetValue(__self);
		public static void Set_light(this VolumetricLight __self, UnityEngine.Light value) => __light.Value.SetValue(__self, value);
		public static UnityEngine.Material Get_material(this VolumetricLight __self) => __material.Value.GetValue(__self);
		public static void Set_material(this VolumetricLight __self, UnityEngine.Material value) => __material.Value.SetValue(__self, value);
		public static UnityEngine.Rendering.CommandBuffer Get_commandBuffer(this VolumetricLight __self) => __commandBuffer.Value.GetValue(__self);
		public static void Set_commandBuffer(this VolumetricLight __self, UnityEngine.Rendering.CommandBuffer value) => __commandBuffer.Value.SetValue(__self, value);
		public static UnityEngine.Rendering.CommandBuffer Get_cascadeShadowCommandBuffer(this VolumetricLight __self) => __cascadeShadowCommandBuffer.Value.GetValue(__self);
		public static void Set_cascadeShadowCommandBuffer(this VolumetricLight __self, UnityEngine.Rendering.CommandBuffer value) => __cascadeShadowCommandBuffer.Value.SetValue(__self, value);
		public static UnityEngine.Vector4[] Get_frustumCorners(this VolumetricLight __self) => __frustumCorners.Value.GetValue(__self);
		public static void Set_frustumCorners(this VolumetricLight __self, UnityEngine.Vector4[] value) => __frustumCorners.Value.SetValue(__self, value);
		public static bool Get_reversedZ(this VolumetricLight __self) => __reversedZ.Value.GetValue(__self);
		public static void Set_reversedZ(this VolumetricLight __self, bool value) => __reversedZ.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<VolumetricLight>> _Start757602046 =
				new System.Lazy<MethodAccessor<VolumetricLight>>(() => MethodAccessor<VolumetricLight>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<VolumetricLight>> _OnEnable757602046 =
				new System.Lazy<MethodAccessor<VolumetricLight>>(() => MethodAccessor<VolumetricLight>.Create("OnEnable"));
		private static readonly System.Lazy<MethodAccessor<VolumetricLight>> _OnDisable757602046 =
				new System.Lazy<MethodAccessor<VolumetricLight>>(() => MethodAccessor<VolumetricLight>.Create("OnDisable"));
		private static readonly System.Lazy<MethodAccessor<VolumetricLight>> _VolumetricLightRenderer_PreRenderEvent897932345 =
				new System.Lazy<MethodAccessor<VolumetricLight>>(() => MethodAccessor<VolumetricLight>.Create("VolumetricLightRenderer_PreRenderEvent", typeof(VolumetricLightRenderer), typeof(UnityEngine.Matrix4x4)));
		private static readonly System.Lazy<MethodAccessor<VolumetricLight>> _SetupPointLight897932345 =
				new System.Lazy<MethodAccessor<VolumetricLight>>(() => MethodAccessor<VolumetricLight>.Create("SetupPointLight", typeof(VolumetricLightRenderer), typeof(UnityEngine.Matrix4x4)));
		private static readonly System.Lazy<MethodAccessor<VolumetricLight>> _SetupSpotLight897932345 =
				new System.Lazy<MethodAccessor<VolumetricLight>>(() => MethodAccessor<VolumetricLight>.Create("SetupSpotLight", typeof(VolumetricLightRenderer), typeof(UnityEngine.Matrix4x4)));
		private static readonly System.Lazy<MethodAccessor<VolumetricLight>> _SetupDirectionalLight897932345 =
				new System.Lazy<MethodAccessor<VolumetricLight>>(() => MethodAccessor<VolumetricLight>.Create("SetupDirectionalLight", typeof(VolumetricLightRenderer), typeof(UnityEngine.Matrix4x4)));
		private static readonly System.Lazy<MethodAccessor<VolumetricLight>> _IsCameraInPointLightBounds757602046 =
				new System.Lazy<MethodAccessor<VolumetricLight>>(() => MethodAccessor<VolumetricLight>.Create("IsCameraInPointLightBounds"));
		private static readonly System.Lazy<MethodAccessor<VolumetricLight>> _IsCameraInSpotLightBounds757602046 =
				new System.Lazy<MethodAccessor<VolumetricLight>>(() => MethodAccessor<VolumetricLight>.Create("IsCameraInSpotLightBounds"));

		public static void Start(this VolumetricLight __self) => _Start757602046.Value.Invoke(__self);
		public static void OnEnable(this VolumetricLight __self) => _OnEnable757602046.Value.Invoke(__self);
		public static void OnDisable(this VolumetricLight __self) => _OnDisable757602046.Value.Invoke(__self);
		public static void VolumetricLightRenderer_PreRenderEvent(this VolumetricLight __self, VolumetricLightRenderer renderer, UnityEngine.Matrix4x4 viewProj) => _VolumetricLightRenderer_PreRenderEvent897932345.Value.Invoke(__self, renderer, viewProj);
		public static void SetupPointLight(this VolumetricLight __self, VolumetricLightRenderer renderer, UnityEngine.Matrix4x4 viewProj) => _SetupPointLight897932345.Value.Invoke(__self, renderer, viewProj);
		public static void SetupSpotLight(this VolumetricLight __self, VolumetricLightRenderer renderer, UnityEngine.Matrix4x4 viewProj) => _SetupSpotLight897932345.Value.Invoke(__self, renderer, viewProj);
		public static void SetupDirectionalLight(this VolumetricLight __self, VolumetricLightRenderer renderer, UnityEngine.Matrix4x4 viewProj) => _SetupDirectionalLight897932345.Value.Invoke(__self, renderer, viewProj);
		public static bool IsCameraInPointLightBounds(this VolumetricLight __self) => (bool)_IsCameraInPointLightBounds757602046.Value.Invoke(__self);
		public static bool IsCameraInSpotLightBounds(this VolumetricLight __self) => (bool)_IsCameraInSpotLightBounds757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_VolumetricLightRenderer
	{

		private static readonly System.Lazy<FieldAccessor<VolumetricLightRenderer, UnityEngine.Camera>> __camera =
				new System.Lazy<FieldAccessor<VolumetricLightRenderer, UnityEngine.Camera>>(() => FieldAccessor<VolumetricLightRenderer, UnityEngine.Camera>.Create("_camera"));
		private static readonly System.Lazy<FieldAccessor<VolumetricLightRenderer, UnityEngine.Rendering.CommandBuffer>> __preLightPass =
				new System.Lazy<FieldAccessor<VolumetricLightRenderer, UnityEngine.Rendering.CommandBuffer>>(() => FieldAccessor<VolumetricLightRenderer, UnityEngine.Rendering.CommandBuffer>.Create("_preLightPass"));
		private static readonly System.Lazy<FieldAccessor<VolumetricLightRenderer, UnityEngine.Matrix4x4>> __viewProj =
				new System.Lazy<FieldAccessor<VolumetricLightRenderer, UnityEngine.Matrix4x4>>(() => FieldAccessor<VolumetricLightRenderer, UnityEngine.Matrix4x4>.Create("_viewProj"));
		private static readonly System.Lazy<FieldAccessor<VolumetricLightRenderer, UnityEngine.Material>> __blitAddMaterial =
				new System.Lazy<FieldAccessor<VolumetricLightRenderer, UnityEngine.Material>>(() => FieldAccessor<VolumetricLightRenderer, UnityEngine.Material>.Create("_blitAddMaterial"));
		private static readonly System.Lazy<FieldAccessor<VolumetricLightRenderer, UnityEngine.Material>> __bilateralBlurMaterial =
				new System.Lazy<FieldAccessor<VolumetricLightRenderer, UnityEngine.Material>>(() => FieldAccessor<VolumetricLightRenderer, UnityEngine.Material>.Create("_bilateralBlurMaterial"));
		private static readonly System.Lazy<FieldAccessor<VolumetricLightRenderer, UnityEngine.RenderTexture>> __volumeLightTexture =
				new System.Lazy<FieldAccessor<VolumetricLightRenderer, UnityEngine.RenderTexture>>(() => FieldAccessor<VolumetricLightRenderer, UnityEngine.RenderTexture>.Create("_volumeLightTexture"));
		private static readonly System.Lazy<FieldAccessor<VolumetricLightRenderer, UnityEngine.RenderTexture>> __halfVolumeLightTexture =
				new System.Lazy<FieldAccessor<VolumetricLightRenderer, UnityEngine.RenderTexture>>(() => FieldAccessor<VolumetricLightRenderer, UnityEngine.RenderTexture>.Create("_halfVolumeLightTexture"));
		private static readonly System.Lazy<FieldAccessor<VolumetricLightRenderer, UnityEngine.RenderTexture>> __quarterVolumeLightTexture =
				new System.Lazy<FieldAccessor<VolumetricLightRenderer, UnityEngine.RenderTexture>>(() => FieldAccessor<VolumetricLightRenderer, UnityEngine.RenderTexture>.Create("_quarterVolumeLightTexture"));
		private static readonly System.Lazy<FieldAccessor<VolumetricLightRenderer, UnityEngine.RenderTexture>> __halfDepthBuffer =
				new System.Lazy<FieldAccessor<VolumetricLightRenderer, UnityEngine.RenderTexture>>(() => FieldAccessor<VolumetricLightRenderer, UnityEngine.RenderTexture>.Create("_halfDepthBuffer"));
		private static readonly System.Lazy<FieldAccessor<VolumetricLightRenderer, UnityEngine.RenderTexture>> __quarterDepthBuffer =
				new System.Lazy<FieldAccessor<VolumetricLightRenderer, UnityEngine.RenderTexture>>(() => FieldAccessor<VolumetricLightRenderer, UnityEngine.RenderTexture>.Create("_quarterDepthBuffer"));
		private static readonly System.Lazy<FieldAccessor<VolumetricLightRenderer, VolumetricLightRenderer.VolumtericResolution>> __currentResolution =
				new System.Lazy<FieldAccessor<VolumetricLightRenderer, VolumetricLightRenderer.VolumtericResolution>>(() => FieldAccessor<VolumetricLightRenderer, VolumetricLightRenderer.VolumtericResolution>.Create("_currentResolution"));
		private static readonly System.Lazy<FieldAccessor<VolumetricLightRenderer, UnityEngine.Texture2D>> __ditheringTexture =
				new System.Lazy<FieldAccessor<VolumetricLightRenderer, UnityEngine.Texture2D>>(() => FieldAccessor<VolumetricLightRenderer, UnityEngine.Texture2D>.Create("_ditheringTexture"));
		private static readonly System.Lazy<FieldAccessor<VolumetricLightRenderer, UnityEngine.Texture3D>> __noiseTexture =
				new System.Lazy<FieldAccessor<VolumetricLightRenderer, UnityEngine.Texture3D>>(() => FieldAccessor<VolumetricLightRenderer, UnityEngine.Texture3D>.Create("_noiseTexture"));

		public static UnityEngine.Camera Get_camera(this VolumetricLightRenderer __self) => __camera.Value.GetValue(__self);
		public static void Set_camera(this VolumetricLightRenderer __self, UnityEngine.Camera value) => __camera.Value.SetValue(__self, value);
		public static UnityEngine.Rendering.CommandBuffer Get_preLightPass(this VolumetricLightRenderer __self) => __preLightPass.Value.GetValue(__self);
		public static void Set_preLightPass(this VolumetricLightRenderer __self, UnityEngine.Rendering.CommandBuffer value) => __preLightPass.Value.SetValue(__self, value);
		public static UnityEngine.Matrix4x4 Get_viewProj(this VolumetricLightRenderer __self) => __viewProj.Value.GetValue(__self);
		public static void Set_viewProj(this VolumetricLightRenderer __self, UnityEngine.Matrix4x4 value) => __viewProj.Value.SetValue(__self, value);
		public static UnityEngine.Material Get_blitAddMaterial(this VolumetricLightRenderer __self) => __blitAddMaterial.Value.GetValue(__self);
		public static void Set_blitAddMaterial(this VolumetricLightRenderer __self, UnityEngine.Material value) => __blitAddMaterial.Value.SetValue(__self, value);
		public static UnityEngine.Material Get_bilateralBlurMaterial(this VolumetricLightRenderer __self) => __bilateralBlurMaterial.Value.GetValue(__self);
		public static void Set_bilateralBlurMaterial(this VolumetricLightRenderer __self, UnityEngine.Material value) => __bilateralBlurMaterial.Value.SetValue(__self, value);
		public static UnityEngine.RenderTexture Get_volumeLightTexture(this VolumetricLightRenderer __self) => __volumeLightTexture.Value.GetValue(__self);
		public static void Set_volumeLightTexture(this VolumetricLightRenderer __self, UnityEngine.RenderTexture value) => __volumeLightTexture.Value.SetValue(__self, value);
		public static UnityEngine.RenderTexture Get_halfVolumeLightTexture(this VolumetricLightRenderer __self) => __halfVolumeLightTexture.Value.GetValue(__self);
		public static void Set_halfVolumeLightTexture(this VolumetricLightRenderer __self, UnityEngine.RenderTexture value) => __halfVolumeLightTexture.Value.SetValue(__self, value);
		public static UnityEngine.RenderTexture Get_quarterVolumeLightTexture(this VolumetricLightRenderer __self) => __quarterVolumeLightTexture.Value.GetValue(__self);
		public static void Set_quarterVolumeLightTexture(this VolumetricLightRenderer __self, UnityEngine.RenderTexture value) => __quarterVolumeLightTexture.Value.SetValue(__self, value);
		public static UnityEngine.RenderTexture Get_halfDepthBuffer(this VolumetricLightRenderer __self) => __halfDepthBuffer.Value.GetValue(__self);
		public static void Set_halfDepthBuffer(this VolumetricLightRenderer __self, UnityEngine.RenderTexture value) => __halfDepthBuffer.Value.SetValue(__self, value);
		public static UnityEngine.RenderTexture Get_quarterDepthBuffer(this VolumetricLightRenderer __self) => __quarterDepthBuffer.Value.GetValue(__self);
		public static void Set_quarterDepthBuffer(this VolumetricLightRenderer __self, UnityEngine.RenderTexture value) => __quarterDepthBuffer.Value.SetValue(__self, value);
		public static VolumetricLightRenderer.VolumtericResolution Get_currentResolution(this VolumetricLightRenderer __self) => __currentResolution.Value.GetValue(__self);
		public static void Set_currentResolution(this VolumetricLightRenderer __self, VolumetricLightRenderer.VolumtericResolution value) => __currentResolution.Value.SetValue(__self, value);
		public static UnityEngine.Texture2D Get_ditheringTexture(this VolumetricLightRenderer __self) => __ditheringTexture.Value.GetValue(__self);
		public static void Set_ditheringTexture(this VolumetricLightRenderer __self, UnityEngine.Texture2D value) => __ditheringTexture.Value.SetValue(__self, value);
		public static UnityEngine.Texture3D Get_noiseTexture(this VolumetricLightRenderer __self) => __noiseTexture.Value.GetValue(__self);
		public static void Set_noiseTexture(this VolumetricLightRenderer __self, UnityEngine.Texture3D value) => __noiseTexture.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<VolumetricLightRenderer>> _Awake757602046 =
				new System.Lazy<MethodAccessor<VolumetricLightRenderer>>(() => MethodAccessor<VolumetricLightRenderer>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<VolumetricLightRenderer>> _OnEnable757602046 =
				new System.Lazy<MethodAccessor<VolumetricLightRenderer>>(() => MethodAccessor<VolumetricLightRenderer>.Create("OnEnable"));
		private static readonly System.Lazy<MethodAccessor<VolumetricLightRenderer>> _OnDisable757602046 =
				new System.Lazy<MethodAccessor<VolumetricLightRenderer>>(() => MethodAccessor<VolumetricLightRenderer>.Create("OnDisable"));
		private static readonly System.Lazy<MethodAccessor<VolumetricLightRenderer>> _ChangeResolution757602046 =
				new System.Lazy<MethodAccessor<VolumetricLightRenderer>>(() => MethodAccessor<VolumetricLightRenderer>.Create("ChangeResolution"));
		private static readonly System.Lazy<MethodAccessor<VolumetricLightRenderer>> _UpdateMaterialParameters757602046 =
				new System.Lazy<MethodAccessor<VolumetricLightRenderer>>(() => MethodAccessor<VolumetricLightRenderer>.Create("UpdateMaterialParameters"));
		private static readonly System.Lazy<MethodAccessor<VolumetricLightRenderer>> _Update757602046 =
				new System.Lazy<MethodAccessor<VolumetricLightRenderer>>(() => MethodAccessor<VolumetricLightRenderer>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<VolumetricLightRenderer>> _LoadNoise3dTexture757602046 =
				new System.Lazy<MethodAccessor<VolumetricLightRenderer>>(() => MethodAccessor<VolumetricLightRenderer>.Create("LoadNoise3dTexture"));
		private static readonly System.Lazy<MethodAccessor<VolumetricLightRenderer>> _GenerateDitherTexture757602046 =
				new System.Lazy<MethodAccessor<VolumetricLightRenderer>>(() => MethodAccessor<VolumetricLightRenderer>.Create("GenerateDitherTexture"));
		private static readonly System.Lazy<MethodAccessor<VolumetricLightRenderer>> _CreateSpotLightMesh757602046 =
				new System.Lazy<MethodAccessor<VolumetricLightRenderer>>(() => MethodAccessor<VolumetricLightRenderer>.Create("CreateSpotLightMesh"));

		public static void Awake(this VolumetricLightRenderer __self) => _Awake757602046.Value.Invoke(__self);
		public static void OnEnable(this VolumetricLightRenderer __self) => _OnEnable757602046.Value.Invoke(__self);
		public static void OnDisable(this VolumetricLightRenderer __self) => _OnDisable757602046.Value.Invoke(__self);
		public static void ChangeResolution(this VolumetricLightRenderer __self) => _ChangeResolution757602046.Value.Invoke(__self);
		public static void UpdateMaterialParameters(this VolumetricLightRenderer __self) => _UpdateMaterialParameters757602046.Value.Invoke(__self);
		public static void Update(this VolumetricLightRenderer __self) => _Update757602046.Value.Invoke(__self);
		public static void LoadNoise3dTexture(this VolumetricLightRenderer __self) => _LoadNoise3dTexture757602046.Value.Invoke(__self);
		public static void GenerateDitherTexture(this VolumetricLightRenderer __self) => _GenerateDitherTexture757602046.Value.Invoke(__self);
		public static UnityEngine.Mesh CreateSpotLightMesh(this VolumetricLightRenderer __self) => (UnityEngine.Mesh)_CreateSpotLightMesh757602046.Value.Invoke(__self);

	}

	public static class Private_VolumetricLightRenderer
	{

		private static readonly System.Lazy<StaticFieldAccessor<UnityEngine.Mesh>> __pointLightMesh =
				new System.Lazy<StaticFieldAccessor<UnityEngine.Mesh>>(() => StaticFieldAccessor<UnityEngine.Mesh>.Create(typeof(VolumetricLightRenderer), "_pointLightMesh"));
		private static readonly System.Lazy<StaticFieldAccessor<UnityEngine.Mesh>> __spotLightMesh =
				new System.Lazy<StaticFieldAccessor<UnityEngine.Mesh>>(() => StaticFieldAccessor<UnityEngine.Mesh>.Create(typeof(VolumetricLightRenderer), "_spotLightMesh"));
		private static readonly System.Lazy<StaticFieldAccessor<UnityEngine.Material>> __lightMaterial =
				new System.Lazy<StaticFieldAccessor<UnityEngine.Material>>(() => StaticFieldAccessor<UnityEngine.Material>.Create(typeof(VolumetricLightRenderer), "_lightMaterial"));
		private static readonly System.Lazy<StaticFieldAccessor<UnityEngine.Texture>> __defaultSpotCookie =
				new System.Lazy<StaticFieldAccessor<UnityEngine.Texture>>(() => StaticFieldAccessor<UnityEngine.Texture>.Create(typeof(VolumetricLightRenderer), "_defaultSpotCookie"));

		public static UnityEngine.Mesh Get_pointLightMesh() => __pointLightMesh.Value.GetValue();
		public static void Set_pointLightMesh(UnityEngine.Mesh value) => __pointLightMesh.Value.SetValue(value);
		public static UnityEngine.Mesh Get_spotLightMesh() => __spotLightMesh.Value.GetValue();
		public static void Set_spotLightMesh(UnityEngine.Mesh value) => __spotLightMesh.Value.SetValue(value);
		public static UnityEngine.Material Get_lightMaterial() => __lightMaterial.Value.GetValue();
		public static void Set_lightMaterial(UnityEngine.Material value) => __lightMaterial.Value.SetValue(value);
		public static UnityEngine.Texture Get_defaultSpotCookie() => __defaultSpotCookie.Value.GetValue();
		public static void Set_defaultSpotCookie(UnityEngine.Texture value) => __defaultSpotCookie.Value.SetValue(value);

	}

	public static class PrivateAccessor_AzureUIController
	{

		private static readonly System.Lazy<FieldAccessor<AzureUIController, UnityEngine.Vector3>> _m_scale =
				new System.Lazy<FieldAccessor<AzureUIController, UnityEngine.Vector3>>(() => FieldAccessor<AzureUIController, UnityEngine.Vector3>.Create("m_scale"));

		public static UnityEngine.Vector3 GetM_scale(this AzureUIController __self) => _m_scale.Value.GetValue(__self);
		public static void SetM_scale(this AzureUIController __self, UnityEngine.Vector3 value) => _m_scale.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AzureUIController>> _Update757602046 =
				new System.Lazy<MethodAccessor<AzureUIController>>(() => MethodAccessor<AzureUIController>.Create("Update"));

		public static void Update(this AzureUIController __self) => _Update757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_CameraRotation
	{

		private static readonly System.Lazy<FieldAccessor<CameraRotation, UnityEngine.Vector3>> _v3 =
				new System.Lazy<FieldAccessor<CameraRotation, UnityEngine.Vector3>>(() => FieldAccessor<CameraRotation, UnityEngine.Vector3>.Create("v3"));
		private static readonly System.Lazy<FieldAccessor<CameraRotation, UnityEngine.Vector3>> _p3 =
				new System.Lazy<FieldAccessor<CameraRotation, UnityEngine.Vector3>>(() => FieldAccessor<CameraRotation, UnityEngine.Vector3>.Create("p3"));
		private static readonly System.Lazy<FieldAccessor<CameraRotation, float>> _cameraZoon =
				new System.Lazy<FieldAccessor<CameraRotation, float>>(() => FieldAccessor<CameraRotation, float>.Create("cameraZoon"));

		public static UnityEngine.Vector3 GetV3(this CameraRotation __self) => _v3.Value.GetValue(__self);
		public static void SetV3(this CameraRotation __self, UnityEngine.Vector3 value) => _v3.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetP3(this CameraRotation __self) => _p3.Value.GetValue(__self);
		public static void SetP3(this CameraRotation __self, UnityEngine.Vector3 value) => _p3.Value.SetValue(__self, value);
		public static float GetCameraZoon(this CameraRotation __self) => _cameraZoon.Value.GetValue(__self);
		public static void SetCameraZoon(this CameraRotation __self, float value) => _cameraZoon.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<CameraRotation>> _Start757602046 =
				new System.Lazy<MethodAccessor<CameraRotation>>(() => MethodAccessor<CameraRotation>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<CameraRotation>> _LateUpdate757602046 =
				new System.Lazy<MethodAccessor<CameraRotation>>(() => MethodAccessor<CameraRotation>.Create("LateUpdate"));
		private static readonly System.Lazy<MethodAccessor<CameraRotation>> _clamp3429126434 =
				new System.Lazy<MethodAccessor<CameraRotation>>(() => MethodAccessor<CameraRotation>.Create("clamp", typeof(UnityEngine.Vector3)));

		public static void Start(this CameraRotation __self) => _Start757602046.Value.Invoke(__self);
		public static void LateUpdate(this CameraRotation __self) => _LateUpdate757602046.Value.Invoke(__self);
		public static UnityEngine.Vector3 clamp(this CameraRotation __self, UnityEngine.Vector3 v3) => (UnityEngine.Vector3)_clamp3429126434.Value.Invoke(__self, v3);

	}

	public static class PrivateAccessor_AnimatedProjector
	{

		private static readonly System.Lazy<FieldAccessor<AnimatedProjector, int>> _frameIndex =
				new System.Lazy<FieldAccessor<AnimatedProjector, int>>(() => FieldAccessor<AnimatedProjector, int>.Create("frameIndex"));
		private static readonly System.Lazy<FieldAccessor<AnimatedProjector, UnityEngine.Light>> _projector =
				new System.Lazy<FieldAccessor<AnimatedProjector, UnityEngine.Light>>(() => FieldAccessor<AnimatedProjector, UnityEngine.Light>.Create("projector"));

		public static int GetFrameIndex(this AnimatedProjector __self) => _frameIndex.Value.GetValue(__self);
		public static void SetFrameIndex(this AnimatedProjector __self, int value) => _frameIndex.Value.SetValue(__self, value);
		public static UnityEngine.Light GetProjector(this AnimatedProjector __self) => _projector.Value.GetValue(__self);
		public static void SetProjector(this AnimatedProjector __self, UnityEngine.Light value) => _projector.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AnimatedProjector>> _Awake757602046 =
				new System.Lazy<MethodAccessor<AnimatedProjector>>(() => MethodAccessor<AnimatedProjector>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<AnimatedProjector>> _NextFrame757602046 =
				new System.Lazy<MethodAccessor<AnimatedProjector>>(() => MethodAccessor<AnimatedProjector>.Create("NextFrame"));

		public static void Awake(this AnimatedProjector __self) => _Awake757602046.Value.Invoke(__self);
		public static void NextFrame(this AnimatedProjector __self) => _NextFrame757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_ListMeshVertCount
	{

		private static readonly System.Lazy<MethodAccessor<ListMeshVertCount>> _Update757602046 =
				new System.Lazy<MethodAccessor<ListMeshVertCount>>(() => MethodAccessor<ListMeshVertCount>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<ListMeshVertCount>> _ListVertCount757602046 =
				new System.Lazy<MethodAccessor<ListMeshVertCount>>(() => MethodAccessor<ListMeshVertCount>.Create("ListVertCount"));

		public static void Update(this ListMeshVertCount __self) => _Update757602046.Value.Invoke(__self);
		public static void ListVertCount(this ListMeshVertCount __self) => _ListVertCount757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_RaycastTest
	{

		private static readonly System.Lazy<FieldAccessor<RaycastTest, UnityEngine.RaycastHit>> _hitInfo =
				new System.Lazy<FieldAccessor<RaycastTest, UnityEngine.RaycastHit>>(() => FieldAccessor<RaycastTest, UnityEngine.RaycastHit>.Create("hitInfo"));

		public static UnityEngine.RaycastHit GetHitInfo(this RaycastTest __self) => _hitInfo.Value.GetValue(__self);
		public static void SetHitInfo(this RaycastTest __self, UnityEngine.RaycastHit value) => _hitInfo.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<RaycastTest>> _Update757602046 =
				new System.Lazy<MethodAccessor<RaycastTest>>(() => MethodAccessor<RaycastTest>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<RaycastTest>> _CreateTriangle757602046 =
				new System.Lazy<MethodAccessor<RaycastTest>>(() => MethodAccessor<RaycastTest>.Create("CreateTriangle"));
		private static readonly System.Lazy<MethodAccessor<RaycastTest>> _OnDrawGizmos757602046 =
				new System.Lazy<MethodAccessor<RaycastTest>>(() => MethodAccessor<RaycastTest>.Create("OnDrawGizmos"));

		public static void Update(this RaycastTest __self) => _Update757602046.Value.Invoke(__self);
		public static void CreateTriangle(this RaycastTest __self) => _CreateTriangle757602046.Value.Invoke(__self);
		public static void OnDrawGizmos(this RaycastTest __self) => _OnDrawGizmos757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_VisualizeMesh
	{

		private static readonly System.Lazy<FieldAccessor<VisualizeMesh, UnityEngine.MeshFilter>> _mf =
				new System.Lazy<FieldAccessor<VisualizeMesh, UnityEngine.MeshFilter>>(() => FieldAccessor<VisualizeMesh, UnityEngine.MeshFilter>.Create("mf"));
		private static readonly System.Lazy<FieldAccessor<VisualizeMesh, UnityEngine.Mesh>> _m =
				new System.Lazy<FieldAccessor<VisualizeMesh, UnityEngine.Mesh>>(() => FieldAccessor<VisualizeMesh, UnityEngine.Mesh>.Create("m"));

		public static UnityEngine.MeshFilter GetMf(this VisualizeMesh __self) => _mf.Value.GetValue(__self);
		public static void SetMf(this VisualizeMesh __self, UnityEngine.MeshFilter value) => _mf.Value.SetValue(__self, value);
		public static UnityEngine.Mesh GetM(this VisualizeMesh __self) => _m.Value.GetValue(__self);
		public static void SetM(this VisualizeMesh __self, UnityEngine.Mesh value) => _m.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<VisualizeMesh>> _OnDrawGizmosSelected757602046 =
				new System.Lazy<MethodAccessor<VisualizeMesh>>(() => MethodAccessor<VisualizeMesh>.Create("OnDrawGizmosSelected"));

		public static void OnDrawGizmosSelected(this VisualizeMesh __self) => _OnDrawGizmosSelected757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Voxelize
	{

		private static readonly System.Lazy<MethodAccessor<Voxelize>> _VoxelizeMesh1856183976 =
				new System.Lazy<MethodAccessor<Voxelize>>(() => MethodAccessor<Voxelize>.Create("VoxelizeMesh", typeof(UnityEngine.Transform), typeof(float), typeof(int)));
		private static readonly System.Lazy<MethodAccessor<Voxelize>> _OnDrawGizmos757602046 =
				new System.Lazy<MethodAccessor<Voxelize>>(() => MethodAccessor<Voxelize>.Create("OnDrawGizmos"));

		public static Voxelize.VoxelizedMesh VoxelizeMesh(this Voxelize __self, UnityEngine.Transform t, float voxelResolution, int voxelizeLayer) => (Voxelize.VoxelizedMesh)_VoxelizeMesh1856183976.Value.Invoke(__self, t, voxelResolution, voxelizeLayer);
		public static void OnDrawGizmos(this Voxelize __self) => _OnDrawGizmos757602046.Value.Invoke(__self);

	}

	public static class Private_Voxelize
	{

		private static readonly System.Lazy<StaticFieldAccessor<System.Byte[]>> _bits =
				new System.Lazy<StaticFieldAccessor<System.Byte[]>>(() => StaticFieldAccessor<System.Byte[]>.Create(typeof(Voxelize), "bits"));
		private static readonly System.Lazy<StaticFieldAccessor<System.Collections.Generic.Dictionary<UnityEngine.Mesh, Voxelize.VoxelizedMesh>>> _voxelizedLookup =
				new System.Lazy<StaticFieldAccessor<System.Collections.Generic.Dictionary<UnityEngine.Mesh, Voxelize.VoxelizedMesh>>>(() => StaticFieldAccessor<System.Collections.Generic.Dictionary<UnityEngine.Mesh, Voxelize.VoxelizedMesh>>.Create(typeof(Voxelize), "voxelizedLookup"));
		private static readonly System.Lazy<StaticFieldAccessor<System.Collections.Generic.List<float>>> _intersectList =
				new System.Lazy<StaticFieldAccessor<System.Collections.Generic.List<float>>>(() => StaticFieldAccessor<System.Collections.Generic.List<float>>.Create(typeof(Voxelize), "intersectList"));
		private static readonly System.Lazy<StaticFieldAccessor<byte>> _insideVoxel =
				new System.Lazy<StaticFieldAccessor<byte>>(() => StaticFieldAccessor<byte>.Create(typeof(Voxelize), "insideVoxel"));
		private static readonly System.Lazy<StaticFieldAccessor<byte>> _outsideVoxel =
				new System.Lazy<StaticFieldAccessor<byte>>(() => StaticFieldAccessor<byte>.Create(typeof(Voxelize), "outsideVoxel"));

		public static System.Byte[] GetBits() => _bits.Value.GetValue();
		public static void SetBits(System.Byte[] value) => _bits.Value.SetValue(value);
		public static System.Collections.Generic.Dictionary<UnityEngine.Mesh, Voxelize.VoxelizedMesh> GetVoxelizedLookup() => _voxelizedLookup.Value.GetValue();
		public static void SetVoxelizedLookup(System.Collections.Generic.Dictionary<UnityEngine.Mesh, Voxelize.VoxelizedMesh> value) => _voxelizedLookup.Value.SetValue(value);
		public static System.Collections.Generic.List<float> GetIntersectList() => _intersectList.Value.GetValue();
		public static void SetIntersectList(System.Collections.Generic.List<float> value) => _intersectList.Value.SetValue(value);
		public static byte GetInsideVoxel() => _insideVoxel.Value.GetValue();
		public static void SetInsideVoxel(byte value) => _insideVoxel.Value.SetValue(value);
		public static byte GetOutsideVoxel() => _outsideVoxel.Value.GetValue();
		public static void SetOutsideVoxel(byte value) => _outsideVoxel.Value.SetValue(value);

		private static readonly System.Lazy<StaticMethodAccessor> _PrintVector33429126434 =
				new System.Lazy<StaticMethodAccessor>(() => StaticMethodAccessor.Create(typeof(Voxelize), "PrintVector3", typeof(UnityEngine.Vector3)));
		private static readonly System.Lazy<StaticMethodAccessor> _MultiCast3348868286 =
				new System.Lazy<StaticMethodAccessor>(() => StaticMethodAccessor.Create(typeof(Voxelize), "MultiCast", typeof(UnityEngine.Ray), typeof(System.Collections.Generic.List<float>), typeof(float), typeof(float), typeof(UnityEngine.LayerMask)));
		private static readonly System.Lazy<StaticMethodAccessor> _Report3685557417 =
				new System.Lazy<StaticMethodAccessor>(() => StaticMethodAccessor.Create(typeof(Voxelize), "Report", typeof(Voxelize.VoxelizedMesh), typeof(float)));

		public static string PrintVector3(UnityEngine.Vector3 v) => (string)_PrintVector33429126434.Value.Invoke(v);
		public static void MultiCast(UnityEngine.Ray ray, System.Collections.Generic.List<float> points, float hitOffset, float maxDistance, UnityEngine.LayerMask voxelizeLayerMask) => _MultiCast3348868286.Value.Invoke(ray, points, hitOffset, maxDistance, voxelizeLayerMask);
		public static void Report(Voxelize.VoxelizedMesh vm, float voxelResolution) => _Report3685557417.Value.Invoke(vm, voxelResolution);

	}

	public static class PrivateAccessor_EnableChildrenMeshRenderers
	{

		private static readonly System.Lazy<MethodAccessor<EnableChildrenMeshRenderers>> _Update757602046 =
				new System.Lazy<MethodAccessor<EnableChildrenMeshRenderers>>(() => MethodAccessor<EnableChildrenMeshRenderers>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<EnableChildrenMeshRenderers>> _Execute757602046 =
				new System.Lazy<MethodAccessor<EnableChildrenMeshRenderers>>(() => MethodAccessor<EnableChildrenMeshRenderers>.Create("Execute"));

		public static void Update(this EnableChildrenMeshRenderers __self) => _Update757602046.Value.Invoke(__self);
		public static void Execute(this EnableChildrenMeshRenderers __self) => _Execute757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_ShadowDistance
	{

		private static readonly System.Lazy<MethodAccessor<ShadowDistance>> _Awake757602046 =
				new System.Lazy<MethodAccessor<ShadowDistance>>(() => MethodAccessor<ShadowDistance>.Create("Awake"));

		public static void Awake(this ShadowDistance __self) => _Awake757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AlphaHolePhysics_ExampleClass
	{

		private static readonly System.Lazy<MethodAccessor<AlphaHolePhysics.ExampleClass>> _Start757602046 =
				new System.Lazy<MethodAccessor<AlphaHolePhysics.ExampleClass>>(() => MethodAccessor<AlphaHolePhysics.ExampleClass>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<AlphaHolePhysics.ExampleClass>> _OnTriggerEnter3468606003 =
				new System.Lazy<MethodAccessor<AlphaHolePhysics.ExampleClass>>(() => MethodAccessor<AlphaHolePhysics.ExampleClass>.Create("OnTriggerEnter", typeof(UnityEngine.Collider)));
		private static readonly System.Lazy<MethodAccessor<AlphaHolePhysics.ExampleClass>> _OnTriggerExit3468606003 =
				new System.Lazy<MethodAccessor<AlphaHolePhysics.ExampleClass>>(() => MethodAccessor<AlphaHolePhysics.ExampleClass>.Create("OnTriggerExit", typeof(UnityEngine.Collider)));

		public static void Start(this AlphaHolePhysics.ExampleClass __self) => _Start757602046.Value.Invoke(__self);
		public static void OnTriggerEnter(this AlphaHolePhysics.ExampleClass __self, UnityEngine.Collider other) => _OnTriggerEnter3468606003.Value.Invoke(__self, other);
		public static void OnTriggerExit(this AlphaHolePhysics.ExampleClass __self, UnityEngine.Collider other) => _OnTriggerExit3468606003.Value.Invoke(__self, other);

	}

	public static class PrivateAccessor_MicroSplatObject
	{

		private static readonly System.Lazy<MethodAccessor<MicroSplatObject>> _ApplyMaps3430705070 =
				new System.Lazy<MethodAccessor<MicroSplatObject>>(() => MethodAccessor<MicroSplatObject>.Create("ApplyMaps", typeof(UnityEngine.Material)));
		private static readonly System.Lazy<MethodAccessor<MicroSplatObject>> _ApplyControlTextures487148652 =
				new System.Lazy<MethodAccessor<MicroSplatObject>>(() => MethodAccessor<MicroSplatObject>.Create("ApplyControlTextures", typeof(UnityEngine.Texture2D[]), typeof(UnityEngine.Material)));
		private static readonly System.Lazy<MethodAccessor<MicroSplatObject>> _SyncBlendMat3429126434 =
				new System.Lazy<MethodAccessor<MicroSplatObject>>(() => MethodAccessor<MicroSplatObject>.Create("SyncBlendMat", typeof(UnityEngine.Vector3)));
		private static readonly System.Lazy<MethodAccessor<MicroSplatObject>> _ApplyBlendMap757602046 =
				new System.Lazy<MethodAccessor<MicroSplatObject>>(() => MethodAccessor<MicroSplatObject>.Create("ApplyBlendMap"));

		public static void ApplyMaps(this MicroSplatObject __self, UnityEngine.Material m) => _ApplyMaps3430705070.Value.Invoke(__self, m);
		public static void ApplyControlTextures(this MicroSplatObject __self, UnityEngine.Texture2D[] controls, UnityEngine.Material m) => _ApplyControlTextures487148652.Value.Invoke(__self, controls, m);
		public static void SyncBlendMat(this MicroSplatObject __self, UnityEngine.Vector3 size) => _SyncBlendMat3429126434.Value.Invoke(__self, size);
		public static void ApplyBlendMap(this MicroSplatObject __self) => _ApplyBlendMap757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_MicroSplatPropData
	{

		private static readonly System.Lazy<FieldAccessor<MicroSplatPropData, UnityEngine.Texture2D>> _tex =
				new System.Lazy<FieldAccessor<MicroSplatPropData, UnityEngine.Texture2D>>(() => FieldAccessor<MicroSplatPropData, UnityEngine.Texture2D>.Create("tex"));
		private static readonly System.Lazy<FieldAccessor<MicroSplatPropData, UnityEngine.Texture2D>> _geoTex =
				new System.Lazy<FieldAccessor<MicroSplatPropData, UnityEngine.Texture2D>>(() => FieldAccessor<MicroSplatPropData, UnityEngine.Texture2D>.Create("geoTex"));

		public static UnityEngine.Texture2D GetTex(this MicroSplatPropData __self) => _tex.Value.GetValue(__self);
		public static void SetTex(this MicroSplatPropData __self, UnityEngine.Texture2D value) => _tex.Value.SetValue(__self, value);
		public static UnityEngine.Texture2D GetGeoTex(this MicroSplatPropData __self) => _geoTex.Value.GetValue(__self);
		public static void SetGeoTex(this MicroSplatPropData __self, UnityEngine.Texture2D value) => _geoTex.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<MicroSplatPropData>> _RevisionData757602046 =
				new System.Lazy<MethodAccessor<MicroSplatPropData>>(() => MethodAccessor<MicroSplatPropData>.Create("RevisionData"));

		public static void RevisionData(this MicroSplatPropData __self) => _RevisionData757602046.Value.Invoke(__self);

	}

	public static class Private_MicroSplatPropData
	{

		private static readonly System.Lazy<StaticFieldAccessor<int>> _sMaxTextures =
				new System.Lazy<StaticFieldAccessor<int>>(() => StaticFieldAccessor<int>.Create(typeof(MicroSplatPropData), "sMaxTextures"));

		public static int GetSMaxTextures() => _sMaxTextures.Value.GetValue();
		public static void SetSMaxTextures(int value) => _sMaxTextures.Value.SetValue(value);

	}

	public static class PrivateAccessor_MicroSplatTerrain
	{

		private static readonly System.Lazy<MethodAccessor<MicroSplatTerrain>> _Awake757602046 =
				new System.Lazy<MethodAccessor<MicroSplatTerrain>>(() => MethodAccessor<MicroSplatTerrain>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<MicroSplatTerrain>> _OnEnable757602046 =
				new System.Lazy<MethodAccessor<MicroSplatTerrain>>(() => MethodAccessor<MicroSplatTerrain>.Create("OnEnable"));
		private static readonly System.Lazy<MethodAccessor<MicroSplatTerrain>> _Start757602046 =
				new System.Lazy<MethodAccessor<MicroSplatTerrain>>(() => MethodAccessor<MicroSplatTerrain>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<MicroSplatTerrain>> _OnDisable757602046 =
				new System.Lazy<MethodAccessor<MicroSplatTerrain>>(() => MethodAccessor<MicroSplatTerrain>.Create("OnDisable"));
		private static readonly System.Lazy<MethodAccessor<MicroSplatTerrain>> _Cleanup757602046 =
				new System.Lazy<MethodAccessor<MicroSplatTerrain>>(() => MethodAccessor<MicroSplatTerrain>.Create("Cleanup"));

		public static void Awake(this MicroSplatTerrain __self) => _Awake757602046.Value.Invoke(__self);
		public static void OnEnable(this MicroSplatTerrain __self) => _OnEnable757602046.Value.Invoke(__self);
		public static void Start(this MicroSplatTerrain __self) => _Start757602046.Value.Invoke(__self);
		public static void OnDisable(this MicroSplatTerrain __self) => _OnDisable757602046.Value.Invoke(__self);
		public static void Cleanup(this MicroSplatTerrain __self) => _Cleanup757602046.Value.Invoke(__self);

	}

	public static class Private_MicroSplatTerrain
	{

		private static readonly System.Lazy<StaticFieldAccessor<System.Collections.Generic.List<MicroSplatTerrain>>> _sInstances =
				new System.Lazy<StaticFieldAccessor<System.Collections.Generic.List<MicroSplatTerrain>>>(() => StaticFieldAccessor<System.Collections.Generic.List<MicroSplatTerrain>>.Create(typeof(MicroSplatTerrain), "sInstances"));

		public static System.Collections.Generic.List<MicroSplatTerrain> GetSInstances() => _sInstances.Value.GetValue();
		public static void SetSInstances(System.Collections.Generic.List<MicroSplatTerrain> value) => _sInstances.Value.SetValue(value);

	}

	public static class PrivateAccessor_AI_Component
	{

		private static readonly System.Lazy<FieldAccessor<AI_Component, float>> _minimumSwitchStateCooldownOffsetT =
				new System.Lazy<FieldAccessor<AI_Component, float>>(() => FieldAccessor<AI_Component, float>.Create("minimumSwitchStateCooldownOffsetT"));
		private static readonly System.Lazy<FieldAccessor<AI_Component, float>> _maximumSwitchStateCooldownOffsetT =
				new System.Lazy<FieldAccessor<AI_Component, float>>(() => FieldAccessor<AI_Component, float>.Create("maximumSwitchStateCooldownOffsetT"));
		private static readonly System.Lazy<FieldAccessor<AI_Component, float>> _switchStateCooldown =
				new System.Lazy<FieldAccessor<AI_Component, float>>(() => FieldAccessor<AI_Component, float>.Create("switchStateCooldown"));
		private static readonly System.Lazy<FieldAccessor<AI_Component, float>> _switchStateTimeStamp =
				new System.Lazy<FieldAccessor<AI_Component, float>>(() => FieldAccessor<AI_Component, float>.Create("switchStateTimeStamp"));

		public static float GetMinimumSwitchStateCooldownOffsetT(this AI_Component __self) => _minimumSwitchStateCooldownOffsetT.Value.GetValue(__self);
		public static void SetMinimumSwitchStateCooldownOffsetT(this AI_Component __self, float value) => _minimumSwitchStateCooldownOffsetT.Value.SetValue(__self, value);
		public static float GetMaximumSwitchStateCooldownOffsetT(this AI_Component __self) => _maximumSwitchStateCooldownOffsetT.Value.GetValue(__self);
		public static void SetMaximumSwitchStateCooldownOffsetT(this AI_Component __self, float value) => _maximumSwitchStateCooldownOffsetT.Value.SetValue(__self, value);
		public static float GetSwitchStateCooldown(this AI_Component __self) => _switchStateCooldown.Value.GetValue(__self);
		public static void SetSwitchStateCooldown(this AI_Component __self, float value) => _switchStateCooldown.Value.SetValue(__self, value);
		public static float GetSwitchStateTimeStamp(this AI_Component __self) => _switchStateTimeStamp.Value.GetValue(__self);
		public static void SetSwitchStateTimeStamp(this AI_Component __self, float value) => _switchStateTimeStamp.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_Component>> _Awake757602046 =
				new System.Lazy<MethodAccessor<AI_Component>>(() => MethodAccessor<AI_Component>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<AI_Component>> _OnValidate757602046 =
				new System.Lazy<MethodAccessor<AI_Component>>(() => MethodAccessor<AI_Component>.Create("OnValidate"));
		private static readonly System.Lazy<MethodAccessor<AI_Component>> _Update757602046 =
				new System.Lazy<MethodAccessor<AI_Component>>(() => MethodAccessor<AI_Component>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<AI_Component>> _OnUpdateComponent757602046 =
				new System.Lazy<MethodAccessor<AI_Component>>(() => MethodAccessor<AI_Component>.Create("OnUpdateComponent"));
		private static readonly System.Lazy<MethodAccessor<AI_Component>> _SwitchState3428541017 =
				new System.Lazy<MethodAccessor<AI_Component>>(() => MethodAccessor<AI_Component>.Create("SwitchState", typeof(AI_State)));
		private static readonly System.Lazy<MethodAccessor<AI_Component>> _GetRandomCooldownTimeStamp757602046 =
				new System.Lazy<MethodAccessor<AI_Component>>(() => MethodAccessor<AI_Component>.Create("GetRandomCooldownTimeStamp"));

		public static void Awake(this AI_Component __self) => _Awake757602046.Value.Invoke(__self);
		public static void OnValidate(this AI_Component __self) => _OnValidate757602046.Value.Invoke(__self);
		public static void Update(this AI_Component __self) => _Update757602046.Value.Invoke(__self);
		public static void OnUpdateComponent(this AI_Component __self) => _OnUpdateComponent757602046.Value.Invoke(__self);
		public static bool SwitchState(this AI_Component __self, AI_State state) => (bool)_SwitchState3428541017.Value.Invoke(__self, state);
		public static float GetRandomCooldownTimeStamp(this AI_Component __self) => (float)_GetRandomCooldownTimeStamp757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AI_ComponentManager
	{

		private static readonly System.Lazy<FieldAccessor<AI_ComponentManager, bool>> _listenToDamageTaken =
				new System.Lazy<FieldAccessor<AI_ComponentManager, bool>>(() => FieldAccessor<AI_ComponentManager, bool>.Create("listenToDamageTaken"));
		private static readonly System.Lazy<FieldAccessor<AI_ComponentManager, Network_Entity>> _networkEntity =
				new System.Lazy<FieldAccessor<AI_ComponentManager, Network_Entity>>(() => FieldAccessor<AI_ComponentManager, Network_Entity>.Create("networkEntity"));
		private static readonly System.Lazy<FieldAccessor<AI_ComponentManager, INTERFACE_AI_Component_DamageTakenEvent[]>> _components_damageTakenEvent =
				new System.Lazy<FieldAccessor<AI_ComponentManager, INTERFACE_AI_Component_DamageTakenEvent[]>>(() => FieldAccessor<AI_ComponentManager, INTERFACE_AI_Component_DamageTakenEvent[]>.Create("components_damageTakenEvent"));
		private static readonly System.Lazy<FieldAccessor<AI_ComponentManager, AI_Component[]>> _components_all =
				new System.Lazy<FieldAccessor<AI_ComponentManager, AI_Component[]>>(() => FieldAccessor<AI_ComponentManager, AI_Component[]>.Create("components_all"));
		private static readonly System.Lazy<FieldAccessor<AI_ComponentManager, AI_StateMachine>> _stateMachine =
				new System.Lazy<FieldAccessor<AI_ComponentManager, AI_StateMachine>>(() => FieldAccessor<AI_ComponentManager, AI_StateMachine>.Create("stateMachine"));

		public static bool GetListenToDamageTaken(this AI_ComponentManager __self) => _listenToDamageTaken.Value.GetValue(__self);
		public static void SetListenToDamageTaken(this AI_ComponentManager __self, bool value) => _listenToDamageTaken.Value.SetValue(__self, value);
		public static Network_Entity GetNetworkEntity(this AI_ComponentManager __self) => _networkEntity.Value.GetValue(__self);
		public static void SetNetworkEntity(this AI_ComponentManager __self, Network_Entity value) => _networkEntity.Value.SetValue(__self, value);
		public static INTERFACE_AI_Component_DamageTakenEvent[] GetComponents_damageTakenEvent(this AI_ComponentManager __self) => _components_damageTakenEvent.Value.GetValue(__self);
		public static void SetComponents_damageTakenEvent(this AI_ComponentManager __self, INTERFACE_AI_Component_DamageTakenEvent[] value) => _components_damageTakenEvent.Value.SetValue(__self, value);
		public static AI_Component[] GetComponents_all(this AI_ComponentManager __self) => _components_all.Value.GetValue(__self);
		public static void SetComponents_all(this AI_ComponentManager __self, AI_Component[] value) => _components_all.Value.SetValue(__self, value);
		public static AI_StateMachine GetStateMachine(this AI_ComponentManager __self) => _stateMachine.Value.GetValue(__self);
		public static void SetStateMachine(this AI_ComponentManager __self, AI_StateMachine value) => _stateMachine.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_ComponentManager>> _Awake757602046 =
				new System.Lazy<MethodAccessor<AI_ComponentManager>>(() => MethodAccessor<AI_ComponentManager>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<AI_ComponentManager>> _OnEnterStateEvent3428541017 =
				new System.Lazy<MethodAccessor<AI_ComponentManager>>(() => MethodAccessor<AI_ComponentManager>.Create("OnEnterStateEvent", typeof(AI_State)));
		private static readonly System.Lazy<MethodAccessor<AI_ComponentManager>> _OnExitStateEvent3428541017 =
				new System.Lazy<MethodAccessor<AI_ComponentManager>>(() => MethodAccessor<AI_ComponentManager>.Create("OnExitStateEvent", typeof(AI_State)));
		private static readonly System.Lazy<MethodAccessor<AI_ComponentManager>> _OnDamageTakenEvent2475015728 =
				new System.Lazy<MethodAccessor<AI_ComponentManager>>(() => MethodAccessor<AI_ComponentManager>.Create("OnDamageTakenEvent", typeof(float), typeof(UnityEngine.Vector3), typeof(UnityEngine.Vector3), typeof(EntityType)));
		private static readonly System.Lazy<MethodAccessor<AI_ComponentManager>> _InitializeComponents757602046 =
				new System.Lazy<MethodAccessor<AI_ComponentManager>>(() => MethodAccessor<AI_ComponentManager>.Create("InitializeComponents"));

		public static void Awake(this AI_ComponentManager __self) => _Awake757602046.Value.Invoke(__self);
		public static void OnEnterStateEvent(this AI_ComponentManager __self, AI_State state) => _OnEnterStateEvent3428541017.Value.Invoke(__self, state);
		public static void OnExitStateEvent(this AI_ComponentManager __self, AI_State state) => _OnExitStateEvent3428541017.Value.Invoke(__self, state);
		public static void OnDamageTakenEvent(this AI_ComponentManager __self, float damage, UnityEngine.Vector3 hitPoint, UnityEngine.Vector3 hitNormal, EntityType damageInflictorEntityType) => _OnDamageTakenEvent2475015728.Value.Invoke(__self, damage, hitPoint, hitNormal, damageInflictorEntityType);
		public static void InitializeComponents(this AI_ComponentManager __self) => _InitializeComponents757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AI_Component_DamageTakenSwitchState
	{

		private static readonly System.Lazy<FieldAccessor<AI_Component_DamageTakenSwitchState, AI_State>> _damageTakenState =
				new System.Lazy<FieldAccessor<AI_Component_DamageTakenSwitchState, AI_State>>(() => FieldAccessor<AI_Component_DamageTakenSwitchState, AI_State>.Create("damageTakenState"));
		private static readonly System.Lazy<FieldAccessor<AI_Component_DamageTakenSwitchState, float>> _damageThreshold =
				new System.Lazy<FieldAccessor<AI_Component_DamageTakenSwitchState, float>>(() => FieldAccessor<AI_Component_DamageTakenSwitchState, float>.Create("damageThreshold"));
		private static readonly System.Lazy<FieldAccessor<AI_Component_DamageTakenSwitchState, float>> _damageTaken =
				new System.Lazy<FieldAccessor<AI_Component_DamageTakenSwitchState, float>>(() => FieldAccessor<AI_Component_DamageTakenSwitchState, float>.Create("damageTaken"));
		private static readonly System.Lazy<FieldAccessor<AI_Component_DamageTakenSwitchState, AI_State>> _playerNearbyState =
				new System.Lazy<FieldAccessor<AI_Component_DamageTakenSwitchState, AI_State>>(() => FieldAccessor<AI_Component_DamageTakenSwitchState, AI_State>.Create("playerNearbyState"));
		private static readonly System.Lazy<FieldAccessor<AI_Component_DamageTakenSwitchState, float>> _nearbyRadius =
				new System.Lazy<FieldAccessor<AI_Component_DamageTakenSwitchState, float>>(() => FieldAccessor<AI_Component_DamageTakenSwitchState, float>.Create("nearbyRadius"));

		public static AI_State GetDamageTakenState(this AI_Component_DamageTakenSwitchState __self) => _damageTakenState.Value.GetValue(__self);
		public static void SetDamageTakenState(this AI_Component_DamageTakenSwitchState __self, AI_State value) => _damageTakenState.Value.SetValue(__self, value);
		public static float GetDamageThreshold(this AI_Component_DamageTakenSwitchState __self) => _damageThreshold.Value.GetValue(__self);
		public static void SetDamageThreshold(this AI_Component_DamageTakenSwitchState __self, float value) => _damageThreshold.Value.SetValue(__self, value);
		public static float GetDamageTaken(this AI_Component_DamageTakenSwitchState __self) => _damageTaken.Value.GetValue(__self);
		public static void SetDamageTaken(this AI_Component_DamageTakenSwitchState __self, float value) => _damageTaken.Value.SetValue(__self, value);
		public static AI_State GetPlayerNearbyState(this AI_Component_DamageTakenSwitchState __self) => _playerNearbyState.Value.GetValue(__self);
		public static void SetPlayerNearbyState(this AI_Component_DamageTakenSwitchState __self, AI_State value) => _playerNearbyState.Value.SetValue(__self, value);
		public static float GetNearbyRadius(this AI_Component_DamageTakenSwitchState __self) => _nearbyRadius.Value.GetValue(__self);
		public static void SetNearbyRadius(this AI_Component_DamageTakenSwitchState __self, float value) => _nearbyRadius.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_AI_Component_Delta_Animation
	{

		private static readonly System.Lazy<FieldAccessor<AI_Component_Delta_Animation, AI_Movement>> _movement =
				new System.Lazy<FieldAccessor<AI_Component_Delta_Animation, AI_Movement>>(() => FieldAccessor<AI_Component_Delta_Animation, AI_Movement>.Create("movement"));
		private static readonly System.Lazy<FieldAccessor<AI_Component_Delta_Animation, UnityEngine.Animator>> _animator =
				new System.Lazy<FieldAccessor<AI_Component_Delta_Animation, UnityEngine.Animator>>(() => FieldAccessor<AI_Component_Delta_Animation, UnityEngine.Animator>.Create("animator"));
		private static readonly System.Lazy<FieldAccessor<AI_Component_Delta_Animation, string>> _paramName =
				new System.Lazy<FieldAccessor<AI_Component_Delta_Animation, string>>(() => FieldAccessor<AI_Component_Delta_Animation, string>.Create("paramName"));
		private static readonly System.Lazy<FieldAccessor<AI_Component_Delta_Animation, Interval_Float>> _minMaxAnimValue =
				new System.Lazy<FieldAccessor<AI_Component_Delta_Animation, Interval_Float>>(() => FieldAccessor<AI_Component_Delta_Animation, Interval_Float>.Create("minMaxAnimValue"));
		private static readonly System.Lazy<FieldAccessor<AI_Component_Delta_Animation, float>> _stateMaxMovementSpeed =
				new System.Lazy<FieldAccessor<AI_Component_Delta_Animation, float>>(() => FieldAccessor<AI_Component_Delta_Animation, float>.Create("stateMaxMovementSpeed"));

		public static AI_Movement GetMovement(this AI_Component_Delta_Animation __self) => _movement.Value.GetValue(__self);
		public static void SetMovement(this AI_Component_Delta_Animation __self, AI_Movement value) => _movement.Value.SetValue(__self, value);
		public static UnityEngine.Animator GetAnimator(this AI_Component_Delta_Animation __self) => _animator.Value.GetValue(__self);
		public static void SetAnimator(this AI_Component_Delta_Animation __self, UnityEngine.Animator value) => _animator.Value.SetValue(__self, value);
		public static string GetParamName(this AI_Component_Delta_Animation __self) => _paramName.Value.GetValue(__self);
		public static void SetParamName(this AI_Component_Delta_Animation __self, string value) => _paramName.Value.SetValue(__self, value);
		public static Interval_Float GetMinMaxAnimValue(this AI_Component_Delta_Animation __self) => _minMaxAnimValue.Value.GetValue(__self);
		public static void SetMinMaxAnimValue(this AI_Component_Delta_Animation __self, Interval_Float value) => _minMaxAnimValue.Value.SetValue(__self, value);
		public static float GetStateMaxMovementSpeed(this AI_Component_Delta_Animation __self) => _stateMaxMovementSpeed.Value.GetValue(__self);
		public static void SetStateMaxMovementSpeed(this AI_Component_Delta_Animation __self, float value) => _stateMaxMovementSpeed.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_Component_Delta_Animation>> _OnValidate757602046 =
				new System.Lazy<MethodAccessor<AI_Component_Delta_Animation>>(() => MethodAccessor<AI_Component_Delta_Animation>.Create("OnValidate"));
		private static readonly System.Lazy<MethodAccessor<AI_Component_Delta_Animation>> _OnUpdateComponent757602046 =
				new System.Lazy<MethodAccessor<AI_Component_Delta_Animation>>(() => MethodAccessor<AI_Component_Delta_Animation>.Create("OnUpdateComponent"));

		public static void OnValidate(this AI_Component_Delta_Animation __self) => _OnValidate757602046.Value.Invoke(__self);
		public static void OnUpdateComponent(this AI_Component_Delta_Animation __self) => _OnUpdateComponent757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AI_Component_SeePlayerSwitchState
	{

		private static readonly System.Lazy<FieldAccessor<AI_Component_SeePlayerSwitchState, AI_State>> _detectPlayerState =
				new System.Lazy<FieldAccessor<AI_Component_SeePlayerSwitchState, AI_State>>(() => FieldAccessor<AI_Component_SeePlayerSwitchState, AI_State>.Create("detectPlayerState"));
		private static readonly System.Lazy<FieldAccessor<AI_Component_SeePlayerSwitchState, float>> _detectPlayerRadius =
				new System.Lazy<FieldAccessor<AI_Component_SeePlayerSwitchState, float>>(() => FieldAccessor<AI_Component_SeePlayerSwitchState, float>.Create("detectPlayerRadius"));
		private static readonly System.Lazy<FieldAccessor<AI_Component_SeePlayerSwitchState, float>> _detectInterval =
				new System.Lazy<FieldAccessor<AI_Component_SeePlayerSwitchState, float>>(() => FieldAccessor<AI_Component_SeePlayerSwitchState, float>.Create("detectInterval"));
		private static readonly System.Lazy<FieldAccessor<AI_Component_SeePlayerSwitchState, bool>> _useRaycast =
				new System.Lazy<FieldAccessor<AI_Component_SeePlayerSwitchState, bool>>(() => FieldAccessor<AI_Component_SeePlayerSwitchState, bool>.Create("useRaycast"));
		private static readonly System.Lazy<FieldAccessor<AI_Component_SeePlayerSwitchState, UnityEngine.LayerMask>> _obstructionMask =
				new System.Lazy<FieldAccessor<AI_Component_SeePlayerSwitchState, UnityEngine.LayerMask>>(() => FieldAccessor<AI_Component_SeePlayerSwitchState, UnityEngine.LayerMask>.Create("obstructionMask"));
		private static readonly System.Lazy<FieldAccessor<AI_Component_SeePlayerSwitchState, float>> _detectionRayCastRadius =
				new System.Lazy<FieldAccessor<AI_Component_SeePlayerSwitchState, float>>(() => FieldAccessor<AI_Component_SeePlayerSwitchState, float>.Create("detectionRayCastRadius"));
		private static readonly System.Lazy<FieldAccessor<AI_Component_SeePlayerSwitchState, bool>> _closesPlayer =
				new System.Lazy<FieldAccessor<AI_Component_SeePlayerSwitchState, bool>>(() => FieldAccessor<AI_Component_SeePlayerSwitchState, bool>.Create("closesPlayer"));
		private static readonly System.Lazy<FieldAccessor<AI_Component_SeePlayerSwitchState, AI_NetworkBehaviour>> _behaviour =
				new System.Lazy<FieldAccessor<AI_Component_SeePlayerSwitchState, AI_NetworkBehaviour>>(() => FieldAccessor<AI_Component_SeePlayerSwitchState, AI_NetworkBehaviour>.Create("behaviour"));
		private static readonly System.Lazy<FieldAccessor<AI_Component_SeePlayerSwitchState, float>> _detectTimer =
				new System.Lazy<FieldAccessor<AI_Component_SeePlayerSwitchState, float>>(() => FieldAccessor<AI_Component_SeePlayerSwitchState, float>.Create("detectTimer"));
		private static readonly System.Lazy<FieldAccessor<AI_Component_SeePlayerSwitchState, bool>> _isThisTamed =
				new System.Lazy<FieldAccessor<AI_Component_SeePlayerSwitchState, bool>>(() => FieldAccessor<AI_Component_SeePlayerSwitchState, bool>.Create("isThisTamed"));
		private static readonly System.Lazy<FieldAccessor<AI_Component_SeePlayerSwitchState, Network_Player>> _calculationPlayer =
				new System.Lazy<FieldAccessor<AI_Component_SeePlayerSwitchState, Network_Player>>(() => FieldAccessor<AI_Component_SeePlayerSwitchState, Network_Player>.Create("calculationPlayer"));

		public static AI_State GetDetectPlayerState(this AI_Component_SeePlayerSwitchState __self) => _detectPlayerState.Value.GetValue(__self);
		public static void SetDetectPlayerState(this AI_Component_SeePlayerSwitchState __self, AI_State value) => _detectPlayerState.Value.SetValue(__self, value);
		public static float GetDetectPlayerRadius(this AI_Component_SeePlayerSwitchState __self) => _detectPlayerRadius.Value.GetValue(__self);
		public static void SetDetectPlayerRadius(this AI_Component_SeePlayerSwitchState __self, float value) => _detectPlayerRadius.Value.SetValue(__self, value);
		public static float GetDetectInterval(this AI_Component_SeePlayerSwitchState __self) => _detectInterval.Value.GetValue(__self);
		public static void SetDetectInterval(this AI_Component_SeePlayerSwitchState __self, float value) => _detectInterval.Value.SetValue(__self, value);
		public static bool GetUseRaycast(this AI_Component_SeePlayerSwitchState __self) => _useRaycast.Value.GetValue(__self);
		public static void SetUseRaycast(this AI_Component_SeePlayerSwitchState __self, bool value) => _useRaycast.Value.SetValue(__self, value);
		public static UnityEngine.LayerMask GetObstructionMask(this AI_Component_SeePlayerSwitchState __self) => _obstructionMask.Value.GetValue(__self);
		public static void SetObstructionMask(this AI_Component_SeePlayerSwitchState __self, UnityEngine.LayerMask value) => _obstructionMask.Value.SetValue(__self, value);
		public static float GetDetectionRayCastRadius(this AI_Component_SeePlayerSwitchState __self) => _detectionRayCastRadius.Value.GetValue(__self);
		public static void SetDetectionRayCastRadius(this AI_Component_SeePlayerSwitchState __self, float value) => _detectionRayCastRadius.Value.SetValue(__self, value);
		public static bool GetClosesPlayer(this AI_Component_SeePlayerSwitchState __self) => _closesPlayer.Value.GetValue(__self);
		public static void SetClosesPlayer(this AI_Component_SeePlayerSwitchState __self, bool value) => _closesPlayer.Value.SetValue(__self, value);
		public static AI_NetworkBehaviour GetBehaviour(this AI_Component_SeePlayerSwitchState __self) => _behaviour.Value.GetValue(__self);
		public static void SetBehaviour(this AI_Component_SeePlayerSwitchState __self, AI_NetworkBehaviour value) => _behaviour.Value.SetValue(__self, value);
		public static float GetDetectTimer(this AI_Component_SeePlayerSwitchState __self) => _detectTimer.Value.GetValue(__self);
		public static void SetDetectTimer(this AI_Component_SeePlayerSwitchState __self, float value) => _detectTimer.Value.SetValue(__self, value);
		public static bool GetIsThisTamed(this AI_Component_SeePlayerSwitchState __self) => _isThisTamed.Value.GetValue(__self);
		public static void SetIsThisTamed(this AI_Component_SeePlayerSwitchState __self, bool value) => _isThisTamed.Value.SetValue(__self, value);
		public static Network_Player GetCalculationPlayer(this AI_Component_SeePlayerSwitchState __self) => _calculationPlayer.Value.GetValue(__self);
		public static void SetCalculationPlayer(this AI_Component_SeePlayerSwitchState __self, Network_Player value) => _calculationPlayer.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_Component_SeePlayerSwitchState>> _OnUpdateComponent757602046 =
				new System.Lazy<MethodAccessor<AI_Component_SeePlayerSwitchState>>(() => MethodAccessor<AI_Component_SeePlayerSwitchState>.Create("OnUpdateComponent"));
		private static readonly System.Lazy<MethodAccessor<AI_Component_SeePlayerSwitchState>> _OnSeePlayerSwitchState3461878659 =
				new System.Lazy<MethodAccessor<AI_Component_SeePlayerSwitchState>>(() => MethodAccessor<AI_Component_SeePlayerSwitchState>.Create("OnSeePlayerSwitchState", typeof(Network_Player)));
		private static readonly System.Lazy<MethodAccessor<AI_Component_SeePlayerSwitchState>> _GetNearbyPlayer3450040886 =
				new System.Lazy<MethodAccessor<AI_Component_SeePlayerSwitchState>>(() => MethodAccessor<AI_Component_SeePlayerSwitchState>.Create("GetNearbyPlayer", typeof(bool)));

		public static void OnUpdateComponent(this AI_Component_SeePlayerSwitchState __self) => _OnUpdateComponent757602046.Value.Invoke(__self);
		public static void OnSeePlayerSwitchState(this AI_Component_SeePlayerSwitchState __self, Network_Player playerReference) => _OnSeePlayerSwitchState3461878659.Value.Invoke(__self, playerReference);
		public static Network_Player GetNearbyPlayer(this AI_Component_SeePlayerSwitchState __self, bool closest) => (Network_Player)_GetNearbyPlayer3450040886.Value.Invoke(__self, closest);

	}

	public static class PrivateAccessor_AI_Component_TimerSwitchState
	{

		private static readonly System.Lazy<FieldAccessor<AI_Component_TimerSwitchState, TimerEventer>> _timer =
				new System.Lazy<FieldAccessor<AI_Component_TimerSwitchState, TimerEventer>>(() => FieldAccessor<AI_Component_TimerSwitchState, TimerEventer>.Create("timer"));
		private static readonly System.Lazy<FieldAccessor<AI_Component_TimerSwitchState, AI_State>> _nextState =
				new System.Lazy<FieldAccessor<AI_Component_TimerSwitchState, AI_State>>(() => FieldAccessor<AI_Component_TimerSwitchState, AI_State>.Create("nextState"));

		public static TimerEventer GetTimer(this AI_Component_TimerSwitchState __self) => _timer.Value.GetValue(__self);
		public static void SetTimer(this AI_Component_TimerSwitchState __self, TimerEventer value) => _timer.Value.SetValue(__self, value);
		public static AI_State GetNextState(this AI_Component_TimerSwitchState __self) => _nextState.Value.GetValue(__self);
		public static void SetNextState(this AI_Component_TimerSwitchState __self, AI_State value) => _nextState.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_Component_TimerSwitchState>> _OnUpdateComponent757602046 =
				new System.Lazy<MethodAccessor<AI_Component_TimerSwitchState>>(() => MethodAccessor<AI_Component_TimerSwitchState>.Create("OnUpdateComponent"));

		public static void OnUpdateComponent(this AI_Component_TimerSwitchState __self) => _OnUpdateComponent757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AI_DetectObstructionSwitchState
	{

		private static readonly System.Lazy<FieldAccessor<AI_DetectObstructionSwitchState, AI_StateMachine>> _stateMachine =
				new System.Lazy<FieldAccessor<AI_DetectObstructionSwitchState, AI_StateMachine>>(() => FieldAccessor<AI_DetectObstructionSwitchState, AI_StateMachine>.Create("stateMachine"));
		private static readonly System.Lazy<FieldAccessor<AI_DetectObstructionSwitchState, TimerEventer>> _rayTimer =
				new System.Lazy<FieldAccessor<AI_DetectObstructionSwitchState, TimerEventer>>(() => FieldAccessor<AI_DetectObstructionSwitchState, TimerEventer>.Create("rayTimer"));
		private static readonly System.Lazy<FieldAccessor<AI_DetectObstructionSwitchState, UnityEngine.LayerMask>> _rayMask =
				new System.Lazy<FieldAccessor<AI_DetectObstructionSwitchState, UnityEngine.LayerMask>>(() => FieldAccessor<AI_DetectObstructionSwitchState, UnityEngine.LayerMask>.Create("rayMask"));
		private static readonly System.Lazy<FieldAccessor<AI_DetectObstructionSwitchState, float>> _rayLength =
				new System.Lazy<FieldAccessor<AI_DetectObstructionSwitchState, float>>(() => FieldAccessor<AI_DetectObstructionSwitchState, float>.Create("rayLength"));
		private static readonly System.Lazy<FieldAccessor<AI_DetectObstructionSwitchState, float>> _rayRadius =
				new System.Lazy<FieldAccessor<AI_DetectObstructionSwitchState, float>>(() => FieldAccessor<AI_DetectObstructionSwitchState, float>.Create("rayRadius"));
		private static readonly System.Lazy<FieldAccessor<AI_DetectObstructionSwitchState, UnityEngine.Vector3>> _localRayDirection =
				new System.Lazy<FieldAccessor<AI_DetectObstructionSwitchState, UnityEngine.Vector3>>(() => FieldAccessor<AI_DetectObstructionSwitchState, UnityEngine.Vector3>.Create("localRayDirection"));
		private static readonly System.Lazy<FieldAccessor<AI_DetectObstructionSwitchState, AI_State>> _rayHitState =
				new System.Lazy<FieldAccessor<AI_DetectObstructionSwitchState, AI_State>>(() => FieldAccessor<AI_DetectObstructionSwitchState, AI_State>.Create("rayHitState"));
		private static readonly System.Lazy<FieldAccessor<AI_DetectObstructionSwitchState, System.Collections.Generic.List<AI_State>>> _castRayStates =
				new System.Lazy<FieldAccessor<AI_DetectObstructionSwitchState, System.Collections.Generic.List<AI_State>>>(() => FieldAccessor<AI_DetectObstructionSwitchState, System.Collections.Generic.List<AI_State>>.Create("castRayStates"));

		public static AI_StateMachine GetStateMachine(this AI_DetectObstructionSwitchState __self) => _stateMachine.Value.GetValue(__self);
		public static void SetStateMachine(this AI_DetectObstructionSwitchState __self, AI_StateMachine value) => _stateMachine.Value.SetValue(__self, value);
		public static TimerEventer GetRayTimer(this AI_DetectObstructionSwitchState __self) => _rayTimer.Value.GetValue(__self);
		public static void SetRayTimer(this AI_DetectObstructionSwitchState __self, TimerEventer value) => _rayTimer.Value.SetValue(__self, value);
		public static UnityEngine.LayerMask GetRayMask(this AI_DetectObstructionSwitchState __self) => _rayMask.Value.GetValue(__self);
		public static void SetRayMask(this AI_DetectObstructionSwitchState __self, UnityEngine.LayerMask value) => _rayMask.Value.SetValue(__self, value);
		public static float GetRayLength(this AI_DetectObstructionSwitchState __self) => _rayLength.Value.GetValue(__self);
		public static void SetRayLength(this AI_DetectObstructionSwitchState __self, float value) => _rayLength.Value.SetValue(__self, value);
		public static float GetRayRadius(this AI_DetectObstructionSwitchState __self) => _rayRadius.Value.GetValue(__self);
		public static void SetRayRadius(this AI_DetectObstructionSwitchState __self, float value) => _rayRadius.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetLocalRayDirection(this AI_DetectObstructionSwitchState __self) => _localRayDirection.Value.GetValue(__self);
		public static void SetLocalRayDirection(this AI_DetectObstructionSwitchState __self, UnityEngine.Vector3 value) => _localRayDirection.Value.SetValue(__self, value);
		public static AI_State GetRayHitState(this AI_DetectObstructionSwitchState __self) => _rayHitState.Value.GetValue(__self);
		public static void SetRayHitState(this AI_DetectObstructionSwitchState __self, AI_State value) => _rayHitState.Value.SetValue(__self, value);
		public static System.Collections.Generic.List<AI_State> GetCastRayStates(this AI_DetectObstructionSwitchState __self) => _castRayStates.Value.GetValue(__self);
		public static void SetCastRayStates(this AI_DetectObstructionSwitchState __self, System.Collections.Generic.List<AI_State> value) => _castRayStates.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_DetectObstructionSwitchState>> _Update757602046 =
				new System.Lazy<MethodAccessor<AI_DetectObstructionSwitchState>>(() => MethodAccessor<AI_DetectObstructionSwitchState>.Create("Update"));

		public static void Update(this AI_DetectObstructionSwitchState __self) => _Update757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AI_DetectRaftCloseToLandmark
	{

		private static readonly System.Lazy<FieldAccessor<AI_DetectRaftCloseToLandmark, AI_StateMachine>> _stateMachine =
				new System.Lazy<FieldAccessor<AI_DetectRaftCloseToLandmark, AI_StateMachine>>(() => FieldAccessor<AI_DetectRaftCloseToLandmark, AI_StateMachine>.Create("stateMachine"));
		private static readonly System.Lazy<FieldAccessor<AI_DetectRaftCloseToLandmark, TimerEventer>> _checkTimer =
				new System.Lazy<FieldAccessor<AI_DetectRaftCloseToLandmark, TimerEventer>>(() => FieldAccessor<AI_DetectRaftCloseToLandmark, TimerEventer>.Create("checkTimer"));
		private static readonly System.Lazy<FieldAccessor<AI_DetectRaftCloseToLandmark, AI_State>> _nextState =
				new System.Lazy<FieldAccessor<AI_DetectRaftCloseToLandmark, AI_State>>(() => FieldAccessor<AI_DetectRaftCloseToLandmark, AI_State>.Create("nextState"));
		private static readonly System.Lazy<FieldAccessor<AI_DetectRaftCloseToLandmark, System.Collections.Generic.List<AI_State>>> _statesToCheckIn =
				new System.Lazy<FieldAccessor<AI_DetectRaftCloseToLandmark, System.Collections.Generic.List<AI_State>>>(() => FieldAccessor<AI_DetectRaftCloseToLandmark, System.Collections.Generic.List<AI_State>>.Create("statesToCheckIn"));

		public static AI_StateMachine GetStateMachine(this AI_DetectRaftCloseToLandmark __self) => _stateMachine.Value.GetValue(__self);
		public static void SetStateMachine(this AI_DetectRaftCloseToLandmark __self, AI_StateMachine value) => _stateMachine.Value.SetValue(__self, value);
		public static TimerEventer GetCheckTimer(this AI_DetectRaftCloseToLandmark __self) => _checkTimer.Value.GetValue(__self);
		public static void SetCheckTimer(this AI_DetectRaftCloseToLandmark __self, TimerEventer value) => _checkTimer.Value.SetValue(__self, value);
		public static AI_State GetNextState(this AI_DetectRaftCloseToLandmark __self) => _nextState.Value.GetValue(__self);
		public static void SetNextState(this AI_DetectRaftCloseToLandmark __self, AI_State value) => _nextState.Value.SetValue(__self, value);
		public static System.Collections.Generic.List<AI_State> GetStatesToCheckIn(this AI_DetectRaftCloseToLandmark __self) => _statesToCheckIn.Value.GetValue(__self);
		public static void SetStatesToCheckIn(this AI_DetectRaftCloseToLandmark __self, System.Collections.Generic.List<AI_State> value) => _statesToCheckIn.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_DetectRaftCloseToLandmark>> _Update757602046 =
				new System.Lazy<MethodAccessor<AI_DetectRaftCloseToLandmark>>(() => MethodAccessor<AI_DetectRaftCloseToLandmark>.Create("Update"));

		public static void Update(this AI_DetectRaftCloseToLandmark __self) => _Update757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AI_Interest
	{

		private static readonly System.Lazy<FieldAccessor<AI_Interest, System.Collections.Generic.List<InterestPoint>>> __interestPoints =
				new System.Lazy<FieldAccessor<AI_Interest, System.Collections.Generic.List<InterestPoint>>>(() => FieldAccessor<AI_Interest, System.Collections.Generic.List<InterestPoint>>.Create("_interestPoints"));

		public static System.Collections.Generic.List<InterestPoint> Get_interestPoints(this AI_Interest __self) => __interestPoints.Value.GetValue(__self);
		public static void Set_interestPoints(this AI_Interest __self, System.Collections.Generic.List<InterestPoint> value) => __interestPoints.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_Interest>> _OnValidate757602046 =
				new System.Lazy<MethodAccessor<AI_Interest>>(() => MethodAccessor<AI_Interest>.Create("OnValidate"));
		private static readonly System.Lazy<MethodAccessor<AI_Interest>> _Start757602046 =
				new System.Lazy<MethodAccessor<AI_Interest>>(() => MethodAccessor<AI_Interest>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<AI_Interest>> _OnEnter3468606003 =
				new System.Lazy<MethodAccessor<AI_Interest>>(() => MethodAccessor<AI_Interest>.Create("OnEnter", typeof(UnityEngine.Collider)));
		private static readonly System.Lazy<MethodAccessor<AI_Interest>> _OnExit3468606003 =
				new System.Lazy<MethodAccessor<AI_Interest>>(() => MethodAccessor<AI_Interest>.Create("OnExit", typeof(UnityEngine.Collider)));

		public static void OnValidate(this AI_Interest __self) => _OnValidate757602046.Value.Invoke(__self);
		public static void Start(this AI_Interest __self) => _Start757602046.Value.Invoke(__self);
		public static void OnEnter(this AI_Interest __self, UnityEngine.Collider other) => _OnEnter3468606003.Value.Invoke(__self, other);
		public static void OnExit(this AI_Interest __self, UnityEngine.Collider other) => _OnExit3468606003.Value.Invoke(__self, other);

	}

	public static class PrivateAccessor_AI_State_InteractWithInterest
	{

		private static readonly System.Lazy<FieldAccessor<AI_State_InteractWithInterest, AI_State>> _exitState =
				new System.Lazy<FieldAccessor<AI_State_InteractWithInterest, AI_State>>(() => FieldAccessor<AI_State_InteractWithInterest, AI_State>.Create("exitState"));
		private static readonly System.Lazy<FieldAccessor<AI_State_InteractWithInterest, AnimatorController>> _animatorController =
				new System.Lazy<FieldAccessor<AI_State_InteractWithInterest, AnimatorController>>(() => FieldAccessor<AI_State_InteractWithInterest, AnimatorController>.Create("animatorController"));
		private static readonly System.Lazy<FieldAccessor<AI_State_InteractWithInterest, AI_Dialogue>> _dialogue =
				new System.Lazy<FieldAccessor<AI_State_InteractWithInterest, AI_Dialogue>>(() => FieldAccessor<AI_State_InteractWithInterest, AI_Dialogue>.Create("dialogue"));
		private static readonly System.Lazy<FieldAccessor<AI_State_InteractWithInterest, float>> _movementSpeed =
				new System.Lazy<FieldAccessor<AI_State_InteractWithInterest, float>>(() => FieldAccessor<AI_State_InteractWithInterest, float>.Create("movementSpeed"));
		private static readonly System.Lazy<FieldAccessor<AI_State_InteractWithInterest, float>> _rotationSpeed =
				new System.Lazy<FieldAccessor<AI_State_InteractWithInterest, float>>(() => FieldAccessor<AI_State_InteractWithInterest, float>.Create("rotationSpeed"));
		private static readonly System.Lazy<FieldAccessor<AI_State_InteractWithInterest, float>> _minValidRotationAngle =
				new System.Lazy<FieldAccessor<AI_State_InteractWithInterest, float>>(() => FieldAccessor<AI_State_InteractWithInterest, float>.Create("minValidRotationAngle"));
		private static readonly System.Lazy<FieldAccessor<AI_State_InteractWithInterest, float>> _animationLerpSpeed =
				new System.Lazy<FieldAccessor<AI_State_InteractWithInterest, float>>(() => FieldAccessor<AI_State_InteractWithInterest, float>.Create("animationLerpSpeed"));
		private static readonly System.Lazy<FieldAccessor<AI_State_InteractWithInterest, AI_Statemachine_NPC>> _statemachineNPC =
				new System.Lazy<FieldAccessor<AI_State_InteractWithInterest, AI_Statemachine_NPC>>(() => FieldAccessor<AI_State_InteractWithInterest, AI_Statemachine_NPC>.Create("statemachineNPC"));
		private static readonly System.Lazy<FieldAccessor<AI_State_InteractWithInterest, InterestPoint>> _aiInterest =
				new System.Lazy<FieldAccessor<AI_State_InteractWithInterest, InterestPoint>>(() => FieldAccessor<AI_State_InteractWithInterest, InterestPoint>.Create("aiInterest"));
		private static readonly System.Lazy<FieldAccessor<AI_State_InteractWithInterest, float>> _interactTimer =
				new System.Lazy<FieldAccessor<AI_State_InteractWithInterest, float>>(() => FieldAccessor<AI_State_InteractWithInterest, float>.Create("interactTimer"));
		private static readonly System.Lazy<FieldAccessor<AI_State_InteractWithInterest, UnityEngine.Vector3>> _stateMachineEntryPosition =
				new System.Lazy<FieldAccessor<AI_State_InteractWithInterest, UnityEngine.Vector3>>(() => FieldAccessor<AI_State_InteractWithInterest, UnityEngine.Vector3>.Create("stateMachineEntryPosition"));
		private static readonly System.Lazy<FieldAccessor<AI_State_InteractWithInterest, UnityEngine.Transform>> _handItem =
				new System.Lazy<FieldAccessor<AI_State_InteractWithInterest, UnityEngine.Transform>>(() => FieldAccessor<AI_State_InteractWithInterest, UnityEngine.Transform>.Create("handItem"));

		public static AI_State GetExitState(this AI_State_InteractWithInterest __self) => _exitState.Value.GetValue(__self);
		public static void SetExitState(this AI_State_InteractWithInterest __self, AI_State value) => _exitState.Value.SetValue(__self, value);
		public static AnimatorController GetAnimatorController(this AI_State_InteractWithInterest __self) => _animatorController.Value.GetValue(__self);
		public static void SetAnimatorController(this AI_State_InteractWithInterest __self, AnimatorController value) => _animatorController.Value.SetValue(__self, value);
		public static AI_Dialogue GetDialogue(this AI_State_InteractWithInterest __self) => _dialogue.Value.GetValue(__self);
		public static void SetDialogue(this AI_State_InteractWithInterest __self, AI_Dialogue value) => _dialogue.Value.SetValue(__self, value);
		public static float GetMovementSpeed(this AI_State_InteractWithInterest __self) => _movementSpeed.Value.GetValue(__self);
		public static void SetMovementSpeed(this AI_State_InteractWithInterest __self, float value) => _movementSpeed.Value.SetValue(__self, value);
		public static float GetRotationSpeed(this AI_State_InteractWithInterest __self) => _rotationSpeed.Value.GetValue(__self);
		public static void SetRotationSpeed(this AI_State_InteractWithInterest __self, float value) => _rotationSpeed.Value.SetValue(__self, value);
		public static float GetMinValidRotationAngle(this AI_State_InteractWithInterest __self) => _minValidRotationAngle.Value.GetValue(__self);
		public static void SetMinValidRotationAngle(this AI_State_InteractWithInterest __self, float value) => _minValidRotationAngle.Value.SetValue(__self, value);
		public static float GetAnimationLerpSpeed(this AI_State_InteractWithInterest __self) => _animationLerpSpeed.Value.GetValue(__self);
		public static void SetAnimationLerpSpeed(this AI_State_InteractWithInterest __self, float value) => _animationLerpSpeed.Value.SetValue(__self, value);
		public static AI_Statemachine_NPC GetStatemachineNPC(this AI_State_InteractWithInterest __self) => _statemachineNPC.Value.GetValue(__self);
		public static void SetStatemachineNPC(this AI_State_InteractWithInterest __self, AI_Statemachine_NPC value) => _statemachineNPC.Value.SetValue(__self, value);
		public static InterestPoint GetAiInterest(this AI_State_InteractWithInterest __self) => _aiInterest.Value.GetValue(__self);
		public static void SetAiInterest(this AI_State_InteractWithInterest __self, InterestPoint value) => _aiInterest.Value.SetValue(__self, value);
		public static float GetInteractTimer(this AI_State_InteractWithInterest __self) => _interactTimer.Value.GetValue(__self);
		public static void SetInteractTimer(this AI_State_InteractWithInterest __self, float value) => _interactTimer.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetStateMachineEntryPosition(this AI_State_InteractWithInterest __self) => _stateMachineEntryPosition.Value.GetValue(__self);
		public static void SetStateMachineEntryPosition(this AI_State_InteractWithInterest __self, UnityEngine.Vector3 value) => _stateMachineEntryPosition.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetHandItem(this AI_State_InteractWithInterest __self) => _handItem.Value.GetValue(__self);
		public static void SetHandItem(this AI_State_InteractWithInterest __self, UnityEngine.Transform value) => _handItem.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_State_InteractWithInterest>> _ApplyAnimationProperties1392117352 =
				new System.Lazy<MethodAccessor<AI_State_InteractWithInterest>>(() => MethodAccessor<AI_State_InteractWithInterest>.Create("ApplyAnimationProperties", typeof(InterestPoint), typeof(AIStateEvent)));

		public static void ApplyAnimationProperties(this AI_State_InteractWithInterest __self, InterestPoint interest, AIStateEvent eventType) => _ApplyAnimationProperties1392117352.Value.Invoke(__self, interest, eventType);

	}

	public static class PrivateAccessor_InterestPoint
	{

		private static readonly System.Lazy<FieldAccessor<InterestPoint, bool>> _occupied =
				new System.Lazy<FieldAccessor<InterestPoint, bool>>(() => FieldAccessor<InterestPoint, bool>.Create("occupied"));

		public static bool GetOccupied(this InterestPoint __self) => _occupied.Value.GetValue(__self);
		public static void SetOccupied(this InterestPoint __self, bool value) => _occupied.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<InterestPoint>> _OnEnable757602046 =
				new System.Lazy<MethodAccessor<InterestPoint>>(() => MethodAccessor<InterestPoint>.Create("OnEnable"));

		public static void OnEnable(this InterestPoint __self) => _OnEnable757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AI_Movement
	{

		private static readonly System.Lazy<FieldAccessor<AI_Movement, CustomRayHitInfo>> _customHitInfo =
				new System.Lazy<FieldAccessor<AI_Movement, CustomRayHitInfo>>(() => FieldAccessor<AI_Movement, CustomRayHitInfo>.Create("customHitInfo"));
		private static readonly System.Lazy<FieldAccessor<AI_Movement, float>> _gravity =
				new System.Lazy<FieldAccessor<AI_Movement, float>>(() => FieldAccessor<AI_Movement, float>.Create("gravity"));
		private static readonly System.Lazy<FieldAccessor<AI_Movement, UnityEngine.AI.NavMeshPath>> _fakePath =
				new System.Lazy<FieldAccessor<AI_Movement, UnityEngine.AI.NavMeshPath>>(() => FieldAccessor<AI_Movement, UnityEngine.AI.NavMeshPath>.Create("fakePath"));
		private static readonly System.Lazy<FieldAccessor<AI_Movement, UnityEngine.Vector3>> _previousPosition =
				new System.Lazy<FieldAccessor<AI_Movement, UnityEngine.Vector3>>(() => FieldAccessor<AI_Movement, UnityEngine.Vector3>.Create("previousPosition"));
		private static readonly System.Lazy<FieldAccessor<AI_Movement, float>> __movementSpeed =
				new System.Lazy<FieldAccessor<AI_Movement, float>>(() => FieldAccessor<AI_Movement, float>.Create("_movementSpeed"));
		private static readonly System.Lazy<FieldAccessor<AI_Movement, float>> __rotationSpeed =
				new System.Lazy<FieldAccessor<AI_Movement, float>>(() => FieldAccessor<AI_Movement, float>.Create("_rotationSpeed"));
		private static readonly System.Lazy<FieldAccessor<AI_Movement, bool>> _rotateFasterCloserToTarget =
				new System.Lazy<FieldAccessor<AI_Movement, bool>>(() => FieldAccessor<AI_Movement, bool>.Create("rotateFasterCloserToTarget"));
		private static readonly System.Lazy<FieldAccessor<AI_Movement, float>> _rotateFasterRange =
				new System.Lazy<FieldAccessor<AI_Movement, float>>(() => FieldAccessor<AI_Movement, float>.Create("rotateFasterRange"));
		private static readonly System.Lazy<FieldAccessor<AI_Movement, float>> _castGroundRayInterval =
				new System.Lazy<FieldAccessor<AI_Movement, float>>(() => FieldAccessor<AI_Movement, float>.Create("castGroundRayInterval"));
		private static readonly System.Lazy<FieldAccessor<AI_Movement, int>> _constantGroundMaterial =
				new System.Lazy<FieldAccessor<AI_Movement, int>>(() => FieldAccessor<AI_Movement, int>.Create("constantGroundMaterial"));
		private static readonly System.Lazy<FieldAccessor<AI_Movement, int>> _groundMaterial =
				new System.Lazy<FieldAccessor<AI_Movement, int>>(() => FieldAccessor<AI_Movement, int>.Create("groundMaterial"));
		private static readonly System.Lazy<FieldAccessor<AI_Movement, float>> _castGroundRayTimer =
				new System.Lazy<FieldAccessor<AI_Movement, float>>(() => FieldAccessor<AI_Movement, float>.Create("castGroundRayTimer"));
		private static readonly System.Lazy<FieldAccessor<AI_Movement, float>> _rayLengthSide =
				new System.Lazy<FieldAccessor<AI_Movement, float>>(() => FieldAccessor<AI_Movement, float>.Create("rayLengthSide"));
		private static readonly System.Lazy<FieldAccessor<AI_Movement, float>> _rayLengthFront =
				new System.Lazy<FieldAccessor<AI_Movement, float>>(() => FieldAccessor<AI_Movement, float>.Create("rayLengthFront"));
		private static readonly System.Lazy<FieldAccessor<AI_Movement, float>> _rayStartOffset =
				new System.Lazy<FieldAccessor<AI_Movement, float>>(() => FieldAccessor<AI_Movement, float>.Create("rayStartOffset"));
		private static readonly System.Lazy<FieldAccessor<AI_Movement, float>> _rayStartYOffset =
				new System.Lazy<FieldAccessor<AI_Movement, float>>(() => FieldAccessor<AI_Movement, float>.Create("rayStartYOffset"));
		private static readonly System.Lazy<FieldAccessor<AI_Movement, float>> _frontCollisionSize =
				new System.Lazy<FieldAccessor<AI_Movement, float>>(() => FieldAccessor<AI_Movement, float>.Create("frontCollisionSize"));
		private static readonly System.Lazy<FieldAccessor<AI_Movement, Interval_Float>> _avoidCollisionRotationSpeed =
				new System.Lazy<FieldAccessor<AI_Movement, Interval_Float>>(() => FieldAccessor<AI_Movement, Interval_Float>.Create("avoidCollisionRotationSpeed"));
		private static readonly System.Lazy<FieldAccessor<AI_Movement, Interval_Float>> _avoidCollisionSpeedFront =
				new System.Lazy<FieldAccessor<AI_Movement, Interval_Float>>(() => FieldAccessor<AI_Movement, Interval_Float>.Create("avoidCollisionSpeedFront"));
		private static readonly System.Lazy<FieldAccessor<AI_Movement, bool>> _turnUpFronCollision =
				new System.Lazy<FieldAccessor<AI_Movement, bool>>(() => FieldAccessor<AI_Movement, bool>.Create("turnUpFronCollision"));
		private static readonly System.Lazy<FieldAccessor<AI_Movement, BoidSettings>> _settings =
				new System.Lazy<FieldAccessor<AI_Movement, BoidSettings>>(() => FieldAccessor<AI_Movement, BoidSettings>.Create("settings"));
		private static readonly System.Lazy<FieldAccessor<AI_Movement, UnityEngine.Vector3>> _velocity =
				new System.Lazy<FieldAccessor<AI_Movement, UnityEngine.Vector3>>(() => FieldAccessor<AI_Movement, UnityEngine.Vector3>.Create("velocity"));
		private static readonly System.Lazy<FieldAccessor<AI_Movement, MovementType>> _movementType =
				new System.Lazy<FieldAccessor<AI_Movement, MovementType>>(() => FieldAccessor<AI_Movement, MovementType>.Create("movementType"));
		private static readonly System.Lazy<FieldAccessor<AI_Movement, Pomp.Animation.AnimationParameterController>> _controllerParameter =
				new System.Lazy<FieldAccessor<AI_Movement, Pomp.Animation.AnimationParameterController>>(() => FieldAccessor<AI_Movement, Pomp.Animation.AnimationParameterController>.Create("controllerParameter"));
		private static readonly System.Lazy<FieldAccessor<AI_Movement, UnityEngine.Vector3>> _forward =
				new System.Lazy<FieldAccessor<AI_Movement, UnityEngine.Vector3>>(() => FieldAccessor<AI_Movement, UnityEngine.Vector3>.Create("forward"));
		private static readonly System.Lazy<FieldAccessor<AI_Movement, UnityEngine.Vector3>> _position =
				new System.Lazy<FieldAccessor<AI_Movement, UnityEngine.Vector3>>(() => FieldAccessor<AI_Movement, UnityEngine.Vector3>.Create("position"));
		private static readonly System.Lazy<FieldAccessor<AI_Movement, int>> _lastValidGoldenIndex =
				new System.Lazy<FieldAccessor<AI_Movement, int>>(() => FieldAccessor<AI_Movement, int>.Create("lastValidGoldenIndex"));

		public static CustomRayHitInfo GetCustomHitInfo(this AI_Movement __self) => _customHitInfo.Value.GetValue(__self);
		public static void SetCustomHitInfo(this AI_Movement __self, CustomRayHitInfo value) => _customHitInfo.Value.SetValue(__self, value);
		public static float GetGravity(this AI_Movement __self) => _gravity.Value.GetValue(__self);
		public static void SetGravity(this AI_Movement __self, float value) => _gravity.Value.SetValue(__self, value);
		public static UnityEngine.AI.NavMeshPath GetFakePath(this AI_Movement __self) => _fakePath.Value.GetValue(__self);
		public static void SetFakePath(this AI_Movement __self, UnityEngine.AI.NavMeshPath value) => _fakePath.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetPreviousPosition(this AI_Movement __self) => _previousPosition.Value.GetValue(__self);
		public static void SetPreviousPosition(this AI_Movement __self, UnityEngine.Vector3 value) => _previousPosition.Value.SetValue(__self, value);
		public static float Get_movementSpeed(this AI_Movement __self) => __movementSpeed.Value.GetValue(__self);
		public static void Set_movementSpeed(this AI_Movement __self, float value) => __movementSpeed.Value.SetValue(__self, value);
		public static float Get_rotationSpeed(this AI_Movement __self) => __rotationSpeed.Value.GetValue(__self);
		public static void Set_rotationSpeed(this AI_Movement __self, float value) => __rotationSpeed.Value.SetValue(__self, value);
		public static bool GetRotateFasterCloserToTarget(this AI_Movement __self) => _rotateFasterCloserToTarget.Value.GetValue(__self);
		public static void SetRotateFasterCloserToTarget(this AI_Movement __self, bool value) => _rotateFasterCloserToTarget.Value.SetValue(__self, value);
		public static float GetRotateFasterRange(this AI_Movement __self) => _rotateFasterRange.Value.GetValue(__self);
		public static void SetRotateFasterRange(this AI_Movement __self, float value) => _rotateFasterRange.Value.SetValue(__self, value);
		public static float GetCastGroundRayInterval(this AI_Movement __self) => _castGroundRayInterval.Value.GetValue(__self);
		public static void SetCastGroundRayInterval(this AI_Movement __self, float value) => _castGroundRayInterval.Value.SetValue(__self, value);
		public static int GetConstantGroundMaterial(this AI_Movement __self) => _constantGroundMaterial.Value.GetValue(__self);
		public static void SetConstantGroundMaterial(this AI_Movement __self, int value) => _constantGroundMaterial.Value.SetValue(__self, value);
		public static int GetGroundMaterial(this AI_Movement __self) => _groundMaterial.Value.GetValue(__self);
		public static void SetGroundMaterial(this AI_Movement __self, int value) => _groundMaterial.Value.SetValue(__self, value);
		public static float GetCastGroundRayTimer(this AI_Movement __self) => _castGroundRayTimer.Value.GetValue(__self);
		public static void SetCastGroundRayTimer(this AI_Movement __self, float value) => _castGroundRayTimer.Value.SetValue(__self, value);
		public static float GetRayLengthSide(this AI_Movement __self) => _rayLengthSide.Value.GetValue(__self);
		public static void SetRayLengthSide(this AI_Movement __self, float value) => _rayLengthSide.Value.SetValue(__self, value);
		public static float GetRayLengthFront(this AI_Movement __self) => _rayLengthFront.Value.GetValue(__self);
		public static void SetRayLengthFront(this AI_Movement __self, float value) => _rayLengthFront.Value.SetValue(__self, value);
		public static float GetRayStartOffset(this AI_Movement __self) => _rayStartOffset.Value.GetValue(__self);
		public static void SetRayStartOffset(this AI_Movement __self, float value) => _rayStartOffset.Value.SetValue(__self, value);
		public static float GetRayStartYOffset(this AI_Movement __self) => _rayStartYOffset.Value.GetValue(__self);
		public static void SetRayStartYOffset(this AI_Movement __self, float value) => _rayStartYOffset.Value.SetValue(__self, value);
		public static float GetFrontCollisionSize(this AI_Movement __self) => _frontCollisionSize.Value.GetValue(__self);
		public static void SetFrontCollisionSize(this AI_Movement __self, float value) => _frontCollisionSize.Value.SetValue(__self, value);
		public static Interval_Float GetAvoidCollisionRotationSpeed(this AI_Movement __self) => _avoidCollisionRotationSpeed.Value.GetValue(__self);
		public static void SetAvoidCollisionRotationSpeed(this AI_Movement __self, Interval_Float value) => _avoidCollisionRotationSpeed.Value.SetValue(__self, value);
		public static Interval_Float GetAvoidCollisionSpeedFront(this AI_Movement __self) => _avoidCollisionSpeedFront.Value.GetValue(__self);
		public static void SetAvoidCollisionSpeedFront(this AI_Movement __self, Interval_Float value) => _avoidCollisionSpeedFront.Value.SetValue(__self, value);
		public static bool GetTurnUpFronCollision(this AI_Movement __self) => _turnUpFronCollision.Value.GetValue(__self);
		public static void SetTurnUpFronCollision(this AI_Movement __self, bool value) => _turnUpFronCollision.Value.SetValue(__self, value);
		public static BoidSettings GetSettings(this AI_Movement __self) => _settings.Value.GetValue(__self);
		public static void SetSettings(this AI_Movement __self, BoidSettings value) => _settings.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetVelocity(this AI_Movement __self) => _velocity.Value.GetValue(__self);
		public static void SetVelocity(this AI_Movement __self, UnityEngine.Vector3 value) => _velocity.Value.SetValue(__self, value);
		public static MovementType GetMovementType(this AI_Movement __self) => _movementType.Value.GetValue(__self);
		public static void SetMovementType(this AI_Movement __self, MovementType value) => _movementType.Value.SetValue(__self, value);
		public static Pomp.Animation.AnimationParameterController GetControllerParameter(this AI_Movement __self) => _controllerParameter.Value.GetValue(__self);
		public static void SetControllerParameter(this AI_Movement __self, Pomp.Animation.AnimationParameterController value) => _controllerParameter.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetForward(this AI_Movement __self) => _forward.Value.GetValue(__self);
		public static void SetForward(this AI_Movement __self, UnityEngine.Vector3 value) => _forward.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetPosition(this AI_Movement __self) => _position.Value.GetValue(__self);
		public static void SetPosition(this AI_Movement __self, UnityEngine.Vector3 value) => _position.Value.SetValue(__self, value);
		public static int GetLastValidGoldenIndex(this AI_Movement __self) => _lastValidGoldenIndex.Value.GetValue(__self);
		public static void SetLastValidGoldenIndex(this AI_Movement __self, int value) => _lastValidGoldenIndex.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_Movement>> _Awake757602046 =
				new System.Lazy<MethodAccessor<AI_Movement>>(() => MethodAccessor<AI_Movement>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<AI_Movement>> _Update757602046 =
				new System.Lazy<MethodAccessor<AI_Movement>>(() => MethodAccessor<AI_Movement>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<AI_Movement>> _LateUpdate757602046 =
				new System.Lazy<MethodAccessor<AI_Movement>>(() => MethodAccessor<AI_Movement>.Create("LateUpdate"));
		private static readonly System.Lazy<MethodAccessor<AI_Movement>> _OnDrawGizmosSelected757602046 =
				new System.Lazy<MethodAccessor<AI_Movement>>(() => MethodAccessor<AI_Movement>.Create("OnDrawGizmosSelected"));
		private static readonly System.Lazy<MethodAccessor<AI_Movement>> _CharacterControllerUpdate757602046 =
				new System.Lazy<MethodAccessor<AI_Movement>>(() => MethodAccessor<AI_Movement>.Create("CharacterControllerUpdate"));
		private static readonly System.Lazy<MethodAccessor<AI_Movement>> _HandleGroundRaycast757602046 =
				new System.Lazy<MethodAccessor<AI_Movement>>(() => MethodAccessor<AI_Movement>.Create("HandleGroundRaycast"));
		private static readonly System.Lazy<MethodAccessor<AI_Movement>> _DisableMovementTypes757602046 =
				new System.Lazy<MethodAccessor<AI_Movement>>(() => MethodAccessor<AI_Movement>.Create("DisableMovementTypes"));
		private static readonly System.Lazy<MethodAccessor<AI_Movement>> _SetCharacterControllerActive757602046 =
				new System.Lazy<MethodAccessor<AI_Movement>>(() => MethodAccessor<AI_Movement>.Create("SetCharacterControllerActive"));
		private static readonly System.Lazy<MethodAccessor<AI_Movement>> _SetNavmeshAgentActive757602046 =
				new System.Lazy<MethodAccessor<AI_Movement>>(() => MethodAccessor<AI_Movement>.Create("SetNavmeshAgentActive"));
		private static readonly System.Lazy<MethodAccessor<AI_Movement>> _SetTranslateActive757602046 =
				new System.Lazy<MethodAccessor<AI_Movement>>(() => MethodAccessor<AI_Movement>.Create("SetTranslateActive"));
		private static readonly System.Lazy<MethodAccessor<AI_Movement>> _Move_RigidForward1868831076 =
				new System.Lazy<MethodAccessor<AI_Movement>>(() => MethodAccessor<AI_Movement>.Create("Move_RigidForward", typeof(UnityEngine.Transform), typeof(float), typeof(UnityEngine.Rigidbody)));
		private static readonly System.Lazy<MethodAccessor<AI_Movement>> _GoldenRuleRayPos757602046 =
				new System.Lazy<MethodAccessor<AI_Movement>>(() => MethodAccessor<AI_Movement>.Create("GoldenRuleRayPos"));
		private static readonly System.Lazy<MethodAccessor<AI_Movement>> _ObstacleRays757602046 =
				new System.Lazy<MethodAccessor<AI_Movement>>(() => MethodAccessor<AI_Movement>.Create("ObstacleRays"));
		private static readonly System.Lazy<MethodAccessor<AI_Movement>> _HandleLerpData3486905475 =
				new System.Lazy<MethodAccessor<AI_Movement>>(() => MethodAccessor<AI_Movement>.Create("HandleLerpData", typeof(float)));

		public static void Awake(this AI_Movement __self) => _Awake757602046.Value.Invoke(__self);
		public static void Update(this AI_Movement __self) => _Update757602046.Value.Invoke(__self);
		public static void LateUpdate(this AI_Movement __self) => _LateUpdate757602046.Value.Invoke(__self);
		public static void OnDrawGizmosSelected(this AI_Movement __self) => _OnDrawGizmosSelected757602046.Value.Invoke(__self);
		public static void CharacterControllerUpdate(this AI_Movement __self) => _CharacterControllerUpdate757602046.Value.Invoke(__self);
		public static void HandleGroundRaycast(this AI_Movement __self) => _HandleGroundRaycast757602046.Value.Invoke(__self);
		public static void DisableMovementTypes(this AI_Movement __self) => _DisableMovementTypes757602046.Value.Invoke(__self);
		public static void SetCharacterControllerActive(this AI_Movement __self) => _SetCharacterControllerActive757602046.Value.Invoke(__self);
		public static void SetNavmeshAgentActive(this AI_Movement __self) => _SetNavmeshAgentActive757602046.Value.Invoke(__self);
		public static void SetTranslateActive(this AI_Movement __self) => _SetTranslateActive757602046.Value.Invoke(__self);
		public static void Move_RigidForward(this AI_Movement __self, UnityEngine.Transform self, float movementSpeed, UnityEngine.Rigidbody rigid) => _Move_RigidForward1868831076.Value.Invoke(__self, self, movementSpeed, rigid);
		public static UnityEngine.Vector3 GoldenRuleRayPos(this AI_Movement __self) => (UnityEngine.Vector3)_GoldenRuleRayPos757602046.Value.Invoke(__self);
		public static UnityEngine.Vector3 ObstacleRays(this AI_Movement __self) => (UnityEngine.Vector3)_ObstacleRays757602046.Value.Invoke(__self);
		public static void HandleLerpData(this AI_Movement __self, float time) => _HandleLerpData3486905475.Value.Invoke(__self, time);

	}

	public static class PrivateAccessor_AI_Movement_Lean
	{

		private static readonly System.Lazy<FieldAccessor<AI_Movement_Lean, float>> _maxLeanAngle =
				new System.Lazy<FieldAccessor<AI_Movement_Lean, float>>(() => FieldAccessor<AI_Movement_Lean, float>.Create("maxLeanAngle"));
		private static readonly System.Lazy<FieldAccessor<AI_Movement_Lean, float>> _maxLeanDelta =
				new System.Lazy<FieldAccessor<AI_Movement_Lean, float>>(() => FieldAccessor<AI_Movement_Lean, float>.Create("maxLeanDelta"));
		private static readonly System.Lazy<FieldAccessor<AI_Movement_Lean, float>> _leanLerpSpeed =
				new System.Lazy<FieldAccessor<AI_Movement_Lean, float>>(() => FieldAccessor<AI_Movement_Lean, float>.Create("leanLerpSpeed"));
		private static readonly System.Lazy<FieldAccessor<AI_Movement_Lean, float>> _rotDelta =
				new System.Lazy<FieldAccessor<AI_Movement_Lean, float>>(() => FieldAccessor<AI_Movement_Lean, float>.Create("rotDelta"));
		private static readonly System.Lazy<FieldAccessor<AI_Movement_Lean, float>> _targetLeanAngle =
				new System.Lazy<FieldAccessor<AI_Movement_Lean, float>>(() => FieldAccessor<AI_Movement_Lean, float>.Create("targetLeanAngle"));
		private static readonly System.Lazy<FieldAccessor<AI_Movement_Lean, float>> _previousRot =
				new System.Lazy<FieldAccessor<AI_Movement_Lean, float>>(() => FieldAccessor<AI_Movement_Lean, float>.Create("previousRot"));

		public static float GetMaxLeanAngle(this AI_Movement_Lean __self) => _maxLeanAngle.Value.GetValue(__self);
		public static void SetMaxLeanAngle(this AI_Movement_Lean __self, float value) => _maxLeanAngle.Value.SetValue(__self, value);
		public static float GetMaxLeanDelta(this AI_Movement_Lean __self) => _maxLeanDelta.Value.GetValue(__self);
		public static void SetMaxLeanDelta(this AI_Movement_Lean __self, float value) => _maxLeanDelta.Value.SetValue(__self, value);
		public static float GetLeanLerpSpeed(this AI_Movement_Lean __self) => _leanLerpSpeed.Value.GetValue(__self);
		public static void SetLeanLerpSpeed(this AI_Movement_Lean __self, float value) => _leanLerpSpeed.Value.SetValue(__self, value);
		public static float GetRotDelta(this AI_Movement_Lean __self) => _rotDelta.Value.GetValue(__self);
		public static void SetRotDelta(this AI_Movement_Lean __self, float value) => _rotDelta.Value.SetValue(__self, value);
		public static float GetTargetLeanAngle(this AI_Movement_Lean __self) => _targetLeanAngle.Value.GetValue(__self);
		public static void SetTargetLeanAngle(this AI_Movement_Lean __self, float value) => _targetLeanAngle.Value.SetValue(__self, value);
		public static float GetPreviousRot(this AI_Movement_Lean __self) => _previousRot.Value.GetValue(__self);
		public static void SetPreviousRot(this AI_Movement_Lean __self, float value) => _previousRot.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_Movement_Lean>> _LateUpdate757602046 =
				new System.Lazy<MethodAccessor<AI_Movement_Lean>>(() => MethodAccessor<AI_Movement_Lean>.Create("LateUpdate"));

		public static void LateUpdate(this AI_Movement_Lean __self) => _LateUpdate757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AI_Snake
	{

		private static readonly System.Lazy<FieldAccessor<AI_Snake, System.Collections.Generic.List<AI_Snake.SnakePart>>> _parts =
				new System.Lazy<FieldAccessor<AI_Snake, System.Collections.Generic.List<AI_Snake.SnakePart>>>(() => FieldAccessor<AI_Snake, System.Collections.Generic.List<AI_Snake.SnakePart>>.Create("parts"));
		private static readonly System.Lazy<FieldAccessor<AI_Snake, UnityEngine.GameObject>> _partParent =
				new System.Lazy<FieldAccessor<AI_Snake, UnityEngine.GameObject>>(() => FieldAccessor<AI_Snake, UnityEngine.GameObject>.Create("partParent"));

		public static System.Collections.Generic.List<AI_Snake.SnakePart> GetParts(this AI_Snake __self) => _parts.Value.GetValue(__self);
		public static void SetParts(this AI_Snake __self, System.Collections.Generic.List<AI_Snake.SnakePart> value) => _parts.Value.SetValue(__self, value);
		public static UnityEngine.GameObject GetPartParent(this AI_Snake __self) => _partParent.Value.GetValue(__self);
		public static void SetPartParent(this AI_Snake __self, UnityEngine.GameObject value) => _partParent.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_Snake>> _Start757602046 =
				new System.Lazy<MethodAccessor<AI_Snake>>(() => MethodAccessor<AI_Snake>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<AI_Snake>> _LateUpdate757602046 =
				new System.Lazy<MethodAccessor<AI_Snake>>(() => MethodAccessor<AI_Snake>.Create("LateUpdate"));
		private static readonly System.Lazy<MethodAccessor<AI_Snake>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<AI_Snake>>(() => MethodAccessor<AI_Snake>.Create("OnDestroy"));

		public static void Start(this AI_Snake __self) => _Start757602046.Value.Invoke(__self);
		public static void LateUpdate(this AI_Snake __self) => _LateUpdate757602046.Value.Invoke(__self);
		public static void OnDestroy(this AI_Snake __self) => _OnDestroy757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AI_Sub
	{

		private static readonly System.Lazy<FieldAccessor<AI_Sub, UnityEngine.Transform>> _transformToFollow =
				new System.Lazy<FieldAccessor<AI_Sub, UnityEngine.Transform>>(() => FieldAccessor<AI_Sub, UnityEngine.Transform>.Create("transformToFollow"));
		private static readonly System.Lazy<FieldAccessor<AI_Sub, UnityEngine.Vector3[]>> _offsetArray =
				new System.Lazy<FieldAccessor<AI_Sub, UnityEngine.Vector3[]>>(() => FieldAccessor<AI_Sub, UnityEngine.Vector3[]>.Create("offsetArray"));
		private static readonly System.Lazy<FieldAccessor<AI_Sub, float>> _totalArrayTime =
				new System.Lazy<FieldAccessor<AI_Sub, float>>(() => FieldAccessor<AI_Sub, float>.Create("totalArrayTime"));
		private static readonly System.Lazy<FieldAccessor<AI_Sub, UnityEngine.AnimationCurve>> _moveSpeed =
				new System.Lazy<FieldAccessor<AI_Sub, UnityEngine.AnimationCurve>>(() => FieldAccessor<AI_Sub, UnityEngine.AnimationCurve>.Create("moveSpeed"));
		private static readonly System.Lazy<FieldAccessor<AI_Sub, UnityEngine.AnimationCurve>> _rotateSpeed =
				new System.Lazy<FieldAccessor<AI_Sub, UnityEngine.AnimationCurve>>(() => FieldAccessor<AI_Sub, UnityEngine.AnimationCurve>.Create("rotateSpeed"));
		private static readonly System.Lazy<FieldAccessor<AI_Sub, bool>> _clampY =
				new System.Lazy<FieldAccessor<AI_Sub, bool>>(() => FieldAccessor<AI_Sub, bool>.Create("clampY"));
		private static readonly System.Lazy<FieldAccessor<AI_Sub, float>> _clampedYPos =
				new System.Lazy<FieldAccessor<AI_Sub, float>>(() => FieldAccessor<AI_Sub, float>.Create("clampedYPos"));
		private static readonly System.Lazy<FieldAccessor<AI_Sub, float>> _offsetTime =
				new System.Lazy<FieldAccessor<AI_Sub, float>>(() => FieldAccessor<AI_Sub, float>.Create("offsetTime"));
		private static readonly System.Lazy<FieldAccessor<AI_Sub, UnityEngine.Vector3>> _localOffset =
				new System.Lazy<FieldAccessor<AI_Sub, UnityEngine.Vector3>>(() => FieldAccessor<AI_Sub, UnityEngine.Vector3>.Create("localOffset"));
		private static readonly System.Lazy<FieldAccessor<AI_Sub, UnityEngine.Vector3>> _targetPosition =
				new System.Lazy<FieldAccessor<AI_Sub, UnityEngine.Vector3>>(() => FieldAccessor<AI_Sub, UnityEngine.Vector3>.Create("targetPosition"));

		public static UnityEngine.Transform GetTransformToFollow(this AI_Sub __self) => _transformToFollow.Value.GetValue(__self);
		public static void SetTransformToFollow(this AI_Sub __self, UnityEngine.Transform value) => _transformToFollow.Value.SetValue(__self, value);
		public static UnityEngine.Vector3[] GetOffsetArray(this AI_Sub __self) => _offsetArray.Value.GetValue(__self);
		public static void SetOffsetArray(this AI_Sub __self, UnityEngine.Vector3[] value) => _offsetArray.Value.SetValue(__self, value);
		public static float GetTotalArrayTime(this AI_Sub __self) => _totalArrayTime.Value.GetValue(__self);
		public static void SetTotalArrayTime(this AI_Sub __self, float value) => _totalArrayTime.Value.SetValue(__self, value);
		public static UnityEngine.AnimationCurve GetMoveSpeed(this AI_Sub __self) => _moveSpeed.Value.GetValue(__self);
		public static void SetMoveSpeed(this AI_Sub __self, UnityEngine.AnimationCurve value) => _moveSpeed.Value.SetValue(__self, value);
		public static UnityEngine.AnimationCurve GetRotateSpeed(this AI_Sub __self) => _rotateSpeed.Value.GetValue(__self);
		public static void SetRotateSpeed(this AI_Sub __self, UnityEngine.AnimationCurve value) => _rotateSpeed.Value.SetValue(__self, value);
		public static bool GetClampY(this AI_Sub __self) => _clampY.Value.GetValue(__self);
		public static void SetClampY(this AI_Sub __self, bool value) => _clampY.Value.SetValue(__self, value);
		public static float GetClampedYPos(this AI_Sub __self) => _clampedYPos.Value.GetValue(__self);
		public static void SetClampedYPos(this AI_Sub __self, float value) => _clampedYPos.Value.SetValue(__self, value);
		public static float GetOffsetTime(this AI_Sub __self) => _offsetTime.Value.GetValue(__self);
		public static void SetOffsetTime(this AI_Sub __self, float value) => _offsetTime.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetLocalOffset(this AI_Sub __self) => _localOffset.Value.GetValue(__self);
		public static void SetLocalOffset(this AI_Sub __self, UnityEngine.Vector3 value) => _localOffset.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetTargetPosition(this AI_Sub __self) => _targetPosition.Value.GetValue(__self);
		public static void SetTargetPosition(this AI_Sub __self, UnityEngine.Vector3 value) => _targetPosition.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_Sub>> _Start757602046 =
				new System.Lazy<MethodAccessor<AI_Sub>>(() => MethodAccessor<AI_Sub>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<AI_Sub>> _Update757602046 =
				new System.Lazy<MethodAccessor<AI_Sub>>(() => MethodAccessor<AI_Sub>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<AI_Sub>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<AI_Sub>>(() => MethodAccessor<AI_Sub>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<AI_Sub>> _OnWorldShift3429126434 =
				new System.Lazy<MethodAccessor<AI_Sub>>(() => MethodAccessor<AI_Sub>.Create("OnWorldShift", typeof(UnityEngine.Vector3)));
		private static readonly System.Lazy<MethodAccessor<AI_Sub>> _UpdateTargetPositionToCorrectOffset3486905475 =
				new System.Lazy<MethodAccessor<AI_Sub>>(() => MethodAccessor<AI_Sub>.Create("UpdateTargetPositionToCorrectOffset", typeof(float)));

		public static void Start(this AI_Sub __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this AI_Sub __self) => _Update757602046.Value.Invoke(__self);
		public static void OnDestroy(this AI_Sub __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void OnWorldShift(this AI_Sub __self, UnityEngine.Vector3 shift) => _OnWorldShift3429126434.Value.Invoke(__self, shift);
		public static void UpdateTargetPositionToCorrectOffset(this AI_Sub __self, float normalizedTime) => _UpdateTargetPositionToCorrectOffset3486905475.Value.Invoke(__self, normalizedTime);

	}

	public static class Private_AI_Sub
	{

		private static readonly System.Lazy<StaticFieldAccessor<Network_Water>> _water =
				new System.Lazy<StaticFieldAccessor<Network_Water>>(() => StaticFieldAccessor<Network_Water>.Create(typeof(AI_Sub), "water"));

		public static Network_Water GetWater() => _water.Value.GetValue();
		public static void SetWater(Network_Water value) => _water.Value.SetValue(value);

	}

	public static class PrivateAccessor_AI_NetworkBehavior_Shark
	{

		private static readonly System.Lazy<FieldAccessor<AI_NetworkBehavior_Shark, bool>> _networkIsParentedToRaft =
				new System.Lazy<FieldAccessor<AI_NetworkBehavior_Shark, bool>>(() => FieldAccessor<AI_NetworkBehavior_Shark, bool>.Create("networkIsParentedToRaft"));
		private static readonly System.Lazy<FieldAccessor<AI_NetworkBehavior_Shark, bool>> _networkIsBiting =
				new System.Lazy<FieldAccessor<AI_NetworkBehavior_Shark, bool>>(() => FieldAccessor<AI_NetworkBehavior_Shark, bool>.Create("networkIsBiting"));

		public static bool GetNetworkIsParentedToRaft(this AI_NetworkBehavior_Shark __self) => _networkIsParentedToRaft.Value.GetValue(__self);
		public static void SetNetworkIsParentedToRaft(this AI_NetworkBehavior_Shark __self, bool value) => _networkIsParentedToRaft.Value.SetValue(__self, value);
		public static bool GetNetworkIsBiting(this AI_NetworkBehavior_Shark __self) => _networkIsBiting.Value.GetValue(__self);
		public static void SetNetworkIsBiting(this AI_NetworkBehavior_Shark __self, bool value) => _networkIsBiting.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_NetworkBehavior_Shark>> _UpdateRemoteclient757602046 =
				new System.Lazy<MethodAccessor<AI_NetworkBehavior_Shark>>(() => MethodAccessor<AI_NetworkBehavior_Shark>.Create("UpdateRemoteclient"));
		private static readonly System.Lazy<MethodAccessor<AI_NetworkBehavior_Shark>> _LerpRotation3429126434 =
				new System.Lazy<MethodAccessor<AI_NetworkBehavior_Shark>>(() => MethodAccessor<AI_NetworkBehavior_Shark>.Create("LerpRotation", typeof(UnityEngine.Vector3)));

		public static void UpdateRemoteclient(this AI_NetworkBehavior_Shark __self) => _UpdateRemoteclient757602046.Value.Invoke(__self);
		public static void LerpRotation(this AI_NetworkBehavior_Shark __self, UnityEngine.Vector3 eulerAngles) => _LerpRotation3429126434.Value.Invoke(__self, eulerAngles);

	}

	public static class PrivateAccessor_AI_NetworkBehaviour
	{

		private static readonly System.Lazy<MethodAccessor<AI_NetworkBehaviour>> _Awake757602046 =
				new System.Lazy<MethodAccessor<AI_NetworkBehaviour>>(() => MethodAccessor<AI_NetworkBehaviour>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<AI_NetworkBehaviour>> _Start757602046 =
				new System.Lazy<MethodAccessor<AI_NetworkBehaviour>>(() => MethodAccessor<AI_NetworkBehaviour>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<AI_NetworkBehaviour>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<AI_NetworkBehaviour>>(() => MethodAccessor<AI_NetworkBehaviour>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<AI_NetworkBehaviour>> _Update757602046 =
				new System.Lazy<MethodAccessor<AI_NetworkBehaviour>>(() => MethodAccessor<AI_NetworkBehaviour>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<AI_NetworkBehaviour>> _UpdateHost757602046 =
				new System.Lazy<MethodAccessor<AI_NetworkBehaviour>>(() => MethodAccessor<AI_NetworkBehaviour>.Create("UpdateHost"));
		private static readonly System.Lazy<MethodAccessor<AI_NetworkBehaviour>> _UpdateRemoteclient757602046 =
				new System.Lazy<MethodAccessor<AI_NetworkBehaviour>>(() => MethodAccessor<AI_NetworkBehaviour>.Create("UpdateRemoteclient"));

		public static void Awake(this AI_NetworkBehaviour __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this AI_NetworkBehaviour __self) => _Start757602046.Value.Invoke(__self);
		public static void OnDestroy(this AI_NetworkBehaviour __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void Update(this AI_NetworkBehaviour __self) => _Update757602046.Value.Invoke(__self);
		public static void UpdateHost(this AI_NetworkBehaviour __self) => _UpdateHost757602046.Value.Invoke(__self);
		public static void UpdateRemoteclient(this AI_NetworkBehaviour __self) => _UpdateRemoteclient757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AI_NetworkBehaviour_Animal
	{

		private static readonly System.Lazy<FieldAccessor<AI_NetworkBehaviour_Animal, float>> _positionLerpSpeed =
				new System.Lazy<FieldAccessor<AI_NetworkBehaviour_Animal, float>>(() => FieldAccessor<AI_NetworkBehaviour_Animal, float>.Create("positionLerpSpeed"));
		private static readonly System.Lazy<FieldAccessor<AI_NetworkBehaviour_Animal, float>> _rotationLerpSpeed =
				new System.Lazy<FieldAccessor<AI_NetworkBehaviour_Animal, float>>(() => FieldAccessor<AI_NetworkBehaviour_Animal, float>.Create("rotationLerpSpeed"));
		private static readonly System.Lazy<FieldAccessor<AI_NetworkBehaviour_Animal, UnityEngine.Vector3>> _networkEuler =
				new System.Lazy<FieldAccessor<AI_NetworkBehaviour_Animal, UnityEngine.Vector3>>(() => FieldAccessor<AI_NetworkBehaviour_Animal, UnityEngine.Vector3>.Create("networkEuler"));
		private static readonly System.Lazy<FieldAccessor<AI_NetworkBehaviour_Animal, AI_StateMachine_Animal>> _stateMachineAnimal =
				new System.Lazy<FieldAccessor<AI_NetworkBehaviour_Animal, AI_StateMachine_Animal>>(() => FieldAccessor<AI_NetworkBehaviour_Animal, AI_StateMachine_Animal>.Create("stateMachineAnimal"));

		public static float GetPositionLerpSpeed(this AI_NetworkBehaviour_Animal __self) => _positionLerpSpeed.Value.GetValue(__self);
		public static void SetPositionLerpSpeed(this AI_NetworkBehaviour_Animal __self, float value) => _positionLerpSpeed.Value.SetValue(__self, value);
		public static float GetRotationLerpSpeed(this AI_NetworkBehaviour_Animal __self) => _rotationLerpSpeed.Value.GetValue(__self);
		public static void SetRotationLerpSpeed(this AI_NetworkBehaviour_Animal __self, float value) => _rotationLerpSpeed.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetNetworkEuler(this AI_NetworkBehaviour_Animal __self) => _networkEuler.Value.GetValue(__self);
		public static void SetNetworkEuler(this AI_NetworkBehaviour_Animal __self, UnityEngine.Vector3 value) => _networkEuler.Value.SetValue(__self, value);
		public static AI_StateMachine_Animal GetStateMachineAnimal(this AI_NetworkBehaviour_Animal __self) => _stateMachineAnimal.Value.GetValue(__self);
		public static void SetStateMachineAnimal(this AI_NetworkBehaviour_Animal __self, AI_StateMachine_Animal value) => _stateMachineAnimal.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_NetworkBehaviour_Animal>> _Awake757602046 =
				new System.Lazy<MethodAccessor<AI_NetworkBehaviour_Animal>>(() => MethodAccessor<AI_NetworkBehaviour_Animal>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<AI_NetworkBehaviour_Animal>> _UpdateRemoteclient757602046 =
				new System.Lazy<MethodAccessor<AI_NetworkBehaviour_Animal>>(() => MethodAccessor<AI_NetworkBehaviour_Animal>.Create("UpdateRemoteclient"));
		private static readonly System.Lazy<MethodAccessor<AI_NetworkBehaviour_Animal>> _LerpMovement3403068986 =
				new System.Lazy<MethodAccessor<AI_NetworkBehaviour_Animal>>(() => MethodAccessor<AI_NetworkBehaviour_Animal>.Create("LerpMovement", typeof(UnityEngine.Vector3), typeof(bool)));
		private static readonly System.Lazy<MethodAccessor<AI_NetworkBehaviour_Animal>> _LerpRotation3429126434 =
				new System.Lazy<MethodAccessor<AI_NetworkBehaviour_Animal>>(() => MethodAccessor<AI_NetworkBehaviour_Animal>.Create("LerpRotation", typeof(UnityEngine.Vector3)));

		public static void Awake(this AI_NetworkBehaviour_Animal __self) => _Awake757602046.Value.Invoke(__self);
		public static void UpdateRemoteclient(this AI_NetworkBehaviour_Animal __self) => _UpdateRemoteclient757602046.Value.Invoke(__self);
		public static void LerpMovement(this AI_NetworkBehaviour_Animal __self, UnityEngine.Vector3 position, bool localPosition) => _LerpMovement3403068986.Value.Invoke(__self, position, localPosition);
		public static void LerpRotation(this AI_NetworkBehaviour_Animal __self, UnityEngine.Vector3 eulerAngles) => _LerpRotation3429126434.Value.Invoke(__self, eulerAngles);

	}

	public static class PrivateAccessor_AI_NetworkBehaviour_Boss_Varuna
	{

		private static readonly System.Lazy<FieldAccessor<AI_NetworkBehaviour_Boss_Varuna, DamageBox_Networked>> _networkedDamageBox =
				new System.Lazy<FieldAccessor<AI_NetworkBehaviour_Boss_Varuna, DamageBox_Networked>>(() => FieldAccessor<AI_NetworkBehaviour_Boss_Varuna, DamageBox_Networked>.Create("networkedDamageBox"));
		private static readonly System.Lazy<FieldAccessor<AI_NetworkBehaviour_Boss_Varuna, AI_StateMachine_Boss_Varuna>> _bossSM =
				new System.Lazy<FieldAccessor<AI_NetworkBehaviour_Boss_Varuna, AI_StateMachine_Boss_Varuna>>(() => FieldAccessor<AI_NetworkBehaviour_Boss_Varuna, AI_StateMachine_Boss_Varuna>.Create("bossSM"));

		public static DamageBox_Networked GetNetworkedDamageBox(this AI_NetworkBehaviour_Boss_Varuna __self) => _networkedDamageBox.Value.GetValue(__self);
		public static void SetNetworkedDamageBox(this AI_NetworkBehaviour_Boss_Varuna __self, DamageBox_Networked value) => _networkedDamageBox.Value.SetValue(__self, value);
		public static AI_StateMachine_Boss_Varuna GetBossSM(this AI_NetworkBehaviour_Boss_Varuna __self) => _bossSM.Value.GetValue(__self);
		public static void SetBossSM(this AI_NetworkBehaviour_Boss_Varuna __self, AI_StateMachine_Boss_Varuna value) => _bossSM.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_NetworkBehaviour_Boss_Varuna>> _Start757602046 =
				new System.Lazy<MethodAccessor<AI_NetworkBehaviour_Boss_Varuna>>(() => MethodAccessor<AI_NetworkBehaviour_Boss_Varuna>.Create("Start"));

		public static void Start(this AI_NetworkBehaviour_Boss_Varuna __self) => _Start757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AI_NetworkBehaviour_BugSwarm
	{

		private static readonly System.Lazy<FieldAccessor<AI_NetworkBehaviour_BugSwarm, TimerEventer>> _damageTimer =
				new System.Lazy<FieldAccessor<AI_NetworkBehaviour_BugSwarm, TimerEventer>>(() => FieldAccessor<AI_NetworkBehaviour_BugSwarm, TimerEventer>.Create("damageTimer"));

		public static TimerEventer GetDamageTimer(this AI_NetworkBehaviour_BugSwarm __self) => _damageTimer.Value.GetValue(__self);
		public static void SetDamageTimer(this AI_NetworkBehaviour_BugSwarm __self, TimerEventer value) => _damageTimer.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_NetworkBehaviour_BugSwarm>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<AI_NetworkBehaviour_BugSwarm>>(() => MethodAccessor<AI_NetworkBehaviour_BugSwarm>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<AI_NetworkBehaviour_BugSwarm>> _Start757602046 =
				new System.Lazy<MethodAccessor<AI_NetworkBehaviour_BugSwarm>>(() => MethodAccessor<AI_NetworkBehaviour_BugSwarm>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<AI_NetworkBehaviour_BugSwarm>> _UpdateHost757602046 =
				new System.Lazy<MethodAccessor<AI_NetworkBehaviour_BugSwarm>>(() => MethodAccessor<AI_NetworkBehaviour_BugSwarm>.Create("UpdateHost"));
		private static readonly System.Lazy<MethodAccessor<AI_NetworkBehaviour_BugSwarm>> _DamageClosestPlayer757602046 =
				new System.Lazy<MethodAccessor<AI_NetworkBehaviour_BugSwarm>>(() => MethodAccessor<AI_NetworkBehaviour_BugSwarm>.Create("DamageClosestPlayer"));

		public static void OnDestroy(this AI_NetworkBehaviour_BugSwarm __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void Start(this AI_NetworkBehaviour_BugSwarm __self) => _Start757602046.Value.Invoke(__self);
		public static void UpdateHost(this AI_NetworkBehaviour_BugSwarm __self) => _UpdateHost757602046.Value.Invoke(__self);
		public static void DamageClosestPlayer(this AI_NetworkBehaviour_BugSwarm __self) => _DamageClosestPlayer757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AI_NetworkBehaviour_Chicken
	{

		private static readonly System.Lazy<FieldAccessor<AI_NetworkBehaviour_Chicken, UnityEngine.GameObject>> _eggPrefab =
				new System.Lazy<FieldAccessor<AI_NetworkBehaviour_Chicken, UnityEngine.GameObject>>(() => FieldAccessor<AI_NetworkBehaviour_Chicken, UnityEngine.GameObject>.Create("eggPrefab"));
		private static readonly System.Lazy<FieldAccessor<AI_NetworkBehaviour_Chicken, UnityEngine.Transform>> _dropEggPoint =
				new System.Lazy<FieldAccessor<AI_NetworkBehaviour_Chicken, UnityEngine.Transform>>(() => FieldAccessor<AI_NetworkBehaviour_Chicken, UnityEngine.Transform>.Create("dropEggPoint"));
		private static readonly System.Lazy<FieldAccessor<AI_NetworkBehaviour_Chicken, Interval_Float>> _eggDropInterval =
				new System.Lazy<FieldAccessor<AI_NetworkBehaviour_Chicken, Interval_Float>>(() => FieldAccessor<AI_NetworkBehaviour_Chicken, Interval_Float>.Create("eggDropInterval"));
		private static readonly System.Lazy<FieldAccessor<AI_NetworkBehaviour_Chicken, AI_State_Wait>> _layEggState =
				new System.Lazy<FieldAccessor<AI_NetworkBehaviour_Chicken, AI_State_Wait>>(() => FieldAccessor<AI_NetworkBehaviour_Chicken, AI_State_Wait>.Create("layEggState"));
		private static readonly System.Lazy<FieldAccessor<AI_NetworkBehaviour_Chicken, float>> __eggTimer =
				new System.Lazy<FieldAccessor<AI_NetworkBehaviour_Chicken, float>>(() => FieldAccessor<AI_NetworkBehaviour_Chicken, float>.Create("_eggTimer"));
		private static readonly System.Lazy<FieldAccessor<AI_NetworkBehaviour_Chicken, string>> _eventRef_layEgg =
				new System.Lazy<FieldAccessor<AI_NetworkBehaviour_Chicken, string>>(() => FieldAccessor<AI_NetworkBehaviour_Chicken, string>.Create("eventRef_layEgg"));

		public static UnityEngine.GameObject GetEggPrefab(this AI_NetworkBehaviour_Chicken __self) => _eggPrefab.Value.GetValue(__self);
		public static void SetEggPrefab(this AI_NetworkBehaviour_Chicken __self, UnityEngine.GameObject value) => _eggPrefab.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetDropEggPoint(this AI_NetworkBehaviour_Chicken __self) => _dropEggPoint.Value.GetValue(__self);
		public static void SetDropEggPoint(this AI_NetworkBehaviour_Chicken __self, UnityEngine.Transform value) => _dropEggPoint.Value.SetValue(__self, value);
		public static Interval_Float GetEggDropInterval(this AI_NetworkBehaviour_Chicken __self) => _eggDropInterval.Value.GetValue(__self);
		public static void SetEggDropInterval(this AI_NetworkBehaviour_Chicken __self, Interval_Float value) => _eggDropInterval.Value.SetValue(__self, value);
		public static AI_State_Wait GetLayEggState(this AI_NetworkBehaviour_Chicken __self) => _layEggState.Value.GetValue(__self);
		public static void SetLayEggState(this AI_NetworkBehaviour_Chicken __self, AI_State_Wait value) => _layEggState.Value.SetValue(__self, value);
		public static float Get_eggTimer(this AI_NetworkBehaviour_Chicken __self) => __eggTimer.Value.GetValue(__self);
		public static void Set_eggTimer(this AI_NetworkBehaviour_Chicken __self, float value) => __eggTimer.Value.SetValue(__self, value);
		public static string GetEventRef_layEgg(this AI_NetworkBehaviour_Chicken __self) => _eventRef_layEgg.Value.GetValue(__self);
		public static void SetEventRef_layEgg(this AI_NetworkBehaviour_Chicken __self, string value) => _eventRef_layEgg.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_NetworkBehaviour_Chicken>> _Awake757602046 =
				new System.Lazy<MethodAccessor<AI_NetworkBehaviour_Chicken>>(() => MethodAccessor<AI_NetworkBehaviour_Chicken>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<AI_NetworkBehaviour_Chicken>> _UpdateHost757602046 =
				new System.Lazy<MethodAccessor<AI_NetworkBehaviour_Chicken>>(() => MethodAccessor<AI_NetworkBehaviour_Chicken>.Create("UpdateHost"));
		private static readonly System.Lazy<MethodAccessor<AI_NetworkBehaviour_Chicken>> _LayEggNetworked757602046 =
				new System.Lazy<MethodAccessor<AI_NetworkBehaviour_Chicken>>(() => MethodAccessor<AI_NetworkBehaviour_Chicken>.Create("LayEggNetworked"));
		private static readonly System.Lazy<MethodAccessor<AI_NetworkBehaviour_Chicken>> _LayEgg3448624322 =
				new System.Lazy<MethodAccessor<AI_NetworkBehaviour_Chicken>>(() => MethodAccessor<AI_NetworkBehaviour_Chicken>.Create("LayEgg", typeof(UnityEngine.Vector3), typeof(uint)));
		private static readonly System.Lazy<MethodAccessor<AI_NetworkBehaviour_Chicken>> _GetChickensLocalRaftPosition757602046 =
				new System.Lazy<MethodAccessor<AI_NetworkBehaviour_Chicken>>(() => MethodAccessor<AI_NetworkBehaviour_Chicken>.Create("GetChickensLocalRaftPosition"));

		public static void Awake(this AI_NetworkBehaviour_Chicken __self) => _Awake757602046.Value.Invoke(__self);
		public static void UpdateHost(this AI_NetworkBehaviour_Chicken __self) => _UpdateHost757602046.Value.Invoke(__self);
		public static void LayEggNetworked(this AI_NetworkBehaviour_Chicken __self) => _LayEggNetworked757602046.Value.Invoke(__self);
		public static void LayEgg(this AI_NetworkBehaviour_Chicken __self, UnityEngine.Vector3 localRaftPosition, uint eggObjectIndex) => _LayEgg3448624322.Value.Invoke(__self, localRaftPosition, eggObjectIndex);
		public static UnityEngine.Vector3 GetChickensLocalRaftPosition(this AI_NetworkBehaviour_Chicken __self) => (UnityEngine.Vector3)_GetChickensLocalRaftPosition757602046.Value.Invoke(__self);

	}

	public static class Private_AI_NetworkBehaviour_Chicken
	{

		private static readonly System.Lazy<StaticFieldAccessor<ObjectManager>> __objectManager =
				new System.Lazy<StaticFieldAccessor<ObjectManager>>(() => StaticFieldAccessor<ObjectManager>.Create(typeof(AI_NetworkBehaviour_Chicken), "_objectManager"));

		public static ObjectManager Get_objectManager() => __objectManager.Value.GetValue();
		public static void Set_objectManager(ObjectManager value) => __objectManager.Value.SetValue(value);

	}

	public static class PrivateAccessor_AI_NetworkBehaviour_Domestic
	{

		private static readonly System.Lazy<FieldAccessor<AI_NetworkBehaviour_Domestic, DomesticStateType>> __domesticState =
				new System.Lazy<FieldAccessor<AI_NetworkBehaviour_Domestic, DomesticStateType>>(() => FieldAccessor<AI_NetworkBehaviour_Domestic, DomesticStateType>.Create("_domesticState"));
		private static readonly System.Lazy<FieldAccessor<AI_NetworkBehaviour_Domestic, UnityEngine.Vector3>> _carryPosOffset =
				new System.Lazy<FieldAccessor<AI_NetworkBehaviour_Domestic, UnityEngine.Vector3>>(() => FieldAccessor<AI_NetworkBehaviour_Domestic, UnityEngine.Vector3>.Create("carryPosOffset"));
		private static readonly System.Lazy<FieldAccessor<AI_NetworkBehaviour_Domestic, UnityEngine.Vector3>> _carryRotOffset =
				new System.Lazy<FieldAccessor<AI_NetworkBehaviour_Domestic, UnityEngine.Vector3>>(() => FieldAccessor<AI_NetworkBehaviour_Domestic, UnityEngine.Vector3>.Create("carryRotOffset"));
		private static readonly System.Lazy<FieldAccessor<AI_NetworkBehaviour_Domestic, UnityEngine.Vector3>> _thirdPcarryPosOffset =
				new System.Lazy<FieldAccessor<AI_NetworkBehaviour_Domestic, UnityEngine.Vector3>>(() => FieldAccessor<AI_NetworkBehaviour_Domestic, UnityEngine.Vector3>.Create("thirdPcarryPosOffset"));
		private static readonly System.Lazy<FieldAccessor<AI_NetworkBehaviour_Domestic, UnityEngine.Vector3>> _thirdPcarryRotOffset =
				new System.Lazy<FieldAccessor<AI_NetworkBehaviour_Domestic, UnityEngine.Vector3>>(() => FieldAccessor<AI_NetworkBehaviour_Domestic, UnityEngine.Vector3>.Create("thirdPcarryRotOffset"));
		private static readonly System.Lazy<FieldAccessor<AI_NetworkBehaviour_Domestic, AI_State>> _defaultRaftState =
				new System.Lazy<FieldAccessor<AI_NetworkBehaviour_Domestic, AI_State>>(() => FieldAccessor<AI_NetworkBehaviour_Domestic, AI_State>.Create("defaultRaftState"));
		private static readonly System.Lazy<FieldAccessor<AI_NetworkBehaviour_Domestic, AI_State>> _defaultLandmarkState =
				new System.Lazy<FieldAccessor<AI_NetworkBehaviour_Domestic, AI_State>>(() => FieldAccessor<AI_NetworkBehaviour_Domestic, AI_State>.Create("defaultLandmarkState"));
		private static readonly System.Lazy<FieldAccessor<AI_NetworkBehaviour_Domestic, AI_State>> _capturedState =
				new System.Lazy<FieldAccessor<AI_NetworkBehaviour_Domestic, AI_State>>(() => FieldAccessor<AI_NetworkBehaviour_Domestic, AI_State>.Create("capturedState"));
		private static readonly System.Lazy<FieldAccessor<AI_NetworkBehaviour_Domestic, AI_State>> _carriedState =
				new System.Lazy<FieldAccessor<AI_NetworkBehaviour_Domestic, AI_State>>(() => FieldAccessor<AI_NetworkBehaviour_Domestic, AI_State>.Create("carriedState"));
		private static readonly System.Lazy<FieldAccessor<AI_NetworkBehaviour_Domestic, AI_State>> _hungryState =
				new System.Lazy<FieldAccessor<AI_NetworkBehaviour_Domestic, AI_State>>(() => FieldAccessor<AI_NetworkBehaviour_Domestic, AI_State>.Create("hungryState"));
		private static readonly System.Lazy<FieldAccessor<AI_NetworkBehaviour_Domestic, AI_State>> _eatState =
				new System.Lazy<FieldAccessor<AI_NetworkBehaviour_Domestic, AI_State>>(() => FieldAccessor<AI_NetworkBehaviour_Domestic, AI_State>.Create("eatState"));
		private static readonly System.Lazy<FieldAccessor<AI_NetworkBehaviour_Domestic, AI_State_Domestic_Water>> _waterState =
				new System.Lazy<FieldAccessor<AI_NetworkBehaviour_Domestic, AI_State_Domestic_Water>>(() => FieldAccessor<AI_NetworkBehaviour_Domestic, AI_State_Domestic_Water>.Create("waterState"));
		private static readonly System.Lazy<FieldAccessor<AI_NetworkBehaviour_Domestic, bool>> _isNetworkPositionLocal =
				new System.Lazy<FieldAccessor<AI_NetworkBehaviour_Domestic, bool>>(() => FieldAccessor<AI_NetworkBehaviour_Domestic, bool>.Create("isNetworkPositionLocal"));
		private static readonly System.Lazy<FieldAccessor<AI_NetworkBehaviour_Domestic, AI_StateMachine_Domestic>> _stateMachine_Domestic =
				new System.Lazy<FieldAccessor<AI_NetworkBehaviour_Domestic, AI_StateMachine_Domestic>>(() => FieldAccessor<AI_NetworkBehaviour_Domestic, AI_StateMachine_Domestic>.Create("stateMachine_Domestic"));
		private static readonly System.Lazy<FieldAccessor<AI_NetworkBehaviour_Domestic, AI_Movement>> _movement =
				new System.Lazy<FieldAccessor<AI_NetworkBehaviour_Domestic, AI_Movement>>(() => FieldAccessor<AI_NetworkBehaviour_Domestic, AI_Movement>.Create("movement"));
		private static readonly System.Lazy<FieldAccessor<AI_NetworkBehaviour_Domestic, float>> __hungerTimer =
				new System.Lazy<FieldAccessor<AI_NetworkBehaviour_Domestic, float>>(() => FieldAccessor<AI_NetworkBehaviour_Domestic, float>.Create("_hungerTimer"));
		private static readonly System.Lazy<FieldAccessor<AI_NetworkBehaviour_Domestic, float>> _totalStarveTime =
				new System.Lazy<FieldAccessor<AI_NetworkBehaviour_Domestic, float>>(() => FieldAccessor<AI_NetworkBehaviour_Domestic, float>.Create("totalStarveTime"));
		private static readonly System.Lazy<FieldAccessor<AI_NetworkBehaviour_Domestic, float>> _backToHungerStateCooldown =
				new System.Lazy<FieldAccessor<AI_NetworkBehaviour_Domestic, float>>(() => FieldAccessor<AI_NetworkBehaviour_Domestic, float>.Create("backToHungerStateCooldown"));
		private static readonly System.Lazy<FieldAccessor<AI_NetworkBehaviour_Domestic, bool>> _hasGivenAchievment =
				new System.Lazy<FieldAccessor<AI_NetworkBehaviour_Domestic, bool>>(() => FieldAccessor<AI_NetworkBehaviour_Domestic, bool>.Create("hasGivenAchievment"));

		public static DomesticStateType Get_domesticState(this AI_NetworkBehaviour_Domestic __self) => __domesticState.Value.GetValue(__self);
		public static void Set_domesticState(this AI_NetworkBehaviour_Domestic __self, DomesticStateType value) => __domesticState.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetCarryPosOffset(this AI_NetworkBehaviour_Domestic __self) => _carryPosOffset.Value.GetValue(__self);
		public static void SetCarryPosOffset(this AI_NetworkBehaviour_Domestic __self, UnityEngine.Vector3 value) => _carryPosOffset.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetCarryRotOffset(this AI_NetworkBehaviour_Domestic __self) => _carryRotOffset.Value.GetValue(__self);
		public static void SetCarryRotOffset(this AI_NetworkBehaviour_Domestic __self, UnityEngine.Vector3 value) => _carryRotOffset.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetThirdPcarryPosOffset(this AI_NetworkBehaviour_Domestic __self) => _thirdPcarryPosOffset.Value.GetValue(__self);
		public static void SetThirdPcarryPosOffset(this AI_NetworkBehaviour_Domestic __self, UnityEngine.Vector3 value) => _thirdPcarryPosOffset.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetThirdPcarryRotOffset(this AI_NetworkBehaviour_Domestic __self) => _thirdPcarryRotOffset.Value.GetValue(__self);
		public static void SetThirdPcarryRotOffset(this AI_NetworkBehaviour_Domestic __self, UnityEngine.Vector3 value) => _thirdPcarryRotOffset.Value.SetValue(__self, value);
		public static AI_State GetDefaultRaftState(this AI_NetworkBehaviour_Domestic __self) => _defaultRaftState.Value.GetValue(__self);
		public static void SetDefaultRaftState(this AI_NetworkBehaviour_Domestic __self, AI_State value) => _defaultRaftState.Value.SetValue(__self, value);
		public static AI_State GetDefaultLandmarkState(this AI_NetworkBehaviour_Domestic __self) => _defaultLandmarkState.Value.GetValue(__self);
		public static void SetDefaultLandmarkState(this AI_NetworkBehaviour_Domestic __self, AI_State value) => _defaultLandmarkState.Value.SetValue(__self, value);
		public static AI_State GetCapturedState(this AI_NetworkBehaviour_Domestic __self) => _capturedState.Value.GetValue(__self);
		public static void SetCapturedState(this AI_NetworkBehaviour_Domestic __self, AI_State value) => _capturedState.Value.SetValue(__self, value);
		public static AI_State GetCarriedState(this AI_NetworkBehaviour_Domestic __self) => _carriedState.Value.GetValue(__self);
		public static void SetCarriedState(this AI_NetworkBehaviour_Domestic __self, AI_State value) => _carriedState.Value.SetValue(__self, value);
		public static AI_State GetHungryState(this AI_NetworkBehaviour_Domestic __self) => _hungryState.Value.GetValue(__self);
		public static void SetHungryState(this AI_NetworkBehaviour_Domestic __self, AI_State value) => _hungryState.Value.SetValue(__self, value);
		public static AI_State GetEatState(this AI_NetworkBehaviour_Domestic __self) => _eatState.Value.GetValue(__self);
		public static void SetEatState(this AI_NetworkBehaviour_Domestic __self, AI_State value) => _eatState.Value.SetValue(__self, value);
		public static AI_State_Domestic_Water GetWaterState(this AI_NetworkBehaviour_Domestic __self) => _waterState.Value.GetValue(__self);
		public static void SetWaterState(this AI_NetworkBehaviour_Domestic __self, AI_State_Domestic_Water value) => _waterState.Value.SetValue(__self, value);
		public static bool GetIsNetworkPositionLocal(this AI_NetworkBehaviour_Domestic __self) => _isNetworkPositionLocal.Value.GetValue(__self);
		public static void SetIsNetworkPositionLocal(this AI_NetworkBehaviour_Domestic __self, bool value) => _isNetworkPositionLocal.Value.SetValue(__self, value);
		public static AI_StateMachine_Domestic GetStateMachine_Domestic(this AI_NetworkBehaviour_Domestic __self) => _stateMachine_Domestic.Value.GetValue(__self);
		public static void SetStateMachine_Domestic(this AI_NetworkBehaviour_Domestic __self, AI_StateMachine_Domestic value) => _stateMachine_Domestic.Value.SetValue(__self, value);
		public static AI_Movement GetMovement(this AI_NetworkBehaviour_Domestic __self) => _movement.Value.GetValue(__self);
		public static void SetMovement(this AI_NetworkBehaviour_Domestic __self, AI_Movement value) => _movement.Value.SetValue(__self, value);
		public static float Get_hungerTimer(this AI_NetworkBehaviour_Domestic __self) => __hungerTimer.Value.GetValue(__self);
		public static void Set_hungerTimer(this AI_NetworkBehaviour_Domestic __self, float value) => __hungerTimer.Value.SetValue(__self, value);
		public static float GetTotalStarveTime(this AI_NetworkBehaviour_Domestic __self) => _totalStarveTime.Value.GetValue(__self);
		public static void SetTotalStarveTime(this AI_NetworkBehaviour_Domestic __self, float value) => _totalStarveTime.Value.SetValue(__self, value);
		public static float GetBackToHungerStateCooldown(this AI_NetworkBehaviour_Domestic __self) => _backToHungerStateCooldown.Value.GetValue(__self);
		public static void SetBackToHungerStateCooldown(this AI_NetworkBehaviour_Domestic __self, float value) => _backToHungerStateCooldown.Value.SetValue(__self, value);
		public static bool GetHasGivenAchievment(this AI_NetworkBehaviour_Domestic __self) => _hasGivenAchievment.Value.GetValue(__self);
		public static void SetHasGivenAchievment(this AI_NetworkBehaviour_Domestic __self, bool value) => _hasGivenAchievment.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_NetworkBehaviour_Domestic>> _Awake757602046 =
				new System.Lazy<MethodAccessor<AI_NetworkBehaviour_Domestic>>(() => MethodAccessor<AI_NetworkBehaviour_Domestic>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<AI_NetworkBehaviour_Domestic>> _Start757602046 =
				new System.Lazy<MethodAccessor<AI_NetworkBehaviour_Domestic>>(() => MethodAccessor<AI_NetworkBehaviour_Domestic>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<AI_NetworkBehaviour_Domestic>> _Update757602046 =
				new System.Lazy<MethodAccessor<AI_NetworkBehaviour_Domestic>>(() => MethodAccessor<AI_NetworkBehaviour_Domestic>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<AI_NetworkBehaviour_Domestic>> _UpdateHost757602046 =
				new System.Lazy<MethodAccessor<AI_NetworkBehaviour_Domestic>>(() => MethodAccessor<AI_NetworkBehaviour_Domestic>.Create("UpdateHost"));
		private static readonly System.Lazy<MethodAccessor<AI_NetworkBehaviour_Domestic>> _UpdateRemoteclient757602046 =
				new System.Lazy<MethodAccessor<AI_NetworkBehaviour_Domestic>>(() => MethodAccessor<AI_NetworkBehaviour_Domestic>.Create("UpdateRemoteclient"));
		private static readonly System.Lazy<MethodAccessor<AI_NetworkBehaviour_Domestic>> _SetObjectLayerDependingOnState3432035886 =
				new System.Lazy<MethodAccessor<AI_NetworkBehaviour_Domestic>>(() => MethodAccessor<AI_NetworkBehaviour_Domestic>.Create("SetObjectLayerDependingOnState", typeof(DomesticStateType)));
		private static readonly System.Lazy<MethodAccessor<AI_NetworkBehaviour_Domestic>> _OnCaptured757602046 =
				new System.Lazy<MethodAccessor<AI_NetworkBehaviour_Domestic>>(() => MethodAccessor<AI_NetworkBehaviour_Domestic>.Create("OnCaptured"));
		private static readonly System.Lazy<MethodAccessor<AI_NetworkBehaviour_Domestic>> _OnStartCarry3461878659 =
				new System.Lazy<MethodAccessor<AI_NetworkBehaviour_Domestic>>(() => MethodAccessor<AI_NetworkBehaviour_Domestic>.Create("OnStartCarry", typeof(Network_Player)));
		private static readonly System.Lazy<MethodAccessor<AI_NetworkBehaviour_Domestic>> _OnStopCarry3435821211 =
				new System.Lazy<MethodAccessor<AI_NetworkBehaviour_Domestic>>(() => MethodAccessor<AI_NetworkBehaviour_Domestic>.Create("OnStopCarry", typeof(Network_Player), typeof(bool)));
		private static readonly System.Lazy<MethodAccessor<AI_NetworkBehaviour_Domestic>> _QuickTame757602046 =
				new System.Lazy<MethodAccessor<AI_NetworkBehaviour_Domestic>>(() => MethodAccessor<AI_NetworkBehaviour_Domestic>.Create("QuickTame"));
		private static readonly System.Lazy<MethodAccessor<AI_NetworkBehaviour_Domestic>> _QuickTameDelayed757602046 =
				new System.Lazy<MethodAccessor<AI_NetworkBehaviour_Domestic>>(() => MethodAccessor<AI_NetworkBehaviour_Domestic>.Create("QuickTameDelayed"));
		private static readonly System.Lazy<MethodAccessor<AI_NetworkBehaviour_Domestic>> _Captured757602046 =
				new System.Lazy<MethodAccessor<AI_NetworkBehaviour_Domestic>>(() => MethodAccessor<AI_NetworkBehaviour_Domestic>.Create("Captured"));
		private static readonly System.Lazy<MethodAccessor<AI_NetworkBehaviour_Domestic>> _StartCarryDelayed3673141244 =
				new System.Lazy<MethodAccessor<AI_NetworkBehaviour_Domestic>>(() => MethodAccessor<AI_NetworkBehaviour_Domestic>.Create("StartCarryDelayed", typeof(Network_Player), typeof(float)));
		private static readonly System.Lazy<MethodAccessor<AI_NetworkBehaviour_Domestic>> _StartCarry3461878659 =
				new System.Lazy<MethodAccessor<AI_NetworkBehaviour_Domestic>>(() => MethodAccessor<AI_NetworkBehaviour_Domestic>.Create("StartCarry", typeof(Network_Player)));
		private static readonly System.Lazy<MethodAccessor<AI_NetworkBehaviour_Domestic>> _StopCarry3461878659 =
				new System.Lazy<MethodAccessor<AI_NetworkBehaviour_Domestic>>(() => MethodAccessor<AI_NetworkBehaviour_Domestic>.Create("StopCarry", typeof(Network_Player)));
		private static readonly System.Lazy<MethodAccessor<AI_NetworkBehaviour_Domestic>> _SetStartCarriedOffsets3461878659 =
				new System.Lazy<MethodAccessor<AI_NetworkBehaviour_Domestic>>(() => MethodAccessor<AI_NetworkBehaviour_Domestic>.Create("SetStartCarriedOffsets", typeof(Network_Player)));
		private static readonly System.Lazy<MethodAccessor<AI_NetworkBehaviour_Domestic>> _SetStopCarriedOffsets3461878659 =
				new System.Lazy<MethodAccessor<AI_NetworkBehaviour_Domestic>>(() => MethodAccessor<AI_NetworkBehaviour_Domestic>.Create("SetStopCarriedOffsets", typeof(Network_Player)));
		private static readonly System.Lazy<MethodAccessor<AI_NetworkBehaviour_Domestic>> _ListenToCharacterPerspectiveChange3435821211 =
				new System.Lazy<MethodAccessor<AI_NetworkBehaviour_Domestic>>(() => MethodAccessor<AI_NetworkBehaviour_Domestic>.Create("ListenToCharacterPerspectiveChange", typeof(Network_Player), typeof(bool)));
		private static readonly System.Lazy<MethodAccessor<AI_NetworkBehaviour_Domestic>> _OnPerspectiveSwap3450040886 =
				new System.Lazy<MethodAccessor<AI_NetworkBehaviour_Domestic>>(() => MethodAccessor<AI_NetworkBehaviour_Domestic>.Create("OnPerspectiveSwap", typeof(bool)));
		private static readonly System.Lazy<MethodAccessor<AI_NetworkBehaviour_Domestic>> _HandleHunger757602046 =
				new System.Lazy<MethodAccessor<AI_NetworkBehaviour_Domestic>>(() => MethodAccessor<AI_NetworkBehaviour_Domestic>.Create("HandleHunger"));
		private static readonly System.Lazy<MethodAccessor<AI_NetworkBehaviour_Domestic>> _HandleStarving757602046 =
				new System.Lazy<MethodAccessor<AI_NetworkBehaviour_Domestic>>(() => MethodAccessor<AI_NetworkBehaviour_Domestic>.Create("HandleStarving"));
		private static readonly System.Lazy<MethodAccessor<AI_NetworkBehaviour_Domestic>> _InitializeCaptureScript757602046 =
				new System.Lazy<MethodAccessor<AI_NetworkBehaviour_Domestic>>(() => MethodAccessor<AI_NetworkBehaviour_Domestic>.Create("InitializeCaptureScript"));
		private static readonly System.Lazy<MethodAccessor<AI_NetworkBehaviour_Domestic>> _InitializeCarryScript757602046 =
				new System.Lazy<MethodAccessor<AI_NetworkBehaviour_Domestic>>(() => MethodAccessor<AI_NetworkBehaviour_Domestic>.Create("InitializeCarryScript"));
		private static readonly System.Lazy<MethodAccessor<AI_NetworkBehaviour_Domestic>> _SetDomesticStateDependingOnPlayerState3461878659 =
				new System.Lazy<MethodAccessor<AI_NetworkBehaviour_Domestic>>(() => MethodAccessor<AI_NetworkBehaviour_Domestic>.Create("SetDomesticStateDependingOnPlayerState", typeof(Network_Player)));
		private static readonly System.Lazy<MethodAccessor<AI_NetworkBehaviour_Domestic>> _RefreshDomesticState3450040886 =
				new System.Lazy<MethodAccessor<AI_NetworkBehaviour_Domestic>>(() => MethodAccessor<AI_NetworkBehaviour_Domestic>.Create("RefreshDomesticState", typeof(bool)));

		public static void Awake(this AI_NetworkBehaviour_Domestic __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this AI_NetworkBehaviour_Domestic __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this AI_NetworkBehaviour_Domestic __self) => _Update757602046.Value.Invoke(__self);
		public static void UpdateHost(this AI_NetworkBehaviour_Domestic __self) => _UpdateHost757602046.Value.Invoke(__self);
		public static void UpdateRemoteclient(this AI_NetworkBehaviour_Domestic __self) => _UpdateRemoteclient757602046.Value.Invoke(__self);
		public static void SetObjectLayerDependingOnState(this AI_NetworkBehaviour_Domestic __self, DomesticStateType type) => _SetObjectLayerDependingOnState3432035886.Value.Invoke(__self, type);
		public static void OnCaptured(this AI_NetworkBehaviour_Domestic __self) => _OnCaptured757602046.Value.Invoke(__self);
		public static void OnStartCarry(this AI_NetworkBehaviour_Domestic __self, Network_Player player) => _OnStartCarry3461878659.Value.Invoke(__self, player);
		public static void OnStopCarry(this AI_NetworkBehaviour_Domestic __self, Network_Player player, bool force) => _OnStopCarry3435821211.Value.Invoke(__self, player, force);
		public static void QuickTame(this AI_NetworkBehaviour_Domestic __self) => _QuickTame757602046.Value.Invoke(__self);
		public static System.Collections.IEnumerator QuickTameDelayed(this AI_NetworkBehaviour_Domestic __self) => (System.Collections.IEnumerator)_QuickTameDelayed757602046.Value.Invoke(__self);
		public static void Captured(this AI_NetworkBehaviour_Domestic __self) => _Captured757602046.Value.Invoke(__self);
		public static System.Collections.IEnumerator StartCarryDelayed(this AI_NetworkBehaviour_Domestic __self, Network_Player player, float delay) => (System.Collections.IEnumerator)_StartCarryDelayed3673141244.Value.Invoke(__self, player, delay);
		public static bool StartCarry(this AI_NetworkBehaviour_Domestic __self, Network_Player player) => (bool)_StartCarry3461878659.Value.Invoke(__self, player);
		public static bool StopCarry(this AI_NetworkBehaviour_Domestic __self, Network_Player player) => (bool)_StopCarry3461878659.Value.Invoke(__self, player);
		public static void SetStartCarriedOffsets(this AI_NetworkBehaviour_Domestic __self, Network_Player player) => _SetStartCarriedOffsets3461878659.Value.Invoke(__self, player);
		public static void SetStopCarriedOffsets(this AI_NetworkBehaviour_Domestic __self, Network_Player player) => _SetStopCarriedOffsets3461878659.Value.Invoke(__self, player);
		public static void ListenToCharacterPerspectiveChange(this AI_NetworkBehaviour_Domestic __self, Network_Player playerNetwork, bool value) => _ListenToCharacterPerspectiveChange3435821211.Value.Invoke(__self, playerNetwork, value);
		public static void OnPerspectiveSwap(this AI_NetworkBehaviour_Domestic __self, bool toThirdPerson) => _OnPerspectiveSwap3450040886.Value.Invoke(__self, toThirdPerson);
		public static void HandleHunger(this AI_NetworkBehaviour_Domestic __self) => _HandleHunger757602046.Value.Invoke(__self);
		public static void HandleStarving(this AI_NetworkBehaviour_Domestic __self) => _HandleStarving757602046.Value.Invoke(__self);
		public static void InitializeCaptureScript(this AI_NetworkBehaviour_Domestic __self) => _InitializeCaptureScript757602046.Value.Invoke(__self);
		public static void InitializeCarryScript(this AI_NetworkBehaviour_Domestic __self) => _InitializeCarryScript757602046.Value.Invoke(__self);
		public static void SetDomesticStateDependingOnPlayerState(this AI_NetworkBehaviour_Domestic __self, Network_Player player) => _SetDomesticStateDependingOnPlayerState3461878659.Value.Invoke(__self, player);
		public static void RefreshDomesticState(this AI_NetworkBehaviour_Domestic __self, bool changeAIState) => _RefreshDomesticState3450040886.Value.Invoke(__self, changeAIState);

	}

	public static class PrivateAccessor_AI_NetworkBehaviour_Domestic_Resource
	{

		private static readonly System.Lazy<MethodAccessor<AI_NetworkBehaviour_Domestic_Resource>> _Awake757602046 =
				new System.Lazy<MethodAccessor<AI_NetworkBehaviour_Domestic_Resource>>(() => MethodAccessor<AI_NetworkBehaviour_Domestic_Resource>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<AI_NetworkBehaviour_Domestic_Resource>> _Start757602046 =
				new System.Lazy<MethodAccessor<AI_NetworkBehaviour_Domestic_Resource>>(() => MethodAccessor<AI_NetworkBehaviour_Domestic_Resource>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<AI_NetworkBehaviour_Domestic_Resource>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<AI_NetworkBehaviour_Domestic_Resource>>(() => MethodAccessor<AI_NetworkBehaviour_Domestic_Resource>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<AI_NetworkBehaviour_Domestic_Resource>> _UpdateHost757602046 =
				new System.Lazy<MethodAccessor<AI_NetworkBehaviour_Domestic_Resource>>(() => MethodAccessor<AI_NetworkBehaviour_Domestic_Resource>.Create("UpdateHost"));
		private static readonly System.Lazy<MethodAccessor<AI_NetworkBehaviour_Domestic_Resource>> _OnDamageTaken2475015728 =
				new System.Lazy<MethodAccessor<AI_NetworkBehaviour_Domestic_Resource>>(() => MethodAccessor<AI_NetworkBehaviour_Domestic_Resource>.Create("OnDamageTaken", typeof(float), typeof(UnityEngine.Vector3), typeof(UnityEngine.Vector3), typeof(EntityType)));
		private static readonly System.Lazy<MethodAccessor<AI_NetworkBehaviour_Domestic_Resource>> _OnResourceReady757602046 =
				new System.Lazy<MethodAccessor<AI_NetworkBehaviour_Domestic_Resource>>(() => MethodAccessor<AI_NetworkBehaviour_Domestic_Resource>.Create("OnResourceReady"));
		private static readonly System.Lazy<MethodAccessor<AI_NetworkBehaviour_Domestic_Resource>> _OnResourceNotReady757602046 =
				new System.Lazy<MethodAccessor<AI_NetworkBehaviour_Domestic_Resource>>(() => MethodAccessor<AI_NetworkBehaviour_Domestic_Resource>.Create("OnResourceNotReady"));
		private static readonly System.Lazy<MethodAccessor<AI_NetworkBehaviour_Domestic_Resource>> _QuickTame757602046 =
				new System.Lazy<MethodAccessor<AI_NetworkBehaviour_Domestic_Resource>>(() => MethodAccessor<AI_NetworkBehaviour_Domestic_Resource>.Create("QuickTame"));
		private static readonly System.Lazy<MethodAccessor<AI_NetworkBehaviour_Domestic_Resource>> _Captured757602046 =
				new System.Lazy<MethodAccessor<AI_NetworkBehaviour_Domestic_Resource>>(() => MethodAccessor<AI_NetworkBehaviour_Domestic_Resource>.Create("Captured"));
		private static readonly System.Lazy<MethodAccessor<AI_NetworkBehaviour_Domestic_Resource>> _ResourceReady757602046 =
				new System.Lazy<MethodAccessor<AI_NetworkBehaviour_Domestic_Resource>>(() => MethodAccessor<AI_NetworkBehaviour_Domestic_Resource>.Create("ResourceReady"));
		private static readonly System.Lazy<MethodAccessor<AI_NetworkBehaviour_Domestic_Resource>> _ResourceNotReady757602046 =
				new System.Lazy<MethodAccessor<AI_NetworkBehaviour_Domestic_Resource>>(() => MethodAccessor<AI_NetworkBehaviour_Domestic_Resource>.Create("ResourceNotReady"));
		private static readonly System.Lazy<MethodAccessor<AI_NetworkBehaviour_Domestic_Resource>> _InitializeResource757602046 =
				new System.Lazy<MethodAccessor<AI_NetworkBehaviour_Domestic_Resource>>(() => MethodAccessor<AI_NetworkBehaviour_Domestic_Resource>.Create("InitializeResource"));

		public static void Awake(this AI_NetworkBehaviour_Domestic_Resource __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this AI_NetworkBehaviour_Domestic_Resource __self) => _Start757602046.Value.Invoke(__self);
		public static void OnDestroy(this AI_NetworkBehaviour_Domestic_Resource __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void UpdateHost(this AI_NetworkBehaviour_Domestic_Resource __self) => _UpdateHost757602046.Value.Invoke(__self);
		public static void OnDamageTaken(this AI_NetworkBehaviour_Domestic_Resource __self, float damage, UnityEngine.Vector3 hitPoint, UnityEngine.Vector3 hitNormal, EntityType damageInflictorEntityType) => _OnDamageTaken2475015728.Value.Invoke(__self, damage, hitPoint, hitNormal, damageInflictorEntityType);
		public static void OnResourceReady(this AI_NetworkBehaviour_Domestic_Resource __self) => _OnResourceReady757602046.Value.Invoke(__self);
		public static void OnResourceNotReady(this AI_NetworkBehaviour_Domestic_Resource __self) => _OnResourceNotReady757602046.Value.Invoke(__self);
		public static void QuickTame(this AI_NetworkBehaviour_Domestic_Resource __self) => _QuickTame757602046.Value.Invoke(__self);
		public static void Captured(this AI_NetworkBehaviour_Domestic_Resource __self) => _Captured757602046.Value.Invoke(__self);
		public static void ResourceReady(this AI_NetworkBehaviour_Domestic_Resource __self) => _ResourceReady757602046.Value.Invoke(__self);
		public static void ResourceNotReady(this AI_NetworkBehaviour_Domestic_Resource __self) => _ResourceNotReady757602046.Value.Invoke(__self);
		public static void InitializeResource(this AI_NetworkBehaviour_Domestic_Resource __self) => _InitializeResource757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AI_NetworkBehaviour_Goat
	{

		private static readonly System.Lazy<MethodAccessor<AI_NetworkBehaviour_Goat>> _ResourceReady757602046 =
				new System.Lazy<MethodAccessor<AI_NetworkBehaviour_Goat>>(() => MethodAccessor<AI_NetworkBehaviour_Goat>.Create("ResourceReady"));
		private static readonly System.Lazy<MethodAccessor<AI_NetworkBehaviour_Goat>> _ResourceNotReady757602046 =
				new System.Lazy<MethodAccessor<AI_NetworkBehaviour_Goat>>(() => MethodAccessor<AI_NetworkBehaviour_Goat>.Create("ResourceNotReady"));

		public static void ResourceReady(this AI_NetworkBehaviour_Goat __self) => _ResourceReady757602046.Value.Invoke(__self);
		public static void ResourceNotReady(this AI_NetworkBehaviour_Goat __self) => _ResourceNotReady757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AI_NetworkBehaviour_Hyena
	{

		private static readonly System.Lazy<FieldAccessor<AI_NetworkBehaviour_Hyena, AttachPlayer>> _attachPlayerScript =
				new System.Lazy<FieldAccessor<AI_NetworkBehaviour_Hyena, AttachPlayer>>(() => FieldAccessor<AI_NetworkBehaviour_Hyena, AttachPlayer>.Create("attachPlayerScript"));
		private static readonly System.Lazy<FieldAccessor<AI_NetworkBehaviour_Hyena, UnityEngine.ParticleSystem>> _kickedByPlayerParticles =
				new System.Lazy<FieldAccessor<AI_NetworkBehaviour_Hyena, UnityEngine.ParticleSystem>>(() => FieldAccessor<AI_NetworkBehaviour_Hyena, UnityEngine.ParticleSystem>.Create("kickedByPlayerParticles"));
		private static readonly System.Lazy<FieldAccessor<AI_NetworkBehaviour_Hyena, AI_State_MeleeAttackAttach>> _state_meleeAttach =
				new System.Lazy<FieldAccessor<AI_NetworkBehaviour_Hyena, AI_State_MeleeAttackAttach>>(() => FieldAccessor<AI_NetworkBehaviour_Hyena, AI_State_MeleeAttackAttach>.Create("state_meleeAttach"));

		public static AttachPlayer GetAttachPlayerScript(this AI_NetworkBehaviour_Hyena __self) => _attachPlayerScript.Value.GetValue(__self);
		public static void SetAttachPlayerScript(this AI_NetworkBehaviour_Hyena __self, AttachPlayer value) => _attachPlayerScript.Value.SetValue(__self, value);
		public static UnityEngine.ParticleSystem GetKickedByPlayerParticles(this AI_NetworkBehaviour_Hyena __self) => _kickedByPlayerParticles.Value.GetValue(__self);
		public static void SetKickedByPlayerParticles(this AI_NetworkBehaviour_Hyena __self, UnityEngine.ParticleSystem value) => _kickedByPlayerParticles.Value.SetValue(__self, value);
		public static AI_State_MeleeAttackAttach GetState_meleeAttach(this AI_NetworkBehaviour_Hyena __self) => _state_meleeAttach.Value.GetValue(__self);
		public static void SetState_meleeAttach(this AI_NetworkBehaviour_Hyena __self, AI_State_MeleeAttackAttach value) => _state_meleeAttach.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_NetworkBehaviour_Hyena>> _Start757602046 =
				new System.Lazy<MethodAccessor<AI_NetworkBehaviour_Hyena>>(() => MethodAccessor<AI_NetworkBehaviour_Hyena>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<AI_NetworkBehaviour_Hyena>> _OnStartCarryPlayer3461878659 =
				new System.Lazy<MethodAccessor<AI_NetworkBehaviour_Hyena>>(() => MethodAccessor<AI_NetworkBehaviour_Hyena>.Create("OnStartCarryPlayer", typeof(Network_Player)));
		private static readonly System.Lazy<MethodAccessor<AI_NetworkBehaviour_Hyena>> _OnStopCarryPlayer3461878659 =
				new System.Lazy<MethodAccessor<AI_NetworkBehaviour_Hyena>>(() => MethodAccessor<AI_NetworkBehaviour_Hyena>.Create("OnStopCarryPlayer", typeof(Network_Player)));
		private static readonly System.Lazy<MethodAccessor<AI_NetworkBehaviour_Hyena>> _OnCarriedPlayerAnimationEvent3454057852 =
				new System.Lazy<MethodAccessor<AI_NetworkBehaviour_Hyena>>(() => MethodAccessor<AI_NetworkBehaviour_Hyena>.Create("OnCarriedPlayerAnimationEvent", typeof(string)));

		public static void Start(this AI_NetworkBehaviour_Hyena __self) => _Start757602046.Value.Invoke(__self);
		public static void OnStartCarryPlayer(this AI_NetworkBehaviour_Hyena __self, Network_Player player) => _OnStartCarryPlayer3461878659.Value.Invoke(__self, player);
		public static void OnStopCarryPlayer(this AI_NetworkBehaviour_Hyena __self, Network_Player player) => _OnStopCarryPlayer3461878659.Value.Invoke(__self, player);
		public static void OnCarriedPlayerAnimationEvent(this AI_NetworkBehaviour_Hyena __self, string eventName) => _OnCarriedPlayerAnimationEvent3454057852.Value.Invoke(__self, eventName);

	}

	public static class PrivateAccessor_AI_NetworkBehaviour_HyenaBoss
	{

		private static readonly System.Lazy<FieldAccessor<AI_NetworkBehaviour_HyenaBoss, AI_State_PinDown>> _state_PinDown =
				new System.Lazy<FieldAccessor<AI_NetworkBehaviour_HyenaBoss, AI_State_PinDown>>(() => FieldAccessor<AI_NetworkBehaviour_HyenaBoss, AI_State_PinDown>.Create("state_PinDown"));
		private static readonly System.Lazy<FieldAccessor<AI_NetworkBehaviour_HyenaBoss, AI_State_Throw>> _state_Throw =
				new System.Lazy<FieldAccessor<AI_NetworkBehaviour_HyenaBoss, AI_State_Throw>>(() => FieldAccessor<AI_NetworkBehaviour_HyenaBoss, AI_State_Throw>.Create("state_Throw"));
		private static readonly System.Lazy<FieldAccessor<AI_NetworkBehaviour_HyenaBoss, AI_State_BunnyJump>> _state_Jump =
				new System.Lazy<FieldAccessor<AI_NetworkBehaviour_HyenaBoss, AI_State_BunnyJump>>(() => FieldAccessor<AI_NetworkBehaviour_HyenaBoss, AI_State_BunnyJump>.Create("state_Jump"));

		public static AI_State_PinDown GetState_PinDown(this AI_NetworkBehaviour_HyenaBoss __self) => _state_PinDown.Value.GetValue(__self);
		public static void SetState_PinDown(this AI_NetworkBehaviour_HyenaBoss __self, AI_State_PinDown value) => _state_PinDown.Value.SetValue(__self, value);
		public static AI_State_Throw GetState_Throw(this AI_NetworkBehaviour_HyenaBoss __self) => _state_Throw.Value.GetValue(__self);
		public static void SetState_Throw(this AI_NetworkBehaviour_HyenaBoss __self, AI_State_Throw value) => _state_Throw.Value.SetValue(__self, value);
		public static AI_State_BunnyJump GetState_Jump(this AI_NetworkBehaviour_HyenaBoss __self) => _state_Jump.Value.GetValue(__self);
		public static void SetState_Jump(this AI_NetworkBehaviour_HyenaBoss __self, AI_State_BunnyJump value) => _state_Jump.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_AI_NetworkBehaviour_Llama
	{

		private static readonly System.Lazy<FieldAccessor<AI_NetworkBehaviour_Llama, UnityEngine.GameObject>> _woolModel =
				new System.Lazy<FieldAccessor<AI_NetworkBehaviour_Llama, UnityEngine.GameObject>>(() => FieldAccessor<AI_NetworkBehaviour_Llama, UnityEngine.GameObject>.Create("woolModel"));
		private static readonly System.Lazy<FieldAccessor<AI_NetworkBehaviour_Llama, ObjectOffsetter>> _nametagOffsetter =
				new System.Lazy<FieldAccessor<AI_NetworkBehaviour_Llama, ObjectOffsetter>>(() => FieldAccessor<AI_NetworkBehaviour_Llama, ObjectOffsetter>.Create("nametagOffsetter"));
		private static readonly System.Lazy<FieldAccessor<AI_NetworkBehaviour_Llama, ItemObjectEnabler>> _objectEnabler =
				new System.Lazy<FieldAccessor<AI_NetworkBehaviour_Llama, ItemObjectEnabler>>(() => FieldAccessor<AI_NetworkBehaviour_Llama, ItemObjectEnabler>.Create("objectEnabler"));
		private static readonly System.Lazy<FieldAccessor<AI_NetworkBehaviour_Llama, UnityEngine.ParticleSystem>> _woolParticleEffect =
				new System.Lazy<FieldAccessor<AI_NetworkBehaviour_Llama, UnityEngine.ParticleSystem>>(() => FieldAccessor<AI_NetworkBehaviour_Llama, UnityEngine.ParticleSystem>.Create("woolParticleEffect"));

		public static UnityEngine.GameObject GetWoolModel(this AI_NetworkBehaviour_Llama __self) => _woolModel.Value.GetValue(__self);
		public static void SetWoolModel(this AI_NetworkBehaviour_Llama __self, UnityEngine.GameObject value) => _woolModel.Value.SetValue(__self, value);
		public static ObjectOffsetter GetNametagOffsetter(this AI_NetworkBehaviour_Llama __self) => _nametagOffsetter.Value.GetValue(__self);
		public static void SetNametagOffsetter(this AI_NetworkBehaviour_Llama __self, ObjectOffsetter value) => _nametagOffsetter.Value.SetValue(__self, value);
		public static ItemObjectEnabler GetObjectEnabler(this AI_NetworkBehaviour_Llama __self) => _objectEnabler.Value.GetValue(__self);
		public static void SetObjectEnabler(this AI_NetworkBehaviour_Llama __self, ItemObjectEnabler value) => _objectEnabler.Value.SetValue(__self, value);
		public static UnityEngine.ParticleSystem GetWoolParticleEffect(this AI_NetworkBehaviour_Llama __self) => _woolParticleEffect.Value.GetValue(__self);
		public static void SetWoolParticleEffect(this AI_NetworkBehaviour_Llama __self, UnityEngine.ParticleSystem value) => _woolParticleEffect.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_NetworkBehaviour_Llama>> _InitializeResource757602046 =
				new System.Lazy<MethodAccessor<AI_NetworkBehaviour_Llama>>(() => MethodAccessor<AI_NetworkBehaviour_Llama>.Create("InitializeResource"));
		private static readonly System.Lazy<MethodAccessor<AI_NetworkBehaviour_Llama>> _ResourceReady757602046 =
				new System.Lazy<MethodAccessor<AI_NetworkBehaviour_Llama>>(() => MethodAccessor<AI_NetworkBehaviour_Llama>.Create("ResourceReady"));
		private static readonly System.Lazy<MethodAccessor<AI_NetworkBehaviour_Llama>> _ResourceNotReady757602046 =
				new System.Lazy<MethodAccessor<AI_NetworkBehaviour_Llama>>(() => MethodAccessor<AI_NetworkBehaviour_Llama>.Create("ResourceNotReady"));
		private static readonly System.Lazy<MethodAccessor<AI_NetworkBehaviour_Llama>> _SetWoolState3450040886 =
				new System.Lazy<MethodAccessor<AI_NetworkBehaviour_Llama>>(() => MethodAccessor<AI_NetworkBehaviour_Llama>.Create("SetWoolState", typeof(bool)));

		public static void InitializeResource(this AI_NetworkBehaviour_Llama __self) => _InitializeResource757602046.Value.Invoke(__self);
		public static void ResourceReady(this AI_NetworkBehaviour_Llama __self) => _ResourceReady757602046.Value.Invoke(__self);
		public static void ResourceNotReady(this AI_NetworkBehaviour_Llama __self) => _ResourceNotReady757602046.Value.Invoke(__self);
		public static void SetWoolState(this AI_NetworkBehaviour_Llama __self, bool state) => _SetWoolState3450040886.Value.Invoke(__self, state);

	}

	public static class PrivateAccessor_AI_NetworkBehaviour_MamaBear
	{

		private static readonly System.Lazy<FieldAccessor<AI_NetworkBehaviour_MamaBear, AI_StateMachine_MamaBear>> _stateMachineMamaBear =
				new System.Lazy<FieldAccessor<AI_NetworkBehaviour_MamaBear, AI_StateMachine_MamaBear>>(() => FieldAccessor<AI_NetworkBehaviour_MamaBear, AI_StateMachine_MamaBear>.Create("stateMachineMamaBear"));

		public static AI_StateMachine_MamaBear GetStateMachineMamaBear(this AI_NetworkBehaviour_MamaBear __self) => _stateMachineMamaBear.Value.GetValue(__self);
		public static void SetStateMachineMamaBear(this AI_NetworkBehaviour_MamaBear __self, AI_StateMachine_MamaBear value) => _stateMachineMamaBear.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_NetworkBehaviour_MamaBear>> _Awake757602046 =
				new System.Lazy<MethodAccessor<AI_NetworkBehaviour_MamaBear>>(() => MethodAccessor<AI_NetworkBehaviour_MamaBear>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<AI_NetworkBehaviour_MamaBear>> _Start757602046 =
				new System.Lazy<MethodAccessor<AI_NetworkBehaviour_MamaBear>>(() => MethodAccessor<AI_NetworkBehaviour_MamaBear>.Create("Start"));

		public static void Awake(this AI_NetworkBehaviour_MamaBear __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this AI_NetworkBehaviour_MamaBear __self) => _Start757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AI_NetworkBehaviour_NPC
	{

		private static readonly System.Lazy<FieldAccessor<AI_NetworkBehaviour_NPC, AI_Dialogue>> _dialogue =
				new System.Lazy<FieldAccessor<AI_NetworkBehaviour_NPC, AI_Dialogue>>(() => FieldAccessor<AI_NetworkBehaviour_NPC, AI_Dialogue>.Create("dialogue"));
		private static readonly System.Lazy<FieldAccessor<AI_NetworkBehaviour_NPC, AI_Statemachine_NPC>> _stateMachineNPC =
				new System.Lazy<FieldAccessor<AI_NetworkBehaviour_NPC, AI_Statemachine_NPC>>(() => FieldAccessor<AI_NetworkBehaviour_NPC, AI_Statemachine_NPC>.Create("stateMachineNPC"));

		public static AI_Dialogue GetDialogue(this AI_NetworkBehaviour_NPC __self) => _dialogue.Value.GetValue(__self);
		public static void SetDialogue(this AI_NetworkBehaviour_NPC __self, AI_Dialogue value) => _dialogue.Value.SetValue(__self, value);
		public static AI_Statemachine_NPC GetStateMachineNPC(this AI_NetworkBehaviour_NPC __self) => _stateMachineNPC.Value.GetValue(__self);
		public static void SetStateMachineNPC(this AI_NetworkBehaviour_NPC __self, AI_Statemachine_NPC value) => _stateMachineNPC.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_NetworkBehaviour_NPC>> _Awake757602046 =
				new System.Lazy<MethodAccessor<AI_NetworkBehaviour_NPC>>(() => MethodAccessor<AI_NetworkBehaviour_NPC>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<AI_NetworkBehaviour_NPC>> _OnValidate757602046 =
				new System.Lazy<MethodAccessor<AI_NetworkBehaviour_NPC>>(() => MethodAccessor<AI_NetworkBehaviour_NPC>.Create("OnValidate"));

		public static void Awake(this AI_NetworkBehaviour_NPC __self) => _Awake757602046.Value.Invoke(__self);
		public static void OnValidate(this AI_NetworkBehaviour_NPC __self) => _OnValidate757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Message_NPC_Update
	{

		private static readonly System.Lazy<FieldAccessor<Message_NPC_Update, bool>> _le =
				new System.Lazy<FieldAccessor<Message_NPC_Update, bool>>(() => FieldAccessor<Message_NPC_Update, bool>.Create("le"));
		private static readonly System.Lazy<FieldAccessor<Message_NPC_Update, bool>> _si =
				new System.Lazy<FieldAccessor<Message_NPC_Update, bool>>(() => FieldAccessor<Message_NPC_Update, bool>.Create("si"));
		private static readonly System.Lazy<FieldAccessor<Message_NPC_Update, bool>> _ta =
				new System.Lazy<FieldAccessor<Message_NPC_Update, bool>>(() => FieldAccessor<Message_NPC_Update, bool>.Create("ta"));
		private static readonly System.Lazy<FieldAccessor<Message_NPC_Update, bool>> _ea =
				new System.Lazy<FieldAccessor<Message_NPC_Update, bool>>(() => FieldAccessor<Message_NPC_Update, bool>.Create("ea"));

		public static bool GetLe(this Message_NPC_Update __self) => _le.Value.GetValue(__self);
		public static void SetLe(this Message_NPC_Update __self, bool value) => _le.Value.SetValue(__self, value);
		public static bool GetSi(this Message_NPC_Update __self) => _si.Value.GetValue(__self);
		public static void SetSi(this Message_NPC_Update __self, bool value) => _si.Value.SetValue(__self, value);
		public static bool GetTa(this Message_NPC_Update __self) => _ta.Value.GetValue(__self);
		public static void SetTa(this Message_NPC_Update __self, bool value) => _ta.Value.SetValue(__self, value);
		public static bool GetEa(this Message_NPC_Update __self) => _ea.Value.GetValue(__self);
		public static void SetEa(this Message_NPC_Update __self, bool value) => _ea.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_AI_NetworkBehaviour_Roach
	{

		private static readonly System.Lazy<MethodAccessor<AI_NetworkBehaviour_Roach>> _Awake757602046 =
				new System.Lazy<MethodAccessor<AI_NetworkBehaviour_Roach>>(() => MethodAccessor<AI_NetworkBehaviour_Roach>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<AI_NetworkBehaviour_Roach>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<AI_NetworkBehaviour_Roach>>(() => MethodAccessor<AI_NetworkBehaviour_Roach>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<AI_NetworkBehaviour_Roach>> _HandleProtection757602046 =
				new System.Lazy<MethodAccessor<AI_NetworkBehaviour_Roach>>(() => MethodAccessor<AI_NetworkBehaviour_Roach>.Create("HandleProtection"));
		private static readonly System.Lazy<MethodAccessor<AI_NetworkBehaviour_Roach>> _ChangeToProtectionState757602046 =
				new System.Lazy<MethodAccessor<AI_NetworkBehaviour_Roach>>(() => MethodAccessor<AI_NetworkBehaviour_Roach>.Create("ChangeToProtectionState"));

		public static void Awake(this AI_NetworkBehaviour_Roach __self) => _Awake757602046.Value.Invoke(__self);
		public static void OnDestroy(this AI_NetworkBehaviour_Roach __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void HandleProtection(this AI_NetworkBehaviour_Roach __self) => _HandleProtection757602046.Value.Invoke(__self);
		public static void ChangeToProtectionState(this AI_NetworkBehaviour_Roach __self) => _ChangeToProtectionState757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AI_NetworkBehaviour_Whale
	{

		private static readonly System.Lazy<FieldAccessor<AI_NetworkBehaviour_Whale, UnityEngine.ParticleSystem>> _waterParticle =
				new System.Lazy<FieldAccessor<AI_NetworkBehaviour_Whale, UnityEngine.ParticleSystem>>(() => FieldAccessor<AI_NetworkBehaviour_Whale, UnityEngine.ParticleSystem>.Create("waterParticle"));
		private static readonly System.Lazy<FieldAccessor<AI_NetworkBehaviour_Whale, AI_State>> _diveState =
				new System.Lazy<FieldAccessor<AI_NetworkBehaviour_Whale, AI_State>>(() => FieldAccessor<AI_NetworkBehaviour_Whale, AI_State>.Create("diveState"));
		private static readonly System.Lazy<FieldAccessor<AI_NetworkBehaviour_Whale, string>> _eventRef_shootWater =
				new System.Lazy<FieldAccessor<AI_NetworkBehaviour_Whale, string>>(() => FieldAccessor<AI_NetworkBehaviour_Whale, string>.Create("eventRef_shootWater"));
		private static readonly System.Lazy<FieldAccessor<AI_NetworkBehaviour_Whale, bool>> _hasPlayedWater =
				new System.Lazy<FieldAccessor<AI_NetworkBehaviour_Whale, bool>>(() => FieldAccessor<AI_NetworkBehaviour_Whale, bool>.Create("hasPlayedWater"));

		public static UnityEngine.ParticleSystem GetWaterParticle(this AI_NetworkBehaviour_Whale __self) => _waterParticle.Value.GetValue(__self);
		public static void SetWaterParticle(this AI_NetworkBehaviour_Whale __self, UnityEngine.ParticleSystem value) => _waterParticle.Value.SetValue(__self, value);
		public static AI_State GetDiveState(this AI_NetworkBehaviour_Whale __self) => _diveState.Value.GetValue(__self);
		public static void SetDiveState(this AI_NetworkBehaviour_Whale __self, AI_State value) => _diveState.Value.SetValue(__self, value);
		public static string GetEventRef_shootWater(this AI_NetworkBehaviour_Whale __self) => _eventRef_shootWater.Value.GetValue(__self);
		public static void SetEventRef_shootWater(this AI_NetworkBehaviour_Whale __self, string value) => _eventRef_shootWater.Value.SetValue(__self, value);
		public static bool GetHasPlayedWater(this AI_NetworkBehaviour_Whale __self) => _hasPlayedWater.Value.GetValue(__self);
		public static void SetHasPlayedWater(this AI_NetworkBehaviour_Whale __self, bool value) => _hasPlayedWater.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_NetworkBehaviour_Whale>> _UpdateHost757602046 =
				new System.Lazy<MethodAccessor<AI_NetworkBehaviour_Whale>>(() => MethodAccessor<AI_NetworkBehaviour_Whale>.Create("UpdateHost"));
		private static readonly System.Lazy<MethodAccessor<AI_NetworkBehaviour_Whale>> _ShootWater757602046 =
				new System.Lazy<MethodAccessor<AI_NetworkBehaviour_Whale>>(() => MethodAccessor<AI_NetworkBehaviour_Whale>.Create("ShootWater"));

		public static void UpdateHost(this AI_NetworkBehaviour_Whale __self) => _UpdateHost757602046.Value.Invoke(__self);
		public static void ShootWater(this AI_NetworkBehaviour_Whale __self) => _ShootWater757602046.Value.Invoke(__self);

	}

	public static class Private_AI_NetworkBehaviour_Whale
	{

		private static readonly System.Lazy<StaticFieldAccessor<UnityEngine.Transform>> _raft =
				new System.Lazy<StaticFieldAccessor<UnityEngine.Transform>>(() => StaticFieldAccessor<UnityEngine.Transform>.Create(typeof(AI_NetworkBehaviour_Whale), "raft"));

		public static UnityEngine.Transform GetRaft() => _raft.Value.GetValue();
		public static void SetRaft(UnityEngine.Transform value) => _raft.Value.SetValue(value);

	}

	public static class Private_BoidHelper
	{

		private static readonly System.Lazy<StaticFieldAccessor<int>> _numViewDirections =
				new System.Lazy<StaticFieldAccessor<int>>(() => StaticFieldAccessor<int>.Create(typeof(BoidHelper), "numViewDirections"));

		public static int GetNumViewDirections() => _numViewDirections.Value.GetValue();
		public static void SetNumViewDirections(int value) => _numViewDirections.Value.SetValue(value);

	}

	public static class PrivateAccessor_AI_ChargeTowards
	{

		private static readonly System.Lazy<FieldAccessor<AI_ChargeTowards, float>> _minChargeDistance =
				new System.Lazy<FieldAccessor<AI_ChargeTowards, float>>(() => FieldAccessor<AI_ChargeTowards, float>.Create("minChargeDistance"));
		private static readonly System.Lazy<FieldAccessor<AI_ChargeTowards, float>> _maxChargeDistance =
				new System.Lazy<FieldAccessor<AI_ChargeTowards, float>>(() => FieldAccessor<AI_ChargeTowards, float>.Create("maxChargeDistance"));
		private static readonly System.Lazy<FieldAccessor<AI_ChargeTowards, float>> _maxChargeDuration =
				new System.Lazy<FieldAccessor<AI_ChargeTowards, float>>(() => FieldAccessor<AI_ChargeTowards, float>.Create("maxChargeDuration"));
		private static readonly System.Lazy<FieldAccessor<AI_ChargeTowards, AI_State>> _chargeInterruptedState =
				new System.Lazy<FieldAccessor<AI_ChargeTowards, AI_State>>(() => FieldAccessor<AI_ChargeTowards, AI_State>.Create("chargeInterruptedState"));
		private static readonly System.Lazy<FieldAccessor<AI_ChargeTowards, AI_State>> _chargeDoneState =
				new System.Lazy<FieldAccessor<AI_ChargeTowards, AI_State>>(() => FieldAccessor<AI_ChargeTowards, AI_State>.Create("chargeDoneState"));
		private static readonly System.Lazy<FieldAccessor<AI_ChargeTowards, AI_State_Boar_Slide>> _boarSlideState =
				new System.Lazy<FieldAccessor<AI_ChargeTowards, AI_State_Boar_Slide>>(() => FieldAccessor<AI_ChargeTowards, AI_State_Boar_Slide>.Create("boarSlideState"));
		private static readonly System.Lazy<FieldAccessor<AI_ChargeTowards, bool>> _isAutoUpdatingChargeTargetting =
				new System.Lazy<FieldAccessor<AI_ChargeTowards, bool>>(() => FieldAccessor<AI_ChargeTowards, bool>.Create("isAutoUpdatingChargeTargetting"));
		private static readonly System.Lazy<FieldAccessor<AI_ChargeTowards, float>> _autoUpdateChargeTargettingDistance =
				new System.Lazy<FieldAccessor<AI_ChargeTowards, float>>(() => FieldAccessor<AI_ChargeTowards, float>.Create("autoUpdateChargeTargettingDistance"));
		private static readonly System.Lazy<FieldAccessor<AI_ChargeTowards, bool>> _keepChargingWhileCloseToTarget =
				new System.Lazy<FieldAccessor<AI_ChargeTowards, bool>>(() => FieldAccessor<AI_ChargeTowards, bool>.Create("keepChargingWhileCloseToTarget"));
		private static readonly System.Lazy<FieldAccessor<AI_ChargeTowards, float>> _distanceToKeepCharging =
				new System.Lazy<FieldAccessor<AI_ChargeTowards, float>>(() => FieldAccessor<AI_ChargeTowards, float>.Create("distanceToKeepCharging"));
		private static readonly System.Lazy<FieldAccessor<AI_ChargeTowards, bool>> _isFearlessInState =
				new System.Lazy<FieldAccessor<AI_ChargeTowards, bool>>(() => FieldAccessor<AI_ChargeTowards, bool>.Create("isFearlessInState"));
		private static readonly System.Lazy<FieldAccessor<AI_ChargeTowards, float>> _stateChargeSpeed =
				new System.Lazy<FieldAccessor<AI_ChargeTowards, float>>(() => FieldAccessor<AI_ChargeTowards, float>.Create("stateChargeSpeed"));
		private static readonly System.Lazy<FieldAccessor<AI_ChargeTowards, float>> _stateChargeModelTurnRate =
				new System.Lazy<FieldAccessor<AI_ChargeTowards, float>>(() => FieldAccessor<AI_ChargeTowards, float>.Create("stateChargeModelTurnRate"));
		private static readonly System.Lazy<FieldAccessor<AI_ChargeTowards, float>> _stateNavAgentAngularSpeed =
				new System.Lazy<FieldAccessor<AI_ChargeTowards, float>>(() => FieldAccessor<AI_ChargeTowards, float>.Create("stateNavAgentAngularSpeed"));
		private static readonly System.Lazy<FieldAccessor<AI_ChargeTowards, float>> _stateNavAgentAcceleration =
				new System.Lazy<FieldAccessor<AI_ChargeTowards, float>>(() => FieldAccessor<AI_ChargeTowards, float>.Create("stateNavAgentAcceleration"));
		private static readonly System.Lazy<FieldAccessor<AI_ChargeTowards, float>> _distanceToPointStartSliding =
				new System.Lazy<FieldAccessor<AI_ChargeTowards, float>>(() => FieldAccessor<AI_ChargeTowards, float>.Create("distanceToPointStartSliding"));
		private static readonly System.Lazy<FieldAccessor<AI_ChargeTowards, float>> _distanceToChargePointMinimum =
				new System.Lazy<FieldAccessor<AI_ChargeTowards, float>>(() => FieldAccessor<AI_ChargeTowards, float>.Create("distanceToChargePointMinimum"));
		private static readonly System.Lazy<FieldAccessor<AI_ChargeTowards, MovementType>> _chargeMovementType =
				new System.Lazy<FieldAccessor<AI_ChargeTowards, MovementType>>(() => FieldAccessor<AI_ChargeTowards, MovementType>.Create("chargeMovementType"));
		private static readonly System.Lazy<FieldAccessor<AI_ChargeTowards, DamageBox>> _hornDamageBox =
				new System.Lazy<FieldAccessor<AI_ChargeTowards, DamageBox>>(() => FieldAccessor<AI_ChargeTowards, DamageBox>.Create("hornDamageBox"));
		private static readonly System.Lazy<FieldAccessor<AI_ChargeTowards, AttachPlayer>> _attachPlayer =
				new System.Lazy<FieldAccessor<AI_ChargeTowards, AttachPlayer>>(() => FieldAccessor<AI_ChargeTowards, AttachPlayer>.Create("attachPlayer"));
		private static readonly System.Lazy<FieldAccessor<AI_ChargeTowards, bool>> _exitStateOnDamageBoxHit =
				new System.Lazy<FieldAccessor<AI_ChargeTowards, bool>>(() => FieldAccessor<AI_ChargeTowards, bool>.Create("exitStateOnDamageBoxHit"));
		private static readonly System.Lazy<FieldAccessor<AI_ChargeTowards, float>> _navMeshCheckDistance =
				new System.Lazy<FieldAccessor<AI_ChargeTowards, float>>(() => FieldAccessor<AI_ChargeTowards, float>.Create("navMeshCheckDistance"));
		private static readonly System.Lazy<FieldAccessor<AI_ChargeTowards, float>> _minimumInterupptChargePlayerToTargetDistance =
				new System.Lazy<FieldAccessor<AI_ChargeTowards, float>>(() => FieldAccessor<AI_ChargeTowards, float>.Create("minimumInterupptChargePlayerToTargetDistance"));
		private static readonly System.Lazy<FieldAccessor<AI_ChargeTowards, UnityEngine.Vector3>> _chargeTargetPoint =
				new System.Lazy<FieldAccessor<AI_ChargeTowards, UnityEngine.Vector3>>(() => FieldAccessor<AI_ChargeTowards, UnityEngine.Vector3>.Create("chargeTargetPoint"));
		private static readonly System.Lazy<FieldAccessor<AI_ChargeTowards, UnityEngine.AI.NavMeshAgent>> _agent =
				new System.Lazy<FieldAccessor<AI_ChargeTowards, UnityEngine.AI.NavMeshAgent>>(() => FieldAccessor<AI_ChargeTowards, UnityEngine.AI.NavMeshAgent>.Create("agent"));
		private static readonly System.Lazy<FieldAccessor<AI_ChargeTowards, AI_Movement>> _movement =
				new System.Lazy<FieldAccessor<AI_ChargeTowards, AI_Movement>>(() => FieldAccessor<AI_ChargeTowards, AI_Movement>.Create("movement"));
		private static readonly System.Lazy<FieldAccessor<AI_ChargeTowards, float>> _chargeChannel =
				new System.Lazy<FieldAccessor<AI_ChargeTowards, float>>(() => FieldAccessor<AI_ChargeTowards, float>.Create("chargeChannel"));
		private static readonly System.Lazy<FieldAccessor<AI_ChargeTowards, Raft_Network>> _network =
				new System.Lazy<FieldAccessor<AI_ChargeTowards, Raft_Network>>(() => FieldAccessor<AI_ChargeTowards, Raft_Network>.Create("network"));
		private static readonly System.Lazy<FieldAccessor<AI_ChargeTowards, Network_Player>> _enemyTarget =
				new System.Lazy<FieldAccessor<AI_ChargeTowards, Network_Player>>(() => FieldAccessor<AI_ChargeTowards, Network_Player>.Create("enemyTarget"));
		private static readonly System.Lazy<FieldAccessor<AI_ChargeTowards, AI_StateMachine_Animal>> _stateMachine_Animal =
				new System.Lazy<FieldAccessor<AI_ChargeTowards, AI_StateMachine_Animal>>(() => FieldAccessor<AI_ChargeTowards, AI_StateMachine_Animal>.Create("stateMachine_Animal"));

		public static float GetMinChargeDistance(this AI_ChargeTowards __self) => _minChargeDistance.Value.GetValue(__self);
		public static void SetMinChargeDistance(this AI_ChargeTowards __self, float value) => _minChargeDistance.Value.SetValue(__self, value);
		public static float GetMaxChargeDistance(this AI_ChargeTowards __self) => _maxChargeDistance.Value.GetValue(__self);
		public static void SetMaxChargeDistance(this AI_ChargeTowards __self, float value) => _maxChargeDistance.Value.SetValue(__self, value);
		public static float GetMaxChargeDuration(this AI_ChargeTowards __self) => _maxChargeDuration.Value.GetValue(__self);
		public static void SetMaxChargeDuration(this AI_ChargeTowards __self, float value) => _maxChargeDuration.Value.SetValue(__self, value);
		public static AI_State GetChargeInterruptedState(this AI_ChargeTowards __self) => _chargeInterruptedState.Value.GetValue(__self);
		public static void SetChargeInterruptedState(this AI_ChargeTowards __self, AI_State value) => _chargeInterruptedState.Value.SetValue(__self, value);
		public static AI_State GetChargeDoneState(this AI_ChargeTowards __self) => _chargeDoneState.Value.GetValue(__self);
		public static void SetChargeDoneState(this AI_ChargeTowards __self, AI_State value) => _chargeDoneState.Value.SetValue(__self, value);
		public static AI_State_Boar_Slide GetBoarSlideState(this AI_ChargeTowards __self) => _boarSlideState.Value.GetValue(__self);
		public static void SetBoarSlideState(this AI_ChargeTowards __self, AI_State_Boar_Slide value) => _boarSlideState.Value.SetValue(__self, value);
		public static bool GetIsAutoUpdatingChargeTargetting(this AI_ChargeTowards __self) => _isAutoUpdatingChargeTargetting.Value.GetValue(__self);
		public static void SetIsAutoUpdatingChargeTargetting(this AI_ChargeTowards __self, bool value) => _isAutoUpdatingChargeTargetting.Value.SetValue(__self, value);
		public static float GetAutoUpdateChargeTargettingDistance(this AI_ChargeTowards __self) => _autoUpdateChargeTargettingDistance.Value.GetValue(__self);
		public static void SetAutoUpdateChargeTargettingDistance(this AI_ChargeTowards __self, float value) => _autoUpdateChargeTargettingDistance.Value.SetValue(__self, value);
		public static bool GetKeepChargingWhileCloseToTarget(this AI_ChargeTowards __self) => _keepChargingWhileCloseToTarget.Value.GetValue(__self);
		public static void SetKeepChargingWhileCloseToTarget(this AI_ChargeTowards __self, bool value) => _keepChargingWhileCloseToTarget.Value.SetValue(__self, value);
		public static float GetDistanceToKeepCharging(this AI_ChargeTowards __self) => _distanceToKeepCharging.Value.GetValue(__self);
		public static void SetDistanceToKeepCharging(this AI_ChargeTowards __self, float value) => _distanceToKeepCharging.Value.SetValue(__self, value);
		public static bool GetIsFearlessInState(this AI_ChargeTowards __self) => _isFearlessInState.Value.GetValue(__self);
		public static void SetIsFearlessInState(this AI_ChargeTowards __self, bool value) => _isFearlessInState.Value.SetValue(__self, value);
		public static float GetStateChargeSpeed(this AI_ChargeTowards __self) => _stateChargeSpeed.Value.GetValue(__self);
		public static void SetStateChargeSpeed(this AI_ChargeTowards __self, float value) => _stateChargeSpeed.Value.SetValue(__self, value);
		public static float GetStateChargeModelTurnRate(this AI_ChargeTowards __self) => _stateChargeModelTurnRate.Value.GetValue(__self);
		public static void SetStateChargeModelTurnRate(this AI_ChargeTowards __self, float value) => _stateChargeModelTurnRate.Value.SetValue(__self, value);
		public static float GetStateNavAgentAngularSpeed(this AI_ChargeTowards __self) => _stateNavAgentAngularSpeed.Value.GetValue(__self);
		public static void SetStateNavAgentAngularSpeed(this AI_ChargeTowards __self, float value) => _stateNavAgentAngularSpeed.Value.SetValue(__self, value);
		public static float GetStateNavAgentAcceleration(this AI_ChargeTowards __self) => _stateNavAgentAcceleration.Value.GetValue(__self);
		public static void SetStateNavAgentAcceleration(this AI_ChargeTowards __self, float value) => _stateNavAgentAcceleration.Value.SetValue(__self, value);
		public static float GetDistanceToPointStartSliding(this AI_ChargeTowards __self) => _distanceToPointStartSliding.Value.GetValue(__self);
		public static void SetDistanceToPointStartSliding(this AI_ChargeTowards __self, float value) => _distanceToPointStartSliding.Value.SetValue(__self, value);
		public static float GetDistanceToChargePointMinimum(this AI_ChargeTowards __self) => _distanceToChargePointMinimum.Value.GetValue(__self);
		public static void SetDistanceToChargePointMinimum(this AI_ChargeTowards __self, float value) => _distanceToChargePointMinimum.Value.SetValue(__self, value);
		public static MovementType GetChargeMovementType(this AI_ChargeTowards __self) => _chargeMovementType.Value.GetValue(__self);
		public static void SetChargeMovementType(this AI_ChargeTowards __self, MovementType value) => _chargeMovementType.Value.SetValue(__self, value);
		public static DamageBox GetHornDamageBox(this AI_ChargeTowards __self) => _hornDamageBox.Value.GetValue(__self);
		public static void SetHornDamageBox(this AI_ChargeTowards __self, DamageBox value) => _hornDamageBox.Value.SetValue(__self, value);
		public static AttachPlayer GetAttachPlayer(this AI_ChargeTowards __self) => _attachPlayer.Value.GetValue(__self);
		public static void SetAttachPlayer(this AI_ChargeTowards __self, AttachPlayer value) => _attachPlayer.Value.SetValue(__self, value);
		public static bool GetExitStateOnDamageBoxHit(this AI_ChargeTowards __self) => _exitStateOnDamageBoxHit.Value.GetValue(__self);
		public static void SetExitStateOnDamageBoxHit(this AI_ChargeTowards __self, bool value) => _exitStateOnDamageBoxHit.Value.SetValue(__self, value);
		public static float GetNavMeshCheckDistance(this AI_ChargeTowards __self) => _navMeshCheckDistance.Value.GetValue(__self);
		public static void SetNavMeshCheckDistance(this AI_ChargeTowards __self, float value) => _navMeshCheckDistance.Value.SetValue(__self, value);
		public static float GetMinimumInterupptChargePlayerToTargetDistance(this AI_ChargeTowards __self) => _minimumInterupptChargePlayerToTargetDistance.Value.GetValue(__self);
		public static void SetMinimumInterupptChargePlayerToTargetDistance(this AI_ChargeTowards __self, float value) => _minimumInterupptChargePlayerToTargetDistance.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetChargeTargetPoint(this AI_ChargeTowards __self) => _chargeTargetPoint.Value.GetValue(__self);
		public static void SetChargeTargetPoint(this AI_ChargeTowards __self, UnityEngine.Vector3 value) => _chargeTargetPoint.Value.SetValue(__self, value);
		public static UnityEngine.AI.NavMeshAgent GetAgent(this AI_ChargeTowards __self) => _agent.Value.GetValue(__self);
		public static void SetAgent(this AI_ChargeTowards __self, UnityEngine.AI.NavMeshAgent value) => _agent.Value.SetValue(__self, value);
		public static AI_Movement GetMovement(this AI_ChargeTowards __self) => _movement.Value.GetValue(__self);
		public static void SetMovement(this AI_ChargeTowards __self, AI_Movement value) => _movement.Value.SetValue(__self, value);
		public static float GetChargeChannel(this AI_ChargeTowards __self) => _chargeChannel.Value.GetValue(__self);
		public static void SetChargeChannel(this AI_ChargeTowards __self, float value) => _chargeChannel.Value.SetValue(__self, value);
		public static Raft_Network GetNetwork(this AI_ChargeTowards __self) => _network.Value.GetValue(__self);
		public static void SetNetwork(this AI_ChargeTowards __self, Raft_Network value) => _network.Value.SetValue(__self, value);
		public static Network_Player GetEnemyTarget(this AI_ChargeTowards __self) => _enemyTarget.Value.GetValue(__self);
		public static void SetEnemyTarget(this AI_ChargeTowards __self, Network_Player value) => _enemyTarget.Value.SetValue(__self, value);
		public static AI_StateMachine_Animal GetStateMachine_Animal(this AI_ChargeTowards __self) => _stateMachine_Animal.Value.GetValue(__self);
		public static void SetStateMachine_Animal(this AI_ChargeTowards __self, AI_StateMachine_Animal value) => _stateMachine_Animal.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_ChargeTowards>> _Awake757602046 =
				new System.Lazy<MethodAccessor<AI_ChargeTowards>>(() => MethodAccessor<AI_ChargeTowards>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<AI_ChargeTowards>> _Start757602046 =
				new System.Lazy<MethodAccessor<AI_ChargeTowards>>(() => MethodAccessor<AI_ChargeTowards>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<AI_ChargeTowards>> _OnDrawGizmos757602046 =
				new System.Lazy<MethodAccessor<AI_ChargeTowards>>(() => MethodAccessor<AI_ChargeTowards>.Create("OnDrawGizmos"));
		private static readonly System.Lazy<MethodAccessor<AI_ChargeTowards>> _IsTooCloseToChargePoint757602046 =
				new System.Lazy<MethodAccessor<AI_ChargeTowards>>(() => MethodAccessor<AI_ChargeTowards>.Create("IsTooCloseToChargePoint"));
		private static readonly System.Lazy<MethodAccessor<AI_ChargeTowards>> _IsChargeTimeLimitPassed757602046 =
				new System.Lazy<MethodAccessor<AI_ChargeTowards>>(() => MethodAccessor<AI_ChargeTowards>.Create("IsChargeTimeLimitPassed"));
		private static readonly System.Lazy<MethodAccessor<AI_ChargeTowards>> _KeepCharging757602046 =
				new System.Lazy<MethodAccessor<AI_ChargeTowards>>(() => MethodAccessor<AI_ChargeTowards>.Create("KeepCharging"));
		private static readonly System.Lazy<MethodAccessor<AI_ChargeTowards>> _IsEnemyTargetCloseToChargePoint757602046 =
				new System.Lazy<MethodAccessor<AI_ChargeTowards>>(() => MethodAccessor<AI_ChargeTowards>.Create("IsEnemyTargetCloseToChargePoint"));
		private static readonly System.Lazy<MethodAccessor<AI_ChargeTowards>> _IsBoarWithinSlideRange757602046 =
				new System.Lazy<MethodAccessor<AI_ChargeTowards>>(() => MethodAccessor<AI_ChargeTowards>.Create("IsBoarWithinSlideRange"));
		private static readonly System.Lazy<MethodAccessor<AI_ChargeTowards>> _HitPlayerLocally3461878659 =
				new System.Lazy<MethodAccessor<AI_ChargeTowards>>(() => MethodAccessor<AI_ChargeTowards>.Create("HitPlayerLocally", typeof(Network_Player)));
		private static readonly System.Lazy<MethodAccessor<AI_ChargeTowards>> _UnHookPlayer757602046 =
				new System.Lazy<MethodAccessor<AI_ChargeTowards>>(() => MethodAccessor<AI_ChargeTowards>.Create("UnHookPlayer"));

		public static void Awake(this AI_ChargeTowards __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this AI_ChargeTowards __self) => _Start757602046.Value.Invoke(__self);
		public static void OnDrawGizmos(this AI_ChargeTowards __self) => _OnDrawGizmos757602046.Value.Invoke(__self);
		public static bool IsTooCloseToChargePoint(this AI_ChargeTowards __self) => (bool)_IsTooCloseToChargePoint757602046.Value.Invoke(__self);
		public static bool IsChargeTimeLimitPassed(this AI_ChargeTowards __self) => (bool)_IsChargeTimeLimitPassed757602046.Value.Invoke(__self);
		public static bool KeepCharging(this AI_ChargeTowards __self) => (bool)_KeepCharging757602046.Value.Invoke(__self);
		public static bool IsEnemyTargetCloseToChargePoint(this AI_ChargeTowards __self) => (bool)_IsEnemyTargetCloseToChargePoint757602046.Value.Invoke(__self);
		public static bool IsBoarWithinSlideRange(this AI_ChargeTowards __self) => (bool)_IsBoarWithinSlideRange757602046.Value.Invoke(__self);
		public static void HitPlayerLocally(this AI_ChargeTowards __self, Network_Player player) => _HitPlayerLocally3461878659.Value.Invoke(__self, player);
		public static void UnHookPlayer(this AI_ChargeTowards __self) => _UnHookPlayer757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AI_State
	{

		private static readonly System.Lazy<FieldAccessor<AI_State, bool>> _active =
				new System.Lazy<FieldAccessor<AI_State, bool>>(() => FieldAccessor<AI_State, bool>.Create("active"));

		public static bool GetActive(this AI_State __self) => _active.Value.GetValue(__self);
		public static void SetActive(this AI_State __self, bool value) => _active.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_State>> _Awake757602046 =
				new System.Lazy<MethodAccessor<AI_State>>(() => MethodAccessor<AI_State>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<AI_State>> _Start757602046 =
				new System.Lazy<MethodAccessor<AI_State>>(() => MethodAccessor<AI_State>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<AI_State>> _Destroy757602046 =
				new System.Lazy<MethodAccessor<AI_State>>(() => MethodAccessor<AI_State>.Create("Destroy"));

		public static void Awake(this AI_State __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this AI_State __self) => _Start757602046.Value.Invoke(__self);
		public static void Destroy(this AI_State __self) => _Destroy757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AI_StateAnimator
	{

		private static readonly System.Lazy<FieldAccessor<AI_StateAnimator, AnimatorPropertySetting[]>> _animatorPropertySettings =
				new System.Lazy<FieldAccessor<AI_StateAnimator, AnimatorPropertySetting[]>>(() => FieldAccessor<AI_StateAnimator, AnimatorPropertySetting[]>.Create("animatorPropertySettings"));
		private static readonly System.Lazy<FieldAccessor<AI_StateAnimator, AI_StateMachine>> _stateMachine =
				new System.Lazy<FieldAccessor<AI_StateAnimator, AI_StateMachine>>(() => FieldAccessor<AI_StateAnimator, AI_StateMachine>.Create("stateMachine"));
		private static readonly System.Lazy<FieldAccessor<AI_StateAnimator, AI_State>> _state =
				new System.Lazy<FieldAccessor<AI_StateAnimator, AI_State>>(() => FieldAccessor<AI_StateAnimator, AI_State>.Create("state"));
		private static readonly System.Lazy<FieldAccessor<AI_StateAnimator, AnimatorController>> _animatorController =
				new System.Lazy<FieldAccessor<AI_StateAnimator, AnimatorController>>(() => FieldAccessor<AI_StateAnimator, AnimatorController>.Create("animatorController"));
		private static readonly System.Lazy<FieldAccessor<AI_StateAnimator, bool>> _initialized =
				new System.Lazy<FieldAccessor<AI_StateAnimator, bool>>(() => FieldAccessor<AI_StateAnimator, bool>.Create("initialized"));

		public static AnimatorPropertySetting[] GetAnimatorPropertySettings(this AI_StateAnimator __self) => _animatorPropertySettings.Value.GetValue(__self);
		public static void SetAnimatorPropertySettings(this AI_StateAnimator __self, AnimatorPropertySetting[] value) => _animatorPropertySettings.Value.SetValue(__self, value);
		public static AI_StateMachine GetStateMachine(this AI_StateAnimator __self) => _stateMachine.Value.GetValue(__self);
		public static void SetStateMachine(this AI_StateAnimator __self, AI_StateMachine value) => _stateMachine.Value.SetValue(__self, value);
		public static AI_State GetState(this AI_StateAnimator __self) => _state.Value.GetValue(__self);
		public static void SetState(this AI_StateAnimator __self, AI_State value) => _state.Value.SetValue(__self, value);
		public static AnimatorController GetAnimatorController(this AI_StateAnimator __self) => _animatorController.Value.GetValue(__self);
		public static void SetAnimatorController(this AI_StateAnimator __self, AnimatorController value) => _animatorController.Value.SetValue(__self, value);
		public static bool GetInitialized(this AI_StateAnimator __self) => _initialized.Value.GetValue(__self);
		public static void SetInitialized(this AI_StateAnimator __self, bool value) => _initialized.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_StateAnimator>> _Awake757602046 =
				new System.Lazy<MethodAccessor<AI_StateAnimator>>(() => MethodAccessor<AI_StateAnimator>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<AI_StateAnimator>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<AI_StateAnimator>>(() => MethodAccessor<AI_StateAnimator>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<AI_StateAnimator>> _OnEnterState3428541017 =
				new System.Lazy<MethodAccessor<AI_StateAnimator>>(() => MethodAccessor<AI_StateAnimator>.Create("OnEnterState", typeof(AI_State)));
		private static readonly System.Lazy<MethodAccessor<AI_StateAnimator>> _OnExitState3428541017 =
				new System.Lazy<MethodAccessor<AI_StateAnimator>>(() => MethodAccessor<AI_StateAnimator>.Create("OnExitState", typeof(AI_State)));
		private static readonly System.Lazy<MethodAccessor<AI_StateAnimator>> _ApplyAnimationSettings3444912741 =
				new System.Lazy<MethodAccessor<AI_StateAnimator>>(() => MethodAccessor<AI_StateAnimator>.Create("ApplyAnimationSettings", typeof(AIStateEvent)));
		private static readonly System.Lazy<MethodAccessor<AI_StateAnimator>> _LerpFloat2484800358 =
				new System.Lazy<MethodAccessor<AI_StateAnimator>>(() => MethodAccessor<AI_StateAnimator>.Create("LerpFloat", typeof(string), typeof(float), typeof(float)));

		public static void Awake(this AI_StateAnimator __self) => _Awake757602046.Value.Invoke(__self);
		public static void OnDestroy(this AI_StateAnimator __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void OnEnterState(this AI_StateAnimator __self, AI_State newState) => _OnEnterState3428541017.Value.Invoke(__self, newState);
		public static void OnExitState(this AI_StateAnimator __self, AI_State newState) => _OnExitState3428541017.Value.Invoke(__self, newState);
		public static void ApplyAnimationSettings(this AI_StateAnimator __self, AIStateEvent eventType) => _ApplyAnimationSettings3444912741.Value.Invoke(__self, eventType);
		public static System.Collections.IEnumerator LerpFloat(this AI_StateAnimator __self, string parameterName, float newValue, float lerpSpeed) => (System.Collections.IEnumerator)_LerpFloat2484800358.Value.Invoke(__self, parameterName, newValue, lerpSpeed);

	}

	public static class PrivateAccessor_AI_StateMachineMessage
	{

		private static readonly System.Lazy<FieldAccessor<AI_StateMachineMessage, AI_StateMachineMessage.StateMachineMessage[]>> _messages =
				new System.Lazy<FieldAccessor<AI_StateMachineMessage, AI_StateMachineMessage.StateMachineMessage[]>>(() => FieldAccessor<AI_StateMachineMessage, AI_StateMachineMessage.StateMachineMessage[]>.Create("messages"));
		private static readonly System.Lazy<FieldAccessor<AI_StateMachineMessage, AI_StateMachine>> _stateMachine =
				new System.Lazy<FieldAccessor<AI_StateMachineMessage, AI_StateMachine>>(() => FieldAccessor<AI_StateMachineMessage, AI_StateMachine>.Create("stateMachine"));
		private static readonly System.Lazy<FieldAccessor<AI_StateMachineMessage, AI_State>> _state =
				new System.Lazy<FieldAccessor<AI_StateMachineMessage, AI_State>>(() => FieldAccessor<AI_StateMachineMessage, AI_State>.Create("state"));
		private static readonly System.Lazy<FieldAccessor<AI_StateMachineMessage, bool>> _initialized =
				new System.Lazy<FieldAccessor<AI_StateMachineMessage, bool>>(() => FieldAccessor<AI_StateMachineMessage, bool>.Create("initialized"));

		public static AI_StateMachineMessage.StateMachineMessage[] GetMessages(this AI_StateMachineMessage __self) => _messages.Value.GetValue(__self);
		public static void SetMessages(this AI_StateMachineMessage __self, AI_StateMachineMessage.StateMachineMessage[] value) => _messages.Value.SetValue(__self, value);
		public static AI_StateMachine GetStateMachine(this AI_StateMachineMessage __self) => _stateMachine.Value.GetValue(__self);
		public static void SetStateMachine(this AI_StateMachineMessage __self, AI_StateMachine value) => _stateMachine.Value.SetValue(__self, value);
		public static AI_State GetState(this AI_StateMachineMessage __self) => _state.Value.GetValue(__self);
		public static void SetState(this AI_StateMachineMessage __self, AI_State value) => _state.Value.SetValue(__self, value);
		public static bool GetInitialized(this AI_StateMachineMessage __self) => _initialized.Value.GetValue(__self);
		public static void SetInitialized(this AI_StateMachineMessage __self, bool value) => _initialized.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_StateMachineMessage>> _Awake757602046 =
				new System.Lazy<MethodAccessor<AI_StateMachineMessage>>(() => MethodAccessor<AI_StateMachineMessage>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<AI_StateMachineMessage>> _OnEnterState3428541017 =
				new System.Lazy<MethodAccessor<AI_StateMachineMessage>>(() => MethodAccessor<AI_StateMachineMessage>.Create("OnEnterState", typeof(AI_State)));
		private static readonly System.Lazy<MethodAccessor<AI_StateMachineMessage>> _OnExitState3428541017 =
				new System.Lazy<MethodAccessor<AI_StateMachineMessage>>(() => MethodAccessor<AI_StateMachineMessage>.Create("OnExitState", typeof(AI_State)));
		private static readonly System.Lazy<MethodAccessor<AI_StateMachineMessage>> _SendMessages3444912741 =
				new System.Lazy<MethodAccessor<AI_StateMachineMessage>>(() => MethodAccessor<AI_StateMachineMessage>.Create("SendMessages", typeof(AIStateEvent)));

		public static void Awake(this AI_StateMachineMessage __self) => _Awake757602046.Value.Invoke(__self);
		public static void OnEnterState(this AI_StateMachineMessage __self, AI_State newState) => _OnEnterState3428541017.Value.Invoke(__self, newState);
		public static void OnExitState(this AI_StateMachineMessage __self, AI_State newState) => _OnExitState3428541017.Value.Invoke(__self, newState);
		public static void SendMessages(this AI_StateMachineMessage __self, AIStateEvent eventType) => _SendMessages3444912741.Value.Invoke(__self, eventType);

	}

	public static class PrivateAccessor_AI_State_AirLand
	{

		private static readonly System.Lazy<FieldAccessor<AI_State_AirLand, AI_State>> _nextState =
				new System.Lazy<FieldAccessor<AI_State_AirLand, AI_State>>(() => FieldAccessor<AI_State_AirLand, AI_State>.Create("nextState"));
		private static readonly System.Lazy<FieldAccessor<AI_State_AirLand, AI_Movement>> _movement =
				new System.Lazy<FieldAccessor<AI_State_AirLand, AI_Movement>>(() => FieldAccessor<AI_State_AirLand, AI_Movement>.Create("movement"));
		private static readonly System.Lazy<FieldAccessor<AI_State_AirLand, float>> _startLandDistance =
				new System.Lazy<FieldAccessor<AI_State_AirLand, float>>(() => FieldAccessor<AI_State_AirLand, float>.Create("startLandDistance"));
		private static readonly System.Lazy<FieldAccessor<AI_State_AirLand, bool>> _breakWhenLanding =
				new System.Lazy<FieldAccessor<AI_State_AirLand, bool>>(() => FieldAccessor<AI_State_AirLand, bool>.Create("breakWhenLanding"));
		private static readonly System.Lazy<FieldAccessor<AI_State_AirLand, float>> _breakSpeed =
				new System.Lazy<FieldAccessor<AI_State_AirLand, float>>(() => FieldAccessor<AI_State_AirLand, float>.Create("breakSpeed"));
		private static readonly System.Lazy<FieldAccessor<AI_State_AirLand, Interval_Float>> _landPosDistance =
				new System.Lazy<FieldAccessor<AI_State_AirLand, Interval_Float>>(() => FieldAccessor<AI_State_AirLand, Interval_Float>.Create("landPosDistance"));
		private static readonly System.Lazy<FieldAccessor<AI_State_AirLand, float>> _minValidAngle =
				new System.Lazy<FieldAccessor<AI_State_AirLand, float>>(() => FieldAccessor<AI_State_AirLand, float>.Create("minValidAngle"));
		private static readonly System.Lazy<FieldAccessor<AI_State_AirLand, float>> _landRotationSpeed =
				new System.Lazy<FieldAccessor<AI_State_AirLand, float>>(() => FieldAccessor<AI_State_AirLand, float>.Create("landRotationSpeed"));
		private static readonly System.Lazy<FieldAccessor<AI_State_AirLand, float>> _landMovementSpeed =
				new System.Lazy<FieldAccessor<AI_State_AirLand, float>>(() => FieldAccessor<AI_State_AirLand, float>.Create("landMovementSpeed"));

		public static AI_State GetNextState(this AI_State_AirLand __self) => _nextState.Value.GetValue(__self);
		public static void SetNextState(this AI_State_AirLand __self, AI_State value) => _nextState.Value.SetValue(__self, value);
		public static AI_Movement GetMovement(this AI_State_AirLand __self) => _movement.Value.GetValue(__self);
		public static void SetMovement(this AI_State_AirLand __self, AI_Movement value) => _movement.Value.SetValue(__self, value);
		public static float GetStartLandDistance(this AI_State_AirLand __self) => _startLandDistance.Value.GetValue(__self);
		public static void SetStartLandDistance(this AI_State_AirLand __self, float value) => _startLandDistance.Value.SetValue(__self, value);
		public static bool GetBreakWhenLanding(this AI_State_AirLand __self) => _breakWhenLanding.Value.GetValue(__self);
		public static void SetBreakWhenLanding(this AI_State_AirLand __self, bool value) => _breakWhenLanding.Value.SetValue(__self, value);
		public static float GetBreakSpeed(this AI_State_AirLand __self) => _breakSpeed.Value.GetValue(__self);
		public static void SetBreakSpeed(this AI_State_AirLand __self, float value) => _breakSpeed.Value.SetValue(__self, value);
		public static Interval_Float GetLandPosDistance(this AI_State_AirLand __self) => _landPosDistance.Value.GetValue(__self);
		public static void SetLandPosDistance(this AI_State_AirLand __self, Interval_Float value) => _landPosDistance.Value.SetValue(__self, value);
		public static float GetMinValidAngle(this AI_State_AirLand __self) => _minValidAngle.Value.GetValue(__self);
		public static void SetMinValidAngle(this AI_State_AirLand __self, float value) => _minValidAngle.Value.SetValue(__self, value);
		public static float GetLandRotationSpeed(this AI_State_AirLand __self) => _landRotationSpeed.Value.GetValue(__self);
		public static void SetLandRotationSpeed(this AI_State_AirLand __self, float value) => _landRotationSpeed.Value.SetValue(__self, value);
		public static float GetLandMovementSpeed(this AI_State_AirLand __self) => _landMovementSpeed.Value.GetValue(__self);
		public static void SetLandMovementSpeed(this AI_State_AirLand __self, float value) => _landMovementSpeed.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_State_AirLand>> _OnDrawGizmos757602046 =
				new System.Lazy<MethodAccessor<AI_State_AirLand>>(() => MethodAccessor<AI_State_AirLand>.Create("OnDrawGizmos"));

		public static void OnDrawGizmos(this AI_State_AirLand __self) => _OnDrawGizmos757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AI_State_AirLand_AwayFromPlayer
	{

		private static readonly System.Lazy<FieldAccessor<AI_State_AirLand_AwayFromPlayer, float>> _minDistanceFromPlayer =
				new System.Lazy<FieldAccessor<AI_State_AirLand_AwayFromPlayer, float>>(() => FieldAccessor<AI_State_AirLand_AwayFromPlayer, float>.Create("minDistanceFromPlayer"));
		private static readonly System.Lazy<FieldAccessor<AI_State_AirLand_AwayFromPlayer, System.Collections.Generic.Dictionary<Steamworks.CSteamID, Network_Player>>> _users =
				new System.Lazy<FieldAccessor<AI_State_AirLand_AwayFromPlayer, System.Collections.Generic.Dictionary<Steamworks.CSteamID, Network_Player>>>(() => FieldAccessor<AI_State_AirLand_AwayFromPlayer, System.Collections.Generic.Dictionary<Steamworks.CSteamID, Network_Player>>.Create("users"));

		public static float GetMinDistanceFromPlayer(this AI_State_AirLand_AwayFromPlayer __self) => _minDistanceFromPlayer.Value.GetValue(__self);
		public static void SetMinDistanceFromPlayer(this AI_State_AirLand_AwayFromPlayer __self, float value) => _minDistanceFromPlayer.Value.SetValue(__self, value);
		public static System.Collections.Generic.Dictionary<Steamworks.CSteamID, Network_Player> GetUsers(this AI_State_AirLand_AwayFromPlayer __self) => _users.Value.GetValue(__self);
		public static void SetUsers(this AI_State_AirLand_AwayFromPlayer __self, System.Collections.Generic.Dictionary<Steamworks.CSteamID, Network_Player> value) => _users.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_State_AirLand_AwayFromPlayer>> _Start757602046 =
				new System.Lazy<MethodAccessor<AI_State_AirLand_AwayFromPlayer>>(() => MethodAccessor<AI_State_AirLand_AwayFromPlayer>.Create("Start"));

		public static void Start(this AI_State_AirLand_AwayFromPlayer __self) => _Start757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AI_State_ChargeToPoint
	{

		private static readonly System.Lazy<FieldAccessor<AI_State_ChargeToPoint, UnityEngine.Vector3>> _deltaMovement =
				new System.Lazy<FieldAccessor<AI_State_ChargeToPoint, UnityEngine.Vector3>>(() => FieldAccessor<AI_State_ChargeToPoint, UnityEngine.Vector3>.Create("deltaMovement"));

		public static UnityEngine.Vector3 GetDeltaMovement(this AI_State_ChargeToPoint __self) => _deltaMovement.Value.GetValue(__self);
		public static void SetDeltaMovement(this AI_State_ChargeToPoint __self, UnityEngine.Vector3 value) => _deltaMovement.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_State_ChargeToPoint>> _Start757602046 =
				new System.Lazy<MethodAccessor<AI_State_ChargeToPoint>>(() => MethodAccessor<AI_State_ChargeToPoint>.Create("Start"));

		public static void Start(this AI_State_ChargeToPoint __self) => _Start757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AI_State_ChargeUp
	{

		private static readonly System.Lazy<FieldAccessor<AI_State_ChargeUp, float>> _originChargeTimeMax =
				new System.Lazy<FieldAccessor<AI_State_ChargeUp, float>>(() => FieldAccessor<AI_State_ChargeUp, float>.Create("originChargeTimeMax"));
		private static readonly System.Lazy<FieldAccessor<AI_State_ChargeUp, float>> _originChargeTimeMin =
				new System.Lazy<FieldAccessor<AI_State_ChargeUp, float>>(() => FieldAccessor<AI_State_ChargeUp, float>.Create("originChargeTimeMin"));
		private static readonly System.Lazy<FieldAccessor<AI_State_ChargeUp, float>> _originChargeTime =
				new System.Lazy<FieldAccessor<AI_State_ChargeUp, float>>(() => FieldAccessor<AI_State_ChargeUp, float>.Create("originChargeTime"));
		private static readonly System.Lazy<FieldAccessor<AI_State_ChargeUp, float>> _chargeTime =
				new System.Lazy<FieldAccessor<AI_State_ChargeUp, float>>(() => FieldAccessor<AI_State_ChargeUp, float>.Create("chargeTime"));
		private static readonly System.Lazy<FieldAccessor<AI_State_ChargeUp, AI_State>> _chargeChannelDoneState =
				new System.Lazy<FieldAccessor<AI_State_ChargeUp, AI_State>>(() => FieldAccessor<AI_State_ChargeUp, AI_State>.Create("chargeChannelDoneState"));
		private static readonly System.Lazy<FieldAccessor<AI_State_ChargeUp, UnityEngine.Vector3>> _currentTargetPostion =
				new System.Lazy<FieldAccessor<AI_State_ChargeUp, UnityEngine.Vector3>>(() => FieldAccessor<AI_State_ChargeUp, UnityEngine.Vector3>.Create("currentTargetPostion"));
		private static readonly System.Lazy<FieldAccessor<AI_State_ChargeUp, bool>> _chargeStarted =
				new System.Lazy<FieldAccessor<AI_State_ChargeUp, bool>>(() => FieldAccessor<AI_State_ChargeUp, bool>.Create("chargeStarted"));
		private static readonly System.Lazy<FieldAccessor<AI_State_ChargeUp, float>> _currentSpeed =
				new System.Lazy<FieldAccessor<AI_State_ChargeUp, float>>(() => FieldAccessor<AI_State_ChargeUp, float>.Create("currentSpeed"));
		private static readonly System.Lazy<FieldAccessor<AI_State_ChargeUp, string>> _eventRef_startCharge =
				new System.Lazy<FieldAccessor<AI_State_ChargeUp, string>>(() => FieldAccessor<AI_State_ChargeUp, string>.Create("eventRef_startCharge"));

		public static float GetOriginChargeTimeMax(this AI_State_ChargeUp __self) => _originChargeTimeMax.Value.GetValue(__self);
		public static void SetOriginChargeTimeMax(this AI_State_ChargeUp __self, float value) => _originChargeTimeMax.Value.SetValue(__self, value);
		public static float GetOriginChargeTimeMin(this AI_State_ChargeUp __self) => _originChargeTimeMin.Value.GetValue(__self);
		public static void SetOriginChargeTimeMin(this AI_State_ChargeUp __self, float value) => _originChargeTimeMin.Value.SetValue(__self, value);
		public static float GetOriginChargeTime(this AI_State_ChargeUp __self) => _originChargeTime.Value.GetValue(__self);
		public static void SetOriginChargeTime(this AI_State_ChargeUp __self, float value) => _originChargeTime.Value.SetValue(__self, value);
		public static float GetChargeTime(this AI_State_ChargeUp __self) => _chargeTime.Value.GetValue(__self);
		public static void SetChargeTime(this AI_State_ChargeUp __self, float value) => _chargeTime.Value.SetValue(__self, value);
		public static AI_State GetChargeChannelDoneState(this AI_State_ChargeUp __self) => _chargeChannelDoneState.Value.GetValue(__self);
		public static void SetChargeChannelDoneState(this AI_State_ChargeUp __self, AI_State value) => _chargeChannelDoneState.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetCurrentTargetPostion(this AI_State_ChargeUp __self) => _currentTargetPostion.Value.GetValue(__self);
		public static void SetCurrentTargetPostion(this AI_State_ChargeUp __self, UnityEngine.Vector3 value) => _currentTargetPostion.Value.SetValue(__self, value);
		public static bool GetChargeStarted(this AI_State_ChargeUp __self) => _chargeStarted.Value.GetValue(__self);
		public static void SetChargeStarted(this AI_State_ChargeUp __self, bool value) => _chargeStarted.Value.SetValue(__self, value);
		public static float GetCurrentSpeed(this AI_State_ChargeUp __self) => _currentSpeed.Value.GetValue(__self);
		public static void SetCurrentSpeed(this AI_State_ChargeUp __self, float value) => _currentSpeed.Value.SetValue(__self, value);
		public static string GetEventRef_startCharge(this AI_State_ChargeUp __self) => _eventRef_startCharge.Value.GetValue(__self);
		public static void SetEventRef_startCharge(this AI_State_ChargeUp __self, string value) => _eventRef_startCharge.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_State_ChargeUp>> _Awake757602046 =
				new System.Lazy<MethodAccessor<AI_State_ChargeUp>>(() => MethodAccessor<AI_State_ChargeUp>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<AI_State_ChargeUp>> _Start757602046 =
				new System.Lazy<MethodAccessor<AI_State_ChargeUp>>(() => MethodAccessor<AI_State_ChargeUp>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<AI_State_ChargeUp>> _ChannelCharge757602046 =
				new System.Lazy<MethodAccessor<AI_State_ChargeUp>>(() => MethodAccessor<AI_State_ChargeUp>.Create("ChannelCharge"));
		private static readonly System.Lazy<MethodAccessor<AI_State_ChargeUp>> _IncrementChannelTimer757602046 =
				new System.Lazy<MethodAccessor<AI_State_ChargeUp>>(() => MethodAccessor<AI_State_ChargeUp>.Create("IncrementChannelTimer"));
		private static readonly System.Lazy<MethodAccessor<AI_State_ChargeUp>> _ChargeFinished757602046 =
				new System.Lazy<MethodAccessor<AI_State_ChargeUp>>(() => MethodAccessor<AI_State_ChargeUp>.Create("ChargeFinished"));
		private static readonly System.Lazy<MethodAccessor<AI_State_ChargeUp>> _ChangeToChargeChannelFinishedState757602046 =
				new System.Lazy<MethodAccessor<AI_State_ChargeUp>>(() => MethodAccessor<AI_State_ChargeUp>.Create("ChangeToChargeChannelFinishedState"));
		private static readonly System.Lazy<MethodAccessor<AI_State_ChargeUp>> _StartCharge757602046 =
				new System.Lazy<MethodAccessor<AI_State_ChargeUp>>(() => MethodAccessor<AI_State_ChargeUp>.Create("StartCharge"));

		public static void Awake(this AI_State_ChargeUp __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this AI_State_ChargeUp __self) => _Start757602046.Value.Invoke(__self);
		public static void ChannelCharge(this AI_State_ChargeUp __self) => _ChannelCharge757602046.Value.Invoke(__self);
		public static void IncrementChannelTimer(this AI_State_ChargeUp __self) => _IncrementChannelTimer757602046.Value.Invoke(__self);
		public static void ChargeFinished(this AI_State_ChargeUp __self) => _ChargeFinished757602046.Value.Invoke(__self);
		public static void ChangeToChargeChannelFinishedState(this AI_State_ChargeUp __self) => _ChangeToChargeChannelFinishedState757602046.Value.Invoke(__self);
		public static void StartCharge(this AI_State_ChargeUp __self) => _StartCharge757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AI_State_ChargeUp_Target
	{

		private static readonly System.Lazy<FieldAccessor<AI_State_ChargeUp_Target, float>> _chargeDirectionAngleMargin =
				new System.Lazy<FieldAccessor<AI_State_ChargeUp_Target, float>>(() => FieldAccessor<AI_State_ChargeUp_Target, float>.Create("chargeDirectionAngleMargin"));
		private static readonly System.Lazy<FieldAccessor<AI_State_ChargeUp_Target, float>> _rotationSpeed =
				new System.Lazy<FieldAccessor<AI_State_ChargeUp_Target, float>>(() => FieldAccessor<AI_State_ChargeUp_Target, float>.Create("rotationSpeed"));
		private static readonly System.Lazy<FieldAccessor<AI_State_ChargeUp_Target, AI_Movement>> _movement =
				new System.Lazy<FieldAccessor<AI_State_ChargeUp_Target, AI_Movement>>(() => FieldAccessor<AI_State_ChargeUp_Target, AI_Movement>.Create("movement"));
		private static readonly System.Lazy<FieldAccessor<AI_State_ChargeUp_Target, bool>> _lockOnMode =
				new System.Lazy<FieldAccessor<AI_State_ChargeUp_Target, bool>>(() => FieldAccessor<AI_State_ChargeUp_Target, bool>.Create("lockOnMode"));
		private static readonly System.Lazy<FieldAccessor<AI_State_ChargeUp_Target, bool>> _ignoreYPositioning =
				new System.Lazy<FieldAccessor<AI_State_ChargeUp_Target, bool>>(() => FieldAccessor<AI_State_ChargeUp_Target, bool>.Create("ignoreYPositioning"));
		private static readonly System.Lazy<FieldAccessor<AI_State_ChargeUp_Target, AI_State>> _fallbackState =
				new System.Lazy<FieldAccessor<AI_State_ChargeUp_Target, AI_State>>(() => FieldAccessor<AI_State_ChargeUp_Target, AI_State>.Create("fallbackState"));
		private static readonly System.Lazy<FieldAccessor<AI_State_ChargeUp_Target, Network_Player>> _player =
				new System.Lazy<FieldAccessor<AI_State_ChargeUp_Target, Network_Player>>(() => FieldAccessor<AI_State_ChargeUp_Target, Network_Player>.Create("player"));
		private static readonly System.Lazy<FieldAccessor<AI_State_ChargeUp_Target, bool>> _isLockedOn =
				new System.Lazy<FieldAccessor<AI_State_ChargeUp_Target, bool>>(() => FieldAccessor<AI_State_ChargeUp_Target, bool>.Create("isLockedOn"));

		public static float GetChargeDirectionAngleMargin(this AI_State_ChargeUp_Target __self) => _chargeDirectionAngleMargin.Value.GetValue(__self);
		public static void SetChargeDirectionAngleMargin(this AI_State_ChargeUp_Target __self, float value) => _chargeDirectionAngleMargin.Value.SetValue(__self, value);
		public static float GetRotationSpeed(this AI_State_ChargeUp_Target __self) => _rotationSpeed.Value.GetValue(__self);
		public static void SetRotationSpeed(this AI_State_ChargeUp_Target __self, float value) => _rotationSpeed.Value.SetValue(__self, value);
		public static AI_Movement GetMovement(this AI_State_ChargeUp_Target __self) => _movement.Value.GetValue(__self);
		public static void SetMovement(this AI_State_ChargeUp_Target __self, AI_Movement value) => _movement.Value.SetValue(__self, value);
		public static bool GetLockOnMode(this AI_State_ChargeUp_Target __self) => _lockOnMode.Value.GetValue(__self);
		public static void SetLockOnMode(this AI_State_ChargeUp_Target __self, bool value) => _lockOnMode.Value.SetValue(__self, value);
		public static bool GetIgnoreYPositioning(this AI_State_ChargeUp_Target __self) => _ignoreYPositioning.Value.GetValue(__self);
		public static void SetIgnoreYPositioning(this AI_State_ChargeUp_Target __self, bool value) => _ignoreYPositioning.Value.SetValue(__self, value);
		public static AI_State GetFallbackState(this AI_State_ChargeUp_Target __self) => _fallbackState.Value.GetValue(__self);
		public static void SetFallbackState(this AI_State_ChargeUp_Target __self, AI_State value) => _fallbackState.Value.SetValue(__self, value);
		public static Network_Player GetPlayer(this AI_State_ChargeUp_Target __self) => _player.Value.GetValue(__self);
		public static void SetPlayer(this AI_State_ChargeUp_Target __self, Network_Player value) => _player.Value.SetValue(__self, value);
		public static bool GetIsLockedOn(this AI_State_ChargeUp_Target __self) => _isLockedOn.Value.GetValue(__self);
		public static void SetIsLockedOn(this AI_State_ChargeUp_Target __self, bool value) => _isLockedOn.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_State_ChargeUp_Target>> _Awake757602046 =
				new System.Lazy<MethodAccessor<AI_State_ChargeUp_Target>>(() => MethodAccessor<AI_State_ChargeUp_Target>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<AI_State_ChargeUp_Target>> _IncrementChannelTimer757602046 =
				new System.Lazy<MethodAccessor<AI_State_ChargeUp_Target>>(() => MethodAccessor<AI_State_ChargeUp_Target>.Create("IncrementChannelTimer"));
		private static readonly System.Lazy<MethodAccessor<AI_State_ChargeUp_Target>> _ChannelCharge757602046 =
				new System.Lazy<MethodAccessor<AI_State_ChargeUp_Target>>(() => MethodAccessor<AI_State_ChargeUp_Target>.Create("ChannelCharge"));
		private static readonly System.Lazy<MethodAccessor<AI_State_ChargeUp_Target>> _ChargeFinished757602046 =
				new System.Lazy<MethodAccessor<AI_State_ChargeUp_Target>>(() => MethodAccessor<AI_State_ChargeUp_Target>.Create("ChargeFinished"));
		private static readonly System.Lazy<MethodAccessor<AI_State_ChargeUp_Target>> _ChangeToChargeChannelFinishedState757602046 =
				new System.Lazy<MethodAccessor<AI_State_ChargeUp_Target>>(() => MethodAccessor<AI_State_ChargeUp_Target>.Create("ChangeToChargeChannelFinishedState"));
		private static readonly System.Lazy<MethodAccessor<AI_State_ChargeUp_Target>> _IsInAngle3450040886 =
				new System.Lazy<MethodAccessor<AI_State_ChargeUp_Target>>(() => MethodAccessor<AI_State_ChargeUp_Target>.Create("IsInAngle", typeof(bool)));

		public static void Awake(this AI_State_ChargeUp_Target __self) => _Awake757602046.Value.Invoke(__self);
		public static void IncrementChannelTimer(this AI_State_ChargeUp_Target __self) => _IncrementChannelTimer757602046.Value.Invoke(__self);
		public static void ChannelCharge(this AI_State_ChargeUp_Target __self) => _ChannelCharge757602046.Value.Invoke(__self);
		public static void ChargeFinished(this AI_State_ChargeUp_Target __self) => _ChargeFinished757602046.Value.Invoke(__self);
		public static void ChangeToChargeChannelFinishedState(this AI_State_ChargeUp_Target __self) => _ChangeToChargeChannelFinishedState757602046.Value.Invoke(__self);
		public static bool IsInAngle(this AI_State_ChargeUp_Target __self, bool ignoreY) => (bool)_IsInAngle3450040886.Value.Invoke(__self, ignoreY);

	}

	public static class PrivateAccessor_AI_State_Chase
	{

		private static readonly System.Lazy<FieldAccessor<AI_State_Chase, float>> _distanceToChaseTarget =
				new System.Lazy<FieldAccessor<AI_State_Chase, float>>(() => FieldAccessor<AI_State_Chase, float>.Create("distanceToChaseTarget"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Chase, bool>> _ignoreYDistance =
				new System.Lazy<FieldAccessor<AI_State_Chase, bool>>(() => FieldAccessor<AI_State_Chase, bool>.Create("ignoreYDistance"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Chase, AI_State>> _nextState =
				new System.Lazy<FieldAccessor<AI_State_Chase, AI_State>>(() => FieldAccessor<AI_State_Chase, AI_State>.Create("nextState"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Chase, AI_State>> _fallbackState =
				new System.Lazy<FieldAccessor<AI_State_Chase, AI_State>>(() => FieldAccessor<AI_State_Chase, AI_State>.Create("fallbackState"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Chase, AI_State>> _unreachableState =
				new System.Lazy<FieldAccessor<AI_State_Chase, AI_State>>(() => FieldAccessor<AI_State_Chase, AI_State>.Create("unreachableState"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Chase, float>> _targetMovementSpeed =
				new System.Lazy<FieldAccessor<AI_State_Chase, float>>(() => FieldAccessor<AI_State_Chase, float>.Create("targetMovementSpeed"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Chase, float>> _targetMovementLerpSpeed =
				new System.Lazy<FieldAccessor<AI_State_Chase, float>>(() => FieldAccessor<AI_State_Chase, float>.Create("targetMovementLerpSpeed"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Chase, bool>> _standStillIfBehind =
				new System.Lazy<FieldAccessor<AI_State_Chase, bool>>(() => FieldAccessor<AI_State_Chase, bool>.Create("standStillIfBehind"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Chase, bool>> _ignoreZRotation =
				new System.Lazy<FieldAccessor<AI_State_Chase, bool>>(() => FieldAccessor<AI_State_Chase, bool>.Create("ignoreZRotation"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Chase, float>> _targetRotationSpeed =
				new System.Lazy<FieldAccessor<AI_State_Chase, float>>(() => FieldAccessor<AI_State_Chase, float>.Create("targetRotationSpeed"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Chase, float>> _targetRotationLerpSpeed =
				new System.Lazy<FieldAccessor<AI_State_Chase, float>>(() => FieldAccessor<AI_State_Chase, float>.Create("targetRotationLerpSpeed"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Chase, bool>> _useVision =
				new System.Lazy<FieldAccessor<AI_State_Chase, bool>>(() => FieldAccessor<AI_State_Chase, bool>.Create("useVision"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Chase, MovementType>> _movementType =
				new System.Lazy<FieldAccessor<AI_State_Chase, MovementType>>(() => FieldAccessor<AI_State_Chase, MovementType>.Create("movementType"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Chase, Network_Player>> _target =
				new System.Lazy<FieldAccessor<AI_State_Chase, Network_Player>>(() => FieldAccessor<AI_State_Chase, Network_Player>.Create("target"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Chase, Raft_Network>> _network =
				new System.Lazy<FieldAccessor<AI_State_Chase, Raft_Network>>(() => FieldAccessor<AI_State_Chase, Raft_Network>.Create("network"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Chase, UnityEngine.Vector3>> _startChaseOrigin =
				new System.Lazy<FieldAccessor<AI_State_Chase, UnityEngine.Vector3>>(() => FieldAccessor<AI_State_Chase, UnityEngine.Vector3>.Create("startChaseOrigin"));

		public static float GetDistanceToChaseTarget(this AI_State_Chase __self) => _distanceToChaseTarget.Value.GetValue(__self);
		public static void SetDistanceToChaseTarget(this AI_State_Chase __self, float value) => _distanceToChaseTarget.Value.SetValue(__self, value);
		public static bool GetIgnoreYDistance(this AI_State_Chase __self) => _ignoreYDistance.Value.GetValue(__self);
		public static void SetIgnoreYDistance(this AI_State_Chase __self, bool value) => _ignoreYDistance.Value.SetValue(__self, value);
		public static AI_State GetNextState(this AI_State_Chase __self) => _nextState.Value.GetValue(__self);
		public static void SetNextState(this AI_State_Chase __self, AI_State value) => _nextState.Value.SetValue(__self, value);
		public static AI_State GetFallbackState(this AI_State_Chase __self) => _fallbackState.Value.GetValue(__self);
		public static void SetFallbackState(this AI_State_Chase __self, AI_State value) => _fallbackState.Value.SetValue(__self, value);
		public static AI_State GetUnreachableState(this AI_State_Chase __self) => _unreachableState.Value.GetValue(__self);
		public static void SetUnreachableState(this AI_State_Chase __self, AI_State value) => _unreachableState.Value.SetValue(__self, value);
		public static float GetTargetMovementSpeed(this AI_State_Chase __self) => _targetMovementSpeed.Value.GetValue(__self);
		public static void SetTargetMovementSpeed(this AI_State_Chase __self, float value) => _targetMovementSpeed.Value.SetValue(__self, value);
		public static float GetTargetMovementLerpSpeed(this AI_State_Chase __self) => _targetMovementLerpSpeed.Value.GetValue(__self);
		public static void SetTargetMovementLerpSpeed(this AI_State_Chase __self, float value) => _targetMovementLerpSpeed.Value.SetValue(__self, value);
		public static bool GetStandStillIfBehind(this AI_State_Chase __self) => _standStillIfBehind.Value.GetValue(__self);
		public static void SetStandStillIfBehind(this AI_State_Chase __self, bool value) => _standStillIfBehind.Value.SetValue(__self, value);
		public static bool GetIgnoreZRotation(this AI_State_Chase __self) => _ignoreZRotation.Value.GetValue(__self);
		public static void SetIgnoreZRotation(this AI_State_Chase __self, bool value) => _ignoreZRotation.Value.SetValue(__self, value);
		public static float GetTargetRotationSpeed(this AI_State_Chase __self) => _targetRotationSpeed.Value.GetValue(__self);
		public static void SetTargetRotationSpeed(this AI_State_Chase __self, float value) => _targetRotationSpeed.Value.SetValue(__self, value);
		public static float GetTargetRotationLerpSpeed(this AI_State_Chase __self) => _targetRotationLerpSpeed.Value.GetValue(__self);
		public static void SetTargetRotationLerpSpeed(this AI_State_Chase __self, float value) => _targetRotationLerpSpeed.Value.SetValue(__self, value);
		public static bool GetUseVision(this AI_State_Chase __self) => _useVision.Value.GetValue(__self);
		public static void SetUseVision(this AI_State_Chase __self, bool value) => _useVision.Value.SetValue(__self, value);
		public static MovementType GetMovementType(this AI_State_Chase __self) => _movementType.Value.GetValue(__self);
		public static void SetMovementType(this AI_State_Chase __self, MovementType value) => _movementType.Value.SetValue(__self, value);
		public static Network_Player GetTarget(this AI_State_Chase __self) => _target.Value.GetValue(__self);
		public static void SetTarget(this AI_State_Chase __self, Network_Player value) => _target.Value.SetValue(__self, value);
		public static Raft_Network GetNetwork(this AI_State_Chase __self) => _network.Value.GetValue(__self);
		public static void SetNetwork(this AI_State_Chase __self, Raft_Network value) => _network.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetStartChaseOrigin(this AI_State_Chase __self) => _startChaseOrigin.Value.GetValue(__self);
		public static void SetStartChaseOrigin(this AI_State_Chase __self, UnityEngine.Vector3 value) => _startChaseOrigin.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_State_Chase>> _Start757602046 =
				new System.Lazy<MethodAccessor<AI_State_Chase>>(() => MethodAccessor<AI_State_Chase>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<AI_State_Chase>> _OnDrawGizmos757602046 =
				new System.Lazy<MethodAccessor<AI_State_Chase>>(() => MethodAccessor<AI_State_Chase>.Create("OnDrawGizmos"));
		private static readonly System.Lazy<MethodAccessor<AI_State_Chase>> _Chase1695322039 =
				new System.Lazy<MethodAccessor<AI_State_Chase>>(() => MethodAccessor<AI_State_Chase>.Create("Chase", typeof(Network_Player), typeof(UnityEngine.Vector3)));
		private static readonly System.Lazy<MethodAccessor<AI_State_Chase>> _FindNewTarget757602046 =
				new System.Lazy<MethodAccessor<AI_State_Chase>>(() => MethodAccessor<AI_State_Chase>.Create("FindNewTarget"));
		private static readonly System.Lazy<MethodAccessor<AI_State_Chase>> _IsInRangeOfPoint3429126434 =
				new System.Lazy<MethodAccessor<AI_State_Chase>>(() => MethodAccessor<AI_State_Chase>.Create("IsInRangeOfPoint", typeof(UnityEngine.Vector3)));
		private static readonly System.Lazy<MethodAccessor<AI_State_Chase>> _DistanceFromOrigin3429126434 =
				new System.Lazy<MethodAccessor<AI_State_Chase>>(() => MethodAccessor<AI_State_Chase>.Create("DistanceFromOrigin", typeof(UnityEngine.Vector3)));
		private static readonly System.Lazy<MethodAccessor<AI_State_Chase>> _IsWithinOriginRange3429126434 =
				new System.Lazy<MethodAccessor<AI_State_Chase>>(() => MethodAccessor<AI_State_Chase>.Create("IsWithinOriginRange", typeof(UnityEngine.Vector3)));

		public static void Start(this AI_State_Chase __self) => _Start757602046.Value.Invoke(__self);
		public static void OnDrawGizmos(this AI_State_Chase __self) => _OnDrawGizmos757602046.Value.Invoke(__self);
		public static void Chase(this AI_State_Chase __self, Network_Player targetPlayer, UnityEngine.Vector3 chasePosition) => _Chase1695322039.Value.Invoke(__self, targetPlayer, chasePosition);
		public static Network_Player FindNewTarget(this AI_State_Chase __self) => (Network_Player)_FindNewTarget757602046.Value.Invoke(__self);
		public static bool IsInRangeOfPoint(this AI_State_Chase __self, UnityEngine.Vector3 point) => (bool)_IsInRangeOfPoint3429126434.Value.Invoke(__self, point);
		public static float DistanceFromOrigin(this AI_State_Chase __self, UnityEngine.Vector3 pos) => (float)_DistanceFromOrigin3429126434.Value.Invoke(__self, pos);
		public static bool IsWithinOriginRange(this AI_State_Chase __self, UnityEngine.Vector3 pos) => (bool)_IsWithinOriginRange3429126434.Value.Invoke(__self, pos);

	}

	public static class PrivateAccessor_AI_State_Chase_CancelOnSeen
	{

		private static readonly System.Lazy<MethodAccessor<AI_State_Chase_CancelOnSeen>> _IsInBackOfTarget757602046 =
				new System.Lazy<MethodAccessor<AI_State_Chase_CancelOnSeen>>(() => MethodAccessor<AI_State_Chase_CancelOnSeen>.Create("IsInBackOfTarget"));

		public static bool IsInBackOfTarget(this AI_State_Chase_CancelOnSeen __self) => (bool)_IsInBackOfTarget757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AI_State_Chase_Water
	{

		private static readonly System.Lazy<MethodAccessor<AI_State_Chase_Water>> _Chase1695322039 =
				new System.Lazy<MethodAccessor<AI_State_Chase_Water>>(() => MethodAccessor<AI_State_Chase_Water>.Create("Chase", typeof(Network_Player), typeof(UnityEngine.Vector3)));
		private static readonly System.Lazy<MethodAccessor<AI_State_Chase_Water>> _FindNewTarget757602046 =
				new System.Lazy<MethodAccessor<AI_State_Chase_Water>>(() => MethodAccessor<AI_State_Chase_Water>.Create("FindNewTarget"));

		public static void Chase(this AI_State_Chase_Water __self, Network_Player targetPlayer, UnityEngine.Vector3 chasePosition) => _Chase1695322039.Value.Invoke(__self, targetPlayer, chasePosition);
		public static Network_Player FindNewTarget(this AI_State_Chase_Water __self) => (Network_Player)_FindNewTarget757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AI_State_CirculateRaftBounds
	{

		private static readonly System.Lazy<FieldAccessor<AI_State_CirculateRaftBounds, MovementType>> _movementType =
				new System.Lazy<FieldAccessor<AI_State_CirculateRaftBounds, MovementType>>(() => FieldAccessor<AI_State_CirculateRaftBounds, MovementType>.Create("movementType"));
		private static readonly System.Lazy<FieldAccessor<AI_State_CirculateRaftBounds, bool>> _targetPointFollowRaft =
				new System.Lazy<FieldAccessor<AI_State_CirculateRaftBounds, bool>>(() => FieldAccessor<AI_State_CirculateRaftBounds, bool>.Create("targetPointFollowRaft"));
		private static readonly System.Lazy<FieldAccessor<AI_State_CirculateRaftBounds, float>> _targetMovementSpeed =
				new System.Lazy<FieldAccessor<AI_State_CirculateRaftBounds, float>>(() => FieldAccessor<AI_State_CirculateRaftBounds, float>.Create("targetMovementSpeed"));
		private static readonly System.Lazy<FieldAccessor<AI_State_CirculateRaftBounds, Interval_Float>> _posYInterval =
				new System.Lazy<FieldAccessor<AI_State_CirculateRaftBounds, Interval_Float>>(() => FieldAccessor<AI_State_CirculateRaftBounds, Interval_Float>.Create("posYInterval"));
		private static readonly System.Lazy<FieldAccessor<AI_State_CirculateRaftBounds, float>> _posYRoughWeatherOffset =
				new System.Lazy<FieldAccessor<AI_State_CirculateRaftBounds, float>>(() => FieldAccessor<AI_State_CirculateRaftBounds, float>.Create("posYRoughWeatherOffset"));
		private static readonly System.Lazy<FieldAccessor<AI_State_CirculateRaftBounds, UnityEngine.Vector3>> _minBoundsSize =
				new System.Lazy<FieldAccessor<AI_State_CirculateRaftBounds, UnityEngine.Vector3>>(() => FieldAccessor<AI_State_CirculateRaftBounds, UnityEngine.Vector3>.Create("minBoundsSize"));
		private static readonly System.Lazy<FieldAccessor<AI_State_CirculateRaftBounds, float>> _innerBoundsModifier =
				new System.Lazy<FieldAccessor<AI_State_CirculateRaftBounds, float>>(() => FieldAccessor<AI_State_CirculateRaftBounds, float>.Create("innerBoundsModifier"));
		private static readonly System.Lazy<FieldAccessor<AI_State_CirculateRaftBounds, float>> _outerBoundsModifier =
				new System.Lazy<FieldAccessor<AI_State_CirculateRaftBounds, float>>(() => FieldAccessor<AI_State_CirculateRaftBounds, float>.Create("outerBoundsModifier"));
		private static readonly System.Lazy<FieldAccessor<AI_State_CirculateRaftBounds, float>> _boundsMargin =
				new System.Lazy<FieldAccessor<AI_State_CirculateRaftBounds, float>>(() => FieldAccessor<AI_State_CirculateRaftBounds, float>.Create("boundsMargin"));
		private static readonly System.Lazy<FieldAccessor<AI_State_CirculateRaftBounds, AI_State>> _reachPointState =
				new System.Lazy<FieldAccessor<AI_State_CirculateRaftBounds, AI_State>>(() => FieldAccessor<AI_State_CirculateRaftBounds, AI_State>.Create("reachPointState"));
		private static readonly System.Lazy<FieldAccessor<AI_State_CirculateRaftBounds, float>> _reachPointDistance =
				new System.Lazy<FieldAccessor<AI_State_CirculateRaftBounds, float>>(() => FieldAccessor<AI_State_CirculateRaftBounds, float>.Create("reachPointDistance"));
		private static readonly System.Lazy<FieldAccessor<AI_State_CirculateRaftBounds, float>> _newPointMaxAngle =
				new System.Lazy<FieldAccessor<AI_State_CirculateRaftBounds, float>>(() => FieldAccessor<AI_State_CirculateRaftBounds, float>.Create("newPointMaxAngle"));
		private static readonly System.Lazy<FieldAccessor<AI_State_CirculateRaftBounds, uint>> _attempstToFindPoint =
				new System.Lazy<FieldAccessor<AI_State_CirculateRaftBounds, uint>>(() => FieldAccessor<AI_State_CirculateRaftBounds, uint>.Create("attempstToFindPoint"));
		private static readonly System.Lazy<FieldAccessor<AI_State_CirculateRaftBounds, UnityEngine.Vector3>> _targetPoint =
				new System.Lazy<FieldAccessor<AI_State_CirculateRaftBounds, UnityEngine.Vector3>>(() => FieldAccessor<AI_State_CirculateRaftBounds, UnityEngine.Vector3>.Create("targetPoint"));

		public static MovementType GetMovementType(this AI_State_CirculateRaftBounds __self) => _movementType.Value.GetValue(__self);
		public static void SetMovementType(this AI_State_CirculateRaftBounds __self, MovementType value) => _movementType.Value.SetValue(__self, value);
		public static bool GetTargetPointFollowRaft(this AI_State_CirculateRaftBounds __self) => _targetPointFollowRaft.Value.GetValue(__self);
		public static void SetTargetPointFollowRaft(this AI_State_CirculateRaftBounds __self, bool value) => _targetPointFollowRaft.Value.SetValue(__self, value);
		public static float GetTargetMovementSpeed(this AI_State_CirculateRaftBounds __self) => _targetMovementSpeed.Value.GetValue(__self);
		public static void SetTargetMovementSpeed(this AI_State_CirculateRaftBounds __self, float value) => _targetMovementSpeed.Value.SetValue(__self, value);
		public static Interval_Float GetPosYInterval(this AI_State_CirculateRaftBounds __self) => _posYInterval.Value.GetValue(__self);
		public static void SetPosYInterval(this AI_State_CirculateRaftBounds __self, Interval_Float value) => _posYInterval.Value.SetValue(__self, value);
		public static float GetPosYRoughWeatherOffset(this AI_State_CirculateRaftBounds __self) => _posYRoughWeatherOffset.Value.GetValue(__self);
		public static void SetPosYRoughWeatherOffset(this AI_State_CirculateRaftBounds __self, float value) => _posYRoughWeatherOffset.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetMinBoundsSize(this AI_State_CirculateRaftBounds __self) => _minBoundsSize.Value.GetValue(__self);
		public static void SetMinBoundsSize(this AI_State_CirculateRaftBounds __self, UnityEngine.Vector3 value) => _minBoundsSize.Value.SetValue(__self, value);
		public static float GetInnerBoundsModifier(this AI_State_CirculateRaftBounds __self) => _innerBoundsModifier.Value.GetValue(__self);
		public static void SetInnerBoundsModifier(this AI_State_CirculateRaftBounds __self, float value) => _innerBoundsModifier.Value.SetValue(__self, value);
		public static float GetOuterBoundsModifier(this AI_State_CirculateRaftBounds __self) => _outerBoundsModifier.Value.GetValue(__self);
		public static void SetOuterBoundsModifier(this AI_State_CirculateRaftBounds __self, float value) => _outerBoundsModifier.Value.SetValue(__self, value);
		public static float GetBoundsMargin(this AI_State_CirculateRaftBounds __self) => _boundsMargin.Value.GetValue(__self);
		public static void SetBoundsMargin(this AI_State_CirculateRaftBounds __self, float value) => _boundsMargin.Value.SetValue(__self, value);
		public static AI_State GetReachPointState(this AI_State_CirculateRaftBounds __self) => _reachPointState.Value.GetValue(__self);
		public static void SetReachPointState(this AI_State_CirculateRaftBounds __self, AI_State value) => _reachPointState.Value.SetValue(__self, value);
		public static float GetReachPointDistance(this AI_State_CirculateRaftBounds __self) => _reachPointDistance.Value.GetValue(__self);
		public static void SetReachPointDistance(this AI_State_CirculateRaftBounds __self, float value) => _reachPointDistance.Value.SetValue(__self, value);
		public static float GetNewPointMaxAngle(this AI_State_CirculateRaftBounds __self) => _newPointMaxAngle.Value.GetValue(__self);
		public static void SetNewPointMaxAngle(this AI_State_CirculateRaftBounds __self, float value) => _newPointMaxAngle.Value.SetValue(__self, value);
		public static uint GetAttempstToFindPoint(this AI_State_CirculateRaftBounds __self) => _attempstToFindPoint.Value.GetValue(__self);
		public static void SetAttempstToFindPoint(this AI_State_CirculateRaftBounds __self, uint value) => _attempstToFindPoint.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetTargetPoint(this AI_State_CirculateRaftBounds __self) => _targetPoint.Value.GetValue(__self);
		public static void SetTargetPoint(this AI_State_CirculateRaftBounds __self, UnityEngine.Vector3 value) => _targetPoint.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_State_CirculateRaftBounds>> _OnDrawGizmosSelected757602046 =
				new System.Lazy<MethodAccessor<AI_State_CirculateRaftBounds>>(() => MethodAccessor<AI_State_CirculateRaftBounds>.Create("OnDrawGizmosSelected"));
		private static readonly System.Lazy<MethodAccessor<AI_State_CirculateRaftBounds>> _GetValidTargetPoint757602046 =
				new System.Lazy<MethodAccessor<AI_State_CirculateRaftBounds>>(() => MethodAccessor<AI_State_CirculateRaftBounds>.Create("GetValidTargetPoint"));

		public static void OnDrawGizmosSelected(this AI_State_CirculateRaftBounds __self) => _OnDrawGizmosSelected757602046.Value.Invoke(__self);
		public static UnityEngine.Vector3 GetValidTargetPoint(this AI_State_CirculateRaftBounds __self) => (UnityEngine.Vector3)_GetValidTargetPoint757602046.Value.Invoke(__self);

	}

	public static class Private_AI_State_CirculateRaftBounds
	{

		private static readonly System.Lazy<StaticFieldAccessor<RaftBounds>> _bounds =
				new System.Lazy<StaticFieldAccessor<RaftBounds>>(() => StaticFieldAccessor<RaftBounds>.Create(typeof(AI_State_CirculateRaftBounds), "bounds"));

		public static RaftBounds GetBounds() => _bounds.Value.GetValue();
		public static void SetBounds(RaftBounds value) => _bounds.Value.SetValue(value);

	}

	public static class PrivateAccessor_AI_State_CirculateSpawn
	{

		private static readonly System.Lazy<FieldAccessor<AI_State_CirculateSpawn, AI_State>> _nextState =
				new System.Lazy<FieldAccessor<AI_State_CirculateSpawn, AI_State>>(() => FieldAccessor<AI_State_CirculateSpawn, AI_State>.Create("nextState"));
		private static readonly System.Lazy<FieldAccessor<AI_State_CirculateSpawn, float>> _playerDistance =
				new System.Lazy<FieldAccessor<AI_State_CirculateSpawn, float>>(() => FieldAccessor<AI_State_CirculateSpawn, float>.Create("playerDistance"));
		private static readonly System.Lazy<FieldAccessor<AI_State_CirculateSpawn, bool>> _useVisionToPlayer =
				new System.Lazy<FieldAccessor<AI_State_CirculateSpawn, bool>>(() => FieldAccessor<AI_State_CirculateSpawn, bool>.Create("useVisionToPlayer"));
		private static readonly System.Lazy<FieldAccessor<AI_State_CirculateSpawn, AI_State>> _reachedPointState =
				new System.Lazy<FieldAccessor<AI_State_CirculateSpawn, AI_State>>(() => FieldAccessor<AI_State_CirculateSpawn, AI_State>.Create("reachedPointState"));
		private static readonly System.Lazy<FieldAccessor<AI_State_CirculateSpawn, float>> _pointDistance =
				new System.Lazy<FieldAccessor<AI_State_CirculateSpawn, float>>(() => FieldAccessor<AI_State_CirculateSpawn, float>.Create("pointDistance"));
		private static readonly System.Lazy<FieldAccessor<AI_State_CirculateSpawn, bool>> _findNewTargetPointAtStart =
				new System.Lazy<FieldAccessor<AI_State_CirculateSpawn, bool>>(() => FieldAccessor<AI_State_CirculateSpawn, bool>.Create("findNewTargetPointAtStart"));
		private static readonly System.Lazy<FieldAccessor<AI_State_CirculateSpawn, UnityEngine.Transform>> _spawnPoint =
				new System.Lazy<FieldAccessor<AI_State_CirculateSpawn, UnityEngine.Transform>>(() => FieldAccessor<AI_State_CirculateSpawn, UnityEngine.Transform>.Create("spawnPoint"));
		private static readonly System.Lazy<FieldAccessor<AI_State_CirculateSpawn, float>> _circulationRadiusMin =
				new System.Lazy<FieldAccessor<AI_State_CirculateSpawn, float>>(() => FieldAccessor<AI_State_CirculateSpawn, float>.Create("circulationRadiusMin"));
		private static readonly System.Lazy<FieldAccessor<AI_State_CirculateSpawn, float>> _circulationRadius =
				new System.Lazy<FieldAccessor<AI_State_CirculateSpawn, float>>(() => FieldAccessor<AI_State_CirculateSpawn, float>.Create("circulationRadius"));
		private static readonly System.Lazy<FieldAccessor<AI_State_CirculateSpawn, float>> _heightDifference =
				new System.Lazy<FieldAccessor<AI_State_CirculateSpawn, float>>(() => FieldAccessor<AI_State_CirculateSpawn, float>.Create("heightDifference"));
		private static readonly System.Lazy<FieldAccessor<AI_State_CirculateSpawn, float>> _targetMovementSpeed =
				new System.Lazy<FieldAccessor<AI_State_CirculateSpawn, float>>(() => FieldAccessor<AI_State_CirculateSpawn, float>.Create("targetMovementSpeed"));
		private static readonly System.Lazy<FieldAccessor<AI_State_CirculateSpawn, int>> _attemptsToFindPoint =
				new System.Lazy<FieldAccessor<AI_State_CirculateSpawn, int>>(() => FieldAccessor<AI_State_CirculateSpawn, int>.Create("attemptsToFindPoint"));
		private static readonly System.Lazy<FieldAccessor<AI_State_CirculateSpawn, MovementType>> _movementType =
				new System.Lazy<FieldAccessor<AI_State_CirculateSpawn, MovementType>>(() => FieldAccessor<AI_State_CirculateSpawn, MovementType>.Create("movementType"));
		private static readonly System.Lazy<FieldAccessor<AI_State_CirculateSpawn, System.Collections.Generic.Dictionary<Steamworks.CSteamID, Network_Player>>> _users =
				new System.Lazy<FieldAccessor<AI_State_CirculateSpawn, System.Collections.Generic.Dictionary<Steamworks.CSteamID, Network_Player>>>(() => FieldAccessor<AI_State_CirculateSpawn, System.Collections.Generic.Dictionary<Steamworks.CSteamID, Network_Player>>.Create("users"));
		private static readonly System.Lazy<FieldAccessor<AI_State_CirculateSpawn, UnityEngine.Vector3>> _targetPoint =
				new System.Lazy<FieldAccessor<AI_State_CirculateSpawn, UnityEngine.Vector3>>(() => FieldAccessor<AI_State_CirculateSpawn, UnityEngine.Vector3>.Create("targetPoint"));
		private static readonly System.Lazy<FieldAccessor<AI_State_CirculateSpawn, UnityEngine.Vector3>> _startPosition =
				new System.Lazy<FieldAccessor<AI_State_CirculateSpawn, UnityEngine.Vector3>>(() => FieldAccessor<AI_State_CirculateSpawn, UnityEngine.Vector3>.Create("startPosition"));

		public static AI_State GetNextState(this AI_State_CirculateSpawn __self) => _nextState.Value.GetValue(__self);
		public static void SetNextState(this AI_State_CirculateSpawn __self, AI_State value) => _nextState.Value.SetValue(__self, value);
		public static float GetPlayerDistance(this AI_State_CirculateSpawn __self) => _playerDistance.Value.GetValue(__self);
		public static void SetPlayerDistance(this AI_State_CirculateSpawn __self, float value) => _playerDistance.Value.SetValue(__self, value);
		public static bool GetUseVisionToPlayer(this AI_State_CirculateSpawn __self) => _useVisionToPlayer.Value.GetValue(__self);
		public static void SetUseVisionToPlayer(this AI_State_CirculateSpawn __self, bool value) => _useVisionToPlayer.Value.SetValue(__self, value);
		public static AI_State GetReachedPointState(this AI_State_CirculateSpawn __self) => _reachedPointState.Value.GetValue(__self);
		public static void SetReachedPointState(this AI_State_CirculateSpawn __self, AI_State value) => _reachedPointState.Value.SetValue(__self, value);
		public static float GetPointDistance(this AI_State_CirculateSpawn __self) => _pointDistance.Value.GetValue(__self);
		public static void SetPointDistance(this AI_State_CirculateSpawn __self, float value) => _pointDistance.Value.SetValue(__self, value);
		public static bool GetFindNewTargetPointAtStart(this AI_State_CirculateSpawn __self) => _findNewTargetPointAtStart.Value.GetValue(__self);
		public static void SetFindNewTargetPointAtStart(this AI_State_CirculateSpawn __self, bool value) => _findNewTargetPointAtStart.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetSpawnPoint(this AI_State_CirculateSpawn __self) => _spawnPoint.Value.GetValue(__self);
		public static void SetSpawnPoint(this AI_State_CirculateSpawn __self, UnityEngine.Transform value) => _spawnPoint.Value.SetValue(__self, value);
		public static float GetCirculationRadiusMin(this AI_State_CirculateSpawn __self) => _circulationRadiusMin.Value.GetValue(__self);
		public static void SetCirculationRadiusMin(this AI_State_CirculateSpawn __self, float value) => _circulationRadiusMin.Value.SetValue(__self, value);
		public static float GetCirculationRadius(this AI_State_CirculateSpawn __self) => _circulationRadius.Value.GetValue(__self);
		public static void SetCirculationRadius(this AI_State_CirculateSpawn __self, float value) => _circulationRadius.Value.SetValue(__self, value);
		public static float GetHeightDifference(this AI_State_CirculateSpawn __self) => _heightDifference.Value.GetValue(__self);
		public static void SetHeightDifference(this AI_State_CirculateSpawn __self, float value) => _heightDifference.Value.SetValue(__self, value);
		public static float GetTargetMovementSpeed(this AI_State_CirculateSpawn __self) => _targetMovementSpeed.Value.GetValue(__self);
		public static void SetTargetMovementSpeed(this AI_State_CirculateSpawn __self, float value) => _targetMovementSpeed.Value.SetValue(__self, value);
		public static int GetAttemptsToFindPoint(this AI_State_CirculateSpawn __self) => _attemptsToFindPoint.Value.GetValue(__self);
		public static void SetAttemptsToFindPoint(this AI_State_CirculateSpawn __self, int value) => _attemptsToFindPoint.Value.SetValue(__self, value);
		public static MovementType GetMovementType(this AI_State_CirculateSpawn __self) => _movementType.Value.GetValue(__self);
		public static void SetMovementType(this AI_State_CirculateSpawn __self, MovementType value) => _movementType.Value.SetValue(__self, value);
		public static System.Collections.Generic.Dictionary<Steamworks.CSteamID, Network_Player> GetUsers(this AI_State_CirculateSpawn __self) => _users.Value.GetValue(__self);
		public static void SetUsers(this AI_State_CirculateSpawn __self, System.Collections.Generic.Dictionary<Steamworks.CSteamID, Network_Player> value) => _users.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetTargetPoint(this AI_State_CirculateSpawn __self) => _targetPoint.Value.GetValue(__self);
		public static void SetTargetPoint(this AI_State_CirculateSpawn __self, UnityEngine.Vector3 value) => _targetPoint.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetStartPosition(this AI_State_CirculateSpawn __self) => _startPosition.Value.GetValue(__self);
		public static void SetStartPosition(this AI_State_CirculateSpawn __self, UnityEngine.Vector3 value) => _startPosition.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_State_CirculateSpawn>> _Awake757602046 =
				new System.Lazy<MethodAccessor<AI_State_CirculateSpawn>>(() => MethodAccessor<AI_State_CirculateSpawn>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<AI_State_CirculateSpawn>> _Start757602046 =
				new System.Lazy<MethodAccessor<AI_State_CirculateSpawn>>(() => MethodAccessor<AI_State_CirculateSpawn>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<AI_State_CirculateSpawn>> _Circulate757602046 =
				new System.Lazy<MethodAccessor<AI_State_CirculateSpawn>>(() => MethodAccessor<AI_State_CirculateSpawn>.Create("Circulate"));
		private static readonly System.Lazy<MethodAccessor<AI_State_CirculateSpawn>> _PlayerIsWithinRange757602046 =
				new System.Lazy<MethodAccessor<AI_State_CirculateSpawn>>(() => MethodAccessor<AI_State_CirculateSpawn>.Create("PlayerIsWithinRange"));
		private static readonly System.Lazy<MethodAccessor<AI_State_CirculateSpawn>> _GetValidTargetPoint757602046 =
				new System.Lazy<MethodAccessor<AI_State_CirculateSpawn>>(() => MethodAccessor<AI_State_CirculateSpawn>.Create("GetValidTargetPoint"));
		private static readonly System.Lazy<MethodAccessor<AI_State_CirculateSpawn>> _GetRandomTargetPoint757602046 =
				new System.Lazy<MethodAccessor<AI_State_CirculateSpawn>>(() => MethodAccessor<AI_State_CirculateSpawn>.Create("GetRandomTargetPoint"));
		private static readonly System.Lazy<MethodAccessor<AI_State_CirculateSpawn>> _HasDetectPlayerState757602046 =
				new System.Lazy<MethodAccessor<AI_State_CirculateSpawn>>(() => MethodAccessor<AI_State_CirculateSpawn>.Create("HasDetectPlayerState"));

		public static void Awake(this AI_State_CirculateSpawn __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this AI_State_CirculateSpawn __self) => _Start757602046.Value.Invoke(__self);
		public static void Circulate(this AI_State_CirculateSpawn __self) => _Circulate757602046.Value.Invoke(__self);
		public static bool PlayerIsWithinRange(this AI_State_CirculateSpawn __self) => (bool)_PlayerIsWithinRange757602046.Value.Invoke(__self);
		public static UnityEngine.Vector3 GetValidTargetPoint(this AI_State_CirculateSpawn __self) => (UnityEngine.Vector3)_GetValidTargetPoint757602046.Value.Invoke(__self);
		public static UnityEngine.Vector3 GetRandomTargetPoint(this AI_State_CirculateSpawn __self) => (UnityEngine.Vector3)_GetRandomTargetPoint757602046.Value.Invoke(__self);
		public static bool HasDetectPlayerState(this AI_State_CirculateSpawn __self) => (bool)_HasDetectPlayerState757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AI_State_CirculateSpawn_Air
	{

		private static readonly System.Lazy<FieldAccessor<AI_State_CirculateSpawn_Air, float>> _minAltitude =
				new System.Lazy<FieldAccessor<AI_State_CirculateSpawn_Air, float>>(() => FieldAccessor<AI_State_CirculateSpawn_Air, float>.Create("minAltitude"));

		public static float GetMinAltitude(this AI_State_CirculateSpawn_Air __self) => _minAltitude.Value.GetValue(__self);
		public static void SetMinAltitude(this AI_State_CirculateSpawn_Air __self, float value) => _minAltitude.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_State_CirculateSpawn_Air>> _GetValidTargetPoint757602046 =
				new System.Lazy<MethodAccessor<AI_State_CirculateSpawn_Air>>(() => MethodAccessor<AI_State_CirculateSpawn_Air>.Create("GetValidTargetPoint"));

		public static UnityEngine.Vector3 GetValidTargetPoint(this AI_State_CirculateSpawn_Air __self) => (UnityEngine.Vector3)_GetValidTargetPoint757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AI_State_CirculateSpawn_RunAway
	{

		private static readonly System.Lazy<FieldAccessor<AI_State_CirculateSpawn_RunAway, Network_Entity>> _networkEntity =
				new System.Lazy<FieldAccessor<AI_State_CirculateSpawn_RunAway, Network_Entity>>(() => FieldAccessor<AI_State_CirculateSpawn_RunAway, Network_Entity>.Create("networkEntity"));
		private static readonly System.Lazy<FieldAccessor<AI_State_CirculateSpawn_RunAway, AI_State>> _damageTakenState =
				new System.Lazy<FieldAccessor<AI_State_CirculateSpawn_RunAway, AI_State>>(() => FieldAccessor<AI_State_CirculateSpawn_RunAway, AI_State>.Create("damageTakenState"));
		private static readonly System.Lazy<FieldAccessor<AI_State_CirculateSpawn_RunAway, AI_State>> _runAwayState =
				new System.Lazy<FieldAccessor<AI_State_CirculateSpawn_RunAway, AI_State>>(() => FieldAccessor<AI_State_CirculateSpawn_RunAway, AI_State>.Create("runAwayState"));

		public static Network_Entity GetNetworkEntity(this AI_State_CirculateSpawn_RunAway __self) => _networkEntity.Value.GetValue(__self);
		public static void SetNetworkEntity(this AI_State_CirculateSpawn_RunAway __self, Network_Entity value) => _networkEntity.Value.SetValue(__self, value);
		public static AI_State GetDamageTakenState(this AI_State_CirculateSpawn_RunAway __self) => _damageTakenState.Value.GetValue(__self);
		public static void SetDamageTakenState(this AI_State_CirculateSpawn_RunAway __self, AI_State value) => _damageTakenState.Value.SetValue(__self, value);
		public static AI_State GetRunAwayState(this AI_State_CirculateSpawn_RunAway __self) => _runAwayState.Value.GetValue(__self);
		public static void SetRunAwayState(this AI_State_CirculateSpawn_RunAway __self, AI_State value) => _runAwayState.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_State_CirculateSpawn_RunAway>> _Start757602046 =
				new System.Lazy<MethodAccessor<AI_State_CirculateSpawn_RunAway>>(() => MethodAccessor<AI_State_CirculateSpawn_RunAway>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<AI_State_CirculateSpawn_RunAway>> _Destroy757602046 =
				new System.Lazy<MethodAccessor<AI_State_CirculateSpawn_RunAway>>(() => MethodAccessor<AI_State_CirculateSpawn_RunAway>.Create("Destroy"));
		private static readonly System.Lazy<MethodAccessor<AI_State_CirculateSpawn_RunAway>> _OnDamageTaken2475015728 =
				new System.Lazy<MethodAccessor<AI_State_CirculateSpawn_RunAway>>(() => MethodAccessor<AI_State_CirculateSpawn_RunAway>.Create("OnDamageTaken", typeof(float), typeof(UnityEngine.Vector3), typeof(UnityEngine.Vector3), typeof(EntityType)));

		public static void Start(this AI_State_CirculateSpawn_RunAway __self) => _Start757602046.Value.Invoke(__self);
		public static void Destroy(this AI_State_CirculateSpawn_RunAway __self) => _Destroy757602046.Value.Invoke(__self);
		public static void OnDamageTaken(this AI_State_CirculateSpawn_RunAway __self, float damage, UnityEngine.Vector3 hitPoint, UnityEngine.Vector3 hitNormal, EntityType damageType) => _OnDamageTaken2475015728.Value.Invoke(__self, damage, hitPoint, hitNormal, damageType);

	}

	public static class PrivateAccessor_AI_State_CirculateSpawn_Water
	{

		private static readonly System.Lazy<FieldAccessor<AI_State_CirculateSpawn_Water, float>> _minYPoint =
				new System.Lazy<FieldAccessor<AI_State_CirculateSpawn_Water, float>>(() => FieldAccessor<AI_State_CirculateSpawn_Water, float>.Create("minYPoint"));
		private static readonly System.Lazy<FieldAccessor<AI_State_CirculateSpawn_Water, float>> _maxYPoint =
				new System.Lazy<FieldAccessor<AI_State_CirculateSpawn_Water, float>>(() => FieldAccessor<AI_State_CirculateSpawn_Water, float>.Create("maxYPoint"));

		public static float GetMinYPoint(this AI_State_CirculateSpawn_Water __self) => _minYPoint.Value.GetValue(__self);
		public static void SetMinYPoint(this AI_State_CirculateSpawn_Water __self, float value) => _minYPoint.Value.SetValue(__self, value);
		public static float GetMaxYPoint(this AI_State_CirculateSpawn_Water __self) => _maxYPoint.Value.GetValue(__self);
		public static void SetMaxYPoint(this AI_State_CirculateSpawn_Water __self, float value) => _maxYPoint.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_State_CirculateSpawn_Water>> _PlayerIsWithinRange757602046 =
				new System.Lazy<MethodAccessor<AI_State_CirculateSpawn_Water>>(() => MethodAccessor<AI_State_CirculateSpawn_Water>.Create("PlayerIsWithinRange"));
		private static readonly System.Lazy<MethodAccessor<AI_State_CirculateSpawn_Water>> _GetValidTargetPoint757602046 =
				new System.Lazy<MethodAccessor<AI_State_CirculateSpawn_Water>>(() => MethodAccessor<AI_State_CirculateSpawn_Water>.Create("GetValidTargetPoint"));

		public static bool PlayerIsWithinRange(this AI_State_CirculateSpawn_Water __self) => (bool)_PlayerIsWithinRange757602046.Value.Invoke(__self);
		public static UnityEngine.Vector3 GetValidTargetPoint(this AI_State_CirculateSpawn_Water __self) => (UnityEngine.Vector3)_GetValidTargetPoint757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AI_State_CirculateTarget
	{

		private static readonly System.Lazy<FieldAccessor<AI_State_CirculateTarget, Network_Player>> _target =
				new System.Lazy<FieldAccessor<AI_State_CirculateTarget, Network_Player>>(() => FieldAccessor<AI_State_CirculateTarget, Network_Player>.Create("target"));
		private static readonly System.Lazy<FieldAccessor<AI_State_CirculateTarget, float>> _angle =
				new System.Lazy<FieldAccessor<AI_State_CirculateTarget, float>>(() => FieldAccessor<AI_State_CirculateTarget, float>.Create("angle"));
		private static readonly System.Lazy<FieldAccessor<AI_State_CirculateTarget, int>> _bootlegDirection =
				new System.Lazy<FieldAccessor<AI_State_CirculateTarget, int>>(() => FieldAccessor<AI_State_CirculateTarget, int>.Create("bootlegDirection"));

		public static Network_Player GetTarget(this AI_State_CirculateTarget __self) => _target.Value.GetValue(__self);
		public static void SetTarget(this AI_State_CirculateTarget __self, Network_Player value) => _target.Value.SetValue(__self, value);
		public static float GetAngle(this AI_State_CirculateTarget __self) => _angle.Value.GetValue(__self);
		public static void SetAngle(this AI_State_CirculateTarget __self, float value) => _angle.Value.SetValue(__self, value);
		public static int GetBootlegDirection(this AI_State_CirculateTarget __self) => _bootlegDirection.Value.GetValue(__self);
		public static void SetBootlegDirection(this AI_State_CirculateTarget __self, int value) => _bootlegDirection.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_State_CirculateTarget>> _IsInBackOfTarget757602046 =
				new System.Lazy<MethodAccessor<AI_State_CirculateTarget>>(() => MethodAccessor<AI_State_CirculateTarget>.Create("IsInBackOfTarget"));

		public static bool IsInBackOfTarget(this AI_State_CirculateTarget __self) => (bool)_IsInBackOfTarget757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AI_State_Dead
	{

		private static readonly System.Lazy<FieldAccessor<AI_State_Dead, bool>> _removeBody =
				new System.Lazy<FieldAccessor<AI_State_Dead, bool>>(() => FieldAccessor<AI_State_Dead, bool>.Create("removeBody"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Dead, float>> _removeBodyTime =
				new System.Lazy<FieldAccessor<AI_State_Dead, float>>(() => FieldAccessor<AI_State_Dead, float>.Create("removeBodyTime"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Dead, AI_State>> _decayState =
				new System.Lazy<FieldAccessor<AI_State_Dead, AI_State>>(() => FieldAccessor<AI_State_Dead, AI_State>.Create("decayState"));

		public static bool GetRemoveBody(this AI_State_Dead __self) => _removeBody.Value.GetValue(__self);
		public static void SetRemoveBody(this AI_State_Dead __self, bool value) => _removeBody.Value.SetValue(__self, value);
		public static float GetRemoveBodyTime(this AI_State_Dead __self) => _removeBodyTime.Value.GetValue(__self);
		public static void SetRemoveBodyTime(this AI_State_Dead __self, float value) => _removeBodyTime.Value.SetValue(__self, value);
		public static AI_State GetDecayState(this AI_State_Dead __self) => _decayState.Value.GetValue(__self);
		public static void SetDecayState(this AI_State_Dead __self, AI_State value) => _decayState.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_State_Dead>> _RemoveBody757602046 =
				new System.Lazy<MethodAccessor<AI_State_Dead>>(() => MethodAccessor<AI_State_Dead>.Create("RemoveBody"));

		public static void RemoveBody(this AI_State_Dead __self) => _RemoveBody757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AI_State_Dead_Ragdoll
	{

		private static readonly System.Lazy<FieldAccessor<AI_State_Dead_Ragdoll, float>> _force =
				new System.Lazy<FieldAccessor<AI_State_Dead_Ragdoll, float>>(() => FieldAccessor<AI_State_Dead_Ragdoll, float>.Create("force"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Dead_Ragdoll, bool>> _createRigidBodyAtTop =
				new System.Lazy<FieldAccessor<AI_State_Dead_Ragdoll, bool>>(() => FieldAccessor<AI_State_Dead_Ragdoll, bool>.Create("createRigidBodyAtTop"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Dead_Ragdoll, RagdollManager>> _ragdollManager =
				new System.Lazy<FieldAccessor<AI_State_Dead_Ragdoll, RagdollManager>>(() => FieldAccessor<AI_State_Dead_Ragdoll, RagdollManager>.Create("ragdollManager"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Dead_Ragdoll, AnimatorController>> _animController =
				new System.Lazy<FieldAccessor<AI_State_Dead_Ragdoll, AnimatorController>>(() => FieldAccessor<AI_State_Dead_Ragdoll, AnimatorController>.Create("animController"));

		public static float GetForce(this AI_State_Dead_Ragdoll __self) => _force.Value.GetValue(__self);
		public static void SetForce(this AI_State_Dead_Ragdoll __self, float value) => _force.Value.SetValue(__self, value);
		public static bool GetCreateRigidBodyAtTop(this AI_State_Dead_Ragdoll __self) => _createRigidBodyAtTop.Value.GetValue(__self);
		public static void SetCreateRigidBodyAtTop(this AI_State_Dead_Ragdoll __self, bool value) => _createRigidBodyAtTop.Value.SetValue(__self, value);
		public static RagdollManager GetRagdollManager(this AI_State_Dead_Ragdoll __self) => _ragdollManager.Value.GetValue(__self);
		public static void SetRagdollManager(this AI_State_Dead_Ragdoll __self, RagdollManager value) => _ragdollManager.Value.SetValue(__self, value);
		public static AnimatorController GetAnimController(this AI_State_Dead_Ragdoll __self) => _animController.Value.GetValue(__self);
		public static void SetAnimController(this AI_State_Dead_Ragdoll __self, AnimatorController value) => _animController.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_State_Dead_Ragdoll>> _Awake757602046 =
				new System.Lazy<MethodAccessor<AI_State_Dead_Ragdoll>>(() => MethodAccessor<AI_State_Dead_Ragdoll>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<AI_State_Dead_Ragdoll>> _OnApplyRagdollForce3429126434 =
				new System.Lazy<MethodAccessor<AI_State_Dead_Ragdoll>>(() => MethodAccessor<AI_State_Dead_Ragdoll>.Create("OnApplyRagdollForce", typeof(UnityEngine.Vector3)));
		private static readonly System.Lazy<MethodAccessor<AI_State_Dead_Ragdoll>> _HandleRagdollFloating757602046 =
				new System.Lazy<MethodAccessor<AI_State_Dead_Ragdoll>>(() => MethodAccessor<AI_State_Dead_Ragdoll>.Create("HandleRagdollFloating"));

		public static void Awake(this AI_State_Dead_Ragdoll __self) => _Awake757602046.Value.Invoke(__self);
		public static void OnApplyRagdollForce(this AI_State_Dead_Ragdoll __self, UnityEngine.Vector3 force) => _OnApplyRagdollForce3429126434.Value.Invoke(__self, force);
		public static void HandleRagdollFloating(this AI_State_Dead_Ragdoll __self) => _HandleRagdollFloating757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AI_State_Indexer
	{

		private static readonly System.Lazy<FieldAccessor<AI_State_Indexer, AI_State[]>> _nextStates =
				new System.Lazy<FieldAccessor<AI_State_Indexer, AI_State[]>>(() => FieldAccessor<AI_State_Indexer, AI_State[]>.Create("nextStates"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Indexer, bool>> _randomizeFirstIndex =
				new System.Lazy<FieldAccessor<AI_State_Indexer, bool>>(() => FieldAccessor<AI_State_Indexer, bool>.Create("randomizeFirstIndex"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Indexer, int>> _currentIndex =
				new System.Lazy<FieldAccessor<AI_State_Indexer, int>>(() => FieldAccessor<AI_State_Indexer, int>.Create("currentIndex"));

		public static AI_State[] GetNextStates(this AI_State_Indexer __self) => _nextStates.Value.GetValue(__self);
		public static void SetNextStates(this AI_State_Indexer __self, AI_State[] value) => _nextStates.Value.SetValue(__self, value);
		public static bool GetRandomizeFirstIndex(this AI_State_Indexer __self) => _randomizeFirstIndex.Value.GetValue(__self);
		public static void SetRandomizeFirstIndex(this AI_State_Indexer __self, bool value) => _randomizeFirstIndex.Value.SetValue(__self, value);
		public static int GetCurrentIndex(this AI_State_Indexer __self) => _currentIndex.Value.GetValue(__self);
		public static void SetCurrentIndex(this AI_State_Indexer __self, int value) => _currentIndex.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_State_Indexer>> _Start757602046 =
				new System.Lazy<MethodAccessor<AI_State_Indexer>>(() => MethodAccessor<AI_State_Indexer>.Create("Start"));

		public static void Start(this AI_State_Indexer __self) => _Start757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AI_State_Jump
	{

		private static readonly System.Lazy<FieldAccessor<AI_State_Jump, MovementType>> _movementType =
				new System.Lazy<FieldAccessor<AI_State_Jump, MovementType>>(() => FieldAccessor<AI_State_Jump, MovementType>.Create("movementType"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Jump, UnityEngine.AnimationCurve>> _heightCurve =
				new System.Lazy<FieldAccessor<AI_State_Jump, UnityEngine.AnimationCurve>>(() => FieldAccessor<AI_State_Jump, UnityEngine.AnimationCurve>.Create("heightCurve"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Jump, UnityEngine.AnimationCurve>> _timeCurve =
				new System.Lazy<FieldAccessor<AI_State_Jump, UnityEngine.AnimationCurve>>(() => FieldAccessor<AI_State_Jump, UnityEngine.AnimationCurve>.Create("timeCurve"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Jump, float>> _length =
				new System.Lazy<FieldAccessor<AI_State_Jump, float>>(() => FieldAccessor<AI_State_Jump, float>.Create("length"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Jump, float>> _jumpTime =
				new System.Lazy<FieldAccessor<AI_State_Jump, float>>(() => FieldAccessor<AI_State_Jump, float>.Create("jumpTime"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Jump, AI_State>> _nextState =
				new System.Lazy<FieldAccessor<AI_State_Jump, AI_State>>(() => FieldAccessor<AI_State_Jump, AI_State>.Create("nextState"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Jump, UnityEngine.Vector3>> _startPosition =
				new System.Lazy<FieldAccessor<AI_State_Jump, UnityEngine.Vector3>>(() => FieldAccessor<AI_State_Jump, UnityEngine.Vector3>.Create("startPosition"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Jump, UnityEngine.Vector3>> _endPosition =
				new System.Lazy<FieldAccessor<AI_State_Jump, UnityEngine.Vector3>>(() => FieldAccessor<AI_State_Jump, UnityEngine.Vector3>.Create("endPosition"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Jump, float>> _timer =
				new System.Lazy<FieldAccessor<AI_State_Jump, float>>(() => FieldAccessor<AI_State_Jump, float>.Create("timer"));

		public static MovementType GetMovementType(this AI_State_Jump __self) => _movementType.Value.GetValue(__self);
		public static void SetMovementType(this AI_State_Jump __self, MovementType value) => _movementType.Value.SetValue(__self, value);
		public static UnityEngine.AnimationCurve GetHeightCurve(this AI_State_Jump __self) => _heightCurve.Value.GetValue(__self);
		public static void SetHeightCurve(this AI_State_Jump __self, UnityEngine.AnimationCurve value) => _heightCurve.Value.SetValue(__self, value);
		public static UnityEngine.AnimationCurve GetTimeCurve(this AI_State_Jump __self) => _timeCurve.Value.GetValue(__self);
		public static void SetTimeCurve(this AI_State_Jump __self, UnityEngine.AnimationCurve value) => _timeCurve.Value.SetValue(__self, value);
		public static float GetLength(this AI_State_Jump __self) => _length.Value.GetValue(__self);
		public static void SetLength(this AI_State_Jump __self, float value) => _length.Value.SetValue(__self, value);
		public static float GetJumpTime(this AI_State_Jump __self) => _jumpTime.Value.GetValue(__self);
		public static void SetJumpTime(this AI_State_Jump __self, float value) => _jumpTime.Value.SetValue(__self, value);
		public static AI_State GetNextState(this AI_State_Jump __self) => _nextState.Value.GetValue(__self);
		public static void SetNextState(this AI_State_Jump __self, AI_State value) => _nextState.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetStartPosition(this AI_State_Jump __self) => _startPosition.Value.GetValue(__self);
		public static void SetStartPosition(this AI_State_Jump __self, UnityEngine.Vector3 value) => _startPosition.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetEndPosition(this AI_State_Jump __self) => _endPosition.Value.GetValue(__self);
		public static void SetEndPosition(this AI_State_Jump __self, UnityEngine.Vector3 value) => _endPosition.Value.SetValue(__self, value);
		public static float GetTimer(this AI_State_Jump __self) => _timer.Value.GetValue(__self);
		public static void SetTimer(this AI_State_Jump __self, float value) => _timer.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_State_Jump>> _OnDrawGizmosSelected757602046 =
				new System.Lazy<MethodAccessor<AI_State_Jump>>(() => MethodAccessor<AI_State_Jump>.Create("OnDrawGizmosSelected"));

		public static void OnDrawGizmosSelected(this AI_State_Jump __self) => _OnDrawGizmosSelected757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AI_State_Lift
	{

		private static readonly System.Lazy<FieldAccessor<AI_State_Lift, AI_State>> _nextState =
				new System.Lazy<FieldAccessor<AI_State_Lift, AI_State>>(() => FieldAccessor<AI_State_Lift, AI_State>.Create("nextState"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Lift, AI_Movement>> _movement =
				new System.Lazy<FieldAccessor<AI_State_Lift, AI_Movement>>(() => FieldAccessor<AI_State_Lift, AI_Movement>.Create("movement"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Lift, float>> _liftHeight =
				new System.Lazy<FieldAccessor<AI_State_Lift, float>>(() => FieldAccessor<AI_State_Lift, float>.Create("liftHeight"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Lift, float>> _liftSpeed =
				new System.Lazy<FieldAccessor<AI_State_Lift, float>>(() => FieldAccessor<AI_State_Lift, float>.Create("liftSpeed"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Lift, UnityEngine.Vector3>> _targetPoint =
				new System.Lazy<FieldAccessor<AI_State_Lift, UnityEngine.Vector3>>(() => FieldAccessor<AI_State_Lift, UnityEngine.Vector3>.Create("targetPoint"));

		public static AI_State GetNextState(this AI_State_Lift __self) => _nextState.Value.GetValue(__self);
		public static void SetNextState(this AI_State_Lift __self, AI_State value) => _nextState.Value.SetValue(__self, value);
		public static AI_Movement GetMovement(this AI_State_Lift __self) => _movement.Value.GetValue(__self);
		public static void SetMovement(this AI_State_Lift __self, AI_Movement value) => _movement.Value.SetValue(__self, value);
		public static float GetLiftHeight(this AI_State_Lift __self) => _liftHeight.Value.GetValue(__self);
		public static void SetLiftHeight(this AI_State_Lift __self, float value) => _liftHeight.Value.SetValue(__self, value);
		public static float GetLiftSpeed(this AI_State_Lift __self) => _liftSpeed.Value.GetValue(__self);
		public static void SetLiftSpeed(this AI_State_Lift __self, float value) => _liftSpeed.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetTargetPoint(this AI_State_Lift __self) => _targetPoint.Value.GetValue(__self);
		public static void SetTargetPoint(this AI_State_Lift __self, UnityEngine.Vector3 value) => _targetPoint.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_AI_State_MeleeAttack
	{

		private static readonly System.Lazy<FieldAccessor<AI_State_MeleeAttack, AI_State>> _noTargetState =
				new System.Lazy<FieldAccessor<AI_State_MeleeAttack, AI_State>>(() => FieldAccessor<AI_State_MeleeAttack, AI_State>.Create("noTargetState"));
		private static readonly System.Lazy<FieldAccessor<AI_State_MeleeAttack, AI_State>> _outOfRangeState =
				new System.Lazy<FieldAccessor<AI_State_MeleeAttack, AI_State>>(() => FieldAccessor<AI_State_MeleeAttack, AI_State>.Create("outOfRangeState"));
		private static readonly System.Lazy<FieldAccessor<AI_State_MeleeAttack, AI_State>> _noVisionState =
				new System.Lazy<FieldAccessor<AI_State_MeleeAttack, AI_State>>(() => FieldAccessor<AI_State_MeleeAttack, AI_State>.Create("noVisionState"));
		private static readonly System.Lazy<FieldAccessor<AI_State_MeleeAttack, AI_State>> _attackDoneAlternateState =
				new System.Lazy<FieldAccessor<AI_State_MeleeAttack, AI_State>>(() => FieldAccessor<AI_State_MeleeAttack, AI_State>.Create("attackDoneAlternateState"));
		private static readonly System.Lazy<FieldAccessor<AI_State_MeleeAttack, AI_State>> _attackMissedState =
				new System.Lazy<FieldAccessor<AI_State_MeleeAttack, AI_State>>(() => FieldAccessor<AI_State_MeleeAttack, AI_State>.Create("attackMissedState"));
		private static readonly System.Lazy<FieldAccessor<AI_State_MeleeAttack, float>> _attackCooldown =
				new System.Lazy<FieldAccessor<AI_State_MeleeAttack, float>>(() => FieldAccessor<AI_State_MeleeAttack, float>.Create("attackCooldown"));
		private static readonly System.Lazy<FieldAccessor<AI_State_MeleeAttack, float>> _minAttackCooldownOffset =
				new System.Lazy<FieldAccessor<AI_State_MeleeAttack, float>>(() => FieldAccessor<AI_State_MeleeAttack, float>.Create("minAttackCooldownOffset"));
		private static readonly System.Lazy<FieldAccessor<AI_State_MeleeAttack, float>> _maxAttackCooldownOffset =
				new System.Lazy<FieldAccessor<AI_State_MeleeAttack, float>>(() => FieldAccessor<AI_State_MeleeAttack, float>.Create("maxAttackCooldownOffset"));
		private static readonly System.Lazy<FieldAccessor<AI_State_MeleeAttack, float>> _startAttackRange =
				new System.Lazy<FieldAccessor<AI_State_MeleeAttack, float>>(() => FieldAccessor<AI_State_MeleeAttack, float>.Create("startAttackRange"));
		private static readonly System.Lazy<FieldAccessor<AI_State_MeleeAttack, float>> _effectiveAttackRange =
				new System.Lazy<FieldAccessor<AI_State_MeleeAttack, float>>(() => FieldAccessor<AI_State_MeleeAttack, float>.Create("effectiveAttackRange"));
		private static readonly System.Lazy<FieldAccessor<AI_State_MeleeAttack, float>> _abortAttackRange =
				new System.Lazy<FieldAccessor<AI_State_MeleeAttack, float>>(() => FieldAccessor<AI_State_MeleeAttack, float>.Create("abortAttackRange"));
		private static readonly System.Lazy<FieldAccessor<AI_State_MeleeAttack, float>> _attackDamage =
				new System.Lazy<FieldAccessor<AI_State_MeleeAttack, float>>(() => FieldAccessor<AI_State_MeleeAttack, float>.Create("attackDamage"));
		private static readonly System.Lazy<FieldAccessor<AI_State_MeleeAttack, float>> _attackAngle =
				new System.Lazy<FieldAccessor<AI_State_MeleeAttack, float>>(() => FieldAccessor<AI_State_MeleeAttack, float>.Create("attackAngle"));
		private static readonly System.Lazy<FieldAccessor<AI_State_MeleeAttack, bool>> _chaseWhileAttacking =
				new System.Lazy<FieldAccessor<AI_State_MeleeAttack, bool>>(() => FieldAccessor<AI_State_MeleeAttack, bool>.Create("chaseWhileAttacking"));
		private static readonly System.Lazy<FieldAccessor<AI_State_MeleeAttack, float>> _chaseMovementSpeed =
				new System.Lazy<FieldAccessor<AI_State_MeleeAttack, float>>(() => FieldAccessor<AI_State_MeleeAttack, float>.Create("chaseMovementSpeed"));
		private static readonly System.Lazy<FieldAccessor<AI_State_MeleeAttack, float>> _chaseDistance =
				new System.Lazy<FieldAccessor<AI_State_MeleeAttack, float>>(() => FieldAccessor<AI_State_MeleeAttack, float>.Create("chaseDistance"));
		private static readonly System.Lazy<FieldAccessor<AI_State_MeleeAttack, MovementType>> _chaseAttackMovementType =
				new System.Lazy<FieldAccessor<AI_State_MeleeAttack, MovementType>>(() => FieldAccessor<AI_State_MeleeAttack, MovementType>.Create("chaseAttackMovementType"));
		private static readonly System.Lazy<FieldAccessor<AI_State_MeleeAttack, bool>> _rotateTowardsTarget =
				new System.Lazy<FieldAccessor<AI_State_MeleeAttack, bool>>(() => FieldAccessor<AI_State_MeleeAttack, bool>.Create("rotateTowardsTarget"));
		private static readonly System.Lazy<FieldAccessor<AI_State_MeleeAttack, bool>> _lerpRotateSpeed =
				new System.Lazy<FieldAccessor<AI_State_MeleeAttack, bool>>(() => FieldAccessor<AI_State_MeleeAttack, bool>.Create("lerpRotateSpeed"));
		private static readonly System.Lazy<FieldAccessor<AI_State_MeleeAttack, bool>> _rotateWhileAnimating =
				new System.Lazy<FieldAccessor<AI_State_MeleeAttack, bool>>(() => FieldAccessor<AI_State_MeleeAttack, bool>.Create("rotateWhileAnimating"));
		private static readonly System.Lazy<FieldAccessor<AI_State_MeleeAttack, bool>> _ignoreZRotation =
				new System.Lazy<FieldAccessor<AI_State_MeleeAttack, bool>>(() => FieldAccessor<AI_State_MeleeAttack, bool>.Create("ignoreZRotation"));
		private static readonly System.Lazy<FieldAccessor<AI_State_MeleeAttack, float>> _rotationSpeed =
				new System.Lazy<FieldAccessor<AI_State_MeleeAttack, float>>(() => FieldAccessor<AI_State_MeleeAttack, float>.Create("rotationSpeed"));
		private static readonly System.Lazy<FieldAccessor<AI_State_MeleeAttack, float>> _rotationSpeedWhenAttacking =
				new System.Lazy<FieldAccessor<AI_State_MeleeAttack, float>>(() => FieldAccessor<AI_State_MeleeAttack, float>.Create("rotationSpeedWhenAttacking"));
		private static readonly System.Lazy<FieldAccessor<AI_State_MeleeAttack, float>> _rotationLerpSpeed =
				new System.Lazy<FieldAccessor<AI_State_MeleeAttack, float>>(() => FieldAccessor<AI_State_MeleeAttack, float>.Create("rotationLerpSpeed"));
		private static readonly System.Lazy<FieldAccessor<AI_State_MeleeAttack, AnimatorController>> _animatorController =
				new System.Lazy<FieldAccessor<AI_State_MeleeAttack, AnimatorController>>(() => FieldAccessor<AI_State_MeleeAttack, AnimatorController>.Create("animatorController"));
		private static readonly System.Lazy<FieldAccessor<AI_State_MeleeAttack, string>> _attackAnimationParameter =
				new System.Lazy<FieldAccessor<AI_State_MeleeAttack, string>>(() => FieldAccessor<AI_State_MeleeAttack, string>.Create("attackAnimationParameter"));
		private static readonly System.Lazy<FieldAccessor<AI_State_MeleeAttack, string>> _endAttackAnimationParameter =
				new System.Lazy<FieldAccessor<AI_State_MeleeAttack, string>>(() => FieldAccessor<AI_State_MeleeAttack, string>.Create("endAttackAnimationParameter"));
		private static readonly System.Lazy<FieldAccessor<AI_State_MeleeAttack, UnityEngine.ParticleSystem>> _attackParticles =
				new System.Lazy<FieldAccessor<AI_State_MeleeAttack, UnityEngine.ParticleSystem>>(() => FieldAccessor<AI_State_MeleeAttack, UnityEngine.ParticleSystem>.Create("attackParticles"));
		private static readonly System.Lazy<FieldAccessor<AI_State_MeleeAttack, string>> _eventRef_attack =
				new System.Lazy<FieldAccessor<AI_State_MeleeAttack, string>>(() => FieldAccessor<AI_State_MeleeAttack, string>.Create("eventRef_attack"));
		private static readonly System.Lazy<FieldAccessor<AI_State_MeleeAttack, string>> _eventRef_successfullAttack =
				new System.Lazy<FieldAccessor<AI_State_MeleeAttack, string>>(() => FieldAccessor<AI_State_MeleeAttack, string>.Create("eventRef_successfullAttack"));
		private static readonly System.Lazy<FieldAccessor<AI_State_MeleeAttack, float>> _successfullAttackSoundCooldown =
				new System.Lazy<FieldAccessor<AI_State_MeleeAttack, float>>(() => FieldAccessor<AI_State_MeleeAttack, float>.Create("successfullAttackSoundCooldown"));
		private static readonly System.Lazy<FieldAccessor<AI_State_MeleeAttack, bool>> _ignoreObstructionDuringAttack =
				new System.Lazy<FieldAccessor<AI_State_MeleeAttack, bool>>(() => FieldAccessor<AI_State_MeleeAttack, bool>.Create("ignoreObstructionDuringAttack"));
		private static readonly System.Lazy<FieldAccessor<AI_State_MeleeAttack, float>> _successfullAttackTimeStamp =
				new System.Lazy<FieldAccessor<AI_State_MeleeAttack, float>>(() => FieldAccessor<AI_State_MeleeAttack, float>.Create("successfullAttackTimeStamp"));
		private static readonly System.Lazy<FieldAccessor<AI_State_MeleeAttack, bool>> _doingAttackAnimation =
				new System.Lazy<FieldAccessor<AI_State_MeleeAttack, bool>>(() => FieldAccessor<AI_State_MeleeAttack, bool>.Create("doingAttackAnimation"));
		private static readonly System.Lazy<FieldAccessor<AI_State_MeleeAttack, bool>> _doingAnimation =
				new System.Lazy<FieldAccessor<AI_State_MeleeAttack, bool>>(() => FieldAccessor<AI_State_MeleeAttack, bool>.Create("doingAnimation"));
		private static readonly System.Lazy<FieldAccessor<AI_State_MeleeAttack, bool>> _hasAttackAnimationParameter =
				new System.Lazy<FieldAccessor<AI_State_MeleeAttack, bool>>(() => FieldAccessor<AI_State_MeleeAttack, bool>.Create("hasAttackAnimationParameter"));
		private static readonly System.Lazy<FieldAccessor<AI_State_MeleeAttack, bool>> _hasEndAttackAnimationParameter =
				new System.Lazy<FieldAccessor<AI_State_MeleeAttack, bool>>(() => FieldAccessor<AI_State_MeleeAttack, bool>.Create("hasEndAttackAnimationParameter"));
		private static readonly System.Lazy<FieldAccessor<AI_State_MeleeAttack, bool>> _canAttack =
				new System.Lazy<FieldAccessor<AI_State_MeleeAttack, bool>>(() => FieldAccessor<AI_State_MeleeAttack, bool>.Create("canAttack"));
		private static readonly System.Lazy<FieldAccessor<AI_State_MeleeAttack, bool>> _hasAttacked =
				new System.Lazy<FieldAccessor<AI_State_MeleeAttack, bool>>(() => FieldAccessor<AI_State_MeleeAttack, bool>.Create("hasAttacked"));
		private static readonly System.Lazy<FieldAccessor<AI_State_MeleeAttack, UnityEngine.Vector3>> _startChasePosition =
				new System.Lazy<FieldAccessor<AI_State_MeleeAttack, UnityEngine.Vector3>>(() => FieldAccessor<AI_State_MeleeAttack, UnityEngine.Vector3>.Create("startChasePosition"));
		private static readonly System.Lazy<FieldAccessor<AI_State_MeleeAttack, Network_Host>> _networkHost =
				new System.Lazy<FieldAccessor<AI_State_MeleeAttack, Network_Host>>(() => FieldAccessor<AI_State_MeleeAttack, Network_Host>.Create("networkHost"));
		private static readonly System.Lazy<FieldAccessor<AI_State_MeleeAttack, Network_Player>> _targetPlayer =
				new System.Lazy<FieldAccessor<AI_State_MeleeAttack, Network_Player>>(() => FieldAccessor<AI_State_MeleeAttack, Network_Player>.Create("targetPlayer"));
		private static readonly System.Lazy<FieldAccessor<AI_State_MeleeAttack, float>> _currentRotationSpeed =
				new System.Lazy<FieldAccessor<AI_State_MeleeAttack, float>>(() => FieldAccessor<AI_State_MeleeAttack, float>.Create("currentRotationSpeed"));
		private static readonly System.Lazy<FieldAccessor<AI_State_MeleeAttack, EntityVariables>> _gamemodeVariables =
				new System.Lazy<FieldAccessor<AI_State_MeleeAttack, EntityVariables>>(() => FieldAccessor<AI_State_MeleeAttack, EntityVariables>.Create("gamemodeVariables"));
		private static readonly System.Lazy<FieldAccessor<AI_State_MeleeAttack, SoundManager>> _soundManager =
				new System.Lazy<FieldAccessor<AI_State_MeleeAttack, SoundManager>>(() => FieldAccessor<AI_State_MeleeAttack, SoundManager>.Create("soundManager"));

		public static AI_State GetNoTargetState(this AI_State_MeleeAttack __self) => _noTargetState.Value.GetValue(__self);
		public static void SetNoTargetState(this AI_State_MeleeAttack __self, AI_State value) => _noTargetState.Value.SetValue(__self, value);
		public static AI_State GetOutOfRangeState(this AI_State_MeleeAttack __self) => _outOfRangeState.Value.GetValue(__self);
		public static void SetOutOfRangeState(this AI_State_MeleeAttack __self, AI_State value) => _outOfRangeState.Value.SetValue(__self, value);
		public static AI_State GetNoVisionState(this AI_State_MeleeAttack __self) => _noVisionState.Value.GetValue(__self);
		public static void SetNoVisionState(this AI_State_MeleeAttack __self, AI_State value) => _noVisionState.Value.SetValue(__self, value);
		public static AI_State GetAttackDoneAlternateState(this AI_State_MeleeAttack __self) => _attackDoneAlternateState.Value.GetValue(__self);
		public static void SetAttackDoneAlternateState(this AI_State_MeleeAttack __self, AI_State value) => _attackDoneAlternateState.Value.SetValue(__self, value);
		public static AI_State GetAttackMissedState(this AI_State_MeleeAttack __self) => _attackMissedState.Value.GetValue(__self);
		public static void SetAttackMissedState(this AI_State_MeleeAttack __self, AI_State value) => _attackMissedState.Value.SetValue(__self, value);
		public static float GetAttackCooldown(this AI_State_MeleeAttack __self) => _attackCooldown.Value.GetValue(__self);
		public static void SetAttackCooldown(this AI_State_MeleeAttack __self, float value) => _attackCooldown.Value.SetValue(__self, value);
		public static float GetMinAttackCooldownOffset(this AI_State_MeleeAttack __self) => _minAttackCooldownOffset.Value.GetValue(__self);
		public static void SetMinAttackCooldownOffset(this AI_State_MeleeAttack __self, float value) => _minAttackCooldownOffset.Value.SetValue(__self, value);
		public static float GetMaxAttackCooldownOffset(this AI_State_MeleeAttack __self) => _maxAttackCooldownOffset.Value.GetValue(__self);
		public static void SetMaxAttackCooldownOffset(this AI_State_MeleeAttack __self, float value) => _maxAttackCooldownOffset.Value.SetValue(__self, value);
		public static float GetStartAttackRange(this AI_State_MeleeAttack __self) => _startAttackRange.Value.GetValue(__self);
		public static void SetStartAttackRange(this AI_State_MeleeAttack __self, float value) => _startAttackRange.Value.SetValue(__self, value);
		public static float GetEffectiveAttackRange(this AI_State_MeleeAttack __self) => _effectiveAttackRange.Value.GetValue(__self);
		public static void SetEffectiveAttackRange(this AI_State_MeleeAttack __self, float value) => _effectiveAttackRange.Value.SetValue(__self, value);
		public static float GetAbortAttackRange(this AI_State_MeleeAttack __self) => _abortAttackRange.Value.GetValue(__self);
		public static void SetAbortAttackRange(this AI_State_MeleeAttack __self, float value) => _abortAttackRange.Value.SetValue(__self, value);
		public static float GetAttackDamage(this AI_State_MeleeAttack __self) => _attackDamage.Value.GetValue(__self);
		public static void SetAttackDamage(this AI_State_MeleeAttack __self, float value) => _attackDamage.Value.SetValue(__self, value);
		public static float GetAttackAngle(this AI_State_MeleeAttack __self) => _attackAngle.Value.GetValue(__self);
		public static void SetAttackAngle(this AI_State_MeleeAttack __self, float value) => _attackAngle.Value.SetValue(__self, value);
		public static bool GetChaseWhileAttacking(this AI_State_MeleeAttack __self) => _chaseWhileAttacking.Value.GetValue(__self);
		public static void SetChaseWhileAttacking(this AI_State_MeleeAttack __self, bool value) => _chaseWhileAttacking.Value.SetValue(__self, value);
		public static float GetChaseMovementSpeed(this AI_State_MeleeAttack __self) => _chaseMovementSpeed.Value.GetValue(__self);
		public static void SetChaseMovementSpeed(this AI_State_MeleeAttack __self, float value) => _chaseMovementSpeed.Value.SetValue(__self, value);
		public static float GetChaseDistance(this AI_State_MeleeAttack __self) => _chaseDistance.Value.GetValue(__self);
		public static void SetChaseDistance(this AI_State_MeleeAttack __self, float value) => _chaseDistance.Value.SetValue(__self, value);
		public static MovementType GetChaseAttackMovementType(this AI_State_MeleeAttack __self) => _chaseAttackMovementType.Value.GetValue(__self);
		public static void SetChaseAttackMovementType(this AI_State_MeleeAttack __self, MovementType value) => _chaseAttackMovementType.Value.SetValue(__self, value);
		public static bool GetRotateTowardsTarget(this AI_State_MeleeAttack __self) => _rotateTowardsTarget.Value.GetValue(__self);
		public static void SetRotateTowardsTarget(this AI_State_MeleeAttack __self, bool value) => _rotateTowardsTarget.Value.SetValue(__self, value);
		public static bool GetLerpRotateSpeed(this AI_State_MeleeAttack __self) => _lerpRotateSpeed.Value.GetValue(__self);
		public static void SetLerpRotateSpeed(this AI_State_MeleeAttack __self, bool value) => _lerpRotateSpeed.Value.SetValue(__self, value);
		public static bool GetRotateWhileAnimating(this AI_State_MeleeAttack __self) => _rotateWhileAnimating.Value.GetValue(__self);
		public static void SetRotateWhileAnimating(this AI_State_MeleeAttack __self, bool value) => _rotateWhileAnimating.Value.SetValue(__self, value);
		public static bool GetIgnoreZRotation(this AI_State_MeleeAttack __self) => _ignoreZRotation.Value.GetValue(__self);
		public static void SetIgnoreZRotation(this AI_State_MeleeAttack __self, bool value) => _ignoreZRotation.Value.SetValue(__self, value);
		public static float GetRotationSpeed(this AI_State_MeleeAttack __self) => _rotationSpeed.Value.GetValue(__self);
		public static void SetRotationSpeed(this AI_State_MeleeAttack __self, float value) => _rotationSpeed.Value.SetValue(__self, value);
		public static float GetRotationSpeedWhenAttacking(this AI_State_MeleeAttack __self) => _rotationSpeedWhenAttacking.Value.GetValue(__self);
		public static void SetRotationSpeedWhenAttacking(this AI_State_MeleeAttack __self, float value) => _rotationSpeedWhenAttacking.Value.SetValue(__self, value);
		public static float GetRotationLerpSpeed(this AI_State_MeleeAttack __self) => _rotationLerpSpeed.Value.GetValue(__self);
		public static void SetRotationLerpSpeed(this AI_State_MeleeAttack __self, float value) => _rotationLerpSpeed.Value.SetValue(__self, value);
		public static AnimatorController GetAnimatorController(this AI_State_MeleeAttack __self) => _animatorController.Value.GetValue(__self);
		public static void SetAnimatorController(this AI_State_MeleeAttack __self, AnimatorController value) => _animatorController.Value.SetValue(__self, value);
		public static string GetAttackAnimationParameter(this AI_State_MeleeAttack __self) => _attackAnimationParameter.Value.GetValue(__self);
		public static void SetAttackAnimationParameter(this AI_State_MeleeAttack __self, string value) => _attackAnimationParameter.Value.SetValue(__self, value);
		public static string GetEndAttackAnimationParameter(this AI_State_MeleeAttack __self) => _endAttackAnimationParameter.Value.GetValue(__self);
		public static void SetEndAttackAnimationParameter(this AI_State_MeleeAttack __self, string value) => _endAttackAnimationParameter.Value.SetValue(__self, value);
		public static UnityEngine.ParticleSystem GetAttackParticles(this AI_State_MeleeAttack __self) => _attackParticles.Value.GetValue(__self);
		public static void SetAttackParticles(this AI_State_MeleeAttack __self, UnityEngine.ParticleSystem value) => _attackParticles.Value.SetValue(__self, value);
		public static string GetEventRef_attack(this AI_State_MeleeAttack __self) => _eventRef_attack.Value.GetValue(__self);
		public static void SetEventRef_attack(this AI_State_MeleeAttack __self, string value) => _eventRef_attack.Value.SetValue(__self, value);
		public static string GetEventRef_successfullAttack(this AI_State_MeleeAttack __self) => _eventRef_successfullAttack.Value.GetValue(__self);
		public static void SetEventRef_successfullAttack(this AI_State_MeleeAttack __self, string value) => _eventRef_successfullAttack.Value.SetValue(__self, value);
		public static float GetSuccessfullAttackSoundCooldown(this AI_State_MeleeAttack __self) => _successfullAttackSoundCooldown.Value.GetValue(__self);
		public static void SetSuccessfullAttackSoundCooldown(this AI_State_MeleeAttack __self, float value) => _successfullAttackSoundCooldown.Value.SetValue(__self, value);
		public static bool GetIgnoreObstructionDuringAttack(this AI_State_MeleeAttack __self) => _ignoreObstructionDuringAttack.Value.GetValue(__self);
		public static void SetIgnoreObstructionDuringAttack(this AI_State_MeleeAttack __self, bool value) => _ignoreObstructionDuringAttack.Value.SetValue(__self, value);
		public static float GetSuccessfullAttackTimeStamp(this AI_State_MeleeAttack __self) => _successfullAttackTimeStamp.Value.GetValue(__self);
		public static void SetSuccessfullAttackTimeStamp(this AI_State_MeleeAttack __self, float value) => _successfullAttackTimeStamp.Value.SetValue(__self, value);
		public static bool GetDoingAttackAnimation(this AI_State_MeleeAttack __self) => _doingAttackAnimation.Value.GetValue(__self);
		public static void SetDoingAttackAnimation(this AI_State_MeleeAttack __self, bool value) => _doingAttackAnimation.Value.SetValue(__self, value);
		public static bool GetDoingAnimation(this AI_State_MeleeAttack __self) => _doingAnimation.Value.GetValue(__self);
		public static void SetDoingAnimation(this AI_State_MeleeAttack __self, bool value) => _doingAnimation.Value.SetValue(__self, value);
		public static bool GetHasAttackAnimationParameter(this AI_State_MeleeAttack __self) => _hasAttackAnimationParameter.Value.GetValue(__self);
		public static void SetHasAttackAnimationParameter(this AI_State_MeleeAttack __self, bool value) => _hasAttackAnimationParameter.Value.SetValue(__self, value);
		public static bool GetHasEndAttackAnimationParameter(this AI_State_MeleeAttack __self) => _hasEndAttackAnimationParameter.Value.GetValue(__self);
		public static void SetHasEndAttackAnimationParameter(this AI_State_MeleeAttack __self, bool value) => _hasEndAttackAnimationParameter.Value.SetValue(__self, value);
		public static bool GetCanAttack(this AI_State_MeleeAttack __self) => _canAttack.Value.GetValue(__self);
		public static void SetCanAttack(this AI_State_MeleeAttack __self, bool value) => _canAttack.Value.SetValue(__self, value);
		public static bool GetHasAttacked(this AI_State_MeleeAttack __self) => _hasAttacked.Value.GetValue(__self);
		public static void SetHasAttacked(this AI_State_MeleeAttack __self, bool value) => _hasAttacked.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetStartChasePosition(this AI_State_MeleeAttack __self) => _startChasePosition.Value.GetValue(__self);
		public static void SetStartChasePosition(this AI_State_MeleeAttack __self, UnityEngine.Vector3 value) => _startChasePosition.Value.SetValue(__self, value);
		public static Network_Host GetNetworkHost(this AI_State_MeleeAttack __self) => _networkHost.Value.GetValue(__self);
		public static void SetNetworkHost(this AI_State_MeleeAttack __self, Network_Host value) => _networkHost.Value.SetValue(__self, value);
		public static Network_Player GetTargetPlayer(this AI_State_MeleeAttack __self) => _targetPlayer.Value.GetValue(__self);
		public static void SetTargetPlayer(this AI_State_MeleeAttack __self, Network_Player value) => _targetPlayer.Value.SetValue(__self, value);
		public static float GetCurrentRotationSpeed(this AI_State_MeleeAttack __self) => _currentRotationSpeed.Value.GetValue(__self);
		public static void SetCurrentRotationSpeed(this AI_State_MeleeAttack __self, float value) => _currentRotationSpeed.Value.SetValue(__self, value);
		public static EntityVariables GetGamemodeVariables(this AI_State_MeleeAttack __self) => _gamemodeVariables.Value.GetValue(__self);
		public static void SetGamemodeVariables(this AI_State_MeleeAttack __self, EntityVariables value) => _gamemodeVariables.Value.SetValue(__self, value);
		public static SoundManager GetSoundManager(this AI_State_MeleeAttack __self) => _soundManager.Value.GetValue(__self);
		public static void SetSoundManager(this AI_State_MeleeAttack __self, SoundManager value) => _soundManager.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_State_MeleeAttack>> _Start757602046 =
				new System.Lazy<MethodAccessor<AI_State_MeleeAttack>>(() => MethodAccessor<AI_State_MeleeAttack>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<AI_State_MeleeAttack>> _OnAnimationEvent3454057852 =
				new System.Lazy<MethodAccessor<AI_State_MeleeAttack>>(() => MethodAccessor<AI_State_MeleeAttack>.Create("OnAnimationEvent", typeof(string)));
		private static readonly System.Lazy<MethodAccessor<AI_State_MeleeAttack>> _StartAttack3461878659 =
				new System.Lazy<MethodAccessor<AI_State_MeleeAttack>>(() => MethodAccessor<AI_State_MeleeAttack>.Create("StartAttack", typeof(Network_Player)));
		private static readonly System.Lazy<MethodAccessor<AI_State_MeleeAttack>> _Attack3461878659 =
				new System.Lazy<MethodAccessor<AI_State_MeleeAttack>>(() => MethodAccessor<AI_State_MeleeAttack>.Create("Attack", typeof(Network_Player)));
		private static readonly System.Lazy<MethodAccessor<AI_State_MeleeAttack>> _MissedAttackCall757602046 =
				new System.Lazy<MethodAccessor<AI_State_MeleeAttack>>(() => MethodAccessor<AI_State_MeleeAttack>.Create("MissedAttackCall"));
		private static readonly System.Lazy<MethodAccessor<AI_State_MeleeAttack>> _SuccessFullAttackCall3461878659 =
				new System.Lazy<MethodAccessor<AI_State_MeleeAttack>>(() => MethodAccessor<AI_State_MeleeAttack>.Create("SuccessFullAttackCall", typeof(Network_Player)));
		private static readonly System.Lazy<MethodAccessor<AI_State_MeleeAttack>> _ResetAttackCooldown757602046 =
				new System.Lazy<MethodAccessor<AI_State_MeleeAttack>>(() => MethodAccessor<AI_State_MeleeAttack>.Create("ResetAttackCooldown"));
		private static readonly System.Lazy<MethodAccessor<AI_State_MeleeAttack>> _GetTargetRotationSpeed757602046 =
				new System.Lazy<MethodAccessor<AI_State_MeleeAttack>>(() => MethodAccessor<AI_State_MeleeAttack>.Create("GetTargetRotationSpeed"));
		private static readonly System.Lazy<MethodAccessor<AI_State_MeleeAttack>> _SwitchTargetPlayer3461878659 =
				new System.Lazy<MethodAccessor<AI_State_MeleeAttack>>(() => MethodAccessor<AI_State_MeleeAttack>.Create("SwitchTargetPlayer", typeof(Network_Player)));
		private static readonly System.Lazy<MethodAccessor<AI_State_MeleeAttack>> _WithinAttackAngle3461878659 =
				new System.Lazy<MethodAccessor<AI_State_MeleeAttack>>(() => MethodAccessor<AI_State_MeleeAttack>.Create("WithinAttackAngle", typeof(Network_Player)));
		private static readonly System.Lazy<MethodAccessor<AI_State_MeleeAttack>> _GetNewAttackCooldown757602046 =
				new System.Lazy<MethodAccessor<AI_State_MeleeAttack>>(() => MethodAccessor<AI_State_MeleeAttack>.Create("GetNewAttackCooldown"));
		private static readonly System.Lazy<MethodAccessor<AI_State_MeleeAttack>> _HandleChaseAttackMovement1402539434 =
				new System.Lazy<MethodAccessor<AI_State_MeleeAttack>>(() => MethodAccessor<AI_State_MeleeAttack>.Create("HandleChaseAttackMovement", typeof(UnityEngine.Vector3), typeof(MovementType)));
		private static readonly System.Lazy<MethodAccessor<AI_State_MeleeAttack>> _AbortAttack757602046 =
				new System.Lazy<MethodAccessor<AI_State_MeleeAttack>>(() => MethodAccessor<AI_State_MeleeAttack>.Create("AbortAttack"));

		public static void Start(this AI_State_MeleeAttack __self) => _Start757602046.Value.Invoke(__self);
		public static void OnAnimationEvent(this AI_State_MeleeAttack __self, string animationEventName) => _OnAnimationEvent3454057852.Value.Invoke(__self, animationEventName);
		public static void StartAttack(this AI_State_MeleeAttack __self, Network_Player player) => _StartAttack3461878659.Value.Invoke(__self, player);
		public static void Attack(this AI_State_MeleeAttack __self, Network_Player player) => _Attack3461878659.Value.Invoke(__self, player);
		public static void MissedAttackCall(this AI_State_MeleeAttack __self) => _MissedAttackCall757602046.Value.Invoke(__self);
		public static void SuccessFullAttackCall(this AI_State_MeleeAttack __self, Network_Player player) => _SuccessFullAttackCall3461878659.Value.Invoke(__self, player);
		public static void ResetAttackCooldown(this AI_State_MeleeAttack __self) => _ResetAttackCooldown757602046.Value.Invoke(__self);
		public static float GetTargetRotationSpeed(this AI_State_MeleeAttack __self) => (float)_GetTargetRotationSpeed757602046.Value.Invoke(__self);
		public static void SwitchTargetPlayer(this AI_State_MeleeAttack __self, Network_Player player) => _SwitchTargetPlayer3461878659.Value.Invoke(__self, player);
		public static bool WithinAttackAngle(this AI_State_MeleeAttack __self, Network_Player player) => (bool)_WithinAttackAngle3461878659.Value.Invoke(__self, player);
		public static float GetNewAttackCooldown(this AI_State_MeleeAttack __self) => (float)_GetNewAttackCooldown757602046.Value.Invoke(__self);
		public static void HandleChaseAttackMovement(this AI_State_MeleeAttack __self, UnityEngine.Vector3 targetPoint, MovementType chaseAttackMovement) => _HandleChaseAttackMovement1402539434.Value.Invoke(__self, targetPoint, chaseAttackMovement);
		public static void AbortAttack(this AI_State_MeleeAttack __self) => _AbortAttack757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AI_State_MeleeAttackAttach
	{

		private static readonly System.Lazy<FieldAccessor<AI_State_MeleeAttackAttach, AI_NetworkBehaviour>> _networkBehaviour =
				new System.Lazy<FieldAccessor<AI_State_MeleeAttackAttach, AI_NetworkBehaviour>>(() => FieldAccessor<AI_State_MeleeAttackAttach, AI_NetworkBehaviour>.Create("networkBehaviour"));
		private static readonly System.Lazy<FieldAccessor<AI_State_MeleeAttackAttach, Raft_Network>> _network =
				new System.Lazy<FieldAccessor<AI_State_MeleeAttackAttach, Raft_Network>>(() => FieldAccessor<AI_State_MeleeAttackAttach, Raft_Network>.Create("network"));

		public static AI_NetworkBehaviour GetNetworkBehaviour(this AI_State_MeleeAttackAttach __self) => _networkBehaviour.Value.GetValue(__self);
		public static void SetNetworkBehaviour(this AI_State_MeleeAttackAttach __self, AI_NetworkBehaviour value) => _networkBehaviour.Value.SetValue(__self, value);
		public static Raft_Network GetNetwork(this AI_State_MeleeAttackAttach __self) => _network.Value.GetValue(__self);
		public static void SetNetwork(this AI_State_MeleeAttackAttach __self, Raft_Network value) => _network.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_State_MeleeAttackAttach>> _Start757602046 =
				new System.Lazy<MethodAccessor<AI_State_MeleeAttackAttach>>(() => MethodAccessor<AI_State_MeleeAttackAttach>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<AI_State_MeleeAttackAttach>> _StartAttack3461878659 =
				new System.Lazy<MethodAccessor<AI_State_MeleeAttackAttach>>(() => MethodAccessor<AI_State_MeleeAttackAttach>.Create("StartAttack", typeof(Network_Player)));
		private static readonly System.Lazy<MethodAccessor<AI_State_MeleeAttackAttach>> _SuccessFullAttackCall3461878659 =
				new System.Lazy<MethodAccessor<AI_State_MeleeAttackAttach>>(() => MethodAccessor<AI_State_MeleeAttackAttach>.Create("SuccessFullAttackCall", typeof(Network_Player)));
		private static readonly System.Lazy<MethodAccessor<AI_State_MeleeAttackAttach>> _StartCarryingPlayer3461878659 =
				new System.Lazy<MethodAccessor<AI_State_MeleeAttackAttach>>(() => MethodAccessor<AI_State_MeleeAttackAttach>.Create("StartCarryingPlayer", typeof(Network_Player)));

		public static void Start(this AI_State_MeleeAttackAttach __self) => _Start757602046.Value.Invoke(__self);
		public static void StartAttack(this AI_State_MeleeAttackAttach __self, Network_Player player) => _StartAttack3461878659.Value.Invoke(__self, player);
		public static void SuccessFullAttackCall(this AI_State_MeleeAttackAttach __self, Network_Player player) => _SuccessFullAttackCall3461878659.Value.Invoke(__self, player);
		public static void StartCarryingPlayer(this AI_State_MeleeAttackAttach __self, Network_Player player) => _StartCarryingPlayer3461878659.Value.Invoke(__self, player);

	}

	public static class PrivateAccessor_AI_State_MoveDirection
	{

		private static readonly System.Lazy<FieldAccessor<AI_State_MoveDirection, MovementType>> _movementType =
				new System.Lazy<FieldAccessor<AI_State_MoveDirection, MovementType>>(() => FieldAccessor<AI_State_MoveDirection, MovementType>.Create("movementType"));
		private static readonly System.Lazy<FieldAccessor<AI_State_MoveDirection, UnityEngine.Vector3>> _direction =
				new System.Lazy<FieldAccessor<AI_State_MoveDirection, UnityEngine.Vector3>>(() => FieldAccessor<AI_State_MoveDirection, UnityEngine.Vector3>.Create("direction"));
		private static readonly System.Lazy<FieldAccessor<AI_State_MoveDirection, bool>> _localDirection =
				new System.Lazy<FieldAccessor<AI_State_MoveDirection, bool>>(() => FieldAccessor<AI_State_MoveDirection, bool>.Create("localDirection"));
		private static readonly System.Lazy<FieldAccessor<AI_State_MoveDirection, float>> _targetMovementSpeed =
				new System.Lazy<FieldAccessor<AI_State_MoveDirection, float>>(() => FieldAccessor<AI_State_MoveDirection, float>.Create("targetMovementSpeed"));
		private static readonly System.Lazy<FieldAccessor<AI_State_MoveDirection, AI_State>> _nextState =
				new System.Lazy<FieldAccessor<AI_State_MoveDirection, AI_State>>(() => FieldAccessor<AI_State_MoveDirection, AI_State>.Create("nextState"));
		private static readonly System.Lazy<FieldAccessor<AI_State_MoveDirection, float>> _moveTime =
				new System.Lazy<FieldAccessor<AI_State_MoveDirection, float>>(() => FieldAccessor<AI_State_MoveDirection, float>.Create("moveTime"));
		private static readonly System.Lazy<FieldAccessor<AI_State_MoveDirection, float>> _timer =
				new System.Lazy<FieldAccessor<AI_State_MoveDirection, float>>(() => FieldAccessor<AI_State_MoveDirection, float>.Create("timer"));
		private static readonly System.Lazy<FieldAccessor<AI_State_MoveDirection, UnityEngine.Vector3>> _moveDirection =
				new System.Lazy<FieldAccessor<AI_State_MoveDirection, UnityEngine.Vector3>>(() => FieldAccessor<AI_State_MoveDirection, UnityEngine.Vector3>.Create("moveDirection"));

		public static MovementType GetMovementType(this AI_State_MoveDirection __self) => _movementType.Value.GetValue(__self);
		public static void SetMovementType(this AI_State_MoveDirection __self, MovementType value) => _movementType.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetDirection(this AI_State_MoveDirection __self) => _direction.Value.GetValue(__self);
		public static void SetDirection(this AI_State_MoveDirection __self, UnityEngine.Vector3 value) => _direction.Value.SetValue(__self, value);
		public static bool GetLocalDirection(this AI_State_MoveDirection __self) => _localDirection.Value.GetValue(__self);
		public static void SetLocalDirection(this AI_State_MoveDirection __self, bool value) => _localDirection.Value.SetValue(__self, value);
		public static float GetTargetMovementSpeed(this AI_State_MoveDirection __self) => _targetMovementSpeed.Value.GetValue(__self);
		public static void SetTargetMovementSpeed(this AI_State_MoveDirection __self, float value) => _targetMovementSpeed.Value.SetValue(__self, value);
		public static AI_State GetNextState(this AI_State_MoveDirection __self) => _nextState.Value.GetValue(__self);
		public static void SetNextState(this AI_State_MoveDirection __self, AI_State value) => _nextState.Value.SetValue(__self, value);
		public static float GetMoveTime(this AI_State_MoveDirection __self) => _moveTime.Value.GetValue(__self);
		public static void SetMoveTime(this AI_State_MoveDirection __self, float value) => _moveTime.Value.SetValue(__self, value);
		public static float GetTimer(this AI_State_MoveDirection __self) => _timer.Value.GetValue(__self);
		public static void SetTimer(this AI_State_MoveDirection __self, float value) => _timer.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetMoveDirection(this AI_State_MoveDirection __self) => _moveDirection.Value.GetValue(__self);
		public static void SetMoveDirection(this AI_State_MoveDirection __self, UnityEngine.Vector3 value) => _moveDirection.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_State_MoveDirection>> _OnDrawGizmosSelected757602046 =
				new System.Lazy<MethodAccessor<AI_State_MoveDirection>>(() => MethodAccessor<AI_State_MoveDirection>.Create("OnDrawGizmosSelected"));
		private static readonly System.Lazy<MethodAccessor<AI_State_MoveDirection>> _MoveInDirection757602046 =
				new System.Lazy<MethodAccessor<AI_State_MoveDirection>>(() => MethodAccessor<AI_State_MoveDirection>.Create("MoveInDirection"));

		public static void OnDrawGizmosSelected(this AI_State_MoveDirection __self) => _OnDrawGizmosSelected757602046.Value.Invoke(__self);
		public static void MoveInDirection(this AI_State_MoveDirection __self) => _MoveInDirection757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AI_State_MoveToInterest
	{

		private static readonly System.Lazy<FieldAccessor<AI_State_MoveToInterest, InterestPoint>> _interest =
				new System.Lazy<FieldAccessor<AI_State_MoveToInterest, InterestPoint>>(() => FieldAccessor<AI_State_MoveToInterest, InterestPoint>.Create("interest"));
		private static readonly System.Lazy<FieldAccessor<AI_State_MoveToInterest, bool>> _hasValidPoint =
				new System.Lazy<FieldAccessor<AI_State_MoveToInterest, bool>>(() => FieldAccessor<AI_State_MoveToInterest, bool>.Create("hasValidPoint"));

		public static InterestPoint GetInterest(this AI_State_MoveToInterest __self) => _interest.Value.GetValue(__self);
		public static void SetInterest(this AI_State_MoveToInterest __self, InterestPoint value) => _interest.Value.SetValue(__self, value);
		public static bool GetHasValidPoint(this AI_State_MoveToInterest __self) => _hasValidPoint.Value.GetValue(__self);
		public static void SetHasValidPoint(this AI_State_MoveToInterest __self, bool value) => _hasValidPoint.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_State_MoveToInterest>> _ReachedPoint757602046 =
				new System.Lazy<MethodAccessor<AI_State_MoveToInterest>>(() => MethodAccessor<AI_State_MoveToInterest>.Create("ReachedPoint"));

		public static void ReachedPoint(this AI_State_MoveToInterest __self) => _ReachedPoint757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AI_State_MoveToPoint
	{

		private static readonly System.Lazy<FieldAccessor<AI_State_MoveToPoint, AI_State>> _reachPointState =
				new System.Lazy<FieldAccessor<AI_State_MoveToPoint, AI_State>>(() => FieldAccessor<AI_State_MoveToPoint, AI_State>.Create("reachPointState"));
		private static readonly System.Lazy<FieldAccessor<AI_State_MoveToPoint, MovementType>> _movementType =
				new System.Lazy<FieldAccessor<AI_State_MoveToPoint, MovementType>>(() => FieldAccessor<AI_State_MoveToPoint, MovementType>.Create("movementType"));
		private static readonly System.Lazy<FieldAccessor<AI_State_MoveToPoint, float>> _movementSpeed =
				new System.Lazy<FieldAccessor<AI_State_MoveToPoint, float>>(() => FieldAccessor<AI_State_MoveToPoint, float>.Create("movementSpeed"));
		private static readonly System.Lazy<FieldAccessor<AI_State_MoveToPoint, float>> _reachPointDistance =
				new System.Lazy<FieldAccessor<AI_State_MoveToPoint, float>>(() => FieldAccessor<AI_State_MoveToPoint, float>.Create("reachPointDistance"));

		public static AI_State GetReachPointState(this AI_State_MoveToPoint __self) => _reachPointState.Value.GetValue(__self);
		public static void SetReachPointState(this AI_State_MoveToPoint __self, AI_State value) => _reachPointState.Value.SetValue(__self, value);
		public static MovementType GetMovementType(this AI_State_MoveToPoint __self) => _movementType.Value.GetValue(__self);
		public static void SetMovementType(this AI_State_MoveToPoint __self, MovementType value) => _movementType.Value.SetValue(__self, value);
		public static float GetMovementSpeed(this AI_State_MoveToPoint __self) => _movementSpeed.Value.GetValue(__self);
		public static void SetMovementSpeed(this AI_State_MoveToPoint __self, float value) => _movementSpeed.Value.SetValue(__self, value);
		public static float GetReachPointDistance(this AI_State_MoveToPoint __self) => _reachPointDistance.Value.GetValue(__self);
		public static void SetReachPointDistance(this AI_State_MoveToPoint __self, float value) => _reachPointDistance.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_State_MoveToPoint>> _OnDrawGizmosSelected757602046 =
				new System.Lazy<MethodAccessor<AI_State_MoveToPoint>>(() => MethodAccessor<AI_State_MoveToPoint>.Create("OnDrawGizmosSelected"));
		private static readonly System.Lazy<MethodAccessor<AI_State_MoveToPoint>> _MoveToPoint3429126434 =
				new System.Lazy<MethodAccessor<AI_State_MoveToPoint>>(() => MethodAccessor<AI_State_MoveToPoint>.Create("MoveToPoint", typeof(UnityEngine.Vector3)));
		private static readonly System.Lazy<MethodAccessor<AI_State_MoveToPoint>> _ReachedPoint757602046 =
				new System.Lazy<MethodAccessor<AI_State_MoveToPoint>>(() => MethodAccessor<AI_State_MoveToPoint>.Create("ReachedPoint"));

		public static void OnDrawGizmosSelected(this AI_State_MoveToPoint __self) => _OnDrawGizmosSelected757602046.Value.Invoke(__self);
		public static bool MoveToPoint(this AI_State_MoveToPoint __self, UnityEngine.Vector3 targetPoint) => (bool)_MoveToPoint3429126434.Value.Invoke(__self, targetPoint);
		public static void ReachedPoint(this AI_State_MoveToPoint __self) => _ReachedPoint757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AI_State_MoveToPointOfInterest
	{

		private static readonly System.Lazy<FieldAccessor<AI_State_MoveToPointOfInterest, ObjectOfInterestType>> _interestType =
				new System.Lazy<FieldAccessor<AI_State_MoveToPointOfInterest, ObjectOfInterestType>>(() => FieldAccessor<AI_State_MoveToPointOfInterest, ObjectOfInterestType>.Create("interestType"));
		private static readonly System.Lazy<FieldAccessor<AI_State_MoveToPointOfInterest, UnityEngine.Transform>> _targetPoint =
				new System.Lazy<FieldAccessor<AI_State_MoveToPointOfInterest, UnityEngine.Transform>>(() => FieldAccessor<AI_State_MoveToPointOfInterest, UnityEngine.Transform>.Create("targetPoint"));
		private static readonly System.Lazy<FieldAccessor<AI_State_MoveToPointOfInterest, MovementType>> _enterMovementType =
				new System.Lazy<FieldAccessor<AI_State_MoveToPointOfInterest, MovementType>>(() => FieldAccessor<AI_State_MoveToPointOfInterest, MovementType>.Create("enterMovementType"));

		public static ObjectOfInterestType GetInterestType(this AI_State_MoveToPointOfInterest __self) => _interestType.Value.GetValue(__self);
		public static void SetInterestType(this AI_State_MoveToPointOfInterest __self, ObjectOfInterestType value) => _interestType.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetTargetPoint(this AI_State_MoveToPointOfInterest __self) => _targetPoint.Value.GetValue(__self);
		public static void SetTargetPoint(this AI_State_MoveToPointOfInterest __self, UnityEngine.Transform value) => _targetPoint.Value.SetValue(__self, value);
		public static MovementType GetEnterMovementType(this AI_State_MoveToPointOfInterest __self) => _enterMovementType.Value.GetValue(__self);
		public static void SetEnterMovementType(this AI_State_MoveToPointOfInterest __self, MovementType value) => _enterMovementType.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_State_MoveToPointOfInterest>> _FindObjectOfInterest3451702837 =
				new System.Lazy<MethodAccessor<AI_State_MoveToPointOfInterest>>(() => MethodAccessor<AI_State_MoveToPointOfInterest>.Create("FindObjectOfInterest", typeof(ObjectOfInterestType)));

		public static UnityEngine.Transform FindObjectOfInterest(this AI_State_MoveToPointOfInterest __self, ObjectOfInterestType type) => (UnityEngine.Transform)_FindObjectOfInterest3451702837.Value.Invoke(__self, type);

	}

	public static class PrivateAccessor_AI_State_MoveToPointRaftBounds
	{

		private static readonly System.Lazy<FieldAccessor<AI_State_MoveToPointRaftBounds, MovementType>> _movementType =
				new System.Lazy<FieldAccessor<AI_State_MoveToPointRaftBounds, MovementType>>(() => FieldAccessor<AI_State_MoveToPointRaftBounds, MovementType>.Create("movementType"));
		private static readonly System.Lazy<FieldAccessor<AI_State_MoveToPointRaftBounds, AI_State>> _nextState =
				new System.Lazy<FieldAccessor<AI_State_MoveToPointRaftBounds, AI_State>>(() => FieldAccessor<AI_State_MoveToPointRaftBounds, AI_State>.Create("nextState"));
		private static readonly System.Lazy<FieldAccessor<AI_State_MoveToPointRaftBounds, float>> _reachPointDistance =
				new System.Lazy<FieldAccessor<AI_State_MoveToPointRaftBounds, float>>(() => FieldAccessor<AI_State_MoveToPointRaftBounds, float>.Create("reachPointDistance"));
		private static readonly System.Lazy<FieldAccessor<AI_State_MoveToPointRaftBounds, float>> _xOffset =
				new System.Lazy<FieldAccessor<AI_State_MoveToPointRaftBounds, float>>(() => FieldAccessor<AI_State_MoveToPointRaftBounds, float>.Create("xOffset"));
		private static readonly System.Lazy<FieldAccessor<AI_State_MoveToPointRaftBounds, float>> _zOffset =
				new System.Lazy<FieldAccessor<AI_State_MoveToPointRaftBounds, float>>(() => FieldAccessor<AI_State_MoveToPointRaftBounds, float>.Create("zOffset"));
		private static readonly System.Lazy<FieldAccessor<AI_State_MoveToPointRaftBounds, float>> _yOffset =
				new System.Lazy<FieldAccessor<AI_State_MoveToPointRaftBounds, float>>(() => FieldAccessor<AI_State_MoveToPointRaftBounds, float>.Create("yOffset"));
		private static readonly System.Lazy<FieldAccessor<AI_State_MoveToPointRaftBounds, float>> _targetMovementSpeed =
				new System.Lazy<FieldAccessor<AI_State_MoveToPointRaftBounds, float>>(() => FieldAccessor<AI_State_MoveToPointRaftBounds, float>.Create("targetMovementSpeed"));
		private static readonly System.Lazy<FieldAccessor<AI_State_MoveToPointRaftBounds, UnityEngine.Vector3>> _targetPoint =
				new System.Lazy<FieldAccessor<AI_State_MoveToPointRaftBounds, UnityEngine.Vector3>>(() => FieldAccessor<AI_State_MoveToPointRaftBounds, UnityEngine.Vector3>.Create("targetPoint"));

		public static MovementType GetMovementType(this AI_State_MoveToPointRaftBounds __self) => _movementType.Value.GetValue(__self);
		public static void SetMovementType(this AI_State_MoveToPointRaftBounds __self, MovementType value) => _movementType.Value.SetValue(__self, value);
		public static AI_State GetNextState(this AI_State_MoveToPointRaftBounds __self) => _nextState.Value.GetValue(__self);
		public static void SetNextState(this AI_State_MoveToPointRaftBounds __self, AI_State value) => _nextState.Value.SetValue(__self, value);
		public static float GetReachPointDistance(this AI_State_MoveToPointRaftBounds __self) => _reachPointDistance.Value.GetValue(__self);
		public static void SetReachPointDistance(this AI_State_MoveToPointRaftBounds __self, float value) => _reachPointDistance.Value.SetValue(__self, value);
		public static float GetXOffset(this AI_State_MoveToPointRaftBounds __self) => _xOffset.Value.GetValue(__self);
		public static void SetXOffset(this AI_State_MoveToPointRaftBounds __self, float value) => _xOffset.Value.SetValue(__self, value);
		public static float GetZOffset(this AI_State_MoveToPointRaftBounds __self) => _zOffset.Value.GetValue(__self);
		public static void SetZOffset(this AI_State_MoveToPointRaftBounds __self, float value) => _zOffset.Value.SetValue(__self, value);
		public static float GetYOffset(this AI_State_MoveToPointRaftBounds __self) => _yOffset.Value.GetValue(__self);
		public static void SetYOffset(this AI_State_MoveToPointRaftBounds __self, float value) => _yOffset.Value.SetValue(__self, value);
		public static float GetTargetMovementSpeed(this AI_State_MoveToPointRaftBounds __self) => _targetMovementSpeed.Value.GetValue(__self);
		public static void SetTargetMovementSpeed(this AI_State_MoveToPointRaftBounds __self, float value) => _targetMovementSpeed.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetTargetPoint(this AI_State_MoveToPointRaftBounds __self) => _targetPoint.Value.GetValue(__self);
		public static void SetTargetPoint(this AI_State_MoveToPointRaftBounds __self, UnityEngine.Vector3 value) => _targetPoint.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_State_MoveToPointRaftBounds>> _OnDrawGizmosSelected757602046 =
				new System.Lazy<MethodAccessor<AI_State_MoveToPointRaftBounds>>(() => MethodAccessor<AI_State_MoveToPointRaftBounds>.Create("OnDrawGizmosSelected"));
		private static readonly System.Lazy<MethodAccessor<AI_State_MoveToPointRaftBounds>> _MoveTowardsPoint757602046 =
				new System.Lazy<MethodAccessor<AI_State_MoveToPointRaftBounds>>(() => MethodAccessor<AI_State_MoveToPointRaftBounds>.Create("MoveTowardsPoint"));

		public static void OnDrawGizmosSelected(this AI_State_MoveToPointRaftBounds __self) => _OnDrawGizmosSelected757602046.Value.Invoke(__self);
		public static void MoveTowardsPoint(this AI_State_MoveToPointRaftBounds __self) => _MoveTowardsPoint757602046.Value.Invoke(__self);

	}

	public static class Private_AI_State_MoveToPointRaftBounds
	{

		private static readonly System.Lazy<StaticFieldAccessor<RaftBounds>> _bounds =
				new System.Lazy<StaticFieldAccessor<RaftBounds>>(() => StaticFieldAccessor<RaftBounds>.Create(typeof(AI_State_MoveToPointRaftBounds), "bounds"));

		public static RaftBounds GetBounds() => _bounds.Value.GetValue();
		public static void SetBounds(RaftBounds value) => _bounds.Value.SetValue(value);

	}

	public static class PrivateAccessor_AI_State_MoveToPoint_Spawn
	{

		private static readonly System.Lazy<FieldAccessor<AI_State_MoveToPoint_Spawn, AI_NetworkBehaviour>> _networkBehaviour =
				new System.Lazy<FieldAccessor<AI_State_MoveToPoint_Spawn, AI_NetworkBehaviour>>(() => FieldAccessor<AI_State_MoveToPoint_Spawn, AI_NetworkBehaviour>.Create("networkBehaviour"));
		private static readonly System.Lazy<FieldAccessor<AI_State_MoveToPoint_Spawn, bool>> _matchRotation =
				new System.Lazy<FieldAccessor<AI_State_MoveToPoint_Spawn, bool>>(() => FieldAccessor<AI_State_MoveToPoint_Spawn, bool>.Create("matchRotation"));
		private static readonly System.Lazy<FieldAccessor<AI_State_MoveToPoint_Spawn, float>> _rotationSpeed =
				new System.Lazy<FieldAccessor<AI_State_MoveToPoint_Spawn, float>>(() => FieldAccessor<AI_State_MoveToPoint_Spawn, float>.Create("rotationSpeed"));
		private static readonly System.Lazy<FieldAccessor<AI_State_MoveToPoint_Spawn, float>> _minValidAngle =
				new System.Lazy<FieldAccessor<AI_State_MoveToPoint_Spawn, float>>(() => FieldAccessor<AI_State_MoveToPoint_Spawn, float>.Create("minValidAngle"));
		private static readonly System.Lazy<FieldAccessor<AI_State_MoveToPoint_Spawn, UnityEngine.Transform>> _spawnTransform =
				new System.Lazy<FieldAccessor<AI_State_MoveToPoint_Spawn, UnityEngine.Transform>>(() => FieldAccessor<AI_State_MoveToPoint_Spawn, UnityEngine.Transform>.Create("spawnTransform"));

		public static AI_NetworkBehaviour GetNetworkBehaviour(this AI_State_MoveToPoint_Spawn __self) => _networkBehaviour.Value.GetValue(__self);
		public static void SetNetworkBehaviour(this AI_State_MoveToPoint_Spawn __self, AI_NetworkBehaviour value) => _networkBehaviour.Value.SetValue(__self, value);
		public static bool GetMatchRotation(this AI_State_MoveToPoint_Spawn __self) => _matchRotation.Value.GetValue(__self);
		public static void SetMatchRotation(this AI_State_MoveToPoint_Spawn __self, bool value) => _matchRotation.Value.SetValue(__self, value);
		public static float GetRotationSpeed(this AI_State_MoveToPoint_Spawn __self) => _rotationSpeed.Value.GetValue(__self);
		public static void SetRotationSpeed(this AI_State_MoveToPoint_Spawn __self, float value) => _rotationSpeed.Value.SetValue(__self, value);
		public static float GetMinValidAngle(this AI_State_MoveToPoint_Spawn __self) => _minValidAngle.Value.GetValue(__self);
		public static void SetMinValidAngle(this AI_State_MoveToPoint_Spawn __self, float value) => _minValidAngle.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetSpawnTransform(this AI_State_MoveToPoint_Spawn __self) => _spawnTransform.Value.GetValue(__self);
		public static void SetSpawnTransform(this AI_State_MoveToPoint_Spawn __self, UnityEngine.Transform value) => _spawnTransform.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_State_MoveToPoint_Spawn>> _MoveToPoint3429126434 =
				new System.Lazy<MethodAccessor<AI_State_MoveToPoint_Spawn>>(() => MethodAccessor<AI_State_MoveToPoint_Spawn>.Create("MoveToPoint", typeof(UnityEngine.Vector3)));

		public static bool MoveToPoint(this AI_State_MoveToPoint_Spawn __self, UnityEngine.Vector3 targetPoint) => (bool)_MoveToPoint3429126434.Value.Invoke(__self, targetPoint);

	}

	public static class PrivateAccessor_AI_State_Particle
	{

		private static readonly System.Lazy<FieldAccessor<AI_State_Particle, AI_StateMachine>> _stateMachine =
				new System.Lazy<FieldAccessor<AI_State_Particle, AI_StateMachine>>(() => FieldAccessor<AI_State_Particle, AI_StateMachine>.Create("stateMachine"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Particle, AI_State>> _state =
				new System.Lazy<FieldAccessor<AI_State_Particle, AI_State>>(() => FieldAccessor<AI_State_Particle, AI_State>.Create("state"));

		public static AI_StateMachine GetStateMachine(this AI_State_Particle __self) => _stateMachine.Value.GetValue(__self);
		public static void SetStateMachine(this AI_State_Particle __self, AI_StateMachine value) => _stateMachine.Value.SetValue(__self, value);
		public static AI_State GetState(this AI_State_Particle __self) => _state.Value.GetValue(__self);
		public static void SetState(this AI_State_Particle __self, AI_State value) => _state.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_State_Particle>> _Awake757602046 =
				new System.Lazy<MethodAccessor<AI_State_Particle>>(() => MethodAccessor<AI_State_Particle>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<AI_State_Particle>> _OnEnterState3428541017 =
				new System.Lazy<MethodAccessor<AI_State_Particle>>(() => MethodAccessor<AI_State_Particle>.Create("OnEnterState", typeof(AI_State)));
		private static readonly System.Lazy<MethodAccessor<AI_State_Particle>> _OnExitState3428541017 =
				new System.Lazy<MethodAccessor<AI_State_Particle>>(() => MethodAccessor<AI_State_Particle>.Create("OnExitState", typeof(AI_State)));
		private static readonly System.Lazy<MethodAccessor<AI_State_Particle>> _ApplyParticleSettings3444912741 =
				new System.Lazy<MethodAccessor<AI_State_Particle>>(() => MethodAccessor<AI_State_Particle>.Create("ApplyParticleSettings", typeof(AIStateEvent)));

		public static void Awake(this AI_State_Particle __self) => _Awake757602046.Value.Invoke(__self);
		public static void OnEnterState(this AI_State_Particle __self, AI_State newState) => _OnEnterState3428541017.Value.Invoke(__self, newState);
		public static void OnExitState(this AI_State_Particle __self, AI_State newState) => _OnExitState3428541017.Value.Invoke(__self, newState);
		public static void ApplyParticleSettings(this AI_State_Particle __self, AIStateEvent eventType) => _ApplyParticleSettings3444912741.Value.Invoke(__self, eventType);

	}

	public static class PrivateAccessor_AI_State_Revive
	{

		private static readonly System.Lazy<FieldAccessor<AI_State_Revive, AI_StateMachine_Animal>> _stateMachine_Animal =
				new System.Lazy<FieldAccessor<AI_State_Revive, AI_StateMachine_Animal>>(() => FieldAccessor<AI_State_Revive, AI_StateMachine_Animal>.Create("stateMachine_Animal"));

		public static AI_StateMachine_Animal GetStateMachine_Animal(this AI_State_Revive __self) => _stateMachine_Animal.Value.GetValue(__self);
		public static void SetStateMachine_Animal(this AI_State_Revive __self, AI_StateMachine_Animal value) => _stateMachine_Animal.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_State_Revive>> _Awake757602046 =
				new System.Lazy<MethodAccessor<AI_State_Revive>>(() => MethodAccessor<AI_State_Revive>.Create("Awake"));

		public static void Awake(this AI_State_Revive __self) => _Awake757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AI_State_SoundPlayer
	{

		private static readonly System.Lazy<FieldAccessor<AI_State_SoundPlayer, StateSoundPlaySetting[]>> _soundpropertySetting =
				new System.Lazy<FieldAccessor<AI_State_SoundPlayer, StateSoundPlaySetting[]>>(() => FieldAccessor<AI_State_SoundPlayer, StateSoundPlaySetting[]>.Create("soundpropertySetting"));
		private static readonly System.Lazy<FieldAccessor<AI_State_SoundPlayer, AI_StateMachine>> _stateMachine =
				new System.Lazy<FieldAccessor<AI_State_SoundPlayer, AI_StateMachine>>(() => FieldAccessor<AI_State_SoundPlayer, AI_StateMachine>.Create("stateMachine"));
		private static readonly System.Lazy<FieldAccessor<AI_State_SoundPlayer, AI_State>> _state =
				new System.Lazy<FieldAccessor<AI_State_SoundPlayer, AI_State>>(() => FieldAccessor<AI_State_SoundPlayer, AI_State>.Create("state"));
		private static readonly System.Lazy<FieldAccessor<AI_State_SoundPlayer, bool>> _initialized =
				new System.Lazy<FieldAccessor<AI_State_SoundPlayer, bool>>(() => FieldAccessor<AI_State_SoundPlayer, bool>.Create("initialized"));

		public static StateSoundPlaySetting[] GetSoundpropertySetting(this AI_State_SoundPlayer __self) => _soundpropertySetting.Value.GetValue(__self);
		public static void SetSoundpropertySetting(this AI_State_SoundPlayer __self, StateSoundPlaySetting[] value) => _soundpropertySetting.Value.SetValue(__self, value);
		public static AI_StateMachine GetStateMachine(this AI_State_SoundPlayer __self) => _stateMachine.Value.GetValue(__self);
		public static void SetStateMachine(this AI_State_SoundPlayer __self, AI_StateMachine value) => _stateMachine.Value.SetValue(__self, value);
		public static AI_State GetState(this AI_State_SoundPlayer __self) => _state.Value.GetValue(__self);
		public static void SetState(this AI_State_SoundPlayer __self, AI_State value) => _state.Value.SetValue(__self, value);
		public static bool GetInitialized(this AI_State_SoundPlayer __self) => _initialized.Value.GetValue(__self);
		public static void SetInitialized(this AI_State_SoundPlayer __self, bool value) => _initialized.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_State_SoundPlayer>> _OnEnterState3428541017 =
				new System.Lazy<MethodAccessor<AI_State_SoundPlayer>>(() => MethodAccessor<AI_State_SoundPlayer>.Create("OnEnterState", typeof(AI_State)));
		private static readonly System.Lazy<MethodAccessor<AI_State_SoundPlayer>> _OnExitState3428541017 =
				new System.Lazy<MethodAccessor<AI_State_SoundPlayer>>(() => MethodAccessor<AI_State_SoundPlayer>.Create("OnExitState", typeof(AI_State)));
		private static readonly System.Lazy<MethodAccessor<AI_State_SoundPlayer>> _Awake757602046 =
				new System.Lazy<MethodAccessor<AI_State_SoundPlayer>>(() => MethodAccessor<AI_State_SoundPlayer>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<AI_State_SoundPlayer>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<AI_State_SoundPlayer>>(() => MethodAccessor<AI_State_SoundPlayer>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<AI_State_SoundPlayer>> _PlaySoundViaSetting3444912741 =
				new System.Lazy<MethodAccessor<AI_State_SoundPlayer>>(() => MethodAccessor<AI_State_SoundPlayer>.Create("PlaySoundViaSetting", typeof(AIStateEvent)));

		public static void OnEnterState(this AI_State_SoundPlayer __self, AI_State newState) => _OnEnterState3428541017.Value.Invoke(__self, newState);
		public static void OnExitState(this AI_State_SoundPlayer __self, AI_State newState) => _OnExitState3428541017.Value.Invoke(__self, newState);
		public static void Awake(this AI_State_SoundPlayer __self) => _Awake757602046.Value.Invoke(__self);
		public static void OnDestroy(this AI_State_SoundPlayer __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void PlaySoundViaSetting(this AI_State_SoundPlayer __self, AIStateEvent stateEvent) => _PlaySoundViaSetting3444912741.Value.Invoke(__self, stateEvent);

	}

	public static class PrivateAccessor_AI_State_StateRandomizer
	{

		private static readonly System.Lazy<FieldAccessor<AI_State_StateRandomizer, Randomizer>> _randomizer =
				new System.Lazy<FieldAccessor<AI_State_StateRandomizer, Randomizer>>(() => FieldAccessor<AI_State_StateRandomizer, Randomizer>.Create("randomizer"));
		private static readonly System.Lazy<FieldAccessor<AI_State_StateRandomizer, bool>> _allowSameRandomTwice =
				new System.Lazy<FieldAccessor<AI_State_StateRandomizer, bool>>(() => FieldAccessor<AI_State_StateRandomizer, bool>.Create("allowSameRandomTwice"));
		private static readonly System.Lazy<FieldAccessor<AI_State_StateRandomizer, AI_State>> _lastRandomState =
				new System.Lazy<FieldAccessor<AI_State_StateRandomizer, AI_State>>(() => FieldAccessor<AI_State_StateRandomizer, AI_State>.Create("lastRandomState"));

		public static Randomizer GetRandomizer(this AI_State_StateRandomizer __self) => _randomizer.Value.GetValue(__self);
		public static void SetRandomizer(this AI_State_StateRandomizer __self, Randomizer value) => _randomizer.Value.SetValue(__self, value);
		public static bool GetAllowSameRandomTwice(this AI_State_StateRandomizer __self) => _allowSameRandomTwice.Value.GetValue(__self);
		public static void SetAllowSameRandomTwice(this AI_State_StateRandomizer __self, bool value) => _allowSameRandomTwice.Value.SetValue(__self, value);
		public static AI_State GetLastRandomState(this AI_State_StateRandomizer __self) => _lastRandomState.Value.GetValue(__self);
		public static void SetLastRandomState(this AI_State_StateRandomizer __self, AI_State value) => _lastRandomState.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_AI_State_Stunned
	{

		private static readonly System.Lazy<FieldAccessor<AI_State_Stunned, AI_State>> _unStunnedState =
				new System.Lazy<FieldAccessor<AI_State_Stunned, AI_State>>(() => FieldAccessor<AI_State_Stunned, AI_State>.Create("unStunnedState"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Stunned, float>> _stunDuration =
				new System.Lazy<FieldAccessor<AI_State_Stunned, float>>(() => FieldAccessor<AI_State_Stunned, float>.Create("stunDuration"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Stunned, float>> _stunChannel =
				new System.Lazy<FieldAccessor<AI_State_Stunned, float>>(() => FieldAccessor<AI_State_Stunned, float>.Create("stunChannel"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Stunned, MovementType>> _prevMovementType =
				new System.Lazy<FieldAccessor<AI_State_Stunned, MovementType>>(() => FieldAccessor<AI_State_Stunned, MovementType>.Create("prevMovementType"));

		public static AI_State GetUnStunnedState(this AI_State_Stunned __self) => _unStunnedState.Value.GetValue(__self);
		public static void SetUnStunnedState(this AI_State_Stunned __self, AI_State value) => _unStunnedState.Value.SetValue(__self, value);
		public static float GetStunDuration(this AI_State_Stunned __self) => _stunDuration.Value.GetValue(__self);
		public static void SetStunDuration(this AI_State_Stunned __self, float value) => _stunDuration.Value.SetValue(__self, value);
		public static float GetStunChannel(this AI_State_Stunned __self) => _stunChannel.Value.GetValue(__self);
		public static void SetStunChannel(this AI_State_Stunned __self, float value) => _stunChannel.Value.SetValue(__self, value);
		public static MovementType GetPrevMovementType(this AI_State_Stunned __self) => _prevMovementType.Value.GetValue(__self);
		public static void SetPrevMovementType(this AI_State_Stunned __self, MovementType value) => _prevMovementType.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_State_Stunned>> _ResetState757602046 =
				new System.Lazy<MethodAccessor<AI_State_Stunned>>(() => MethodAccessor<AI_State_Stunned>.Create("ResetState"));

		public static void ResetState(this AI_State_Stunned __self) => _ResetState757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AI_State_Wait
	{

		private static readonly System.Lazy<FieldAccessor<AI_State_Wait, Interval_Float>> _waitInterval =
				new System.Lazy<FieldAccessor<AI_State_Wait, Interval_Float>>(() => FieldAccessor<AI_State_Wait, Interval_Float>.Create("waitInterval"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Wait, AI_State>> _nextState =
				new System.Lazy<FieldAccessor<AI_State_Wait, AI_State>>(() => FieldAccessor<AI_State_Wait, AI_State>.Create("nextState"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Wait, float>> _timeToWait =
				new System.Lazy<FieldAccessor<AI_State_Wait, float>>(() => FieldAccessor<AI_State_Wait, float>.Create("timeToWait"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Wait, float>> _startWaitTime =
				new System.Lazy<FieldAccessor<AI_State_Wait, float>>(() => FieldAccessor<AI_State_Wait, float>.Create("startWaitTime"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Wait, float>> _normalizedTime =
				new System.Lazy<FieldAccessor<AI_State_Wait, float>>(() => FieldAccessor<AI_State_Wait, float>.Create("normalizedTime"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Wait, bool>> _timerReached =
				new System.Lazy<FieldAccessor<AI_State_Wait, bool>>(() => FieldAccessor<AI_State_Wait, bool>.Create("timerReached"));

		public static Interval_Float GetWaitInterval(this AI_State_Wait __self) => _waitInterval.Value.GetValue(__self);
		public static void SetWaitInterval(this AI_State_Wait __self, Interval_Float value) => _waitInterval.Value.SetValue(__self, value);
		public static AI_State GetNextState(this AI_State_Wait __self) => _nextState.Value.GetValue(__self);
		public static void SetNextState(this AI_State_Wait __self, AI_State value) => _nextState.Value.SetValue(__self, value);
		public static float GetTimeToWait(this AI_State_Wait __self) => _timeToWait.Value.GetValue(__self);
		public static void SetTimeToWait(this AI_State_Wait __self, float value) => _timeToWait.Value.SetValue(__self, value);
		public static float GetStartWaitTime(this AI_State_Wait __self) => _startWaitTime.Value.GetValue(__self);
		public static void SetStartWaitTime(this AI_State_Wait __self, float value) => _startWaitTime.Value.SetValue(__self, value);
		public static float GetNormalizedTime(this AI_State_Wait __self) => _normalizedTime.Value.GetValue(__self);
		public static void SetNormalizedTime(this AI_State_Wait __self, float value) => _normalizedTime.Value.SetValue(__self, value);
		public static bool GetTimerReached(this AI_State_Wait __self) => _timerReached.Value.GetValue(__self);
		public static void SetTimerReached(this AI_State_Wait __self, bool value) => _timerReached.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_State_Wait>> _OnWaitTimerReached757602046 =
				new System.Lazy<MethodAccessor<AI_State_Wait>>(() => MethodAccessor<AI_State_Wait>.Create("OnWaitTimerReached"));

		public static void OnWaitTimerReached(this AI_State_Wait __self) => _OnWaitTimerReached757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AI_State_WaitForQuest
	{

		private static readonly System.Lazy<FieldAccessor<AI_State_WaitForQuest, TimerEventer>> _timerEventer =
				new System.Lazy<FieldAccessor<AI_State_WaitForQuest, TimerEventer>>(() => FieldAccessor<AI_State_WaitForQuest, TimerEventer>.Create("timerEventer"));
		private static readonly System.Lazy<FieldAccessor<AI_State_WaitForQuest, bool>> _stateFired =
				new System.Lazy<FieldAccessor<AI_State_WaitForQuest, bool>>(() => FieldAccessor<AI_State_WaitForQuest, bool>.Create("stateFired"));

		public static TimerEventer GetTimerEventer(this AI_State_WaitForQuest __self) => _timerEventer.Value.GetValue(__self);
		public static void SetTimerEventer(this AI_State_WaitForQuest __self, TimerEventer value) => _timerEventer.Value.SetValue(__self, value);
		public static bool GetStateFired(this AI_State_WaitForQuest __self) => _stateFired.Value.GetValue(__self);
		public static void SetStateFired(this AI_State_WaitForQuest __self, bool value) => _stateFired.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_State_WaitForQuest>> _Start757602046 =
				new System.Lazy<MethodAccessor<AI_State_WaitForQuest>>(() => MethodAccessor<AI_State_WaitForQuest>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<AI_State_WaitForQuest>> _ResetState757602046 =
				new System.Lazy<MethodAccessor<AI_State_WaitForQuest>>(() => MethodAccessor<AI_State_WaitForQuest>.Create("ResetState"));
		private static readonly System.Lazy<MethodAccessor<AI_State_WaitForQuest>> _CheckIfQuestDone757602046 =
				new System.Lazy<MethodAccessor<AI_State_WaitForQuest>>(() => MethodAccessor<AI_State_WaitForQuest>.Create("CheckIfQuestDone"));
		private static readonly System.Lazy<MethodAccessor<AI_State_WaitForQuest>> _OnFireState757602046 =
				new System.Lazy<MethodAccessor<AI_State_WaitForQuest>>(() => MethodAccessor<AI_State_WaitForQuest>.Create("OnFireState"));
		private static readonly System.Lazy<MethodAccessor<AI_State_WaitForQuest>> _SwapState757602046 =
				new System.Lazy<MethodAccessor<AI_State_WaitForQuest>>(() => MethodAccessor<AI_State_WaitForQuest>.Create("SwapState"));

		public static void Start(this AI_State_WaitForQuest __self) => _Start757602046.Value.Invoke(__self);
		public static void ResetState(this AI_State_WaitForQuest __self) => _ResetState757602046.Value.Invoke(__self);
		public static void CheckIfQuestDone(this AI_State_WaitForQuest __self) => _CheckIfQuestDone757602046.Value.Invoke(__self);
		public static void OnFireState(this AI_State_WaitForQuest __self) => _OnFireState757602046.Value.Invoke(__self);
		public static void SwapState(this AI_State_WaitForQuest __self) => _SwapState757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AI_State_Wait_Dialogue
	{

		private static readonly System.Lazy<FieldAccessor<AI_State_Wait_Dialogue, Network_Player>> _dialogueTarget =
				new System.Lazy<FieldAccessor<AI_State_Wait_Dialogue, Network_Player>>(() => FieldAccessor<AI_State_Wait_Dialogue, Network_Player>.Create("dialogueTarget"));

		public static Network_Player GetDialogueTarget(this AI_State_Wait_Dialogue __self) => _dialogueTarget.Value.GetValue(__self);
		public static void SetDialogueTarget(this AI_State_Wait_Dialogue __self, Network_Player value) => _dialogueTarget.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_State_Wait_Dialogue>> _Start757602046 =
				new System.Lazy<MethodAccessor<AI_State_Wait_Dialogue>>(() => MethodAccessor<AI_State_Wait_Dialogue>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<AI_State_Wait_Dialogue>> _OnDialogueStart3485005270 =
				new System.Lazy<MethodAccessor<AI_State_Wait_Dialogue>>(() => MethodAccessor<AI_State_Wait_Dialogue>.Create("OnDialogueStart", typeof(SO_VoiceData.Instance_VoiceData)));
		private static readonly System.Lazy<MethodAccessor<AI_State_Wait_Dialogue>> _OnDialogueDone3485005270 =
				new System.Lazy<MethodAccessor<AI_State_Wait_Dialogue>>(() => MethodAccessor<AI_State_Wait_Dialogue>.Create("OnDialogueDone", typeof(SO_VoiceData.Instance_VoiceData)));

		public static void Start(this AI_State_Wait_Dialogue __self) => _Start757602046.Value.Invoke(__self);
		public static void OnDialogueStart(this AI_State_Wait_Dialogue __self, SO_VoiceData.Instance_VoiceData dialogueData) => _OnDialogueStart3485005270.Value.Invoke(__self, dialogueData);
		public static void OnDialogueDone(this AI_State_Wait_Dialogue __self, SO_VoiceData.Instance_VoiceData instance) => _OnDialogueDone3485005270.Value.Invoke(__self, instance);

	}

	public static class PrivateAccessor_AI_State_Boar_ChargeTowards
	{

		private static readonly System.Lazy<FieldAccessor<AI_State_Boar_ChargeTowards, float>> _minChargeDistance =
				new System.Lazy<FieldAccessor<AI_State_Boar_ChargeTowards, float>>(() => FieldAccessor<AI_State_Boar_ChargeTowards, float>.Create("minChargeDistance"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Boar_ChargeTowards, float>> _maxChargeDistance =
				new System.Lazy<FieldAccessor<AI_State_Boar_ChargeTowards, float>>(() => FieldAccessor<AI_State_Boar_ChargeTowards, float>.Create("maxChargeDistance"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Boar_ChargeTowards, float>> _maxChargeDuration =
				new System.Lazy<FieldAccessor<AI_State_Boar_ChargeTowards, float>>(() => FieldAccessor<AI_State_Boar_ChargeTowards, float>.Create("maxChargeDuration"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Boar_ChargeTowards, AI_State>> _chargeInterruptedState =
				new System.Lazy<FieldAccessor<AI_State_Boar_ChargeTowards, AI_State>>(() => FieldAccessor<AI_State_Boar_ChargeTowards, AI_State>.Create("chargeInterruptedState"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Boar_ChargeTowards, AI_State>> _chargeDoneState =
				new System.Lazy<FieldAccessor<AI_State_Boar_ChargeTowards, AI_State>>(() => FieldAccessor<AI_State_Boar_ChargeTowards, AI_State>.Create("chargeDoneState"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Boar_ChargeTowards, AI_State_Boar_Slide>> _boarSlideState =
				new System.Lazy<FieldAccessor<AI_State_Boar_ChargeTowards, AI_State_Boar_Slide>>(() => FieldAccessor<AI_State_Boar_ChargeTowards, AI_State_Boar_Slide>.Create("boarSlideState"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Boar_ChargeTowards, bool>> _isAutoUpdatingChargeTargetting =
				new System.Lazy<FieldAccessor<AI_State_Boar_ChargeTowards, bool>>(() => FieldAccessor<AI_State_Boar_ChargeTowards, bool>.Create("isAutoUpdatingChargeTargetting"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Boar_ChargeTowards, float>> _autoUpdateChargeTargettingDistance =
				new System.Lazy<FieldAccessor<AI_State_Boar_ChargeTowards, float>>(() => FieldAccessor<AI_State_Boar_ChargeTowards, float>.Create("autoUpdateChargeTargettingDistance"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Boar_ChargeTowards, bool>> _keepChargingWhileCloseToTarget =
				new System.Lazy<FieldAccessor<AI_State_Boar_ChargeTowards, bool>>(() => FieldAccessor<AI_State_Boar_ChargeTowards, bool>.Create("keepChargingWhileCloseToTarget"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Boar_ChargeTowards, float>> _distanceToKeepCharging =
				new System.Lazy<FieldAccessor<AI_State_Boar_ChargeTowards, float>>(() => FieldAccessor<AI_State_Boar_ChargeTowards, float>.Create("distanceToKeepCharging"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Boar_ChargeTowards, bool>> _isFearlessInState =
				new System.Lazy<FieldAccessor<AI_State_Boar_ChargeTowards, bool>>(() => FieldAccessor<AI_State_Boar_ChargeTowards, bool>.Create("isFearlessInState"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Boar_ChargeTowards, float>> _stateChargeSpeed =
				new System.Lazy<FieldAccessor<AI_State_Boar_ChargeTowards, float>>(() => FieldAccessor<AI_State_Boar_ChargeTowards, float>.Create("stateChargeSpeed"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Boar_ChargeTowards, float>> _stateChargeModelTurnRate =
				new System.Lazy<FieldAccessor<AI_State_Boar_ChargeTowards, float>>(() => FieldAccessor<AI_State_Boar_ChargeTowards, float>.Create("stateChargeModelTurnRate"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Boar_ChargeTowards, float>> _stateNavAgentAngularSpeed =
				new System.Lazy<FieldAccessor<AI_State_Boar_ChargeTowards, float>>(() => FieldAccessor<AI_State_Boar_ChargeTowards, float>.Create("stateNavAgentAngularSpeed"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Boar_ChargeTowards, float>> _stateNavAgentAcceleration =
				new System.Lazy<FieldAccessor<AI_State_Boar_ChargeTowards, float>>(() => FieldAccessor<AI_State_Boar_ChargeTowards, float>.Create("stateNavAgentAcceleration"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Boar_ChargeTowards, float>> _distanceToPointStartSliding =
				new System.Lazy<FieldAccessor<AI_State_Boar_ChargeTowards, float>>(() => FieldAccessor<AI_State_Boar_ChargeTowards, float>.Create("distanceToPointStartSliding"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Boar_ChargeTowards, float>> _distanceToChargePointMinimum =
				new System.Lazy<FieldAccessor<AI_State_Boar_ChargeTowards, float>>(() => FieldAccessor<AI_State_Boar_ChargeTowards, float>.Create("distanceToChargePointMinimum"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Boar_ChargeTowards, MovementType>> _chargeMovementType =
				new System.Lazy<FieldAccessor<AI_State_Boar_ChargeTowards, MovementType>>(() => FieldAccessor<AI_State_Boar_ChargeTowards, MovementType>.Create("chargeMovementType"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Boar_ChargeTowards, DamageBox>> _hornDamageBox =
				new System.Lazy<FieldAccessor<AI_State_Boar_ChargeTowards, DamageBox>>(() => FieldAccessor<AI_State_Boar_ChargeTowards, DamageBox>.Create("hornDamageBox"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Boar_ChargeTowards, bool>> _exitStateOnDamageBoxHit =
				new System.Lazy<FieldAccessor<AI_State_Boar_ChargeTowards, bool>>(() => FieldAccessor<AI_State_Boar_ChargeTowards, bool>.Create("exitStateOnDamageBoxHit"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Boar_ChargeTowards, float>> _navMeshCheckDistance =
				new System.Lazy<FieldAccessor<AI_State_Boar_ChargeTowards, float>>(() => FieldAccessor<AI_State_Boar_ChargeTowards, float>.Create("navMeshCheckDistance"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Boar_ChargeTowards, float>> _minimumInterupptChargePlayerToTargetDistance =
				new System.Lazy<FieldAccessor<AI_State_Boar_ChargeTowards, float>>(() => FieldAccessor<AI_State_Boar_ChargeTowards, float>.Create("minimumInterupptChargePlayerToTargetDistance"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Boar_ChargeTowards, UnityEngine.Vector3>> _chargeTargetPoint =
				new System.Lazy<FieldAccessor<AI_State_Boar_ChargeTowards, UnityEngine.Vector3>>(() => FieldAccessor<AI_State_Boar_ChargeTowards, UnityEngine.Vector3>.Create("chargeTargetPoint"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Boar_ChargeTowards, UnityEngine.AI.NavMeshAgent>> _agent =
				new System.Lazy<FieldAccessor<AI_State_Boar_ChargeTowards, UnityEngine.AI.NavMeshAgent>>(() => FieldAccessor<AI_State_Boar_ChargeTowards, UnityEngine.AI.NavMeshAgent>.Create("agent"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Boar_ChargeTowards, AI_StateMachine_Boar>> _boarSM =
				new System.Lazy<FieldAccessor<AI_State_Boar_ChargeTowards, AI_StateMachine_Boar>>(() => FieldAccessor<AI_State_Boar_ChargeTowards, AI_StateMachine_Boar>.Create("boarSM"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Boar_ChargeTowards, AI_NetworkBehaviour_Boar>> _boarNet =
				new System.Lazy<FieldAccessor<AI_State_Boar_ChargeTowards, AI_NetworkBehaviour_Boar>>(() => FieldAccessor<AI_State_Boar_ChargeTowards, AI_NetworkBehaviour_Boar>.Create("boarNet"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Boar_ChargeTowards, AI_Movement>> _movement =
				new System.Lazy<FieldAccessor<AI_State_Boar_ChargeTowards, AI_Movement>>(() => FieldAccessor<AI_State_Boar_ChargeTowards, AI_Movement>.Create("movement"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Boar_ChargeTowards, float>> _chargeChannel =
				new System.Lazy<FieldAccessor<AI_State_Boar_ChargeTowards, float>>(() => FieldAccessor<AI_State_Boar_ChargeTowards, float>.Create("chargeChannel"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Boar_ChargeTowards, Network_Host>> _network_Host =
				new System.Lazy<FieldAccessor<AI_State_Boar_ChargeTowards, Network_Host>>(() => FieldAccessor<AI_State_Boar_ChargeTowards, Network_Host>.Create("network_Host"));

		public static float GetMinChargeDistance(this AI_State_Boar_ChargeTowards __self) => _minChargeDistance.Value.GetValue(__self);
		public static void SetMinChargeDistance(this AI_State_Boar_ChargeTowards __self, float value) => _minChargeDistance.Value.SetValue(__self, value);
		public static float GetMaxChargeDistance(this AI_State_Boar_ChargeTowards __self) => _maxChargeDistance.Value.GetValue(__self);
		public static void SetMaxChargeDistance(this AI_State_Boar_ChargeTowards __self, float value) => _maxChargeDistance.Value.SetValue(__self, value);
		public static float GetMaxChargeDuration(this AI_State_Boar_ChargeTowards __self) => _maxChargeDuration.Value.GetValue(__self);
		public static void SetMaxChargeDuration(this AI_State_Boar_ChargeTowards __self, float value) => _maxChargeDuration.Value.SetValue(__self, value);
		public static AI_State GetChargeInterruptedState(this AI_State_Boar_ChargeTowards __self) => _chargeInterruptedState.Value.GetValue(__self);
		public static void SetChargeInterruptedState(this AI_State_Boar_ChargeTowards __self, AI_State value) => _chargeInterruptedState.Value.SetValue(__self, value);
		public static AI_State GetChargeDoneState(this AI_State_Boar_ChargeTowards __self) => _chargeDoneState.Value.GetValue(__self);
		public static void SetChargeDoneState(this AI_State_Boar_ChargeTowards __self, AI_State value) => _chargeDoneState.Value.SetValue(__self, value);
		public static AI_State_Boar_Slide GetBoarSlideState(this AI_State_Boar_ChargeTowards __self) => _boarSlideState.Value.GetValue(__self);
		public static void SetBoarSlideState(this AI_State_Boar_ChargeTowards __self, AI_State_Boar_Slide value) => _boarSlideState.Value.SetValue(__self, value);
		public static bool GetIsAutoUpdatingChargeTargetting(this AI_State_Boar_ChargeTowards __self) => _isAutoUpdatingChargeTargetting.Value.GetValue(__self);
		public static void SetIsAutoUpdatingChargeTargetting(this AI_State_Boar_ChargeTowards __self, bool value) => _isAutoUpdatingChargeTargetting.Value.SetValue(__self, value);
		public static float GetAutoUpdateChargeTargettingDistance(this AI_State_Boar_ChargeTowards __self) => _autoUpdateChargeTargettingDistance.Value.GetValue(__self);
		public static void SetAutoUpdateChargeTargettingDistance(this AI_State_Boar_ChargeTowards __self, float value) => _autoUpdateChargeTargettingDistance.Value.SetValue(__self, value);
		public static bool GetKeepChargingWhileCloseToTarget(this AI_State_Boar_ChargeTowards __self) => _keepChargingWhileCloseToTarget.Value.GetValue(__self);
		public static void SetKeepChargingWhileCloseToTarget(this AI_State_Boar_ChargeTowards __self, bool value) => _keepChargingWhileCloseToTarget.Value.SetValue(__self, value);
		public static float GetDistanceToKeepCharging(this AI_State_Boar_ChargeTowards __self) => _distanceToKeepCharging.Value.GetValue(__self);
		public static void SetDistanceToKeepCharging(this AI_State_Boar_ChargeTowards __self, float value) => _distanceToKeepCharging.Value.SetValue(__self, value);
		public static bool GetIsFearlessInState(this AI_State_Boar_ChargeTowards __self) => _isFearlessInState.Value.GetValue(__self);
		public static void SetIsFearlessInState(this AI_State_Boar_ChargeTowards __self, bool value) => _isFearlessInState.Value.SetValue(__self, value);
		public static float GetStateChargeSpeed(this AI_State_Boar_ChargeTowards __self) => _stateChargeSpeed.Value.GetValue(__self);
		public static void SetStateChargeSpeed(this AI_State_Boar_ChargeTowards __self, float value) => _stateChargeSpeed.Value.SetValue(__self, value);
		public static float GetStateChargeModelTurnRate(this AI_State_Boar_ChargeTowards __self) => _stateChargeModelTurnRate.Value.GetValue(__self);
		public static void SetStateChargeModelTurnRate(this AI_State_Boar_ChargeTowards __self, float value) => _stateChargeModelTurnRate.Value.SetValue(__self, value);
		public static float GetStateNavAgentAngularSpeed(this AI_State_Boar_ChargeTowards __self) => _stateNavAgentAngularSpeed.Value.GetValue(__self);
		public static void SetStateNavAgentAngularSpeed(this AI_State_Boar_ChargeTowards __self, float value) => _stateNavAgentAngularSpeed.Value.SetValue(__self, value);
		public static float GetStateNavAgentAcceleration(this AI_State_Boar_ChargeTowards __self) => _stateNavAgentAcceleration.Value.GetValue(__self);
		public static void SetStateNavAgentAcceleration(this AI_State_Boar_ChargeTowards __self, float value) => _stateNavAgentAcceleration.Value.SetValue(__self, value);
		public static float GetDistanceToPointStartSliding(this AI_State_Boar_ChargeTowards __self) => _distanceToPointStartSliding.Value.GetValue(__self);
		public static void SetDistanceToPointStartSliding(this AI_State_Boar_ChargeTowards __self, float value) => _distanceToPointStartSliding.Value.SetValue(__self, value);
		public static float GetDistanceToChargePointMinimum(this AI_State_Boar_ChargeTowards __self) => _distanceToChargePointMinimum.Value.GetValue(__self);
		public static void SetDistanceToChargePointMinimum(this AI_State_Boar_ChargeTowards __self, float value) => _distanceToChargePointMinimum.Value.SetValue(__self, value);
		public static MovementType GetChargeMovementType(this AI_State_Boar_ChargeTowards __self) => _chargeMovementType.Value.GetValue(__self);
		public static void SetChargeMovementType(this AI_State_Boar_ChargeTowards __self, MovementType value) => _chargeMovementType.Value.SetValue(__self, value);
		public static DamageBox GetHornDamageBox(this AI_State_Boar_ChargeTowards __self) => _hornDamageBox.Value.GetValue(__self);
		public static void SetHornDamageBox(this AI_State_Boar_ChargeTowards __self, DamageBox value) => _hornDamageBox.Value.SetValue(__self, value);
		public static bool GetExitStateOnDamageBoxHit(this AI_State_Boar_ChargeTowards __self) => _exitStateOnDamageBoxHit.Value.GetValue(__self);
		public static void SetExitStateOnDamageBoxHit(this AI_State_Boar_ChargeTowards __self, bool value) => _exitStateOnDamageBoxHit.Value.SetValue(__self, value);
		public static float GetNavMeshCheckDistance(this AI_State_Boar_ChargeTowards __self) => _navMeshCheckDistance.Value.GetValue(__self);
		public static void SetNavMeshCheckDistance(this AI_State_Boar_ChargeTowards __self, float value) => _navMeshCheckDistance.Value.SetValue(__self, value);
		public static float GetMinimumInterupptChargePlayerToTargetDistance(this AI_State_Boar_ChargeTowards __self) => _minimumInterupptChargePlayerToTargetDistance.Value.GetValue(__self);
		public static void SetMinimumInterupptChargePlayerToTargetDistance(this AI_State_Boar_ChargeTowards __self, float value) => _minimumInterupptChargePlayerToTargetDistance.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetChargeTargetPoint(this AI_State_Boar_ChargeTowards __self) => _chargeTargetPoint.Value.GetValue(__self);
		public static void SetChargeTargetPoint(this AI_State_Boar_ChargeTowards __self, UnityEngine.Vector3 value) => _chargeTargetPoint.Value.SetValue(__self, value);
		public static UnityEngine.AI.NavMeshAgent GetAgent(this AI_State_Boar_ChargeTowards __self) => _agent.Value.GetValue(__self);
		public static void SetAgent(this AI_State_Boar_ChargeTowards __self, UnityEngine.AI.NavMeshAgent value) => _agent.Value.SetValue(__self, value);
		public static AI_StateMachine_Boar GetBoarSM(this AI_State_Boar_ChargeTowards __self) => _boarSM.Value.GetValue(__self);
		public static void SetBoarSM(this AI_State_Boar_ChargeTowards __self, AI_StateMachine_Boar value) => _boarSM.Value.SetValue(__self, value);
		public static AI_NetworkBehaviour_Boar GetBoarNet(this AI_State_Boar_ChargeTowards __self) => _boarNet.Value.GetValue(__self);
		public static void SetBoarNet(this AI_State_Boar_ChargeTowards __self, AI_NetworkBehaviour_Boar value) => _boarNet.Value.SetValue(__self, value);
		public static AI_Movement GetMovement(this AI_State_Boar_ChargeTowards __self) => _movement.Value.GetValue(__self);
		public static void SetMovement(this AI_State_Boar_ChargeTowards __self, AI_Movement value) => _movement.Value.SetValue(__self, value);
		public static float GetChargeChannel(this AI_State_Boar_ChargeTowards __self) => _chargeChannel.Value.GetValue(__self);
		public static void SetChargeChannel(this AI_State_Boar_ChargeTowards __self, float value) => _chargeChannel.Value.SetValue(__self, value);
		public static Network_Host GetNetwork_Host(this AI_State_Boar_ChargeTowards __self) => _network_Host.Value.GetValue(__self);
		public static void SetNetwork_Host(this AI_State_Boar_ChargeTowards __self, Network_Host value) => _network_Host.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_State_Boar_ChargeTowards>> _Awake757602046 =
				new System.Lazy<MethodAccessor<AI_State_Boar_ChargeTowards>>(() => MethodAccessor<AI_State_Boar_ChargeTowards>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<AI_State_Boar_ChargeTowards>> _Start757602046 =
				new System.Lazy<MethodAccessor<AI_State_Boar_ChargeTowards>>(() => MethodAccessor<AI_State_Boar_ChargeTowards>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<AI_State_Boar_ChargeTowards>> _OnDrawGizmos757602046 =
				new System.Lazy<MethodAccessor<AI_State_Boar_ChargeTowards>>(() => MethodAccessor<AI_State_Boar_ChargeTowards>.Create("OnDrawGizmos"));
		private static readonly System.Lazy<MethodAccessor<AI_State_Boar_ChargeTowards>> _IsTooCloseToChargePoint757602046 =
				new System.Lazy<MethodAccessor<AI_State_Boar_ChargeTowards>>(() => MethodAccessor<AI_State_Boar_ChargeTowards>.Create("IsTooCloseToChargePoint"));
		private static readonly System.Lazy<MethodAccessor<AI_State_Boar_ChargeTowards>> _IsChargeTimeLimitPassed757602046 =
				new System.Lazy<MethodAccessor<AI_State_Boar_ChargeTowards>>(() => MethodAccessor<AI_State_Boar_ChargeTowards>.Create("IsChargeTimeLimitPassed"));
		private static readonly System.Lazy<MethodAccessor<AI_State_Boar_ChargeTowards>> _KeepCharging757602046 =
				new System.Lazy<MethodAccessor<AI_State_Boar_ChargeTowards>>(() => MethodAccessor<AI_State_Boar_ChargeTowards>.Create("KeepCharging"));
		private static readonly System.Lazy<MethodAccessor<AI_State_Boar_ChargeTowards>> _IsEnemyTargetCloseToChargePoint757602046 =
				new System.Lazy<MethodAccessor<AI_State_Boar_ChargeTowards>>(() => MethodAccessor<AI_State_Boar_ChargeTowards>.Create("IsEnemyTargetCloseToChargePoint"));
		private static readonly System.Lazy<MethodAccessor<AI_State_Boar_ChargeTowards>> _IsBoarWithinSlideRange757602046 =
				new System.Lazy<MethodAccessor<AI_State_Boar_ChargeTowards>>(() => MethodAccessor<AI_State_Boar_ChargeTowards>.Create("IsBoarWithinSlideRange"));
		private static readonly System.Lazy<MethodAccessor<AI_State_Boar_ChargeTowards>> _HitPlayerLocally3461878659 =
				new System.Lazy<MethodAccessor<AI_State_Boar_ChargeTowards>>(() => MethodAccessor<AI_State_Boar_ChargeTowards>.Create("HitPlayerLocally", typeof(Network_Player)));
		private static readonly System.Lazy<MethodAccessor<AI_State_Boar_ChargeTowards>> _UnHookPlayer757602046 =
				new System.Lazy<MethodAccessor<AI_State_Boar_ChargeTowards>>(() => MethodAccessor<AI_State_Boar_ChargeTowards>.Create("UnHookPlayer"));

		public static void Awake(this AI_State_Boar_ChargeTowards __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this AI_State_Boar_ChargeTowards __self) => _Start757602046.Value.Invoke(__self);
		public static void OnDrawGizmos(this AI_State_Boar_ChargeTowards __self) => _OnDrawGizmos757602046.Value.Invoke(__self);
		public static bool IsTooCloseToChargePoint(this AI_State_Boar_ChargeTowards __self) => (bool)_IsTooCloseToChargePoint757602046.Value.Invoke(__self);
		public static bool IsChargeTimeLimitPassed(this AI_State_Boar_ChargeTowards __self) => (bool)_IsChargeTimeLimitPassed757602046.Value.Invoke(__self);
		public static bool KeepCharging(this AI_State_Boar_ChargeTowards __self) => (bool)_KeepCharging757602046.Value.Invoke(__self);
		public static bool IsEnemyTargetCloseToChargePoint(this AI_State_Boar_ChargeTowards __self) => (bool)_IsEnemyTargetCloseToChargePoint757602046.Value.Invoke(__self);
		public static bool IsBoarWithinSlideRange(this AI_State_Boar_ChargeTowards __self) => (bool)_IsBoarWithinSlideRange757602046.Value.Invoke(__self);
		public static void HitPlayerLocally(this AI_State_Boar_ChargeTowards __self, Network_Player player) => _HitPlayerLocally3461878659.Value.Invoke(__self, player);
		public static void UnHookPlayer(this AI_State_Boar_ChargeTowards __self) => _UnHookPlayer757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AI_State_Boar_ChargeUp
	{

		private static readonly System.Lazy<FieldAccessor<AI_State_Boar_ChargeUp, float>> _chargeDirectionAngleMargin =
				new System.Lazy<FieldAccessor<AI_State_Boar_ChargeUp, float>>(() => FieldAccessor<AI_State_Boar_ChargeUp, float>.Create("chargeDirectionAngleMargin"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Boar_ChargeUp, float>> _rotationSpeed =
				new System.Lazy<FieldAccessor<AI_State_Boar_ChargeUp, float>>(() => FieldAccessor<AI_State_Boar_ChargeUp, float>.Create("rotationSpeed"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Boar_ChargeUp, AI_Movement>> _movement =
				new System.Lazy<FieldAccessor<AI_State_Boar_ChargeUp, AI_Movement>>(() => FieldAccessor<AI_State_Boar_ChargeUp, AI_Movement>.Create("movement"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Boar_ChargeUp, bool>> _lockOnMode =
				new System.Lazy<FieldAccessor<AI_State_Boar_ChargeUp, bool>>(() => FieldAccessor<AI_State_Boar_ChargeUp, bool>.Create("lockOnMode"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Boar_ChargeUp, bool>> _isFearlessInState =
				new System.Lazy<FieldAccessor<AI_State_Boar_ChargeUp, bool>>(() => FieldAccessor<AI_State_Boar_ChargeUp, bool>.Create("isFearlessInState"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Boar_ChargeUp, bool>> _ignoreYPositioning =
				new System.Lazy<FieldAccessor<AI_State_Boar_ChargeUp, bool>>(() => FieldAccessor<AI_State_Boar_ChargeUp, bool>.Create("ignoreYPositioning"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Boar_ChargeUp, AI_StateMachine_Boar>> _boarSM =
				new System.Lazy<FieldAccessor<AI_State_Boar_ChargeUp, AI_StateMachine_Boar>>(() => FieldAccessor<AI_State_Boar_ChargeUp, AI_StateMachine_Boar>.Create("boarSM"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Boar_ChargeUp, bool>> _isLockedOn =
				new System.Lazy<FieldAccessor<AI_State_Boar_ChargeUp, bool>>(() => FieldAccessor<AI_State_Boar_ChargeUp, bool>.Create("isLockedOn"));

		public static float GetChargeDirectionAngleMargin(this AI_State_Boar_ChargeUp __self) => _chargeDirectionAngleMargin.Value.GetValue(__self);
		public static void SetChargeDirectionAngleMargin(this AI_State_Boar_ChargeUp __self, float value) => _chargeDirectionAngleMargin.Value.SetValue(__self, value);
		public static float GetRotationSpeed(this AI_State_Boar_ChargeUp __self) => _rotationSpeed.Value.GetValue(__self);
		public static void SetRotationSpeed(this AI_State_Boar_ChargeUp __self, float value) => _rotationSpeed.Value.SetValue(__self, value);
		public static AI_Movement GetMovement(this AI_State_Boar_ChargeUp __self) => _movement.Value.GetValue(__self);
		public static void SetMovement(this AI_State_Boar_ChargeUp __self, AI_Movement value) => _movement.Value.SetValue(__self, value);
		public static bool GetLockOnMode(this AI_State_Boar_ChargeUp __self) => _lockOnMode.Value.GetValue(__self);
		public static void SetLockOnMode(this AI_State_Boar_ChargeUp __self, bool value) => _lockOnMode.Value.SetValue(__self, value);
		public static bool GetIsFearlessInState(this AI_State_Boar_ChargeUp __self) => _isFearlessInState.Value.GetValue(__self);
		public static void SetIsFearlessInState(this AI_State_Boar_ChargeUp __self, bool value) => _isFearlessInState.Value.SetValue(__self, value);
		public static bool GetIgnoreYPositioning(this AI_State_Boar_ChargeUp __self) => _ignoreYPositioning.Value.GetValue(__self);
		public static void SetIgnoreYPositioning(this AI_State_Boar_ChargeUp __self, bool value) => _ignoreYPositioning.Value.SetValue(__self, value);
		public static AI_StateMachine_Boar GetBoarSM(this AI_State_Boar_ChargeUp __self) => _boarSM.Value.GetValue(__self);
		public static void SetBoarSM(this AI_State_Boar_ChargeUp __self, AI_StateMachine_Boar value) => _boarSM.Value.SetValue(__self, value);
		public static bool GetIsLockedOn(this AI_State_Boar_ChargeUp __self) => _isLockedOn.Value.GetValue(__self);
		public static void SetIsLockedOn(this AI_State_Boar_ChargeUp __self, bool value) => _isLockedOn.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_State_Boar_ChargeUp>> _Awake757602046 =
				new System.Lazy<MethodAccessor<AI_State_Boar_ChargeUp>>(() => MethodAccessor<AI_State_Boar_ChargeUp>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<AI_State_Boar_ChargeUp>> _IncrementChannelTimer757602046 =
				new System.Lazy<MethodAccessor<AI_State_Boar_ChargeUp>>(() => MethodAccessor<AI_State_Boar_ChargeUp>.Create("IncrementChannelTimer"));
		private static readonly System.Lazy<MethodAccessor<AI_State_Boar_ChargeUp>> _ChannelCharge757602046 =
				new System.Lazy<MethodAccessor<AI_State_Boar_ChargeUp>>(() => MethodAccessor<AI_State_Boar_ChargeUp>.Create("ChannelCharge"));
		private static readonly System.Lazy<MethodAccessor<AI_State_Boar_ChargeUp>> _ChargeFinished757602046 =
				new System.Lazy<MethodAccessor<AI_State_Boar_ChargeUp>>(() => MethodAccessor<AI_State_Boar_ChargeUp>.Create("ChargeFinished"));
		private static readonly System.Lazy<MethodAccessor<AI_State_Boar_ChargeUp>> _IsInAngle3450040886 =
				new System.Lazy<MethodAccessor<AI_State_Boar_ChargeUp>>(() => MethodAccessor<AI_State_Boar_ChargeUp>.Create("IsInAngle", typeof(bool)));

		public static void Awake(this AI_State_Boar_ChargeUp __self) => _Awake757602046.Value.Invoke(__self);
		public static void IncrementChannelTimer(this AI_State_Boar_ChargeUp __self) => _IncrementChannelTimer757602046.Value.Invoke(__self);
		public static void ChannelCharge(this AI_State_Boar_ChargeUp __self) => _ChannelCharge757602046.Value.Invoke(__self);
		public static void ChargeFinished(this AI_State_Boar_ChargeUp __self) => _ChargeFinished757602046.Value.Invoke(__self);
		public static bool IsInAngle(this AI_State_Boar_ChargeUp __self, bool ignoreY) => (bool)_IsInAngle3450040886.Value.Invoke(__self, ignoreY);

	}

	public static class PrivateAccessor_AI_State_Boar_Chase
	{

		private static readonly System.Lazy<FieldAccessor<AI_State_Boar_Chase, AI_State>> _chargeChannelState =
				new System.Lazy<FieldAccessor<AI_State_Boar_Chase, AI_State>>(() => FieldAccessor<AI_State_Boar_Chase, AI_State>.Create("chargeChannelState"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Boar_Chase, AI_State>> _runAwayState =
				new System.Lazy<FieldAccessor<AI_State_Boar_Chase, AI_State>>(() => FieldAccessor<AI_State_Boar_Chase, AI_State>.Create("runAwayState"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Boar_Chase, AI_StateMachine_Boar>> _boarSM =
				new System.Lazy<FieldAccessor<AI_State_Boar_Chase, AI_StateMachine_Boar>>(() => FieldAccessor<AI_State_Boar_Chase, AI_StateMachine_Boar>.Create("boarSM"));

		public static AI_State GetChargeChannelState(this AI_State_Boar_Chase __self) => _chargeChannelState.Value.GetValue(__self);
		public static void SetChargeChannelState(this AI_State_Boar_Chase __self, AI_State value) => _chargeChannelState.Value.SetValue(__self, value);
		public static AI_State GetRunAwayState(this AI_State_Boar_Chase __self) => _runAwayState.Value.GetValue(__self);
		public static void SetRunAwayState(this AI_State_Boar_Chase __self, AI_State value) => _runAwayState.Value.SetValue(__self, value);
		public static AI_StateMachine_Boar GetBoarSM(this AI_State_Boar_Chase __self) => _boarSM.Value.GetValue(__self);
		public static void SetBoarSM(this AI_State_Boar_Chase __self, AI_StateMachine_Boar value) => _boarSM.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_State_Boar_Chase>> _Awake757602046 =
				new System.Lazy<MethodAccessor<AI_State_Boar_Chase>>(() => MethodAccessor<AI_State_Boar_Chase>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<AI_State_Boar_Chase>> _Start757602046 =
				new System.Lazy<MethodAccessor<AI_State_Boar_Chase>>(() => MethodAccessor<AI_State_Boar_Chase>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<AI_State_Boar_Chase>> _IsInRangeOfPoint3429126434 =
				new System.Lazy<MethodAccessor<AI_State_Boar_Chase>>(() => MethodAccessor<AI_State_Boar_Chase>.Create("IsInRangeOfPoint", typeof(UnityEngine.Vector3)));

		public static void Awake(this AI_State_Boar_Chase __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this AI_State_Boar_Chase __self) => _Start757602046.Value.Invoke(__self);
		public static bool IsInRangeOfPoint(this AI_State_Boar_Chase __self, UnityEngine.Vector3 point) => (bool)_IsInRangeOfPoint3429126434.Value.Invoke(__self, point);

	}

	public static class PrivateAccessor_AI_State_Boar_Circulate_Run
	{

		private static readonly System.Lazy<FieldAccessor<AI_State_Boar_Circulate_Run, AI_State>> _damageTakenState =
				new System.Lazy<FieldAccessor<AI_State_Boar_Circulate_Run, AI_State>>(() => FieldAccessor<AI_State_Boar_Circulate_Run, AI_State>.Create("damageTakenState"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Boar_Circulate_Run, AI_State>> _runAwayState =
				new System.Lazy<FieldAccessor<AI_State_Boar_Circulate_Run, AI_State>>(() => FieldAccessor<AI_State_Boar_Circulate_Run, AI_State>.Create("runAwayState"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Boar_Circulate_Run, float>> _stateTurnRate =
				new System.Lazy<FieldAccessor<AI_State_Boar_Circulate_Run, float>>(() => FieldAccessor<AI_State_Boar_Circulate_Run, float>.Create("stateTurnRate"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Boar_Circulate_Run, AI_StateMachine_Boar>> _boarSM =
				new System.Lazy<FieldAccessor<AI_State_Boar_Circulate_Run, AI_StateMachine_Boar>>(() => FieldAccessor<AI_State_Boar_Circulate_Run, AI_StateMachine_Boar>.Create("boarSM"));

		public static AI_State GetDamageTakenState(this AI_State_Boar_Circulate_Run __self) => _damageTakenState.Value.GetValue(__self);
		public static void SetDamageTakenState(this AI_State_Boar_Circulate_Run __self, AI_State value) => _damageTakenState.Value.SetValue(__self, value);
		public static AI_State GetRunAwayState(this AI_State_Boar_Circulate_Run __self) => _runAwayState.Value.GetValue(__self);
		public static void SetRunAwayState(this AI_State_Boar_Circulate_Run __self, AI_State value) => _runAwayState.Value.SetValue(__self, value);
		public static float GetStateTurnRate(this AI_State_Boar_Circulate_Run __self) => _stateTurnRate.Value.GetValue(__self);
		public static void SetStateTurnRate(this AI_State_Boar_Circulate_Run __self, float value) => _stateTurnRate.Value.SetValue(__self, value);
		public static AI_StateMachine_Boar GetBoarSM(this AI_State_Boar_Circulate_Run __self) => _boarSM.Value.GetValue(__self);
		public static void SetBoarSM(this AI_State_Boar_Circulate_Run __self, AI_StateMachine_Boar value) => _boarSM.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_State_Boar_Circulate_Run>> _Awake757602046 =
				new System.Lazy<MethodAccessor<AI_State_Boar_Circulate_Run>>(() => MethodAccessor<AI_State_Boar_Circulate_Run>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<AI_State_Boar_Circulate_Run>> _Start757602046 =
				new System.Lazy<MethodAccessor<AI_State_Boar_Circulate_Run>>(() => MethodAccessor<AI_State_Boar_Circulate_Run>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<AI_State_Boar_Circulate_Run>> _PlayerIsWithinRange757602046 =
				new System.Lazy<MethodAccessor<AI_State_Boar_Circulate_Run>>(() => MethodAccessor<AI_State_Boar_Circulate_Run>.Create("PlayerIsWithinRange"));
		private static readonly System.Lazy<MethodAccessor<AI_State_Boar_Circulate_Run>> _OnDamageTaken2475015728 =
				new System.Lazy<MethodAccessor<AI_State_Boar_Circulate_Run>>(() => MethodAccessor<AI_State_Boar_Circulate_Run>.Create("OnDamageTaken", typeof(float), typeof(UnityEngine.Vector3), typeof(UnityEngine.Vector3), typeof(EntityType)));
		private static readonly System.Lazy<MethodAccessor<AI_State_Boar_Circulate_Run>> _RunAway757602046 =
				new System.Lazy<MethodAccessor<AI_State_Boar_Circulate_Run>>(() => MethodAccessor<AI_State_Boar_Circulate_Run>.Create("RunAway"));

		public static void Awake(this AI_State_Boar_Circulate_Run __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this AI_State_Boar_Circulate_Run __self) => _Start757602046.Value.Invoke(__self);
		public static bool PlayerIsWithinRange(this AI_State_Boar_Circulate_Run __self) => (bool)_PlayerIsWithinRange757602046.Value.Invoke(__self);
		public static void OnDamageTaken(this AI_State_Boar_Circulate_Run __self, float damage, UnityEngine.Vector3 hitPoint, UnityEngine.Vector3 hitNormal, EntityType damageType) => _OnDamageTaken2475015728.Value.Invoke(__self, damage, hitPoint, hitNormal, damageType);
		public static void RunAway(this AI_State_Boar_Circulate_Run __self) => _RunAway757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AI_State_Boar_Circulate_Walk
	{

		private static readonly System.Lazy<FieldAccessor<AI_State_Boar_Circulate_Walk, AI_State>> _damageTakenState =
				new System.Lazy<FieldAccessor<AI_State_Boar_Circulate_Walk, AI_State>>(() => FieldAccessor<AI_State_Boar_Circulate_Walk, AI_State>.Create("damageTakenState"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Boar_Circulate_Walk, AI_State>> _runAwayState =
				new System.Lazy<FieldAccessor<AI_State_Boar_Circulate_Walk, AI_State>>(() => FieldAccessor<AI_State_Boar_Circulate_Walk, AI_State>.Create("runAwayState"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Boar_Circulate_Walk, AI_StateMachine_Boar>> _boarSM =
				new System.Lazy<FieldAccessor<AI_State_Boar_Circulate_Walk, AI_StateMachine_Boar>>(() => FieldAccessor<AI_State_Boar_Circulate_Walk, AI_StateMachine_Boar>.Create("boarSM"));

		public static AI_State GetDamageTakenState(this AI_State_Boar_Circulate_Walk __self) => _damageTakenState.Value.GetValue(__self);
		public static void SetDamageTakenState(this AI_State_Boar_Circulate_Walk __self, AI_State value) => _damageTakenState.Value.SetValue(__self, value);
		public static AI_State GetRunAwayState(this AI_State_Boar_Circulate_Walk __self) => _runAwayState.Value.GetValue(__self);
		public static void SetRunAwayState(this AI_State_Boar_Circulate_Walk __self, AI_State value) => _runAwayState.Value.SetValue(__self, value);
		public static AI_StateMachine_Boar GetBoarSM(this AI_State_Boar_Circulate_Walk __self) => _boarSM.Value.GetValue(__self);
		public static void SetBoarSM(this AI_State_Boar_Circulate_Walk __self, AI_StateMachine_Boar value) => _boarSM.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_State_Boar_Circulate_Walk>> _Start757602046 =
				new System.Lazy<MethodAccessor<AI_State_Boar_Circulate_Walk>>(() => MethodAccessor<AI_State_Boar_Circulate_Walk>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<AI_State_Boar_Circulate_Walk>> _PlayerIsWithinRange757602046 =
				new System.Lazy<MethodAccessor<AI_State_Boar_Circulate_Walk>>(() => MethodAccessor<AI_State_Boar_Circulate_Walk>.Create("PlayerIsWithinRange"));
		private static readonly System.Lazy<MethodAccessor<AI_State_Boar_Circulate_Walk>> _OnDamageTaken2475015728 =
				new System.Lazy<MethodAccessor<AI_State_Boar_Circulate_Walk>>(() => MethodAccessor<AI_State_Boar_Circulate_Walk>.Create("OnDamageTaken", typeof(float), typeof(UnityEngine.Vector3), typeof(UnityEngine.Vector3), typeof(EntityType)));
		private static readonly System.Lazy<MethodAccessor<AI_State_Boar_Circulate_Walk>> _RunAway757602046 =
				new System.Lazy<MethodAccessor<AI_State_Boar_Circulate_Walk>>(() => MethodAccessor<AI_State_Boar_Circulate_Walk>.Create("RunAway"));

		public static void Start(this AI_State_Boar_Circulate_Walk __self) => _Start757602046.Value.Invoke(__self);
		public static bool PlayerIsWithinRange(this AI_State_Boar_Circulate_Walk __self) => (bool)_PlayerIsWithinRange757602046.Value.Invoke(__self);
		public static void OnDamageTaken(this AI_State_Boar_Circulate_Walk __self, float damage, UnityEngine.Vector3 hitPoint, UnityEngine.Vector3 hitNormal, EntityType damageType) => _OnDamageTaken2475015728.Value.Invoke(__self, damage, hitPoint, hitNormal, damageType);
		public static void RunAway(this AI_State_Boar_Circulate_Walk __self) => _RunAway757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AI_State_Boar_Slide
	{

		private static readonly System.Lazy<FieldAccessor<AI_State_Boar_Slide, float>> _distanceToPointMin =
				new System.Lazy<FieldAccessor<AI_State_Boar_Slide, float>>(() => FieldAccessor<AI_State_Boar_Slide, float>.Create("distanceToPointMin"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Boar_Slide, FMODUnity.StudioEventEmitter>> _slideEmitter =
				new System.Lazy<FieldAccessor<AI_State_Boar_Slide, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<AI_State_Boar_Slide, FMODUnity.StudioEventEmitter>.Create("slideEmitter"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Boar_Slide, AI_StateMachine_Boar>> _boarSM =
				new System.Lazy<FieldAccessor<AI_State_Boar_Slide, AI_StateMachine_Boar>>(() => FieldAccessor<AI_State_Boar_Slide, AI_StateMachine_Boar>.Create("boarSM"));

		public static float GetDistanceToPointMin(this AI_State_Boar_Slide __self) => _distanceToPointMin.Value.GetValue(__self);
		public static void SetDistanceToPointMin(this AI_State_Boar_Slide __self, float value) => _distanceToPointMin.Value.SetValue(__self, value);
		public static FMODUnity.StudioEventEmitter GetSlideEmitter(this AI_State_Boar_Slide __self) => _slideEmitter.Value.GetValue(__self);
		public static void SetSlideEmitter(this AI_State_Boar_Slide __self, FMODUnity.StudioEventEmitter value) => _slideEmitter.Value.SetValue(__self, value);
		public static AI_StateMachine_Boar GetBoarSM(this AI_State_Boar_Slide __self) => _boarSM.Value.GetValue(__self);
		public static void SetBoarSM(this AI_State_Boar_Slide __self, AI_StateMachine_Boar value) => _boarSM.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_State_Boar_Slide>> _Awake757602046 =
				new System.Lazy<MethodAccessor<AI_State_Boar_Slide>>(() => MethodAccessor<AI_State_Boar_Slide>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<AI_State_Boar_Slide>> _StopSlideSound757602046 =
				new System.Lazy<MethodAccessor<AI_State_Boar_Slide>>(() => MethodAccessor<AI_State_Boar_Slide>.Create("StopSlideSound"));

		public static void Awake(this AI_State_Boar_Slide __self) => _Awake757602046.Value.Invoke(__self);
		public static void StopSlideSound(this AI_State_Boar_Slide __self) => _StopSlideSound757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AI_State_RunAway_DraggingPlayer
	{

		private static readonly System.Lazy<FieldAccessor<AI_State_RunAway_DraggingPlayer, MovementType>> _movementType =
				new System.Lazy<FieldAccessor<AI_State_RunAway_DraggingPlayer, MovementType>>(() => FieldAccessor<AI_State_RunAway_DraggingPlayer, MovementType>.Create("movementType"));
		private static readonly System.Lazy<FieldAccessor<AI_State_RunAway_DraggingPlayer, TimerEventer>> _dragTimer =
				new System.Lazy<FieldAccessor<AI_State_RunAway_DraggingPlayer, TimerEventer>>(() => FieldAccessor<AI_State_RunAway_DraggingPlayer, TimerEventer>.Create("dragTimer"));
		private static readonly System.Lazy<FieldAccessor<AI_State_RunAway_DraggingPlayer, AttachPlayer>> _attachPlayer =
				new System.Lazy<FieldAccessor<AI_State_RunAway_DraggingPlayer, AttachPlayer>>(() => FieldAccessor<AI_State_RunAway_DraggingPlayer, AttachPlayer>.Create("attachPlayer"));
		private static readonly System.Lazy<FieldAccessor<AI_State_RunAway_DraggingPlayer, AI_State>> _stopDraggingState =
				new System.Lazy<FieldAccessor<AI_State_RunAway_DraggingPlayer, AI_State>>(() => FieldAccessor<AI_State_RunAway_DraggingPlayer, AI_State>.Create("stopDraggingState"));
		private static readonly System.Lazy<FieldAccessor<AI_State_RunAway_DraggingPlayer, float>> _movementSpeed =
				new System.Lazy<FieldAccessor<AI_State_RunAway_DraggingPlayer, float>>(() => FieldAccessor<AI_State_RunAway_DraggingPlayer, float>.Create("movementSpeed"));
		private static readonly System.Lazy<FieldAccessor<AI_State_RunAway_DraggingPlayer, AI_NetworkBehaviour>> _networkBehaviour =
				new System.Lazy<FieldAccessor<AI_State_RunAway_DraggingPlayer, AI_NetworkBehaviour>>(() => FieldAccessor<AI_State_RunAway_DraggingPlayer, AI_NetworkBehaviour>.Create("networkBehaviour"));

		public static MovementType GetMovementType(this AI_State_RunAway_DraggingPlayer __self) => _movementType.Value.GetValue(__self);
		public static void SetMovementType(this AI_State_RunAway_DraggingPlayer __self, MovementType value) => _movementType.Value.SetValue(__self, value);
		public static TimerEventer GetDragTimer(this AI_State_RunAway_DraggingPlayer __self) => _dragTimer.Value.GetValue(__self);
		public static void SetDragTimer(this AI_State_RunAway_DraggingPlayer __self, TimerEventer value) => _dragTimer.Value.SetValue(__self, value);
		public static AttachPlayer GetAttachPlayer(this AI_State_RunAway_DraggingPlayer __self) => _attachPlayer.Value.GetValue(__self);
		public static void SetAttachPlayer(this AI_State_RunAway_DraggingPlayer __self, AttachPlayer value) => _attachPlayer.Value.SetValue(__self, value);
		public static AI_State GetStopDraggingState(this AI_State_RunAway_DraggingPlayer __self) => _stopDraggingState.Value.GetValue(__self);
		public static void SetStopDraggingState(this AI_State_RunAway_DraggingPlayer __self, AI_State value) => _stopDraggingState.Value.SetValue(__self, value);
		public static float GetMovementSpeed(this AI_State_RunAway_DraggingPlayer __self) => _movementSpeed.Value.GetValue(__self);
		public static void SetMovementSpeed(this AI_State_RunAway_DraggingPlayer __self, float value) => _movementSpeed.Value.SetValue(__self, value);
		public static AI_NetworkBehaviour GetNetworkBehaviour(this AI_State_RunAway_DraggingPlayer __self) => _networkBehaviour.Value.GetValue(__self);
		public static void SetNetworkBehaviour(this AI_State_RunAway_DraggingPlayer __self, AI_NetworkBehaviour value) => _networkBehaviour.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_State_RunAway_DraggingPlayer>> _Start757602046 =
				new System.Lazy<MethodAccessor<AI_State_RunAway_DraggingPlayer>>(() => MethodAccessor<AI_State_RunAway_DraggingPlayer>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<AI_State_RunAway_DraggingPlayer>> _MoveBackwards757602046 =
				new System.Lazy<MethodAccessor<AI_State_RunAway_DraggingPlayer>>(() => MethodAccessor<AI_State_RunAway_DraggingPlayer>.Create("MoveBackwards"));

		public static void Start(this AI_State_RunAway_DraggingPlayer __self) => _Start757602046.Value.Invoke(__self);
		public static void MoveBackwards(this AI_State_RunAway_DraggingPlayer __self) => _MoveBackwards757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AI_State_Runaway
	{

		private static readonly System.Lazy<FieldAccessor<AI_State_Runaway, AI_State>> _reachTargetState =
				new System.Lazy<FieldAccessor<AI_State_Runaway, AI_State>>(() => FieldAccessor<AI_State_Runaway, AI_State>.Create("reachTargetState"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Runaway, AI_State>> _seePlayerState =
				new System.Lazy<FieldAccessor<AI_State_Runaway, AI_State>>(() => FieldAccessor<AI_State_Runaway, AI_State>.Create("seePlayerState"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Runaway, float>> _runawayMinDistance =
				new System.Lazy<FieldAccessor<AI_State_Runaway, float>>(() => FieldAccessor<AI_State_Runaway, float>.Create("runawayMinDistance"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Runaway, float>> _runawayMaxDistance =
				new System.Lazy<FieldAccessor<AI_State_Runaway, float>>(() => FieldAccessor<AI_State_Runaway, float>.Create("runawayMaxDistance"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Runaway, float>> _targetPointDistance =
				new System.Lazy<FieldAccessor<AI_State_Runaway, float>>(() => FieldAccessor<AI_State_Runaway, float>.Create("targetPointDistance"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Runaway, float>> _distanceToDetectPlayer =
				new System.Lazy<FieldAccessor<AI_State_Runaway, float>>(() => FieldAccessor<AI_State_Runaway, float>.Create("distanceToDetectPlayer"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Runaway, float>> _movementSpeed =
				new System.Lazy<FieldAccessor<AI_State_Runaway, float>>(() => FieldAccessor<AI_State_Runaway, float>.Create("movementSpeed"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Runaway, float>> _navmeshSnapDistance =
				new System.Lazy<FieldAccessor<AI_State_Runaway, float>>(() => FieldAccessor<AI_State_Runaway, float>.Create("navmeshSnapDistance"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Runaway, bool>> _useDefaultRotationSpeed =
				new System.Lazy<FieldAccessor<AI_State_Runaway, bool>>(() => FieldAccessor<AI_State_Runaway, bool>.Create("useDefaultRotationSpeed"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Runaway, float>> _rotationSpeed =
				new System.Lazy<FieldAccessor<AI_State_Runaway, float>>(() => FieldAccessor<AI_State_Runaway, float>.Create("rotationSpeed"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Runaway, UnityEngine.Vector3>> _runToTargetPoint =
				new System.Lazy<FieldAccessor<AI_State_Runaway, UnityEngine.Vector3>>(() => FieldAccessor<AI_State_Runaway, UnityEngine.Vector3>.Create("runToTargetPoint"));

		public static AI_State GetReachTargetState(this AI_State_Runaway __self) => _reachTargetState.Value.GetValue(__self);
		public static void SetReachTargetState(this AI_State_Runaway __self, AI_State value) => _reachTargetState.Value.SetValue(__self, value);
		public static AI_State GetSeePlayerState(this AI_State_Runaway __self) => _seePlayerState.Value.GetValue(__self);
		public static void SetSeePlayerState(this AI_State_Runaway __self, AI_State value) => _seePlayerState.Value.SetValue(__self, value);
		public static float GetRunawayMinDistance(this AI_State_Runaway __self) => _runawayMinDistance.Value.GetValue(__self);
		public static void SetRunawayMinDistance(this AI_State_Runaway __self, float value) => _runawayMinDistance.Value.SetValue(__self, value);
		public static float GetRunawayMaxDistance(this AI_State_Runaway __self) => _runawayMaxDistance.Value.GetValue(__self);
		public static void SetRunawayMaxDistance(this AI_State_Runaway __self, float value) => _runawayMaxDistance.Value.SetValue(__self, value);
		public static float GetTargetPointDistance(this AI_State_Runaway __self) => _targetPointDistance.Value.GetValue(__self);
		public static void SetTargetPointDistance(this AI_State_Runaway __self, float value) => _targetPointDistance.Value.SetValue(__self, value);
		public static float GetDistanceToDetectPlayer(this AI_State_Runaway __self) => _distanceToDetectPlayer.Value.GetValue(__self);
		public static void SetDistanceToDetectPlayer(this AI_State_Runaway __self, float value) => _distanceToDetectPlayer.Value.SetValue(__self, value);
		public static float GetMovementSpeed(this AI_State_Runaway __self) => _movementSpeed.Value.GetValue(__self);
		public static void SetMovementSpeed(this AI_State_Runaway __self, float value) => _movementSpeed.Value.SetValue(__self, value);
		public static float GetNavmeshSnapDistance(this AI_State_Runaway __self) => _navmeshSnapDistance.Value.GetValue(__self);
		public static void SetNavmeshSnapDistance(this AI_State_Runaway __self, float value) => _navmeshSnapDistance.Value.SetValue(__self, value);
		public static bool GetUseDefaultRotationSpeed(this AI_State_Runaway __self) => _useDefaultRotationSpeed.Value.GetValue(__self);
		public static void SetUseDefaultRotationSpeed(this AI_State_Runaway __self, bool value) => _useDefaultRotationSpeed.Value.SetValue(__self, value);
		public static float GetRotationSpeed(this AI_State_Runaway __self) => _rotationSpeed.Value.GetValue(__self);
		public static void SetRotationSpeed(this AI_State_Runaway __self, float value) => _rotationSpeed.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetRunToTargetPoint(this AI_State_Runaway __self) => _runToTargetPoint.Value.GetValue(__self);
		public static void SetRunToTargetPoint(this AI_State_Runaway __self, UnityEngine.Vector3 value) => _runToTargetPoint.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_State_Runaway>> _OnDrawGizmos757602046 =
				new System.Lazy<MethodAccessor<AI_State_Runaway>>(() => MethodAccessor<AI_State_Runaway>.Create("OnDrawGizmos"));
		private static readonly System.Lazy<MethodAccessor<AI_State_Runaway>> _TargetReached757602046 =
				new System.Lazy<MethodAccessor<AI_State_Runaway>>(() => MethodAccessor<AI_State_Runaway>.Create("TargetReached"));
		private static readonly System.Lazy<MethodAccessor<AI_State_Runaway>> _CalculateRunToPoint757602046 =
				new System.Lazy<MethodAccessor<AI_State_Runaway>>(() => MethodAccessor<AI_State_Runaway>.Create("CalculateRunToPoint"));
		private static readonly System.Lazy<MethodAccessor<AI_State_Runaway>> _GetRandomTargetPoint3640389019 =
				new System.Lazy<MethodAccessor<AI_State_Runaway>>(() => MethodAccessor<AI_State_Runaway>.Create("GetRandomTargetPoint", typeof(UnityEngine.Vector3), typeof(float)));

		public static void OnDrawGizmos(this AI_State_Runaway __self) => _OnDrawGizmos757602046.Value.Invoke(__self);
		public static bool TargetReached(this AI_State_Runaway __self) => (bool)_TargetReached757602046.Value.Invoke(__self);
		public static UnityEngine.Vector3 CalculateRunToPoint(this AI_State_Runaway __self) => (UnityEngine.Vector3)_CalculateRunToPoint757602046.Value.Invoke(__self);
		public static UnityEngine.Vector3 GetRandomTargetPoint(this AI_State_Runaway __self, UnityEngine.Vector3 center, float radius) => (UnityEngine.Vector3)_GetRandomTargetPoint3640389019.Value.Invoke(__self, center, radius);

	}

	public static class PrivateAccessor_AttachPlayer
	{

		private static readonly System.Lazy<FieldAccessor<AttachPlayer, AttachPlayer.CameraSettings>> _cameraX =
				new System.Lazy<FieldAccessor<AttachPlayer, AttachPlayer.CameraSettings>>(() => FieldAccessor<AttachPlayer, AttachPlayer.CameraSettings>.Create("cameraX"));

		public static AttachPlayer.CameraSettings GetCameraX(this AttachPlayer __self) => _cameraX.Value.GetValue(__self);
		public static void SetCameraX(this AttachPlayer __self, AttachPlayer.CameraSettings value) => _cameraX.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AttachPlayer>> _HandleAttachedPlayerDeath757602046 =
				new System.Lazy<MethodAccessor<AttachPlayer>>(() => MethodAccessor<AttachPlayer>.Create("HandleAttachedPlayerDeath"));

		public static void HandleAttachedPlayerDeath(this AttachPlayer __self) => _HandleAttachedPlayerDeath757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AI_Component_SeePlayerSwitchState_VarunaBoss
	{

		private static readonly System.Lazy<FieldAccessor<AI_Component_SeePlayerSwitchState_VarunaBoss, AI_StateMachine_Boss_Varuna>> _stateMachine =
				new System.Lazy<FieldAccessor<AI_Component_SeePlayerSwitchState_VarunaBoss, AI_StateMachine_Boss_Varuna>>(() => FieldAccessor<AI_Component_SeePlayerSwitchState_VarunaBoss, AI_StateMachine_Boss_Varuna>.Create("stateMachine"));

		public static AI_StateMachine_Boss_Varuna GetStateMachine(this AI_Component_SeePlayerSwitchState_VarunaBoss __self) => _stateMachine.Value.GetValue(__self);
		public static void SetStateMachine(this AI_Component_SeePlayerSwitchState_VarunaBoss __self, AI_StateMachine_Boss_Varuna value) => _stateMachine.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_Component_SeePlayerSwitchState_VarunaBoss>> _OnSeePlayerSwitchState3461878659 =
				new System.Lazy<MethodAccessor<AI_Component_SeePlayerSwitchState_VarunaBoss>>(() => MethodAccessor<AI_Component_SeePlayerSwitchState_VarunaBoss>.Create("OnSeePlayerSwitchState", typeof(Network_Player)));

		public static void OnSeePlayerSwitchState(this AI_Component_SeePlayerSwitchState_VarunaBoss __self, Network_Player playerReference) => _OnSeePlayerSwitchState3461878659.Value.Invoke(__self, playerReference);

	}

	public static class PrivateAccessor_AI_State_Charge
	{

		private static readonly System.Lazy<FieldAccessor<AI_State_Charge, float>> _minChargeDistance =
				new System.Lazy<FieldAccessor<AI_State_Charge, float>>(() => FieldAccessor<AI_State_Charge, float>.Create("minChargeDistance"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Charge, float>> _maxChargeDistance =
				new System.Lazy<FieldAccessor<AI_State_Charge, float>>(() => FieldAccessor<AI_State_Charge, float>.Create("maxChargeDistance"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Charge, float>> _maxChargeDuration =
				new System.Lazy<FieldAccessor<AI_State_Charge, float>>(() => FieldAccessor<AI_State_Charge, float>.Create("maxChargeDuration"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Charge, AI_State>> _chargeInterruptedState =
				new System.Lazy<FieldAccessor<AI_State_Charge, AI_State>>(() => FieldAccessor<AI_State_Charge, AI_State>.Create("chargeInterruptedState"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Charge, AI_State>> _chargeStunState =
				new System.Lazy<FieldAccessor<AI_State_Charge, AI_State>>(() => FieldAccessor<AI_State_Charge, AI_State>.Create("chargeStunState"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Charge, float>> _rayForwardOffsetDistance =
				new System.Lazy<FieldAccessor<AI_State_Charge, float>>(() => FieldAccessor<AI_State_Charge, float>.Create("rayForwardOffsetDistance"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Charge, float>> _rayRadius =
				new System.Lazy<FieldAccessor<AI_State_Charge, float>>(() => FieldAccessor<AI_State_Charge, float>.Create("rayRadius"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Charge, bool>> _isAutoUpdatingChargeTargetting =
				new System.Lazy<FieldAccessor<AI_State_Charge, bool>>(() => FieldAccessor<AI_State_Charge, bool>.Create("isAutoUpdatingChargeTargetting"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Charge, float>> _autoUpdateChargeTargettingDistance =
				new System.Lazy<FieldAccessor<AI_State_Charge, float>>(() => FieldAccessor<AI_State_Charge, float>.Create("autoUpdateChargeTargettingDistance"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Charge, bool>> _keepChargingWhileCloseToTarget =
				new System.Lazy<FieldAccessor<AI_State_Charge, bool>>(() => FieldAccessor<AI_State_Charge, bool>.Create("keepChargingWhileCloseToTarget"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Charge, float>> _distanceToKeepCharging =
				new System.Lazy<FieldAccessor<AI_State_Charge, float>>(() => FieldAccessor<AI_State_Charge, float>.Create("distanceToKeepCharging"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Charge, bool>> _isFearlessInState =
				new System.Lazy<FieldAccessor<AI_State_Charge, bool>>(() => FieldAccessor<AI_State_Charge, bool>.Create("isFearlessInState"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Charge, float>> _stateChargeSpeed =
				new System.Lazy<FieldAccessor<AI_State_Charge, float>>(() => FieldAccessor<AI_State_Charge, float>.Create("stateChargeSpeed"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Charge, float>> _stateChargeModelTurnRate =
				new System.Lazy<FieldAccessor<AI_State_Charge, float>>(() => FieldAccessor<AI_State_Charge, float>.Create("stateChargeModelTurnRate"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Charge, float>> _chargeLerpTime =
				new System.Lazy<FieldAccessor<AI_State_Charge, float>>(() => FieldAccessor<AI_State_Charge, float>.Create("chargeLerpTime"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Charge, bool>> _knocksPlayersBackOnDamageBoxHit =
				new System.Lazy<FieldAccessor<AI_State_Charge, bool>>(() => FieldAccessor<AI_State_Charge, bool>.Create("knocksPlayersBackOnDamageBoxHit"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Charge, float>> _knockbackSpeedInheritanceMultipler =
				new System.Lazy<FieldAccessor<AI_State_Charge, float>>(() => FieldAccessor<AI_State_Charge, float>.Create("knockbackSpeedInheritanceMultipler"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Charge, float>> _distanceToReachPoint =
				new System.Lazy<FieldAccessor<AI_State_Charge, float>>(() => FieldAccessor<AI_State_Charge, float>.Create("distanceToReachPoint"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Charge, float>> _distanceToChargePointMinimum =
				new System.Lazy<FieldAccessor<AI_State_Charge, float>>(() => FieldAccessor<AI_State_Charge, float>.Create("distanceToChargePointMinimum"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Charge, MovementType>> _chargeMovementType =
				new System.Lazy<FieldAccessor<AI_State_Charge, MovementType>>(() => FieldAccessor<AI_State_Charge, MovementType>.Create("chargeMovementType"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Charge, DamageBox>> _chargeDamageBox =
				new System.Lazy<FieldAccessor<AI_State_Charge, DamageBox>>(() => FieldAccessor<AI_State_Charge, DamageBox>.Create("chargeDamageBox"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Charge, bool>> _exitStateOnDamageBoxHit =
				new System.Lazy<FieldAccessor<AI_State_Charge, bool>>(() => FieldAccessor<AI_State_Charge, bool>.Create("exitStateOnDamageBoxHit"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Charge, float>> _navMeshCheckDistance =
				new System.Lazy<FieldAccessor<AI_State_Charge, float>>(() => FieldAccessor<AI_State_Charge, float>.Create("navMeshCheckDistance"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Charge, float>> _minimumInterupptChargePlayerToTargetDistance =
				new System.Lazy<FieldAccessor<AI_State_Charge, float>>(() => FieldAccessor<AI_State_Charge, float>.Create("minimumInterupptChargePlayerToTargetDistance"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Charge, string>> _eventRef_charge =
				new System.Lazy<FieldAccessor<AI_State_Charge, string>>(() => FieldAccessor<AI_State_Charge, string>.Create("eventRef_charge"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Charge, string>> _eventRef_hitPlayer =
				new System.Lazy<FieldAccessor<AI_State_Charge, string>>(() => FieldAccessor<AI_State_Charge, string>.Create("eventRef_hitPlayer"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Charge, UnityEngine.RaycastHit>> _latestHitRay =
				new System.Lazy<FieldAccessor<AI_State_Charge, UnityEngine.RaycastHit>>(() => FieldAccessor<AI_State_Charge, UnityEngine.RaycastHit>.Create("latestHitRay"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Charge, UnityEngine.Vector3>> _chargeTargetPoint =
				new System.Lazy<FieldAccessor<AI_State_Charge, UnityEngine.Vector3>>(() => FieldAccessor<AI_State_Charge, UnityEngine.Vector3>.Create("chargeTargetPoint"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Charge, AI_Movement>> _movement =
				new System.Lazy<FieldAccessor<AI_State_Charge, AI_Movement>>(() => FieldAccessor<AI_State_Charge, AI_Movement>.Create("movement"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Charge, float>> _chargeChannel =
				new System.Lazy<FieldAccessor<AI_State_Charge, float>>(() => FieldAccessor<AI_State_Charge, float>.Create("chargeChannel"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Charge, Network_Host>> _network_Host =
				new System.Lazy<FieldAccessor<AI_State_Charge, Network_Host>>(() => FieldAccessor<AI_State_Charge, Network_Host>.Create("network_Host"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Charge, Network_Player>> _enemyTarget =
				new System.Lazy<FieldAccessor<AI_State_Charge, Network_Player>>(() => FieldAccessor<AI_State_Charge, Network_Player>.Create("enemyTarget"));

		public static float GetMinChargeDistance(this AI_State_Charge __self) => _minChargeDistance.Value.GetValue(__self);
		public static void SetMinChargeDistance(this AI_State_Charge __self, float value) => _minChargeDistance.Value.SetValue(__self, value);
		public static float GetMaxChargeDistance(this AI_State_Charge __self) => _maxChargeDistance.Value.GetValue(__self);
		public static void SetMaxChargeDistance(this AI_State_Charge __self, float value) => _maxChargeDistance.Value.SetValue(__self, value);
		public static float GetMaxChargeDuration(this AI_State_Charge __self) => _maxChargeDuration.Value.GetValue(__self);
		public static void SetMaxChargeDuration(this AI_State_Charge __self, float value) => _maxChargeDuration.Value.SetValue(__self, value);
		public static AI_State GetChargeInterruptedState(this AI_State_Charge __self) => _chargeInterruptedState.Value.GetValue(__self);
		public static void SetChargeInterruptedState(this AI_State_Charge __self, AI_State value) => _chargeInterruptedState.Value.SetValue(__self, value);
		public static AI_State GetChargeStunState(this AI_State_Charge __self) => _chargeStunState.Value.GetValue(__self);
		public static void SetChargeStunState(this AI_State_Charge __self, AI_State value) => _chargeStunState.Value.SetValue(__self, value);
		public static float GetRayForwardOffsetDistance(this AI_State_Charge __self) => _rayForwardOffsetDistance.Value.GetValue(__self);
		public static void SetRayForwardOffsetDistance(this AI_State_Charge __self, float value) => _rayForwardOffsetDistance.Value.SetValue(__self, value);
		public static float GetRayRadius(this AI_State_Charge __self) => _rayRadius.Value.GetValue(__self);
		public static void SetRayRadius(this AI_State_Charge __self, float value) => _rayRadius.Value.SetValue(__self, value);
		public static bool GetIsAutoUpdatingChargeTargetting(this AI_State_Charge __self) => _isAutoUpdatingChargeTargetting.Value.GetValue(__self);
		public static void SetIsAutoUpdatingChargeTargetting(this AI_State_Charge __self, bool value) => _isAutoUpdatingChargeTargetting.Value.SetValue(__self, value);
		public static float GetAutoUpdateChargeTargettingDistance(this AI_State_Charge __self) => _autoUpdateChargeTargettingDistance.Value.GetValue(__self);
		public static void SetAutoUpdateChargeTargettingDistance(this AI_State_Charge __self, float value) => _autoUpdateChargeTargettingDistance.Value.SetValue(__self, value);
		public static bool GetKeepChargingWhileCloseToTarget(this AI_State_Charge __self) => _keepChargingWhileCloseToTarget.Value.GetValue(__self);
		public static void SetKeepChargingWhileCloseToTarget(this AI_State_Charge __self, bool value) => _keepChargingWhileCloseToTarget.Value.SetValue(__self, value);
		public static float GetDistanceToKeepCharging(this AI_State_Charge __self) => _distanceToKeepCharging.Value.GetValue(__self);
		public static void SetDistanceToKeepCharging(this AI_State_Charge __self, float value) => _distanceToKeepCharging.Value.SetValue(__self, value);
		public static bool GetIsFearlessInState(this AI_State_Charge __self) => _isFearlessInState.Value.GetValue(__self);
		public static void SetIsFearlessInState(this AI_State_Charge __self, bool value) => _isFearlessInState.Value.SetValue(__self, value);
		public static float GetStateChargeSpeed(this AI_State_Charge __self) => _stateChargeSpeed.Value.GetValue(__self);
		public static void SetStateChargeSpeed(this AI_State_Charge __self, float value) => _stateChargeSpeed.Value.SetValue(__self, value);
		public static float GetStateChargeModelTurnRate(this AI_State_Charge __self) => _stateChargeModelTurnRate.Value.GetValue(__self);
		public static void SetStateChargeModelTurnRate(this AI_State_Charge __self, float value) => _stateChargeModelTurnRate.Value.SetValue(__self, value);
		public static float GetChargeLerpTime(this AI_State_Charge __self) => _chargeLerpTime.Value.GetValue(__self);
		public static void SetChargeLerpTime(this AI_State_Charge __self, float value) => _chargeLerpTime.Value.SetValue(__self, value);
		public static bool GetKnocksPlayersBackOnDamageBoxHit(this AI_State_Charge __self) => _knocksPlayersBackOnDamageBoxHit.Value.GetValue(__self);
		public static void SetKnocksPlayersBackOnDamageBoxHit(this AI_State_Charge __self, bool value) => _knocksPlayersBackOnDamageBoxHit.Value.SetValue(__self, value);
		public static float GetKnockbackSpeedInheritanceMultipler(this AI_State_Charge __self) => _knockbackSpeedInheritanceMultipler.Value.GetValue(__self);
		public static void SetKnockbackSpeedInheritanceMultipler(this AI_State_Charge __self, float value) => _knockbackSpeedInheritanceMultipler.Value.SetValue(__self, value);
		public static float GetDistanceToReachPoint(this AI_State_Charge __self) => _distanceToReachPoint.Value.GetValue(__self);
		public static void SetDistanceToReachPoint(this AI_State_Charge __self, float value) => _distanceToReachPoint.Value.SetValue(__self, value);
		public static float GetDistanceToChargePointMinimum(this AI_State_Charge __self) => _distanceToChargePointMinimum.Value.GetValue(__self);
		public static void SetDistanceToChargePointMinimum(this AI_State_Charge __self, float value) => _distanceToChargePointMinimum.Value.SetValue(__self, value);
		public static MovementType GetChargeMovementType(this AI_State_Charge __self) => _chargeMovementType.Value.GetValue(__self);
		public static void SetChargeMovementType(this AI_State_Charge __self, MovementType value) => _chargeMovementType.Value.SetValue(__self, value);
		public static DamageBox GetChargeDamageBox(this AI_State_Charge __self) => _chargeDamageBox.Value.GetValue(__self);
		public static void SetChargeDamageBox(this AI_State_Charge __self, DamageBox value) => _chargeDamageBox.Value.SetValue(__self, value);
		public static bool GetExitStateOnDamageBoxHit(this AI_State_Charge __self) => _exitStateOnDamageBoxHit.Value.GetValue(__self);
		public static void SetExitStateOnDamageBoxHit(this AI_State_Charge __self, bool value) => _exitStateOnDamageBoxHit.Value.SetValue(__self, value);
		public static float GetNavMeshCheckDistance(this AI_State_Charge __self) => _navMeshCheckDistance.Value.GetValue(__self);
		public static void SetNavMeshCheckDistance(this AI_State_Charge __self, float value) => _navMeshCheckDistance.Value.SetValue(__self, value);
		public static float GetMinimumInterupptChargePlayerToTargetDistance(this AI_State_Charge __self) => _minimumInterupptChargePlayerToTargetDistance.Value.GetValue(__self);
		public static void SetMinimumInterupptChargePlayerToTargetDistance(this AI_State_Charge __self, float value) => _minimumInterupptChargePlayerToTargetDistance.Value.SetValue(__self, value);
		public static string GetEventRef_charge(this AI_State_Charge __self) => _eventRef_charge.Value.GetValue(__self);
		public static void SetEventRef_charge(this AI_State_Charge __self, string value) => _eventRef_charge.Value.SetValue(__self, value);
		public static string GetEventRef_hitPlayer(this AI_State_Charge __self) => _eventRef_hitPlayer.Value.GetValue(__self);
		public static void SetEventRef_hitPlayer(this AI_State_Charge __self, string value) => _eventRef_hitPlayer.Value.SetValue(__self, value);
		public static UnityEngine.RaycastHit GetLatestHitRay(this AI_State_Charge __self) => _latestHitRay.Value.GetValue(__self);
		public static void SetLatestHitRay(this AI_State_Charge __self, UnityEngine.RaycastHit value) => _latestHitRay.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetChargeTargetPoint(this AI_State_Charge __self) => _chargeTargetPoint.Value.GetValue(__self);
		public static void SetChargeTargetPoint(this AI_State_Charge __self, UnityEngine.Vector3 value) => _chargeTargetPoint.Value.SetValue(__self, value);
		public static AI_Movement GetMovement(this AI_State_Charge __self) => _movement.Value.GetValue(__self);
		public static void SetMovement(this AI_State_Charge __self, AI_Movement value) => _movement.Value.SetValue(__self, value);
		public static float GetChargeChannel(this AI_State_Charge __self) => _chargeChannel.Value.GetValue(__self);
		public static void SetChargeChannel(this AI_State_Charge __self, float value) => _chargeChannel.Value.SetValue(__self, value);
		public static Network_Host GetNetwork_Host(this AI_State_Charge __self) => _network_Host.Value.GetValue(__self);
		public static void SetNetwork_Host(this AI_State_Charge __self, Network_Host value) => _network_Host.Value.SetValue(__self, value);
		public static Network_Player GetEnemyTarget(this AI_State_Charge __self) => _enemyTarget.Value.GetValue(__self);
		public static void SetEnemyTarget(this AI_State_Charge __self, Network_Player value) => _enemyTarget.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_State_Charge>> _Awake757602046 =
				new System.Lazy<MethodAccessor<AI_State_Charge>>(() => MethodAccessor<AI_State_Charge>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<AI_State_Charge>> _Start757602046 =
				new System.Lazy<MethodAccessor<AI_State_Charge>>(() => MethodAccessor<AI_State_Charge>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<AI_State_Charge>> _OnDrawGizmos757602046 =
				new System.Lazy<MethodAccessor<AI_State_Charge>>(() => MethodAccessor<AI_State_Charge>.Create("OnDrawGizmos"));
		private static readonly System.Lazy<MethodAccessor<AI_State_Charge>> _HitPlayerLocally3461878659 =
				new System.Lazy<MethodAccessor<AI_State_Charge>>(() => MethodAccessor<AI_State_Charge>.Create("HitPlayerLocally", typeof(Network_Player)));
		private static readonly System.Lazy<MethodAccessor<AI_State_Charge>> _HandleEnemyTargetting3461878659 =
				new System.Lazy<MethodAccessor<AI_State_Charge>>(() => MethodAccessor<AI_State_Charge>.Create("HandleEnemyTargetting", typeof(Network_Player)));
		private static readonly System.Lazy<MethodAccessor<AI_State_Charge>> _GetPlayerTargettingVector757602046 =
				new System.Lazy<MethodAccessor<AI_State_Charge>>(() => MethodAccessor<AI_State_Charge>.Create("GetPlayerTargettingVector"));
		private static readonly System.Lazy<MethodAccessor<AI_State_Charge>> _ChargeCompleted3464942049 =
				new System.Lazy<MethodAccessor<AI_State_Charge>>(() => MethodAccessor<AI_State_Charge>.Create("ChargeCompleted", typeof(UnityEngine.RaycastHit)));
		private static readonly System.Lazy<MethodAccessor<AI_State_Charge>> _IsTooCloseToChargePoint757602046 =
				new System.Lazy<MethodAccessor<AI_State_Charge>>(() => MethodAccessor<AI_State_Charge>.Create("IsTooCloseToChargePoint"));
		private static readonly System.Lazy<MethodAccessor<AI_State_Charge>> _IsChargeTimeLimitPassed757602046 =
				new System.Lazy<MethodAccessor<AI_State_Charge>>(() => MethodAccessor<AI_State_Charge>.Create("IsChargeTimeLimitPassed"));
		private static readonly System.Lazy<MethodAccessor<AI_State_Charge>> _KeepCharging757602046 =
				new System.Lazy<MethodAccessor<AI_State_Charge>>(() => MethodAccessor<AI_State_Charge>.Create("KeepCharging"));
		private static readonly System.Lazy<MethodAccessor<AI_State_Charge>> _IsEnemyTargetCloseToChargePoint757602046 =
				new System.Lazy<MethodAccessor<AI_State_Charge>>(() => MethodAccessor<AI_State_Charge>.Create("IsEnemyTargetCloseToChargePoint"));
		private static readonly System.Lazy<MethodAccessor<AI_State_Charge>> _IsWithinTargetPointRange757602046 =
				new System.Lazy<MethodAccessor<AI_State_Charge>>(() => MethodAccessor<AI_State_Charge>.Create("IsWithinTargetPointRange"));

		public static void Awake(this AI_State_Charge __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this AI_State_Charge __self) => _Start757602046.Value.Invoke(__self);
		public static void OnDrawGizmos(this AI_State_Charge __self) => _OnDrawGizmos757602046.Value.Invoke(__self);
		public static void HitPlayerLocally(this AI_State_Charge __self, Network_Player player) => _HitPlayerLocally3461878659.Value.Invoke(__self, player);
		public static void HandleEnemyTargetting(this AI_State_Charge __self, Network_Player player) => _HandleEnemyTargetting3461878659.Value.Invoke(__self, player);
		public static UnityEngine.Vector3 GetPlayerTargettingVector(this AI_State_Charge __self) => (UnityEngine.Vector3)_GetPlayerTargettingVector757602046.Value.Invoke(__self);
		public static bool ChargeCompleted(this AI_State_Charge __self, UnityEngine.RaycastHit hitTowards) => (bool)_ChargeCompleted3464942049.Value.Invoke(__self, hitTowards);
		public static bool IsTooCloseToChargePoint(this AI_State_Charge __self) => (bool)_IsTooCloseToChargePoint757602046.Value.Invoke(__self);
		public static bool IsChargeTimeLimitPassed(this AI_State_Charge __self) => (bool)_IsChargeTimeLimitPassed757602046.Value.Invoke(__self);
		public static bool KeepCharging(this AI_State_Charge __self) => (bool)_KeepCharging757602046.Value.Invoke(__self);
		public static bool IsEnemyTargetCloseToChargePoint(this AI_State_Charge __self) => (bool)_IsEnemyTargetCloseToChargePoint757602046.Value.Invoke(__self);
		public static bool IsWithinTargetPointRange(this AI_State_Charge __self) => (bool)_IsWithinTargetPointRange757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AI_State_Chargeup_Boss_Varuna
	{

		private static readonly System.Lazy<FieldAccessor<AI_State_Chargeup_Boss_Varuna, float>> _chargeDirectionAngleMargin =
				new System.Lazy<FieldAccessor<AI_State_Chargeup_Boss_Varuna, float>>(() => FieldAccessor<AI_State_Chargeup_Boss_Varuna, float>.Create("chargeDirectionAngleMargin"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Chargeup_Boss_Varuna, float>> _rotationSpeed =
				new System.Lazy<FieldAccessor<AI_State_Chargeup_Boss_Varuna, float>>(() => FieldAccessor<AI_State_Chargeup_Boss_Varuna, float>.Create("rotationSpeed"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Chargeup_Boss_Varuna, float>> _minValidDistanceToChargeTarget =
				new System.Lazy<FieldAccessor<AI_State_Chargeup_Boss_Varuna, float>>(() => FieldAccessor<AI_State_Chargeup_Boss_Varuna, float>.Create("minValidDistanceToChargeTarget"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Chargeup_Boss_Varuna, AI_Movement>> _movement =
				new System.Lazy<FieldAccessor<AI_State_Chargeup_Boss_Varuna, AI_Movement>>(() => FieldAccessor<AI_State_Chargeup_Boss_Varuna, AI_Movement>.Create("movement"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Chargeup_Boss_Varuna, bool>> _lockOnMode =
				new System.Lazy<FieldAccessor<AI_State_Chargeup_Boss_Varuna, bool>>(() => FieldAccessor<AI_State_Chargeup_Boss_Varuna, bool>.Create("lockOnMode"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Chargeup_Boss_Varuna, bool>> _isFearlessInState =
				new System.Lazy<FieldAccessor<AI_State_Chargeup_Boss_Varuna, bool>>(() => FieldAccessor<AI_State_Chargeup_Boss_Varuna, bool>.Create("isFearlessInState"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Chargeup_Boss_Varuna, bool>> _ignoreYPositioning =
				new System.Lazy<FieldAccessor<AI_State_Chargeup_Boss_Varuna, bool>>(() => FieldAccessor<AI_State_Chargeup_Boss_Varuna, bool>.Create("ignoreYPositioning"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Chargeup_Boss_Varuna, bool>> _usesMovementPrediction =
				new System.Lazy<FieldAccessor<AI_State_Chargeup_Boss_Varuna, bool>>(() => FieldAccessor<AI_State_Chargeup_Boss_Varuna, bool>.Create("usesMovementPrediction"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Chargeup_Boss_Varuna, MovementDeltaTracker>> _playerMovementPredictor =
				new System.Lazy<FieldAccessor<AI_State_Chargeup_Boss_Varuna, MovementDeltaTracker>>(() => FieldAccessor<AI_State_Chargeup_Boss_Varuna, MovementDeltaTracker>.Create("playerMovementPredictor"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Chargeup_Boss_Varuna, AI_StateMachine_Boss_Varuna>> _bossSM =
				new System.Lazy<FieldAccessor<AI_State_Chargeup_Boss_Varuna, AI_StateMachine_Boss_Varuna>>(() => FieldAccessor<AI_State_Chargeup_Boss_Varuna, AI_StateMachine_Boss_Varuna>.Create("bossSM"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Chargeup_Boss_Varuna, bool>> _isLockedOn =
				new System.Lazy<FieldAccessor<AI_State_Chargeup_Boss_Varuna, bool>>(() => FieldAccessor<AI_State_Chargeup_Boss_Varuna, bool>.Create("isLockedOn"));

		public static float GetChargeDirectionAngleMargin(this AI_State_Chargeup_Boss_Varuna __self) => _chargeDirectionAngleMargin.Value.GetValue(__self);
		public static void SetChargeDirectionAngleMargin(this AI_State_Chargeup_Boss_Varuna __self, float value) => _chargeDirectionAngleMargin.Value.SetValue(__self, value);
		public static float GetRotationSpeed(this AI_State_Chargeup_Boss_Varuna __self) => _rotationSpeed.Value.GetValue(__self);
		public static void SetRotationSpeed(this AI_State_Chargeup_Boss_Varuna __self, float value) => _rotationSpeed.Value.SetValue(__self, value);
		public static float GetMinValidDistanceToChargeTarget(this AI_State_Chargeup_Boss_Varuna __self) => _minValidDistanceToChargeTarget.Value.GetValue(__self);
		public static void SetMinValidDistanceToChargeTarget(this AI_State_Chargeup_Boss_Varuna __self, float value) => _minValidDistanceToChargeTarget.Value.SetValue(__self, value);
		public static AI_Movement GetMovement(this AI_State_Chargeup_Boss_Varuna __self) => _movement.Value.GetValue(__self);
		public static void SetMovement(this AI_State_Chargeup_Boss_Varuna __self, AI_Movement value) => _movement.Value.SetValue(__self, value);
		public static bool GetLockOnMode(this AI_State_Chargeup_Boss_Varuna __self) => _lockOnMode.Value.GetValue(__self);
		public static void SetLockOnMode(this AI_State_Chargeup_Boss_Varuna __self, bool value) => _lockOnMode.Value.SetValue(__self, value);
		public static bool GetIsFearlessInState(this AI_State_Chargeup_Boss_Varuna __self) => _isFearlessInState.Value.GetValue(__self);
		public static void SetIsFearlessInState(this AI_State_Chargeup_Boss_Varuna __self, bool value) => _isFearlessInState.Value.SetValue(__self, value);
		public static bool GetIgnoreYPositioning(this AI_State_Chargeup_Boss_Varuna __self) => _ignoreYPositioning.Value.GetValue(__self);
		public static void SetIgnoreYPositioning(this AI_State_Chargeup_Boss_Varuna __self, bool value) => _ignoreYPositioning.Value.SetValue(__self, value);
		public static bool GetUsesMovementPrediction(this AI_State_Chargeup_Boss_Varuna __self) => _usesMovementPrediction.Value.GetValue(__self);
		public static void SetUsesMovementPrediction(this AI_State_Chargeup_Boss_Varuna __self, bool value) => _usesMovementPrediction.Value.SetValue(__self, value);
		public static MovementDeltaTracker GetPlayerMovementPredictor(this AI_State_Chargeup_Boss_Varuna __self) => _playerMovementPredictor.Value.GetValue(__self);
		public static void SetPlayerMovementPredictor(this AI_State_Chargeup_Boss_Varuna __self, MovementDeltaTracker value) => _playerMovementPredictor.Value.SetValue(__self, value);
		public static AI_StateMachine_Boss_Varuna GetBossSM(this AI_State_Chargeup_Boss_Varuna __self) => _bossSM.Value.GetValue(__self);
		public static void SetBossSM(this AI_State_Chargeup_Boss_Varuna __self, AI_StateMachine_Boss_Varuna value) => _bossSM.Value.SetValue(__self, value);
		public static bool GetIsLockedOn(this AI_State_Chargeup_Boss_Varuna __self) => _isLockedOn.Value.GetValue(__self);
		public static void SetIsLockedOn(this AI_State_Chargeup_Boss_Varuna __self, bool value) => _isLockedOn.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_State_Chargeup_Boss_Varuna>> _Awake757602046 =
				new System.Lazy<MethodAccessor<AI_State_Chargeup_Boss_Varuna>>(() => MethodAccessor<AI_State_Chargeup_Boss_Varuna>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<AI_State_Chargeup_Boss_Varuna>> _IncrementChannelTimer757602046 =
				new System.Lazy<MethodAccessor<AI_State_Chargeup_Boss_Varuna>>(() => MethodAccessor<AI_State_Chargeup_Boss_Varuna>.Create("IncrementChannelTimer"));
		private static readonly System.Lazy<MethodAccessor<AI_State_Chargeup_Boss_Varuna>> _ChannelCharge757602046 =
				new System.Lazy<MethodAccessor<AI_State_Chargeup_Boss_Varuna>>(() => MethodAccessor<AI_State_Chargeup_Boss_Varuna>.Create("ChannelCharge"));
		private static readonly System.Lazy<MethodAccessor<AI_State_Chargeup_Boss_Varuna>> _ChargeFinished757602046 =
				new System.Lazy<MethodAccessor<AI_State_Chargeup_Boss_Varuna>>(() => MethodAccessor<AI_State_Chargeup_Boss_Varuna>.Create("ChargeFinished"));
		private static readonly System.Lazy<MethodAccessor<AI_State_Chargeup_Boss_Varuna>> _ChangeToChargeChannelFinishedState757602046 =
				new System.Lazy<MethodAccessor<AI_State_Chargeup_Boss_Varuna>>(() => MethodAccessor<AI_State_Chargeup_Boss_Varuna>.Create("ChangeToChargeChannelFinishedState"));
		private static readonly System.Lazy<MethodAccessor<AI_State_Chargeup_Boss_Varuna>> _IsInAngle3450040886 =
				new System.Lazy<MethodAccessor<AI_State_Chargeup_Boss_Varuna>>(() => MethodAccessor<AI_State_Chargeup_Boss_Varuna>.Create("IsInAngle", typeof(bool)));

		public static void Awake(this AI_State_Chargeup_Boss_Varuna __self) => _Awake757602046.Value.Invoke(__self);
		public static void IncrementChannelTimer(this AI_State_Chargeup_Boss_Varuna __self) => _IncrementChannelTimer757602046.Value.Invoke(__self);
		public static void ChannelCharge(this AI_State_Chargeup_Boss_Varuna __self) => _ChannelCharge757602046.Value.Invoke(__self);
		public static void ChargeFinished(this AI_State_Chargeup_Boss_Varuna __self) => _ChargeFinished757602046.Value.Invoke(__self);
		public static void ChangeToChargeChannelFinishedState(this AI_State_Chargeup_Boss_Varuna __self) => _ChangeToChargeChannelFinishedState757602046.Value.Invoke(__self);
		public static bool IsInAngle(this AI_State_Chargeup_Boss_Varuna __self, bool ignoreY) => (bool)_IsInAngle3450040886.Value.Invoke(__self, ignoreY);

	}

	public static class PrivateAccessor_AI_State_VarunaBoss_Charge
	{

		private static readonly System.Lazy<FieldAccessor<AI_State_VarunaBoss_Charge, string>> _eventRef_hitWall =
				new System.Lazy<FieldAccessor<AI_State_VarunaBoss_Charge, string>>(() => FieldAccessor<AI_State_VarunaBoss_Charge, string>.Create("eventRef_hitWall"));
		private static readonly System.Lazy<FieldAccessor<AI_State_VarunaBoss_Charge, AI_StateMachine_Boss_Varuna>> _bossStatemachine =
				new System.Lazy<FieldAccessor<AI_State_VarunaBoss_Charge, AI_StateMachine_Boss_Varuna>>(() => FieldAccessor<AI_State_VarunaBoss_Charge, AI_StateMachine_Boss_Varuna>.Create("bossStatemachine"));

		public static string GetEventRef_hitWall(this AI_State_VarunaBoss_Charge __self) => _eventRef_hitWall.Value.GetValue(__self);
		public static void SetEventRef_hitWall(this AI_State_VarunaBoss_Charge __self, string value) => _eventRef_hitWall.Value.SetValue(__self, value);
		public static AI_StateMachine_Boss_Varuna GetBossStatemachine(this AI_State_VarunaBoss_Charge __self) => _bossStatemachine.Value.GetValue(__self);
		public static void SetBossStatemachine(this AI_State_VarunaBoss_Charge __self, AI_StateMachine_Boss_Varuna value) => _bossStatemachine.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_State_VarunaBoss_Charge>> _Start757602046 =
				new System.Lazy<MethodAccessor<AI_State_VarunaBoss_Charge>>(() => MethodAccessor<AI_State_VarunaBoss_Charge>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<AI_State_VarunaBoss_Charge>> _ChargeCompleted3464942049 =
				new System.Lazy<MethodAccessor<AI_State_VarunaBoss_Charge>>(() => MethodAccessor<AI_State_VarunaBoss_Charge>.Create("ChargeCompleted", typeof(UnityEngine.RaycastHit)));
		private static readonly System.Lazy<MethodAccessor<AI_State_VarunaBoss_Charge>> _HitPlayerLocally3461878659 =
				new System.Lazy<MethodAccessor<AI_State_VarunaBoss_Charge>>(() => MethodAccessor<AI_State_VarunaBoss_Charge>.Create("HitPlayerLocally", typeof(Network_Player)));
		private static readonly System.Lazy<MethodAccessor<AI_State_VarunaBoss_Charge>> _GetPlayerTargettingVector757602046 =
				new System.Lazy<MethodAccessor<AI_State_VarunaBoss_Charge>>(() => MethodAccessor<AI_State_VarunaBoss_Charge>.Create("GetPlayerTargettingVector"));

		public static void Start(this AI_State_VarunaBoss_Charge __self) => _Start757602046.Value.Invoke(__self);
		public static bool ChargeCompleted(this AI_State_VarunaBoss_Charge __self, UnityEngine.RaycastHit hitTowards) => (bool)_ChargeCompleted3464942049.Value.Invoke(__self, hitTowards);
		public static void HitPlayerLocally(this AI_State_VarunaBoss_Charge __self, Network_Player player) => _HitPlayerLocally3461878659.Value.Invoke(__self, player);
		public static UnityEngine.Vector3 GetPlayerTargettingVector(this AI_State_VarunaBoss_Charge __self) => (UnityEngine.Vector3)_GetPlayerTargettingVector757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AI_State_VarunaBoss_Intro
	{

		private static readonly System.Lazy<FieldAccessor<AI_State_VarunaBoss_Intro, AI_State>> _nextState =
				new System.Lazy<FieldAccessor<AI_State_VarunaBoss_Intro, AI_State>>(() => FieldAccessor<AI_State_VarunaBoss_Intro, AI_State>.Create("nextState"));
		private static readonly System.Lazy<FieldAccessor<AI_State_VarunaBoss_Intro, float>> _reverseSpeed =
				new System.Lazy<FieldAccessor<AI_State_VarunaBoss_Intro, float>>(() => FieldAccessor<AI_State_VarunaBoss_Intro, float>.Create("reverseSpeed"));
		private static readonly System.Lazy<FieldAccessor<AI_State_VarunaBoss_Intro, float>> _reverseTime =
				new System.Lazy<FieldAccessor<AI_State_VarunaBoss_Intro, float>>(() => FieldAccessor<AI_State_VarunaBoss_Intro, float>.Create("reverseTime"));
		private static readonly System.Lazy<FieldAccessor<AI_State_VarunaBoss_Intro, float>> _reverseTimer =
				new System.Lazy<FieldAccessor<AI_State_VarunaBoss_Intro, float>>(() => FieldAccessor<AI_State_VarunaBoss_Intro, float>.Create("reverseTimer"));

		public static AI_State GetNextState(this AI_State_VarunaBoss_Intro __self) => _nextState.Value.GetValue(__self);
		public static void SetNextState(this AI_State_VarunaBoss_Intro __self, AI_State value) => _nextState.Value.SetValue(__self, value);
		public static float GetReverseSpeed(this AI_State_VarunaBoss_Intro __self) => _reverseSpeed.Value.GetValue(__self);
		public static void SetReverseSpeed(this AI_State_VarunaBoss_Intro __self, float value) => _reverseSpeed.Value.SetValue(__self, value);
		public static float GetReverseTime(this AI_State_VarunaBoss_Intro __self) => _reverseTime.Value.GetValue(__self);
		public static void SetReverseTime(this AI_State_VarunaBoss_Intro __self, float value) => _reverseTime.Value.SetValue(__self, value);
		public static float GetReverseTimer(this AI_State_VarunaBoss_Intro __self) => _reverseTimer.Value.GetValue(__self);
		public static void SetReverseTimer(this AI_State_VarunaBoss_Intro __self, float value) => _reverseTimer.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_AI_State_VarunaBoss_WaitForQuest
	{

		private static readonly System.Lazy<FieldAccessor<AI_State_VarunaBoss_WaitForQuest, AI_StateMachine_Boss_Varuna>> _bossSM =
				new System.Lazy<FieldAccessor<AI_State_VarunaBoss_WaitForQuest, AI_StateMachine_Boss_Varuna>>(() => FieldAccessor<AI_State_VarunaBoss_WaitForQuest, AI_StateMachine_Boss_Varuna>.Create("bossSM"));

		public static AI_StateMachine_Boss_Varuna GetBossSM(this AI_State_VarunaBoss_WaitForQuest __self) => _bossSM.Value.GetValue(__self);
		public static void SetBossSM(this AI_State_VarunaBoss_WaitForQuest __self, AI_StateMachine_Boss_Varuna value) => _bossSM.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_State_VarunaBoss_WaitForQuest>> _Start757602046 =
				new System.Lazy<MethodAccessor<AI_State_VarunaBoss_WaitForQuest>>(() => MethodAccessor<AI_State_VarunaBoss_WaitForQuest>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<AI_State_VarunaBoss_WaitForQuest>> _SwapState757602046 =
				new System.Lazy<MethodAccessor<AI_State_VarunaBoss_WaitForQuest>>(() => MethodAccessor<AI_State_VarunaBoss_WaitForQuest>.Create("SwapState"));

		public static void Start(this AI_State_VarunaBoss_WaitForQuest __self) => _Start757602046.Value.Invoke(__self);
		public static void SwapState(this AI_State_VarunaBoss_WaitForQuest __self) => _SwapState757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AI_State_VarunaBoss_Waypoint_Circulation
	{

		private static readonly System.Lazy<FieldAccessor<AI_State_VarunaBoss_Waypoint_Circulation, int>> _minimumOuterCiculationWaypointCount =
				new System.Lazy<FieldAccessor<AI_State_VarunaBoss_Waypoint_Circulation, int>>(() => FieldAccessor<AI_State_VarunaBoss_Waypoint_Circulation, int>.Create("minimumOuterCiculationWaypointCount"));
		private static readonly System.Lazy<FieldAccessor<AI_State_VarunaBoss_Waypoint_Circulation, int>> _maximumOuterCiculationWaypointCount =
				new System.Lazy<FieldAccessor<AI_State_VarunaBoss_Waypoint_Circulation, int>>(() => FieldAccessor<AI_State_VarunaBoss_Waypoint_Circulation, int>.Create("maximumOuterCiculationWaypointCount"));
		private static readonly System.Lazy<FieldAccessor<AI_State_VarunaBoss_Waypoint_Circulation, float>> _gateWayDestuctionDelay =
				new System.Lazy<FieldAccessor<AI_State_VarunaBoss_Waypoint_Circulation, float>>(() => FieldAccessor<AI_State_VarunaBoss_Waypoint_Circulation, float>.Create("gateWayDestuctionDelay"));
		private static readonly System.Lazy<FieldAccessor<AI_State_VarunaBoss_Waypoint_Circulation, float>> _seePlayerCooldownOnDestroyWall =
				new System.Lazy<FieldAccessor<AI_State_VarunaBoss_Waypoint_Circulation, float>>(() => FieldAccessor<AI_State_VarunaBoss_Waypoint_Circulation, float>.Create("seePlayerCooldownOnDestroyWall"));
		private static readonly System.Lazy<FieldAccessor<AI_State_VarunaBoss_Waypoint_Circulation, AI_StateMachine_Boss_Varuna>> _bossStateMachine =
				new System.Lazy<FieldAccessor<AI_State_VarunaBoss_Waypoint_Circulation, AI_StateMachine_Boss_Varuna>>(() => FieldAccessor<AI_State_VarunaBoss_Waypoint_Circulation, AI_StateMachine_Boss_Varuna>.Create("bossStateMachine"));

		public static int GetMinimumOuterCiculationWaypointCount(this AI_State_VarunaBoss_Waypoint_Circulation __self) => _minimumOuterCiculationWaypointCount.Value.GetValue(__self);
		public static void SetMinimumOuterCiculationWaypointCount(this AI_State_VarunaBoss_Waypoint_Circulation __self, int value) => _minimumOuterCiculationWaypointCount.Value.SetValue(__self, value);
		public static int GetMaximumOuterCiculationWaypointCount(this AI_State_VarunaBoss_Waypoint_Circulation __self) => _maximumOuterCiculationWaypointCount.Value.GetValue(__self);
		public static void SetMaximumOuterCiculationWaypointCount(this AI_State_VarunaBoss_Waypoint_Circulation __self, int value) => _maximumOuterCiculationWaypointCount.Value.SetValue(__self, value);
		public static float GetGateWayDestuctionDelay(this AI_State_VarunaBoss_Waypoint_Circulation __self) => _gateWayDestuctionDelay.Value.GetValue(__self);
		public static void SetGateWayDestuctionDelay(this AI_State_VarunaBoss_Waypoint_Circulation __self, float value) => _gateWayDestuctionDelay.Value.SetValue(__self, value);
		public static float GetSeePlayerCooldownOnDestroyWall(this AI_State_VarunaBoss_Waypoint_Circulation __self) => _seePlayerCooldownOnDestroyWall.Value.GetValue(__self);
		public static void SetSeePlayerCooldownOnDestroyWall(this AI_State_VarunaBoss_Waypoint_Circulation __self, float value) => _seePlayerCooldownOnDestroyWall.Value.SetValue(__self, value);
		public static AI_StateMachine_Boss_Varuna GetBossStateMachine(this AI_State_VarunaBoss_Waypoint_Circulation __self) => _bossStateMachine.Value.GetValue(__self);
		public static void SetBossStateMachine(this AI_State_VarunaBoss_Waypoint_Circulation __self, AI_StateMachine_Boss_Varuna value) => _bossStateMachine.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_State_VarunaBoss_Waypoint_Circulation>> _Start757602046 =
				new System.Lazy<MethodAccessor<AI_State_VarunaBoss_Waypoint_Circulation>>(() => MethodAccessor<AI_State_VarunaBoss_Waypoint_Circulation>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<AI_State_VarunaBoss_Waypoint_Circulation>> _OnLocalGateWayUse1030423816 =
				new System.Lazy<MethodAccessor<AI_State_VarunaBoss_Waypoint_Circulation>>(() => MethodAccessor<AI_State_VarunaBoss_Waypoint_Circulation>.Create("OnLocalGateWayUse", typeof(Waypoint), typeof(Waypoint)));
		private static readonly System.Lazy<MethodAccessor<AI_State_VarunaBoss_Waypoint_Circulation>> _DestroyWall3645351154 =
				new System.Lazy<MethodAccessor<AI_State_VarunaBoss_Waypoint_Circulation>>(() => MethodAccessor<AI_State_VarunaBoss_Waypoint_Circulation>.Create("DestroyWall", typeof(QuestInteractable_VarunaBoss_Wall), typeof(float)));

		public static void Start(this AI_State_VarunaBoss_Waypoint_Circulation __self) => _Start757602046.Value.Invoke(__self);
		public static void OnLocalGateWayUse(this AI_State_VarunaBoss_Waypoint_Circulation __self, Waypoint from, Waypoint to) => _OnLocalGateWayUse1030423816.Value.Invoke(__self, from, to);
		public static System.Collections.IEnumerator DestroyWall(this AI_State_VarunaBoss_Waypoint_Circulation __self, QuestInteractable_VarunaBoss_Wall wall, float waitTime) => (System.Collections.IEnumerator)_DestroyWall3645351154.Value.Invoke(__self, wall, waitTime);

	}

	public static class Private_AI_State_VarunaBoss_Waypoint_Circulation
	{

		private static readonly System.Lazy<StaticMethodAccessor> _WaypointHandlerToFloor3451702837 =
				new System.Lazy<StaticMethodAccessor>(() => StaticMethodAccessor.Create(typeof(AI_State_VarunaBoss_Waypoint_Circulation), "WaypointHandlerToFloor", typeof(ObjectOfInterestType)));

		public static ObjectOfInterestType WaypointHandlerToFloor(ObjectOfInterestType wayPointID) => (ObjectOfInterestType)_WaypointHandlerToFloor3451702837.Value.Invoke(wayPointID);

	}

	public static class PrivateAccessor_AI_State_Waypoint_Circulation
	{

		private static readonly System.Lazy<FieldAccessor<AI_State_Waypoint_Circulation, MovementType>> _movementType =
				new System.Lazy<FieldAccessor<AI_State_Waypoint_Circulation, MovementType>>(() => FieldAccessor<AI_State_Waypoint_Circulation, MovementType>.Create("movementType"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Waypoint_Circulation, bool>> _isChasingInitialWaypoint =
				new System.Lazy<FieldAccessor<AI_State_Waypoint_Circulation, bool>>(() => FieldAccessor<AI_State_Waypoint_Circulation, bool>.Create("isChasingInitialWaypoint"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Waypoint_Circulation, int>> _currentCirculationIndex =
				new System.Lazy<FieldAccessor<AI_State_Waypoint_Circulation, int>>(() => FieldAccessor<AI_State_Waypoint_Circulation, int>.Create("currentCirculationIndex"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Waypoint_Circulation, UnityEngine.Vector3>> _targetPoint =
				new System.Lazy<FieldAccessor<AI_State_Waypoint_Circulation, UnityEngine.Vector3>>(() => FieldAccessor<AI_State_Waypoint_Circulation, UnityEngine.Vector3>.Create("targetPoint"));

		public static MovementType GetMovementType(this AI_State_Waypoint_Circulation __self) => _movementType.Value.GetValue(__self);
		public static void SetMovementType(this AI_State_Waypoint_Circulation __self, MovementType value) => _movementType.Value.SetValue(__self, value);
		public static bool GetIsChasingInitialWaypoint(this AI_State_Waypoint_Circulation __self) => _isChasingInitialWaypoint.Value.GetValue(__self);
		public static void SetIsChasingInitialWaypoint(this AI_State_Waypoint_Circulation __self, bool value) => _isChasingInitialWaypoint.Value.SetValue(__self, value);
		public static int GetCurrentCirculationIndex(this AI_State_Waypoint_Circulation __self) => _currentCirculationIndex.Value.GetValue(__self);
		public static void SetCurrentCirculationIndex(this AI_State_Waypoint_Circulation __self, int value) => _currentCirculationIndex.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetTargetPoint(this AI_State_Waypoint_Circulation __self) => _targetPoint.Value.GetValue(__self);
		public static void SetTargetPoint(this AI_State_Waypoint_Circulation __self, UnityEngine.Vector3 value) => _targetPoint.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_State_Waypoint_Circulation>> _Start757602046 =
				new System.Lazy<MethodAccessor<AI_State_Waypoint_Circulation>>(() => MethodAccessor<AI_State_Waypoint_Circulation>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<AI_State_Waypoint_Circulation>> _Destroy757602046 =
				new System.Lazy<MethodAccessor<AI_State_Waypoint_Circulation>>(() => MethodAccessor<AI_State_Waypoint_Circulation>.Create("Destroy"));
		private static readonly System.Lazy<MethodAccessor<AI_State_Waypoint_Circulation>> _OnLocalWaypointUsed1030423816 =
				new System.Lazy<MethodAccessor<AI_State_Waypoint_Circulation>>(() => MethodAccessor<AI_State_Waypoint_Circulation>.Create("OnLocalWaypointUsed", typeof(Waypoint), typeof(Waypoint)));
		private static readonly System.Lazy<MethodAccessor<AI_State_Waypoint_Circulation>> _OnLocalGateWayUse1030423816 =
				new System.Lazy<MethodAccessor<AI_State_Waypoint_Circulation>>(() => MethodAccessor<AI_State_Waypoint_Circulation>.Create("OnLocalGateWayUse", typeof(Waypoint), typeof(Waypoint)));
		private static readonly System.Lazy<MethodAccessor<AI_State_Waypoint_Circulation>> _HandleMovement1402539434 =
				new System.Lazy<MethodAccessor<AI_State_Waypoint_Circulation>>(() => MethodAccessor<AI_State_Waypoint_Circulation>.Create("HandleMovement", typeof(UnityEngine.Vector3), typeof(MovementType)));
		private static readonly System.Lazy<MethodAccessor<AI_State_Waypoint_Circulation>> _HandleStuckMovement1402539434 =
				new System.Lazy<MethodAccessor<AI_State_Waypoint_Circulation>>(() => MethodAccessor<AI_State_Waypoint_Circulation>.Create("HandleStuckMovement", typeof(UnityEngine.Vector3), typeof(MovementType)));
		private static readonly System.Lazy<MethodAccessor<AI_State_Waypoint_Circulation>> _OnSwitchCirulationID757602046 =
				new System.Lazy<MethodAccessor<AI_State_Waypoint_Circulation>>(() => MethodAccessor<AI_State_Waypoint_Circulation>.Create("OnSwitchCirulationID"));
		private static readonly System.Lazy<MethodAccessor<AI_State_Waypoint_Circulation>> _OnIsStuck1592449836 =
				new System.Lazy<MethodAccessor<AI_State_Waypoint_Circulation>>(() => MethodAccessor<AI_State_Waypoint_Circulation>.Create("OnIsStuck", typeof(bool), typeof(Unstuck_Tracker)));
		private static readonly System.Lazy<MethodAccessor<AI_State_Waypoint_Circulation>> _ResetState757602046 =
				new System.Lazy<MethodAccessor<AI_State_Waypoint_Circulation>>(() => MethodAccessor<AI_State_Waypoint_Circulation>.Create("ResetState"));

		public static void Start(this AI_State_Waypoint_Circulation __self) => _Start757602046.Value.Invoke(__self);
		public static void Destroy(this AI_State_Waypoint_Circulation __self) => _Destroy757602046.Value.Invoke(__self);
		public static void OnLocalWaypointUsed(this AI_State_Waypoint_Circulation __self, Waypoint from, Waypoint to) => _OnLocalWaypointUsed1030423816.Value.Invoke(__self, from, to);
		public static void OnLocalGateWayUse(this AI_State_Waypoint_Circulation __self, Waypoint from, Waypoint to) => _OnLocalGateWayUse1030423816.Value.Invoke(__self, from, to);
		public static void HandleMovement(this AI_State_Waypoint_Circulation __self, UnityEngine.Vector3 targetPoint, MovementType movementType) => _HandleMovement1402539434.Value.Invoke(__self, targetPoint, movementType);
		public static void HandleStuckMovement(this AI_State_Waypoint_Circulation __self, UnityEngine.Vector3 targetPoint, MovementType unstuckMovementType) => _HandleStuckMovement1402539434.Value.Invoke(__self, targetPoint, unstuckMovementType);
		public static void OnSwitchCirulationID(this AI_State_Waypoint_Circulation __self) => _OnSwitchCirulationID757602046.Value.Invoke(__self);
		public static void OnIsStuck(this AI_State_Waypoint_Circulation __self, bool value, Unstuck_Tracker unstuckTracker) => _OnIsStuck1592449836.Value.Invoke(__self, value, unstuckTracker);
		public static void ResetState(this AI_State_Waypoint_Circulation __self) => _ResetState757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_WaypointHandler
	{

		private static readonly System.Lazy<FieldAccessor<WaypointHandler, System.Collections.Generic.List<Waypoint>>> _calculationWayPoints =
				new System.Lazy<FieldAccessor<WaypointHandler, System.Collections.Generic.List<Waypoint>>>(() => FieldAccessor<WaypointHandler, System.Collections.Generic.List<Waypoint>>.Create("calculationWayPoints"));

		public static System.Collections.Generic.List<Waypoint> GetCalculationWayPoints(this WaypointHandler __self) => _calculationWayPoints.Value.GetValue(__self);
		public static void SetCalculationWayPoints(this WaypointHandler __self, System.Collections.Generic.List<Waypoint> value) => _calculationWayPoints.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<WaypointHandler>> _Awake757602046 =
				new System.Lazy<MethodAccessor<WaypointHandler>>(() => MethodAccessor<WaypointHandler>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<WaypointHandler>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<WaypointHandler>>(() => MethodAccessor<WaypointHandler>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<WaypointHandler>> _ConnectListOfWaypoints3477609508 =
				new System.Lazy<MethodAccessor<WaypointHandler>>(() => MethodAccessor<WaypointHandler>.Create("ConnectListOfWaypoints", typeof(System.Collections.Generic.List<Waypoint>)));
		private static readonly System.Lazy<MethodAccessor<WaypointHandler>> _SortWaypointsByDistanceToPoint3429126434 =
				new System.Lazy<MethodAccessor<WaypointHandler>>(() => MethodAccessor<WaypointHandler>.Create("SortWaypointsByDistanceToPoint", typeof(UnityEngine.Vector3)));

		public static void Awake(this WaypointHandler __self) => _Awake757602046.Value.Invoke(__self);
		public static void OnDestroy(this WaypointHandler __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void ConnectListOfWaypoints(this WaypointHandler __self, System.Collections.Generic.List<Waypoint> waypoints) => _ConnectListOfWaypoints3477609508.Value.Invoke(__self, waypoints);
		public static void SortWaypointsByDistanceToPoint(this WaypointHandler __self, UnityEngine.Vector3 worldPoint) => _SortWaypointsByDistanceToPoint3429126434.Value.Invoke(__self, worldPoint);

	}

	public static class PrivateAccessor_AI_State_Charger_Charge
	{

		private static readonly System.Lazy<FieldAccessor<AI_State_Charger_Charge, AI_State>> _nextState =
				new System.Lazy<FieldAccessor<AI_State_Charger_Charge, AI_State>>(() => FieldAccessor<AI_State_Charger_Charge, AI_State>.Create("nextState"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Charger_Charge, float>> _chargeLoadTime =
				new System.Lazy<FieldAccessor<AI_State_Charger_Charge, float>>(() => FieldAccessor<AI_State_Charger_Charge, float>.Create("chargeLoadTime"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Charger_Charge, float>> _chargeRotateSpeed =
				new System.Lazy<FieldAccessor<AI_State_Charger_Charge, float>>(() => FieldAccessor<AI_State_Charger_Charge, float>.Create("chargeRotateSpeed"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Charger_Charge, float>> _chargeSpeed =
				new System.Lazy<FieldAccessor<AI_State_Charger_Charge, float>>(() => FieldAccessor<AI_State_Charger_Charge, float>.Create("chargeSpeed"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Charger_Charge, float>> _chargeDamage =
				new System.Lazy<FieldAccessor<AI_State_Charger_Charge, float>>(() => FieldAccessor<AI_State_Charger_Charge, float>.Create("chargeDamage"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Charger_Charge, float>> _maxChargeDistance =
				new System.Lazy<FieldAccessor<AI_State_Charger_Charge, float>>(() => FieldAccessor<AI_State_Charger_Charge, float>.Create("maxChargeDistance"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Charger_Charge, AI_Movement>> _movement =
				new System.Lazy<FieldAccessor<AI_State_Charger_Charge, AI_Movement>>(() => FieldAccessor<AI_State_Charger_Charge, AI_Movement>.Create("movement"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Charger_Charge, bool>> _charge =
				new System.Lazy<FieldAccessor<AI_State_Charger_Charge, bool>>(() => FieldAccessor<AI_State_Charger_Charge, bool>.Create("charge"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Charger_Charge, AI_StateMachine_Charger>> _charger =
				new System.Lazy<FieldAccessor<AI_State_Charger_Charge, AI_StateMachine_Charger>>(() => FieldAccessor<AI_State_Charger_Charge, AI_StateMachine_Charger>.Create("charger"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Charger_Charge, UnityEngine.Vector3>> _chargePosition =
				new System.Lazy<FieldAccessor<AI_State_Charger_Charge, UnityEngine.Vector3>>(() => FieldAccessor<AI_State_Charger_Charge, UnityEngine.Vector3>.Create("chargePosition"));

		public static AI_State GetNextState(this AI_State_Charger_Charge __self) => _nextState.Value.GetValue(__self);
		public static void SetNextState(this AI_State_Charger_Charge __self, AI_State value) => _nextState.Value.SetValue(__self, value);
		public static float GetChargeLoadTime(this AI_State_Charger_Charge __self) => _chargeLoadTime.Value.GetValue(__self);
		public static void SetChargeLoadTime(this AI_State_Charger_Charge __self, float value) => _chargeLoadTime.Value.SetValue(__self, value);
		public static float GetChargeRotateSpeed(this AI_State_Charger_Charge __self) => _chargeRotateSpeed.Value.GetValue(__self);
		public static void SetChargeRotateSpeed(this AI_State_Charger_Charge __self, float value) => _chargeRotateSpeed.Value.SetValue(__self, value);
		public static float GetChargeSpeed(this AI_State_Charger_Charge __self) => _chargeSpeed.Value.GetValue(__self);
		public static void SetChargeSpeed(this AI_State_Charger_Charge __self, float value) => _chargeSpeed.Value.SetValue(__self, value);
		public static float GetChargeDamage(this AI_State_Charger_Charge __self) => _chargeDamage.Value.GetValue(__self);
		public static void SetChargeDamage(this AI_State_Charger_Charge __self, float value) => _chargeDamage.Value.SetValue(__self, value);
		public static float GetMaxChargeDistance(this AI_State_Charger_Charge __self) => _maxChargeDistance.Value.GetValue(__self);
		public static void SetMaxChargeDistance(this AI_State_Charger_Charge __self, float value) => _maxChargeDistance.Value.SetValue(__self, value);
		public static AI_Movement GetMovement(this AI_State_Charger_Charge __self) => _movement.Value.GetValue(__self);
		public static void SetMovement(this AI_State_Charger_Charge __self, AI_Movement value) => _movement.Value.SetValue(__self, value);
		public static bool GetCharge(this AI_State_Charger_Charge __self) => _charge.Value.GetValue(__self);
		public static void SetCharge(this AI_State_Charger_Charge __self, bool value) => _charge.Value.SetValue(__self, value);
		public static AI_StateMachine_Charger GetCharger(this AI_State_Charger_Charge __self) => _charger.Value.GetValue(__self);
		public static void SetCharger(this AI_State_Charger_Charge __self, AI_StateMachine_Charger value) => _charger.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetChargePosition(this AI_State_Charger_Charge __self) => _chargePosition.Value.GetValue(__self);
		public static void SetChargePosition(this AI_State_Charger_Charge __self, UnityEngine.Vector3 value) => _chargePosition.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_State_Charger_Charge>> _Awake757602046 =
				new System.Lazy<MethodAccessor<AI_State_Charger_Charge>>(() => MethodAccessor<AI_State_Charger_Charge>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<AI_State_Charger_Charge>> _EndCharge757602046 =
				new System.Lazy<MethodAccessor<AI_State_Charger_Charge>>(() => MethodAccessor<AI_State_Charger_Charge>.Create("EndCharge"));
		private static readonly System.Lazy<MethodAccessor<AI_State_Charger_Charge>> _LoadCharge757602046 =
				new System.Lazy<MethodAccessor<AI_State_Charger_Charge>>(() => MethodAccessor<AI_State_Charger_Charge>.Create("LoadCharge"));

		public static void Awake(this AI_State_Charger_Charge __self) => _Awake757602046.Value.Invoke(__self);
		public static System.Collections.IEnumerator EndCharge(this AI_State_Charger_Charge __self) => (System.Collections.IEnumerator)_EndCharge757602046.Value.Invoke(__self);
		public static System.Collections.IEnumerator LoadCharge(this AI_State_Charger_Charge __self) => (System.Collections.IEnumerator)_LoadCharge757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AI_State_Captured
	{

		private static readonly System.Lazy<FieldAccessor<AI_State_Captured, UnityEngine.GameObject>> _capturedNetModel =
				new System.Lazy<FieldAccessor<AI_State_Captured, UnityEngine.GameObject>>(() => FieldAccessor<AI_State_Captured, UnityEngine.GameObject>.Create("capturedNetModel"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Captured, AI_NetworkBehaviour_Domestic>> _domesticBehaviour =
				new System.Lazy<FieldAccessor<AI_State_Captured, AI_NetworkBehaviour_Domestic>>(() => FieldAccessor<AI_State_Captured, AI_NetworkBehaviour_Domestic>.Create("domesticBehaviour"));

		public static UnityEngine.GameObject GetCapturedNetModel(this AI_State_Captured __self) => _capturedNetModel.Value.GetValue(__self);
		public static void SetCapturedNetModel(this AI_State_Captured __self, UnityEngine.GameObject value) => _capturedNetModel.Value.SetValue(__self, value);
		public static AI_NetworkBehaviour_Domestic GetDomesticBehaviour(this AI_State_Captured __self) => _domesticBehaviour.Value.GetValue(__self);
		public static void SetDomesticBehaviour(this AI_State_Captured __self, AI_NetworkBehaviour_Domestic value) => _domesticBehaviour.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_State_Captured>> _Awake757602046 =
				new System.Lazy<MethodAccessor<AI_State_Captured>>(() => MethodAccessor<AI_State_Captured>.Create("Awake"));

		public static void Awake(this AI_State_Captured __self) => _Awake757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AI_State_Carried
	{

		private static readonly System.Lazy<FieldAccessor<AI_State_Carried, AI_NetworkBehaviour_Domestic>> _domesticBehaviour =
				new System.Lazy<FieldAccessor<AI_State_Carried, AI_NetworkBehaviour_Domestic>>(() => FieldAccessor<AI_State_Carried, AI_NetworkBehaviour_Domestic>.Create("domesticBehaviour"));

		public static AI_NetworkBehaviour_Domestic GetDomesticBehaviour(this AI_State_Carried __self) => _domesticBehaviour.Value.GetValue(__self);
		public static void SetDomesticBehaviour(this AI_State_Carried __self, AI_NetworkBehaviour_Domestic value) => _domesticBehaviour.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_State_Carried>> _Awake757602046 =
				new System.Lazy<MethodAccessor<AI_State_Carried>>(() => MethodAccessor<AI_State_Carried>.Create("Awake"));

		public static void Awake(this AI_State_Carried __self) => _Awake757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AI_State_Dead_Domestic
	{

		private static readonly System.Lazy<FieldAccessor<AI_State_Dead_Domestic, AI_StateMachine_Domestic>> _stateMachineDomestic =
				new System.Lazy<FieldAccessor<AI_State_Dead_Domestic, AI_StateMachine_Domestic>>(() => FieldAccessor<AI_State_Dead_Domestic, AI_StateMachine_Domestic>.Create("stateMachineDomestic"));

		public static AI_StateMachine_Domestic GetStateMachineDomestic(this AI_State_Dead_Domestic __self) => _stateMachineDomestic.Value.GetValue(__self);
		public static void SetStateMachineDomestic(this AI_State_Dead_Domestic __self, AI_StateMachine_Domestic value) => _stateMachineDomestic.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_State_Dead_Domestic>> _Start757602046 =
				new System.Lazy<MethodAccessor<AI_State_Dead_Domestic>>(() => MethodAccessor<AI_State_Dead_Domestic>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<AI_State_Dead_Domestic>> _OnApplyRagdollForce3429126434 =
				new System.Lazy<MethodAccessor<AI_State_Dead_Domestic>>(() => MethodAccessor<AI_State_Dead_Domestic>.Create("OnApplyRagdollForce", typeof(UnityEngine.Vector3)));

		public static void Start(this AI_State_Dead_Domestic __self) => _Start757602046.Value.Invoke(__self);
		public static void OnApplyRagdollForce(this AI_State_Dead_Domestic __self, UnityEngine.Vector3 force) => _OnApplyRagdollForce3429126434.Value.Invoke(__self, force);

	}

	public static class PrivateAccessor_AI_State_Domestic_Eat
	{

		private static readonly System.Lazy<FieldAccessor<AI_State_Domestic_Eat, PlantManager>> _plantManager =
				new System.Lazy<FieldAccessor<AI_State_Domestic_Eat, PlantManager>>(() => FieldAccessor<AI_State_Domestic_Eat, PlantManager>.Create("plantManager"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Domestic_Eat, AI_NetworkBehaviour_Domestic>> _domesticBehaviour =
				new System.Lazy<FieldAccessor<AI_State_Domestic_Eat, AI_NetworkBehaviour_Domestic>>(() => FieldAccessor<AI_State_Domestic_Eat, AI_NetworkBehaviour_Domestic>.Create("domesticBehaviour"));

		public static PlantManager GetPlantManager(this AI_State_Domestic_Eat __self) => _plantManager.Value.GetValue(__self);
		public static void SetPlantManager(this AI_State_Domestic_Eat __self, PlantManager value) => _plantManager.Value.SetValue(__self, value);
		public static AI_NetworkBehaviour_Domestic GetDomesticBehaviour(this AI_State_Domestic_Eat __self) => _domesticBehaviour.Value.GetValue(__self);
		public static void SetDomesticBehaviour(this AI_State_Domestic_Eat __self, AI_NetworkBehaviour_Domestic value) => _domesticBehaviour.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_State_Domestic_Eat>> _Start757602046 =
				new System.Lazy<MethodAccessor<AI_State_Domestic_Eat>>(() => MethodAccessor<AI_State_Domestic_Eat>.Create("Start"));

		public static void Start(this AI_State_Domestic_Eat __self) => _Start757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AI_State_Domestic_Hungry
	{

		private static readonly System.Lazy<FieldAccessor<AI_State_Domestic_Hungry, AI_State_Domestic_Eat>> _eatState =
				new System.Lazy<FieldAccessor<AI_State_Domestic_Hungry, AI_State_Domestic_Eat>>(() => FieldAccessor<AI_State_Domestic_Hungry, AI_State_Domestic_Eat>.Create("eatState"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Domestic_Hungry, AI_State_Domestic_Walk>> _defaultNoFoodStrafeState =
				new System.Lazy<FieldAccessor<AI_State_Domestic_Hungry, AI_State_Domestic_Walk>>(() => FieldAccessor<AI_State_Domestic_Hungry, AI_State_Domestic_Walk>.Create("defaultNoFoodStrafeState"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Domestic_Hungry, float>> _minDistanceToEat =
				new System.Lazy<FieldAccessor<AI_State_Domestic_Hungry, float>>(() => FieldAccessor<AI_State_Domestic_Hungry, float>.Create("minDistanceToEat"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Domestic_Hungry, float>> _originFoodCheckCooldown =
				new System.Lazy<FieldAccessor<AI_State_Domestic_Hungry, float>>(() => FieldAccessor<AI_State_Domestic_Hungry, float>.Create("originFoodCheckCooldown"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Domestic_Hungry, float>> _foodCheckDistance =
				new System.Lazy<FieldAccessor<AI_State_Domestic_Hungry, float>>(() => FieldAccessor<AI_State_Domestic_Hungry, float>.Create("foodCheckDistance"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Domestic_Hungry, UnityEngine.LayerMask>> _foodObstructionLayer =
				new System.Lazy<FieldAccessor<AI_State_Domestic_Hungry, UnityEngine.LayerMask>>(() => FieldAccessor<AI_State_Domestic_Hungry, UnityEngine.LayerMask>.Create("foodObstructionLayer"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Domestic_Hungry, float>> _reEnterStateCooldown =
				new System.Lazy<FieldAccessor<AI_State_Domestic_Hungry, float>>(() => FieldAccessor<AI_State_Domestic_Hungry, float>.Create("reEnterStateCooldown"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Domestic_Hungry, AI_StateMachine_Domestic>> _stateMachine_Domestic =
				new System.Lazy<FieldAccessor<AI_State_Domestic_Hungry, AI_StateMachine_Domestic>>(() => FieldAccessor<AI_State_Domestic_Hungry, AI_StateMachine_Domestic>.Create("stateMachine_Domestic"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Domestic_Hungry, Plant>> _targetFood =
				new System.Lazy<FieldAccessor<AI_State_Domestic_Hungry, Plant>>(() => FieldAccessor<AI_State_Domestic_Hungry, Plant>.Create("targetFood"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Domestic_Hungry, float>> _foodCheckCooldown =
				new System.Lazy<FieldAccessor<AI_State_Domestic_Hungry, float>>(() => FieldAccessor<AI_State_Domestic_Hungry, float>.Create("foodCheckCooldown"));

		public static AI_State_Domestic_Eat GetEatState(this AI_State_Domestic_Hungry __self) => _eatState.Value.GetValue(__self);
		public static void SetEatState(this AI_State_Domestic_Hungry __self, AI_State_Domestic_Eat value) => _eatState.Value.SetValue(__self, value);
		public static AI_State_Domestic_Walk GetDefaultNoFoodStrafeState(this AI_State_Domestic_Hungry __self) => _defaultNoFoodStrafeState.Value.GetValue(__self);
		public static void SetDefaultNoFoodStrafeState(this AI_State_Domestic_Hungry __self, AI_State_Domestic_Walk value) => _defaultNoFoodStrafeState.Value.SetValue(__self, value);
		public static float GetMinDistanceToEat(this AI_State_Domestic_Hungry __self) => _minDistanceToEat.Value.GetValue(__self);
		public static void SetMinDistanceToEat(this AI_State_Domestic_Hungry __self, float value) => _minDistanceToEat.Value.SetValue(__self, value);
		public static float GetOriginFoodCheckCooldown(this AI_State_Domestic_Hungry __self) => _originFoodCheckCooldown.Value.GetValue(__self);
		public static void SetOriginFoodCheckCooldown(this AI_State_Domestic_Hungry __self, float value) => _originFoodCheckCooldown.Value.SetValue(__self, value);
		public static float GetFoodCheckDistance(this AI_State_Domestic_Hungry __self) => _foodCheckDistance.Value.GetValue(__self);
		public static void SetFoodCheckDistance(this AI_State_Domestic_Hungry __self, float value) => _foodCheckDistance.Value.SetValue(__self, value);
		public static UnityEngine.LayerMask GetFoodObstructionLayer(this AI_State_Domestic_Hungry __self) => _foodObstructionLayer.Value.GetValue(__self);
		public static void SetFoodObstructionLayer(this AI_State_Domestic_Hungry __self, UnityEngine.LayerMask value) => _foodObstructionLayer.Value.SetValue(__self, value);
		public static float GetReEnterStateCooldown(this AI_State_Domestic_Hungry __self) => _reEnterStateCooldown.Value.GetValue(__self);
		public static void SetReEnterStateCooldown(this AI_State_Domestic_Hungry __self, float value) => _reEnterStateCooldown.Value.SetValue(__self, value);
		public static AI_StateMachine_Domestic GetStateMachine_Domestic(this AI_State_Domestic_Hungry __self) => _stateMachine_Domestic.Value.GetValue(__self);
		public static void SetStateMachine_Domestic(this AI_State_Domestic_Hungry __self, AI_StateMachine_Domestic value) => _stateMachine_Domestic.Value.SetValue(__self, value);
		public static Plant GetTargetFood(this AI_State_Domestic_Hungry __self) => _targetFood.Value.GetValue(__self);
		public static void SetTargetFood(this AI_State_Domestic_Hungry __self, Plant value) => _targetFood.Value.SetValue(__self, value);
		public static float GetFoodCheckCooldown(this AI_State_Domestic_Hungry __self) => _foodCheckCooldown.Value.GetValue(__self);
		public static void SetFoodCheckCooldown(this AI_State_Domestic_Hungry __self, float value) => _foodCheckCooldown.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_State_Domestic_Hungry>> _Awake757602046 =
				new System.Lazy<MethodAccessor<AI_State_Domestic_Hungry>>(() => MethodAccessor<AI_State_Domestic_Hungry>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<AI_State_Domestic_Hungry>> _CheckForViableFood757602046 =
				new System.Lazy<MethodAccessor<AI_State_Domestic_Hungry>>(() => MethodAccessor<AI_State_Domestic_Hungry>.Create("CheckForViableFood"));
		private static readonly System.Lazy<MethodAccessor<AI_State_Domestic_Hungry>> _GetNearbyGrassPlant757602046 =
				new System.Lazy<MethodAccessor<AI_State_Domestic_Hungry>>(() => MethodAccessor<AI_State_Domestic_Hungry>.Create("GetNearbyGrassPlant"));
		private static readonly System.Lazy<MethodAccessor<AI_State_Domestic_Hungry>> _MoveTowardsFood3437001883 =
				new System.Lazy<MethodAccessor<AI_State_Domestic_Hungry>>(() => MethodAccessor<AI_State_Domestic_Hungry>.Create("MoveTowardsFood", typeof(UnityEngine.Transform)));
		private static readonly System.Lazy<MethodAccessor<AI_State_Domestic_Hungry>> _FindGrassOnCropplot3479347266 =
				new System.Lazy<MethodAccessor<AI_State_Domestic_Hungry>>(() => MethodAccessor<AI_State_Domestic_Hungry>.Create("FindGrassOnCropplot", typeof(Cropplot)));
		private static readonly System.Lazy<MethodAccessor<AI_State_Domestic_Hungry>> _IsFoodReachableY3437001883 =
				new System.Lazy<MethodAccessor<AI_State_Domestic_Hungry>>(() => MethodAccessor<AI_State_Domestic_Hungry>.Create("IsFoodReachableY", typeof(UnityEngine.Transform)));
		private static readonly System.Lazy<MethodAccessor<AI_State_Domestic_Hungry>> _IsFoodInRange757602046 =
				new System.Lazy<MethodAccessor<AI_State_Domestic_Hungry>>(() => MethodAccessor<AI_State_Domestic_Hungry>.Create("IsFoodInRange"));
		private static readonly System.Lazy<MethodAccessor<AI_State_Domestic_Hungry>> _IsFoodWithinClearSight3437001883 =
				new System.Lazy<MethodAccessor<AI_State_Domestic_Hungry>>(() => MethodAccessor<AI_State_Domestic_Hungry>.Create("IsFoodWithinClearSight", typeof(UnityEngine.Transform)));

		public static void Awake(this AI_State_Domestic_Hungry __self) => _Awake757602046.Value.Invoke(__self);
		public static void CheckForViableFood(this AI_State_Domestic_Hungry __self) => _CheckForViableFood757602046.Value.Invoke(__self);
		public static Plant GetNearbyGrassPlant(this AI_State_Domestic_Hungry __self) => (Plant)_GetNearbyGrassPlant757602046.Value.Invoke(__self);
		public static void MoveTowardsFood(this AI_State_Domestic_Hungry __self, UnityEngine.Transform target) => _MoveTowardsFood3437001883.Value.Invoke(__self, target);
		public static Plant FindGrassOnCropplot(this AI_State_Domestic_Hungry __self, Cropplot cropplot) => (Plant)_FindGrassOnCropplot3479347266.Value.Invoke(__self, cropplot);
		public static bool IsFoodReachableY(this AI_State_Domestic_Hungry __self, UnityEngine.Transform food) => (bool)_IsFoodReachableY3437001883.Value.Invoke(__self, food);
		public static bool IsFoodInRange(this AI_State_Domestic_Hungry __self) => (bool)_IsFoodInRange757602046.Value.Invoke(__self);
		public static bool IsFoodWithinClearSight(this AI_State_Domestic_Hungry __self, UnityEngine.Transform target) => (bool)_IsFoodWithinClearSight3437001883.Value.Invoke(__self, target);

	}

	public static class PrivateAccessor_AI_State_Domestic_Walk
	{

		private static readonly System.Lazy<FieldAccessor<AI_State_Domestic_Walk, MovementType>> _movementType =
				new System.Lazy<FieldAccessor<AI_State_Domestic_Walk, MovementType>>(() => FieldAccessor<AI_State_Domestic_Walk, MovementType>.Create("movementType"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Domestic_Walk, float>> _targetMovementSpeed =
				new System.Lazy<FieldAccessor<AI_State_Domestic_Walk, float>>(() => FieldAccessor<AI_State_Domestic_Walk, float>.Create("targetMovementSpeed"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Domestic_Walk, Interval_Float>> _switchDirectionInterval =
				new System.Lazy<FieldAccessor<AI_State_Domestic_Walk, Interval_Float>>(() => FieldAccessor<AI_State_Domestic_Walk, Interval_Float>.Create("switchDirectionInterval"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Domestic_Walk, AI_State_Wait>> _waitState =
				new System.Lazy<FieldAccessor<AI_State_Domestic_Walk, AI_State_Wait>>(() => FieldAccessor<AI_State_Domestic_Walk, AI_State_Wait>.Create("waitState"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Domestic_Walk, float>> _waitChance =
				new System.Lazy<FieldAccessor<AI_State_Domestic_Walk, float>>(() => FieldAccessor<AI_State_Domestic_Walk, float>.Create("waitChance"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Domestic_Walk, UnityEngine.Vector3>> _currentDirection =
				new System.Lazy<FieldAccessor<AI_State_Domestic_Walk, UnityEngine.Vector3>>(() => FieldAccessor<AI_State_Domestic_Walk, UnityEngine.Vector3>.Create("currentDirection"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Domestic_Walk, float>> _switchDirectionTimer =
				new System.Lazy<FieldAccessor<AI_State_Domestic_Walk, float>>(() => FieldAccessor<AI_State_Domestic_Walk, float>.Create("switchDirectionTimer"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Domestic_Walk, float>> _switchDirectionDelay =
				new System.Lazy<FieldAccessor<AI_State_Domestic_Walk, float>>(() => FieldAccessor<AI_State_Domestic_Walk, float>.Create("switchDirectionDelay"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Domestic_Walk, Block>> _closestFloorBlock =
				new System.Lazy<FieldAccessor<AI_State_Domestic_Walk, Block>>(() => FieldAccessor<AI_State_Domestic_Walk, Block>.Create("closestFloorBlock"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Domestic_Walk, bool>> _closestFloorIsHalfFloor =
				new System.Lazy<FieldAccessor<AI_State_Domestic_Walk, bool>>(() => FieldAccessor<AI_State_Domestic_Walk, bool>.Create("closestFloorIsHalfFloor"));

		public static MovementType GetMovementType(this AI_State_Domestic_Walk __self) => _movementType.Value.GetValue(__self);
		public static void SetMovementType(this AI_State_Domestic_Walk __self, MovementType value) => _movementType.Value.SetValue(__self, value);
		public static float GetTargetMovementSpeed(this AI_State_Domestic_Walk __self) => _targetMovementSpeed.Value.GetValue(__self);
		public static void SetTargetMovementSpeed(this AI_State_Domestic_Walk __self, float value) => _targetMovementSpeed.Value.SetValue(__self, value);
		public static Interval_Float GetSwitchDirectionInterval(this AI_State_Domestic_Walk __self) => _switchDirectionInterval.Value.GetValue(__self);
		public static void SetSwitchDirectionInterval(this AI_State_Domestic_Walk __self, Interval_Float value) => _switchDirectionInterval.Value.SetValue(__self, value);
		public static AI_State_Wait GetWaitState(this AI_State_Domestic_Walk __self) => _waitState.Value.GetValue(__self);
		public static void SetWaitState(this AI_State_Domestic_Walk __self, AI_State_Wait value) => _waitState.Value.SetValue(__self, value);
		public static float GetWaitChance(this AI_State_Domestic_Walk __self) => _waitChance.Value.GetValue(__self);
		public static void SetWaitChance(this AI_State_Domestic_Walk __self, float value) => _waitChance.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetCurrentDirection(this AI_State_Domestic_Walk __self) => _currentDirection.Value.GetValue(__self);
		public static void SetCurrentDirection(this AI_State_Domestic_Walk __self, UnityEngine.Vector3 value) => _currentDirection.Value.SetValue(__self, value);
		public static float GetSwitchDirectionTimer(this AI_State_Domestic_Walk __self) => _switchDirectionTimer.Value.GetValue(__self);
		public static void SetSwitchDirectionTimer(this AI_State_Domestic_Walk __self, float value) => _switchDirectionTimer.Value.SetValue(__self, value);
		public static float GetSwitchDirectionDelay(this AI_State_Domestic_Walk __self) => _switchDirectionDelay.Value.GetValue(__self);
		public static void SetSwitchDirectionDelay(this AI_State_Domestic_Walk __self, float value) => _switchDirectionDelay.Value.SetValue(__self, value);
		public static Block GetClosestFloorBlock(this AI_State_Domestic_Walk __self) => _closestFloorBlock.Value.GetValue(__self);
		public static void SetClosestFloorBlock(this AI_State_Domestic_Walk __self, Block value) => _closestFloorBlock.Value.SetValue(__self, value);
		public static bool GetClosestFloorIsHalfFloor(this AI_State_Domestic_Walk __self) => _closestFloorIsHalfFloor.Value.GetValue(__self);
		public static void SetClosestFloorIsHalfFloor(this AI_State_Domestic_Walk __self, bool value) => _closestFloorIsHalfFloor.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_State_Domestic_Walk>> _WaitStateNull757602046 =
				new System.Lazy<MethodAccessor<AI_State_Domestic_Walk>>(() => MethodAccessor<AI_State_Domestic_Walk>.Create("WaitStateNull"));
		private static readonly System.Lazy<MethodAccessor<AI_State_Domestic_Walk>> _OnDrawGizmos757602046 =
				new System.Lazy<MethodAccessor<AI_State_Domestic_Walk>>(() => MethodAccessor<AI_State_Domestic_Walk>.Create("OnDrawGizmos"));
		private static readonly System.Lazy<MethodAccessor<AI_State_Domestic_Walk>> _GetRandomDirection757602046 =
				new System.Lazy<MethodAccessor<AI_State_Domestic_Walk>>(() => MethodAccessor<AI_State_Domestic_Walk>.Create("GetRandomDirection"));

		public static bool WaitStateNull(this AI_State_Domestic_Walk __self) => (bool)_WaitStateNull757602046.Value.Invoke(__self);
		public static void OnDrawGizmos(this AI_State_Domestic_Walk __self) => _OnDrawGizmos757602046.Value.Invoke(__self);
		public static UnityEngine.Vector3 GetRandomDirection(this AI_State_Domestic_Walk __self) => (UnityEngine.Vector3)_GetRandomDirection757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AI_State_Wait_Domestic_Eat
	{

		private static readonly System.Lazy<FieldAccessor<AI_State_Wait_Domestic_Eat, float>> _eatTime =
				new System.Lazy<FieldAccessor<AI_State_Wait_Domestic_Eat, float>>(() => FieldAccessor<AI_State_Wait_Domestic_Eat, float>.Create("eatTime"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Wait_Domestic_Eat, float>> _eatChance =
				new System.Lazy<FieldAccessor<AI_State_Wait_Domestic_Eat, float>>(() => FieldAccessor<AI_State_Wait_Domestic_Eat, float>.Create("eatChance"));

		public static float GetEatTime(this AI_State_Wait_Domestic_Eat __self) => _eatTime.Value.GetValue(__self);
		public static void SetEatTime(this AI_State_Wait_Domestic_Eat __self, float value) => _eatTime.Value.SetValue(__self, value);
		public static float GetEatChance(this AI_State_Wait_Domestic_Eat __self) => _eatChance.Value.GetValue(__self);
		public static void SetEatChance(this AI_State_Wait_Domestic_Eat __self, float value) => _eatChance.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_AI_StateHyenaBossInvulnerable
	{

		private static readonly System.Lazy<FieldAccessor<AI_StateHyenaBossInvulnerable, UnityEngine.Renderer>> _renderer =
				new System.Lazy<FieldAccessor<AI_StateHyenaBossInvulnerable, UnityEngine.Renderer>>(() => FieldAccessor<AI_StateHyenaBossInvulnerable, UnityEngine.Renderer>.Create("renderer"));
		private static readonly System.Lazy<FieldAccessor<AI_StateHyenaBossInvulnerable, float>> _shaderIntensity =
				new System.Lazy<FieldAccessor<AI_StateHyenaBossInvulnerable, float>>(() => FieldAccessor<AI_StateHyenaBossInvulnerable, float>.Create("shaderIntensity"));
		private static readonly System.Lazy<FieldAccessor<AI_StateHyenaBossInvulnerable, UnityEngine.MaterialPropertyBlock>> _materialPropertyBlock =
				new System.Lazy<FieldAccessor<AI_StateHyenaBossInvulnerable, UnityEngine.MaterialPropertyBlock>>(() => FieldAccessor<AI_StateHyenaBossInvulnerable, UnityEngine.MaterialPropertyBlock>.Create("materialPropertyBlock"));

		public static UnityEngine.Renderer GetRenderer(this AI_StateHyenaBossInvulnerable __self) => _renderer.Value.GetValue(__self);
		public static void SetRenderer(this AI_StateHyenaBossInvulnerable __self, UnityEngine.Renderer value) => _renderer.Value.SetValue(__self, value);
		public static float GetShaderIntensity(this AI_StateHyenaBossInvulnerable __self) => _shaderIntensity.Value.GetValue(__self);
		public static void SetShaderIntensity(this AI_StateHyenaBossInvulnerable __self, float value) => _shaderIntensity.Value.SetValue(__self, value);
		public static UnityEngine.MaterialPropertyBlock GetMaterialPropertyBlock(this AI_StateHyenaBossInvulnerable __self) => _materialPropertyBlock.Value.GetValue(__self);
		public static void SetMaterialPropertyBlock(this AI_StateHyenaBossInvulnerable __self, UnityEngine.MaterialPropertyBlock value) => _materialPropertyBlock.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_AI_State_BunnyJump
	{

		private static readonly System.Lazy<FieldAccessor<AI_State_BunnyJump, Raft_Network>> __network =
				new System.Lazy<FieldAccessor<AI_State_BunnyJump, Raft_Network>>(() => FieldAccessor<AI_State_BunnyJump, Raft_Network>.Create("_network"));
		private static readonly System.Lazy<FieldAccessor<AI_State_BunnyJump, AI_State_BunnyJump.JumpType>> _jumpType =
				new System.Lazy<FieldAccessor<AI_State_BunnyJump, AI_State_BunnyJump.JumpType>>(() => FieldAccessor<AI_State_BunnyJump, AI_State_BunnyJump.JumpType>.Create("jumpType"));
		private static readonly System.Lazy<FieldAccessor<AI_State_BunnyJump, AI_StateMachine_HyenaBoss>> _bossSM =
				new System.Lazy<FieldAccessor<AI_State_BunnyJump, AI_StateMachine_HyenaBoss>>(() => FieldAccessor<AI_State_BunnyJump, AI_StateMachine_HyenaBoss>.Create("bossSM"));
		private static readonly System.Lazy<FieldAccessor<AI_State_BunnyJump, AI_State>> _nextState =
				new System.Lazy<FieldAccessor<AI_State_BunnyJump, AI_State>>(() => FieldAccessor<AI_State_BunnyJump, AI_State>.Create("nextState"));
		private static readonly System.Lazy<FieldAccessor<AI_State_BunnyJump, AnimatorController>> _animatorController =
				new System.Lazy<FieldAccessor<AI_State_BunnyJump, AnimatorController>>(() => FieldAccessor<AI_State_BunnyJump, AnimatorController>.Create("animatorController"));
		private static readonly System.Lazy<FieldAccessor<AI_State_BunnyJump, Interval_Float>> _jumpDistance =
				new System.Lazy<FieldAccessor<AI_State_BunnyJump, Interval_Float>>(() => FieldAccessor<AI_State_BunnyJump, Interval_Float>.Create("jumpDistance"));
		private static readonly System.Lazy<FieldAccessor<AI_State_BunnyJump, float>> _predictionDistance =
				new System.Lazy<FieldAccessor<AI_State_BunnyJump, float>>(() => FieldAccessor<AI_State_BunnyJump, float>.Create("predictionDistance"));
		private static readonly System.Lazy<FieldAccessor<AI_State_BunnyJump, int>> _numberOfJumps =
				new System.Lazy<FieldAccessor<AI_State_BunnyJump, int>>(() => FieldAccessor<AI_State_BunnyJump, int>.Create("numberOfJumps"));
		private static readonly System.Lazy<FieldAccessor<AI_State_BunnyJump, float>> _jumpHeight =
				new System.Lazy<FieldAccessor<AI_State_BunnyJump, float>>(() => FieldAccessor<AI_State_BunnyJump, float>.Create("jumpHeight"));
		private static readonly System.Lazy<FieldAccessor<AI_State_BunnyJump, float>> _jumpTime =
				new System.Lazy<FieldAccessor<AI_State_BunnyJump, float>>(() => FieldAccessor<AI_State_BunnyJump, float>.Create("jumpTime"));
		private static readonly System.Lazy<FieldAccessor<AI_State_BunnyJump, float>> _stunDelay =
				new System.Lazy<FieldAccessor<AI_State_BunnyJump, float>>(() => FieldAccessor<AI_State_BunnyJump, float>.Create("stunDelay"));
		private static readonly System.Lazy<FieldAccessor<AI_State_BunnyJump, float>> _rotationSpeed =
				new System.Lazy<FieldAccessor<AI_State_BunnyJump, float>>(() => FieldAccessor<AI_State_BunnyJump, float>.Create("rotationSpeed"));
		private static readonly System.Lazy<FieldAccessor<AI_State_BunnyJump, float>> _rotateLerpSpeed =
				new System.Lazy<FieldAccessor<AI_State_BunnyJump, float>>(() => FieldAccessor<AI_State_BunnyJump, float>.Create("rotateLerpSpeed"));
		private static readonly System.Lazy<FieldAccessor<AI_State_BunnyJump, float>> _damageRange =
				new System.Lazy<FieldAccessor<AI_State_BunnyJump, float>>(() => FieldAccessor<AI_State_BunnyJump, float>.Create("damageRange"));
		private static readonly System.Lazy<FieldAccessor<AI_State_BunnyJump, float>> _damage =
				new System.Lazy<FieldAccessor<AI_State_BunnyJump, float>>(() => FieldAccessor<AI_State_BunnyJump, float>.Create("damage"));
		private static readonly System.Lazy<FieldAccessor<AI_State_BunnyJump, float>> _knockbackForce =
				new System.Lazy<FieldAccessor<AI_State_BunnyJump, float>>(() => FieldAccessor<AI_State_BunnyJump, float>.Create("knockbackForce"));
		private static readonly System.Lazy<FieldAccessor<AI_State_BunnyJump, string>> _attackStartAnimationParameter =
				new System.Lazy<FieldAccessor<AI_State_BunnyJump, string>>(() => FieldAccessor<AI_State_BunnyJump, string>.Create("attackStartAnimationParameter"));
		private static readonly System.Lazy<FieldAccessor<AI_State_BunnyJump, string>> _attackAnimationParameter =
				new System.Lazy<FieldAccessor<AI_State_BunnyJump, string>>(() => FieldAccessor<AI_State_BunnyJump, string>.Create("attackAnimationParameter"));
		private static readonly System.Lazy<FieldAccessor<AI_State_BunnyJump, string>> _attackEndAnimationParameter =
				new System.Lazy<FieldAccessor<AI_State_BunnyJump, string>>(() => FieldAccessor<AI_State_BunnyJump, string>.Create("attackEndAnimationParameter"));
		private static readonly System.Lazy<FieldAccessor<AI_State_BunnyJump, UnityEngine.ParticleSystem>> _landParticles =
				new System.Lazy<FieldAccessor<AI_State_BunnyJump, UnityEngine.ParticleSystem>>(() => FieldAccessor<AI_State_BunnyJump, UnityEngine.ParticleSystem>.Create("landParticles"));
		private static readonly System.Lazy<FieldAccessor<AI_State_BunnyJump, SO_CameraShaker>> _cameraShakeData =
				new System.Lazy<FieldAccessor<AI_State_BunnyJump, SO_CameraShaker>>(() => FieldAccessor<AI_State_BunnyJump, SO_CameraShaker>.Create("cameraShakeData"));
		private static readonly System.Lazy<FieldAccessor<AI_State_BunnyJump, float>> _shakeRange =
				new System.Lazy<FieldAccessor<AI_State_BunnyJump, float>>(() => FieldAccessor<AI_State_BunnyJump, float>.Create("shakeRange"));
		private static readonly System.Lazy<FieldAccessor<AI_State_BunnyJump, string>> _eventRef_jumpStart =
				new System.Lazy<FieldAccessor<AI_State_BunnyJump, string>>(() => FieldAccessor<AI_State_BunnyJump, string>.Create("eventRef_jumpStart"));
		private static readonly System.Lazy<FieldAccessor<AI_State_BunnyJump, string>> _eventRef_jump =
				new System.Lazy<FieldAccessor<AI_State_BunnyJump, string>>(() => FieldAccessor<AI_State_BunnyJump, string>.Create("eventRef_jump"));
		private static readonly System.Lazy<FieldAccessor<AI_State_BunnyJump, string>> _eventRef_jumpEnd =
				new System.Lazy<FieldAccessor<AI_State_BunnyJump, string>>(() => FieldAccessor<AI_State_BunnyJump, string>.Create("eventRef_jumpEnd"));
		private static readonly System.Lazy<FieldAccessor<AI_State_BunnyJump, string>> _eventRef_jumpDamagePlayer =
				new System.Lazy<FieldAccessor<AI_State_BunnyJump, string>>(() => FieldAccessor<AI_State_BunnyJump, string>.Create("eventRef_jumpDamagePlayer"));
		private static readonly System.Lazy<FieldAccessor<AI_State_BunnyJump, int>> _currentJumpCount =
				new System.Lazy<FieldAccessor<AI_State_BunnyJump, int>>(() => FieldAccessor<AI_State_BunnyJump, int>.Create("currentJumpCount"));
		private static readonly System.Lazy<FieldAccessor<AI_State_BunnyJump, bool>> _chargingJump =
				new System.Lazy<FieldAccessor<AI_State_BunnyJump, bool>>(() => FieldAccessor<AI_State_BunnyJump, bool>.Create("chargingJump"));
		private static readonly System.Lazy<FieldAccessor<AI_State_BunnyJump, Network_Host>> _networkHost =
				new System.Lazy<FieldAccessor<AI_State_BunnyJump, Network_Host>>(() => FieldAccessor<AI_State_BunnyJump, Network_Host>.Create("networkHost"));
		private static readonly System.Lazy<FieldAccessor<AI_State_BunnyJump, AI_NetworkBehaviour>> _messageReciever =
				new System.Lazy<FieldAccessor<AI_State_BunnyJump, AI_NetworkBehaviour>>(() => FieldAccessor<AI_State_BunnyJump, AI_NetworkBehaviour>.Create("messageReciever"));
		private static readonly System.Lazy<FieldAccessor<AI_State_BunnyJump, UnityEngine.Coroutine>> _coroutine =
				new System.Lazy<FieldAccessor<AI_State_BunnyJump, UnityEngine.Coroutine>>(() => FieldAccessor<AI_State_BunnyJump, UnityEngine.Coroutine>.Create("coroutine"));
		private static readonly System.Lazy<FieldAccessor<AI_State_BunnyJump, ScreenEffectManager>> _screenEffectManager =
				new System.Lazy<FieldAccessor<AI_State_BunnyJump, ScreenEffectManager>>(() => FieldAccessor<AI_State_BunnyJump, ScreenEffectManager>.Create("screenEffectManager"));

		public static Raft_Network Get_network(this AI_State_BunnyJump __self) => __network.Value.GetValue(__self);
		public static void Set_network(this AI_State_BunnyJump __self, Raft_Network value) => __network.Value.SetValue(__self, value);
		public static AI_State_BunnyJump.JumpType GetJumpType(this AI_State_BunnyJump __self) => _jumpType.Value.GetValue(__self);
		public static void SetJumpType(this AI_State_BunnyJump __self, AI_State_BunnyJump.JumpType value) => _jumpType.Value.SetValue(__self, value);
		public static AI_StateMachine_HyenaBoss GetBossSM(this AI_State_BunnyJump __self) => _bossSM.Value.GetValue(__self);
		public static void SetBossSM(this AI_State_BunnyJump __self, AI_StateMachine_HyenaBoss value) => _bossSM.Value.SetValue(__self, value);
		public static AI_State GetNextState(this AI_State_BunnyJump __self) => _nextState.Value.GetValue(__self);
		public static void SetNextState(this AI_State_BunnyJump __self, AI_State value) => _nextState.Value.SetValue(__self, value);
		public static AnimatorController GetAnimatorController(this AI_State_BunnyJump __self) => _animatorController.Value.GetValue(__self);
		public static void SetAnimatorController(this AI_State_BunnyJump __self, AnimatorController value) => _animatorController.Value.SetValue(__self, value);
		public static Interval_Float GetJumpDistance(this AI_State_BunnyJump __self) => _jumpDistance.Value.GetValue(__self);
		public static void SetJumpDistance(this AI_State_BunnyJump __self, Interval_Float value) => _jumpDistance.Value.SetValue(__self, value);
		public static float GetPredictionDistance(this AI_State_BunnyJump __self) => _predictionDistance.Value.GetValue(__self);
		public static void SetPredictionDistance(this AI_State_BunnyJump __self, float value) => _predictionDistance.Value.SetValue(__self, value);
		public static int GetNumberOfJumps(this AI_State_BunnyJump __self) => _numberOfJumps.Value.GetValue(__self);
		public static void SetNumberOfJumps(this AI_State_BunnyJump __self, int value) => _numberOfJumps.Value.SetValue(__self, value);
		public static float GetJumpHeight(this AI_State_BunnyJump __self) => _jumpHeight.Value.GetValue(__self);
		public static void SetJumpHeight(this AI_State_BunnyJump __self, float value) => _jumpHeight.Value.SetValue(__self, value);
		public static float GetJumpTime(this AI_State_BunnyJump __self) => _jumpTime.Value.GetValue(__self);
		public static void SetJumpTime(this AI_State_BunnyJump __self, float value) => _jumpTime.Value.SetValue(__self, value);
		public static float GetStunDelay(this AI_State_BunnyJump __self) => _stunDelay.Value.GetValue(__self);
		public static void SetStunDelay(this AI_State_BunnyJump __self, float value) => _stunDelay.Value.SetValue(__self, value);
		public static float GetRotationSpeed(this AI_State_BunnyJump __self) => _rotationSpeed.Value.GetValue(__self);
		public static void SetRotationSpeed(this AI_State_BunnyJump __self, float value) => _rotationSpeed.Value.SetValue(__self, value);
		public static float GetRotateLerpSpeed(this AI_State_BunnyJump __self) => _rotateLerpSpeed.Value.GetValue(__self);
		public static void SetRotateLerpSpeed(this AI_State_BunnyJump __self, float value) => _rotateLerpSpeed.Value.SetValue(__self, value);
		public static float GetDamageRange(this AI_State_BunnyJump __self) => _damageRange.Value.GetValue(__self);
		public static void SetDamageRange(this AI_State_BunnyJump __self, float value) => _damageRange.Value.SetValue(__self, value);
		public static float GetDamage(this AI_State_BunnyJump __self) => _damage.Value.GetValue(__self);
		public static void SetDamage(this AI_State_BunnyJump __self, float value) => _damage.Value.SetValue(__self, value);
		public static float GetKnockbackForce(this AI_State_BunnyJump __self) => _knockbackForce.Value.GetValue(__self);
		public static void SetKnockbackForce(this AI_State_BunnyJump __self, float value) => _knockbackForce.Value.SetValue(__self, value);
		public static string GetAttackStartAnimationParameter(this AI_State_BunnyJump __self) => _attackStartAnimationParameter.Value.GetValue(__self);
		public static void SetAttackStartAnimationParameter(this AI_State_BunnyJump __self, string value) => _attackStartAnimationParameter.Value.SetValue(__self, value);
		public static string GetAttackAnimationParameter(this AI_State_BunnyJump __self) => _attackAnimationParameter.Value.GetValue(__self);
		public static void SetAttackAnimationParameter(this AI_State_BunnyJump __self, string value) => _attackAnimationParameter.Value.SetValue(__self, value);
		public static string GetAttackEndAnimationParameter(this AI_State_BunnyJump __self) => _attackEndAnimationParameter.Value.GetValue(__self);
		public static void SetAttackEndAnimationParameter(this AI_State_BunnyJump __self, string value) => _attackEndAnimationParameter.Value.SetValue(__self, value);
		public static UnityEngine.ParticleSystem GetLandParticles(this AI_State_BunnyJump __self) => _landParticles.Value.GetValue(__self);
		public static void SetLandParticles(this AI_State_BunnyJump __self, UnityEngine.ParticleSystem value) => _landParticles.Value.SetValue(__self, value);
		public static SO_CameraShaker GetCameraShakeData(this AI_State_BunnyJump __self) => _cameraShakeData.Value.GetValue(__self);
		public static void SetCameraShakeData(this AI_State_BunnyJump __self, SO_CameraShaker value) => _cameraShakeData.Value.SetValue(__self, value);
		public static float GetShakeRange(this AI_State_BunnyJump __self) => _shakeRange.Value.GetValue(__self);
		public static void SetShakeRange(this AI_State_BunnyJump __self, float value) => _shakeRange.Value.SetValue(__self, value);
		public static string GetEventRef_jumpStart(this AI_State_BunnyJump __self) => _eventRef_jumpStart.Value.GetValue(__self);
		public static void SetEventRef_jumpStart(this AI_State_BunnyJump __self, string value) => _eventRef_jumpStart.Value.SetValue(__self, value);
		public static string GetEventRef_jump(this AI_State_BunnyJump __self) => _eventRef_jump.Value.GetValue(__self);
		public static void SetEventRef_jump(this AI_State_BunnyJump __self, string value) => _eventRef_jump.Value.SetValue(__self, value);
		public static string GetEventRef_jumpEnd(this AI_State_BunnyJump __self) => _eventRef_jumpEnd.Value.GetValue(__self);
		public static void SetEventRef_jumpEnd(this AI_State_BunnyJump __self, string value) => _eventRef_jumpEnd.Value.SetValue(__self, value);
		public static string GetEventRef_jumpDamagePlayer(this AI_State_BunnyJump __self) => _eventRef_jumpDamagePlayer.Value.GetValue(__self);
		public static void SetEventRef_jumpDamagePlayer(this AI_State_BunnyJump __self, string value) => _eventRef_jumpDamagePlayer.Value.SetValue(__self, value);
		public static int GetCurrentJumpCount(this AI_State_BunnyJump __self) => _currentJumpCount.Value.GetValue(__self);
		public static void SetCurrentJumpCount(this AI_State_BunnyJump __self, int value) => _currentJumpCount.Value.SetValue(__self, value);
		public static bool GetChargingJump(this AI_State_BunnyJump __self) => _chargingJump.Value.GetValue(__self);
		public static void SetChargingJump(this AI_State_BunnyJump __self, bool value) => _chargingJump.Value.SetValue(__self, value);
		public static Network_Host GetNetworkHost(this AI_State_BunnyJump __self) => _networkHost.Value.GetValue(__self);
		public static void SetNetworkHost(this AI_State_BunnyJump __self, Network_Host value) => _networkHost.Value.SetValue(__self, value);
		public static AI_NetworkBehaviour GetMessageReciever(this AI_State_BunnyJump __self) => _messageReciever.Value.GetValue(__self);
		public static void SetMessageReciever(this AI_State_BunnyJump __self, AI_NetworkBehaviour value) => _messageReciever.Value.SetValue(__self, value);
		public static UnityEngine.Coroutine GetCoroutine(this AI_State_BunnyJump __self) => _coroutine.Value.GetValue(__self);
		public static void SetCoroutine(this AI_State_BunnyJump __self, UnityEngine.Coroutine value) => _coroutine.Value.SetValue(__self, value);
		public static ScreenEffectManager GetScreenEffectManager(this AI_State_BunnyJump __self) => _screenEffectManager.Value.GetValue(__self);
		public static void SetScreenEffectManager(this AI_State_BunnyJump __self, ScreenEffectManager value) => _screenEffectManager.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_State_BunnyJump>> _Start757602046 =
				new System.Lazy<MethodAccessor<AI_State_BunnyJump>>(() => MethodAccessor<AI_State_BunnyJump>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<AI_State_BunnyJump>> _OnAnimationEvent3454057852 =
				new System.Lazy<MethodAccessor<AI_State_BunnyJump>>(() => MethodAccessor<AI_State_BunnyJump>.Create("OnAnimationEvent", typeof(string)));
		private static readonly System.Lazy<MethodAccessor<AI_State_BunnyJump>> _DamageLocalPlayerInRange3429126434 =
				new System.Lazy<MethodAccessor<AI_State_BunnyJump>>(() => MethodAccessor<AI_State_BunnyJump>.Create("DamageLocalPlayerInRange", typeof(UnityEngine.Vector3)));
		private static readonly System.Lazy<MethodAccessor<AI_State_BunnyJump>> _JumpAttack757602046 =
				new System.Lazy<MethodAccessor<AI_State_BunnyJump>>(() => MethodAccessor<AI_State_BunnyJump>.Create("JumpAttack"));

		public static void Start(this AI_State_BunnyJump __self) => _Start757602046.Value.Invoke(__self);
		public static void OnAnimationEvent(this AI_State_BunnyJump __self, string animationEventName) => _OnAnimationEvent3454057852.Value.Invoke(__self, animationEventName);
		public static void DamageLocalPlayerInRange(this AI_State_BunnyJump __self, UnityEngine.Vector3 centerPoint) => _DamageLocalPlayerInRange3429126434.Value.Invoke(__self, centerPoint);
		public static System.Collections.IEnumerator JumpAttack(this AI_State_BunnyJump __self) => (System.Collections.IEnumerator)_JumpAttack757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AI_State_HyenaBossIntro
	{

		private static readonly System.Lazy<FieldAccessor<AI_State_HyenaBossIntro, SO_VoiceLine>> _lastIntroVoiceLine =
				new System.Lazy<FieldAccessor<AI_State_HyenaBossIntro, SO_VoiceLine>>(() => FieldAccessor<AI_State_HyenaBossIntro, SO_VoiceLine>.Create("lastIntroVoiceLine"));
		private static readonly System.Lazy<FieldAccessor<AI_State_HyenaBossIntro, AI_State>> _nextState =
				new System.Lazy<FieldAccessor<AI_State_HyenaBossIntro, AI_State>>(() => FieldAccessor<AI_State_HyenaBossIntro, AI_State>.Create("nextState"));
		private static readonly System.Lazy<FieldAccessor<AI_State_HyenaBossIntro, float>> _startJumpDelay =
				new System.Lazy<FieldAccessor<AI_State_HyenaBossIntro, float>>(() => FieldAccessor<AI_State_HyenaBossIntro, float>.Create("startJumpDelay"));
		private static readonly System.Lazy<FieldAccessor<AI_State_HyenaBossIntro, float>> _jumpHeight =
				new System.Lazy<FieldAccessor<AI_State_HyenaBossIntro, float>>(() => FieldAccessor<AI_State_HyenaBossIntro, float>.Create("jumpHeight"));
		private static readonly System.Lazy<FieldAccessor<AI_State_HyenaBossIntro, float>> _jumpDuration =
				new System.Lazy<FieldAccessor<AI_State_HyenaBossIntro, float>>(() => FieldAccessor<AI_State_HyenaBossIntro, float>.Create("jumpDuration"));
		private static readonly System.Lazy<FieldAccessor<AI_State_HyenaBossIntro, Boss_OlofPart2>> _olof =
				new System.Lazy<FieldAccessor<AI_State_HyenaBossIntro, Boss_OlofPart2>>(() => FieldAccessor<AI_State_HyenaBossIntro, Boss_OlofPart2>.Create("olof"));
		private static readonly System.Lazy<FieldAccessor<AI_State_HyenaBossIntro, AnimatorController>> _animatorController =
				new System.Lazy<FieldAccessor<AI_State_HyenaBossIntro, AnimatorController>>(() => FieldAccessor<AI_State_HyenaBossIntro, AnimatorController>.Create("animatorController"));
		private static readonly System.Lazy<FieldAccessor<AI_State_HyenaBossIntro, bool>> _hasJumped =
				new System.Lazy<FieldAccessor<AI_State_HyenaBossIntro, bool>>(() => FieldAccessor<AI_State_HyenaBossIntro, bool>.Create("hasJumped"));
		private static readonly System.Lazy<FieldAccessor<AI_State_HyenaBossIntro, float>> _jumpTime =
				new System.Lazy<FieldAccessor<AI_State_HyenaBossIntro, float>>(() => FieldAccessor<AI_State_HyenaBossIntro, float>.Create("jumpTime"));
		private static readonly System.Lazy<FieldAccessor<AI_State_HyenaBossIntro, float>> _fixTimer =
				new System.Lazy<FieldAccessor<AI_State_HyenaBossIntro, float>>(() => FieldAccessor<AI_State_HyenaBossIntro, float>.Create("fixTimer"));
		private static readonly System.Lazy<FieldAccessor<AI_State_HyenaBossIntro, bool>> _fixApplied =
				new System.Lazy<FieldAccessor<AI_State_HyenaBossIntro, bool>>(() => FieldAccessor<AI_State_HyenaBossIntro, bool>.Create("fixApplied"));
		private static readonly System.Lazy<FieldAccessor<AI_State_HyenaBossIntro, bool>> _shouldHaveJumpedFromLoad =
				new System.Lazy<FieldAccessor<AI_State_HyenaBossIntro, bool>>(() => FieldAccessor<AI_State_HyenaBossIntro, bool>.Create("shouldHaveJumpedFromLoad"));

		public static SO_VoiceLine GetLastIntroVoiceLine(this AI_State_HyenaBossIntro __self) => _lastIntroVoiceLine.Value.GetValue(__self);
		public static void SetLastIntroVoiceLine(this AI_State_HyenaBossIntro __self, SO_VoiceLine value) => _lastIntroVoiceLine.Value.SetValue(__self, value);
		public static AI_State GetNextState(this AI_State_HyenaBossIntro __self) => _nextState.Value.GetValue(__self);
		public static void SetNextState(this AI_State_HyenaBossIntro __self, AI_State value) => _nextState.Value.SetValue(__self, value);
		public static float GetStartJumpDelay(this AI_State_HyenaBossIntro __self) => _startJumpDelay.Value.GetValue(__self);
		public static void SetStartJumpDelay(this AI_State_HyenaBossIntro __self, float value) => _startJumpDelay.Value.SetValue(__self, value);
		public static float GetJumpHeight(this AI_State_HyenaBossIntro __self) => _jumpHeight.Value.GetValue(__self);
		public static void SetJumpHeight(this AI_State_HyenaBossIntro __self, float value) => _jumpHeight.Value.SetValue(__self, value);
		public static float GetJumpDuration(this AI_State_HyenaBossIntro __self) => _jumpDuration.Value.GetValue(__self);
		public static void SetJumpDuration(this AI_State_HyenaBossIntro __self, float value) => _jumpDuration.Value.SetValue(__self, value);
		public static Boss_OlofPart2 GetOlof(this AI_State_HyenaBossIntro __self) => _olof.Value.GetValue(__self);
		public static void SetOlof(this AI_State_HyenaBossIntro __self, Boss_OlofPart2 value) => _olof.Value.SetValue(__self, value);
		public static AnimatorController GetAnimatorController(this AI_State_HyenaBossIntro __self) => _animatorController.Value.GetValue(__self);
		public static void SetAnimatorController(this AI_State_HyenaBossIntro __self, AnimatorController value) => _animatorController.Value.SetValue(__self, value);
		public static bool GetHasJumped(this AI_State_HyenaBossIntro __self) => _hasJumped.Value.GetValue(__self);
		public static void SetHasJumped(this AI_State_HyenaBossIntro __self, bool value) => _hasJumped.Value.SetValue(__self, value);
		public static float GetJumpTime(this AI_State_HyenaBossIntro __self) => _jumpTime.Value.GetValue(__self);
		public static void SetJumpTime(this AI_State_HyenaBossIntro __self, float value) => _jumpTime.Value.SetValue(__self, value);
		public static float GetFixTimer(this AI_State_HyenaBossIntro __self) => _fixTimer.Value.GetValue(__self);
		public static void SetFixTimer(this AI_State_HyenaBossIntro __self, float value) => _fixTimer.Value.SetValue(__self, value);
		public static bool GetFixApplied(this AI_State_HyenaBossIntro __self) => _fixApplied.Value.GetValue(__self);
		public static void SetFixApplied(this AI_State_HyenaBossIntro __self, bool value) => _fixApplied.Value.SetValue(__self, value);
		public static bool GetShouldHaveJumpedFromLoad(this AI_State_HyenaBossIntro __self) => _shouldHaveJumpedFromLoad.Value.GetValue(__self);
		public static void SetShouldHaveJumpedFromLoad(this AI_State_HyenaBossIntro __self, bool value) => _shouldHaveJumpedFromLoad.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_State_HyenaBossIntro>> _Start757602046 =
				new System.Lazy<MethodAccessor<AI_State_HyenaBossIntro>>(() => MethodAccessor<AI_State_HyenaBossIntro>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<AI_State_HyenaBossIntro>> _Destroy757602046 =
				new System.Lazy<MethodAccessor<AI_State_HyenaBossIntro>>(() => MethodAccessor<AI_State_HyenaBossIntro>.Create("Destroy"));
		private static readonly System.Lazy<MethodAccessor<AI_State_HyenaBossIntro>> _OnVoiceLinePlayed3475062971 =
				new System.Lazy<MethodAccessor<AI_State_HyenaBossIntro>>(() => MethodAccessor<AI_State_HyenaBossIntro>.Create("OnVoiceLinePlayed", typeof(SO_VoiceLine)));
		private static readonly System.Lazy<MethodAccessor<AI_State_HyenaBossIntro>> _Jump757602046 =
				new System.Lazy<MethodAccessor<AI_State_HyenaBossIntro>>(() => MethodAccessor<AI_State_HyenaBossIntro>.Create("Jump"));
		private static readonly System.Lazy<MethodAccessor<AI_State_HyenaBossIntro>> _QuickFix757602046 =
				new System.Lazy<MethodAccessor<AI_State_HyenaBossIntro>>(() => MethodAccessor<AI_State_HyenaBossIntro>.Create("QuickFix"));

		public static void Start(this AI_State_HyenaBossIntro __self) => _Start757602046.Value.Invoke(__self);
		public static void Destroy(this AI_State_HyenaBossIntro __self) => _Destroy757602046.Value.Invoke(__self);
		public static void OnVoiceLinePlayed(this AI_State_HyenaBossIntro __self, SO_VoiceLine voiceLine) => _OnVoiceLinePlayed3475062971.Value.Invoke(__self, voiceLine);
		public static void Jump(this AI_State_HyenaBossIntro __self) => _Jump757602046.Value.Invoke(__self);
		public static void QuickFix(this AI_State_HyenaBossIntro __self) => _QuickFix757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AI_State_PinDown
	{

		private static readonly System.Lazy<FieldAccessor<AI_State_PinDown, AI_State>> _nextState =
				new System.Lazy<FieldAccessor<AI_State_PinDown, AI_State>>(() => FieldAccessor<AI_State_PinDown, AI_State>.Create("nextState"));
		private static readonly System.Lazy<FieldAccessor<AI_State_PinDown, AttachPlayer>> _attachPlayerScript =
				new System.Lazy<FieldAccessor<AI_State_PinDown, AttachPlayer>>(() => FieldAccessor<AI_State_PinDown, AttachPlayer>.Create("attachPlayerScript"));
		private static readonly System.Lazy<FieldAccessor<AI_State_PinDown, AnimatorController>> _animatorController =
				new System.Lazy<FieldAccessor<AI_State_PinDown, AnimatorController>>(() => FieldAccessor<AI_State_PinDown, AnimatorController>.Create("animatorController"));
		private static readonly System.Lazy<FieldAccessor<AI_State_PinDown, UnityEngine.ParticleSystem>> _droolParticles =
				new System.Lazy<FieldAccessor<AI_State_PinDown, UnityEngine.ParticleSystem>>(() => FieldAccessor<AI_State_PinDown, UnityEngine.ParticleSystem>.Create("droolParticles"));
		private static readonly System.Lazy<FieldAccessor<AI_State_PinDown, float>> _movementSpeed =
				new System.Lazy<FieldAccessor<AI_State_PinDown, float>>(() => FieldAccessor<AI_State_PinDown, float>.Create("movementSpeed"));
		private static readonly System.Lazy<FieldAccessor<AI_State_PinDown, float>> _accelerationSpeed =
				new System.Lazy<FieldAccessor<AI_State_PinDown, float>>(() => FieldAccessor<AI_State_PinDown, float>.Create("accelerationSpeed"));
		private static readonly System.Lazy<FieldAccessor<AI_State_PinDown, float>> _chargeUpTime =
				new System.Lazy<FieldAccessor<AI_State_PinDown, float>>(() => FieldAccessor<AI_State_PinDown, float>.Create("chargeUpTime"));
		private static readonly System.Lazy<FieldAccessor<AI_State_PinDown, float>> _rotateSpeed =
				new System.Lazy<FieldAccessor<AI_State_PinDown, float>>(() => FieldAccessor<AI_State_PinDown, float>.Create("rotateSpeed"));
		private static readonly System.Lazy<FieldAccessor<AI_State_PinDown, float>> _reachPlayerDistance =
				new System.Lazy<FieldAccessor<AI_State_PinDown, float>>(() => FieldAccessor<AI_State_PinDown, float>.Create("reachPlayerDistance"));
		private static readonly System.Lazy<FieldAccessor<AI_State_PinDown, float>> _totalDamage =
				new System.Lazy<FieldAccessor<AI_State_PinDown, float>>(() => FieldAccessor<AI_State_PinDown, float>.Create("totalDamage"));
		private static readonly System.Lazy<FieldAccessor<AI_State_PinDown, float>> _totalPinTime =
				new System.Lazy<FieldAccessor<AI_State_PinDown, float>>(() => FieldAccessor<AI_State_PinDown, float>.Create("totalPinTime"));
		private static readonly System.Lazy<FieldAccessor<AI_State_PinDown, float>> _maxChargeTime =
				new System.Lazy<FieldAccessor<AI_State_PinDown, float>>(() => FieldAccessor<AI_State_PinDown, float>.Create("maxChargeTime"));
		private static readonly System.Lazy<FieldAccessor<AI_State_PinDown, string>> _attackRoarAnimationParameter =
				new System.Lazy<FieldAccessor<AI_State_PinDown, string>>(() => FieldAccessor<AI_State_PinDown, string>.Create("attackRoarAnimationParameter"));
		private static readonly System.Lazy<FieldAccessor<AI_State_PinDown, string>> _attackLoadUpAnimationParameter =
				new System.Lazy<FieldAccessor<AI_State_PinDown, string>>(() => FieldAccessor<AI_State_PinDown, string>.Create("attackLoadUpAnimationParameter"));
		private static readonly System.Lazy<FieldAccessor<AI_State_PinDown, FMODUnity.StudioEventEmitter>> _emitter_charge =
				new System.Lazy<FieldAccessor<AI_State_PinDown, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<AI_State_PinDown, FMODUnity.StudioEventEmitter>.Create("emitter_charge"));
		private static readonly System.Lazy<FieldAccessor<AI_State_PinDown, FMODUnity.StudioEventEmitter>> _emitter_pindDown =
				new System.Lazy<FieldAccessor<AI_State_PinDown, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<AI_State_PinDown, FMODUnity.StudioEventEmitter>.Create("emitter_pindDown"));
		private static readonly System.Lazy<FieldAccessor<AI_State_PinDown, string>> _eventRef_roar =
				new System.Lazy<FieldAccessor<AI_State_PinDown, string>>(() => FieldAccessor<AI_State_PinDown, string>.Create("eventRef_roar"));
		private static readonly System.Lazy<FieldAccessor<AI_State_PinDown, string>> _eventRef_loadUp =
				new System.Lazy<FieldAccessor<AI_State_PinDown, string>>(() => FieldAccessor<AI_State_PinDown, string>.Create("eventRef_loadUp"));
		private static readonly System.Lazy<FieldAccessor<AI_State_PinDown, AI_StateMachine_HyenaBoss>> _bossSM =
				new System.Lazy<FieldAccessor<AI_State_PinDown, AI_StateMachine_HyenaBoss>>(() => FieldAccessor<AI_State_PinDown, AI_StateMachine_HyenaBoss>.Create("bossSM"));
		private static readonly System.Lazy<FieldAccessor<AI_State_PinDown, Raft_Network>> _network =
				new System.Lazy<FieldAccessor<AI_State_PinDown, Raft_Network>>(() => FieldAccessor<AI_State_PinDown, Raft_Network>.Create("network"));
		private static readonly System.Lazy<FieldAccessor<AI_State_PinDown, Network_Host>> _networkHost =
				new System.Lazy<FieldAccessor<AI_State_PinDown, Network_Host>>(() => FieldAccessor<AI_State_PinDown, Network_Host>.Create("networkHost"));
		private static readonly System.Lazy<FieldAccessor<AI_State_PinDown, AI_NetworkBehaviour>> _networkBehaviour =
				new System.Lazy<FieldAccessor<AI_State_PinDown, AI_NetworkBehaviour>>(() => FieldAccessor<AI_State_PinDown, AI_NetworkBehaviour>.Create("networkBehaviour"));

		public static AI_State GetNextState(this AI_State_PinDown __self) => _nextState.Value.GetValue(__self);
		public static void SetNextState(this AI_State_PinDown __self, AI_State value) => _nextState.Value.SetValue(__self, value);
		public static AttachPlayer GetAttachPlayerScript(this AI_State_PinDown __self) => _attachPlayerScript.Value.GetValue(__self);
		public static void SetAttachPlayerScript(this AI_State_PinDown __self, AttachPlayer value) => _attachPlayerScript.Value.SetValue(__self, value);
		public static AnimatorController GetAnimatorController(this AI_State_PinDown __self) => _animatorController.Value.GetValue(__self);
		public static void SetAnimatorController(this AI_State_PinDown __self, AnimatorController value) => _animatorController.Value.SetValue(__self, value);
		public static UnityEngine.ParticleSystem GetDroolParticles(this AI_State_PinDown __self) => _droolParticles.Value.GetValue(__self);
		public static void SetDroolParticles(this AI_State_PinDown __self, UnityEngine.ParticleSystem value) => _droolParticles.Value.SetValue(__self, value);
		public static float GetMovementSpeed(this AI_State_PinDown __self) => _movementSpeed.Value.GetValue(__self);
		public static void SetMovementSpeed(this AI_State_PinDown __self, float value) => _movementSpeed.Value.SetValue(__self, value);
		public static float GetAccelerationSpeed(this AI_State_PinDown __self) => _accelerationSpeed.Value.GetValue(__self);
		public static void SetAccelerationSpeed(this AI_State_PinDown __self, float value) => _accelerationSpeed.Value.SetValue(__self, value);
		public static float GetChargeUpTime(this AI_State_PinDown __self) => _chargeUpTime.Value.GetValue(__self);
		public static void SetChargeUpTime(this AI_State_PinDown __self, float value) => _chargeUpTime.Value.SetValue(__self, value);
		public static float GetRotateSpeed(this AI_State_PinDown __self) => _rotateSpeed.Value.GetValue(__self);
		public static void SetRotateSpeed(this AI_State_PinDown __self, float value) => _rotateSpeed.Value.SetValue(__self, value);
		public static float GetReachPlayerDistance(this AI_State_PinDown __self) => _reachPlayerDistance.Value.GetValue(__self);
		public static void SetReachPlayerDistance(this AI_State_PinDown __self, float value) => _reachPlayerDistance.Value.SetValue(__self, value);
		public static float GetTotalDamage(this AI_State_PinDown __self) => _totalDamage.Value.GetValue(__self);
		public static void SetTotalDamage(this AI_State_PinDown __self, float value) => _totalDamage.Value.SetValue(__self, value);
		public static float GetTotalPinTime(this AI_State_PinDown __self) => _totalPinTime.Value.GetValue(__self);
		public static void SetTotalPinTime(this AI_State_PinDown __self, float value) => _totalPinTime.Value.SetValue(__self, value);
		public static float GetMaxChargeTime(this AI_State_PinDown __self) => _maxChargeTime.Value.GetValue(__self);
		public static void SetMaxChargeTime(this AI_State_PinDown __self, float value) => _maxChargeTime.Value.SetValue(__self, value);
		public static string GetAttackRoarAnimationParameter(this AI_State_PinDown __self) => _attackRoarAnimationParameter.Value.GetValue(__self);
		public static void SetAttackRoarAnimationParameter(this AI_State_PinDown __self, string value) => _attackRoarAnimationParameter.Value.SetValue(__self, value);
		public static string GetAttackLoadUpAnimationParameter(this AI_State_PinDown __self) => _attackLoadUpAnimationParameter.Value.GetValue(__self);
		public static void SetAttackLoadUpAnimationParameter(this AI_State_PinDown __self, string value) => _attackLoadUpAnimationParameter.Value.SetValue(__self, value);
		public static FMODUnity.StudioEventEmitter GetEmitter_charge(this AI_State_PinDown __self) => _emitter_charge.Value.GetValue(__self);
		public static void SetEmitter_charge(this AI_State_PinDown __self, FMODUnity.StudioEventEmitter value) => _emitter_charge.Value.SetValue(__self, value);
		public static FMODUnity.StudioEventEmitter GetEmitter_pindDown(this AI_State_PinDown __self) => _emitter_pindDown.Value.GetValue(__self);
		public static void SetEmitter_pindDown(this AI_State_PinDown __self, FMODUnity.StudioEventEmitter value) => _emitter_pindDown.Value.SetValue(__self, value);
		public static string GetEventRef_roar(this AI_State_PinDown __self) => _eventRef_roar.Value.GetValue(__self);
		public static void SetEventRef_roar(this AI_State_PinDown __self, string value) => _eventRef_roar.Value.SetValue(__self, value);
		public static string GetEventRef_loadUp(this AI_State_PinDown __self) => _eventRef_loadUp.Value.GetValue(__self);
		public static void SetEventRef_loadUp(this AI_State_PinDown __self, string value) => _eventRef_loadUp.Value.SetValue(__self, value);
		public static AI_StateMachine_HyenaBoss GetBossSM(this AI_State_PinDown __self) => _bossSM.Value.GetValue(__self);
		public static void SetBossSM(this AI_State_PinDown __self, AI_StateMachine_HyenaBoss value) => _bossSM.Value.SetValue(__self, value);
		public static Raft_Network GetNetwork(this AI_State_PinDown __self) => _network.Value.GetValue(__self);
		public static void SetNetwork(this AI_State_PinDown __self, Raft_Network value) => _network.Value.SetValue(__self, value);
		public static Network_Host GetNetworkHost(this AI_State_PinDown __self) => _networkHost.Value.GetValue(__self);
		public static void SetNetworkHost(this AI_State_PinDown __self, Network_Host value) => _networkHost.Value.SetValue(__self, value);
		public static AI_NetworkBehaviour GetNetworkBehaviour(this AI_State_PinDown __self) => _networkBehaviour.Value.GetValue(__self);
		public static void SetNetworkBehaviour(this AI_State_PinDown __self, AI_NetworkBehaviour value) => _networkBehaviour.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_State_PinDown>> _Start757602046 =
				new System.Lazy<MethodAccessor<AI_State_PinDown>>(() => MethodAccessor<AI_State_PinDown>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<AI_State_PinDown>> _OnAnimationEvent3454057852 =
				new System.Lazy<MethodAccessor<AI_State_PinDown>>(() => MethodAccessor<AI_State_PinDown>.Create("OnAnimationEvent", typeof(string)));
		private static readonly System.Lazy<MethodAccessor<AI_State_PinDown>> _PinDown757602046 =
				new System.Lazy<MethodAccessor<AI_State_PinDown>>(() => MethodAccessor<AI_State_PinDown>.Create("PinDown"));
		private static readonly System.Lazy<MethodAccessor<AI_State_PinDown>> _StartPin3461878659 =
				new System.Lazy<MethodAccessor<AI_State_PinDown>>(() => MethodAccessor<AI_State_PinDown>.Create("StartPin", typeof(Network_Player)));
		private static readonly System.Lazy<MethodAccessor<AI_State_PinDown>> _StopPin757602046 =
				new System.Lazy<MethodAccessor<AI_State_PinDown>>(() => MethodAccessor<AI_State_PinDown>.Create("StopPin"));

		public static void Start(this AI_State_PinDown __self) => _Start757602046.Value.Invoke(__self);
		public static void OnAnimationEvent(this AI_State_PinDown __self, string animationEventName) => _OnAnimationEvent3454057852.Value.Invoke(__self, animationEventName);
		public static System.Collections.IEnumerator PinDown(this AI_State_PinDown __self) => (System.Collections.IEnumerator)_PinDown757602046.Value.Invoke(__self);
		public static void StartPin(this AI_State_PinDown __self, Network_Player player) => _StartPin3461878659.Value.Invoke(__self, player);
		public static void StopPin(this AI_State_PinDown __self) => _StopPin757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AI_State_Throw
	{

		private static readonly System.Lazy<FieldAccessor<AI_State_Throw, AI_StateMachine_HyenaBoss>> _bossSM =
				new System.Lazy<FieldAccessor<AI_State_Throw, AI_StateMachine_HyenaBoss>>(() => FieldAccessor<AI_State_Throw, AI_StateMachine_HyenaBoss>.Create("bossSM"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Throw, AI_State>> _nextState =
				new System.Lazy<FieldAccessor<AI_State_Throw, AI_State>>(() => FieldAccessor<AI_State_Throw, AI_State>.Create("nextState"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Throw, AnimatorController>> _animatorController =
				new System.Lazy<FieldAccessor<AI_State_Throw, AnimatorController>>(() => FieldAccessor<AI_State_Throw, AnimatorController>.Create("animatorController"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Throw, StoneDrop>> _stonePrefab =
				new System.Lazy<FieldAccessor<AI_State_Throw, StoneDrop>>(() => FieldAccessor<AI_State_Throw, StoneDrop>.Create("stonePrefab"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Throw, UnityEngine.Transform>> _stoneSpawnParent =
				new System.Lazy<FieldAccessor<AI_State_Throw, UnityEngine.Transform>>(() => FieldAccessor<AI_State_Throw, UnityEngine.Transform>.Create("stoneSpawnParent"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Throw, UnityEngine.ParticleSystem>> _digParticles =
				new System.Lazy<FieldAccessor<AI_State_Throw, UnityEngine.ParticleSystem>>(() => FieldAccessor<AI_State_Throw, UnityEngine.ParticleSystem>.Create("digParticles"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Throw, int>> _numberOfThrows =
				new System.Lazy<FieldAccessor<AI_State_Throw, int>>(() => FieldAccessor<AI_State_Throw, int>.Create("numberOfThrows"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Throw, float>> _rotationSpeed =
				new System.Lazy<FieldAccessor<AI_State_Throw, float>>(() => FieldAccessor<AI_State_Throw, float>.Create("rotationSpeed"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Throw, float>> _predictDistance =
				new System.Lazy<FieldAccessor<AI_State_Throw, float>>(() => FieldAccessor<AI_State_Throw, float>.Create("predictDistance"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Throw, float>> _throwHeight =
				new System.Lazy<FieldAccessor<AI_State_Throw, float>>(() => FieldAccessor<AI_State_Throw, float>.Create("throwHeight"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Throw, float>> _stoneTravelTime =
				new System.Lazy<FieldAccessor<AI_State_Throw, float>>(() => FieldAccessor<AI_State_Throw, float>.Create("stoneTravelTime"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Throw, float>> _pullStoneIncrement =
				new System.Lazy<FieldAccessor<AI_State_Throw, float>>(() => FieldAccessor<AI_State_Throw, float>.Create("pullStoneIncrement"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Throw, float>> _throwAngleOffset =
				new System.Lazy<FieldAccessor<AI_State_Throw, float>>(() => FieldAccessor<AI_State_Throw, float>.Create("throwAngleOffset"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Throw, float>> _acidInterval =
				new System.Lazy<FieldAccessor<AI_State_Throw, float>>(() => FieldAccessor<AI_State_Throw, float>.Create("acidInterval"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Throw, string>> _animationDigStartParameter =
				new System.Lazy<FieldAccessor<AI_State_Throw, string>>(() => FieldAccessor<AI_State_Throw, string>.Create("animationDigStartParameter"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Throw, string>> _animationDigEndParameter =
				new System.Lazy<FieldAccessor<AI_State_Throw, string>>(() => FieldAccessor<AI_State_Throw, string>.Create("animationDigEndParameter"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Throw, string>> _animationThrowParameter =
				new System.Lazy<FieldAccessor<AI_State_Throw, string>>(() => FieldAccessor<AI_State_Throw, string>.Create("animationThrowParameter"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Throw, string>> _eventRef_pullStone =
				new System.Lazy<FieldAccessor<AI_State_Throw, string>>(() => FieldAccessor<AI_State_Throw, string>.Create("eventRef_pullStone"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Throw, UnityEngine.Coroutine>> _throwRoutine =
				new System.Lazy<FieldAccessor<AI_State_Throw, UnityEngine.Coroutine>>(() => FieldAccessor<AI_State_Throw, UnityEngine.Coroutine>.Create("throwRoutine"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Throw, StoneDrop>> _stone =
				new System.Lazy<FieldAccessor<AI_State_Throw, StoneDrop>>(() => FieldAccessor<AI_State_Throw, StoneDrop>.Create("stone"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Throw, bool>> _waitingForDig =
				new System.Lazy<FieldAccessor<AI_State_Throw, bool>>(() => FieldAccessor<AI_State_Throw, bool>.Create("waitingForDig"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Throw, bool>> _waitingForThrow =
				new System.Lazy<FieldAccessor<AI_State_Throw, bool>>(() => FieldAccessor<AI_State_Throw, bool>.Create("waitingForThrow"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Throw, Raft_Network>> _network =
				new System.Lazy<FieldAccessor<AI_State_Throw, Raft_Network>>(() => FieldAccessor<AI_State_Throw, Raft_Network>.Create("network"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Throw, AI_NetworkBehaviour>> _networkBehaviour =
				new System.Lazy<FieldAccessor<AI_State_Throw, AI_NetworkBehaviour>>(() => FieldAccessor<AI_State_Throw, AI_NetworkBehaviour>.Create("networkBehaviour"));

		public static AI_StateMachine_HyenaBoss GetBossSM(this AI_State_Throw __self) => _bossSM.Value.GetValue(__self);
		public static void SetBossSM(this AI_State_Throw __self, AI_StateMachine_HyenaBoss value) => _bossSM.Value.SetValue(__self, value);
		public static AI_State GetNextState(this AI_State_Throw __self) => _nextState.Value.GetValue(__self);
		public static void SetNextState(this AI_State_Throw __self, AI_State value) => _nextState.Value.SetValue(__self, value);
		public static AnimatorController GetAnimatorController(this AI_State_Throw __self) => _animatorController.Value.GetValue(__self);
		public static void SetAnimatorController(this AI_State_Throw __self, AnimatorController value) => _animatorController.Value.SetValue(__self, value);
		public static StoneDrop GetStonePrefab(this AI_State_Throw __self) => _stonePrefab.Value.GetValue(__self);
		public static void SetStonePrefab(this AI_State_Throw __self, StoneDrop value) => _stonePrefab.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetStoneSpawnParent(this AI_State_Throw __self) => _stoneSpawnParent.Value.GetValue(__self);
		public static void SetStoneSpawnParent(this AI_State_Throw __self, UnityEngine.Transform value) => _stoneSpawnParent.Value.SetValue(__self, value);
		public static UnityEngine.ParticleSystem GetDigParticles(this AI_State_Throw __self) => _digParticles.Value.GetValue(__self);
		public static void SetDigParticles(this AI_State_Throw __self, UnityEngine.ParticleSystem value) => _digParticles.Value.SetValue(__self, value);
		public static int GetNumberOfThrows(this AI_State_Throw __self) => _numberOfThrows.Value.GetValue(__self);
		public static void SetNumberOfThrows(this AI_State_Throw __self, int value) => _numberOfThrows.Value.SetValue(__self, value);
		public static float GetRotationSpeed(this AI_State_Throw __self) => _rotationSpeed.Value.GetValue(__self);
		public static void SetRotationSpeed(this AI_State_Throw __self, float value) => _rotationSpeed.Value.SetValue(__self, value);
		public static float GetPredictDistance(this AI_State_Throw __self) => _predictDistance.Value.GetValue(__self);
		public static void SetPredictDistance(this AI_State_Throw __self, float value) => _predictDistance.Value.SetValue(__self, value);
		public static float GetThrowHeight(this AI_State_Throw __self) => _throwHeight.Value.GetValue(__self);
		public static void SetThrowHeight(this AI_State_Throw __self, float value) => _throwHeight.Value.SetValue(__self, value);
		public static float GetStoneTravelTime(this AI_State_Throw __self) => _stoneTravelTime.Value.GetValue(__self);
		public static void SetStoneTravelTime(this AI_State_Throw __self, float value) => _stoneTravelTime.Value.SetValue(__self, value);
		public static float GetPullStoneIncrement(this AI_State_Throw __self) => _pullStoneIncrement.Value.GetValue(__self);
		public static void SetPullStoneIncrement(this AI_State_Throw __self, float value) => _pullStoneIncrement.Value.SetValue(__self, value);
		public static float GetThrowAngleOffset(this AI_State_Throw __self) => _throwAngleOffset.Value.GetValue(__self);
		public static void SetThrowAngleOffset(this AI_State_Throw __self, float value) => _throwAngleOffset.Value.SetValue(__self, value);
		public static float GetAcidInterval(this AI_State_Throw __self) => _acidInterval.Value.GetValue(__self);
		public static void SetAcidInterval(this AI_State_Throw __self, float value) => _acidInterval.Value.SetValue(__self, value);
		public static string GetAnimationDigStartParameter(this AI_State_Throw __self) => _animationDigStartParameter.Value.GetValue(__self);
		public static void SetAnimationDigStartParameter(this AI_State_Throw __self, string value) => _animationDigStartParameter.Value.SetValue(__self, value);
		public static string GetAnimationDigEndParameter(this AI_State_Throw __self) => _animationDigEndParameter.Value.GetValue(__self);
		public static void SetAnimationDigEndParameter(this AI_State_Throw __self, string value) => _animationDigEndParameter.Value.SetValue(__self, value);
		public static string GetAnimationThrowParameter(this AI_State_Throw __self) => _animationThrowParameter.Value.GetValue(__self);
		public static void SetAnimationThrowParameter(this AI_State_Throw __self, string value) => _animationThrowParameter.Value.SetValue(__self, value);
		public static string GetEventRef_pullStone(this AI_State_Throw __self) => _eventRef_pullStone.Value.GetValue(__self);
		public static void SetEventRef_pullStone(this AI_State_Throw __self, string value) => _eventRef_pullStone.Value.SetValue(__self, value);
		public static UnityEngine.Coroutine GetThrowRoutine(this AI_State_Throw __self) => _throwRoutine.Value.GetValue(__self);
		public static void SetThrowRoutine(this AI_State_Throw __self, UnityEngine.Coroutine value) => _throwRoutine.Value.SetValue(__self, value);
		public static StoneDrop GetStone(this AI_State_Throw __self) => _stone.Value.GetValue(__self);
		public static void SetStone(this AI_State_Throw __self, StoneDrop value) => _stone.Value.SetValue(__self, value);
		public static bool GetWaitingForDig(this AI_State_Throw __self) => _waitingForDig.Value.GetValue(__self);
		public static void SetWaitingForDig(this AI_State_Throw __self, bool value) => _waitingForDig.Value.SetValue(__self, value);
		public static bool GetWaitingForThrow(this AI_State_Throw __self) => _waitingForThrow.Value.GetValue(__self);
		public static void SetWaitingForThrow(this AI_State_Throw __self, bool value) => _waitingForThrow.Value.SetValue(__self, value);
		public static Raft_Network GetNetwork(this AI_State_Throw __self) => _network.Value.GetValue(__self);
		public static void SetNetwork(this AI_State_Throw __self, Raft_Network value) => _network.Value.SetValue(__self, value);
		public static AI_NetworkBehaviour GetNetworkBehaviour(this AI_State_Throw __self) => _networkBehaviour.Value.GetValue(__self);
		public static void SetNetworkBehaviour(this AI_State_Throw __self, AI_NetworkBehaviour value) => _networkBehaviour.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_State_Throw>> _Start757602046 =
				new System.Lazy<MethodAccessor<AI_State_Throw>>(() => MethodAccessor<AI_State_Throw>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<AI_State_Throw>> _OnAnimationEvent3454057852 =
				new System.Lazy<MethodAccessor<AI_State_Throw>>(() => MethodAccessor<AI_State_Throw>.Create("OnAnimationEvent", typeof(string)));
		private static readonly System.Lazy<MethodAccessor<AI_State_Throw>> _ThrowMultiple757602046 =
				new System.Lazy<MethodAccessor<AI_State_Throw>>(() => MethodAccessor<AI_State_Throw>.Create("ThrowMultiple"));
		private static readonly System.Lazy<MethodAccessor<AI_State_Throw>> _Throw757602046 =
				new System.Lazy<MethodAccessor<AI_State_Throw>>(() => MethodAccessor<AI_State_Throw>.Create("Throw"));
		private static readonly System.Lazy<MethodAccessor<AI_State_Throw>> _ThrowStoneToPosition3429126434 =
				new System.Lazy<MethodAccessor<AI_State_Throw>>(() => MethodAccessor<AI_State_Throw>.Create("ThrowStoneToPosition", typeof(UnityEngine.Vector3)));
		private static readonly System.Lazy<MethodAccessor<AI_State_Throw>> _SetDigStoneMultiplier3486905475 =
				new System.Lazy<MethodAccessor<AI_State_Throw>>(() => MethodAccessor<AI_State_Throw>.Create("SetDigStoneMultiplier", typeof(float)));

		public static void Start(this AI_State_Throw __self) => _Start757602046.Value.Invoke(__self);
		public static void OnAnimationEvent(this AI_State_Throw __self, string animationEventName) => _OnAnimationEvent3454057852.Value.Invoke(__self, animationEventName);
		public static System.Collections.IEnumerator ThrowMultiple(this AI_State_Throw __self) => (System.Collections.IEnumerator)_ThrowMultiple757602046.Value.Invoke(__self);
		public static System.Collections.IEnumerator Throw(this AI_State_Throw __self) => (System.Collections.IEnumerator)_Throw757602046.Value.Invoke(__self);
		public static System.Collections.IEnumerator ThrowStoneToPosition(this AI_State_Throw __self, UnityEngine.Vector3 targetPosition) => (System.Collections.IEnumerator)_ThrowStoneToPosition3429126434.Value.Invoke(__self, targetPosition);
		public static void SetDigStoneMultiplier(this AI_State_Throw __self, float multiplier) => _SetDigStoneMultiplier3486905475.Value.Invoke(__self, multiplier);

	}

	public static class PrivateAccessor_AI_State_Wait_HyenaBossEat
	{

		private static readonly System.Lazy<FieldAccessor<AI_State_Wait_HyenaBossEat, AI_State>> _nextState =
				new System.Lazy<FieldAccessor<AI_State_Wait_HyenaBossEat, AI_State>>(() => FieldAccessor<AI_State_Wait_HyenaBossEat, AI_State>.Create("nextState"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Wait_HyenaBossEat, AnimatorController>> _animatorController =
				new System.Lazy<FieldAccessor<AI_State_Wait_HyenaBossEat, AnimatorController>>(() => FieldAccessor<AI_State_Wait_HyenaBossEat, AnimatorController>.Create("animatorController"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Wait_HyenaBossEat, float>> _eatDuration =
				new System.Lazy<FieldAccessor<AI_State_Wait_HyenaBossEat, float>>(() => FieldAccessor<AI_State_Wait_HyenaBossEat, float>.Create("eatDuration"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Wait_HyenaBossEat, float>> _rotationSpeed =
				new System.Lazy<FieldAccessor<AI_State_Wait_HyenaBossEat, float>>(() => FieldAccessor<AI_State_Wait_HyenaBossEat, float>.Create("rotationSpeed"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Wait_HyenaBossEat, string>> _eventRef_eat =
				new System.Lazy<FieldAccessor<AI_State_Wait_HyenaBossEat, string>>(() => FieldAccessor<AI_State_Wait_HyenaBossEat, string>.Create("eventRef_eat"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Wait_HyenaBossEat, AI_StateMachine_HyenaBoss>> _bossSM =
				new System.Lazy<FieldAccessor<AI_State_Wait_HyenaBossEat, AI_StateMachine_HyenaBoss>>(() => FieldAccessor<AI_State_Wait_HyenaBossEat, AI_StateMachine_HyenaBoss>.Create("bossSM"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Wait_HyenaBossEat, Boss_OlofPart2>> _olof =
				new System.Lazy<FieldAccessor<AI_State_Wait_HyenaBossEat, Boss_OlofPart2>>(() => FieldAccessor<AI_State_Wait_HyenaBossEat, Boss_OlofPart2>.Create("olof"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Wait_HyenaBossEat, UnityEngine.Coroutine>> _eatRoutine =
				new System.Lazy<FieldAccessor<AI_State_Wait_HyenaBossEat, UnityEngine.Coroutine>>(() => FieldAccessor<AI_State_Wait_HyenaBossEat, UnityEngine.Coroutine>.Create("eatRoutine"));

		public static AI_State GetNextState(this AI_State_Wait_HyenaBossEat __self) => _nextState.Value.GetValue(__self);
		public static void SetNextState(this AI_State_Wait_HyenaBossEat __self, AI_State value) => _nextState.Value.SetValue(__self, value);
		public static AnimatorController GetAnimatorController(this AI_State_Wait_HyenaBossEat __self) => _animatorController.Value.GetValue(__self);
		public static void SetAnimatorController(this AI_State_Wait_HyenaBossEat __self, AnimatorController value) => _animatorController.Value.SetValue(__self, value);
		public static float GetEatDuration(this AI_State_Wait_HyenaBossEat __self) => _eatDuration.Value.GetValue(__self);
		public static void SetEatDuration(this AI_State_Wait_HyenaBossEat __self, float value) => _eatDuration.Value.SetValue(__self, value);
		public static float GetRotationSpeed(this AI_State_Wait_HyenaBossEat __self) => _rotationSpeed.Value.GetValue(__self);
		public static void SetRotationSpeed(this AI_State_Wait_HyenaBossEat __self, float value) => _rotationSpeed.Value.SetValue(__self, value);
		public static string GetEventRef_eat(this AI_State_Wait_HyenaBossEat __self) => _eventRef_eat.Value.GetValue(__self);
		public static void SetEventRef_eat(this AI_State_Wait_HyenaBossEat __self, string value) => _eventRef_eat.Value.SetValue(__self, value);
		public static AI_StateMachine_HyenaBoss GetBossSM(this AI_State_Wait_HyenaBossEat __self) => _bossSM.Value.GetValue(__self);
		public static void SetBossSM(this AI_State_Wait_HyenaBossEat __self, AI_StateMachine_HyenaBoss value) => _bossSM.Value.SetValue(__self, value);
		public static Boss_OlofPart2 GetOlof(this AI_State_Wait_HyenaBossEat __self) => _olof.Value.GetValue(__self);
		public static void SetOlof(this AI_State_Wait_HyenaBossEat __self, Boss_OlofPart2 value) => _olof.Value.SetValue(__self, value);
		public static UnityEngine.Coroutine GetEatRoutine(this AI_State_Wait_HyenaBossEat __self) => _eatRoutine.Value.GetValue(__self);
		public static void SetEatRoutine(this AI_State_Wait_HyenaBossEat __self, UnityEngine.Coroutine value) => _eatRoutine.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_State_Wait_HyenaBossEat>> _Awake757602046 =
				new System.Lazy<MethodAccessor<AI_State_Wait_HyenaBossEat>>(() => MethodAccessor<AI_State_Wait_HyenaBossEat>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<AI_State_Wait_HyenaBossEat>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<AI_State_Wait_HyenaBossEat>>(() => MethodAccessor<AI_State_Wait_HyenaBossEat>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<AI_State_Wait_HyenaBossEat>> _Start757602046 =
				new System.Lazy<MethodAccessor<AI_State_Wait_HyenaBossEat>>(() => MethodAccessor<AI_State_Wait_HyenaBossEat>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<AI_State_Wait_HyenaBossEat>> _OnOlofThrowMeat757602046 =
				new System.Lazy<MethodAccessor<AI_State_Wait_HyenaBossEat>>(() => MethodAccessor<AI_State_Wait_HyenaBossEat>.Create("OnOlofThrowMeat"));
		private static readonly System.Lazy<MethodAccessor<AI_State_Wait_HyenaBossEat>> _Eat757602046 =
				new System.Lazy<MethodAccessor<AI_State_Wait_HyenaBossEat>>(() => MethodAccessor<AI_State_Wait_HyenaBossEat>.Create("Eat"));

		public static void Awake(this AI_State_Wait_HyenaBossEat __self) => _Awake757602046.Value.Invoke(__self);
		public static void OnDestroy(this AI_State_Wait_HyenaBossEat __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void Start(this AI_State_Wait_HyenaBossEat __self) => _Start757602046.Value.Invoke(__self);
		public static void OnOlofThrowMeat(this AI_State_Wait_HyenaBossEat __self) => _OnOlofThrowMeat757602046.Value.Invoke(__self);
		public static System.Collections.IEnumerator Eat(this AI_State_Wait_HyenaBossEat __self) => (System.Collections.IEnumerator)_Eat757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AI_State_Bear_Decide_AttackState
	{

		private static readonly System.Lazy<FieldAccessor<AI_State_Bear_Decide_AttackState, MovementDeltaTracker>> _deltaTracker =
				new System.Lazy<FieldAccessor<AI_State_Bear_Decide_AttackState, MovementDeltaTracker>>(() => FieldAccessor<AI_State_Bear_Decide_AttackState, MovementDeltaTracker>.Create("deltaTracker"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Bear_Decide_AttackState, AI_StateMachine_Bear>> _bearStateMachine =
				new System.Lazy<FieldAccessor<AI_State_Bear_Decide_AttackState, AI_StateMachine_Bear>>(() => FieldAccessor<AI_State_Bear_Decide_AttackState, AI_StateMachine_Bear>.Create("bearStateMachine"));

		public static MovementDeltaTracker GetDeltaTracker(this AI_State_Bear_Decide_AttackState __self) => _deltaTracker.Value.GetValue(__self);
		public static void SetDeltaTracker(this AI_State_Bear_Decide_AttackState __self, MovementDeltaTracker value) => _deltaTracker.Value.SetValue(__self, value);
		public static AI_StateMachine_Bear GetBearStateMachine(this AI_State_Bear_Decide_AttackState __self) => _bearStateMachine.Value.GetValue(__self);
		public static void SetBearStateMachine(this AI_State_Bear_Decide_AttackState __self, AI_StateMachine_Bear value) => _bearStateMachine.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_State_Bear_Decide_AttackState>> _Start757602046 =
				new System.Lazy<MethodAccessor<AI_State_Bear_Decide_AttackState>>(() => MethodAccessor<AI_State_Bear_Decide_AttackState>.Create("Start"));

		public static void Start(this AI_State_Bear_Decide_AttackState __self) => _Start757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AI_State_Chase_MamaBear
	{

		private static readonly System.Lazy<FieldAccessor<AI_State_Chase_MamaBear, float>> _distanceFromOriginLure =
				new System.Lazy<FieldAccessor<AI_State_Chase_MamaBear, float>>(() => FieldAccessor<AI_State_Chase_MamaBear, float>.Create("distanceFromOriginLure"));

		public static float GetDistanceFromOriginLure(this AI_State_Chase_MamaBear __self) => _distanceFromOriginLure.Value.GetValue(__self);
		public static void SetDistanceFromOriginLure(this AI_State_Chase_MamaBear __self, float value) => _distanceFromOriginLure.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_AI_State_MamaBear_EatLure
	{

		private static readonly System.Lazy<FieldAccessor<AI_State_MamaBear_EatLure, AI_StateMachine_MamaBear>> _stateMachine_MamaBear =
				new System.Lazy<FieldAccessor<AI_State_MamaBear_EatLure, AI_StateMachine_MamaBear>>(() => FieldAccessor<AI_State_MamaBear_EatLure, AI_StateMachine_MamaBear>.Create("stateMachine_MamaBear"));

		public static AI_StateMachine_MamaBear GetStateMachine_MamaBear(this AI_State_MamaBear_EatLure __self) => _stateMachine_MamaBear.Value.GetValue(__self);
		public static void SetStateMachine_MamaBear(this AI_State_MamaBear_EatLure __self, AI_StateMachine_MamaBear value) => _stateMachine_MamaBear.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_AI_State_MoveToPoint_MamaBear
	{

		private static readonly System.Lazy<FieldAccessor<AI_State_MoveToPoint_MamaBear, AI_State>> _reachCaveState =
				new System.Lazy<FieldAccessor<AI_State_MoveToPoint_MamaBear, AI_State>>(() => FieldAccessor<AI_State_MoveToPoint_MamaBear, AI_State>.Create("reachCaveState"));
		private static readonly System.Lazy<FieldAccessor<AI_State_MoveToPoint_MamaBear, AI_State>> _reachLureState =
				new System.Lazy<FieldAccessor<AI_State_MoveToPoint_MamaBear, AI_State>>(() => FieldAccessor<AI_State_MoveToPoint_MamaBear, AI_State>.Create("reachLureState"));
		private static readonly System.Lazy<FieldAccessor<AI_State_MoveToPoint_MamaBear, AI_StateMachine_MamaBear>> _stateMachine_MamaBear =
				new System.Lazy<FieldAccessor<AI_State_MoveToPoint_MamaBear, AI_StateMachine_MamaBear>>(() => FieldAccessor<AI_State_MoveToPoint_MamaBear, AI_StateMachine_MamaBear>.Create("stateMachine_MamaBear"));

		public static AI_State GetReachCaveState(this AI_State_MoveToPoint_MamaBear __self) => _reachCaveState.Value.GetValue(__self);
		public static void SetReachCaveState(this AI_State_MoveToPoint_MamaBear __self, AI_State value) => _reachCaveState.Value.SetValue(__self, value);
		public static AI_State GetReachLureState(this AI_State_MoveToPoint_MamaBear __self) => _reachLureState.Value.GetValue(__self);
		public static void SetReachLureState(this AI_State_MoveToPoint_MamaBear __self, AI_State value) => _reachLureState.Value.SetValue(__self, value);
		public static AI_StateMachine_MamaBear GetStateMachine_MamaBear(this AI_State_MoveToPoint_MamaBear __self) => _stateMachine_MamaBear.Value.GetValue(__self);
		public static void SetStateMachine_MamaBear(this AI_State_MoveToPoint_MamaBear __self, AI_StateMachine_MamaBear value) => _stateMachine_MamaBear.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_State_MoveToPoint_MamaBear>> _Start757602046 =
				new System.Lazy<MethodAccessor<AI_State_MoveToPoint_MamaBear>>(() => MethodAccessor<AI_State_MoveToPoint_MamaBear>.Create("Start"));

		public static void Start(this AI_State_MoveToPoint_MamaBear __self) => _Start757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AI_State_Chase_Water_PufferFish
	{

		private static readonly System.Lazy<FieldAccessor<AI_State_Chase_Water_PufferFish, AI_StateMachine_PufferFish>> _stateMachinePufferFish =
				new System.Lazy<FieldAccessor<AI_State_Chase_Water_PufferFish, AI_StateMachine_PufferFish>>(() => FieldAccessor<AI_State_Chase_Water_PufferFish, AI_StateMachine_PufferFish>.Create("stateMachinePufferFish"));

		public static AI_StateMachine_PufferFish GetStateMachinePufferFish(this AI_State_Chase_Water_PufferFish __self) => _stateMachinePufferFish.Value.GetValue(__self);
		public static void SetStateMachinePufferFish(this AI_State_Chase_Water_PufferFish __self, AI_StateMachine_PufferFish value) => _stateMachinePufferFish.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_State_Chase_Water_PufferFish>> _Awake757602046 =
				new System.Lazy<MethodAccessor<AI_State_Chase_Water_PufferFish>>(() => MethodAccessor<AI_State_Chase_Water_PufferFish>.Create("Awake"));

		public static void Awake(this AI_State_Chase_Water_PufferFish __self) => _Awake757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AI_State_Dead_PufferFish
	{

		private static readonly System.Lazy<FieldAccessor<AI_State_Dead_PufferFish, UnityEngine.ParticleSystem>> _bubbleParticles =
				new System.Lazy<FieldAccessor<AI_State_Dead_PufferFish, UnityEngine.ParticleSystem>>(() => FieldAccessor<AI_State_Dead_PufferFish, UnityEngine.ParticleSystem>.Create("bubbleParticles"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Dead_PufferFish, string>> _eventref_die =
				new System.Lazy<FieldAccessor<AI_State_Dead_PufferFish, string>>(() => FieldAccessor<AI_State_Dead_PufferFish, string>.Create("eventref_die"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Dead_PufferFish, AI_StateMachine_PufferFish>> _stateMachinePufferFish =
				new System.Lazy<FieldAccessor<AI_State_Dead_PufferFish, AI_StateMachine_PufferFish>>(() => FieldAccessor<AI_State_Dead_PufferFish, AI_StateMachine_PufferFish>.Create("stateMachinePufferFish"));

		public static UnityEngine.ParticleSystem GetBubbleParticles(this AI_State_Dead_PufferFish __self) => _bubbleParticles.Value.GetValue(__self);
		public static void SetBubbleParticles(this AI_State_Dead_PufferFish __self, UnityEngine.ParticleSystem value) => _bubbleParticles.Value.SetValue(__self, value);
		public static string GetEventref_die(this AI_State_Dead_PufferFish __self) => _eventref_die.Value.GetValue(__self);
		public static void SetEventref_die(this AI_State_Dead_PufferFish __self, string value) => _eventref_die.Value.SetValue(__self, value);
		public static AI_StateMachine_PufferFish GetStateMachinePufferFish(this AI_State_Dead_PufferFish __self) => _stateMachinePufferFish.Value.GetValue(__self);
		public static void SetStateMachinePufferFish(this AI_State_Dead_PufferFish __self, AI_StateMachine_PufferFish value) => _stateMachinePufferFish.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_State_Dead_PufferFish>> _Awake757602046 =
				new System.Lazy<MethodAccessor<AI_State_Dead_PufferFish>>(() => MethodAccessor<AI_State_Dead_PufferFish>.Create("Awake"));

		public static void Awake(this AI_State_Dead_PufferFish __self) => _Awake757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AI_State_PufferFish_CirculateWater
	{

		private static readonly System.Lazy<MethodAccessor<AI_State_PufferFish_CirculateWater>> _Awake757602046 =
				new System.Lazy<MethodAccessor<AI_State_PufferFish_CirculateWater>>(() => MethodAccessor<AI_State_PufferFish_CirculateWater>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<AI_State_PufferFish_CirculateWater>> _Start757602046 =
				new System.Lazy<MethodAccessor<AI_State_PufferFish_CirculateWater>>(() => MethodAccessor<AI_State_PufferFish_CirculateWater>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<AI_State_PufferFish_CirculateWater>> _PlayerIsWithinRange757602046 =
				new System.Lazy<MethodAccessor<AI_State_PufferFish_CirculateWater>>(() => MethodAccessor<AI_State_PufferFish_CirculateWater>.Create("PlayerIsWithinRange"));

		public static void Awake(this AI_State_PufferFish_CirculateWater __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this AI_State_PufferFish_CirculateWater __self) => _Start757602046.Value.Invoke(__self);
		public static bool PlayerIsWithinRange(this AI_State_PufferFish_CirculateWater __self) => (bool)_PlayerIsWithinRange757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AI_State_PufferFish_Explode
	{

		private static readonly System.Lazy<FieldAccessor<AI_State_PufferFish_Explode, UnityEngine.GameObject>> _particlePrefab =
				new System.Lazy<FieldAccessor<AI_State_PufferFish_Explode, UnityEngine.GameObject>>(() => FieldAccessor<AI_State_PufferFish_Explode, UnityEngine.GameObject>.Create("particlePrefab"));
		private static readonly System.Lazy<FieldAccessor<AI_State_PufferFish_Explode, float>> _delayBeforeExplode =
				new System.Lazy<FieldAccessor<AI_State_PufferFish_Explode, float>>(() => FieldAccessor<AI_State_PufferFish_Explode, float>.Create("delayBeforeExplode"));
		private static readonly System.Lazy<FieldAccessor<AI_State_PufferFish_Explode, float>> _explosionRadius =
				new System.Lazy<FieldAccessor<AI_State_PufferFish_Explode, float>>(() => FieldAccessor<AI_State_PufferFish_Explode, float>.Create("explosionRadius"));
		private static readonly System.Lazy<FieldAccessor<AI_State_PufferFish_Explode, float>> _explosionDamage =
				new System.Lazy<FieldAccessor<AI_State_PufferFish_Explode, float>>(() => FieldAccessor<AI_State_PufferFish_Explode, float>.Create("explosionDamage"));
		private static readonly System.Lazy<FieldAccessor<AI_State_PufferFish_Explode, string>> _eventref_expand =
				new System.Lazy<FieldAccessor<AI_State_PufferFish_Explode, string>>(() => FieldAccessor<AI_State_PufferFish_Explode, string>.Create("eventref_expand"));
		private static readonly System.Lazy<FieldAccessor<AI_State_PufferFish_Explode, string>> _eventref_explode =
				new System.Lazy<FieldAccessor<AI_State_PufferFish_Explode, string>>(() => FieldAccessor<AI_State_PufferFish_Explode, string>.Create("eventref_explode"));
		private static readonly System.Lazy<FieldAccessor<AI_State_PufferFish_Explode, AI_StateMachine_PufferFish>> _stateMachinePufferFish =
				new System.Lazy<FieldAccessor<AI_State_PufferFish_Explode, AI_StateMachine_PufferFish>>(() => FieldAccessor<AI_State_PufferFish_Explode, AI_StateMachine_PufferFish>.Create("stateMachinePufferFish"));

		public static UnityEngine.GameObject GetParticlePrefab(this AI_State_PufferFish_Explode __self) => _particlePrefab.Value.GetValue(__self);
		public static void SetParticlePrefab(this AI_State_PufferFish_Explode __self, UnityEngine.GameObject value) => _particlePrefab.Value.SetValue(__self, value);
		public static float GetDelayBeforeExplode(this AI_State_PufferFish_Explode __self) => _delayBeforeExplode.Value.GetValue(__self);
		public static void SetDelayBeforeExplode(this AI_State_PufferFish_Explode __self, float value) => _delayBeforeExplode.Value.SetValue(__self, value);
		public static float GetExplosionRadius(this AI_State_PufferFish_Explode __self) => _explosionRadius.Value.GetValue(__self);
		public static void SetExplosionRadius(this AI_State_PufferFish_Explode __self, float value) => _explosionRadius.Value.SetValue(__self, value);
		public static float GetExplosionDamage(this AI_State_PufferFish_Explode __self) => _explosionDamage.Value.GetValue(__self);
		public static void SetExplosionDamage(this AI_State_PufferFish_Explode __self, float value) => _explosionDamage.Value.SetValue(__self, value);
		public static string GetEventref_expand(this AI_State_PufferFish_Explode __self) => _eventref_expand.Value.GetValue(__self);
		public static void SetEventref_expand(this AI_State_PufferFish_Explode __self, string value) => _eventref_expand.Value.SetValue(__self, value);
		public static string GetEventref_explode(this AI_State_PufferFish_Explode __self) => _eventref_explode.Value.GetValue(__self);
		public static void SetEventref_explode(this AI_State_PufferFish_Explode __self, string value) => _eventref_explode.Value.SetValue(__self, value);
		public static AI_StateMachine_PufferFish GetStateMachinePufferFish(this AI_State_PufferFish_Explode __self) => _stateMachinePufferFish.Value.GetValue(__self);
		public static void SetStateMachinePufferFish(this AI_State_PufferFish_Explode __self, AI_StateMachine_PufferFish value) => _stateMachinePufferFish.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_State_PufferFish_Explode>> _Awake757602046 =
				new System.Lazy<MethodAccessor<AI_State_PufferFish_Explode>>(() => MethodAccessor<AI_State_PufferFish_Explode>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<AI_State_PufferFish_Explode>> _OnDrawGizmosSelected757602046 =
				new System.Lazy<MethodAccessor<AI_State_PufferFish_Explode>>(() => MethodAccessor<AI_State_PufferFish_Explode>.Create("OnDrawGizmosSelected"));
		private static readonly System.Lazy<MethodAccessor<AI_State_PufferFish_Explode>> _ExplodeCoroutine3429126434 =
				new System.Lazy<MethodAccessor<AI_State_PufferFish_Explode>>(() => MethodAccessor<AI_State_PufferFish_Explode>.Create("ExplodeCoroutine", typeof(UnityEngine.Vector3)));
		private static readonly System.Lazy<MethodAccessor<AI_State_PufferFish_Explode>> _DamageNearbyPlayers757602046 =
				new System.Lazy<MethodAccessor<AI_State_PufferFish_Explode>>(() => MethodAccessor<AI_State_PufferFish_Explode>.Create("DamageNearbyPlayers"));

		public static void Awake(this AI_State_PufferFish_Explode __self) => _Awake757602046.Value.Invoke(__self);
		public static void OnDrawGizmosSelected(this AI_State_PufferFish_Explode __self) => _OnDrawGizmosSelected757602046.Value.Invoke(__self);
		public static System.Collections.IEnumerator ExplodeCoroutine(this AI_State_PufferFish_Explode __self, UnityEngine.Vector3 position) => (System.Collections.IEnumerator)_ExplodeCoroutine3429126434.Value.Invoke(__self, position);
		public static void DamageNearbyPlayers(this AI_State_PufferFish_Explode __self) => _DamageNearbyPlayers757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_PufferFishParticleCloud
	{

		private static readonly System.Lazy<FieldAccessor<PufferFishParticleCloud, UnityEngine.ParticleSystem>> _cloudParticles =
				new System.Lazy<FieldAccessor<PufferFishParticleCloud, UnityEngine.ParticleSystem>>(() => FieldAccessor<PufferFishParticleCloud, UnityEngine.ParticleSystem>.Create("cloudParticles"));
		private static readonly System.Lazy<FieldAccessor<PufferFishParticleCloud, float>> _cloudRadius =
				new System.Lazy<FieldAccessor<PufferFishParticleCloud, float>>(() => FieldAccessor<PufferFishParticleCloud, float>.Create("cloudRadius"));
		private static readonly System.Lazy<FieldAccessor<PufferFishParticleCloud, float>> _cloudLifeTime =
				new System.Lazy<FieldAccessor<PufferFishParticleCloud, float>>(() => FieldAccessor<PufferFishParticleCloud, float>.Create("cloudLifeTime"));
		private static readonly System.Lazy<FieldAccessor<PufferFishParticleCloud, SO_Buff_DOT>> _buff_poison =
				new System.Lazy<FieldAccessor<PufferFishParticleCloud, SO_Buff_DOT>>(() => FieldAccessor<PufferFishParticleCloud, SO_Buff_DOT>.Create("buff_poison"));
		private static readonly System.Lazy<FieldAccessor<PufferFishParticleCloud, float>> _tickRate =
				new System.Lazy<FieldAccessor<PufferFishParticleCloud, float>>(() => FieldAccessor<PufferFishParticleCloud, float>.Create("tickRate"));
		private static readonly System.Lazy<FieldAccessor<PufferFishParticleCloud, float>> _tickTimer =
				new System.Lazy<FieldAccessor<PufferFishParticleCloud, float>>(() => FieldAccessor<PufferFishParticleCloud, float>.Create("tickTimer"));
		private static readonly System.Lazy<FieldAccessor<PufferFishParticleCloud, FMODUnity.StudioEventEmitter>> _cloudEmitter =
				new System.Lazy<FieldAccessor<PufferFishParticleCloud, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<PufferFishParticleCloud, FMODUnity.StudioEventEmitter>.Create("cloudEmitter"));
		private static readonly System.Lazy<FieldAccessor<PufferFishParticleCloud, Network_Host>> _network_Host =
				new System.Lazy<FieldAccessor<PufferFishParticleCloud, Network_Host>>(() => FieldAccessor<PufferFishParticleCloud, Network_Host>.Create("network_Host"));
		private static readonly System.Lazy<FieldAccessor<PufferFishParticleCloud, Network_Player>> _localPlayer =
				new System.Lazy<FieldAccessor<PufferFishParticleCloud, Network_Player>>(() => FieldAccessor<PufferFishParticleCloud, Network_Player>.Create("localPlayer"));

		public static UnityEngine.ParticleSystem GetCloudParticles(this PufferFishParticleCloud __self) => _cloudParticles.Value.GetValue(__self);
		public static void SetCloudParticles(this PufferFishParticleCloud __self, UnityEngine.ParticleSystem value) => _cloudParticles.Value.SetValue(__self, value);
		public static float GetCloudRadius(this PufferFishParticleCloud __self) => _cloudRadius.Value.GetValue(__self);
		public static void SetCloudRadius(this PufferFishParticleCloud __self, float value) => _cloudRadius.Value.SetValue(__self, value);
		public static float GetCloudLifeTime(this PufferFishParticleCloud __self) => _cloudLifeTime.Value.GetValue(__self);
		public static void SetCloudLifeTime(this PufferFishParticleCloud __self, float value) => _cloudLifeTime.Value.SetValue(__self, value);
		public static SO_Buff_DOT GetBuff_poison(this PufferFishParticleCloud __self) => _buff_poison.Value.GetValue(__self);
		public static void SetBuff_poison(this PufferFishParticleCloud __self, SO_Buff_DOT value) => _buff_poison.Value.SetValue(__self, value);
		public static float GetTickRate(this PufferFishParticleCloud __self) => _tickRate.Value.GetValue(__self);
		public static void SetTickRate(this PufferFishParticleCloud __self, float value) => _tickRate.Value.SetValue(__self, value);
		public static float GetTickTimer(this PufferFishParticleCloud __self) => _tickTimer.Value.GetValue(__self);
		public static void SetTickTimer(this PufferFishParticleCloud __self, float value) => _tickTimer.Value.SetValue(__self, value);
		public static FMODUnity.StudioEventEmitter GetCloudEmitter(this PufferFishParticleCloud __self) => _cloudEmitter.Value.GetValue(__self);
		public static void SetCloudEmitter(this PufferFishParticleCloud __self, FMODUnity.StudioEventEmitter value) => _cloudEmitter.Value.SetValue(__self, value);
		public static Network_Host GetNetwork_Host(this PufferFishParticleCloud __self) => _network_Host.Value.GetValue(__self);
		public static void SetNetwork_Host(this PufferFishParticleCloud __self, Network_Host value) => _network_Host.Value.SetValue(__self, value);
		public static Network_Player GetLocalPlayer(this PufferFishParticleCloud __self) => _localPlayer.Value.GetValue(__self);
		public static void SetLocalPlayer(this PufferFishParticleCloud __self, Network_Player value) => _localPlayer.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<PufferFishParticleCloud>> _Start757602046 =
				new System.Lazy<MethodAccessor<PufferFishParticleCloud>>(() => MethodAccessor<PufferFishParticleCloud>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<PufferFishParticleCloud>> _OnEnable757602046 =
				new System.Lazy<MethodAccessor<PufferFishParticleCloud>>(() => MethodAccessor<PufferFishParticleCloud>.Create("OnEnable"));
		private static readonly System.Lazy<MethodAccessor<PufferFishParticleCloud>> _Update757602046 =
				new System.Lazy<MethodAccessor<PufferFishParticleCloud>>(() => MethodAccessor<PufferFishParticleCloud>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<PufferFishParticleCloud>> _OnDrawGizmosSelected757602046 =
				new System.Lazy<MethodAccessor<PufferFishParticleCloud>>(() => MethodAccessor<PufferFishParticleCloud>.Create("OnDrawGizmosSelected"));
		private static readonly System.Lazy<MethodAccessor<PufferFishParticleCloud>> _HandlePoisonSound757602046 =
				new System.Lazy<MethodAccessor<PufferFishParticleCloud>>(() => MethodAccessor<PufferFishParticleCloud>.Create("HandlePoisonSound"));
		private static readonly System.Lazy<MethodAccessor<PufferFishParticleCloud>> _RemoveCloud757602046 =
				new System.Lazy<MethodAccessor<PufferFishParticleCloud>>(() => MethodAccessor<PufferFishParticleCloud>.Create("RemoveCloud"));
		private static readonly System.Lazy<MethodAccessor<PufferFishParticleCloud>> _Tick757602046 =
				new System.Lazy<MethodAccessor<PufferFishParticleCloud>>(() => MethodAccessor<PufferFishParticleCloud>.Create("Tick"));

		public static void Start(this PufferFishParticleCloud __self) => _Start757602046.Value.Invoke(__self);
		public static void OnEnable(this PufferFishParticleCloud __self) => _OnEnable757602046.Value.Invoke(__self);
		public static void Update(this PufferFishParticleCloud __self) => _Update757602046.Value.Invoke(__self);
		public static void OnDrawGizmosSelected(this PufferFishParticleCloud __self) => _OnDrawGizmosSelected757602046.Value.Invoke(__self);
		public static void HandlePoisonSound(this PufferFishParticleCloud __self) => _HandlePoisonSound757602046.Value.Invoke(__self);
		public static System.Collections.IEnumerator RemoveCloud(this PufferFishParticleCloud __self) => (System.Collections.IEnumerator)_RemoveCloud757602046.Value.Invoke(__self);
		public static void Tick(this PufferFishParticleCloud __self) => _Tick757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AI_State_MeleeAttack_Jump
	{

		private static readonly System.Lazy<FieldAccessor<AI_State_MeleeAttack_Jump, AI_State>> _toCloseToJumpState =
				new System.Lazy<FieldAccessor<AI_State_MeleeAttack_Jump, AI_State>>(() => FieldAccessor<AI_State_MeleeAttack_Jump, AI_State>.Create("toCloseToJumpState"));
		private static readonly System.Lazy<FieldAccessor<AI_State_MeleeAttack_Jump, float>> _minJumpDistance =
				new System.Lazy<FieldAccessor<AI_State_MeleeAttack_Jump, float>>(() => FieldAccessor<AI_State_MeleeAttack_Jump, float>.Create("minJumpDistance"));
		private static readonly System.Lazy<FieldAccessor<AI_State_MeleeAttack_Jump, float>> _jumpHeight =
				new System.Lazy<FieldAccessor<AI_State_MeleeAttack_Jump, float>>(() => FieldAccessor<AI_State_MeleeAttack_Jump, float>.Create("jumpHeight"));
		private static readonly System.Lazy<FieldAccessor<AI_State_MeleeAttack_Jump, float>> _jumpTime =
				new System.Lazy<FieldAccessor<AI_State_MeleeAttack_Jump, float>>(() => FieldAccessor<AI_State_MeleeAttack_Jump, float>.Create("jumpTime"));
		private static readonly System.Lazy<FieldAccessor<AI_State_MeleeAttack_Jump, float>> _maxYDiff =
				new System.Lazy<FieldAccessor<AI_State_MeleeAttack_Jump, float>>(() => FieldAccessor<AI_State_MeleeAttack_Jump, float>.Create("maxYDiff"));
		private static readonly System.Lazy<FieldAccessor<AI_State_MeleeAttack_Jump, float>> _stunDelay =
				new System.Lazy<FieldAccessor<AI_State_MeleeAttack_Jump, float>>(() => FieldAccessor<AI_State_MeleeAttack_Jump, float>.Create("stunDelay"));
		private static readonly System.Lazy<FieldAccessor<AI_State_MeleeAttack_Jump, float>> _extraJumpDistance =
				new System.Lazy<FieldAccessor<AI_State_MeleeAttack_Jump, float>>(() => FieldAccessor<AI_State_MeleeAttack_Jump, float>.Create("extraJumpDistance"));
		private static readonly System.Lazy<FieldAccessor<AI_State_MeleeAttack_Jump, DamageBox>> _damageBox =
				new System.Lazy<FieldAccessor<AI_State_MeleeAttack_Jump, DamageBox>>(() => FieldAccessor<AI_State_MeleeAttack_Jump, DamageBox>.Create("damageBox"));
		private static readonly System.Lazy<FieldAccessor<AI_State_MeleeAttack_Jump, UnityEngine.ParticleSystem>> _landParticles =
				new System.Lazy<FieldAccessor<AI_State_MeleeAttack_Jump, UnityEngine.ParticleSystem>>(() => FieldAccessor<AI_State_MeleeAttack_Jump, UnityEngine.ParticleSystem>.Create("landParticles"));
		private static readonly System.Lazy<FieldAccessor<AI_State_MeleeAttack_Jump, SO_CameraShaker>> _cameraShakeData =
				new System.Lazy<FieldAccessor<AI_State_MeleeAttack_Jump, SO_CameraShaker>>(() => FieldAccessor<AI_State_MeleeAttack_Jump, SO_CameraShaker>.Create("cameraShakeData"));
		private static readonly System.Lazy<FieldAccessor<AI_State_MeleeAttack_Jump, float>> _shakeRange =
				new System.Lazy<FieldAccessor<AI_State_MeleeAttack_Jump, float>>(() => FieldAccessor<AI_State_MeleeAttack_Jump, float>.Create("shakeRange"));
		private static readonly System.Lazy<FieldAccessor<AI_State_MeleeAttack_Jump, bool>> _isPredictive =
				new System.Lazy<FieldAccessor<AI_State_MeleeAttack_Jump, bool>>(() => FieldAccessor<AI_State_MeleeAttack_Jump, bool>.Create("isPredictive"));
		private static readonly System.Lazy<FieldAccessor<AI_State_MeleeAttack_Jump, float>> _predictedJumpLenght =
				new System.Lazy<FieldAccessor<AI_State_MeleeAttack_Jump, float>>(() => FieldAccessor<AI_State_MeleeAttack_Jump, float>.Create("predictedJumpLenght"));
		private static readonly System.Lazy<FieldAccessor<AI_State_MeleeAttack_Jump, string>> _eventRef_landJump =
				new System.Lazy<FieldAccessor<AI_State_MeleeAttack_Jump, string>>(() => FieldAccessor<AI_State_MeleeAttack_Jump, string>.Create("eventRef_landJump"));
		private static readonly System.Lazy<FieldAccessor<AI_State_MeleeAttack_Jump, bool>> _chargingJump =
				new System.Lazy<FieldAccessor<AI_State_MeleeAttack_Jump, bool>>(() => FieldAccessor<AI_State_MeleeAttack_Jump, bool>.Create("chargingJump"));
		private static readonly System.Lazy<FieldAccessor<AI_State_MeleeAttack_Jump, ScreenEffectManager>> _screenEffectManager =
				new System.Lazy<FieldAccessor<AI_State_MeleeAttack_Jump, ScreenEffectManager>>(() => FieldAccessor<AI_State_MeleeAttack_Jump, ScreenEffectManager>.Create("screenEffectManager"));

		public static AI_State GetToCloseToJumpState(this AI_State_MeleeAttack_Jump __self) => _toCloseToJumpState.Value.GetValue(__self);
		public static void SetToCloseToJumpState(this AI_State_MeleeAttack_Jump __self, AI_State value) => _toCloseToJumpState.Value.SetValue(__self, value);
		public static float GetMinJumpDistance(this AI_State_MeleeAttack_Jump __self) => _minJumpDistance.Value.GetValue(__self);
		public static void SetMinJumpDistance(this AI_State_MeleeAttack_Jump __self, float value) => _minJumpDistance.Value.SetValue(__self, value);
		public static float GetJumpHeight(this AI_State_MeleeAttack_Jump __self) => _jumpHeight.Value.GetValue(__self);
		public static void SetJumpHeight(this AI_State_MeleeAttack_Jump __self, float value) => _jumpHeight.Value.SetValue(__self, value);
		public static float GetJumpTime(this AI_State_MeleeAttack_Jump __self) => _jumpTime.Value.GetValue(__self);
		public static void SetJumpTime(this AI_State_MeleeAttack_Jump __self, float value) => _jumpTime.Value.SetValue(__self, value);
		public static float GetMaxYDiff(this AI_State_MeleeAttack_Jump __self) => _maxYDiff.Value.GetValue(__self);
		public static void SetMaxYDiff(this AI_State_MeleeAttack_Jump __self, float value) => _maxYDiff.Value.SetValue(__self, value);
		public static float GetStunDelay(this AI_State_MeleeAttack_Jump __self) => _stunDelay.Value.GetValue(__self);
		public static void SetStunDelay(this AI_State_MeleeAttack_Jump __self, float value) => _stunDelay.Value.SetValue(__self, value);
		public static float GetExtraJumpDistance(this AI_State_MeleeAttack_Jump __self) => _extraJumpDistance.Value.GetValue(__self);
		public static void SetExtraJumpDistance(this AI_State_MeleeAttack_Jump __self, float value) => _extraJumpDistance.Value.SetValue(__self, value);
		public static DamageBox GetDamageBox(this AI_State_MeleeAttack_Jump __self) => _damageBox.Value.GetValue(__self);
		public static void SetDamageBox(this AI_State_MeleeAttack_Jump __self, DamageBox value) => _damageBox.Value.SetValue(__self, value);
		public static UnityEngine.ParticleSystem GetLandParticles(this AI_State_MeleeAttack_Jump __self) => _landParticles.Value.GetValue(__self);
		public static void SetLandParticles(this AI_State_MeleeAttack_Jump __self, UnityEngine.ParticleSystem value) => _landParticles.Value.SetValue(__self, value);
		public static SO_CameraShaker GetCameraShakeData(this AI_State_MeleeAttack_Jump __self) => _cameraShakeData.Value.GetValue(__self);
		public static void SetCameraShakeData(this AI_State_MeleeAttack_Jump __self, SO_CameraShaker value) => _cameraShakeData.Value.SetValue(__self, value);
		public static float GetShakeRange(this AI_State_MeleeAttack_Jump __self) => _shakeRange.Value.GetValue(__self);
		public static void SetShakeRange(this AI_State_MeleeAttack_Jump __self, float value) => _shakeRange.Value.SetValue(__self, value);
		public static bool GetIsPredictive(this AI_State_MeleeAttack_Jump __self) => _isPredictive.Value.GetValue(__self);
		public static void SetIsPredictive(this AI_State_MeleeAttack_Jump __self, bool value) => _isPredictive.Value.SetValue(__self, value);
		public static float GetPredictedJumpLenght(this AI_State_MeleeAttack_Jump __self) => _predictedJumpLenght.Value.GetValue(__self);
		public static void SetPredictedJumpLenght(this AI_State_MeleeAttack_Jump __self, float value) => _predictedJumpLenght.Value.SetValue(__self, value);
		public static string GetEventRef_landJump(this AI_State_MeleeAttack_Jump __self) => _eventRef_landJump.Value.GetValue(__self);
		public static void SetEventRef_landJump(this AI_State_MeleeAttack_Jump __self, string value) => _eventRef_landJump.Value.SetValue(__self, value);
		public static bool GetChargingJump(this AI_State_MeleeAttack_Jump __self) => _chargingJump.Value.GetValue(__self);
		public static void SetChargingJump(this AI_State_MeleeAttack_Jump __self, bool value) => _chargingJump.Value.SetValue(__self, value);
		public static ScreenEffectManager GetScreenEffectManager(this AI_State_MeleeAttack_Jump __self) => _screenEffectManager.Value.GetValue(__self);
		public static void SetScreenEffectManager(this AI_State_MeleeAttack_Jump __self, ScreenEffectManager value) => _screenEffectManager.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_State_MeleeAttack_Jump>> _Start757602046 =
				new System.Lazy<MethodAccessor<AI_State_MeleeAttack_Jump>>(() => MethodAccessor<AI_State_MeleeAttack_Jump>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<AI_State_MeleeAttack_Jump>> _OnAnimationEvent3454057852 =
				new System.Lazy<MethodAccessor<AI_State_MeleeAttack_Jump>>(() => MethodAccessor<AI_State_MeleeAttack_Jump>.Create("OnAnimationEvent", typeof(string)));
		private static readonly System.Lazy<MethodAccessor<AI_State_MeleeAttack_Jump>> _StartAttack3461878659 =
				new System.Lazy<MethodAccessor<AI_State_MeleeAttack_Jump>>(() => MethodAccessor<AI_State_MeleeAttack_Jump>.Create("StartAttack", typeof(Network_Player)));
		private static readonly System.Lazy<MethodAccessor<AI_State_MeleeAttack_Jump>> _Attack3461878659 =
				new System.Lazy<MethodAccessor<AI_State_MeleeAttack_Jump>>(() => MethodAccessor<AI_State_MeleeAttack_Jump>.Create("Attack", typeof(Network_Player)));
		private static readonly System.Lazy<MethodAccessor<AI_State_MeleeAttack_Jump>> _AbortAttack757602046 =
				new System.Lazy<MethodAccessor<AI_State_MeleeAttack_Jump>>(() => MethodAccessor<AI_State_MeleeAttack_Jump>.Create("AbortAttack"));
		private static readonly System.Lazy<MethodAccessor<AI_State_MeleeAttack_Jump>> _DisableDamageBox757602046 =
				new System.Lazy<MethodAccessor<AI_State_MeleeAttack_Jump>>(() => MethodAccessor<AI_State_MeleeAttack_Jump>.Create("DisableDamageBox"));
		private static readonly System.Lazy<MethodAccessor<AI_State_MeleeAttack_Jump>> _JumpAttack3461878659 =
				new System.Lazy<MethodAccessor<AI_State_MeleeAttack_Jump>>(() => MethodAccessor<AI_State_MeleeAttack_Jump>.Create("JumpAttack", typeof(Network_Player)));
		private static readonly System.Lazy<MethodAccessor<AI_State_MeleeAttack_Jump>> _HandleTargetCloseCheck3461878659 =
				new System.Lazy<MethodAccessor<AI_State_MeleeAttack_Jump>>(() => MethodAccessor<AI_State_MeleeAttack_Jump>.Create("HandleTargetCloseCheck", typeof(Network_Player)));
		private static readonly System.Lazy<MethodAccessor<AI_State_MeleeAttack_Jump>> _HasToCloseToJumpState757602046 =
				new System.Lazy<MethodAccessor<AI_State_MeleeAttack_Jump>>(() => MethodAccessor<AI_State_MeleeAttack_Jump>.Create("HasToCloseToJumpState"));

		public static void Start(this AI_State_MeleeAttack_Jump __self) => _Start757602046.Value.Invoke(__self);
		public static void OnAnimationEvent(this AI_State_MeleeAttack_Jump __self, string animationEventName) => _OnAnimationEvent3454057852.Value.Invoke(__self, animationEventName);
		public static void StartAttack(this AI_State_MeleeAttack_Jump __self, Network_Player player) => _StartAttack3461878659.Value.Invoke(__self, player);
		public static void Attack(this AI_State_MeleeAttack_Jump __self, Network_Player player) => _Attack3461878659.Value.Invoke(__self, player);
		public static void AbortAttack(this AI_State_MeleeAttack_Jump __self) => _AbortAttack757602046.Value.Invoke(__self);
		public static void DisableDamageBox(this AI_State_MeleeAttack_Jump __self) => _DisableDamageBox757602046.Value.Invoke(__self);
		public static System.Collections.IEnumerator JumpAttack(this AI_State_MeleeAttack_Jump __self, Network_Player player) => (System.Collections.IEnumerator)_JumpAttack3461878659.Value.Invoke(__self, player);
		public static bool HandleTargetCloseCheck(this AI_State_MeleeAttack_Jump __self, Network_Player player) => (bool)_HandleTargetCloseCheck3461878659.Value.Invoke(__self, player);
		public static bool HasToCloseToJumpState(this AI_State_MeleeAttack_Jump __self) => (bool)_HasToCloseToJumpState757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AI_State_Attack_Block
	{

		private static readonly System.Lazy<FieldAccessor<AI_State_Attack_Block, bool>> _bitingBlock =
				new System.Lazy<FieldAccessor<AI_State_Attack_Block, bool>>(() => FieldAccessor<AI_State_Attack_Block, bool>.Create("bitingBlock"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Attack_Block, UnityEngine.Animator>> _animator =
				new System.Lazy<FieldAccessor<AI_State_Attack_Block, UnityEngine.Animator>>(() => FieldAccessor<AI_State_Attack_Block, UnityEngine.Animator>.Create("animator"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Attack_Block, int>> _attackBlockDamage =
				new System.Lazy<FieldAccessor<AI_State_Attack_Block, int>>(() => FieldAccessor<AI_State_Attack_Block, int>.Create("attackBlockDamage"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Attack_Block, float>> _attackRate =
				new System.Lazy<FieldAccessor<AI_State_Attack_Block, float>>(() => FieldAccessor<AI_State_Attack_Block, float>.Create("attackRate"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Attack_Block, float>> _attackProgress =
				new System.Lazy<FieldAccessor<AI_State_Attack_Block, float>>(() => FieldAccessor<AI_State_Attack_Block, float>.Create("attackProgress"));

		public static bool GetBitingBlock(this AI_State_Attack_Block __self) => _bitingBlock.Value.GetValue(__self);
		public static void SetBitingBlock(this AI_State_Attack_Block __self, bool value) => _bitingBlock.Value.SetValue(__self, value);
		public static UnityEngine.Animator GetAnimator(this AI_State_Attack_Block __self) => _animator.Value.GetValue(__self);
		public static void SetAnimator(this AI_State_Attack_Block __self, UnityEngine.Animator value) => _animator.Value.SetValue(__self, value);
		public static int GetAttackBlockDamage(this AI_State_Attack_Block __self) => _attackBlockDamage.Value.GetValue(__self);
		public static void SetAttackBlockDamage(this AI_State_Attack_Block __self, int value) => _attackBlockDamage.Value.SetValue(__self, value);
		public static float GetAttackRate(this AI_State_Attack_Block __self) => _attackRate.Value.GetValue(__self);
		public static void SetAttackRate(this AI_State_Attack_Block __self, float value) => _attackRate.Value.SetValue(__self, value);
		public static float GetAttackProgress(this AI_State_Attack_Block __self) => _attackProgress.Value.GetValue(__self);
		public static void SetAttackProgress(this AI_State_Attack_Block __self, float value) => _attackProgress.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_State_Attack_Block>> _FindBlockToAttack757602046 =
				new System.Lazy<MethodAccessor<AI_State_Attack_Block>>(() => MethodAccessor<AI_State_Attack_Block>.Create("FindBlockToAttack"));
		private static readonly System.Lazy<MethodAccessor<AI_State_Attack_Block>> _GetAttackableBlocks757602046 =
				new System.Lazy<MethodAccessor<AI_State_Attack_Block>>(() => MethodAccessor<AI_State_Attack_Block>.Create("GetAttackableBlocks"));

		public static Block FindBlockToAttack(this AI_State_Attack_Block __self) => (Block)_FindBlockToAttack757602046.Value.Invoke(__self);
		public static System.Collections.Generic.List<Block> GetAttackableBlocks(this AI_State_Attack_Block __self) => (System.Collections.Generic.List<Block>)_GetAttackableBlocks757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AI_State_Attack_Block_Shark
	{

		private static readonly System.Lazy<FieldAccessor<AI_State_Attack_Block_Shark, float>> _dmgTreshhold =
				new System.Lazy<FieldAccessor<AI_State_Attack_Block_Shark, float>>(() => FieldAccessor<AI_State_Attack_Block_Shark, float>.Create("dmgTreshhold"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Attack_Block_Shark, UnityEngine.Vector3>> _offsetBlock =
				new System.Lazy<FieldAccessor<AI_State_Attack_Block_Shark, UnityEngine.Vector3>>(() => FieldAccessor<AI_State_Attack_Block_Shark, UnityEngine.Vector3>.Create("offsetBlock"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Attack_Block_Shark, UnityEngine.Vector3>> _offsetTriangular =
				new System.Lazy<FieldAccessor<AI_State_Attack_Block_Shark, UnityEngine.Vector3>>(() => FieldAccessor<AI_State_Attack_Block_Shark, UnityEngine.Vector3>.Create("offsetTriangular"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Attack_Block_Shark, UnityEngine.Vector3>> _offsetBait =
				new System.Lazy<FieldAccessor<AI_State_Attack_Block_Shark, UnityEngine.Vector3>>(() => FieldAccessor<AI_State_Attack_Block_Shark, UnityEngine.Vector3>.Create("offsetBait"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Attack_Block_Shark, AI_StateMachine_Shark>> _stateMachineShark =
				new System.Lazy<FieldAccessor<AI_State_Attack_Block_Shark, AI_StateMachine_Shark>>(() => FieldAccessor<AI_State_Attack_Block_Shark, AI_StateMachine_Shark>.Create("stateMachineShark"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Attack_Block_Shark, int>> _initialTargetBlockHealth =
				new System.Lazy<FieldAccessor<AI_State_Attack_Block_Shark, int>>(() => FieldAccessor<AI_State_Attack_Block_Shark, int>.Create("initialTargetBlockHealth"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Attack_Block_Shark, bool>> _isTargetBlockSharkBait =
				new System.Lazy<FieldAccessor<AI_State_Attack_Block_Shark, bool>>(() => FieldAccessor<AI_State_Attack_Block_Shark, bool>.Create("isTargetBlockSharkBait"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Attack_Block_Shark, float>> _biteBlockRange =
				new System.Lazy<FieldAccessor<AI_State_Attack_Block_Shark, float>>(() => FieldAccessor<AI_State_Attack_Block_Shark, float>.Create("biteBlockRange"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Attack_Block_Shark, float>> _currentDmgRecieved =
				new System.Lazy<FieldAccessor<AI_State_Attack_Block_Shark, float>>(() => FieldAccessor<AI_State_Attack_Block_Shark, float>.Create("currentDmgRecieved"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Attack_Block_Shark, UnityEngine.Vector3>> _biteVertexLocalPosition =
				new System.Lazy<FieldAccessor<AI_State_Attack_Block_Shark, UnityEngine.Vector3>>(() => FieldAccessor<AI_State_Attack_Block_Shark, UnityEngine.Vector3>.Create("biteVertexLocalPosition"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Attack_Block_Shark, UnityEngine.Vector3>> _targetBitePoint =
				new System.Lazy<FieldAccessor<AI_State_Attack_Block_Shark, UnityEngine.Vector3>>(() => FieldAccessor<AI_State_Attack_Block_Shark, UnityEngine.Vector3>.Create("targetBitePoint"));

		public static float GetDmgTreshhold(this AI_State_Attack_Block_Shark __self) => _dmgTreshhold.Value.GetValue(__self);
		public static void SetDmgTreshhold(this AI_State_Attack_Block_Shark __self, float value) => _dmgTreshhold.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetOffsetBlock(this AI_State_Attack_Block_Shark __self) => _offsetBlock.Value.GetValue(__self);
		public static void SetOffsetBlock(this AI_State_Attack_Block_Shark __self, UnityEngine.Vector3 value) => _offsetBlock.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetOffsetTriangular(this AI_State_Attack_Block_Shark __self) => _offsetTriangular.Value.GetValue(__self);
		public static void SetOffsetTriangular(this AI_State_Attack_Block_Shark __self, UnityEngine.Vector3 value) => _offsetTriangular.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetOffsetBait(this AI_State_Attack_Block_Shark __self) => _offsetBait.Value.GetValue(__self);
		public static void SetOffsetBait(this AI_State_Attack_Block_Shark __self, UnityEngine.Vector3 value) => _offsetBait.Value.SetValue(__self, value);
		public static AI_StateMachine_Shark GetStateMachineShark(this AI_State_Attack_Block_Shark __self) => _stateMachineShark.Value.GetValue(__self);
		public static void SetStateMachineShark(this AI_State_Attack_Block_Shark __self, AI_StateMachine_Shark value) => _stateMachineShark.Value.SetValue(__self, value);
		public static int GetInitialTargetBlockHealth(this AI_State_Attack_Block_Shark __self) => _initialTargetBlockHealth.Value.GetValue(__self);
		public static void SetInitialTargetBlockHealth(this AI_State_Attack_Block_Shark __self, int value) => _initialTargetBlockHealth.Value.SetValue(__self, value);
		public static bool GetIsTargetBlockSharkBait(this AI_State_Attack_Block_Shark __self) => _isTargetBlockSharkBait.Value.GetValue(__self);
		public static void SetIsTargetBlockSharkBait(this AI_State_Attack_Block_Shark __self, bool value) => _isTargetBlockSharkBait.Value.SetValue(__self, value);
		public static float GetBiteBlockRange(this AI_State_Attack_Block_Shark __self) => _biteBlockRange.Value.GetValue(__self);
		public static void SetBiteBlockRange(this AI_State_Attack_Block_Shark __self, float value) => _biteBlockRange.Value.SetValue(__self, value);
		public static float GetCurrentDmgRecieved(this AI_State_Attack_Block_Shark __self) => _currentDmgRecieved.Value.GetValue(__self);
		public static void SetCurrentDmgRecieved(this AI_State_Attack_Block_Shark __self, float value) => _currentDmgRecieved.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetBiteVertexLocalPosition(this AI_State_Attack_Block_Shark __self) => _biteVertexLocalPosition.Value.GetValue(__self);
		public static void SetBiteVertexLocalPosition(this AI_State_Attack_Block_Shark __self, UnityEngine.Vector3 value) => _biteVertexLocalPosition.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetTargetBitePoint(this AI_State_Attack_Block_Shark __self) => _targetBitePoint.Value.GetValue(__self);
		public static void SetTargetBitePoint(this AI_State_Attack_Block_Shark __self, UnityEngine.Vector3 value) => _targetBitePoint.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_State_Attack_Block_Shark>> _Awake757602046 =
				new System.Lazy<MethodAccessor<AI_State_Attack_Block_Shark>>(() => MethodAccessor<AI_State_Attack_Block_Shark>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<AI_State_Attack_Block_Shark>> _Start757602046 =
				new System.Lazy<MethodAccessor<AI_State_Attack_Block_Shark>>(() => MethodAccessor<AI_State_Attack_Block_Shark>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<AI_State_Attack_Block_Shark>> _Destroy757602046 =
				new System.Lazy<MethodAccessor<AI_State_Attack_Block_Shark>>(() => MethodAccessor<AI_State_Attack_Block_Shark>.Create("Destroy"));
		private static readonly System.Lazy<MethodAccessor<AI_State_Attack_Block_Shark>> _OnDrawGizmos757602046 =
				new System.Lazy<MethodAccessor<AI_State_Attack_Block_Shark>>(() => MethodAccessor<AI_State_Attack_Block_Shark>.Create("OnDrawGizmos"));
		private static readonly System.Lazy<MethodAccessor<AI_State_Attack_Block_Shark>> _OnDamageTaken3486905475 =
				new System.Lazy<MethodAccessor<AI_State_Attack_Block_Shark>>(() => MethodAccessor<AI_State_Attack_Block_Shark>.Create("OnDamageTaken", typeof(float)));
		private static readonly System.Lazy<MethodAccessor<AI_State_Attack_Block_Shark>> _FindBlockToAttack757602046 =
				new System.Lazy<MethodAccessor<AI_State_Attack_Block_Shark>>(() => MethodAccessor<AI_State_Attack_Block_Shark>.Create("FindBlockToAttack"));
		private static readonly System.Lazy<MethodAccessor<AI_State_Attack_Block_Shark>> _IsBlockIndexViableForBiting3483718959 =
				new System.Lazy<MethodAccessor<AI_State_Attack_Block_Shark>>(() => MethodAccessor<AI_State_Attack_Block_Shark>.Create("IsBlockIndexViableForBiting", typeof(Block)));
		private static readonly System.Lazy<MethodAccessor<AI_State_Attack_Block_Shark>> _OnBlockIsPlaced1546667164 =
				new System.Lazy<MethodAccessor<AI_State_Attack_Block_Shark>>(() => MethodAccessor<AI_State_Attack_Block_Shark>.Create("OnBlockIsPlaced", typeof(Block), typeof(Network_Player), typeof(bool), typeof(int)));
		private static readonly System.Lazy<MethodAccessor<AI_State_Attack_Block_Shark>> _MoveTowardsTargetBlock3483718959 =
				new System.Lazy<MethodAccessor<AI_State_Attack_Block_Shark>>(() => MethodAccessor<AI_State_Attack_Block_Shark>.Create("MoveTowardsTargetBlock", typeof(Block)));
		private static readonly System.Lazy<MethodAccessor<AI_State_Attack_Block_Shark>> _DelayedKinematicRemoval757602046 =
				new System.Lazy<MethodAccessor<AI_State_Attack_Block_Shark>>(() => MethodAccessor<AI_State_Attack_Block_Shark>.Create("DelayedKinematicRemoval"));
		private static readonly System.Lazy<MethodAccessor<AI_State_Attack_Block_Shark>> _AttackBlock3483718959 =
				new System.Lazy<MethodAccessor<AI_State_Attack_Block_Shark>>(() => MethodAccessor<AI_State_Attack_Block_Shark>.Create("AttackBlock", typeof(Block)));
		private static readonly System.Lazy<MethodAccessor<AI_State_Attack_Block_Shark>> _DealDamageToBlock3483718959 =
				new System.Lazy<MethodAccessor<AI_State_Attack_Block_Shark>>(() => MethodAccessor<AI_State_Attack_Block_Shark>.Create("DealDamageToBlock", typeof(Block)));
		private static readonly System.Lazy<MethodAccessor<AI_State_Attack_Block_Shark>> _GetAttackableBlocks757602046 =
				new System.Lazy<MethodAccessor<AI_State_Attack_Block_Shark>>(() => MethodAccessor<AI_State_Attack_Block_Shark>.Create("GetAttackableBlocks"));

		public static void Awake(this AI_State_Attack_Block_Shark __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this AI_State_Attack_Block_Shark __self) => _Start757602046.Value.Invoke(__self);
		public static void Destroy(this AI_State_Attack_Block_Shark __self) => _Destroy757602046.Value.Invoke(__self);
		public static void OnDrawGizmos(this AI_State_Attack_Block_Shark __self) => _OnDrawGizmos757602046.Value.Invoke(__self);
		public static void OnDamageTaken(this AI_State_Attack_Block_Shark __self, float damage) => _OnDamageTaken3486905475.Value.Invoke(__self, damage);
		public static Block FindBlockToAttack(this AI_State_Attack_Block_Shark __self) => (Block)_FindBlockToAttack757602046.Value.Invoke(__self);
		public static bool IsBlockIndexViableForBiting(this AI_State_Attack_Block_Shark __self, Block block) => (bool)_IsBlockIndexViableForBiting3483718959.Value.Invoke(__self, block);
		public static void OnBlockIsPlaced(this AI_State_Attack_Block_Shark __self, Block block, Network_Player player, bool temp, int temp2) => _OnBlockIsPlaced1546667164.Value.Invoke(__self, block, player, temp, temp2);
		public static void MoveTowardsTargetBlock(this AI_State_Attack_Block_Shark __self, Block p_block) => _MoveTowardsTargetBlock3483718959.Value.Invoke(__self, p_block);
		public static void DelayedKinematicRemoval(this AI_State_Attack_Block_Shark __self) => _DelayedKinematicRemoval757602046.Value.Invoke(__self);
		public static void AttackBlock(this AI_State_Attack_Block_Shark __self, Block p_targetBlock) => _AttackBlock3483718959.Value.Invoke(__self, p_targetBlock);
		public static void DealDamageToBlock(this AI_State_Attack_Block_Shark __self, Block p_targetBlock) => _DealDamageToBlock3483718959.Value.Invoke(__self, p_targetBlock);
		public static System.Collections.Generic.List<Block> GetAttackableBlocks(this AI_State_Attack_Block_Shark __self) => (System.Collections.Generic.List<Block>)_GetAttackableBlocks757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AI_State_Attack_Entity_Shark
	{

		private static readonly System.Lazy<FieldAccessor<AI_State_Attack_Entity_Shark, int>> __attackPlayerDamage =
				new System.Lazy<FieldAccessor<AI_State_Attack_Entity_Shark, int>>(() => FieldAccessor<AI_State_Attack_Entity_Shark, int>.Create("_attackPlayerDamage"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Attack_Entity_Shark, float>> _startBiteAnimationTimeToDistance =
				new System.Lazy<FieldAccessor<AI_State_Attack_Entity_Shark, float>>(() => FieldAccessor<AI_State_Attack_Entity_Shark, float>.Create("startBiteAnimationTimeToDistance"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Attack_Entity_Shark, GizmoBox>> _biteBox =
				new System.Lazy<FieldAccessor<AI_State_Attack_Entity_Shark, GizmoBox>>(() => FieldAccessor<AI_State_Attack_Entity_Shark, GizmoBox>.Create("biteBox"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Attack_Entity_Shark, float>> _returnToAttackPointSpeedMultiplier =
				new System.Lazy<FieldAccessor<AI_State_Attack_Entity_Shark, float>>(() => FieldAccessor<AI_State_Attack_Entity_Shark, float>.Create("returnToAttackPointSpeedMultiplier"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Attack_Entity_Shark, float>> _attackSwimSpeedMultiplier =
				new System.Lazy<FieldAccessor<AI_State_Attack_Entity_Shark, float>>(() => FieldAccessor<AI_State_Attack_Entity_Shark, float>.Create("attackSwimSpeedMultiplier"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Attack_Entity_Shark, float>> _attackRotationalMultiplier =
				new System.Lazy<FieldAccessor<AI_State_Attack_Entity_Shark, float>>(() => FieldAccessor<AI_State_Attack_Entity_Shark, float>.Create("attackRotationalMultiplier"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Attack_Entity_Shark, bool>> _hasStartedAttackAnimation =
				new System.Lazy<FieldAccessor<AI_State_Attack_Entity_Shark, bool>>(() => FieldAccessor<AI_State_Attack_Entity_Shark, bool>.Create("hasStartedAttackAnimation"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Attack_Entity_Shark, float>> _totallBiteAnimationDuration =
				new System.Lazy<FieldAccessor<AI_State_Attack_Entity_Shark, float>>(() => FieldAccessor<AI_State_Attack_Entity_Shark, float>.Create("totallBiteAnimationDuration"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Attack_Entity_Shark, float>> _returnToLatestAttackPositionMaxDuration =
				new System.Lazy<FieldAccessor<AI_State_Attack_Entity_Shark, float>>(() => FieldAccessor<AI_State_Attack_Entity_Shark, float>.Create("returnToLatestAttackPositionMaxDuration"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Attack_Entity_Shark, float>> _driveByMissMinimumDuration =
				new System.Lazy<FieldAccessor<AI_State_Attack_Entity_Shark, float>>(() => FieldAccessor<AI_State_Attack_Entity_Shark, float>.Create("driveByMissMinimumDuration"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Attack_Entity_Shark, float>> _driveByMissMaximumDuration =
				new System.Lazy<FieldAccessor<AI_State_Attack_Entity_Shark, float>>(() => FieldAccessor<AI_State_Attack_Entity_Shark, float>.Create("driveByMissMaximumDuration"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Attack_Entity_Shark, float>> _driveByHitMinimumDuration =
				new System.Lazy<FieldAccessor<AI_State_Attack_Entity_Shark, float>>(() => FieldAccessor<AI_State_Attack_Entity_Shark, float>.Create("driveByHitMinimumDuration"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Attack_Entity_Shark, float>> _driveByHitMaximumDuration =
				new System.Lazy<FieldAccessor<AI_State_Attack_Entity_Shark, float>>(() => FieldAccessor<AI_State_Attack_Entity_Shark, float>.Create("driveByHitMaximumDuration"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Attack_Entity_Shark, float>> _dmgTreshhold =
				new System.Lazy<FieldAccessor<AI_State_Attack_Entity_Shark, float>>(() => FieldAccessor<AI_State_Attack_Entity_Shark, float>.Create("dmgTreshhold"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Attack_Entity_Shark, float>> _currentDmgRecieved =
				new System.Lazy<FieldAccessor<AI_State_Attack_Entity_Shark, float>>(() => FieldAccessor<AI_State_Attack_Entity_Shark, float>.Create("currentDmgRecieved"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Attack_Entity_Shark, UnityEngine.Vector3>> _latestBitePosition =
				new System.Lazy<FieldAccessor<AI_State_Attack_Entity_Shark, UnityEngine.Vector3>>(() => FieldAccessor<AI_State_Attack_Entity_Shark, UnityEngine.Vector3>.Create("latestBitePosition"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Attack_Entity_Shark, UnityEngine.Vector3>> _drivebyDirection =
				new System.Lazy<FieldAccessor<AI_State_Attack_Entity_Shark, UnityEngine.Vector3>>(() => FieldAccessor<AI_State_Attack_Entity_Shark, UnityEngine.Vector3>.Create("drivebyDirection"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Attack_Entity_Shark, float>> _currentDriveByDuration =
				new System.Lazy<FieldAccessor<AI_State_Attack_Entity_Shark, float>>(() => FieldAccessor<AI_State_Attack_Entity_Shark, float>.Create("currentDriveByDuration"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Attack_Entity_Shark, float>> _driveByTimer =
				new System.Lazy<FieldAccessor<AI_State_Attack_Entity_Shark, float>>(() => FieldAccessor<AI_State_Attack_Entity_Shark, float>.Create("driveByTimer"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Attack_Entity_Shark, float>> _findTargetCooldown =
				new System.Lazy<FieldAccessor<AI_State_Attack_Entity_Shark, float>>(() => FieldAccessor<AI_State_Attack_Entity_Shark, float>.Create("findTargetCooldown"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Attack_Entity_Shark, float>> _findTargetProgress =
				new System.Lazy<FieldAccessor<AI_State_Attack_Entity_Shark, float>>(() => FieldAccessor<AI_State_Attack_Entity_Shark, float>.Create("findTargetProgress"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Attack_Entity_Shark, UnityEngine.Vector3>> _playerCameraOffset =
				new System.Lazy<FieldAccessor<AI_State_Attack_Entity_Shark, UnityEngine.Vector3>>(() => FieldAccessor<AI_State_Attack_Entity_Shark, UnityEngine.Vector3>.Create("playerCameraOffset"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Attack_Entity_Shark, float>> _currentBiteProgress =
				new System.Lazy<FieldAccessor<AI_State_Attack_Entity_Shark, float>>(() => FieldAccessor<AI_State_Attack_Entity_Shark, float>.Create("currentBiteProgress"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Attack_Entity_Shark, Raft_Network>> _network =
				new System.Lazy<FieldAccessor<AI_State_Attack_Entity_Shark, Raft_Network>>(() => FieldAccessor<AI_State_Attack_Entity_Shark, Raft_Network>.Create("network"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Attack_Entity_Shark, bool>> _damageTreshHoldReached =
				new System.Lazy<FieldAccessor<AI_State_Attack_Entity_Shark, bool>>(() => FieldAccessor<AI_State_Attack_Entity_Shark, bool>.Create("damageTreshHoldReached"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Attack_Entity_Shark, bool>> _hasStartedAttack =
				new System.Lazy<FieldAccessor<AI_State_Attack_Entity_Shark, bool>>(() => FieldAccessor<AI_State_Attack_Entity_Shark, bool>.Create("hasStartedAttack"));

		public static int Get_attackPlayerDamage(this AI_State_Attack_Entity_Shark __self) => __attackPlayerDamage.Value.GetValue(__self);
		public static void Set_attackPlayerDamage(this AI_State_Attack_Entity_Shark __self, int value) => __attackPlayerDamage.Value.SetValue(__self, value);
		public static float GetStartBiteAnimationTimeToDistance(this AI_State_Attack_Entity_Shark __self) => _startBiteAnimationTimeToDistance.Value.GetValue(__self);
		public static void SetStartBiteAnimationTimeToDistance(this AI_State_Attack_Entity_Shark __self, float value) => _startBiteAnimationTimeToDistance.Value.SetValue(__self, value);
		public static GizmoBox GetBiteBox(this AI_State_Attack_Entity_Shark __self) => _biteBox.Value.GetValue(__self);
		public static void SetBiteBox(this AI_State_Attack_Entity_Shark __self, GizmoBox value) => _biteBox.Value.SetValue(__self, value);
		public static float GetReturnToAttackPointSpeedMultiplier(this AI_State_Attack_Entity_Shark __self) => _returnToAttackPointSpeedMultiplier.Value.GetValue(__self);
		public static void SetReturnToAttackPointSpeedMultiplier(this AI_State_Attack_Entity_Shark __self, float value) => _returnToAttackPointSpeedMultiplier.Value.SetValue(__self, value);
		public static float GetAttackSwimSpeedMultiplier(this AI_State_Attack_Entity_Shark __self) => _attackSwimSpeedMultiplier.Value.GetValue(__self);
		public static void SetAttackSwimSpeedMultiplier(this AI_State_Attack_Entity_Shark __self, float value) => _attackSwimSpeedMultiplier.Value.SetValue(__self, value);
		public static float GetAttackRotationalMultiplier(this AI_State_Attack_Entity_Shark __self) => _attackRotationalMultiplier.Value.GetValue(__self);
		public static void SetAttackRotationalMultiplier(this AI_State_Attack_Entity_Shark __self, float value) => _attackRotationalMultiplier.Value.SetValue(__self, value);
		public static bool GetHasStartedAttackAnimation(this AI_State_Attack_Entity_Shark __self) => _hasStartedAttackAnimation.Value.GetValue(__self);
		public static void SetHasStartedAttackAnimation(this AI_State_Attack_Entity_Shark __self, bool value) => _hasStartedAttackAnimation.Value.SetValue(__self, value);
		public static float GetTotallBiteAnimationDuration(this AI_State_Attack_Entity_Shark __self) => _totallBiteAnimationDuration.Value.GetValue(__self);
		public static void SetTotallBiteAnimationDuration(this AI_State_Attack_Entity_Shark __self, float value) => _totallBiteAnimationDuration.Value.SetValue(__self, value);
		public static float GetReturnToLatestAttackPositionMaxDuration(this AI_State_Attack_Entity_Shark __self) => _returnToLatestAttackPositionMaxDuration.Value.GetValue(__self);
		public static void SetReturnToLatestAttackPositionMaxDuration(this AI_State_Attack_Entity_Shark __self, float value) => _returnToLatestAttackPositionMaxDuration.Value.SetValue(__self, value);
		public static float GetDriveByMissMinimumDuration(this AI_State_Attack_Entity_Shark __self) => _driveByMissMinimumDuration.Value.GetValue(__self);
		public static void SetDriveByMissMinimumDuration(this AI_State_Attack_Entity_Shark __self, float value) => _driveByMissMinimumDuration.Value.SetValue(__self, value);
		public static float GetDriveByMissMaximumDuration(this AI_State_Attack_Entity_Shark __self) => _driveByMissMaximumDuration.Value.GetValue(__self);
		public static void SetDriveByMissMaximumDuration(this AI_State_Attack_Entity_Shark __self, float value) => _driveByMissMaximumDuration.Value.SetValue(__self, value);
		public static float GetDriveByHitMinimumDuration(this AI_State_Attack_Entity_Shark __self) => _driveByHitMinimumDuration.Value.GetValue(__self);
		public static void SetDriveByHitMinimumDuration(this AI_State_Attack_Entity_Shark __self, float value) => _driveByHitMinimumDuration.Value.SetValue(__self, value);
		public static float GetDriveByHitMaximumDuration(this AI_State_Attack_Entity_Shark __self) => _driveByHitMaximumDuration.Value.GetValue(__self);
		public static void SetDriveByHitMaximumDuration(this AI_State_Attack_Entity_Shark __self, float value) => _driveByHitMaximumDuration.Value.SetValue(__self, value);
		public static float GetDmgTreshhold(this AI_State_Attack_Entity_Shark __self) => _dmgTreshhold.Value.GetValue(__self);
		public static void SetDmgTreshhold(this AI_State_Attack_Entity_Shark __self, float value) => _dmgTreshhold.Value.SetValue(__self, value);
		public static float GetCurrentDmgRecieved(this AI_State_Attack_Entity_Shark __self) => _currentDmgRecieved.Value.GetValue(__self);
		public static void SetCurrentDmgRecieved(this AI_State_Attack_Entity_Shark __self, float value) => _currentDmgRecieved.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetLatestBitePosition(this AI_State_Attack_Entity_Shark __self) => _latestBitePosition.Value.GetValue(__self);
		public static void SetLatestBitePosition(this AI_State_Attack_Entity_Shark __self, UnityEngine.Vector3 value) => _latestBitePosition.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetDrivebyDirection(this AI_State_Attack_Entity_Shark __self) => _drivebyDirection.Value.GetValue(__self);
		public static void SetDrivebyDirection(this AI_State_Attack_Entity_Shark __self, UnityEngine.Vector3 value) => _drivebyDirection.Value.SetValue(__self, value);
		public static float GetCurrentDriveByDuration(this AI_State_Attack_Entity_Shark __self) => _currentDriveByDuration.Value.GetValue(__self);
		public static void SetCurrentDriveByDuration(this AI_State_Attack_Entity_Shark __self, float value) => _currentDriveByDuration.Value.SetValue(__self, value);
		public static float GetDriveByTimer(this AI_State_Attack_Entity_Shark __self) => _driveByTimer.Value.GetValue(__self);
		public static void SetDriveByTimer(this AI_State_Attack_Entity_Shark __self, float value) => _driveByTimer.Value.SetValue(__self, value);
		public static float GetFindTargetCooldown(this AI_State_Attack_Entity_Shark __self) => _findTargetCooldown.Value.GetValue(__self);
		public static void SetFindTargetCooldown(this AI_State_Attack_Entity_Shark __self, float value) => _findTargetCooldown.Value.SetValue(__self, value);
		public static float GetFindTargetProgress(this AI_State_Attack_Entity_Shark __self) => _findTargetProgress.Value.GetValue(__self);
		public static void SetFindTargetProgress(this AI_State_Attack_Entity_Shark __self, float value) => _findTargetProgress.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetPlayerCameraOffset(this AI_State_Attack_Entity_Shark __self) => _playerCameraOffset.Value.GetValue(__self);
		public static void SetPlayerCameraOffset(this AI_State_Attack_Entity_Shark __self, UnityEngine.Vector3 value) => _playerCameraOffset.Value.SetValue(__self, value);
		public static float GetCurrentBiteProgress(this AI_State_Attack_Entity_Shark __self) => _currentBiteProgress.Value.GetValue(__self);
		public static void SetCurrentBiteProgress(this AI_State_Attack_Entity_Shark __self, float value) => _currentBiteProgress.Value.SetValue(__self, value);
		public static Raft_Network GetNetwork(this AI_State_Attack_Entity_Shark __self) => _network.Value.GetValue(__self);
		public static void SetNetwork(this AI_State_Attack_Entity_Shark __self, Raft_Network value) => _network.Value.SetValue(__self, value);
		public static bool GetDamageTreshHoldReached(this AI_State_Attack_Entity_Shark __self) => _damageTreshHoldReached.Value.GetValue(__self);
		public static void SetDamageTreshHoldReached(this AI_State_Attack_Entity_Shark __self, bool value) => _damageTreshHoldReached.Value.SetValue(__self, value);
		public static bool GetHasStartedAttack(this AI_State_Attack_Entity_Shark __self) => _hasStartedAttack.Value.GetValue(__self);
		public static void SetHasStartedAttack(this AI_State_Attack_Entity_Shark __self, bool value) => _hasStartedAttack.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_State_Attack_Entity_Shark>> _ResetState757602046 =
				new System.Lazy<MethodAccessor<AI_State_Attack_Entity_Shark>>(() => MethodAccessor<AI_State_Attack_Entity_Shark>.Create("ResetState"));
		private static readonly System.Lazy<MethodAccessor<AI_State_Attack_Entity_Shark>> _Start757602046 =
				new System.Lazy<MethodAccessor<AI_State_Attack_Entity_Shark>>(() => MethodAccessor<AI_State_Attack_Entity_Shark>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<AI_State_Attack_Entity_Shark>> _Destroy757602046 =
				new System.Lazy<MethodAccessor<AI_State_Attack_Entity_Shark>>(() => MethodAccessor<AI_State_Attack_Entity_Shark>.Create("Destroy"));
		private static readonly System.Lazy<MethodAccessor<AI_State_Attack_Entity_Shark>> _LerpMovementSpeedByDistance3698168060 =
				new System.Lazy<MethodAccessor<AI_State_Attack_Entity_Shark>>(() => MethodAccessor<AI_State_Attack_Entity_Shark>.Create("LerpMovementSpeedByDistance", typeof(float), typeof(float)));
		private static readonly System.Lazy<MethodAccessor<AI_State_Attack_Entity_Shark>> _OnDamageTaken3486905475 =
				new System.Lazy<MethodAccessor<AI_State_Attack_Entity_Shark>>(() => MethodAccessor<AI_State_Attack_Entity_Shark>.Create("OnDamageTaken", typeof(float)));

		public static void ResetState(this AI_State_Attack_Entity_Shark __self) => _ResetState757602046.Value.Invoke(__self);
		public static void Start(this AI_State_Attack_Entity_Shark __self) => _Start757602046.Value.Invoke(__self);
		public static void Destroy(this AI_State_Attack_Entity_Shark __self) => _Destroy757602046.Value.Invoke(__self);
		public static float LerpMovementSpeedByDistance(this AI_State_Attack_Entity_Shark __self, float distance, float timeRemaining) => (float)_LerpMovementSpeedByDistance3698168060.Value.Invoke(__self, distance, timeRemaining);
		public static void OnDamageTaken(this AI_State_Attack_Entity_Shark __self, float damage) => _OnDamageTaken3486905475.Value.Invoke(__self, damage);

	}

	public static class PrivateAccessor_AI_State_BiteBait
	{

		private static readonly System.Lazy<FieldAccessor<AI_State_BiteBait, SharkBait>> _targetBait =
				new System.Lazy<FieldAccessor<AI_State_BiteBait, SharkBait>>(() => FieldAccessor<AI_State_BiteBait, SharkBait>.Create("targetBait"));
		private static readonly System.Lazy<FieldAccessor<AI_State_BiteBait, float>> _biteRange =
				new System.Lazy<FieldAccessor<AI_State_BiteBait, float>>(() => FieldAccessor<AI_State_BiteBait, float>.Create("biteRange"));
		private static readonly System.Lazy<FieldAccessor<AI_State_BiteBait, int>> _biteDamage =
				new System.Lazy<FieldAccessor<AI_State_BiteBait, int>>(() => FieldAccessor<AI_State_BiteBait, int>.Create("biteDamage"));
		private static readonly System.Lazy<FieldAccessor<AI_State_BiteBait, float>> _biteCooldown =
				new System.Lazy<FieldAccessor<AI_State_BiteBait, float>>(() => FieldAccessor<AI_State_BiteBait, float>.Create("biteCooldown"));
		private static readonly System.Lazy<FieldAccessor<AI_State_BiteBait, float>> _biteProgress =
				new System.Lazy<FieldAccessor<AI_State_BiteBait, float>>(() => FieldAccessor<AI_State_BiteBait, float>.Create("biteProgress"));

		public static SharkBait GetTargetBait(this AI_State_BiteBait __self) => _targetBait.Value.GetValue(__self);
		public static void SetTargetBait(this AI_State_BiteBait __self, SharkBait value) => _targetBait.Value.SetValue(__self, value);
		public static float GetBiteRange(this AI_State_BiteBait __self) => _biteRange.Value.GetValue(__self);
		public static void SetBiteRange(this AI_State_BiteBait __self, float value) => _biteRange.Value.SetValue(__self, value);
		public static int GetBiteDamage(this AI_State_BiteBait __self) => _biteDamage.Value.GetValue(__self);
		public static void SetBiteDamage(this AI_State_BiteBait __self, int value) => _biteDamage.Value.SetValue(__self, value);
		public static float GetBiteCooldown(this AI_State_BiteBait __self) => _biteCooldown.Value.GetValue(__self);
		public static void SetBiteCooldown(this AI_State_BiteBait __self, float value) => _biteCooldown.Value.SetValue(__self, value);
		public static float GetBiteProgress(this AI_State_BiteBait __self) => _biteProgress.Value.GetValue(__self);
		public static void SetBiteProgress(this AI_State_BiteBait __self, float value) => _biteProgress.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_State_BiteBait>> _MoveTowardsBait3474305205 =
				new System.Lazy<MethodAccessor<AI_State_BiteBait>>(() => MethodAccessor<AI_State_BiteBait>.Create("MoveTowardsBait", typeof(SharkBait)));
		private static readonly System.Lazy<MethodAccessor<AI_State_BiteBait>> _BiteBait3474305205 =
				new System.Lazy<MethodAccessor<AI_State_BiteBait>>(() => MethodAccessor<AI_State_BiteBait>.Create("BiteBait", typeof(SharkBait)));
		private static readonly System.Lazy<MethodAccessor<AI_State_BiteBait>> _AttackBait3474305205 =
				new System.Lazy<MethodAccessor<AI_State_BiteBait>>(() => MethodAccessor<AI_State_BiteBait>.Create("AttackBait", typeof(SharkBait)));
		private static readonly System.Lazy<MethodAccessor<AI_State_BiteBait>> _InitiateAttack757602046 =
				new System.Lazy<MethodAccessor<AI_State_BiteBait>>(() => MethodAccessor<AI_State_BiteBait>.Create("InitiateAttack"));
		private static readonly System.Lazy<MethodAccessor<AI_State_BiteBait>> _ReleaseBait3474305205 =
				new System.Lazy<MethodAccessor<AI_State_BiteBait>>(() => MethodAccessor<AI_State_BiteBait>.Create("ReleaseBait", typeof(SharkBait)));

		public static void MoveTowardsBait(this AI_State_BiteBait __self, SharkBait targetBait) => _MoveTowardsBait3474305205.Value.Invoke(__self, targetBait);
		public static void BiteBait(this AI_State_BiteBait __self, SharkBait targetBait) => _BiteBait3474305205.Value.Invoke(__self, targetBait);
		public static void AttackBait(this AI_State_BiteBait __self, SharkBait p_targetBait) => _AttackBait3474305205.Value.Invoke(__self, p_targetBait);
		public static void InitiateAttack(this AI_State_BiteBait __self) => _InitiateAttack757602046.Value.Invoke(__self);
		public static void ReleaseBait(this AI_State_BiteBait __self, SharkBait p_targetBait) => _ReleaseBait3474305205.Value.Invoke(__self, p_targetBait);

	}

	public static class PrivateAccessor_AI_State_BiteBait_Shark
	{

		private static readonly System.Lazy<FieldAccessor<AI_State_BiteBait_Shark, AI_StateMachine_Shark>> _statemachineShark =
				new System.Lazy<FieldAccessor<AI_State_BiteBait_Shark, AI_StateMachine_Shark>>(() => FieldAccessor<AI_State_BiteBait_Shark, AI_StateMachine_Shark>.Create("statemachineShark"));

		public static AI_StateMachine_Shark GetStatemachineShark(this AI_State_BiteBait_Shark __self) => _statemachineShark.Value.GetValue(__self);
		public static void SetStatemachineShark(this AI_State_BiteBait_Shark __self, AI_StateMachine_Shark value) => _statemachineShark.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_State_BiteBait_Shark>> _Start757602046 =
				new System.Lazy<MethodAccessor<AI_State_BiteBait_Shark>>(() => MethodAccessor<AI_State_BiteBait_Shark>.Create("Start"));

		public static void Start(this AI_State_BiteBait_Shark __self) => _Start757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AI_State_Circulate_Shark
	{

		private static readonly System.Lazy<FieldAccessor<AI_State_Circulate_Shark, AI_StateMachine_Shark>> _stateMachineShark =
				new System.Lazy<FieldAccessor<AI_State_Circulate_Shark, AI_StateMachine_Shark>>(() => FieldAccessor<AI_State_Circulate_Shark, AI_StateMachine_Shark>.Create("stateMachineShark"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Circulate_Shark, float>> _currentCirculationProgress =
				new System.Lazy<FieldAccessor<AI_State_Circulate_Shark, float>>(() => FieldAccessor<AI_State_Circulate_Shark, float>.Create("currentCirculationProgress"));

		public static AI_StateMachine_Shark GetStateMachineShark(this AI_State_Circulate_Shark __self) => _stateMachineShark.Value.GetValue(__self);
		public static void SetStateMachineShark(this AI_State_Circulate_Shark __self, AI_StateMachine_Shark value) => _stateMachineShark.Value.SetValue(__self, value);
		public static float GetCurrentCirculationProgress(this AI_State_Circulate_Shark __self) => _currentCirculationProgress.Value.GetValue(__self);
		public static void SetCurrentCirculationProgress(this AI_State_Circulate_Shark __self, float value) => _currentCirculationProgress.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_State_Circulate_Shark>> _Start757602046 =
				new System.Lazy<MethodAccessor<AI_State_Circulate_Shark>>(() => MethodAccessor<AI_State_Circulate_Shark>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<AI_State_Circulate_Shark>> _PlayerIsWithinRange757602046 =
				new System.Lazy<MethodAccessor<AI_State_Circulate_Shark>>(() => MethodAccessor<AI_State_Circulate_Shark>.Create("PlayerIsWithinRange"));
		private static readonly System.Lazy<MethodAccessor<AI_State_Circulate_Shark>> _GetValidTargetPoint757602046 =
				new System.Lazy<MethodAccessor<AI_State_Circulate_Shark>>(() => MethodAccessor<AI_State_Circulate_Shark>.Create("GetValidTargetPoint"));

		public static void Start(this AI_State_Circulate_Shark __self) => _Start757602046.Value.Invoke(__self);
		public static bool PlayerIsWithinRange(this AI_State_Circulate_Shark __self) => (bool)_PlayerIsWithinRange757602046.Value.Invoke(__self);
		public static UnityEngine.Vector3 GetValidTargetPoint(this AI_State_Circulate_Shark __self) => (UnityEngine.Vector3)_GetValidTargetPoint757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AI_State_Dead_Shark
	{

		private static readonly System.Lazy<FieldAccessor<AI_State_Dead_Shark, AI_StateMachine_Shark>> _sharkStateMachine =
				new System.Lazy<FieldAccessor<AI_State_Dead_Shark, AI_StateMachine_Shark>>(() => FieldAccessor<AI_State_Dead_Shark, AI_StateMachine_Shark>.Create("sharkStateMachine"));

		public static AI_StateMachine_Shark GetSharkStateMachine(this AI_State_Dead_Shark __self) => _sharkStateMachine.Value.GetValue(__self);
		public static void SetSharkStateMachine(this AI_State_Dead_Shark __self, AI_StateMachine_Shark value) => _sharkStateMachine.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_State_Dead_Shark>> _Start757602046 =
				new System.Lazy<MethodAccessor<AI_State_Dead_Shark>>(() => MethodAccessor<AI_State_Dead_Shark>.Create("Start"));

		public static void Start(this AI_State_Dead_Shark __self) => _Start757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AI_State_Decay
	{

		private static readonly System.Lazy<FieldAccessor<AI_State_Decay, float>> _removeBodyTimeProgress =
				new System.Lazy<FieldAccessor<AI_State_Decay, float>>(() => FieldAccessor<AI_State_Decay, float>.Create("removeBodyTimeProgress"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Decay, AI_StateMachine_Animal>> _statemachine_animal =
				new System.Lazy<FieldAccessor<AI_State_Decay, AI_StateMachine_Animal>>(() => FieldAccessor<AI_State_Decay, AI_StateMachine_Animal>.Create("statemachine_animal"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Decay, UnityEngine.MaterialPropertyBlock>> _dissolveProperyBlock =
				new System.Lazy<FieldAccessor<AI_State_Decay, UnityEngine.MaterialPropertyBlock>>(() => FieldAccessor<AI_State_Decay, UnityEngine.MaterialPropertyBlock>.Create("dissolveProperyBlock"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Decay, bool>> _dissolveBodyDuringDecay =
				new System.Lazy<FieldAccessor<AI_State_Decay, bool>>(() => FieldAccessor<AI_State_Decay, bool>.Create("dissolveBodyDuringDecay"));

		public static float GetRemoveBodyTimeProgress(this AI_State_Decay __self) => _removeBodyTimeProgress.Value.GetValue(__self);
		public static void SetRemoveBodyTimeProgress(this AI_State_Decay __self, float value) => _removeBodyTimeProgress.Value.SetValue(__self, value);
		public static AI_StateMachine_Animal GetStatemachine_animal(this AI_State_Decay __self) => _statemachine_animal.Value.GetValue(__self);
		public static void SetStatemachine_animal(this AI_State_Decay __self, AI_StateMachine_Animal value) => _statemachine_animal.Value.SetValue(__self, value);
		public static UnityEngine.MaterialPropertyBlock GetDissolveProperyBlock(this AI_State_Decay __self) => _dissolveProperyBlock.Value.GetValue(__self);
		public static void SetDissolveProperyBlock(this AI_State_Decay __self, UnityEngine.MaterialPropertyBlock value) => _dissolveProperyBlock.Value.SetValue(__self, value);
		public static bool GetDissolveBodyDuringDecay(this AI_State_Decay __self) => _dissolveBodyDuringDecay.Value.GetValue(__self);
		public static void SetDissolveBodyDuringDecay(this AI_State_Decay __self, bool value) => _dissolveBodyDuringDecay.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_State_Decay>> _Start757602046 =
				new System.Lazy<MethodAccessor<AI_State_Decay>>(() => MethodAccessor<AI_State_Decay>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<AI_State_Decay>> _CheckToSpawnOnDecay757602046 =
				new System.Lazy<MethodAccessor<AI_State_Decay>>(() => MethodAccessor<AI_State_Decay>.Create("CheckToSpawnOnDecay"));
		private static readonly System.Lazy<MethodAccessor<AI_State_Decay>> _FinalDecay757602046 =
				new System.Lazy<MethodAccessor<AI_State_Decay>>(() => MethodAccessor<AI_State_Decay>.Create("FinalDecay"));
		private static readonly System.Lazy<MethodAccessor<AI_State_Decay>> _RemoveEntity757602046 =
				new System.Lazy<MethodAccessor<AI_State_Decay>>(() => MethodAccessor<AI_State_Decay>.Create("RemoveEntity"));
		private static readonly System.Lazy<MethodAccessor<AI_State_Decay>> _DissolveBody757602046 =
				new System.Lazy<MethodAccessor<AI_State_Decay>>(() => MethodAccessor<AI_State_Decay>.Create("DissolveBody"));
		private static readonly System.Lazy<MethodAccessor<AI_State_Decay>> _DissolveRendererBody3698168060 =
				new System.Lazy<MethodAccessor<AI_State_Decay>>(() => MethodAccessor<AI_State_Decay>.Create("DissolveRendererBody", typeof(float), typeof(float)));

		public static void Start(this AI_State_Decay __self) => _Start757602046.Value.Invoke(__self);
		public static bool CheckToSpawnOnDecay(this AI_State_Decay __self) => (bool)_CheckToSpawnOnDecay757602046.Value.Invoke(__self);
		public static void FinalDecay(this AI_State_Decay __self) => _FinalDecay757602046.Value.Invoke(__self);
		public static void RemoveEntity(this AI_State_Decay __self) => _RemoveEntity757602046.Value.Invoke(__self);
		public static System.Collections.IEnumerator DissolveBody(this AI_State_Decay __self) => (System.Collections.IEnumerator)_DissolveBody757602046.Value.Invoke(__self);
		public static void DissolveRendererBody(this AI_State_Decay __self, float currentProgress, float totallDissolveTime) => _DissolveRendererBody3698168060.Value.Invoke(__self, currentProgress, totallDissolveTime);

	}

	public static class PrivateAccessor_AI_State_Decay_Shark
	{

		private static readonly System.Lazy<FieldAccessor<AI_State_Decay_Shark, AI_StateMachine_Shark>> _stateMachineShark =
				new System.Lazy<FieldAccessor<AI_State_Decay_Shark, AI_StateMachine_Shark>>(() => FieldAccessor<AI_State_Decay_Shark, AI_StateMachine_Shark>.Create("stateMachineShark"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Decay_Shark, UnityEngine.Rigidbody>> _rigid =
				new System.Lazy<FieldAccessor<AI_State_Decay_Shark, UnityEngine.Rigidbody>>(() => FieldAccessor<AI_State_Decay_Shark, UnityEngine.Rigidbody>.Create("rigid"));

		public static AI_StateMachine_Shark GetStateMachineShark(this AI_State_Decay_Shark __self) => _stateMachineShark.Value.GetValue(__self);
		public static void SetStateMachineShark(this AI_State_Decay_Shark __self, AI_StateMachine_Shark value) => _stateMachineShark.Value.SetValue(__self, value);
		public static UnityEngine.Rigidbody GetRigid(this AI_State_Decay_Shark __self) => _rigid.Value.GetValue(__self);
		public static void SetRigid(this AI_State_Decay_Shark __self, UnityEngine.Rigidbody value) => _rigid.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_State_Decay_Shark>> _Start757602046 =
				new System.Lazy<MethodAccessor<AI_State_Decay_Shark>>(() => MethodAccessor<AI_State_Decay_Shark>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<AI_State_Decay_Shark>> _CheckToSpawnOnDecay757602046 =
				new System.Lazy<MethodAccessor<AI_State_Decay_Shark>>(() => MethodAccessor<AI_State_Decay_Shark>.Create("CheckToSpawnOnDecay"));
		private static readonly System.Lazy<MethodAccessor<AI_State_Decay_Shark>> _FinalDecay757602046 =
				new System.Lazy<MethodAccessor<AI_State_Decay_Shark>>(() => MethodAccessor<AI_State_Decay_Shark>.Create("FinalDecay"));
		private static readonly System.Lazy<MethodAccessor<AI_State_Decay_Shark>> _SpawnAdditionalShark3486186818 =
				new System.Lazy<MethodAccessor<AI_State_Decay_Shark>>(() => MethodAccessor<AI_State_Decay_Shark>.Create("SpawnAdditionalShark", typeof(int)));

		public static void Start(this AI_State_Decay_Shark __self) => _Start757602046.Value.Invoke(__self);
		public static bool CheckToSpawnOnDecay(this AI_State_Decay_Shark __self) => (bool)_CheckToSpawnOnDecay757602046.Value.Invoke(__self);
		public static void FinalDecay(this AI_State_Decay_Shark __self) => _FinalDecay757602046.Value.Invoke(__self);
		public static bool SpawnAdditionalShark(this AI_State_Decay_Shark __self, int sharkCount) => (bool)_SpawnAdditionalShark3486186818.Value.Invoke(__self, sharkCount);

	}

	public static class PrivateAccessor_AI_State_Dive
	{

		private static readonly System.Lazy<FieldAccessor<AI_State_Dive, MovementType>> _movementType =
				new System.Lazy<FieldAccessor<AI_State_Dive, MovementType>>(() => FieldAccessor<AI_State_Dive, MovementType>.Create("movementType"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Dive, UnityEngine.LayerMask>> _obstructionMask =
				new System.Lazy<FieldAccessor<AI_State_Dive, UnityEngine.LayerMask>>(() => FieldAccessor<AI_State_Dive, UnityEngine.LayerMask>.Create("obstructionMask"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Dive, UnityEngine.Transform>> _rayStart =
				new System.Lazy<FieldAccessor<AI_State_Dive, UnityEngine.Transform>>(() => FieldAccessor<AI_State_Dive, UnityEngine.Transform>.Create("rayStart"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Dive, float>> _rayDistance =
				new System.Lazy<FieldAccessor<AI_State_Dive, float>>(() => FieldAccessor<AI_State_Dive, float>.Create("rayDistance"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Dive, UnityEngine.Vector3>> _localDiveOffset =
				new System.Lazy<FieldAccessor<AI_State_Dive, UnityEngine.Vector3>>(() => FieldAccessor<AI_State_Dive, UnityEngine.Vector3>.Create("localDiveOffset"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Dive, int>> _numberOfChecks =
				new System.Lazy<FieldAccessor<AI_State_Dive, int>>(() => FieldAccessor<AI_State_Dive, int>.Create("numberOfChecks"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Dive, float>> _downwardAngle =
				new System.Lazy<FieldAccessor<AI_State_Dive, float>>(() => FieldAccessor<AI_State_Dive, float>.Create("downwardAngle"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Dive, AI_State>> _timerReachedState =
				new System.Lazy<FieldAccessor<AI_State_Dive, AI_State>>(() => FieldAccessor<AI_State_Dive, AI_State>.Create("timerReachedState"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Dive, float>> _diveTime =
				new System.Lazy<FieldAccessor<AI_State_Dive, float>>(() => FieldAccessor<AI_State_Dive, float>.Create("diveTime"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Dive, AI_State>> _reachDivePointState =
				new System.Lazy<FieldAccessor<AI_State_Dive, AI_State>>(() => FieldAccessor<AI_State_Dive, AI_State>.Create("reachDivePointState"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Dive, float>> _reachPointDistance =
				new System.Lazy<FieldAccessor<AI_State_Dive, float>>(() => FieldAccessor<AI_State_Dive, float>.Create("reachPointDistance"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Dive, UnityEngine.Vector3>> _targetPoint =
				new System.Lazy<FieldAccessor<AI_State_Dive, UnityEngine.Vector3>>(() => FieldAccessor<AI_State_Dive, UnityEngine.Vector3>.Create("targetPoint"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Dive, float>> _diveTimer =
				new System.Lazy<FieldAccessor<AI_State_Dive, float>>(() => FieldAccessor<AI_State_Dive, float>.Create("diveTimer"));

		public static MovementType GetMovementType(this AI_State_Dive __self) => _movementType.Value.GetValue(__self);
		public static void SetMovementType(this AI_State_Dive __self, MovementType value) => _movementType.Value.SetValue(__self, value);
		public static UnityEngine.LayerMask GetObstructionMask(this AI_State_Dive __self) => _obstructionMask.Value.GetValue(__self);
		public static void SetObstructionMask(this AI_State_Dive __self, UnityEngine.LayerMask value) => _obstructionMask.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetRayStart(this AI_State_Dive __self) => _rayStart.Value.GetValue(__self);
		public static void SetRayStart(this AI_State_Dive __self, UnityEngine.Transform value) => _rayStart.Value.SetValue(__self, value);
		public static float GetRayDistance(this AI_State_Dive __self) => _rayDistance.Value.GetValue(__self);
		public static void SetRayDistance(this AI_State_Dive __self, float value) => _rayDistance.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetLocalDiveOffset(this AI_State_Dive __self) => _localDiveOffset.Value.GetValue(__self);
		public static void SetLocalDiveOffset(this AI_State_Dive __self, UnityEngine.Vector3 value) => _localDiveOffset.Value.SetValue(__self, value);
		public static int GetNumberOfChecks(this AI_State_Dive __self) => _numberOfChecks.Value.GetValue(__self);
		public static void SetNumberOfChecks(this AI_State_Dive __self, int value) => _numberOfChecks.Value.SetValue(__self, value);
		public static float GetDownwardAngle(this AI_State_Dive __self) => _downwardAngle.Value.GetValue(__self);
		public static void SetDownwardAngle(this AI_State_Dive __self, float value) => _downwardAngle.Value.SetValue(__self, value);
		public static AI_State GetTimerReachedState(this AI_State_Dive __self) => _timerReachedState.Value.GetValue(__self);
		public static void SetTimerReachedState(this AI_State_Dive __self, AI_State value) => _timerReachedState.Value.SetValue(__self, value);
		public static float GetDiveTime(this AI_State_Dive __self) => _diveTime.Value.GetValue(__self);
		public static void SetDiveTime(this AI_State_Dive __self, float value) => _diveTime.Value.SetValue(__self, value);
		public static AI_State GetReachDivePointState(this AI_State_Dive __self) => _reachDivePointState.Value.GetValue(__self);
		public static void SetReachDivePointState(this AI_State_Dive __self, AI_State value) => _reachDivePointState.Value.SetValue(__self, value);
		public static float GetReachPointDistance(this AI_State_Dive __self) => _reachPointDistance.Value.GetValue(__self);
		public static void SetReachPointDistance(this AI_State_Dive __self, float value) => _reachPointDistance.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetTargetPoint(this AI_State_Dive __self) => _targetPoint.Value.GetValue(__self);
		public static void SetTargetPoint(this AI_State_Dive __self, UnityEngine.Vector3 value) => _targetPoint.Value.SetValue(__self, value);
		public static float GetDiveTimer(this AI_State_Dive __self) => _diveTimer.Value.GetValue(__self);
		public static void SetDiveTimer(this AI_State_Dive __self, float value) => _diveTimer.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_State_Dive>> _OnDrawGizmosSelected757602046 =
				new System.Lazy<MethodAccessor<AI_State_Dive>>(() => MethodAccessor<AI_State_Dive>.Create("OnDrawGizmosSelected"));
		private static readonly System.Lazy<MethodAccessor<AI_State_Dive>> _IsDefault757602046 =
				new System.Lazy<MethodAccessor<AI_State_Dive>>(() => MethodAccessor<AI_State_Dive>.Create("IsDefault"));
		private static readonly System.Lazy<MethodAccessor<AI_State_Dive>> _IsRayAngle757602046 =
				new System.Lazy<MethodAccessor<AI_State_Dive>>(() => MethodAccessor<AI_State_Dive>.Create("IsRayAngle"));
		private static readonly System.Lazy<MethodAccessor<AI_State_Dive>> _CalculateNewDivePoint757602046 =
				new System.Lazy<MethodAccessor<AI_State_Dive>>(() => MethodAccessor<AI_State_Dive>.Create("CalculateNewDivePoint"));

		public static void OnDrawGizmosSelected(this AI_State_Dive __self) => _OnDrawGizmosSelected757602046.Value.Invoke(__self);
		public static bool IsDefault(this AI_State_Dive __self) => (bool)_IsDefault757602046.Value.Invoke(__self);
		public static bool IsRayAngle(this AI_State_Dive __self) => (bool)_IsRayAngle757602046.Value.Invoke(__self);
		public static void CalculateNewDivePoint(this AI_State_Dive __self) => _CalculateNewDivePoint757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AI_State_Dive_Movetowards_Shark
	{

		private static readonly System.Lazy<FieldAccessor<AI_State_Dive_Movetowards_Shark, AI_StateMachine_Shark>> _sharkStateMachine =
				new System.Lazy<FieldAccessor<AI_State_Dive_Movetowards_Shark, AI_StateMachine_Shark>>(() => FieldAccessor<AI_State_Dive_Movetowards_Shark, AI_StateMachine_Shark>.Create("sharkStateMachine"));

		public static AI_StateMachine_Shark GetSharkStateMachine(this AI_State_Dive_Movetowards_Shark __self) => _sharkStateMachine.Value.GetValue(__self);
		public static void SetSharkStateMachine(this AI_State_Dive_Movetowards_Shark __self, AI_StateMachine_Shark value) => _sharkStateMachine.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_State_Dive_Movetowards_Shark>> _MoveTowardsDestinationPoint757602046 =
				new System.Lazy<MethodAccessor<AI_State_Dive_Movetowards_Shark>>(() => MethodAccessor<AI_State_Dive_Movetowards_Shark>.Create("MoveTowardsDestinationPoint"));

		public static void MoveTowardsDestinationPoint(this AI_State_Dive_Movetowards_Shark __self) => _MoveTowardsDestinationPoint757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AI_State_MoveAwayFromRaft_Shark
	{

		private static readonly System.Lazy<FieldAccessor<AI_State_MoveAwayFromRaft_Shark, AI_StateMachine_Shark>> _stateMachineShark =
				new System.Lazy<FieldAccessor<AI_State_MoveAwayFromRaft_Shark, AI_StateMachine_Shark>>(() => FieldAccessor<AI_State_MoveAwayFromRaft_Shark, AI_StateMachine_Shark>.Create("stateMachineShark"));
		private static readonly System.Lazy<FieldAccessor<AI_State_MoveAwayFromRaft_Shark, float>> _maxStateProgression =
				new System.Lazy<FieldAccessor<AI_State_MoveAwayFromRaft_Shark, float>>(() => FieldAccessor<AI_State_MoveAwayFromRaft_Shark, float>.Create("maxStateProgression"));

		public static AI_StateMachine_Shark GetStateMachineShark(this AI_State_MoveAwayFromRaft_Shark __self) => _stateMachineShark.Value.GetValue(__self);
		public static void SetStateMachineShark(this AI_State_MoveAwayFromRaft_Shark __self, AI_StateMachine_Shark value) => _stateMachineShark.Value.SetValue(__self, value);
		public static float GetMaxStateProgression(this AI_State_MoveAwayFromRaft_Shark __self) => _maxStateProgression.Value.GetValue(__self);
		public static void SetMaxStateProgression(this AI_State_MoveAwayFromRaft_Shark __self, float value) => _maxStateProgression.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_State_MoveAwayFromRaft_Shark>> _Start757602046 =
				new System.Lazy<MethodAccessor<AI_State_MoveAwayFromRaft_Shark>>(() => MethodAccessor<AI_State_MoveAwayFromRaft_Shark>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<AI_State_MoveAwayFromRaft_Shark>> _MoveTowardsDestinationPoint757602046 =
				new System.Lazy<MethodAccessor<AI_State_MoveAwayFromRaft_Shark>>(() => MethodAccessor<AI_State_MoveAwayFromRaft_Shark>.Create("MoveTowardsDestinationPoint"));

		public static void Start(this AI_State_MoveAwayFromRaft_Shark __self) => _Start757602046.Value.Invoke(__self);
		public static void MoveTowardsDestinationPoint(this AI_State_MoveAwayFromRaft_Shark __self) => _MoveTowardsDestinationPoint757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AI_State_Movetowards_Destination
	{

		private static readonly System.Lazy<FieldAccessor<AI_State_Movetowards_Destination, float>> _distanceToReach =
				new System.Lazy<FieldAccessor<AI_State_Movetowards_Destination, float>>(() => FieldAccessor<AI_State_Movetowards_Destination, float>.Create("distanceToReach"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Movetowards_Destination, UnityEngine.Vector3>> _destinationPoint =
				new System.Lazy<FieldAccessor<AI_State_Movetowards_Destination, UnityEngine.Vector3>>(() => FieldAccessor<AI_State_Movetowards_Destination, UnityEngine.Vector3>.Create("destinationPoint"));

		public static float GetDistanceToReach(this AI_State_Movetowards_Destination __self) => _distanceToReach.Value.GetValue(__self);
		public static void SetDistanceToReach(this AI_State_Movetowards_Destination __self, float value) => _distanceToReach.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetDestinationPoint(this AI_State_Movetowards_Destination __self) => _destinationPoint.Value.GetValue(__self);
		public static void SetDestinationPoint(this AI_State_Movetowards_Destination __self, UnityEngine.Vector3 value) => _destinationPoint.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_State_Movetowards_Destination>> _MoveTowardsDestinationPoint757602046 =
				new System.Lazy<MethodAccessor<AI_State_Movetowards_Destination>>(() => MethodAccessor<AI_State_Movetowards_Destination>.Create("MoveTowardsDestinationPoint"));
		private static readonly System.Lazy<MethodAccessor<AI_State_Movetowards_Destination>> _IsInRangeOfDestinationPoint757602046 =
				new System.Lazy<MethodAccessor<AI_State_Movetowards_Destination>>(() => MethodAccessor<AI_State_Movetowards_Destination>.Create("IsInRangeOfDestinationPoint"));

		public static void MoveTowardsDestinationPoint(this AI_State_Movetowards_Destination __self) => _MoveTowardsDestinationPoint757602046.Value.Invoke(__self);
		public static bool IsInRangeOfDestinationPoint(this AI_State_Movetowards_Destination __self) => (bool)_IsInRangeOfDestinationPoint757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AI_State_Waypoint_Chase
	{

		private static readonly System.Lazy<FieldAccessor<AI_State_Waypoint_Chase, UnityEngine.Vector3>> _lastKnownPlayerPosition =
				new System.Lazy<FieldAccessor<AI_State_Waypoint_Chase, UnityEngine.Vector3>>(() => FieldAccessor<AI_State_Waypoint_Chase, UnityEngine.Vector3>.Create("lastKnownPlayerPosition"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Waypoint_Chase, bool>> _hasVisionToTarget =
				new System.Lazy<FieldAccessor<AI_State_Waypoint_Chase, bool>>(() => FieldAccessor<AI_State_Waypoint_Chase, bool>.Create("hasVisionToTarget"));

		public static UnityEngine.Vector3 GetLastKnownPlayerPosition(this AI_State_Waypoint_Chase __self) => _lastKnownPlayerPosition.Value.GetValue(__self);
		public static void SetLastKnownPlayerPosition(this AI_State_Waypoint_Chase __self, UnityEngine.Vector3 value) => _lastKnownPlayerPosition.Value.SetValue(__self, value);
		public static bool GetHasVisionToTarget(this AI_State_Waypoint_Chase __self) => _hasVisionToTarget.Value.GetValue(__self);
		public static void SetHasVisionToTarget(this AI_State_Waypoint_Chase __self, bool value) => _hasVisionToTarget.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_State_Waypoint_Chase>> _CheckDistanceConditions757602046 =
				new System.Lazy<MethodAccessor<AI_State_Waypoint_Chase>>(() => MethodAccessor<AI_State_Waypoint_Chase>.Create("CheckDistanceConditions"));
		private static readonly System.Lazy<MethodAccessor<AI_State_Waypoint_Chase>> _AttemptChase757602046 =
				new System.Lazy<MethodAccessor<AI_State_Waypoint_Chase>>(() => MethodAccessor<AI_State_Waypoint_Chase>.Create("AttemptChase"));
		private static readonly System.Lazy<MethodAccessor<AI_State_Waypoint_Chase>> _MoveTowardsWaypoint3429126434 =
				new System.Lazy<MethodAccessor<AI_State_Waypoint_Chase>>(() => MethodAccessor<AI_State_Waypoint_Chase>.Create("MoveTowardsWaypoint", typeof(UnityEngine.Vector3)));

		public static void CheckDistanceConditions(this AI_State_Waypoint_Chase __self) => _CheckDistanceConditions757602046.Value.Invoke(__self);
		public static void AttemptChase(this AI_State_Waypoint_Chase __self) => _AttemptChase757602046.Value.Invoke(__self);
		public static void MoveTowardsWaypoint(this AI_State_Waypoint_Chase __self, UnityEngine.Vector3 wayPointPos) => _MoveTowardsWaypoint3429126434.Value.Invoke(__self, wayPointPos);

	}

	public static class PrivateAccessor_AI_State_Waypoint_Chase_Shark
	{

		private static readonly System.Lazy<FieldAccessor<AI_State_Waypoint_Chase_Shark, AI_StateMachine_Shark>> _stateMachineShark =
				new System.Lazy<FieldAccessor<AI_State_Waypoint_Chase_Shark, AI_StateMachine_Shark>>(() => FieldAccessor<AI_State_Waypoint_Chase_Shark, AI_StateMachine_Shark>.Create("stateMachineShark"));

		public static AI_StateMachine_Shark GetStateMachineShark(this AI_State_Waypoint_Chase_Shark __self) => _stateMachineShark.Value.GetValue(__self);
		public static void SetStateMachineShark(this AI_State_Waypoint_Chase_Shark __self, AI_StateMachine_Shark value) => _stateMachineShark.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_State_Waypoint_Chase_Shark>> _Start757602046 =
				new System.Lazy<MethodAccessor<AI_State_Waypoint_Chase_Shark>>(() => MethodAccessor<AI_State_Waypoint_Chase_Shark>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<AI_State_Waypoint_Chase_Shark>> _Destroy757602046 =
				new System.Lazy<MethodAccessor<AI_State_Waypoint_Chase_Shark>>(() => MethodAccessor<AI_State_Waypoint_Chase_Shark>.Create("Destroy"));

		public static void Start(this AI_State_Waypoint_Chase_Shark __self) => _Start757602046.Value.Invoke(__self);
		public static void Destroy(this AI_State_Waypoint_Chase_Shark __self) => _Destroy757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_SharkAnimationFromRotationDelta
	{

		private static readonly System.Lazy<FieldAccessor<SharkAnimationFromRotationDelta, MeasureRotationDelta>> _rotationDeltaScript =
				new System.Lazy<FieldAccessor<SharkAnimationFromRotationDelta, MeasureRotationDelta>>(() => FieldAccessor<SharkAnimationFromRotationDelta, MeasureRotationDelta>.Create("rotationDeltaScript"));
		private static readonly System.Lazy<FieldAccessor<SharkAnimationFromRotationDelta, AnimatorController>> _animatorController =
				new System.Lazy<FieldAccessor<SharkAnimationFromRotationDelta, AnimatorController>>(() => FieldAccessor<SharkAnimationFromRotationDelta, AnimatorController>.Create("animatorController"));
		private static readonly System.Lazy<FieldAccessor<SharkAnimationFromRotationDelta, float>> _lerpAnimatorSpeed =
				new System.Lazy<FieldAccessor<SharkAnimationFromRotationDelta, float>>(() => FieldAccessor<SharkAnimationFromRotationDelta, float>.Create("lerpAnimatorSpeed"));
		private static readonly System.Lazy<FieldAccessor<SharkAnimationFromRotationDelta, string>> _parameterUpDown =
				new System.Lazy<FieldAccessor<SharkAnimationFromRotationDelta, string>>(() => FieldAccessor<SharkAnimationFromRotationDelta, string>.Create("parameterUpDown"));
		private static readonly System.Lazy<FieldAccessor<SharkAnimationFromRotationDelta, string>> _parameterLeftRight =
				new System.Lazy<FieldAccessor<SharkAnimationFromRotationDelta, string>>(() => FieldAccessor<SharkAnimationFromRotationDelta, string>.Create("parameterLeftRight"));

		public static MeasureRotationDelta GetRotationDeltaScript(this SharkAnimationFromRotationDelta __self) => _rotationDeltaScript.Value.GetValue(__self);
		public static void SetRotationDeltaScript(this SharkAnimationFromRotationDelta __self, MeasureRotationDelta value) => _rotationDeltaScript.Value.SetValue(__self, value);
		public static AnimatorController GetAnimatorController(this SharkAnimationFromRotationDelta __self) => _animatorController.Value.GetValue(__self);
		public static void SetAnimatorController(this SharkAnimationFromRotationDelta __self, AnimatorController value) => _animatorController.Value.SetValue(__self, value);
		public static float GetLerpAnimatorSpeed(this SharkAnimationFromRotationDelta __self) => _lerpAnimatorSpeed.Value.GetValue(__self);
		public static void SetLerpAnimatorSpeed(this SharkAnimationFromRotationDelta __self, float value) => _lerpAnimatorSpeed.Value.SetValue(__self, value);
		public static string GetParameterUpDown(this SharkAnimationFromRotationDelta __self) => _parameterUpDown.Value.GetValue(__self);
		public static void SetParameterUpDown(this SharkAnimationFromRotationDelta __self, string value) => _parameterUpDown.Value.SetValue(__self, value);
		public static string GetParameterLeftRight(this SharkAnimationFromRotationDelta __self) => _parameterLeftRight.Value.GetValue(__self);
		public static void SetParameterLeftRight(this SharkAnimationFromRotationDelta __self, string value) => _parameterLeftRight.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<SharkAnimationFromRotationDelta>> _OnValidate757602046 =
				new System.Lazy<MethodAccessor<SharkAnimationFromRotationDelta>>(() => MethodAccessor<SharkAnimationFromRotationDelta>.Create("OnValidate"));
		private static readonly System.Lazy<MethodAccessor<SharkAnimationFromRotationDelta>> _LateUpdate757602046 =
				new System.Lazy<MethodAccessor<SharkAnimationFromRotationDelta>>(() => MethodAccessor<SharkAnimationFromRotationDelta>.Create("LateUpdate"));

		public static void OnValidate(this SharkAnimationFromRotationDelta __self) => _OnValidate757602046.Value.Invoke(__self);
		public static void LateUpdate(this SharkAnimationFromRotationDelta __self) => _LateUpdate757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AI_State_CirculateSpawn_Air_StoneBird
	{

		private static readonly System.Lazy<FieldAccessor<AI_State_CirculateSpawn_Air_StoneBird, AI_State_AirLand>> _landState =
				new System.Lazy<FieldAccessor<AI_State_CirculateSpawn_Air_StoneBird, AI_State_AirLand>>(() => FieldAccessor<AI_State_CirculateSpawn_Air_StoneBird, AI_State_AirLand>.Create("landState"));
		private static readonly System.Lazy<FieldAccessor<AI_State_CirculateSpawn_Air_StoneBird, AI_State_StoneBird_DropStone>> _dropStoneState =
				new System.Lazy<FieldAccessor<AI_State_CirculateSpawn_Air_StoneBird, AI_State_StoneBird_DropStone>>(() => FieldAccessor<AI_State_CirculateSpawn_Air_StoneBird, AI_State_StoneBird_DropStone>.Create("dropStoneState"));
		private static readonly System.Lazy<FieldAccessor<AI_State_CirculateSpawn_Air_StoneBird, AI_StateMachine_StoneBird>> _statemachineStoneBird =
				new System.Lazy<FieldAccessor<AI_State_CirculateSpawn_Air_StoneBird, AI_StateMachine_StoneBird>>(() => FieldAccessor<AI_State_CirculateSpawn_Air_StoneBird, AI_StateMachine_StoneBird>.Create("statemachineStoneBird"));

		public static AI_State_AirLand GetLandState(this AI_State_CirculateSpawn_Air_StoneBird __self) => _landState.Value.GetValue(__self);
		public static void SetLandState(this AI_State_CirculateSpawn_Air_StoneBird __self, AI_State_AirLand value) => _landState.Value.SetValue(__self, value);
		public static AI_State_StoneBird_DropStone GetDropStoneState(this AI_State_CirculateSpawn_Air_StoneBird __self) => _dropStoneState.Value.GetValue(__self);
		public static void SetDropStoneState(this AI_State_CirculateSpawn_Air_StoneBird __self, AI_State_StoneBird_DropStone value) => _dropStoneState.Value.SetValue(__self, value);
		public static AI_StateMachine_StoneBird GetStatemachineStoneBird(this AI_State_CirculateSpawn_Air_StoneBird __self) => _statemachineStoneBird.Value.GetValue(__self);
		public static void SetStatemachineStoneBird(this AI_State_CirculateSpawn_Air_StoneBird __self, AI_StateMachine_StoneBird value) => _statemachineStoneBird.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_State_CirculateSpawn_Air_StoneBird>> _Awake757602046 =
				new System.Lazy<MethodAccessor<AI_State_CirculateSpawn_Air_StoneBird>>(() => MethodAccessor<AI_State_CirculateSpawn_Air_StoneBird>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<AI_State_CirculateSpawn_Air_StoneBird>> _Start757602046 =
				new System.Lazy<MethodAccessor<AI_State_CirculateSpawn_Air_StoneBird>>(() => MethodAccessor<AI_State_CirculateSpawn_Air_StoneBird>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<AI_State_CirculateSpawn_Air_StoneBird>> _PlayerIsWithinRange757602046 =
				new System.Lazy<MethodAccessor<AI_State_CirculateSpawn_Air_StoneBird>>(() => MethodAccessor<AI_State_CirculateSpawn_Air_StoneBird>.Create("PlayerIsWithinRange"));
		private static readonly System.Lazy<MethodAccessor<AI_State_CirculateSpawn_Air_StoneBird>> _SwitchToDroppingStone757602046 =
				new System.Lazy<MethodAccessor<AI_State_CirculateSpawn_Air_StoneBird>>(() => MethodAccessor<AI_State_CirculateSpawn_Air_StoneBird>.Create("SwitchToDroppingStone"));
		private static readonly System.Lazy<MethodAccessor<AI_State_CirculateSpawn_Air_StoneBird>> _OnDamageTaken2475015728 =
				new System.Lazy<MethodAccessor<AI_State_CirculateSpawn_Air_StoneBird>>(() => MethodAccessor<AI_State_CirculateSpawn_Air_StoneBird>.Create("OnDamageTaken", typeof(float), typeof(UnityEngine.Vector3), typeof(UnityEngine.Vector3), typeof(EntityType)));

		public static void Awake(this AI_State_CirculateSpawn_Air_StoneBird __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this AI_State_CirculateSpawn_Air_StoneBird __self) => _Start757602046.Value.Invoke(__self);
		public static bool PlayerIsWithinRange(this AI_State_CirculateSpawn_Air_StoneBird __self) => (bool)_PlayerIsWithinRange757602046.Value.Invoke(__self);
		public static void SwitchToDroppingStone(this AI_State_CirculateSpawn_Air_StoneBird __self) => _SwitchToDroppingStone757602046.Value.Invoke(__self);
		public static void OnDamageTaken(this AI_State_CirculateSpawn_Air_StoneBird __self, float damage, UnityEngine.Vector3 hitPoint, UnityEngine.Vector3 hitNormal, EntityType damageType) => _OnDamageTaken2475015728.Value.Invoke(__self, damage, hitPoint, hitNormal, damageType);

	}

	public static class PrivateAccessor_AI_State_Dead_StoneBird
	{

		private static readonly System.Lazy<FieldAccessor<AI_State_Dead_StoneBird, AI_StateMachine_StoneBird>> _stateMachineStoneBird =
				new System.Lazy<FieldAccessor<AI_State_Dead_StoneBird, AI_StateMachine_StoneBird>>(() => FieldAccessor<AI_State_Dead_StoneBird, AI_StateMachine_StoneBird>.Create("stateMachineStoneBird"));

		public static AI_StateMachine_StoneBird GetStateMachineStoneBird(this AI_State_Dead_StoneBird __self) => _stateMachineStoneBird.Value.GetValue(__self);
		public static void SetStateMachineStoneBird(this AI_State_Dead_StoneBird __self, AI_StateMachine_StoneBird value) => _stateMachineStoneBird.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_State_Dead_StoneBird>> _Awake757602046 =
				new System.Lazy<MethodAccessor<AI_State_Dead_StoneBird>>(() => MethodAccessor<AI_State_Dead_StoneBird>.Create("Awake"));

		public static void Awake(this AI_State_Dead_StoneBird __self) => _Awake757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AI_State_Lift_StoneBird
	{

		private static readonly System.Lazy<FieldAccessor<AI_State_Lift_StoneBird, AI_State_StoneBird_DropStone>> _dropStoneState =
				new System.Lazy<FieldAccessor<AI_State_Lift_StoneBird, AI_State_StoneBird_DropStone>>(() => FieldAccessor<AI_State_Lift_StoneBird, AI_State_StoneBird_DropStone>.Create("dropStoneState"));
		private static readonly System.Lazy<FieldAccessor<AI_State_Lift_StoneBird, AI_StateMachine_StoneBird>> _stateMachineStoneBird =
				new System.Lazy<FieldAccessor<AI_State_Lift_StoneBird, AI_StateMachine_StoneBird>>(() => FieldAccessor<AI_State_Lift_StoneBird, AI_StateMachine_StoneBird>.Create("stateMachineStoneBird"));

		public static AI_State_StoneBird_DropStone GetDropStoneState(this AI_State_Lift_StoneBird __self) => _dropStoneState.Value.GetValue(__self);
		public static void SetDropStoneState(this AI_State_Lift_StoneBird __self, AI_State_StoneBird_DropStone value) => _dropStoneState.Value.SetValue(__self, value);
		public static AI_StateMachine_StoneBird GetStateMachineStoneBird(this AI_State_Lift_StoneBird __self) => _stateMachineStoneBird.Value.GetValue(__self);
		public static void SetStateMachineStoneBird(this AI_State_Lift_StoneBird __self, AI_StateMachine_StoneBird value) => _stateMachineStoneBird.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_State_Lift_StoneBird>> _Awake757602046 =
				new System.Lazy<MethodAccessor<AI_State_Lift_StoneBird>>(() => MethodAccessor<AI_State_Lift_StoneBird>.Create("Awake"));

		public static void Awake(this AI_State_Lift_StoneBird __self) => _Awake757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AI_State_StoneBird_DropStone
	{

		private static readonly System.Lazy<FieldAccessor<AI_State_StoneBird_DropStone, AI_State_CirculateSpawn_Air_StoneBird>> _circulateState =
				new System.Lazy<FieldAccessor<AI_State_StoneBird_DropStone, AI_State_CirculateSpawn_Air_StoneBird>>(() => FieldAccessor<AI_State_StoneBird_DropStone, AI_State_CirculateSpawn_Air_StoneBird>.Create("circulateState"));
		private static readonly System.Lazy<FieldAccessor<AI_State_StoneBird_DropStone, AI_Movement>> _movement =
				new System.Lazy<FieldAccessor<AI_State_StoneBird_DropStone, AI_Movement>>(() => FieldAccessor<AI_State_StoneBird_DropStone, AI_Movement>.Create("movement"));
		private static readonly System.Lazy<FieldAccessor<AI_State_StoneBird_DropStone, UnityEngine.Transform>> _stoneModel =
				new System.Lazy<FieldAccessor<AI_State_StoneBird_DropStone, UnityEngine.Transform>>(() => FieldAccessor<AI_State_StoneBird_DropStone, UnityEngine.Transform>.Create("stoneModel"));
		private static readonly System.Lazy<FieldAccessor<AI_State_StoneBird_DropStone, StoneDrop>> _stoneDropPrefab =
				new System.Lazy<FieldAccessor<AI_State_StoneBird_DropStone, StoneDrop>>(() => FieldAccessor<AI_State_StoneBird_DropStone, StoneDrop>.Create("stoneDropPrefab"));
		private static readonly System.Lazy<FieldAccessor<AI_State_StoneBird_DropStone, float>> _dropDistanceFromPlayer =
				new System.Lazy<FieldAccessor<AI_State_StoneBird_DropStone, float>>(() => FieldAccessor<AI_State_StoneBird_DropStone, float>.Create("dropDistanceFromPlayer"));
		private static readonly System.Lazy<FieldAccessor<AI_State_StoneBird_DropStone, float>> _dropForce =
				new System.Lazy<FieldAccessor<AI_State_StoneBird_DropStone, float>>(() => FieldAccessor<AI_State_StoneBird_DropStone, float>.Create("dropForce"));
		private static readonly System.Lazy<FieldAccessor<AI_State_StoneBird_DropStone, float>> _dropStoneCooldown =
				new System.Lazy<FieldAccessor<AI_State_StoneBird_DropStone, float>>(() => FieldAccessor<AI_State_StoneBird_DropStone, float>.Create("dropStoneCooldown"));
		private static readonly System.Lazy<FieldAccessor<AI_State_StoneBird_DropStone, float>> _dropStoneTimer =
				new System.Lazy<FieldAccessor<AI_State_StoneBird_DropStone, float>>(() => FieldAccessor<AI_State_StoneBird_DropStone, float>.Create("dropStoneTimer"));
		private static readonly System.Lazy<FieldAccessor<AI_State_StoneBird_DropStone, AI_StateMachine_StoneBird>> _stateMachineStoneBird =
				new System.Lazy<FieldAccessor<AI_State_StoneBird_DropStone, AI_StateMachine_StoneBird>>(() => FieldAccessor<AI_State_StoneBird_DropStone, AI_StateMachine_StoneBird>.Create("stateMachineStoneBird"));
		private static readonly System.Lazy<FieldAccessor<AI_State_StoneBird_DropStone, UnityEngine.Vector3>> _targetPoint =
				new System.Lazy<FieldAccessor<AI_State_StoneBird_DropStone, UnityEngine.Vector3>>(() => FieldAccessor<AI_State_StoneBird_DropStone, UnityEngine.Vector3>.Create("targetPoint"));

		public static AI_State_CirculateSpawn_Air_StoneBird GetCirculateState(this AI_State_StoneBird_DropStone __self) => _circulateState.Value.GetValue(__self);
		public static void SetCirculateState(this AI_State_StoneBird_DropStone __self, AI_State_CirculateSpawn_Air_StoneBird value) => _circulateState.Value.SetValue(__self, value);
		public static AI_Movement GetMovement(this AI_State_StoneBird_DropStone __self) => _movement.Value.GetValue(__self);
		public static void SetMovement(this AI_State_StoneBird_DropStone __self, AI_Movement value) => _movement.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetStoneModel(this AI_State_StoneBird_DropStone __self) => _stoneModel.Value.GetValue(__self);
		public static void SetStoneModel(this AI_State_StoneBird_DropStone __self, UnityEngine.Transform value) => _stoneModel.Value.SetValue(__self, value);
		public static StoneDrop GetStoneDropPrefab(this AI_State_StoneBird_DropStone __self) => _stoneDropPrefab.Value.GetValue(__self);
		public static void SetStoneDropPrefab(this AI_State_StoneBird_DropStone __self, StoneDrop value) => _stoneDropPrefab.Value.SetValue(__self, value);
		public static float GetDropDistanceFromPlayer(this AI_State_StoneBird_DropStone __self) => _dropDistanceFromPlayer.Value.GetValue(__self);
		public static void SetDropDistanceFromPlayer(this AI_State_StoneBird_DropStone __self, float value) => _dropDistanceFromPlayer.Value.SetValue(__self, value);
		public static float GetDropForce(this AI_State_StoneBird_DropStone __self) => _dropForce.Value.GetValue(__self);
		public static void SetDropForce(this AI_State_StoneBird_DropStone __self, float value) => _dropForce.Value.SetValue(__self, value);
		public static float GetDropStoneCooldown(this AI_State_StoneBird_DropStone __self) => _dropStoneCooldown.Value.GetValue(__self);
		public static void SetDropStoneCooldown(this AI_State_StoneBird_DropStone __self, float value) => _dropStoneCooldown.Value.SetValue(__self, value);
		public static float GetDropStoneTimer(this AI_State_StoneBird_DropStone __self) => _dropStoneTimer.Value.GetValue(__self);
		public static void SetDropStoneTimer(this AI_State_StoneBird_DropStone __self, float value) => _dropStoneTimer.Value.SetValue(__self, value);
		public static AI_StateMachine_StoneBird GetStateMachineStoneBird(this AI_State_StoneBird_DropStone __self) => _stateMachineStoneBird.Value.GetValue(__self);
		public static void SetStateMachineStoneBird(this AI_State_StoneBird_DropStone __self, AI_StateMachine_StoneBird value) => _stateMachineStoneBird.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetTargetPoint(this AI_State_StoneBird_DropStone __self) => _targetPoint.Value.GetValue(__self);
		public static void SetTargetPoint(this AI_State_StoneBird_DropStone __self, UnityEngine.Vector3 value) => _targetPoint.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_State_StoneBird_DropStone>> _Awake757602046 =
				new System.Lazy<MethodAccessor<AI_State_StoneBird_DropStone>>(() => MethodAccessor<AI_State_StoneBird_DropStone>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<AI_State_StoneBird_DropStone>> _OnDrawGizmos757602046 =
				new System.Lazy<MethodAccessor<AI_State_StoneBird_DropStone>>(() => MethodAccessor<AI_State_StoneBird_DropStone>.Create("OnDrawGizmos"));
		private static readonly System.Lazy<MethodAccessor<AI_State_StoneBird_DropStone>> _Update757602046 =
				new System.Lazy<MethodAccessor<AI_State_StoneBird_DropStone>>(() => MethodAccessor<AI_State_StoneBird_DropStone>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<AI_State_StoneBird_DropStone>> _HasValidTarget757602046 =
				new System.Lazy<MethodAccessor<AI_State_StoneBird_DropStone>>(() => MethodAccessor<AI_State_StoneBird_DropStone>.Create("HasValidTarget"));

		public static void Awake(this AI_State_StoneBird_DropStone __self) => _Awake757602046.Value.Invoke(__self);
		public static void OnDrawGizmos(this AI_State_StoneBird_DropStone __self) => _OnDrawGizmos757602046.Value.Invoke(__self);
		public static void Update(this AI_State_StoneBird_DropStone __self) => _Update757602046.Value.Invoke(__self);
		public static bool HasValidTarget(this AI_State_StoneBird_DropStone __self) => (bool)_HasValidTarget757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AI_State_StoneBird_GrabStone
	{

		private static readonly System.Lazy<FieldAccessor<AI_State_StoneBird_GrabStone, AI_State>> _nextState =
				new System.Lazy<FieldAccessor<AI_State_StoneBird_GrabStone, AI_State>>(() => FieldAccessor<AI_State_StoneBird_GrabStone, AI_State>.Create("nextState"));
		private static readonly System.Lazy<FieldAccessor<AI_State_StoneBird_GrabStone, float>> _grabStoneTime =
				new System.Lazy<FieldAccessor<AI_State_StoneBird_GrabStone, float>>(() => FieldAccessor<AI_State_StoneBird_GrabStone, float>.Create("grabStoneTime"));
		private static readonly System.Lazy<FieldAccessor<AI_State_StoneBird_GrabStone, float>> _liftOffDelay =
				new System.Lazy<FieldAccessor<AI_State_StoneBird_GrabStone, float>>(() => FieldAccessor<AI_State_StoneBird_GrabStone, float>.Create("liftOffDelay"));
		private static readonly System.Lazy<FieldAccessor<AI_State_StoneBird_GrabStone, string>> _eventref_pullStoneFinish =
				new System.Lazy<FieldAccessor<AI_State_StoneBird_GrabStone, string>>(() => FieldAccessor<AI_State_StoneBird_GrabStone, string>.Create("eventref_pullStoneFinish"));
		private static readonly System.Lazy<FieldAccessor<AI_State_StoneBird_GrabStone, string>> _eventref_pullStone =
				new System.Lazy<FieldAccessor<AI_State_StoneBird_GrabStone, string>>(() => FieldAccessor<AI_State_StoneBird_GrabStone, string>.Create("eventref_pullStone"));
		private static readonly System.Lazy<FieldAccessor<AI_State_StoneBird_GrabStone, float>> _pullStoneSoundInterval =
				new System.Lazy<FieldAccessor<AI_State_StoneBird_GrabStone, float>>(() => FieldAccessor<AI_State_StoneBird_GrabStone, float>.Create("pullStoneSoundInterval"));
		private static readonly System.Lazy<FieldAccessor<AI_State_StoneBird_GrabStone, float>> _pullStoneSoundTimer =
				new System.Lazy<FieldAccessor<AI_State_StoneBird_GrabStone, float>>(() => FieldAccessor<AI_State_StoneBird_GrabStone, float>.Create("pullStoneSoundTimer"));
		private static readonly System.Lazy<FieldAccessor<AI_State_StoneBird_GrabStone, AI_StateMachine_StoneBird>> _stateMachineStoneBird =
				new System.Lazy<FieldAccessor<AI_State_StoneBird_GrabStone, AI_StateMachine_StoneBird>>(() => FieldAccessor<AI_State_StoneBird_GrabStone, AI_StateMachine_StoneBird>.Create("stateMachineStoneBird"));
		private static readonly System.Lazy<FieldAccessor<AI_State_StoneBird_GrabStone, UnityEngine.Coroutine>> _lifeStoneRutine =
				new System.Lazy<FieldAccessor<AI_State_StoneBird_GrabStone, UnityEngine.Coroutine>>(() => FieldAccessor<AI_State_StoneBird_GrabStone, UnityEngine.Coroutine>.Create("lifeStoneRutine"));

		public static AI_State GetNextState(this AI_State_StoneBird_GrabStone __self) => _nextState.Value.GetValue(__self);
		public static void SetNextState(this AI_State_StoneBird_GrabStone __self, AI_State value) => _nextState.Value.SetValue(__self, value);
		public static float GetGrabStoneTime(this AI_State_StoneBird_GrabStone __self) => _grabStoneTime.Value.GetValue(__self);
		public static void SetGrabStoneTime(this AI_State_StoneBird_GrabStone __self, float value) => _grabStoneTime.Value.SetValue(__self, value);
		public static float GetLiftOffDelay(this AI_State_StoneBird_GrabStone __self) => _liftOffDelay.Value.GetValue(__self);
		public static void SetLiftOffDelay(this AI_State_StoneBird_GrabStone __self, float value) => _liftOffDelay.Value.SetValue(__self, value);
		public static string GetEventref_pullStoneFinish(this AI_State_StoneBird_GrabStone __self) => _eventref_pullStoneFinish.Value.GetValue(__self);
		public static void SetEventref_pullStoneFinish(this AI_State_StoneBird_GrabStone __self, string value) => _eventref_pullStoneFinish.Value.SetValue(__self, value);
		public static string GetEventref_pullStone(this AI_State_StoneBird_GrabStone __self) => _eventref_pullStone.Value.GetValue(__self);
		public static void SetEventref_pullStone(this AI_State_StoneBird_GrabStone __self, string value) => _eventref_pullStone.Value.SetValue(__self, value);
		public static float GetPullStoneSoundInterval(this AI_State_StoneBird_GrabStone __self) => _pullStoneSoundInterval.Value.GetValue(__self);
		public static void SetPullStoneSoundInterval(this AI_State_StoneBird_GrabStone __self, float value) => _pullStoneSoundInterval.Value.SetValue(__self, value);
		public static float GetPullStoneSoundTimer(this AI_State_StoneBird_GrabStone __self) => _pullStoneSoundTimer.Value.GetValue(__self);
		public static void SetPullStoneSoundTimer(this AI_State_StoneBird_GrabStone __self, float value) => _pullStoneSoundTimer.Value.SetValue(__self, value);
		public static AI_StateMachine_StoneBird GetStateMachineStoneBird(this AI_State_StoneBird_GrabStone __self) => _stateMachineStoneBird.Value.GetValue(__self);
		public static void SetStateMachineStoneBird(this AI_State_StoneBird_GrabStone __self, AI_StateMachine_StoneBird value) => _stateMachineStoneBird.Value.SetValue(__self, value);
		public static UnityEngine.Coroutine GetLifeStoneRutine(this AI_State_StoneBird_GrabStone __self) => _lifeStoneRutine.Value.GetValue(__self);
		public static void SetLifeStoneRutine(this AI_State_StoneBird_GrabStone __self, UnityEngine.Coroutine value) => _lifeStoneRutine.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_State_StoneBird_GrabStone>> _Awake757602046 =
				new System.Lazy<MethodAccessor<AI_State_StoneBird_GrabStone>>(() => MethodAccessor<AI_State_StoneBird_GrabStone>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<AI_State_StoneBird_GrabStone>> _GrabStone3486905475 =
				new System.Lazy<MethodAccessor<AI_State_StoneBird_GrabStone>>(() => MethodAccessor<AI_State_StoneBird_GrabStone>.Create("GrabStone", typeof(float)));

		public static void Awake(this AI_State_StoneBird_GrabStone __self) => _Awake757602046.Value.Invoke(__self);
		public static System.Collections.IEnumerator GrabStone(this AI_State_StoneBird_GrabStone __self, float timeDelay) => (System.Collections.IEnumerator)_GrabStone3486905475.Value.Invoke(__self, timeDelay);

	}

	public static class PrivateAccessor_StoneDrop
	{

		private static readonly System.Lazy<FieldAccessor<StoneDrop, UnityEngine.LayerMask>> _collisionMask =
				new System.Lazy<FieldAccessor<StoneDrop, UnityEngine.LayerMask>>(() => FieldAccessor<StoneDrop, UnityEngine.LayerMask>.Create("collisionMask"));
		private static readonly System.Lazy<FieldAccessor<StoneDrop, UnityEngine.LayerMask>> _obstuctionMask =
				new System.Lazy<FieldAccessor<StoneDrop, UnityEngine.LayerMask>>(() => FieldAccessor<StoneDrop, UnityEngine.LayerMask>.Create("obstuctionMask"));
		private static readonly System.Lazy<FieldAccessor<StoneDrop, float>> _damage =
				new System.Lazy<FieldAccessor<StoneDrop, float>>(() => FieldAccessor<StoneDrop, float>.Create("damage"));
		private static readonly System.Lazy<FieldAccessor<StoneDrop, float>> _aoeRange =
				new System.Lazy<FieldAccessor<StoneDrop, float>>(() => FieldAccessor<StoneDrop, float>.Create("aoeRange"));
		private static readonly System.Lazy<FieldAccessor<StoneDrop, float>> _minYDistanceToDmg =
				new System.Lazy<FieldAccessor<StoneDrop, float>>(() => FieldAccessor<StoneDrop, float>.Create("minYDistanceToDmg"));
		private static readonly System.Lazy<FieldAccessor<StoneDrop, string>> _eventref_hitGround =
				new System.Lazy<FieldAccessor<StoneDrop, string>>(() => FieldAccessor<StoneDrop, string>.Create("eventref_hitGround"));
		private static readonly System.Lazy<FieldAccessor<StoneDrop, string>> _eventref_hitPlayer =
				new System.Lazy<FieldAccessor<StoneDrop, string>>(() => FieldAccessor<StoneDrop, string>.Create("eventref_hitPlayer"));
		private static readonly System.Lazy<FieldAccessor<StoneDrop, FMODUnity.StudioEventEmitter>> _eventEmitter_fallSound =
				new System.Lazy<FieldAccessor<StoneDrop, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<StoneDrop, FMODUnity.StudioEventEmitter>.Create("eventEmitter_fallSound"));
		private static readonly System.Lazy<FieldAccessor<StoneDrop, Network_Host>> _network_Host =
				new System.Lazy<FieldAccessor<StoneDrop, Network_Host>>(() => FieldAccessor<StoneDrop, Network_Host>.Create("network_Host"));
		private static readonly System.Lazy<FieldAccessor<StoneDrop, bool>> _hasProccedAoe =
				new System.Lazy<FieldAccessor<StoneDrop, bool>>(() => FieldAccessor<StoneDrop, bool>.Create("hasProccedAoe"));

		public static UnityEngine.LayerMask GetCollisionMask(this StoneDrop __self) => _collisionMask.Value.GetValue(__self);
		public static void SetCollisionMask(this StoneDrop __self, UnityEngine.LayerMask value) => _collisionMask.Value.SetValue(__self, value);
		public static UnityEngine.LayerMask GetObstuctionMask(this StoneDrop __self) => _obstuctionMask.Value.GetValue(__self);
		public static void SetObstuctionMask(this StoneDrop __self, UnityEngine.LayerMask value) => _obstuctionMask.Value.SetValue(__self, value);
		public static float GetDamage(this StoneDrop __self) => _damage.Value.GetValue(__self);
		public static void SetDamage(this StoneDrop __self, float value) => _damage.Value.SetValue(__self, value);
		public static float GetAoeRange(this StoneDrop __self) => _aoeRange.Value.GetValue(__self);
		public static void SetAoeRange(this StoneDrop __self, float value) => _aoeRange.Value.SetValue(__self, value);
		public static float GetMinYDistanceToDmg(this StoneDrop __self) => _minYDistanceToDmg.Value.GetValue(__self);
		public static void SetMinYDistanceToDmg(this StoneDrop __self, float value) => _minYDistanceToDmg.Value.SetValue(__self, value);
		public static string GetEventref_hitGround(this StoneDrop __self) => _eventref_hitGround.Value.GetValue(__self);
		public static void SetEventref_hitGround(this StoneDrop __self, string value) => _eventref_hitGround.Value.SetValue(__self, value);
		public static string GetEventref_hitPlayer(this StoneDrop __self) => _eventref_hitPlayer.Value.GetValue(__self);
		public static void SetEventref_hitPlayer(this StoneDrop __self, string value) => _eventref_hitPlayer.Value.SetValue(__self, value);
		public static FMODUnity.StudioEventEmitter GetEventEmitter_fallSound(this StoneDrop __self) => _eventEmitter_fallSound.Value.GetValue(__self);
		public static void SetEventEmitter_fallSound(this StoneDrop __self, FMODUnity.StudioEventEmitter value) => _eventEmitter_fallSound.Value.SetValue(__self, value);
		public static Network_Host GetNetwork_Host(this StoneDrop __self) => _network_Host.Value.GetValue(__self);
		public static void SetNetwork_Host(this StoneDrop __self, Network_Host value) => _network_Host.Value.SetValue(__self, value);
		public static bool GetHasProccedAoe(this StoneDrop __self) => _hasProccedAoe.Value.GetValue(__self);
		public static void SetHasProccedAoe(this StoneDrop __self, bool value) => _hasProccedAoe.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<StoneDrop>> _Start757602046 =
				new System.Lazy<MethodAccessor<StoneDrop>>(() => MethodAccessor<StoneDrop>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<StoneDrop>> _Update757602046 =
				new System.Lazy<MethodAccessor<StoneDrop>>(() => MethodAccessor<StoneDrop>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<StoneDrop>> _OnCollisionEnter3430762572 =
				new System.Lazy<MethodAccessor<StoneDrop>>(() => MethodAccessor<StoneDrop>.Create("OnCollisionEnter", typeof(UnityEngine.Collision)));
		private static readonly System.Lazy<MethodAccessor<StoneDrop>> _DamageAOE3429126434 =
				new System.Lazy<MethodAccessor<StoneDrop>>(() => MethodAccessor<StoneDrop>.Create("DamageAOE", typeof(UnityEngine.Vector3)));
		private static readonly System.Lazy<MethodAccessor<StoneDrop>> _DamagePlayer3131599220 =
				new System.Lazy<MethodAccessor<StoneDrop>>(() => MethodAccessor<StoneDrop>.Create("DamagePlayer", typeof(Network_Player), typeof(UnityEngine.Transform)));

		public static void Start(this StoneDrop __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this StoneDrop __self) => _Update757602046.Value.Invoke(__self);
		public static void OnCollisionEnter(this StoneDrop __self, UnityEngine.Collision collision) => _OnCollisionEnter3430762572.Value.Invoke(__self, collision);
		public static void DamageAOE(this StoneDrop __self, UnityEngine.Vector3 centerPoint) => _DamageAOE3429126434.Value.Invoke(__self, centerPoint);
		public static void DamagePlayer(this StoneDrop __self, Network_Player player, UnityEngine.Transform hitTransform) => _DamagePlayer3131599220.Value.Invoke(__self, player, hitTransform);

	}

	public static class PrivateAccessor_AI_StateMachine
	{

		private static readonly System.Lazy<FieldAccessor<AI_StateMachine, AI_State>> _startState =
				new System.Lazy<FieldAccessor<AI_StateMachine, AI_State>>(() => FieldAccessor<AI_StateMachine, AI_State>.Create("startState"));

		public static AI_State GetStartState(this AI_StateMachine __self) => _startState.Value.GetValue(__self);
		public static void SetStartState(this AI_StateMachine __self, AI_State value) => _startState.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_StateMachine>> _LateStart757602046 =
				new System.Lazy<MethodAccessor<AI_StateMachine>>(() => MethodAccessor<AI_StateMachine>.Create("LateStart"));
		private static readonly System.Lazy<MethodAccessor<AI_StateMachine>> _UpdateStateMachine757602046 =
				new System.Lazy<MethodAccessor<AI_StateMachine>>(() => MethodAccessor<AI_StateMachine>.Create("UpdateStateMachine"));
		private static readonly System.Lazy<MethodAccessor<AI_StateMachine>> _OnWorldShift3429126434 =
				new System.Lazy<MethodAccessor<AI_StateMachine>>(() => MethodAccessor<AI_StateMachine>.Create("OnWorldShift", typeof(UnityEngine.Vector3)));
		private static readonly System.Lazy<MethodAccessor<AI_StateMachine>> _LateShift757602046 =
				new System.Lazy<MethodAccessor<AI_StateMachine>>(() => MethodAccessor<AI_StateMachine>.Create("LateShift"));

		public static void LateStart(this AI_StateMachine __self) => _LateStart757602046.Value.Invoke(__self);
		public static void UpdateStateMachine(this AI_StateMachine __self) => _UpdateStateMachine757602046.Value.Invoke(__self);
		public static void OnWorldShift(this AI_StateMachine __self, UnityEngine.Vector3 shift) => _OnWorldShift3429126434.Value.Invoke(__self, shift);
		public static void LateShift(this AI_StateMachine __self) => _LateShift757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AI_StateMachine_AnglerFish
	{

		private static readonly System.Lazy<FieldAccessor<AI_StateMachine_AnglerFish, UnityEngine.MaterialPropertyBlock>> _emissionBlock =
				new System.Lazy<FieldAccessor<AI_StateMachine_AnglerFish, UnityEngine.MaterialPropertyBlock>>(() => FieldAccessor<AI_StateMachine_AnglerFish, UnityEngine.MaterialPropertyBlock>.Create("emissionBlock"));
		private static readonly System.Lazy<FieldAccessor<AI_StateMachine_AnglerFish, UnityEngine.Coroutine>> _routine_emission =
				new System.Lazy<FieldAccessor<AI_StateMachine_AnglerFish, UnityEngine.Coroutine>>(() => FieldAccessor<AI_StateMachine_AnglerFish, UnityEngine.Coroutine>.Create("routine_emission"));

		public static UnityEngine.MaterialPropertyBlock GetEmissionBlock(this AI_StateMachine_AnglerFish __self) => _emissionBlock.Value.GetValue(__self);
		public static void SetEmissionBlock(this AI_StateMachine_AnglerFish __self, UnityEngine.MaterialPropertyBlock value) => _emissionBlock.Value.SetValue(__self, value);
		public static UnityEngine.Coroutine GetRoutine_emission(this AI_StateMachine_AnglerFish __self) => _routine_emission.Value.GetValue(__self);
		public static void SetRoutine_emission(this AI_StateMachine_AnglerFish __self, UnityEngine.Coroutine value) => _routine_emission.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_StateMachine_AnglerFish>> _OnDamageTaken2475015728 =
				new System.Lazy<MethodAccessor<AI_StateMachine_AnglerFish>>(() => MethodAccessor<AI_StateMachine_AnglerFish>.Create("OnDamageTaken", typeof(float), typeof(UnityEngine.Vector3), typeof(UnityEngine.Vector3), typeof(EntityType)));
		private static readonly System.Lazy<MethodAccessor<AI_StateMachine_AnglerFish>> _MatchMaterialIntensityToLightRange3486905475 =
				new System.Lazy<MethodAccessor<AI_StateMachine_AnglerFish>>(() => MethodAccessor<AI_StateMachine_AnglerFish>.Create("MatchMaterialIntensityToLightRange", typeof(float)));
		private static readonly System.Lazy<MethodAccessor<AI_StateMachine_AnglerFish>> _ResetLight757602046 =
				new System.Lazy<MethodAccessor<AI_StateMachine_AnglerFish>>(() => MethodAccessor<AI_StateMachine_AnglerFish>.Create("ResetLight"));

		public static void OnDamageTaken(this AI_StateMachine_AnglerFish __self, float damage, UnityEngine.Vector3 hitPoint, UnityEngine.Vector3 hitNormal, EntityType damageType) => _OnDamageTaken2475015728.Value.Invoke(__self, damage, hitPoint, hitNormal, damageType);
		public static System.Collections.IEnumerator MatchMaterialIntensityToLightRange(this AI_StateMachine_AnglerFish __self, float time) => (System.Collections.IEnumerator)_MatchMaterialIntensityToLightRange3486905475.Value.Invoke(__self, time);
		public static void ResetLight(this AI_StateMachine_AnglerFish __self) => _ResetLight757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AI_StateMachine_Animal
	{

		private static readonly System.Lazy<FieldAccessor<AI_StateMachine_Animal, UnityEngine.Transform>> _takeDamageParticleParent =
				new System.Lazy<FieldAccessor<AI_StateMachine_Animal, UnityEngine.Transform>>(() => FieldAccessor<AI_StateMachine_Animal, UnityEngine.Transform>.Create("takeDamageParticleParent"));
		private static readonly System.Lazy<FieldAccessor<AI_StateMachine_Animal, string>> _takeDamageParticleName =
				new System.Lazy<FieldAccessor<AI_StateMachine_Animal, string>>(() => FieldAccessor<AI_StateMachine_Animal, string>.Create("takeDamageParticleName"));
		private static readonly System.Lazy<FieldAccessor<AI_StateMachine_Animal, string>> _deflectDamageParticleName =
				new System.Lazy<FieldAccessor<AI_StateMachine_Animal, string>>(() => FieldAccessor<AI_StateMachine_Animal, string>.Create("deflectDamageParticleName"));
		private static readonly System.Lazy<FieldAccessor<AI_StateMachine_Animal, string>> _eventRef_idle =
				new System.Lazy<FieldAccessor<AI_StateMachine_Animal, string>>(() => FieldAccessor<AI_StateMachine_Animal, string>.Create("eventRef_idle"));
		private static readonly System.Lazy<FieldAccessor<AI_StateMachine_Animal, string>> _eventRef_die =
				new System.Lazy<FieldAccessor<AI_StateMachine_Animal, string>>(() => FieldAccessor<AI_StateMachine_Animal, string>.Create("eventRef_die"));
		private static readonly System.Lazy<FieldAccessor<AI_StateMachine_Animal, string>> _eventRef_takeDamage =
				new System.Lazy<FieldAccessor<AI_StateMachine_Animal, string>>(() => FieldAccessor<AI_StateMachine_Animal, string>.Create("eventRef_takeDamage"));
		private static readonly System.Lazy<FieldAccessor<AI_StateMachine_Animal, string>> _eventRef_deflectDamage =
				new System.Lazy<FieldAccessor<AI_StateMachine_Animal, string>>(() => FieldAccessor<AI_StateMachine_Animal, string>.Create("eventRef_deflectDamage"));
		private static readonly System.Lazy<FieldAccessor<AI_StateMachine_Animal, bool>> _playDamageFromAnimation =
				new System.Lazy<FieldAccessor<AI_StateMachine_Animal, bool>>(() => FieldAccessor<AI_StateMachine_Animal, bool>.Create("playDamageFromAnimation"));
		private static readonly System.Lazy<FieldAccessor<AI_StateMachine_Animal, AnimatorStorage>> _animatorStorage =
				new System.Lazy<FieldAccessor<AI_StateMachine_Animal, AnimatorStorage>>(() => FieldAccessor<AI_StateMachine_Animal, AnimatorStorage>.Create("animatorStorage"));

		public static UnityEngine.Transform GetTakeDamageParticleParent(this AI_StateMachine_Animal __self) => _takeDamageParticleParent.Value.GetValue(__self);
		public static void SetTakeDamageParticleParent(this AI_StateMachine_Animal __self, UnityEngine.Transform value) => _takeDamageParticleParent.Value.SetValue(__self, value);
		public static string GetTakeDamageParticleName(this AI_StateMachine_Animal __self) => _takeDamageParticleName.Value.GetValue(__self);
		public static void SetTakeDamageParticleName(this AI_StateMachine_Animal __self, string value) => _takeDamageParticleName.Value.SetValue(__self, value);
		public static string GetDeflectDamageParticleName(this AI_StateMachine_Animal __self) => _deflectDamageParticleName.Value.GetValue(__self);
		public static void SetDeflectDamageParticleName(this AI_StateMachine_Animal __self, string value) => _deflectDamageParticleName.Value.SetValue(__self, value);
		public static string GetEventRef_idle(this AI_StateMachine_Animal __self) => _eventRef_idle.Value.GetValue(__self);
		public static void SetEventRef_idle(this AI_StateMachine_Animal __self, string value) => _eventRef_idle.Value.SetValue(__self, value);
		public static string GetEventRef_die(this AI_StateMachine_Animal __self) => _eventRef_die.Value.GetValue(__self);
		public static void SetEventRef_die(this AI_StateMachine_Animal __self, string value) => _eventRef_die.Value.SetValue(__self, value);
		public static string GetEventRef_takeDamage(this AI_StateMachine_Animal __self) => _eventRef_takeDamage.Value.GetValue(__self);
		public static void SetEventRef_takeDamage(this AI_StateMachine_Animal __self, string value) => _eventRef_takeDamage.Value.SetValue(__self, value);
		public static string GetEventRef_deflectDamage(this AI_StateMachine_Animal __self) => _eventRef_deflectDamage.Value.GetValue(__self);
		public static void SetEventRef_deflectDamage(this AI_StateMachine_Animal __self, string value) => _eventRef_deflectDamage.Value.SetValue(__self, value);
		public static bool GetPlayDamageFromAnimation(this AI_StateMachine_Animal __self) => _playDamageFromAnimation.Value.GetValue(__self);
		public static void SetPlayDamageFromAnimation(this AI_StateMachine_Animal __self, bool value) => _playDamageFromAnimation.Value.SetValue(__self, value);
		public static AnimatorStorage GetAnimatorStorage(this AI_StateMachine_Animal __self) => _animatorStorage.Value.GetValue(__self);
		public static void SetAnimatorStorage(this AI_StateMachine_Animal __self, AnimatorStorage value) => _animatorStorage.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_StateMachine_Animal>> _OnEnable757602046 =
				new System.Lazy<MethodAccessor<AI_StateMachine_Animal>>(() => MethodAccessor<AI_StateMachine_Animal>.Create("OnEnable"));
		private static readonly System.Lazy<MethodAccessor<AI_StateMachine_Animal>> _OnDisable757602046 =
				new System.Lazy<MethodAccessor<AI_StateMachine_Animal>>(() => MethodAccessor<AI_StateMachine_Animal>.Create("OnDisable"));
		private static readonly System.Lazy<MethodAccessor<AI_StateMachine_Animal>> _UpdateStateMachine757602046 =
				new System.Lazy<MethodAccessor<AI_StateMachine_Animal>>(() => MethodAccessor<AI_StateMachine_Animal>.Create("UpdateStateMachine"));
		private static readonly System.Lazy<MethodAccessor<AI_StateMachine_Animal>> _OnPickedUp757602046 =
				new System.Lazy<MethodAccessor<AI_StateMachine_Animal>>(() => MethodAccessor<AI_StateMachine_Animal>.Create("OnPickedUp"));
		private static readonly System.Lazy<MethodAccessor<AI_StateMachine_Animal>> _OnDamageTaken2475015728 =
				new System.Lazy<MethodAccessor<AI_StateMachine_Animal>>(() => MethodAccessor<AI_StateMachine_Animal>.Create("OnDamageTaken", typeof(float), typeof(UnityEngine.Vector3), typeof(UnityEngine.Vector3), typeof(EntityType)));
		private static readonly System.Lazy<MethodAccessor<AI_StateMachine_Animal>> _ShouldAddAchievementProgressOnDeath3478926235 =
				new System.Lazy<MethodAccessor<AI_StateMachine_Animal>>(() => MethodAccessor<AI_StateMachine_Animal>.Create("ShouldAddAchievementProgressOnDeath", typeof(EntityType)));
		private static readonly System.Lazy<MethodAccessor<AI_StateMachine_Animal>> _EnablePickup757602046 =
				new System.Lazy<MethodAccessor<AI_StateMachine_Animal>>(() => MethodAccessor<AI_StateMachine_Animal>.Create("EnablePickup"));
		private static readonly System.Lazy<MethodAccessor<AI_StateMachine_Animal>> _Animation_Footstep757602046 =
				new System.Lazy<MethodAccessor<AI_StateMachine_Animal>>(() => MethodAccessor<AI_StateMachine_Animal>.Create("Animation_Footstep"));
		private static readonly System.Lazy<MethodAccessor<AI_StateMachine_Animal>> _Animation_Damage3486905475 =
				new System.Lazy<MethodAccessor<AI_StateMachine_Animal>>(() => MethodAccessor<AI_StateMachine_Animal>.Create("Animation_Damage", typeof(float)));
		private static readonly System.Lazy<MethodAccessor<AI_StateMachine_Animal>> _Animation_IdleSound3486905475 =
				new System.Lazy<MethodAccessor<AI_StateMachine_Animal>>(() => MethodAccessor<AI_StateMachine_Animal>.Create("Animation_IdleSound", typeof(float)));
		private static readonly System.Lazy<MethodAccessor<AI_StateMachine_Animal>> _OnDeath3478926235 =
				new System.Lazy<MethodAccessor<AI_StateMachine_Animal>>(() => MethodAccessor<AI_StateMachine_Animal>.Create("OnDeath", typeof(EntityType)));
		private static readonly System.Lazy<MethodAccessor<AI_StateMachine_Animal>> _OnSwitchDamageTakenState757602046 =
				new System.Lazy<MethodAccessor<AI_StateMachine_Animal>>(() => MethodAccessor<AI_StateMachine_Animal>.Create("OnSwitchDamageTakenState"));
		private static readonly System.Lazy<MethodAccessor<AI_StateMachine_Animal>> _OnWorldShift3429126434 =
				new System.Lazy<MethodAccessor<AI_StateMachine_Animal>>(() => MethodAccessor<AI_StateMachine_Animal>.Create("OnWorldShift", typeof(UnityEngine.Vector3)));

		public static void OnEnable(this AI_StateMachine_Animal __self) => _OnEnable757602046.Value.Invoke(__self);
		public static void OnDisable(this AI_StateMachine_Animal __self) => _OnDisable757602046.Value.Invoke(__self);
		public static void UpdateStateMachine(this AI_StateMachine_Animal __self) => _UpdateStateMachine757602046.Value.Invoke(__self);
		public static void OnPickedUp(this AI_StateMachine_Animal __self) => _OnPickedUp757602046.Value.Invoke(__self);
		public static void OnDamageTaken(this AI_StateMachine_Animal __self, float damage, UnityEngine.Vector3 hitPoint, UnityEngine.Vector3 hitNormal, EntityType damageType) => _OnDamageTaken2475015728.Value.Invoke(__self, damage, hitPoint, hitNormal, damageType);
		public static bool ShouldAddAchievementProgressOnDeath(this AI_StateMachine_Animal __self, EntityType dmgDealerEntityType) => (bool)_ShouldAddAchievementProgressOnDeath3478926235.Value.Invoke(__self, dmgDealerEntityType);
		public static void EnablePickup(this AI_StateMachine_Animal __self) => _EnablePickup757602046.Value.Invoke(__self);
		public static void Animation_Footstep(this AI_StateMachine_Animal __self) => _Animation_Footstep757602046.Value.Invoke(__self);
		public static void Animation_Damage(this AI_StateMachine_Animal __self, float damage) => _Animation_Damage3486905475.Value.Invoke(__self, damage);
		public static void Animation_IdleSound(this AI_StateMachine_Animal __self, float chance) => _Animation_IdleSound3486905475.Value.Invoke(__self, chance);
		public static void OnDeath(this AI_StateMachine_Animal __self, EntityType damageType) => _OnDeath3478926235.Value.Invoke(__self, damageType);
		public static void OnSwitchDamageTakenState(this AI_StateMachine_Animal __self) => _OnSwitchDamageTakenState757602046.Value.Invoke(__self);
		public static void OnWorldShift(this AI_StateMachine_Animal __self, UnityEngine.Vector3 shift) => _OnWorldShift3429126434.Value.Invoke(__self, shift);

	}

	public static class PrivateAccessor_AI_StateMachine_Bear
	{

		private static readonly System.Lazy<MethodAccessor<AI_StateMachine_Bear>> _Animation_Footstep757602046 =
				new System.Lazy<MethodAccessor<AI_StateMachine_Bear>>(() => MethodAccessor<AI_StateMachine_Bear>.Create("Animation_Footstep"));
		private static readonly System.Lazy<MethodAccessor<AI_StateMachine_Bear>> _OnDamageTaken2475015728 =
				new System.Lazy<MethodAccessor<AI_StateMachine_Bear>>(() => MethodAccessor<AI_StateMachine_Bear>.Create("OnDamageTaken", typeof(float), typeof(UnityEngine.Vector3), typeof(UnityEngine.Vector3), typeof(EntityType)));

		public static void Animation_Footstep(this AI_StateMachine_Bear __self) => _Animation_Footstep757602046.Value.Invoke(__self);
		public static void OnDamageTaken(this AI_StateMachine_Bear __self, float damage, UnityEngine.Vector3 hitPoint, UnityEngine.Vector3 hitNormal, EntityType damageType) => _OnDamageTaken2475015728.Value.Invoke(__self, damage, hitPoint, hitNormal, damageType);

	}

	public static class PrivateAccessor_AI_StateMachine_Boar
	{

		private static readonly System.Lazy<FieldAccessor<AI_StateMachine_Boar, UnityEngine.Vector3>> __chargeDirection =
				new System.Lazy<FieldAccessor<AI_StateMachine_Boar, UnityEngine.Vector3>>(() => FieldAccessor<AI_StateMachine_Boar, UnityEngine.Vector3>.Create("_chargeDirection"));
		private static readonly System.Lazy<FieldAccessor<AI_StateMachine_Boar, bool>> __isCurrentlyFearless =
				new System.Lazy<FieldAccessor<AI_StateMachine_Boar, bool>>(() => FieldAccessor<AI_StateMachine_Boar, bool>.Create("_isCurrentlyFearless"));
		private static readonly System.Lazy<FieldAccessor<AI_StateMachine_Boar, int>> _currentFearlessStacks =
				new System.Lazy<FieldAccessor<AI_StateMachine_Boar, int>>(() => FieldAccessor<AI_StateMachine_Boar, int>.Create("currentFearlessStacks"));

		public static UnityEngine.Vector3 Get_chargeDirection(this AI_StateMachine_Boar __self) => __chargeDirection.Value.GetValue(__self);
		public static void Set_chargeDirection(this AI_StateMachine_Boar __self, UnityEngine.Vector3 value) => __chargeDirection.Value.SetValue(__self, value);
		public static bool Get_isCurrentlyFearless(this AI_StateMachine_Boar __self) => __isCurrentlyFearless.Value.GetValue(__self);
		public static void Set_isCurrentlyFearless(this AI_StateMachine_Boar __self, bool value) => __isCurrentlyFearless.Value.SetValue(__self, value);
		public static int GetCurrentFearlessStacks(this AI_StateMachine_Boar __self) => _currentFearlessStacks.Value.GetValue(__self);
		public static void SetCurrentFearlessStacks(this AI_StateMachine_Boar __self, int value) => _currentFearlessStacks.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_StateMachine_Boar>> _OnDamageTaken2475015728 =
				new System.Lazy<MethodAccessor<AI_StateMachine_Boar>>(() => MethodAccessor<AI_StateMachine_Boar>.Create("OnDamageTaken", typeof(float), typeof(UnityEngine.Vector3), typeof(UnityEngine.Vector3), typeof(EntityType)));
		private static readonly System.Lazy<MethodAccessor<AI_StateMachine_Boar>> _Animation_ChargeLoad757602046 =
				new System.Lazy<MethodAccessor<AI_StateMachine_Boar>>(() => MethodAccessor<AI_StateMachine_Boar>.Create("Animation_ChargeLoad"));
		private static readonly System.Lazy<MethodAccessor<AI_StateMachine_Boar>> _Animation_Footstep757602046 =
				new System.Lazy<MethodAccessor<AI_StateMachine_Boar>>(() => MethodAccessor<AI_StateMachine_Boar>.Create("Animation_Footstep"));
		private static readonly System.Lazy<MethodAccessor<AI_StateMachine_Boar>> _Animation_Damage3486905475 =
				new System.Lazy<MethodAccessor<AI_StateMachine_Boar>>(() => MethodAccessor<AI_StateMachine_Boar>.Create("Animation_Damage", typeof(float)));
		private static readonly System.Lazy<MethodAccessor<AI_StateMachine_Boar>> _OnSwitchDamageTakenState757602046 =
				new System.Lazy<MethodAccessor<AI_StateMachine_Boar>>(() => MethodAccessor<AI_StateMachine_Boar>.Create("OnSwitchDamageTakenState"));

		public static void OnDamageTaken(this AI_StateMachine_Boar __self, float damage, UnityEngine.Vector3 hitPoint, UnityEngine.Vector3 hitNormal, EntityType damageType) => _OnDamageTaken2475015728.Value.Invoke(__self, damage, hitPoint, hitNormal, damageType);
		public static void Animation_ChargeLoad(this AI_StateMachine_Boar __self) => _Animation_ChargeLoad757602046.Value.Invoke(__self);
		public static void Animation_Footstep(this AI_StateMachine_Boar __self) => _Animation_Footstep757602046.Value.Invoke(__self);
		public static void Animation_Damage(this AI_StateMachine_Boar __self, float damage) => _Animation_Damage3486905475.Value.Invoke(__self, damage);
		public static void OnSwitchDamageTakenState(this AI_StateMachine_Boar __self) => _OnSwitchDamageTakenState757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AI_StateMachine_Boss_Varuna
	{

		private static readonly System.Lazy<FieldAccessor<AI_StateMachine_Boss_Varuna, SO_CameraShaker>> _cameraShake_Data =
				new System.Lazy<FieldAccessor<AI_StateMachine_Boss_Varuna, SO_CameraShaker>>(() => FieldAccessor<AI_StateMachine_Boss_Varuna, SO_CameraShaker>.Create("cameraShake_Data"));
		private static readonly System.Lazy<FieldAccessor<AI_StateMachine_Boss_Varuna, ScreenEffectManager>> _screenEffectManager =
				new System.Lazy<FieldAccessor<AI_StateMachine_Boss_Varuna, ScreenEffectManager>>(() => FieldAccessor<AI_StateMachine_Boss_Varuna, ScreenEffectManager>.Create("screenEffectManager"));

		public static SO_CameraShaker GetCameraShake_Data(this AI_StateMachine_Boss_Varuna __self) => _cameraShake_Data.Value.GetValue(__self);
		public static void SetCameraShake_Data(this AI_StateMachine_Boss_Varuna __self, SO_CameraShaker value) => _cameraShake_Data.Value.SetValue(__self, value);
		public static ScreenEffectManager GetScreenEffectManager(this AI_StateMachine_Boss_Varuna __self) => _screenEffectManager.Value.GetValue(__self);
		public static void SetScreenEffectManager(this AI_StateMachine_Boss_Varuna __self, ScreenEffectManager value) => _screenEffectManager.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_StateMachine_Boss_Varuna>> _UpdateStateMachine757602046 =
				new System.Lazy<MethodAccessor<AI_StateMachine_Boss_Varuna>>(() => MethodAccessor<AI_StateMachine_Boss_Varuna>.Create("UpdateStateMachine"));
		private static readonly System.Lazy<MethodAccessor<AI_StateMachine_Boss_Varuna>> _OnDeath3478926235 =
				new System.Lazy<MethodAccessor<AI_StateMachine_Boss_Varuna>>(() => MethodAccessor<AI_StateMachine_Boss_Varuna>.Create("OnDeath", typeof(EntityType)));
		private static readonly System.Lazy<MethodAccessor<AI_StateMachine_Boss_Varuna>> _UpdatePlayerPositioningInBoundsOfRegions757602046 =
				new System.Lazy<MethodAccessor<AI_StateMachine_Boss_Varuna>>(() => MethodAccessor<AI_StateMachine_Boss_Varuna>.Create("UpdatePlayerPositioningInBoundsOfRegions"));

		public static void UpdateStateMachine(this AI_StateMachine_Boss_Varuna __self) => _UpdateStateMachine757602046.Value.Invoke(__self);
		public static void OnDeath(this AI_StateMachine_Boss_Varuna __self, EntityType damageType) => _OnDeath3478926235.Value.Invoke(__self, damageType);
		public static void UpdatePlayerPositioningInBoundsOfRegions(this AI_StateMachine_Boss_Varuna __self) => _UpdatePlayerPositioningInBoundsOfRegions757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AI_StateMachine_BugSwarm
	{

		private static readonly System.Lazy<MethodAccessor<AI_StateMachine_BugSwarm>> _OnDeath3478926235 =
				new System.Lazy<MethodAccessor<AI_StateMachine_BugSwarm>>(() => MethodAccessor<AI_StateMachine_BugSwarm>.Create("OnDeath", typeof(EntityType)));

		public static void OnDeath(this AI_StateMachine_BugSwarm __self, EntityType damageType) => _OnDeath3478926235.Value.Invoke(__self, damageType);

	}

	public static class PrivateAccessor_AI_StateMachine_ButlerBot
	{

		private static readonly System.Lazy<FieldAccessor<AI_StateMachine_ButlerBot, UnityEngine.GameObject>> _screen_Help =
				new System.Lazy<FieldAccessor<AI_StateMachine_ButlerBot, UnityEngine.GameObject>>(() => FieldAccessor<AI_StateMachine_ButlerBot, UnityEngine.GameObject>.Create("screen_Help"));
		private static readonly System.Lazy<FieldAccessor<AI_StateMachine_ButlerBot, UnityEngine.GameObject>> _screen_Damaged =
				new System.Lazy<FieldAccessor<AI_StateMachine_ButlerBot, UnityEngine.GameObject>>(() => FieldAccessor<AI_StateMachine_ButlerBot, UnityEngine.GameObject>.Create("screen_Damaged"));
		private static readonly System.Lazy<FieldAccessor<AI_StateMachine_ButlerBot, UnityEngine.GameObject>> _screen_Normal =
				new System.Lazy<FieldAccessor<AI_StateMachine_ButlerBot, UnityEngine.GameObject>>(() => FieldAccessor<AI_StateMachine_ButlerBot, UnityEngine.GameObject>.Create("screen_Normal"));
		private static readonly System.Lazy<FieldAccessor<AI_StateMachine_ButlerBot, UnityEngine.GameObject>> _screen_Stunned =
				new System.Lazy<FieldAccessor<AI_StateMachine_ButlerBot, UnityEngine.GameObject>>(() => FieldAccessor<AI_StateMachine_ButlerBot, UnityEngine.GameObject>.Create("screen_Stunned"));
		private static readonly System.Lazy<FieldAccessor<AI_StateMachine_ButlerBot, UnityEngine.Renderer>> _tracksRenderer =
				new System.Lazy<FieldAccessor<AI_StateMachine_ButlerBot, UnityEngine.Renderer>>(() => FieldAccessor<AI_StateMachine_ButlerBot, UnityEngine.Renderer>.Create("tracksRenderer"));
		private static readonly System.Lazy<FieldAccessor<AI_StateMachine_ButlerBot, float>> _trackSpeedModifier =
				new System.Lazy<FieldAccessor<AI_StateMachine_ButlerBot, float>>(() => FieldAccessor<AI_StateMachine_ButlerBot, float>.Create("trackSpeedModifier"));
		private static readonly System.Lazy<FieldAccessor<AI_StateMachine_ButlerBot, FMODUnity.StudioEventEmitter>> _emitter_Tracks =
				new System.Lazy<FieldAccessor<AI_StateMachine_ButlerBot, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<AI_StateMachine_ButlerBot, FMODUnity.StudioEventEmitter>.Create("emitter_Tracks"));
		private static readonly System.Lazy<FieldAccessor<AI_StateMachine_ButlerBot, UnityEngine.MaterialPropertyBlock>> _materialPropBlock =
				new System.Lazy<FieldAccessor<AI_StateMachine_ButlerBot, UnityEngine.MaterialPropertyBlock>>(() => FieldAccessor<AI_StateMachine_ButlerBot, UnityEngine.MaterialPropertyBlock>.Create("materialPropBlock"));
		private static readonly System.Lazy<FieldAccessor<AI_StateMachine_ButlerBot, float>> _trackOffset =
				new System.Lazy<FieldAccessor<AI_StateMachine_ButlerBot, float>>(() => FieldAccessor<AI_StateMachine_ButlerBot, float>.Create("trackOffset"));

		public static UnityEngine.GameObject GetScreen_Help(this AI_StateMachine_ButlerBot __self) => _screen_Help.Value.GetValue(__self);
		public static void SetScreen_Help(this AI_StateMachine_ButlerBot __self, UnityEngine.GameObject value) => _screen_Help.Value.SetValue(__self, value);
		public static UnityEngine.GameObject GetScreen_Damaged(this AI_StateMachine_ButlerBot __self) => _screen_Damaged.Value.GetValue(__self);
		public static void SetScreen_Damaged(this AI_StateMachine_ButlerBot __self, UnityEngine.GameObject value) => _screen_Damaged.Value.SetValue(__self, value);
		public static UnityEngine.GameObject GetScreen_Normal(this AI_StateMachine_ButlerBot __self) => _screen_Normal.Value.GetValue(__self);
		public static void SetScreen_Normal(this AI_StateMachine_ButlerBot __self, UnityEngine.GameObject value) => _screen_Normal.Value.SetValue(__self, value);
		public static UnityEngine.GameObject GetScreen_Stunned(this AI_StateMachine_ButlerBot __self) => _screen_Stunned.Value.GetValue(__self);
		public static void SetScreen_Stunned(this AI_StateMachine_ButlerBot __self, UnityEngine.GameObject value) => _screen_Stunned.Value.SetValue(__self, value);
		public static UnityEngine.Renderer GetTracksRenderer(this AI_StateMachine_ButlerBot __self) => _tracksRenderer.Value.GetValue(__self);
		public static void SetTracksRenderer(this AI_StateMachine_ButlerBot __self, UnityEngine.Renderer value) => _tracksRenderer.Value.SetValue(__self, value);
		public static float GetTrackSpeedModifier(this AI_StateMachine_ButlerBot __self) => _trackSpeedModifier.Value.GetValue(__self);
		public static void SetTrackSpeedModifier(this AI_StateMachine_ButlerBot __self, float value) => _trackSpeedModifier.Value.SetValue(__self, value);
		public static FMODUnity.StudioEventEmitter GetEmitter_Tracks(this AI_StateMachine_ButlerBot __self) => _emitter_Tracks.Value.GetValue(__self);
		public static void SetEmitter_Tracks(this AI_StateMachine_ButlerBot __self, FMODUnity.StudioEventEmitter value) => _emitter_Tracks.Value.SetValue(__self, value);
		public static UnityEngine.MaterialPropertyBlock GetMaterialPropBlock(this AI_StateMachine_ButlerBot __self) => _materialPropBlock.Value.GetValue(__self);
		public static void SetMaterialPropBlock(this AI_StateMachine_ButlerBot __self, UnityEngine.MaterialPropertyBlock value) => _materialPropBlock.Value.SetValue(__self, value);
		public static float GetTrackOffset(this AI_StateMachine_ButlerBot __self) => _trackOffset.Value.GetValue(__self);
		public static void SetTrackOffset(this AI_StateMachine_ButlerBot __self, float value) => _trackOffset.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_StateMachine_ButlerBot>> _UpdateStateMachine757602046 =
				new System.Lazy<MethodAccessor<AI_StateMachine_ButlerBot>>(() => MethodAccessor<AI_StateMachine_ButlerBot>.Create("UpdateStateMachine"));
		private static readonly System.Lazy<MethodAccessor<AI_StateMachine_ButlerBot>> _OnPickedUp757602046 =
				new System.Lazy<MethodAccessor<AI_StateMachine_ButlerBot>>(() => MethodAccessor<AI_StateMachine_ButlerBot>.Create("OnPickedUp"));
		private static readonly System.Lazy<MethodAccessor<AI_StateMachine_ButlerBot>> _OnDamageTaken2475015728 =
				new System.Lazy<MethodAccessor<AI_StateMachine_ButlerBot>>(() => MethodAccessor<AI_StateMachine_ButlerBot>.Create("OnDamageTaken", typeof(float), typeof(UnityEngine.Vector3), typeof(UnityEngine.Vector3), typeof(EntityType)));
		private static readonly System.Lazy<MethodAccessor<AI_StateMachine_ButlerBot>> _OnDeath3478926235 =
				new System.Lazy<MethodAccessor<AI_StateMachine_ButlerBot>>(() => MethodAccessor<AI_StateMachine_ButlerBot>.Create("OnDeath", typeof(EntityType)));
		private static readonly System.Lazy<MethodAccessor<AI_StateMachine_ButlerBot>> _Animation_Damage3486905475 =
				new System.Lazy<MethodAccessor<AI_StateMachine_ButlerBot>>(() => MethodAccessor<AI_StateMachine_ButlerBot>.Create("Animation_Damage", typeof(float)));
		private static readonly System.Lazy<MethodAccessor<AI_StateMachine_ButlerBot>> _ShowFace3454057852 =
				new System.Lazy<MethodAccessor<AI_StateMachine_ButlerBot>>(() => MethodAccessor<AI_StateMachine_ButlerBot>.Create("ShowFace", typeof(string)));
		private static readonly System.Lazy<MethodAccessor<AI_StateMachine_ButlerBot>> _ResetDamagedFace757602046 =
				new System.Lazy<MethodAccessor<AI_StateMachine_ButlerBot>>(() => MethodAccessor<AI_StateMachine_ButlerBot>.Create("ResetDamagedFace"));

		public static void UpdateStateMachine(this AI_StateMachine_ButlerBot __self) => _UpdateStateMachine757602046.Value.Invoke(__self);
		public static void OnPickedUp(this AI_StateMachine_ButlerBot __self) => _OnPickedUp757602046.Value.Invoke(__self);
		public static void OnDamageTaken(this AI_StateMachine_ButlerBot __self, float damage, UnityEngine.Vector3 hitPoint, UnityEngine.Vector3 hitNormal, EntityType damageType) => _OnDamageTaken2475015728.Value.Invoke(__self, damage, hitPoint, hitNormal, damageType);
		public static void OnDeath(this AI_StateMachine_ButlerBot __self, EntityType damageType) => _OnDeath3478926235.Value.Invoke(__self, damageType);
		public static void Animation_Damage(this AI_StateMachine_ButlerBot __self, float damage) => _Animation_Damage3486905475.Value.Invoke(__self, damage);
		public static void ShowFace(this AI_StateMachine_ButlerBot __self, string faceName) => _ShowFace3454057852.Value.Invoke(__self, faceName);
		public static void ResetDamagedFace(this AI_StateMachine_ButlerBot __self) => _ResetDamagedFace757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AI_StateMachine_Domestic
	{

		private static readonly System.Lazy<FieldAccessor<AI_StateMachine_Domestic, string>> _eventRef_eatGrass =
				new System.Lazy<FieldAccessor<AI_StateMachine_Domestic, string>>(() => FieldAccessor<AI_StateMachine_Domestic, string>.Create("eventRef_eatGrass"));

		public static string GetEventRef_eatGrass(this AI_StateMachine_Domestic __self) => _eventRef_eatGrass.Value.GetValue(__self);
		public static void SetEventRef_eatGrass(this AI_StateMachine_Domestic __self, string value) => _eventRef_eatGrass.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_StateMachine_Domestic>> _OnDeath3478926235 =
				new System.Lazy<MethodAccessor<AI_StateMachine_Domestic>>(() => MethodAccessor<AI_StateMachine_Domestic>.Create("OnDeath", typeof(EntityType)));
		private static readonly System.Lazy<MethodAccessor<AI_StateMachine_Domestic>> _OnSwitchDamageTakenState757602046 =
				new System.Lazy<MethodAccessor<AI_StateMachine_Domestic>>(() => MethodAccessor<AI_StateMachine_Domestic>.Create("OnSwitchDamageTakenState"));
		private static readonly System.Lazy<MethodAccessor<AI_StateMachine_Domestic>> _EnablePickup757602046 =
				new System.Lazy<MethodAccessor<AI_StateMachine_Domestic>>(() => MethodAccessor<AI_StateMachine_Domestic>.Create("EnablePickup"));
		private static readonly System.Lazy<MethodAccessor<AI_StateMachine_Domestic>> _OnWorldShift3429126434 =
				new System.Lazy<MethodAccessor<AI_StateMachine_Domestic>>(() => MethodAccessor<AI_StateMachine_Domestic>.Create("OnWorldShift", typeof(UnityEngine.Vector3)));

		public static void OnDeath(this AI_StateMachine_Domestic __self, EntityType damageType) => _OnDeath3478926235.Value.Invoke(__self, damageType);
		public static void OnSwitchDamageTakenState(this AI_StateMachine_Domestic __self) => _OnSwitchDamageTakenState757602046.Value.Invoke(__self);
		public static void EnablePickup(this AI_StateMachine_Domestic __self) => _EnablePickup757602046.Value.Invoke(__self);
		public static void OnWorldShift(this AI_StateMachine_Domestic __self, UnityEngine.Vector3 shift) => _OnWorldShift3429126434.Value.Invoke(__self, shift);

	}

	public static class PrivateAccessor_AI_StateMachine_Hyena
	{

		private static readonly System.Lazy<MethodAccessor<AI_StateMachine_Hyena>> _Animation_Footstep757602046 =
				new System.Lazy<MethodAccessor<AI_StateMachine_Hyena>>(() => MethodAccessor<AI_StateMachine_Hyena>.Create("Animation_Footstep"));

		public static void Animation_Footstep(this AI_StateMachine_Hyena __self) => _Animation_Footstep757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AI_StateMachine_HyenaBoss
	{

		private static readonly System.Lazy<FieldAccessor<AI_StateMachine_HyenaBoss, AreaZone>> _zone =
				new System.Lazy<FieldAccessor<AI_StateMachine_HyenaBoss, AreaZone>>(() => FieldAccessor<AI_StateMachine_HyenaBoss, AreaZone>.Create("zone"));
		private static readonly System.Lazy<FieldAccessor<AI_StateMachine_HyenaBoss, float>> _damageTaken =
				new System.Lazy<FieldAccessor<AI_StateMachine_HyenaBoss, float>>(() => FieldAccessor<AI_StateMachine_HyenaBoss, float>.Create("damageTaken"));
		private static readonly System.Lazy<FieldAccessor<AI_StateMachine_HyenaBoss, float>> _zoneTimer =
				new System.Lazy<FieldAccessor<AI_StateMachine_HyenaBoss, float>>(() => FieldAccessor<AI_StateMachine_HyenaBoss, float>.Create("zoneTimer"));

		public static AreaZone GetZone(this AI_StateMachine_HyenaBoss __self) => _zone.Value.GetValue(__self);
		public static void SetZone(this AI_StateMachine_HyenaBoss __self, AreaZone value) => _zone.Value.SetValue(__self, value);
		public static float GetDamageTaken(this AI_StateMachine_HyenaBoss __self) => _damageTaken.Value.GetValue(__self);
		public static void SetDamageTaken(this AI_StateMachine_HyenaBoss __self, float value) => _damageTaken.Value.SetValue(__self, value);
		public static float GetZoneTimer(this AI_StateMachine_HyenaBoss __self) => _zoneTimer.Value.GetValue(__self);
		public static void SetZoneTimer(this AI_StateMachine_HyenaBoss __self, float value) => _zoneTimer.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_StateMachine_HyenaBoss>> _UpdateStateMachine757602046 =
				new System.Lazy<MethodAccessor<AI_StateMachine_HyenaBoss>>(() => MethodAccessor<AI_StateMachine_HyenaBoss>.Create("UpdateStateMachine"));
		private static readonly System.Lazy<MethodAccessor<AI_StateMachine_HyenaBoss>> _OnDamageTaken2475015728 =
				new System.Lazy<MethodAccessor<AI_StateMachine_HyenaBoss>>(() => MethodAccessor<AI_StateMachine_HyenaBoss>.Create("OnDamageTaken", typeof(float), typeof(UnityEngine.Vector3), typeof(UnityEngine.Vector3), typeof(EntityType)));
		private static readonly System.Lazy<MethodAccessor<AI_StateMachine_HyenaBoss>> _OnDeath3478926235 =
				new System.Lazy<MethodAccessor<AI_StateMachine_HyenaBoss>>(() => MethodAccessor<AI_StateMachine_HyenaBoss>.Create("OnDeath", typeof(EntityType)));
		private static readonly System.Lazy<MethodAccessor<AI_StateMachine_HyenaBoss>> _RemovePool3893977898 =
				new System.Lazy<MethodAccessor<AI_StateMachine_HyenaBoss>>(() => MethodAccessor<AI_StateMachine_HyenaBoss>.Create("RemovePool", typeof(AcidPool), typeof(UnityEngine.ParticleSystem)));

		public static void UpdateStateMachine(this AI_StateMachine_HyenaBoss __self) => _UpdateStateMachine757602046.Value.Invoke(__self);
		public static void OnDamageTaken(this AI_StateMachine_HyenaBoss __self, float damage, UnityEngine.Vector3 hitPoint, UnityEngine.Vector3 hitNormal, EntityType damageType) => _OnDamageTaken2475015728.Value.Invoke(__self, damage, hitPoint, hitNormal, damageType);
		public static void OnDeath(this AI_StateMachine_HyenaBoss __self, EntityType damageType) => _OnDeath3478926235.Value.Invoke(__self, damageType);
		public static void RemovePool(this AI_StateMachine_HyenaBoss __self, AcidPool acidPool, UnityEngine.ParticleSystem acidParticles) => _RemovePool3893977898.Value.Invoke(__self, acidPool, acidParticles);

	}

	public static class PrivateAccessor_AI_StateMachine_MamaBear
	{

		private static readonly System.Lazy<FieldAccessor<AI_StateMachine_MamaBear, AI_State_MoveToPoint>> _moveToPointState =
				new System.Lazy<FieldAccessor<AI_StateMachine_MamaBear, AI_State_MoveToPoint>>(() => FieldAccessor<AI_StateMachine_MamaBear, AI_State_MoveToPoint>.Create("moveToPointState"));
		private static readonly System.Lazy<FieldAccessor<AI_StateMachine_MamaBear, UnityEngine.ParticleSystem>> _berryParticleSystem =
				new System.Lazy<FieldAccessor<AI_StateMachine_MamaBear, UnityEngine.ParticleSystem>>(() => FieldAccessor<AI_StateMachine_MamaBear, UnityEngine.ParticleSystem>.Create("berryParticleSystem"));

		public static AI_State_MoveToPoint GetMoveToPointState(this AI_StateMachine_MamaBear __self) => _moveToPointState.Value.GetValue(__self);
		public static void SetMoveToPointState(this AI_StateMachine_MamaBear __self, AI_State_MoveToPoint value) => _moveToPointState.Value.SetValue(__self, value);
		public static UnityEngine.ParticleSystem GetBerryParticleSystem(this AI_StateMachine_MamaBear __self) => _berryParticleSystem.Value.GetValue(__self);
		public static void SetBerryParticleSystem(this AI_StateMachine_MamaBear __self, UnityEngine.ParticleSystem value) => _berryParticleSystem.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_StateMachine_MamaBear>> _OnDeath3478926235 =
				new System.Lazy<MethodAccessor<AI_StateMachine_MamaBear>>(() => MethodAccessor<AI_StateMachine_MamaBear>.Create("OnDeath", typeof(EntityType)));
		private static readonly System.Lazy<MethodAccessor<AI_StateMachine_MamaBear>> _OnLureQuestComplete757602046 =
				new System.Lazy<MethodAccessor<AI_StateMachine_MamaBear>>(() => MethodAccessor<AI_StateMachine_MamaBear>.Create("OnLureQuestComplete"));

		public static void OnDeath(this AI_StateMachine_MamaBear __self, EntityType damageType) => _OnDeath3478926235.Value.Invoke(__self, damageType);
		public static void OnLureQuestComplete(this AI_StateMachine_MamaBear __self) => _OnLureQuestComplete757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AI_StateMachine_PufferFish
	{

		private static readonly System.Lazy<FieldAccessor<AI_StateMachine_PufferFish, string>> _eventref_takeDamage =
				new System.Lazy<FieldAccessor<AI_StateMachine_PufferFish, string>>(() => FieldAccessor<AI_StateMachine_PufferFish, string>.Create("eventref_takeDamage"));
		private static readonly System.Lazy<FieldAccessor<AI_StateMachine_PufferFish, UnityEngine.ParticleSystem>> _bubbleParticle =
				new System.Lazy<FieldAccessor<AI_StateMachine_PufferFish, UnityEngine.ParticleSystem>>(() => FieldAccessor<AI_StateMachine_PufferFish, UnityEngine.ParticleSystem>.Create("bubbleParticle"));
		private static readonly System.Lazy<FieldAccessor<AI_StateMachine_PufferFish, Interval_Float>> _particleEmitInterval =
				new System.Lazy<FieldAccessor<AI_StateMachine_PufferFish, Interval_Float>>(() => FieldAccessor<AI_StateMachine_PufferFish, Interval_Float>.Create("particleEmitInterval"));
		private static readonly System.Lazy<FieldAccessor<AI_StateMachine_PufferFish, float>> _particleEmitDelay =
				new System.Lazy<FieldAccessor<AI_StateMachine_PufferFish, float>>(() => FieldAccessor<AI_StateMachine_PufferFish, float>.Create("particleEmitDelay"));
		private static readonly System.Lazy<FieldAccessor<AI_StateMachine_PufferFish, float>> _particleEmitTimer =
				new System.Lazy<FieldAccessor<AI_StateMachine_PufferFish, float>>(() => FieldAccessor<AI_StateMachine_PufferFish, float>.Create("particleEmitTimer"));
		private static readonly System.Lazy<FieldAccessor<AI_StateMachine_PufferFish, string>> _eventref_bubble =
				new System.Lazy<FieldAccessor<AI_StateMachine_PufferFish, string>>(() => FieldAccessor<AI_StateMachine_PufferFish, string>.Create("eventref_bubble"));

		public static string GetEventref_takeDamage(this AI_StateMachine_PufferFish __self) => _eventref_takeDamage.Value.GetValue(__self);
		public static void SetEventref_takeDamage(this AI_StateMachine_PufferFish __self, string value) => _eventref_takeDamage.Value.SetValue(__self, value);
		public static UnityEngine.ParticleSystem GetBubbleParticle(this AI_StateMachine_PufferFish __self) => _bubbleParticle.Value.GetValue(__self);
		public static void SetBubbleParticle(this AI_StateMachine_PufferFish __self, UnityEngine.ParticleSystem value) => _bubbleParticle.Value.SetValue(__self, value);
		public static Interval_Float GetParticleEmitInterval(this AI_StateMachine_PufferFish __self) => _particleEmitInterval.Value.GetValue(__self);
		public static void SetParticleEmitInterval(this AI_StateMachine_PufferFish __self, Interval_Float value) => _particleEmitInterval.Value.SetValue(__self, value);
		public static float GetParticleEmitDelay(this AI_StateMachine_PufferFish __self) => _particleEmitDelay.Value.GetValue(__self);
		public static void SetParticleEmitDelay(this AI_StateMachine_PufferFish __self, float value) => _particleEmitDelay.Value.SetValue(__self, value);
		public static float GetParticleEmitTimer(this AI_StateMachine_PufferFish __self) => _particleEmitTimer.Value.GetValue(__self);
		public static void SetParticleEmitTimer(this AI_StateMachine_PufferFish __self, float value) => _particleEmitTimer.Value.SetValue(__self, value);
		public static string GetEventref_bubble(this AI_StateMachine_PufferFish __self) => _eventref_bubble.Value.GetValue(__self);
		public static void SetEventref_bubble(this AI_StateMachine_PufferFish __self, string value) => _eventref_bubble.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_StateMachine_PufferFish>> _UpdateStateMachine757602046 =
				new System.Lazy<MethodAccessor<AI_StateMachine_PufferFish>>(() => MethodAccessor<AI_StateMachine_PufferFish>.Create("UpdateStateMachine"));

		public static void UpdateStateMachine(this AI_StateMachine_PufferFish __self) => _UpdateStateMachine757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AI_StateMachine_Rat
	{

		private static readonly System.Lazy<FieldAccessor<AI_StateMachine_Rat, string>> _eventRef_landJump =
				new System.Lazy<FieldAccessor<AI_StateMachine_Rat, string>>(() => FieldAccessor<AI_StateMachine_Rat, string>.Create("eventRef_landJump"));

		public static string GetEventRef_landJump(this AI_StateMachine_Rat __self) => _eventRef_landJump.Value.GetValue(__self);
		public static void SetEventRef_landJump(this AI_StateMachine_Rat __self, string value) => _eventRef_landJump.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_StateMachine_Rat>> _OnDamageTaken2475015728 =
				new System.Lazy<MethodAccessor<AI_StateMachine_Rat>>(() => MethodAccessor<AI_StateMachine_Rat>.Create("OnDamageTaken", typeof(float), typeof(UnityEngine.Vector3), typeof(UnityEngine.Vector3), typeof(EntityType)));
		private static readonly System.Lazy<MethodAccessor<AI_StateMachine_Rat>> _OnAnimationEvent3454057852 =
				new System.Lazy<MethodAccessor<AI_StateMachine_Rat>>(() => MethodAccessor<AI_StateMachine_Rat>.Create("OnAnimationEvent", typeof(string)));

		public static void OnDamageTaken(this AI_StateMachine_Rat __self, float damage, UnityEngine.Vector3 hitPoint, UnityEngine.Vector3 hitNormal, EntityType damageType) => _OnDamageTaken2475015728.Value.Invoke(__self, damage, hitPoint, hitNormal, damageType);
		public static void OnAnimationEvent(this AI_StateMachine_Rat __self, string animationEventName) => _OnAnimationEvent3454057852.Value.Invoke(__self, animationEventName);

	}

	public static class PrivateAccessor_AI_StateMachine_Shark
	{

		private static readonly System.Lazy<FieldAccessor<AI_StateMachine_Shark, string>> _eventRef_biteRaft =
				new System.Lazy<FieldAccessor<AI_StateMachine_Shark, string>>(() => FieldAccessor<AI_StateMachine_Shark, string>.Create("eventRef_biteRaft"));
		private static readonly System.Lazy<FieldAccessor<AI_StateMachine_Shark, ParticleController>> _woodParticles =
				new System.Lazy<FieldAccessor<AI_StateMachine_Shark, ParticleController>>(() => FieldAccessor<AI_StateMachine_Shark, ParticleController>.Create("woodParticles"));
		private static readonly System.Lazy<FieldAccessor<AI_StateMachine_Shark, ParticleController>> _waterSplash =
				new System.Lazy<FieldAccessor<AI_StateMachine_Shark, ParticleController>>(() => FieldAccessor<AI_StateMachine_Shark, ParticleController>.Create("waterSplash"));
		private static readonly System.Lazy<FieldAccessor<AI_StateMachine_Shark, float>> _searchBlockProgress =
				new System.Lazy<FieldAccessor<AI_StateMachine_Shark, float>>(() => FieldAccessor<AI_StateMachine_Shark, float>.Create("searchBlockProgress"));
		private static readonly System.Lazy<FieldAccessor<AI_StateMachine_Shark, float>> _searchBlockInterval =
				new System.Lazy<FieldAccessor<AI_StateMachine_Shark, float>>(() => FieldAccessor<AI_StateMachine_Shark, float>.Create("searchBlockInterval"));
		private static readonly System.Lazy<FieldAccessor<AI_StateMachine_Shark, float>> _searchBaitIntervalProgress =
				new System.Lazy<FieldAccessor<AI_StateMachine_Shark, float>>(() => FieldAccessor<AI_StateMachine_Shark, float>.Create("searchBaitIntervalProgress"));
		private static readonly System.Lazy<FieldAccessor<AI_StateMachine_Shark, float>> _searchBaitInterval =
				new System.Lazy<FieldAccessor<AI_StateMachine_Shark, float>>(() => FieldAccessor<AI_StateMachine_Shark, float>.Create("searchBaitInterval"));
		private static readonly System.Lazy<FieldAccessor<AI_StateMachine_Shark, float>> _searchBaitCooldown =
				new System.Lazy<FieldAccessor<AI_StateMachine_Shark, float>>(() => FieldAccessor<AI_StateMachine_Shark, float>.Create("searchBaitCooldown"));
		private static readonly System.Lazy<FieldAccessor<AI_StateMachine_Shark, float>> _searchBaitCooldownProgress =
				new System.Lazy<FieldAccessor<AI_StateMachine_Shark, float>>(() => FieldAccessor<AI_StateMachine_Shark, float>.Create("searchBaitCooldownProgress"));
		private static readonly System.Lazy<FieldAccessor<AI_StateMachine_Shark, float>> _baitVisionRange =
				new System.Lazy<FieldAccessor<AI_StateMachine_Shark, float>>(() => FieldAccessor<AI_StateMachine_Shark, float>.Create("baitVisionRange"));
		private static readonly System.Lazy<FieldAccessor<AI_StateMachine_Shark, UnityEngine.Renderer>> _sharkRenderer =
				new System.Lazy<FieldAccessor<AI_StateMachine_Shark, UnityEngine.Renderer>>(() => FieldAccessor<AI_StateMachine_Shark, UnityEngine.Renderer>.Create("sharkRenderer"));
		private static readonly System.Lazy<FieldAccessor<AI_StateMachine_Shark, UnityEngine.MaterialPropertyBlock>> _materialPropertyBlock =
				new System.Lazy<FieldAccessor<AI_StateMachine_Shark, UnityEngine.MaterialPropertyBlock>>(() => FieldAccessor<AI_StateMachine_Shark, UnityEngine.MaterialPropertyBlock>.Create("materialPropertyBlock"));
		private static readonly System.Lazy<FieldAccessor<AI_StateMachine_Shark, Network_Host_Entities>> _hostEntities =
				new System.Lazy<FieldAccessor<AI_StateMachine_Shark, Network_Host_Entities>>(() => FieldAccessor<AI_StateMachine_Shark, Network_Host_Entities>.Create("hostEntities"));

		public static string GetEventRef_biteRaft(this AI_StateMachine_Shark __self) => _eventRef_biteRaft.Value.GetValue(__self);
		public static void SetEventRef_biteRaft(this AI_StateMachine_Shark __self, string value) => _eventRef_biteRaft.Value.SetValue(__self, value);
		public static ParticleController GetWoodParticles(this AI_StateMachine_Shark __self) => _woodParticles.Value.GetValue(__self);
		public static void SetWoodParticles(this AI_StateMachine_Shark __self, ParticleController value) => _woodParticles.Value.SetValue(__self, value);
		public static ParticleController GetWaterSplash(this AI_StateMachine_Shark __self) => _waterSplash.Value.GetValue(__self);
		public static void SetWaterSplash(this AI_StateMachine_Shark __self, ParticleController value) => _waterSplash.Value.SetValue(__self, value);
		public static float GetSearchBlockProgress(this AI_StateMachine_Shark __self) => _searchBlockProgress.Value.GetValue(__self);
		public static void SetSearchBlockProgress(this AI_StateMachine_Shark __self, float value) => _searchBlockProgress.Value.SetValue(__self, value);
		public static float GetSearchBlockInterval(this AI_StateMachine_Shark __self) => _searchBlockInterval.Value.GetValue(__self);
		public static void SetSearchBlockInterval(this AI_StateMachine_Shark __self, float value) => _searchBlockInterval.Value.SetValue(__self, value);
		public static float GetSearchBaitIntervalProgress(this AI_StateMachine_Shark __self) => _searchBaitIntervalProgress.Value.GetValue(__self);
		public static void SetSearchBaitIntervalProgress(this AI_StateMachine_Shark __self, float value) => _searchBaitIntervalProgress.Value.SetValue(__self, value);
		public static float GetSearchBaitInterval(this AI_StateMachine_Shark __self) => _searchBaitInterval.Value.GetValue(__self);
		public static void SetSearchBaitInterval(this AI_StateMachine_Shark __self, float value) => _searchBaitInterval.Value.SetValue(__self, value);
		public static float GetSearchBaitCooldown(this AI_StateMachine_Shark __self) => _searchBaitCooldown.Value.GetValue(__self);
		public static void SetSearchBaitCooldown(this AI_StateMachine_Shark __self, float value) => _searchBaitCooldown.Value.SetValue(__self, value);
		public static float GetSearchBaitCooldownProgress(this AI_StateMachine_Shark __self) => _searchBaitCooldownProgress.Value.GetValue(__self);
		public static void SetSearchBaitCooldownProgress(this AI_StateMachine_Shark __self, float value) => _searchBaitCooldownProgress.Value.SetValue(__self, value);
		public static float GetBaitVisionRange(this AI_StateMachine_Shark __self) => _baitVisionRange.Value.GetValue(__self);
		public static void SetBaitVisionRange(this AI_StateMachine_Shark __self, float value) => _baitVisionRange.Value.SetValue(__self, value);
		public static UnityEngine.Renderer GetSharkRenderer(this AI_StateMachine_Shark __self) => _sharkRenderer.Value.GetValue(__self);
		public static void SetSharkRenderer(this AI_StateMachine_Shark __self, UnityEngine.Renderer value) => _sharkRenderer.Value.SetValue(__self, value);
		public static UnityEngine.MaterialPropertyBlock GetMaterialPropertyBlock(this AI_StateMachine_Shark __self) => _materialPropertyBlock.Value.GetValue(__self);
		public static void SetMaterialPropertyBlock(this AI_StateMachine_Shark __self, UnityEngine.MaterialPropertyBlock value) => _materialPropertyBlock.Value.SetValue(__self, value);
		public static Network_Host_Entities GetHostEntities(this AI_StateMachine_Shark __self) => _hostEntities.Value.GetValue(__self);
		public static void SetHostEntities(this AI_StateMachine_Shark __self, Network_Host_Entities value) => _hostEntities.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_StateMachine_Shark>> _OnDamageTaken2475015728 =
				new System.Lazy<MethodAccessor<AI_StateMachine_Shark>>(() => MethodAccessor<AI_StateMachine_Shark>.Create("OnDamageTaken", typeof(float), typeof(UnityEngine.Vector3), typeof(UnityEngine.Vector3), typeof(EntityType)));
		private static readonly System.Lazy<MethodAccessor<AI_StateMachine_Shark>> _OnSwitchDamageTakenState757602046 =
				new System.Lazy<MethodAccessor<AI_StateMachine_Shark>>(() => MethodAccessor<AI_StateMachine_Shark>.Create("OnSwitchDamageTakenState"));
		private static readonly System.Lazy<MethodAccessor<AI_StateMachine_Shark>> _UpdateStateMachine757602046 =
				new System.Lazy<MethodAccessor<AI_StateMachine_Shark>>(() => MethodAccessor<AI_StateMachine_Shark>.Create("UpdateStateMachine"));
		private static readonly System.Lazy<MethodAccessor<AI_StateMachine_Shark>> _GetRandomPointInVisionAroundTarget1664684420 =
				new System.Lazy<MethodAccessor<AI_StateMachine_Shark>>(() => MethodAccessor<AI_StateMachine_Shark>.Create("GetRandomPointInVisionAroundTarget", typeof(UnityEngine.Vector3), typeof(float), typeof(float)));
		private static readonly System.Lazy<MethodAccessor<AI_StateMachine_Shark>> _IsPointUnderneathTerrain3640389019 =
				new System.Lazy<MethodAccessor<AI_StateMachine_Shark>>(() => MethodAccessor<AI_StateMachine_Shark>.Create("IsPointUnderneathTerrain", typeof(UnityEngine.Vector3), typeof(float)));

		public static void OnDamageTaken(this AI_StateMachine_Shark __self, float damage, UnityEngine.Vector3 hitPoint, UnityEngine.Vector3 hitNormal, EntityType damageType) => _OnDamageTaken2475015728.Value.Invoke(__self, damage, hitPoint, hitNormal, damageType);
		public static void OnSwitchDamageTakenState(this AI_StateMachine_Shark __self) => _OnSwitchDamageTakenState757602046.Value.Invoke(__self);
		public static void UpdateStateMachine(this AI_StateMachine_Shark __self) => _UpdateStateMachine757602046.Value.Invoke(__self);
		public static UnityEngine.Vector3 GetRandomPointInVisionAroundTarget(this AI_StateMachine_Shark __self, UnityEngine.Vector3 target, float minRadius, float maxRadius) => (UnityEngine.Vector3)_GetRandomPointInVisionAroundTarget1664684420.Value.Invoke(__self, target, minRadius, maxRadius);
		public static bool IsPointUnderneathTerrain(this AI_StateMachine_Shark __self, UnityEngine.Vector3 point, float lenghtOffset) => (bool)_IsPointUnderneathTerrain3640389019.Value.Invoke(__self, point, lenghtOffset);

	}

	public static class PrivateAccessor_AI_StateMachine_Shark_Message_NewAIShark_Update
	{

		private static readonly System.Lazy<FieldAccessor<AI_StateMachine_Shark.Message_NewAIShark_Update, float>> _posX =
				new System.Lazy<FieldAccessor<AI_StateMachine_Shark.Message_NewAIShark_Update, float>>(() => FieldAccessor<AI_StateMachine_Shark.Message_NewAIShark_Update, float>.Create("posX"));
		private static readonly System.Lazy<FieldAccessor<AI_StateMachine_Shark.Message_NewAIShark_Update, float>> _posY =
				new System.Lazy<FieldAccessor<AI_StateMachine_Shark.Message_NewAIShark_Update, float>>(() => FieldAccessor<AI_StateMachine_Shark.Message_NewAIShark_Update, float>.Create("posY"));
		private static readonly System.Lazy<FieldAccessor<AI_StateMachine_Shark.Message_NewAIShark_Update, float>> _posZ =
				new System.Lazy<FieldAccessor<AI_StateMachine_Shark.Message_NewAIShark_Update, float>>(() => FieldAccessor<AI_StateMachine_Shark.Message_NewAIShark_Update, float>.Create("posZ"));
		private static readonly System.Lazy<FieldAccessor<AI_StateMachine_Shark.Message_NewAIShark_Update, float>> _rotX =
				new System.Lazy<FieldAccessor<AI_StateMachine_Shark.Message_NewAIShark_Update, float>>(() => FieldAccessor<AI_StateMachine_Shark.Message_NewAIShark_Update, float>.Create("rotX"));
		private static readonly System.Lazy<FieldAccessor<AI_StateMachine_Shark.Message_NewAIShark_Update, float>> _rotY =
				new System.Lazy<FieldAccessor<AI_StateMachine_Shark.Message_NewAIShark_Update, float>>(() => FieldAccessor<AI_StateMachine_Shark.Message_NewAIShark_Update, float>.Create("rotY"));
		private static readonly System.Lazy<FieldAccessor<AI_StateMachine_Shark.Message_NewAIShark_Update, float>> _rotZ =
				new System.Lazy<FieldAccessor<AI_StateMachine_Shark.Message_NewAIShark_Update, float>>(() => FieldAccessor<AI_StateMachine_Shark.Message_NewAIShark_Update, float>.Create("rotZ"));

		public static float GetPosX(this AI_StateMachine_Shark.Message_NewAIShark_Update __self) => _posX.Value.GetValue(__self);
		public static void SetPosX(this AI_StateMachine_Shark.Message_NewAIShark_Update __self, float value) => _posX.Value.SetValue(__self, value);
		public static float GetPosY(this AI_StateMachine_Shark.Message_NewAIShark_Update __self) => _posY.Value.GetValue(__self);
		public static void SetPosY(this AI_StateMachine_Shark.Message_NewAIShark_Update __self, float value) => _posY.Value.SetValue(__self, value);
		public static float GetPosZ(this AI_StateMachine_Shark.Message_NewAIShark_Update __self) => _posZ.Value.GetValue(__self);
		public static void SetPosZ(this AI_StateMachine_Shark.Message_NewAIShark_Update __self, float value) => _posZ.Value.SetValue(__self, value);
		public static float GetRotX(this AI_StateMachine_Shark.Message_NewAIShark_Update __self) => _rotX.Value.GetValue(__self);
		public static void SetRotX(this AI_StateMachine_Shark.Message_NewAIShark_Update __self, float value) => _rotX.Value.SetValue(__self, value);
		public static float GetRotY(this AI_StateMachine_Shark.Message_NewAIShark_Update __self) => _rotY.Value.GetValue(__self);
		public static void SetRotY(this AI_StateMachine_Shark.Message_NewAIShark_Update __self, float value) => _rotY.Value.SetValue(__self, value);
		public static float GetRotZ(this AI_StateMachine_Shark.Message_NewAIShark_Update __self) => _rotZ.Value.GetValue(__self);
		public static void SetRotZ(this AI_StateMachine_Shark.Message_NewAIShark_Update __self, float value) => _rotZ.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_AI_StateMachine_StoneBird
	{

		private static readonly System.Lazy<FieldAccessor<AI_StateMachine_StoneBird, string>> _eventref_land =
				new System.Lazy<FieldAccessor<AI_StateMachine_StoneBird, string>>(() => FieldAccessor<AI_StateMachine_StoneBird, string>.Create("eventref_land"));
		private static readonly System.Lazy<FieldAccessor<AI_StateMachine_StoneBird, string>> _eventref_wingFlap =
				new System.Lazy<FieldAccessor<AI_StateMachine_StoneBird, string>>(() => FieldAccessor<AI_StateMachine_StoneBird, string>.Create("eventref_wingFlap"));
		private static readonly System.Lazy<FieldAccessor<AI_StateMachine_StoneBird, float>> _changeAnimFlySpeedDelay =
				new System.Lazy<FieldAccessor<AI_StateMachine_StoneBird, float>>(() => FieldAccessor<AI_StateMachine_StoneBird, float>.Create("changeAnimFlySpeedDelay"));
		private static readonly System.Lazy<FieldAccessor<AI_StateMachine_StoneBird, float>> _changeAnimFlySpeedTimer =
				new System.Lazy<FieldAccessor<AI_StateMachine_StoneBird, float>>(() => FieldAccessor<AI_StateMachine_StoneBird, float>.Create("changeAnimFlySpeedTimer"));
		private static readonly System.Lazy<FieldAccessor<AI_StateMachine_StoneBird, float>> _targetAnimflySpeed =
				new System.Lazy<FieldAccessor<AI_StateMachine_StoneBird, float>>(() => FieldAccessor<AI_StateMachine_StoneBird, float>.Create("targetAnimflySpeed"));
		private static readonly System.Lazy<FieldAccessor<AI_StateMachine_StoneBird, float>> _flySpeed =
				new System.Lazy<FieldAccessor<AI_StateMachine_StoneBird, float>>(() => FieldAccessor<AI_StateMachine_StoneBird, float>.Create("flySpeed"));

		public static string GetEventref_land(this AI_StateMachine_StoneBird __self) => _eventref_land.Value.GetValue(__self);
		public static void SetEventref_land(this AI_StateMachine_StoneBird __self, string value) => _eventref_land.Value.SetValue(__self, value);
		public static string GetEventref_wingFlap(this AI_StateMachine_StoneBird __self) => _eventref_wingFlap.Value.GetValue(__self);
		public static void SetEventref_wingFlap(this AI_StateMachine_StoneBird __self, string value) => _eventref_wingFlap.Value.SetValue(__self, value);
		public static float GetChangeAnimFlySpeedDelay(this AI_StateMachine_StoneBird __self) => _changeAnimFlySpeedDelay.Value.GetValue(__self);
		public static void SetChangeAnimFlySpeedDelay(this AI_StateMachine_StoneBird __self, float value) => _changeAnimFlySpeedDelay.Value.SetValue(__self, value);
		public static float GetChangeAnimFlySpeedTimer(this AI_StateMachine_StoneBird __self) => _changeAnimFlySpeedTimer.Value.GetValue(__self);
		public static void SetChangeAnimFlySpeedTimer(this AI_StateMachine_StoneBird __self, float value) => _changeAnimFlySpeedTimer.Value.SetValue(__self, value);
		public static float GetTargetAnimflySpeed(this AI_StateMachine_StoneBird __self) => _targetAnimflySpeed.Value.GetValue(__self);
		public static void SetTargetAnimflySpeed(this AI_StateMachine_StoneBird __self, float value) => _targetAnimflySpeed.Value.SetValue(__self, value);
		public static float GetFlySpeed(this AI_StateMachine_StoneBird __self) => _flySpeed.Value.GetValue(__self);
		public static void SetFlySpeed(this AI_StateMachine_StoneBird __self, float value) => _flySpeed.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_StateMachine_StoneBird>> _UpdateStateMachine757602046 =
				new System.Lazy<MethodAccessor<AI_StateMachine_StoneBird>>(() => MethodAccessor<AI_StateMachine_StoneBird>.Create("UpdateStateMachine"));
		private static readonly System.Lazy<MethodAccessor<AI_StateMachine_StoneBird>> _OnStartLanding757602046 =
				new System.Lazy<MethodAccessor<AI_StateMachine_StoneBird>>(() => MethodAccessor<AI_StateMachine_StoneBird>.Create("OnStartLanding"));
		private static readonly System.Lazy<MethodAccessor<AI_StateMachine_StoneBird>> _OnFinishedLanding757602046 =
				new System.Lazy<MethodAccessor<AI_StateMachine_StoneBird>>(() => MethodAccessor<AI_StateMachine_StoneBird>.Create("OnFinishedLanding"));
		private static readonly System.Lazy<MethodAccessor<AI_StateMachine_StoneBird>> _OnDamageTaken2475015728 =
				new System.Lazy<MethodAccessor<AI_StateMachine_StoneBird>>(() => MethodAccessor<AI_StateMachine_StoneBird>.Create("OnDamageTaken", typeof(float), typeof(UnityEngine.Vector3), typeof(UnityEngine.Vector3), typeof(EntityType)));
		private static readonly System.Lazy<MethodAccessor<AI_StateMachine_StoneBird>> _SetAnimFlySpeed757602046 =
				new System.Lazy<MethodAccessor<AI_StateMachine_StoneBird>>(() => MethodAccessor<AI_StateMachine_StoneBird>.Create("SetAnimFlySpeed"));

		public static void UpdateStateMachine(this AI_StateMachine_StoneBird __self) => _UpdateStateMachine757602046.Value.Invoke(__self);
		public static void OnStartLanding(this AI_StateMachine_StoneBird __self) => _OnStartLanding757602046.Value.Invoke(__self);
		public static void OnFinishedLanding(this AI_StateMachine_StoneBird __self) => _OnFinishedLanding757602046.Value.Invoke(__self);
		public static void OnDamageTaken(this AI_StateMachine_StoneBird __self, float damage, UnityEngine.Vector3 hitPoint, UnityEngine.Vector3 hitNormal, EntityType damageType) => _OnDamageTaken2475015728.Value.Invoke(__self, damage, hitPoint, hitNormal, damageType);
		public static void SetAnimFlySpeed(this AI_StateMachine_StoneBird __self) => _SetAnimFlySpeed757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AI_Statemachine_NPC
	{

		private static readonly System.Lazy<FieldAccessor<AI_Statemachine_NPC, AI_State_Waypoint_Circulation>> _state_circulation =
				new System.Lazy<FieldAccessor<AI_Statemachine_NPC, AI_State_Waypoint_Circulation>>(() => FieldAccessor<AI_Statemachine_NPC, AI_State_Waypoint_Circulation>.Create("state_circulation"));
		private static readonly System.Lazy<FieldAccessor<AI_Statemachine_NPC, AI_State_MoveToInterest>> _state_moveToInterest =
				new System.Lazy<FieldAccessor<AI_Statemachine_NPC, AI_State_MoveToInterest>>(() => FieldAccessor<AI_Statemachine_NPC, AI_State_MoveToInterest>.Create("state_moveToInterest"));
		private static readonly System.Lazy<FieldAccessor<AI_Statemachine_NPC, AI_State_Wait_Dialogue>> _state_waitDialogue =
				new System.Lazy<FieldAccessor<AI_Statemachine_NPC, AI_State_Wait_Dialogue>>(() => FieldAccessor<AI_Statemachine_NPC, AI_State_Wait_Dialogue>.Create("state_waitDialogue"));
		private static readonly System.Lazy<FieldAccessor<AI_Statemachine_NPC, AI_Dialogue>> _aiDialogue =
				new System.Lazy<FieldAccessor<AI_Statemachine_NPC, AI_Dialogue>>(() => FieldAccessor<AI_Statemachine_NPC, AI_Dialogue>.Create("aiDialogue"));
		private static readonly System.Lazy<FieldAccessor<AI_Statemachine_NPC, AI_Interest>> _aiInterest =
				new System.Lazy<FieldAccessor<AI_Statemachine_NPC, AI_Interest>>(() => FieldAccessor<AI_Statemachine_NPC, AI_Interest>.Create("aiInterest"));
		private static readonly System.Lazy<FieldAccessor<AI_Statemachine_NPC, TimerEventer>> _interestTimer =
				new System.Lazy<FieldAccessor<AI_Statemachine_NPC, TimerEventer>>(() => FieldAccessor<AI_Statemachine_NPC, TimerEventer>.Create("interestTimer"));
		private static readonly System.Lazy<FieldAccessor<AI_Statemachine_NPC, UnityEngine.Transform>> _modelParent =
				new System.Lazy<FieldAccessor<AI_Statemachine_NPC, UnityEngine.Transform>>(() => FieldAccessor<AI_Statemachine_NPC, UnityEngine.Transform>.Create("modelParent"));

		public static AI_State_Waypoint_Circulation GetState_circulation(this AI_Statemachine_NPC __self) => _state_circulation.Value.GetValue(__self);
		public static void SetState_circulation(this AI_Statemachine_NPC __self, AI_State_Waypoint_Circulation value) => _state_circulation.Value.SetValue(__self, value);
		public static AI_State_MoveToInterest GetState_moveToInterest(this AI_Statemachine_NPC __self) => _state_moveToInterest.Value.GetValue(__self);
		public static void SetState_moveToInterest(this AI_Statemachine_NPC __self, AI_State_MoveToInterest value) => _state_moveToInterest.Value.SetValue(__self, value);
		public static AI_State_Wait_Dialogue GetState_waitDialogue(this AI_Statemachine_NPC __self) => _state_waitDialogue.Value.GetValue(__self);
		public static void SetState_waitDialogue(this AI_Statemachine_NPC __self, AI_State_Wait_Dialogue value) => _state_waitDialogue.Value.SetValue(__self, value);
		public static AI_Dialogue GetAiDialogue(this AI_Statemachine_NPC __self) => _aiDialogue.Value.GetValue(__self);
		public static void SetAiDialogue(this AI_Statemachine_NPC __self, AI_Dialogue value) => _aiDialogue.Value.SetValue(__self, value);
		public static AI_Interest GetAiInterest(this AI_Statemachine_NPC __self) => _aiInterest.Value.GetValue(__self);
		public static void SetAiInterest(this AI_Statemachine_NPC __self, AI_Interest value) => _aiInterest.Value.SetValue(__self, value);
		public static TimerEventer GetInterestTimer(this AI_Statemachine_NPC __self) => _interestTimer.Value.GetValue(__self);
		public static void SetInterestTimer(this AI_Statemachine_NPC __self, TimerEventer value) => _interestTimer.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetModelParent(this AI_Statemachine_NPC __self) => _modelParent.Value.GetValue(__self);
		public static void SetModelParent(this AI_Statemachine_NPC __self, UnityEngine.Transform value) => _modelParent.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_Statemachine_NPC>> _OnAnimatorMessage3454057852 =
				new System.Lazy<MethodAccessor<AI_Statemachine_NPC>>(() => MethodAccessor<AI_Statemachine_NPC>.Create("OnAnimatorMessage", typeof(string)));
		private static readonly System.Lazy<MethodAccessor<AI_Statemachine_NPC>> _OnHandleInterest757602046 =
				new System.Lazy<MethodAccessor<AI_Statemachine_NPC>>(() => MethodAccessor<AI_Statemachine_NPC>.Create("OnHandleInterest"));
		private static readonly System.Lazy<MethodAccessor<AI_Statemachine_NPC>> _UpdateStateMachine757602046 =
				new System.Lazy<MethodAccessor<AI_Statemachine_NPC>>(() => MethodAccessor<AI_Statemachine_NPC>.Create("UpdateStateMachine"));
		private static readonly System.Lazy<MethodAccessor<AI_Statemachine_NPC>> _SetupNPC757602046 =
				new System.Lazy<MethodAccessor<AI_Statemachine_NPC>>(() => MethodAccessor<AI_Statemachine_NPC>.Create("SetupNPC"));

		public static void OnAnimatorMessage(this AI_Statemachine_NPC __self, string message) => _OnAnimatorMessage3454057852.Value.Invoke(__self, message);
		public static void OnHandleInterest(this AI_Statemachine_NPC __self) => _OnHandleInterest757602046.Value.Invoke(__self);
		public static void UpdateStateMachine(this AI_Statemachine_NPC __self) => _UpdateStateMachine757602046.Value.Invoke(__self);
		public static void SetupNPC(this AI_Statemachine_NPC __self) => _SetupNPC757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_ActivateUnderWater
	{

		private static readonly System.Lazy<FieldAccessor<ActivateUnderWater, UltimateWater.SubmersionState>> _submersionState =
				new System.Lazy<FieldAccessor<ActivateUnderWater, UltimateWater.SubmersionState>>(() => FieldAccessor<ActivateUnderWater, UltimateWater.SubmersionState>.Create("submersionState"));

		public static UltimateWater.SubmersionState GetSubmersionState(this ActivateUnderWater __self) => _submersionState.Value.GetValue(__self);
		public static void SetSubmersionState(this ActivateUnderWater __self, UltimateWater.SubmersionState value) => _submersionState.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<ActivateUnderWater>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<ActivateUnderWater>>(() => MethodAccessor<ActivateUnderWater>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<ActivateUnderWater>> _OnEnable757602046 =
				new System.Lazy<MethodAccessor<ActivateUnderWater>>(() => MethodAccessor<ActivateUnderWater>.Create("OnEnable"));
		private static readonly System.Lazy<MethodAccessor<ActivateUnderWater>> _PersonController_CameraSubmersionStateEvent3450800533 =
				new System.Lazy<MethodAccessor<ActivateUnderWater>>(() => MethodAccessor<ActivateUnderWater>.Create("PersonController_CameraSubmersionStateEvent", typeof(UltimateWater.SubmersionState)));
		private static readonly System.Lazy<MethodAccessor<ActivateUnderWater>> _SetActiveState757602046 =
				new System.Lazy<MethodAccessor<ActivateUnderWater>>(() => MethodAccessor<ActivateUnderWater>.Create("SetActiveState"));

		public static void OnDestroy(this ActivateUnderWater __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void OnEnable(this ActivateUnderWater __self) => _OnEnable757602046.Value.Invoke(__self);
		public static void PersonController_CameraSubmersionStateEvent(this ActivateUnderWater __self, UltimateWater.SubmersionState state) => _PersonController_CameraSubmersionStateEvent3450800533.Value.Invoke(__self, state);
		public static void SetActiveState(this ActivateUnderWater __self) => _SetActiveState757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AnimationOffset
	{

		private static readonly System.Lazy<FieldAccessor<AnimationOffset, UnityEngine.Animator>> _anim =
				new System.Lazy<FieldAccessor<AnimationOffset, UnityEngine.Animator>>(() => FieldAccessor<AnimationOffset, UnityEngine.Animator>.Create("anim"));

		public static UnityEngine.Animator GetAnim(this AnimationOffset __self) => _anim.Value.GetValue(__self);
		public static void SetAnim(this AnimationOffset __self, UnityEngine.Animator value) => _anim.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AnimationOffset>> _Start757602046 =
				new System.Lazy<MethodAccessor<AnimationOffset>>(() => MethodAccessor<AnimationOffset>.Create("Start"));

		public static void Start(this AnimationOffset __self) => _Start757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AssetBundleHooker
	{

		private static readonly System.Lazy<FieldAccessor<AssetBundleHooker, AssetBundleManager>> _bundleManager =
				new System.Lazy<FieldAccessor<AssetBundleHooker, AssetBundleManager>>(() => FieldAccessor<AssetBundleHooker, AssetBundleManager>.Create("bundleManager"));

		public static AssetBundleManager GetBundleManager(this AssetBundleHooker __self) => _bundleManager.Value.GetValue(__self);
		public static void SetBundleManager(this AssetBundleHooker __self, AssetBundleManager value) => _bundleManager.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AssetBundleHooker>> _Awake757602046 =
				new System.Lazy<MethodAccessor<AssetBundleHooker>>(() => MethodAccessor<AssetBundleHooker>.Create("Awake"));

		public static void Awake(this AssetBundleHooker __self) => _Awake757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AssetBundleManager
	{

		private static readonly System.Lazy<FieldAccessor<AssetBundleManager, System.Collections.Generic.List<AsyncedLandmark>>> _asyncedLandmarks =
				new System.Lazy<FieldAccessor<AssetBundleManager, System.Collections.Generic.List<AsyncedLandmark>>>(() => FieldAccessor<AssetBundleManager, System.Collections.Generic.List<AsyncedLandmark>>.Create("asyncedLandmarks"));
		private static readonly System.Lazy<FieldAccessor<AssetBundleManager, string>> _assetBundleTag =
				new System.Lazy<FieldAccessor<AssetBundleManager, string>>(() => FieldAccessor<AssetBundleManager, string>.Create("assetBundleTag"));
		private static readonly System.Lazy<FieldAccessor<AssetBundleManager, string>> _fileDirectory =
				new System.Lazy<FieldAccessor<AssetBundleManager, string>>(() => FieldAccessor<AssetBundleManager, string>.Create("fileDirectory"));
		private static readonly System.Lazy<FieldAccessor<AssetBundleManager, AssetBundleHooker>> _assetHooker =
				new System.Lazy<FieldAccessor<AssetBundleManager, AssetBundleHooker>>(() => FieldAccessor<AssetBundleManager, AssetBundleHooker>.Create("assetHooker"));
		private static readonly System.Lazy<FieldAccessor<AssetBundleManager, UnityEngine.AssetBundle>> _bundleLandmark =
				new System.Lazy<FieldAccessor<AssetBundleManager, UnityEngine.AssetBundle>>(() => FieldAccessor<AssetBundleManager, UnityEngine.AssetBundle>.Create("bundleLandmark"));
		private static readonly System.Lazy<FieldAccessor<AssetBundleManager, UnityEngine.Coroutine>> _loadSceneEnumerator =
				new System.Lazy<FieldAccessor<AssetBundleManager, UnityEngine.Coroutine>>(() => FieldAccessor<AssetBundleManager, UnityEngine.Coroutine>.Create("loadSceneEnumerator"));
		private static readonly System.Lazy<FieldAccessor<AssetBundleManager, UnityEngine.Coroutine>> _loadBundleEnumerator =
				new System.Lazy<FieldAccessor<AssetBundleManager, UnityEngine.Coroutine>>(() => FieldAccessor<AssetBundleManager, UnityEngine.Coroutine>.Create("loadBundleEnumerator"));

		public static System.Collections.Generic.List<AsyncedLandmark> GetAsyncedLandmarks(this AssetBundleManager __self) => _asyncedLandmarks.Value.GetValue(__self);
		public static void SetAsyncedLandmarks(this AssetBundleManager __self, System.Collections.Generic.List<AsyncedLandmark> value) => _asyncedLandmarks.Value.SetValue(__self, value);
		public static string GetAssetBundleTag(this AssetBundleManager __self) => _assetBundleTag.Value.GetValue(__self);
		public static void SetAssetBundleTag(this AssetBundleManager __self, string value) => _assetBundleTag.Value.SetValue(__self, value);
		public static string GetFileDirectory(this AssetBundleManager __self) => _fileDirectory.Value.GetValue(__self);
		public static void SetFileDirectory(this AssetBundleManager __self, string value) => _fileDirectory.Value.SetValue(__self, value);
		public static AssetBundleHooker GetAssetHooker(this AssetBundleManager __self) => _assetHooker.Value.GetValue(__self);
		public static void SetAssetHooker(this AssetBundleManager __self, AssetBundleHooker value) => _assetHooker.Value.SetValue(__self, value);
		public static UnityEngine.AssetBundle GetBundleLandmark(this AssetBundleManager __self) => _bundleLandmark.Value.GetValue(__self);
		public static void SetBundleLandmark(this AssetBundleManager __self, UnityEngine.AssetBundle value) => _bundleLandmark.Value.SetValue(__self, value);
		public static UnityEngine.Coroutine GetLoadSceneEnumerator(this AssetBundleManager __self) => _loadSceneEnumerator.Value.GetValue(__self);
		public static void SetLoadSceneEnumerator(this AssetBundleManager __self, UnityEngine.Coroutine value) => _loadSceneEnumerator.Value.SetValue(__self, value);
		public static UnityEngine.Coroutine GetLoadBundleEnumerator(this AssetBundleManager __self) => _loadBundleEnumerator.Value.GetValue(__self);
		public static void SetLoadBundleEnumerator(this AssetBundleManager __self, UnityEngine.Coroutine value) => _loadBundleEnumerator.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AssetBundleManager>> _OnApplicationQuit757602046 =
				new System.Lazy<MethodAccessor<AssetBundleManager>>(() => MethodAccessor<AssetBundleManager>.Create("OnApplicationQuit"));
		private static readonly System.Lazy<MethodAccessor<AssetBundleManager>> _Awake757602046 =
				new System.Lazy<MethodAccessor<AssetBundleManager>>(() => MethodAccessor<AssetBundleManager>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<AssetBundleManager>> _Start757602046 =
				new System.Lazy<MethodAccessor<AssetBundleManager>>(() => MethodAccessor<AssetBundleManager>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<AssetBundleManager>> _SceneLoad1466693196 =
				new System.Lazy<MethodAccessor<AssetBundleManager>>(() => MethodAccessor<AssetBundleManager>.Create("SceneLoad", typeof(UnityEngine.SceneManagement.Scene), typeof(UnityEngine.SceneManagement.LoadSceneMode)));
		private static readonly System.Lazy<MethodAccessor<AssetBundleManager>> _LoadSpecificScene3454057852 =
				new System.Lazy<MethodAccessor<AssetBundleManager>>(() => MethodAccessor<AssetBundleManager>.Create("LoadSpecificScene", typeof(string)));
		private static readonly System.Lazy<MethodAccessor<AssetBundleManager>> _waitAFrameCosWaitForSceneObjects757602046 =
				new System.Lazy<MethodAccessor<AssetBundleManager>>(() => MethodAccessor<AssetBundleManager>.Create("waitAFrameCosWaitForSceneObjects"));
		private static readonly System.Lazy<MethodAccessor<AssetBundleManager>> _LoadScenePaths757602046 =
				new System.Lazy<MethodAccessor<AssetBundleManager>>(() => MethodAccessor<AssetBundleManager>.Create("LoadScenePaths"));
		private static readonly System.Lazy<MethodAccessor<AssetBundleManager>> _LoadBundleFromFileAsync757602046 =
				new System.Lazy<MethodAccessor<AssetBundleManager>>(() => MethodAccessor<AssetBundleManager>.Create("LoadBundleFromFileAsync"));
		private static readonly System.Lazy<MethodAccessor<AssetBundleManager>> _CheckIfSceneLoadingIsDone757602046 =
				new System.Lazy<MethodAccessor<AssetBundleManager>>(() => MethodAccessor<AssetBundleManager>.Create("CheckIfSceneLoadingIsDone"));
		private static readonly System.Lazy<MethodAccessor<AssetBundleManager>> _UnloadBundle3450040886 =
				new System.Lazy<MethodAccessor<AssetBundleManager>>(() => MethodAccessor<AssetBundleManager>.Create("UnloadBundle", typeof(bool)));

		public static void OnApplicationQuit(this AssetBundleManager __self) => _OnApplicationQuit757602046.Value.Invoke(__self);
		public static void Awake(this AssetBundleManager __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this AssetBundleManager __self) => _Start757602046.Value.Invoke(__self);
		public static void SceneLoad(this AssetBundleManager __self, UnityEngine.SceneManagement.Scene scene, UnityEngine.SceneManagement.LoadSceneMode mode) => _SceneLoad1466693196.Value.Invoke(__self, scene, mode);
		public static System.Collections.IEnumerator LoadSpecificScene(this AssetBundleManager __self, string specificSceneName) => (System.Collections.IEnumerator)_LoadSpecificScene3454057852.Value.Invoke(__self, specificSceneName);
		public static void waitAFrameCosWaitForSceneObjects(this AssetBundleManager __self) => _waitAFrameCosWaitForSceneObjects757602046.Value.Invoke(__self);
		public static System.Collections.IEnumerator LoadScenePaths(this AssetBundleManager __self) => (System.Collections.IEnumerator)_LoadScenePaths757602046.Value.Invoke(__self);
		public static System.Collections.IEnumerator LoadBundleFromFileAsync(this AssetBundleManager __self) => (System.Collections.IEnumerator)_LoadBundleFromFileAsync757602046.Value.Invoke(__self);
		public static void CheckIfSceneLoadingIsDone(this AssetBundleManager __self) => _CheckIfSceneLoadingIsDone757602046.Value.Invoke(__self);
		public static void UnloadBundle(this AssetBundleManager __self, bool removeObjects) => _UnloadBundle3450040886.Value.Invoke(__self, removeObjects);

	}

	public static class Private_AssetBundleManager
	{

		private static readonly System.Lazy<StaticFieldAccessor<string>> _fullFilePath =
				new System.Lazy<StaticFieldAccessor<string>>(() => StaticFieldAccessor<string>.Create(typeof(AssetBundleManager), "fullFilePath"));
		private static readonly System.Lazy<StaticFieldAccessor<bool>> _allScenesLoaded =
				new System.Lazy<StaticFieldAccessor<bool>>(() => StaticFieldAccessor<bool>.Create(typeof(AssetBundleManager), "allScenesLoaded"));
		private static readonly System.Lazy<StaticFieldAccessor<bool>> _startedLoadingBundle =
				new System.Lazy<StaticFieldAccessor<bool>>(() => StaticFieldAccessor<bool>.Create(typeof(AssetBundleManager), "startedLoadingBundle"));
		private static readonly System.Lazy<StaticFieldAccessor<bool>> _startedLoadingScenes =
				new System.Lazy<StaticFieldAccessor<bool>>(() => StaticFieldAccessor<bool>.Create(typeof(AssetBundleManager), "startedLoadingScenes"));

		public static string GetFullFilePath() => _fullFilePath.Value.GetValue();
		public static void SetFullFilePath(string value) => _fullFilePath.Value.SetValue(value);
		public static bool GetAllScenesLoaded() => _allScenesLoaded.Value.GetValue();
		public static void SetAllScenesLoaded(bool value) => _allScenesLoaded.Value.SetValue(value);
		public static bool GetStartedLoadingBundle() => _startedLoadingBundle.Value.GetValue();
		public static void SetStartedLoadingBundle(bool value) => _startedLoadingBundle.Value.SetValue(value);
		public static bool GetStartedLoadingScenes() => _startedLoadingScenes.Value.GetValue();
		public static void SetStartedLoadingScenes(bool value) => _startedLoadingScenes.Value.SetValue(value);

		private static readonly System.Lazy<StaticMethodAccessor> _CreateAssetBundleDirectory757602046 =
				new System.Lazy<StaticMethodAccessor>(() => StaticMethodAccessor.Create(typeof(AssetBundleManager), "CreateAssetBundleDirectory"));

		public static void CreateAssetBundleDirectory() => _CreateAssetBundleDirectory757602046.Value.Invoke();

	}

	public static class PrivateAccessor_SteamKeyJumper
	{

		private static readonly System.Lazy<MethodAccessor<SteamKeyJumper>> _Start757602046 =
				new System.Lazy<MethodAccessor<SteamKeyJumper>>(() => MethodAccessor<SteamKeyJumper>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<SteamKeyJumper>> _Jump757602046 =
				new System.Lazy<MethodAccessor<SteamKeyJumper>>(() => MethodAccessor<SteamKeyJumper>.Create("Jump"));

		public static void Start(this SteamKeyJumper __self) => _Start757602046.Value.Invoke(__self);
		public static System.Collections.IEnumerator Jump(this SteamKeyJumper __self) => (System.Collections.IEnumerator)_Jump757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_SteamKeyRGD
	{

		private static readonly System.Lazy<MethodAccessor<SteamKeyRGD>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<SteamKeyRGD>>(() => MethodAccessor<SteamKeyRGD>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this SteamKeyRGD __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_SteamKeyValidity
	{

		private static readonly System.Lazy<FieldAccessor<SteamKeyValidity, SteamKeyRGD>> _data =
				new System.Lazy<FieldAccessor<SteamKeyValidity, SteamKeyRGD>>(() => FieldAccessor<SteamKeyValidity, SteamKeyRGD>.Create("data"));
		private static readonly System.Lazy<FieldAccessor<SteamKeyValidity, string>> _path =
				new System.Lazy<FieldAccessor<SteamKeyValidity, string>>(() => FieldAccessor<SteamKeyValidity, string>.Create("path"));

		public static SteamKeyRGD GetData(this SteamKeyValidity __self) => _data.Value.GetValue(__self);
		public static void SetData(this SteamKeyValidity __self, SteamKeyRGD value) => _data.Value.SetValue(__self, value);
		public static string GetPath(this SteamKeyValidity __self) => _path.Value.GetValue(__self);
		public static void SetPath(this SteamKeyValidity __self, string value) => _path.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<SteamKeyValidity>> _Awake757602046 =
				new System.Lazy<MethodAccessor<SteamKeyValidity>>(() => MethodAccessor<SteamKeyValidity>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<SteamKeyValidity>> _LooksLikeSteamKey3462941058 =
				new System.Lazy<MethodAccessor<SteamKeyValidity>>(() => MethodAccessor<SteamKeyValidity>.Create("LooksLikeSteamKey", typeof(System.String[])));
		private static readonly System.Lazy<MethodAccessor<SteamKeyValidity>> _CreateKeyRGD757602046 =
				new System.Lazy<MethodAccessor<SteamKeyValidity>>(() => MethodAccessor<SteamKeyValidity>.Create("CreateKeyRGD"));
		private static readonly System.Lazy<MethodAccessor<SteamKeyValidity>> _LoadKeyRGD757602046 =
				new System.Lazy<MethodAccessor<SteamKeyValidity>>(() => MethodAccessor<SteamKeyValidity>.Create("LoadKeyRGD"));
		private static readonly System.Lazy<MethodAccessor<SteamKeyValidity>> _LoadKeys757602046 =
				new System.Lazy<MethodAccessor<SteamKeyValidity>>(() => MethodAccessor<SteamKeyValidity>.Create("LoadKeys"));

		public static void Awake(this SteamKeyValidity __self) => _Awake757602046.Value.Invoke(__self);
		public static bool LooksLikeSteamKey(this SteamKeyValidity __self, System.String[] keySplit) => (bool)_LooksLikeSteamKey3462941058.Value.Invoke(__self, keySplit);
		public static void CreateKeyRGD(this SteamKeyValidity __self) => _CreateKeyRGD757602046.Value.Invoke(__self);
		public static void LoadKeyRGD(this SteamKeyValidity __self) => _LoadKeyRGD757602046.Value.Invoke(__self);
		public static void LoadKeys(this SteamKeyValidity __self) => _LoadKeys757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_BiomeZoneManager
	{

		private static readonly System.Lazy<FieldAccessor<BiomeZoneManager, UnityEngine.Transform>> __raftTransform =
				new System.Lazy<FieldAccessor<BiomeZoneManager, UnityEngine.Transform>>(() => FieldAccessor<BiomeZoneManager, UnityEngine.Transform>.Create("_raftTransform"));
		private static readonly System.Lazy<FieldAccessor<BiomeZoneManager, Network_Player>> _networkPlayer =
				new System.Lazy<FieldAccessor<BiomeZoneManager, Network_Player>>(() => FieldAccessor<BiomeZoneManager, Network_Player>.Create("networkPlayer"));

		public static UnityEngine.Transform Get_raftTransform(this BiomeZoneManager __self) => __raftTransform.Value.GetValue(__self);
		public static void Set_raftTransform(this BiomeZoneManager __self, UnityEngine.Transform value) => __raftTransform.Value.SetValue(__self, value);
		public static Network_Player GetNetworkPlayer(this BiomeZoneManager __self) => _networkPlayer.Value.GetValue(__self);
		public static void SetNetworkPlayer(this BiomeZoneManager __self, Network_Player value) => _networkPlayer.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<BiomeZoneManager>> _Start757602046 =
				new System.Lazy<MethodAccessor<BiomeZoneManager>>(() => MethodAccessor<BiomeZoneManager>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<BiomeZoneManager>> _Update757602046 =
				new System.Lazy<MethodAccessor<BiomeZoneManager>>(() => MethodAccessor<BiomeZoneManager>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<BiomeZoneManager>> _OnDrawGizmos757602046 =
				new System.Lazy<MethodAccessor<BiomeZoneManager>>(() => MethodAccessor<BiomeZoneManager>.Create("OnDrawGizmos"));
		private static readonly System.Lazy<MethodAccessor<BiomeZoneManager>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<BiomeZoneManager>>(() => MethodAccessor<BiomeZoneManager>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<BiomeZoneManager>> _CleanUp757602046 =
				new System.Lazy<MethodAccessor<BiomeZoneManager>>(() => MethodAccessor<BiomeZoneManager>.Create("CleanUp"));
		private static readonly System.Lazy<MethodAccessor<BiomeZoneManager>> _OnWorldShift3429126434 =
				new System.Lazy<MethodAccessor<BiomeZoneManager>>(() => MethodAccessor<BiomeZoneManager>.Create("OnWorldShift", typeof(UnityEngine.Vector3)));
		private static readonly System.Lazy<MethodAccessor<BiomeZoneManager>> _CheckIfPlayersAreInBounds757602046 =
				new System.Lazy<MethodAccessor<BiomeZoneManager>>(() => MethodAccessor<BiomeZoneManager>.Create("CheckIfPlayersAreInBounds"));

		public static void Start(this BiomeZoneManager __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this BiomeZoneManager __self) => _Update757602046.Value.Invoke(__self);
		public static void OnDrawGizmos(this BiomeZoneManager __self) => _OnDrawGizmos757602046.Value.Invoke(__self);
		public static void OnDestroy(this BiomeZoneManager __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void CleanUp(this BiomeZoneManager __self) => _CleanUp757602046.Value.Invoke(__self);
		public static void OnWorldShift(this BiomeZoneManager __self, UnityEngine.Vector3 shift) => _OnWorldShift3429126434.Value.Invoke(__self, shift);
		public static void CheckIfPlayersAreInBounds(this BiomeZoneManager __self) => _CheckIfPlayersAreInBounds757602046.Value.Invoke(__self);

	}

	public static class Private_BiomeZoneManager
	{

		private static readonly System.Lazy<StaticFieldAccessor<BiomeZone>> _currentBiome =
				new System.Lazy<StaticFieldAccessor<BiomeZone>>(() => StaticFieldAccessor<BiomeZone>.Create(typeof(BiomeZoneManager), "currentBiome"));

		public static BiomeZone GetCurrentBiome() => _currentBiome.Value.GetValue();
		public static void SetCurrentBiome(BiomeZone value) => _currentBiome.Value.SetValue(value);

	}

	public static class PrivateAccessor_BobTransform
	{

		private static readonly System.Lazy<FieldAccessor<BobTransform, UnityEngine.Vector3>> _startPos =
				new System.Lazy<FieldAccessor<BobTransform, UnityEngine.Vector3>>(() => FieldAccessor<BobTransform, UnityEngine.Vector3>.Create("startPos"));

		public static UnityEngine.Vector3 GetStartPos(this BobTransform __self) => _startPos.Value.GetValue(__self);
		public static void SetStartPos(this BobTransform __self, UnityEngine.Vector3 value) => _startPos.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<BobTransform>> _Start757602046 =
				new System.Lazy<MethodAccessor<BobTransform>>(() => MethodAccessor<BobTransform>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<BobTransform>> _Update757602046 =
				new System.Lazy<MethodAccessor<BobTransform>>(() => MethodAccessor<BobTransform>.Create("Update"));

		public static void Start(this BobTransform __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this BobTransform __self) => _Update757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Buff
	{

		private static readonly System.Lazy<FieldAccessor<Buff, SO_Buff>> _buffAsset =
				new System.Lazy<FieldAccessor<Buff, SO_Buff>>(() => FieldAccessor<Buff, SO_Buff>.Create("buffAsset"));
		private static readonly System.Lazy<FieldAccessor<Buff, BuffManager>> _buffManager =
				new System.Lazy<FieldAccessor<Buff, BuffManager>>(() => FieldAccessor<Buff, BuffManager>.Create("buffManager"));
		private static readonly System.Lazy<FieldAccessor<Buff, float>> _durationTimer =
				new System.Lazy<FieldAccessor<Buff, float>>(() => FieldAccessor<Buff, float>.Create("durationTimer"));
		private static readonly System.Lazy<FieldAccessor<Buff, BuffDisplayObject>> _buffDisplayObject =
				new System.Lazy<FieldAccessor<Buff, BuffDisplayObject>>(() => FieldAccessor<Buff, BuffDisplayObject>.Create("buffDisplayObject"));

		public static SO_Buff GetBuffAsset(this Buff __self) => _buffAsset.Value.GetValue(__self);
		public static void SetBuffAsset(this Buff __self, SO_Buff value) => _buffAsset.Value.SetValue(__self, value);
		public static BuffManager GetBuffManager(this Buff __self) => _buffManager.Value.GetValue(__self);
		public static void SetBuffManager(this Buff __self, BuffManager value) => _buffManager.Value.SetValue(__self, value);
		public static float GetDurationTimer(this Buff __self) => _durationTimer.Value.GetValue(__self);
		public static void SetDurationTimer(this Buff __self, float value) => _durationTimer.Value.SetValue(__self, value);
		public static BuffDisplayObject GetBuffDisplayObject(this Buff __self) => _buffDisplayObject.Value.GetValue(__self);
		public static void SetBuffDisplayObject(this Buff __self, BuffDisplayObject value) => _buffDisplayObject.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Buff>> _RefreshBuffUI757602046 =
				new System.Lazy<MethodAccessor<Buff>>(() => MethodAccessor<Buff>.Create("RefreshBuffUI"));

		public static void RefreshBuffUI(this Buff __self) => _RefreshBuffUI757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_RGD_Buff
	{

		private static readonly System.Lazy<FieldAccessor<RGD_Buff, int>> _u =
				new System.Lazy<FieldAccessor<RGD_Buff, int>>(() => FieldAccessor<RGD_Buff, int>.Create("u"));
		private static readonly System.Lazy<FieldAccessor<RGD_Buff, float>> _n =
				new System.Lazy<FieldAccessor<RGD_Buff, float>>(() => FieldAccessor<RGD_Buff, float>.Create("n"));

		public static int GetU(this RGD_Buff __self) => _u.Value.GetValue(__self);
		public static void SetU(this RGD_Buff __self, int value) => _u.Value.SetValue(__self, value);
		public static float GetN(this RGD_Buff __self) => _n.Value.GetValue(__self);
		public static void SetN(this RGD_Buff __self, float value) => _n.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<RGD_Buff>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_Buff>>(() => MethodAccessor<RGD_Buff>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_Buff __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_BuffManager
	{

		private static readonly System.Lazy<FieldAccessor<BuffManager, Network_Entity>> _entity =
				new System.Lazy<FieldAccessor<BuffManager, Network_Entity>>(() => FieldAccessor<BuffManager, Network_Entity>.Create("entity"));
		private static readonly System.Lazy<FieldAccessor<BuffManager, BuffUpdateResult>> _result =
				new System.Lazy<FieldAccessor<BuffManager, BuffUpdateResult>>(() => FieldAccessor<BuffManager, BuffUpdateResult>.Create("result"));
		private static readonly System.Lazy<FieldAccessor<BuffManager, Network_Host>> _networkHost =
				new System.Lazy<FieldAccessor<BuffManager, Network_Host>>(() => FieldAccessor<BuffManager, Network_Host>.Create("networkHost"));
		private static readonly System.Lazy<FieldAccessor<BuffManager, bool>> _isAttachedToPlayer =
				new System.Lazy<FieldAccessor<BuffManager, bool>>(() => FieldAccessor<BuffManager, bool>.Create("isAttachedToPlayer"));

		public static Network_Entity GetEntity(this BuffManager __self) => _entity.Value.GetValue(__self);
		public static void SetEntity(this BuffManager __self, Network_Entity value) => _entity.Value.SetValue(__self, value);
		public static BuffUpdateResult GetResult(this BuffManager __self) => _result.Value.GetValue(__self);
		public static void SetResult(this BuffManager __self, BuffUpdateResult value) => _result.Value.SetValue(__self, value);
		public static Network_Host GetNetworkHost(this BuffManager __self) => _networkHost.Value.GetValue(__self);
		public static void SetNetworkHost(this BuffManager __self, Network_Host value) => _networkHost.Value.SetValue(__self, value);
		public static bool GetIsAttachedToPlayer(this BuffManager __self) => _isAttachedToPlayer.Value.GetValue(__self);
		public static void SetIsAttachedToPlayer(this BuffManager __self, bool value) => _isAttachedToPlayer.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<BuffManager>> _Start757602046 =
				new System.Lazy<MethodAccessor<BuffManager>>(() => MethodAccessor<BuffManager>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<BuffManager>> _HandleBuffs757602046 =
				new System.Lazy<MethodAccessor<BuffManager>>(() => MethodAccessor<BuffManager>.Create("HandleBuffs"));
		private static readonly System.Lazy<MethodAccessor<BuffManager>> _BuffTypeIsAlreadyActive3481286652 =
				new System.Lazy<MethodAccessor<BuffManager>>(() => MethodAccessor<BuffManager>.Create("BuffTypeIsAlreadyActive", typeof(BuffType)));

		public static void Start(this BuffManager __self) => _Start757602046.Value.Invoke(__self);
		public static void HandleBuffs(this BuffManager __self) => _HandleBuffs757602046.Value.Invoke(__self);
		public static bool BuffTypeIsAlreadyActive(this BuffManager __self, BuffType buffType) => (bool)_BuffTypeIsAlreadyActive3481286652.Value.Invoke(__self, buffType);

	}

	public static class Private_BuffManager
	{

		private static readonly System.Lazy<StaticFieldAccessor<SO_Buff[]>> _allBuffAssets =
				new System.Lazy<StaticFieldAccessor<SO_Buff[]>>(() => StaticFieldAccessor<SO_Buff[]>.Create(typeof(BuffManager), "allBuffAssets"));

		public static SO_Buff[] GetAllBuffAssets() => _allBuffAssets.Value.GetValue();
		public static void SetAllBuffAssets(SO_Buff[] value) => _allBuffAssets.Value.SetValue(value);

	}

	public static class PrivateAccessor_Buff_DOT
	{

		private static readonly System.Lazy<FieldAccessor<Buff_DOT, SO_Buff_DOT>> _buffAssetDot =
				new System.Lazy<FieldAccessor<Buff_DOT, SO_Buff_DOT>>(() => FieldAccessor<Buff_DOT, SO_Buff_DOT>.Create("buffAssetDot"));
		private static readonly System.Lazy<FieldAccessor<Buff_DOT, float>> _tickTimer =
				new System.Lazy<FieldAccessor<Buff_DOT, float>>(() => FieldAccessor<Buff_DOT, float>.Create("tickTimer"));
		private static readonly System.Lazy<FieldAccessor<Buff_DOT, int>> _elapsedTicks =
				new System.Lazy<FieldAccessor<Buff_DOT, int>>(() => FieldAccessor<Buff_DOT, int>.Create("elapsedTicks"));

		public static SO_Buff_DOT GetBuffAssetDot(this Buff_DOT __self) => _buffAssetDot.Value.GetValue(__self);
		public static void SetBuffAssetDot(this Buff_DOT __self, SO_Buff_DOT value) => _buffAssetDot.Value.SetValue(__self, value);
		public static float GetTickTimer(this Buff_DOT __self) => _tickTimer.Value.GetValue(__self);
		public static void SetTickTimer(this Buff_DOT __self, float value) => _tickTimer.Value.SetValue(__self, value);
		public static int GetElapsedTicks(this Buff_DOT __self) => _elapsedTicks.Value.GetValue(__self);
		public static void SetElapsedTicks(this Buff_DOT __self, int value) => _elapsedTicks.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Buff_DOT>> _OnTick757602046 =
				new System.Lazy<MethodAccessor<Buff_DOT>>(() => MethodAccessor<Buff_DOT>.Create("OnTick"));

		public static void OnTick(this Buff_DOT __self) => _OnTick757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Buff_Heal_Player
	{

		private static readonly System.Lazy<FieldAccessor<Buff_Heal_Player, PlayerBuffManager>> _playerBuffManager =
				new System.Lazy<FieldAccessor<Buff_Heal_Player, PlayerBuffManager>>(() => FieldAccessor<Buff_Heal_Player, PlayerBuffManager>.Create("playerBuffManager"));
		private static readonly System.Lazy<FieldAccessor<Buff_Heal_Player, Network_Player>> _networkPlayer =
				new System.Lazy<FieldAccessor<Buff_Heal_Player, Network_Player>>(() => FieldAccessor<Buff_Heal_Player, Network_Player>.Create("networkPlayer"));

		public static PlayerBuffManager GetPlayerBuffManager(this Buff_Heal_Player __self) => _playerBuffManager.Value.GetValue(__self);
		public static void SetPlayerBuffManager(this Buff_Heal_Player __self, PlayerBuffManager value) => _playerBuffManager.Value.SetValue(__self, value);
		public static Network_Player GetNetworkPlayer(this Buff_Heal_Player __self) => _networkPlayer.Value.GetValue(__self);
		public static void SetNetworkPlayer(this Buff_Heal_Player __self, Network_Player value) => _networkPlayer.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Buff_Heal_Player>> _OnTick757602046 =
				new System.Lazy<MethodAccessor<Buff_Heal_Player>>(() => MethodAccessor<Buff_Heal_Player>.Create("OnTick"));

		public static void OnTick(this Buff_Heal_Player __self) => _OnTick757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Buff_Poison
	{

		private static readonly System.Lazy<FieldAccessor<Buff_Poison, SO_Buff_DOT>> _buffAssetDot =
				new System.Lazy<FieldAccessor<Buff_Poison, SO_Buff_DOT>>(() => FieldAccessor<Buff_Poison, SO_Buff_DOT>.Create("buffAssetDot"));
		private static readonly System.Lazy<FieldAccessor<Buff_Poison, float>> _tickTimer =
				new System.Lazy<FieldAccessor<Buff_Poison, float>>(() => FieldAccessor<Buff_Poison, float>.Create("tickTimer"));

		public static SO_Buff_DOT GetBuffAssetDot(this Buff_Poison __self) => _buffAssetDot.Value.GetValue(__self);
		public static void SetBuffAssetDot(this Buff_Poison __self, SO_Buff_DOT value) => _buffAssetDot.Value.SetValue(__self, value);
		public static float GetTickTimer(this Buff_Poison __self) => _tickTimer.Value.GetValue(__self);
		public static void SetTickTimer(this Buff_Poison __self, float value) => _tickTimer.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Buff_Poison>> _TickDamage757602046 =
				new System.Lazy<MethodAccessor<Buff_Poison>>(() => MethodAccessor<Buff_Poison>.Create("TickDamage"));

		public static void TickDamage(this Buff_Poison __self) => _TickDamage757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Buff_Poison_Player
	{

		private static readonly System.Lazy<FieldAccessor<Buff_Poison_Player, PlayerBuffManager>> _playerBuffManager =
				new System.Lazy<FieldAccessor<Buff_Poison_Player, PlayerBuffManager>>(() => FieldAccessor<Buff_Poison_Player, PlayerBuffManager>.Create("playerBuffManager"));
		private static readonly System.Lazy<FieldAccessor<Buff_Poison_Player, Network_Player>> _networkPlayer =
				new System.Lazy<FieldAccessor<Buff_Poison_Player, Network_Player>>(() => FieldAccessor<Buff_Poison_Player, Network_Player>.Create("networkPlayer"));

		public static PlayerBuffManager GetPlayerBuffManager(this Buff_Poison_Player __self) => _playerBuffManager.Value.GetValue(__self);
		public static void SetPlayerBuffManager(this Buff_Poison_Player __self, PlayerBuffManager value) => _playerBuffManager.Value.SetValue(__self, value);
		public static Network_Player GetNetworkPlayer(this Buff_Poison_Player __self) => _networkPlayer.Value.GetValue(__self);
		public static void SetNetworkPlayer(this Buff_Poison_Player __self, Network_Player value) => _networkPlayer.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Buff_Poison_Player>> _TickDamage757602046 =
				new System.Lazy<MethodAccessor<Buff_Poison_Player>>(() => MethodAccessor<Buff_Poison_Player>.Create("TickDamage"));

		public static void TickDamage(this Buff_Poison_Player __self) => _TickDamage757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_PlayerBuffManager
	{

		private static readonly System.Lazy<MethodAccessor<PlayerBuffManager>> _Start757602046 =
				new System.Lazy<MethodAccessor<PlayerBuffManager>>(() => MethodAccessor<PlayerBuffManager>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<PlayerBuffManager>> _OnHazmatEquipped757602046 =
				new System.Lazy<MethodAccessor<PlayerBuffManager>>(() => MethodAccessor<PlayerBuffManager>.Create("OnHazmatEquipped"));

		public static void Start(this PlayerBuffManager __self) => _Start757602046.Value.Invoke(__self);
		public static void OnHazmatEquipped(this PlayerBuffManager __self) => _OnHazmatEquipped757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Anchor
	{

		private static readonly System.Lazy<FieldAccessor<Anchor, UnityEngine.Transform>> _reciever =
				new System.Lazy<FieldAccessor<Anchor, UnityEngine.Transform>>(() => FieldAccessor<Anchor, UnityEngine.Transform>.Create("reciever"));
		private static readonly System.Lazy<FieldAccessor<Anchor, WaterFloatSemih2>> _waterFloat =
				new System.Lazy<FieldAccessor<Anchor, WaterFloatSemih2>>(() => FieldAccessor<Anchor, WaterFloatSemih2>.Create("waterFloat"));
		private static readonly System.Lazy<FieldAccessor<Anchor, string>> _eventRef_waterSplash =
				new System.Lazy<FieldAccessor<Anchor, string>>(() => FieldAccessor<Anchor, string>.Create("eventRef_waterSplash"));
		private static readonly System.Lazy<FieldAccessor<Anchor, float>> _previousY =
				new System.Lazy<FieldAccessor<Anchor, float>>(() => FieldAccessor<Anchor, float>.Create("previousY"));

		public static UnityEngine.Transform GetReciever(this Anchor __self) => _reciever.Value.GetValue(__self);
		public static void SetReciever(this Anchor __self, UnityEngine.Transform value) => _reciever.Value.SetValue(__self, value);
		public static WaterFloatSemih2 GetWaterFloat(this Anchor __self) => _waterFloat.Value.GetValue(__self);
		public static void SetWaterFloat(this Anchor __self, WaterFloatSemih2 value) => _waterFloat.Value.SetValue(__self, value);
		public static string GetEventRef_waterSplash(this Anchor __self) => _eventRef_waterSplash.Value.GetValue(__self);
		public static void SetEventRef_waterSplash(this Anchor __self, string value) => _eventRef_waterSplash.Value.SetValue(__self, value);
		public static float GetPreviousY(this Anchor __self) => _previousY.Value.GetValue(__self);
		public static void SetPreviousY(this Anchor __self, float value) => _previousY.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Anchor>> _Update757602046 =
				new System.Lazy<MethodAccessor<Anchor>>(() => MethodAccessor<Anchor>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<Anchor>> _OnTriggerEnter3468606003 =
				new System.Lazy<MethodAccessor<Anchor>>(() => MethodAccessor<Anchor>.Create("OnTriggerEnter", typeof(UnityEngine.Collider)));

		public static void Update(this Anchor __self) => _Update757602046.Value.Invoke(__self);
		public static void OnTriggerEnter(this Anchor __self, UnityEngine.Collider other) => _OnTriggerEnter3468606003.Value.Invoke(__self, other);

	}

	public static class PrivateAccessor_Anchor_Stationary
	{

		private static readonly System.Lazy<FieldAccessor<Anchor_Stationary, Anchor>> _anchor =
				new System.Lazy<FieldAccessor<Anchor_Stationary, Anchor>>(() => FieldAccessor<Anchor_Stationary, Anchor>.Create("anchor"));
		private static readonly System.Lazy<FieldAccessor<Anchor_Stationary, UnityEngine.Rigidbody>> _anchorBody =
				new System.Lazy<FieldAccessor<Anchor_Stationary, UnityEngine.Rigidbody>>(() => FieldAccessor<Anchor_Stationary, UnityEngine.Rigidbody>.Create("anchorBody"));
		private static readonly System.Lazy<FieldAccessor<Anchor_Stationary, UnityEngine.SpringJoint>> _joint =
				new System.Lazy<FieldAccessor<Anchor_Stationary, UnityEngine.SpringJoint>>(() => FieldAccessor<Anchor_Stationary, UnityEngine.SpringJoint>.Create("joint"));
		private static readonly System.Lazy<FieldAccessor<Anchor_Stationary, float>> _dropSpeed =
				new System.Lazy<FieldAccessor<Anchor_Stationary, float>>(() => FieldAccessor<Anchor_Stationary, float>.Create("dropSpeed"));
		private static readonly System.Lazy<FieldAccessor<Anchor_Stationary, float>> _weighSpeed =
				new System.Lazy<FieldAccessor<Anchor_Stationary, float>>(() => FieldAccessor<Anchor_Stationary, float>.Create("weighSpeed"));
		private static readonly System.Lazy<FieldAccessor<Anchor_Stationary, Rope>> _rope =
				new System.Lazy<FieldAccessor<Anchor_Stationary, Rope>>(() => FieldAccessor<Anchor_Stationary, Rope>.Create("rope"));
		private static readonly System.Lazy<FieldAccessor<Anchor_Stationary, UnityEngine.Transform>> _ropeConnectionPoint =
				new System.Lazy<FieldAccessor<Anchor_Stationary, UnityEngine.Transform>>(() => FieldAccessor<Anchor_Stationary, UnityEngine.Transform>.Create("ropeConnectionPoint"));
		private static readonly System.Lazy<FieldAccessor<Anchor_Stationary, UnityEngine.Transform>> _usePoint =
				new System.Lazy<FieldAccessor<Anchor_Stationary, UnityEngine.Transform>>(() => FieldAccessor<Anchor_Stationary, UnityEngine.Transform>.Create("usePoint"));
		private static readonly System.Lazy<FieldAccessor<Anchor_Stationary, FMODUnity.StudioEventEmitter>> _eventEmitter_WeighLoop =
				new System.Lazy<FieldAccessor<Anchor_Stationary, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<Anchor_Stationary, FMODUnity.StudioEventEmitter>.Create("eventEmitter_WeighLoop"));
		private static readonly System.Lazy<FieldAccessor<Anchor_Stationary, string>> _eventEmitter_SwitchUp =
				new System.Lazy<FieldAccessor<Anchor_Stationary, string>>(() => FieldAccessor<Anchor_Stationary, string>.Create("eventEmitter_SwitchUp"));
		private static readonly System.Lazy<FieldAccessor<Anchor_Stationary, string>> _eventEmitter_SwitchDown =
				new System.Lazy<FieldAccessor<Anchor_Stationary, string>>(() => FieldAccessor<Anchor_Stationary, string>.Create("eventEmitter_SwitchDown"));
		private static readonly System.Lazy<FieldAccessor<Anchor_Stationary, DisplayTextManager>> _displayTextManager =
				new System.Lazy<FieldAccessor<Anchor_Stationary, DisplayTextManager>>(() => FieldAccessor<Anchor_Stationary, DisplayTextManager>.Create("displayTextManager"));
		private static readonly System.Lazy<FieldAccessor<Anchor_Stationary, Raft>> _raft =
				new System.Lazy<FieldAccessor<Anchor_Stationary, Raft>>(() => FieldAccessor<Anchor_Stationary, Raft>.Create("raft"));
		private static readonly System.Lazy<FieldAccessor<Anchor_Stationary, bool>> _canUse =
				new System.Lazy<FieldAccessor<Anchor_Stationary, bool>>(() => FieldAccessor<Anchor_Stationary, bool>.Create("canUse"));
		private static readonly System.Lazy<FieldAccessor<Anchor_Stationary, bool>> _atBottom =
				new System.Lazy<FieldAccessor<Anchor_Stationary, bool>>(() => FieldAccessor<Anchor_Stationary, bool>.Create("atBottom"));
		private static readonly System.Lazy<FieldAccessor<Anchor_Stationary, bool>> _droppingAnchor =
				new System.Lazy<FieldAccessor<Anchor_Stationary, bool>>(() => FieldAccessor<Anchor_Stationary, bool>.Create("droppingAnchor"));
		private static readonly System.Lazy<FieldAccessor<Anchor_Stationary, bool>> _weighingAnchor =
				new System.Lazy<FieldAccessor<Anchor_Stationary, bool>>(() => FieldAccessor<Anchor_Stationary, bool>.Create("weighingAnchor"));
		private static readonly System.Lazy<FieldAccessor<Anchor_Stationary, Raft_Network>> _network =
				new System.Lazy<FieldAccessor<Anchor_Stationary, Raft_Network>>(() => FieldAccessor<Anchor_Stationary, Raft_Network>.Create("network"));
		private static readonly System.Lazy<FieldAccessor<Anchor_Stationary, bool>> _hasBeenPlaced =
				new System.Lazy<FieldAccessor<Anchor_Stationary, bool>>(() => FieldAccessor<Anchor_Stationary, bool>.Create("hasBeenPlaced"));

		public static Anchor GetAnchor(this Anchor_Stationary __self) => _anchor.Value.GetValue(__self);
		public static void SetAnchor(this Anchor_Stationary __self, Anchor value) => _anchor.Value.SetValue(__self, value);
		public static UnityEngine.Rigidbody GetAnchorBody(this Anchor_Stationary __self) => _anchorBody.Value.GetValue(__self);
		public static void SetAnchorBody(this Anchor_Stationary __self, UnityEngine.Rigidbody value) => _anchorBody.Value.SetValue(__self, value);
		public static UnityEngine.SpringJoint GetJoint(this Anchor_Stationary __self) => _joint.Value.GetValue(__self);
		public static void SetJoint(this Anchor_Stationary __self, UnityEngine.SpringJoint value) => _joint.Value.SetValue(__self, value);
		public static float GetDropSpeed(this Anchor_Stationary __self) => _dropSpeed.Value.GetValue(__self);
		public static void SetDropSpeed(this Anchor_Stationary __self, float value) => _dropSpeed.Value.SetValue(__self, value);
		public static float GetWeighSpeed(this Anchor_Stationary __self) => _weighSpeed.Value.GetValue(__self);
		public static void SetWeighSpeed(this Anchor_Stationary __self, float value) => _weighSpeed.Value.SetValue(__self, value);
		public static Rope GetRope(this Anchor_Stationary __self) => _rope.Value.GetValue(__self);
		public static void SetRope(this Anchor_Stationary __self, Rope value) => _rope.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetRopeConnectionPoint(this Anchor_Stationary __self) => _ropeConnectionPoint.Value.GetValue(__self);
		public static void SetRopeConnectionPoint(this Anchor_Stationary __self, UnityEngine.Transform value) => _ropeConnectionPoint.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetUsePoint(this Anchor_Stationary __self) => _usePoint.Value.GetValue(__self);
		public static void SetUsePoint(this Anchor_Stationary __self, UnityEngine.Transform value) => _usePoint.Value.SetValue(__self, value);
		public static FMODUnity.StudioEventEmitter GetEventEmitter_WeighLoop(this Anchor_Stationary __self) => _eventEmitter_WeighLoop.Value.GetValue(__self);
		public static void SetEventEmitter_WeighLoop(this Anchor_Stationary __self, FMODUnity.StudioEventEmitter value) => _eventEmitter_WeighLoop.Value.SetValue(__self, value);
		public static string GetEventEmitter_SwitchUp(this Anchor_Stationary __self) => _eventEmitter_SwitchUp.Value.GetValue(__self);
		public static void SetEventEmitter_SwitchUp(this Anchor_Stationary __self, string value) => _eventEmitter_SwitchUp.Value.SetValue(__self, value);
		public static string GetEventEmitter_SwitchDown(this Anchor_Stationary __self) => _eventEmitter_SwitchDown.Value.GetValue(__self);
		public static void SetEventEmitter_SwitchDown(this Anchor_Stationary __self, string value) => _eventEmitter_SwitchDown.Value.SetValue(__self, value);
		public static DisplayTextManager GetDisplayTextManager(this Anchor_Stationary __self) => _displayTextManager.Value.GetValue(__self);
		public static void SetDisplayTextManager(this Anchor_Stationary __self, DisplayTextManager value) => _displayTextManager.Value.SetValue(__self, value);
		public static Raft GetRaft(this Anchor_Stationary __self) => _raft.Value.GetValue(__self);
		public static void SetRaft(this Anchor_Stationary __self, Raft value) => _raft.Value.SetValue(__self, value);
		public static bool GetCanUse(this Anchor_Stationary __self) => _canUse.Value.GetValue(__self);
		public static void SetCanUse(this Anchor_Stationary __self, bool value) => _canUse.Value.SetValue(__self, value);
		public static bool GetAtBottom(this Anchor_Stationary __self) => _atBottom.Value.GetValue(__self);
		public static void SetAtBottom(this Anchor_Stationary __self, bool value) => _atBottom.Value.SetValue(__self, value);
		public static bool GetDroppingAnchor(this Anchor_Stationary __self) => _droppingAnchor.Value.GetValue(__self);
		public static void SetDroppingAnchor(this Anchor_Stationary __self, bool value) => _droppingAnchor.Value.SetValue(__self, value);
		public static bool GetWeighingAnchor(this Anchor_Stationary __self) => _weighingAnchor.Value.GetValue(__self);
		public static void SetWeighingAnchor(this Anchor_Stationary __self, bool value) => _weighingAnchor.Value.SetValue(__self, value);
		public static Raft_Network GetNetwork(this Anchor_Stationary __self) => _network.Value.GetValue(__self);
		public static void SetNetwork(this Anchor_Stationary __self, Raft_Network value) => _network.Value.SetValue(__self, value);
		public static bool GetHasBeenPlaced(this Anchor_Stationary __self) => _hasBeenPlaced.Value.GetValue(__self);
		public static void SetHasBeenPlaced(this Anchor_Stationary __self, bool value) => _hasBeenPlaced.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Anchor_Stationary>> _Start757602046 =
				new System.Lazy<MethodAccessor<Anchor_Stationary>>(() => MethodAccessor<Anchor_Stationary>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<Anchor_Stationary>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<Anchor_Stationary>>(() => MethodAccessor<Anchor_Stationary>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<Anchor_Stationary>> _Update757602046 =
				new System.Lazy<MethodAccessor<Anchor_Stationary>>(() => MethodAccessor<Anchor_Stationary>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<Anchor_Stationary>> _Use757602046 =
				new System.Lazy<MethodAccessor<Anchor_Stationary>>(() => MethodAccessor<Anchor_Stationary>.Create("Use"));
		private static readonly System.Lazy<MethodAccessor<Anchor_Stationary>> _DroppingUpdate757602046 =
				new System.Lazy<MethodAccessor<Anchor_Stationary>>(() => MethodAccessor<Anchor_Stationary>.Create("DroppingUpdate"));
		private static readonly System.Lazy<MethodAccessor<Anchor_Stationary>> _WeighUpdate757602046 =
				new System.Lazy<MethodAccessor<Anchor_Stationary>>(() => MethodAccessor<Anchor_Stationary>.Create("WeighUpdate"));
		private static readonly System.Lazy<MethodAccessor<Anchor_Stationary>> _DropAnchor757602046 =
				new System.Lazy<MethodAccessor<Anchor_Stationary>>(() => MethodAccessor<Anchor_Stationary>.Create("DropAnchor"));
		private static readonly System.Lazy<MethodAccessor<Anchor_Stationary>> _WeighAnchor757602046 =
				new System.Lazy<MethodAccessor<Anchor_Stationary>>(() => MethodAccessor<Anchor_Stationary>.Create("WeighAnchor"));
		private static readonly System.Lazy<MethodAccessor<Anchor_Stationary>> _SetAnimSpeed3698168060 =
				new System.Lazy<MethodAccessor<Anchor_Stationary>>(() => MethodAccessor<Anchor_Stationary>.Create("SetAnimSpeed", typeof(float), typeof(float)));
		private static readonly System.Lazy<MethodAccessor<Anchor_Stationary>> _OnWorldShift3429126434 =
				new System.Lazy<MethodAccessor<Anchor_Stationary>>(() => MethodAccessor<Anchor_Stationary>.Create("OnWorldShift", typeof(UnityEngine.Vector3)));

		public static void Start(this Anchor_Stationary __self) => _Start757602046.Value.Invoke(__self);
		public static void OnDestroy(this Anchor_Stationary __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void Update(this Anchor_Stationary __self) => _Update757602046.Value.Invoke(__self);
		public static void Use(this Anchor_Stationary __self) => _Use757602046.Value.Invoke(__self);
		public static void DroppingUpdate(this Anchor_Stationary __self) => _DroppingUpdate757602046.Value.Invoke(__self);
		public static void WeighUpdate(this Anchor_Stationary __self) => _WeighUpdate757602046.Value.Invoke(__self);
		public static void DropAnchor(this Anchor_Stationary __self) => _DropAnchor757602046.Value.Invoke(__self);
		public static void WeighAnchor(this Anchor_Stationary __self) => _WeighAnchor757602046.Value.Invoke(__self);
		public static void SetAnimSpeed(this Anchor_Stationary __self, float animSpeed, float soundSpeed) => _SetAnimSpeed3698168060.Value.Invoke(__self, animSpeed, soundSpeed);
		public static void OnWorldShift(this Anchor_Stationary __self, UnityEngine.Vector3 shift) => _OnWorldShift3429126434.Value.Invoke(__self, shift);

	}

	public static class PrivateAccessor_Message_StationaryAnchorCreate
	{

		private static readonly System.Lazy<FieldAccessor<Message_StationaryAnchorCreate, float>> _xPos =
				new System.Lazy<FieldAccessor<Message_StationaryAnchorCreate, float>>(() => FieldAccessor<Message_StationaryAnchorCreate, float>.Create("xPos"));
		private static readonly System.Lazy<FieldAccessor<Message_StationaryAnchorCreate, float>> _yPos =
				new System.Lazy<FieldAccessor<Message_StationaryAnchorCreate, float>>(() => FieldAccessor<Message_StationaryAnchorCreate, float>.Create("yPos"));
		private static readonly System.Lazy<FieldAccessor<Message_StationaryAnchorCreate, float>> _zPos =
				new System.Lazy<FieldAccessor<Message_StationaryAnchorCreate, float>>(() => FieldAccessor<Message_StationaryAnchorCreate, float>.Create("zPos"));
		private static readonly System.Lazy<FieldAccessor<Message_StationaryAnchorCreate, float>> _xRot =
				new System.Lazy<FieldAccessor<Message_StationaryAnchorCreate, float>>(() => FieldAccessor<Message_StationaryAnchorCreate, float>.Create("xRot"));
		private static readonly System.Lazy<FieldAccessor<Message_StationaryAnchorCreate, float>> _yRot =
				new System.Lazy<FieldAccessor<Message_StationaryAnchorCreate, float>>(() => FieldAccessor<Message_StationaryAnchorCreate, float>.Create("yRot"));
		private static readonly System.Lazy<FieldAccessor<Message_StationaryAnchorCreate, float>> _zRot =
				new System.Lazy<FieldAccessor<Message_StationaryAnchorCreate, float>>(() => FieldAccessor<Message_StationaryAnchorCreate, float>.Create("zRot"));

		public static float GetXPos(this Message_StationaryAnchorCreate __self) => _xPos.Value.GetValue(__self);
		public static void SetXPos(this Message_StationaryAnchorCreate __self, float value) => _xPos.Value.SetValue(__self, value);
		public static float GetYPos(this Message_StationaryAnchorCreate __self) => _yPos.Value.GetValue(__self);
		public static void SetYPos(this Message_StationaryAnchorCreate __self, float value) => _yPos.Value.SetValue(__self, value);
		public static float GetZPos(this Message_StationaryAnchorCreate __self) => _zPos.Value.GetValue(__self);
		public static void SetZPos(this Message_StationaryAnchorCreate __self, float value) => _zPos.Value.SetValue(__self, value);
		public static float GetXRot(this Message_StationaryAnchorCreate __self) => _xRot.Value.GetValue(__self);
		public static void SetXRot(this Message_StationaryAnchorCreate __self, float value) => _xRot.Value.SetValue(__self, value);
		public static float GetYRot(this Message_StationaryAnchorCreate __self) => _yRot.Value.GetValue(__self);
		public static void SetYRot(this Message_StationaryAnchorCreate __self, float value) => _yRot.Value.SetValue(__self, value);
		public static float GetZRot(this Message_StationaryAnchorCreate __self) => _zRot.Value.GetValue(__self);
		public static void SetZRot(this Message_StationaryAnchorCreate __self, float value) => _zRot.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_Anchor_Throwable_Stand
	{

		private static readonly System.Lazy<FieldAccessor<Anchor_Throwable_Stand, UnityEngine.GameObject>> _pickupModel =
				new System.Lazy<FieldAccessor<Anchor_Throwable_Stand, UnityEngine.GameObject>>(() => FieldAccessor<Anchor_Throwable_Stand, UnityEngine.GameObject>.Create("pickupModel"));
		private static readonly System.Lazy<FieldAccessor<Anchor_Throwable_Stand, Item_Base>> _usableItemOnPickup =
				new System.Lazy<FieldAccessor<Anchor_Throwable_Stand, Item_Base>>(() => FieldAccessor<Anchor_Throwable_Stand, Item_Base>.Create("usableItemOnPickup"));
		private static readonly System.Lazy<FieldAccessor<Anchor_Throwable_Stand, Rope>> _rope =
				new System.Lazy<FieldAccessor<Anchor_Throwable_Stand, Rope>>(() => FieldAccessor<Anchor_Throwable_Stand, Rope>.Create("rope"));
		private static readonly System.Lazy<FieldAccessor<Anchor_Throwable_Stand, UnityEngine.Transform>> _ropeConnectionTransform =
				new System.Lazy<FieldAccessor<Anchor_Throwable_Stand, UnityEngine.Transform>>(() => FieldAccessor<Anchor_Throwable_Stand, UnityEngine.Transform>.Create("ropeConnectionTransform"));
		private static readonly System.Lazy<FieldAccessor<Anchor_Throwable_Stand, Anchor_Throwable>> _anchor_Throwable =
				new System.Lazy<FieldAccessor<Anchor_Throwable_Stand, Anchor_Throwable>>(() => FieldAccessor<Anchor_Throwable_Stand, Anchor_Throwable>.Create("anchor_Throwable"));
		private static readonly System.Lazy<FieldAccessor<Anchor_Throwable_Stand, Anchor>> _thrownAnchor =
				new System.Lazy<FieldAccessor<Anchor_Throwable_Stand, Anchor>>(() => FieldAccessor<Anchor_Throwable_Stand, Anchor>.Create("thrownAnchor"));
		private static readonly System.Lazy<FieldAccessor<Anchor_Throwable_Stand, bool>> _fullyAnchored =
				new System.Lazy<FieldAccessor<Anchor_Throwable_Stand, bool>>(() => FieldAccessor<Anchor_Throwable_Stand, bool>.Create("fullyAnchored"));
		private static readonly System.Lazy<FieldAccessor<Anchor_Throwable_Stand, bool>> _hasThrownAnchor =
				new System.Lazy<FieldAccessor<Anchor_Throwable_Stand, bool>>(() => FieldAccessor<Anchor_Throwable_Stand, bool>.Create("hasThrownAnchor"));
		private static readonly System.Lazy<FieldAccessor<Anchor_Throwable_Stand, bool>> _hasBeenPlaced =
				new System.Lazy<FieldAccessor<Anchor_Throwable_Stand, bool>>(() => FieldAccessor<Anchor_Throwable_Stand, bool>.Create("hasBeenPlaced"));
		private static readonly System.Lazy<FieldAccessor<Anchor_Throwable_Stand, Item_Base>> _previousItemInHand =
				new System.Lazy<FieldAccessor<Anchor_Throwable_Stand, Item_Base>>(() => FieldAccessor<Anchor_Throwable_Stand, Item_Base>.Create("previousItemInHand"));
		private static readonly System.Lazy<FieldAccessor<Anchor_Throwable_Stand, Raft_Network>> _network =
				new System.Lazy<FieldAccessor<Anchor_Throwable_Stand, Raft_Network>>(() => FieldAccessor<Anchor_Throwable_Stand, Raft_Network>.Create("network"));
		private static readonly System.Lazy<FieldAccessor<Anchor_Throwable_Stand, Network_Player>> _playerNetwork =
				new System.Lazy<FieldAccessor<Anchor_Throwable_Stand, Network_Player>>(() => FieldAccessor<Anchor_Throwable_Stand, Network_Player>.Create("playerNetwork"));

		public static UnityEngine.GameObject GetPickupModel(this Anchor_Throwable_Stand __self) => _pickupModel.Value.GetValue(__self);
		public static void SetPickupModel(this Anchor_Throwable_Stand __self, UnityEngine.GameObject value) => _pickupModel.Value.SetValue(__self, value);
		public static Item_Base GetUsableItemOnPickup(this Anchor_Throwable_Stand __self) => _usableItemOnPickup.Value.GetValue(__self);
		public static void SetUsableItemOnPickup(this Anchor_Throwable_Stand __self, Item_Base value) => _usableItemOnPickup.Value.SetValue(__self, value);
		public static Rope GetRope(this Anchor_Throwable_Stand __self) => _rope.Value.GetValue(__self);
		public static void SetRope(this Anchor_Throwable_Stand __self, Rope value) => _rope.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetRopeConnectionTransform(this Anchor_Throwable_Stand __self) => _ropeConnectionTransform.Value.GetValue(__self);
		public static void SetRopeConnectionTransform(this Anchor_Throwable_Stand __self, UnityEngine.Transform value) => _ropeConnectionTransform.Value.SetValue(__self, value);
		public static Anchor_Throwable GetAnchor_Throwable(this Anchor_Throwable_Stand __self) => _anchor_Throwable.Value.GetValue(__self);
		public static void SetAnchor_Throwable(this Anchor_Throwable_Stand __self, Anchor_Throwable value) => _anchor_Throwable.Value.SetValue(__self, value);
		public static Anchor GetThrownAnchor(this Anchor_Throwable_Stand __self) => _thrownAnchor.Value.GetValue(__self);
		public static void SetThrownAnchor(this Anchor_Throwable_Stand __self, Anchor value) => _thrownAnchor.Value.SetValue(__self, value);
		public static bool GetFullyAnchored(this Anchor_Throwable_Stand __self) => _fullyAnchored.Value.GetValue(__self);
		public static void SetFullyAnchored(this Anchor_Throwable_Stand __self, bool value) => _fullyAnchored.Value.SetValue(__self, value);
		public static bool GetHasThrownAnchor(this Anchor_Throwable_Stand __self) => _hasThrownAnchor.Value.GetValue(__self);
		public static void SetHasThrownAnchor(this Anchor_Throwable_Stand __self, bool value) => _hasThrownAnchor.Value.SetValue(__self, value);
		public static bool GetHasBeenPlaced(this Anchor_Throwable_Stand __self) => _hasBeenPlaced.Value.GetValue(__self);
		public static void SetHasBeenPlaced(this Anchor_Throwable_Stand __self, bool value) => _hasBeenPlaced.Value.SetValue(__self, value);
		public static Item_Base GetPreviousItemInHand(this Anchor_Throwable_Stand __self) => _previousItemInHand.Value.GetValue(__self);
		public static void SetPreviousItemInHand(this Anchor_Throwable_Stand __self, Item_Base value) => _previousItemInHand.Value.SetValue(__self, value);
		public static Raft_Network GetNetwork(this Anchor_Throwable_Stand __self) => _network.Value.GetValue(__self);
		public static void SetNetwork(this Anchor_Throwable_Stand __self, Raft_Network value) => _network.Value.SetValue(__self, value);
		public static Network_Player GetPlayerNetwork(this Anchor_Throwable_Stand __self) => _playerNetwork.Value.GetValue(__self);
		public static void SetPlayerNetwork(this Anchor_Throwable_Stand __self, Network_Player value) => _playerNetwork.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Anchor_Throwable_Stand>> _Start757602046 =
				new System.Lazy<MethodAccessor<Anchor_Throwable_Stand>>(() => MethodAccessor<Anchor_Throwable_Stand>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<Anchor_Throwable_Stand>> _Update757602046 =
				new System.Lazy<MethodAccessor<Anchor_Throwable_Stand>>(() => MethodAccessor<Anchor_Throwable_Stand>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<Anchor_Throwable_Stand>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<Anchor_Throwable_Stand>>(() => MethodAccessor<Anchor_Throwable_Stand>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<Anchor_Throwable_Stand>> _OnBlockPlaced757602046 =
				new System.Lazy<MethodAccessor<Anchor_Throwable_Stand>>(() => MethodAccessor<Anchor_Throwable_Stand>.Create("OnBlockPlaced"));
		private static readonly System.Lazy<MethodAccessor<Anchor_Throwable_Stand>> _ReselectItem3486905475 =
				new System.Lazy<MethodAccessor<Anchor_Throwable_Stand>>(() => MethodAccessor<Anchor_Throwable_Stand>.Create("ReselectItem", typeof(float)));
		private static readonly System.Lazy<MethodAccessor<Anchor_Throwable_Stand>> _SetRopePositionAndLayer757602046 =
				new System.Lazy<MethodAccessor<Anchor_Throwable_Stand>>(() => MethodAccessor<Anchor_Throwable_Stand>.Create("SetRopePositionAndLayer"));
		private static readonly System.Lazy<MethodAccessor<Anchor_Throwable_Stand>> _IsConnected757602046 =
				new System.Lazy<MethodAccessor<Anchor_Throwable_Stand>>(() => MethodAccessor<Anchor_Throwable_Stand>.Create("IsConnected"));
		private static readonly System.Lazy<MethodAccessor<Anchor_Throwable_Stand>> _OnWorldShift3429126434 =
				new System.Lazy<MethodAccessor<Anchor_Throwable_Stand>>(() => MethodAccessor<Anchor_Throwable_Stand>.Create("OnWorldShift", typeof(UnityEngine.Vector3)));

		public static void Start(this Anchor_Throwable_Stand __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this Anchor_Throwable_Stand __self) => _Update757602046.Value.Invoke(__self);
		public static void OnDestroy(this Anchor_Throwable_Stand __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void OnBlockPlaced(this Anchor_Throwable_Stand __self) => _OnBlockPlaced757602046.Value.Invoke(__self);
		public static System.Collections.IEnumerator ReselectItem(this Anchor_Throwable_Stand __self, float timeDelay) => (System.Collections.IEnumerator)_ReselectItem3486905475.Value.Invoke(__self, timeDelay);
		public static void SetRopePositionAndLayer(this Anchor_Throwable_Stand __self) => _SetRopePositionAndLayer757602046.Value.Invoke(__self);
		public static bool IsConnected(this Anchor_Throwable_Stand __self) => (bool)_IsConnected757602046.Value.Invoke(__self);
		public static void OnWorldShift(this Anchor_Throwable_Stand __self, UnityEngine.Vector3 shift) => _OnWorldShift3429126434.Value.Invoke(__self, shift);

	}

	public static class Private_Anchor_Throwable_Stand
	{

		private static readonly System.Lazy<StaticFieldAccessor<Raft>> _raft =
				new System.Lazy<StaticFieldAccessor<Raft>>(() => StaticFieldAccessor<Raft>.Create(typeof(Anchor_Throwable_Stand), "raft"));

		public static Raft GetRaft() => _raft.Value.GetValue();
		public static void SetRaft(Raft value) => _raft.Value.SetValue(value);

	}

	public static class PrivateAccessor_Message_ThrowableStandCreate
	{

		private static readonly System.Lazy<FieldAccessor<Message_ThrowableStandCreate, float>> _xPos =
				new System.Lazy<FieldAccessor<Message_ThrowableStandCreate, float>>(() => FieldAccessor<Message_ThrowableStandCreate, float>.Create("xPos"));
		private static readonly System.Lazy<FieldAccessor<Message_ThrowableStandCreate, float>> _yPos =
				new System.Lazy<FieldAccessor<Message_ThrowableStandCreate, float>>(() => FieldAccessor<Message_ThrowableStandCreate, float>.Create("yPos"));
		private static readonly System.Lazy<FieldAccessor<Message_ThrowableStandCreate, float>> _zPos =
				new System.Lazy<FieldAccessor<Message_ThrowableStandCreate, float>>(() => FieldAccessor<Message_ThrowableStandCreate, float>.Create("zPos"));
		private static readonly System.Lazy<FieldAccessor<Message_ThrowableStandCreate, float>> _xRot =
				new System.Lazy<FieldAccessor<Message_ThrowableStandCreate, float>>(() => FieldAccessor<Message_ThrowableStandCreate, float>.Create("xRot"));
		private static readonly System.Lazy<FieldAccessor<Message_ThrowableStandCreate, float>> _yRot =
				new System.Lazy<FieldAccessor<Message_ThrowableStandCreate, float>>(() => FieldAccessor<Message_ThrowableStandCreate, float>.Create("yRot"));
		private static readonly System.Lazy<FieldAccessor<Message_ThrowableStandCreate, float>> _zRot =
				new System.Lazy<FieldAccessor<Message_ThrowableStandCreate, float>>(() => FieldAccessor<Message_ThrowableStandCreate, float>.Create("zRot"));

		public static float GetXPos(this Message_ThrowableStandCreate __self) => _xPos.Value.GetValue(__self);
		public static void SetXPos(this Message_ThrowableStandCreate __self, float value) => _xPos.Value.SetValue(__self, value);
		public static float GetYPos(this Message_ThrowableStandCreate __self) => _yPos.Value.GetValue(__self);
		public static void SetYPos(this Message_ThrowableStandCreate __self, float value) => _yPos.Value.SetValue(__self, value);
		public static float GetZPos(this Message_ThrowableStandCreate __self) => _zPos.Value.GetValue(__self);
		public static void SetZPos(this Message_ThrowableStandCreate __self, float value) => _zPos.Value.SetValue(__self, value);
		public static float GetXRot(this Message_ThrowableStandCreate __self) => _xRot.Value.GetValue(__self);
		public static void SetXRot(this Message_ThrowableStandCreate __self, float value) => _xRot.Value.SetValue(__self, value);
		public static float GetYRot(this Message_ThrowableStandCreate __self) => _yRot.Value.GetValue(__self);
		public static void SetYRot(this Message_ThrowableStandCreate __self, float value) => _yRot.Value.SetValue(__self, value);
		public static float GetZRot(this Message_ThrowableStandCreate __self) => _zRot.Value.GetValue(__self);
		public static void SetZRot(this Message_ThrowableStandCreate __self, float value) => _zRot.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_Battery
	{

		private static readonly System.Lazy<FieldAccessor<Battery, int>> _batteryIndex =
				new System.Lazy<FieldAccessor<Battery, int>>(() => FieldAccessor<Battery, int>.Create("batteryIndex"));
		private static readonly System.Lazy<FieldAccessor<Battery, UnityEngine.Renderer>> _batteryHolderRenderer =
				new System.Lazy<FieldAccessor<Battery, UnityEngine.Renderer>>(() => FieldAccessor<Battery, UnityEngine.Renderer>.Create("batteryHolderRenderer"));
		private static readonly System.Lazy<FieldAccessor<Battery, float>> _greenLimit =
				new System.Lazy<FieldAccessor<Battery, float>>(() => FieldAccessor<Battery, float>.Create("greenLimit"));
		private static readonly System.Lazy<FieldAccessor<Battery, float>> _yellowLimit =
				new System.Lazy<FieldAccessor<Battery, float>>(() => FieldAccessor<Battery, float>.Create("yellowLimit"));
		private static readonly System.Lazy<FieldAccessor<Battery, float>> _orangeLimit =
				new System.Lazy<FieldAccessor<Battery, float>>(() => FieldAccessor<Battery, float>.Create("orangeLimit"));
		private static readonly System.Lazy<FieldAccessor<Battery, UnityEngine.Color>> _green =
				new System.Lazy<FieldAccessor<Battery, UnityEngine.Color>>(() => FieldAccessor<Battery, UnityEngine.Color>.Create("green"));
		private static readonly System.Lazy<FieldAccessor<Battery, UnityEngine.Color>> _yellow =
				new System.Lazy<FieldAccessor<Battery, UnityEngine.Color>>(() => FieldAccessor<Battery, UnityEngine.Color>.Create("yellow"));
		private static readonly System.Lazy<FieldAccessor<Battery, UnityEngine.Color>> _orange =
				new System.Lazy<FieldAccessor<Battery, UnityEngine.Color>>(() => FieldAccessor<Battery, UnityEngine.Color>.Create("orange"));
		private static readonly System.Lazy<FieldAccessor<Battery, UnityEngine.Color>> _red =
				new System.Lazy<FieldAccessor<Battery, UnityEngine.Color>>(() => FieldAccessor<Battery, UnityEngine.Color>.Create("red"));
		private static readonly System.Lazy<FieldAccessor<Battery, MonoBehaviour_ID_Network>> _networkBehaviourID =
				new System.Lazy<FieldAccessor<Battery, MonoBehaviour_ID_Network>>(() => FieldAccessor<Battery, MonoBehaviour_ID_Network>.Create("networkBehaviourID"));
		private static readonly System.Lazy<FieldAccessor<Battery, Network_Player>> _localPlayer =
				new System.Lazy<FieldAccessor<Battery, Network_Player>>(() => FieldAccessor<Battery, Network_Player>.Create("localPlayer"));
		private static readonly System.Lazy<FieldAccessor<Battery, ItemInstance>> _batteryInstance =
				new System.Lazy<FieldAccessor<Battery, ItemInstance>>(() => FieldAccessor<Battery, ItemInstance>.Create("batteryInstance"));
		private static readonly System.Lazy<FieldAccessor<Battery, CanvasHelper>> _canvas =
				new System.Lazy<FieldAccessor<Battery, CanvasHelper>>(() => FieldAccessor<Battery, CanvasHelper>.Create("canvas"));
		private static readonly System.Lazy<FieldAccessor<Battery, UnityEngine.MaterialPropertyBlock>> _mpb =
				new System.Lazy<FieldAccessor<Battery, UnityEngine.MaterialPropertyBlock>>(() => FieldAccessor<Battery, UnityEngine.MaterialPropertyBlock>.Create("mpb"));
		private static readonly System.Lazy<FieldAccessor<Battery, bool>> _showingText =
				new System.Lazy<FieldAccessor<Battery, bool>>(() => FieldAccessor<Battery, bool>.Create("showingText"));
		private static readonly System.Lazy<FieldAccessor<Battery, bool>> _on =
				new System.Lazy<FieldAccessor<Battery, bool>>(() => FieldAccessor<Battery, bool>.Create("on"));
		private static readonly System.Lazy<FieldAccessor<Battery, float>> _timer =
				new System.Lazy<FieldAccessor<Battery, float>>(() => FieldAccessor<Battery, float>.Create("timer"));

		public static int GetBatteryIndex(this Battery __self) => _batteryIndex.Value.GetValue(__self);
		public static void SetBatteryIndex(this Battery __self, int value) => _batteryIndex.Value.SetValue(__self, value);
		public static UnityEngine.Renderer GetBatteryHolderRenderer(this Battery __self) => _batteryHolderRenderer.Value.GetValue(__self);
		public static void SetBatteryHolderRenderer(this Battery __self, UnityEngine.Renderer value) => _batteryHolderRenderer.Value.SetValue(__self, value);
		public static float GetGreenLimit(this Battery __self) => _greenLimit.Value.GetValue(__self);
		public static void SetGreenLimit(this Battery __self, float value) => _greenLimit.Value.SetValue(__self, value);
		public static float GetYellowLimit(this Battery __self) => _yellowLimit.Value.GetValue(__self);
		public static void SetYellowLimit(this Battery __self, float value) => _yellowLimit.Value.SetValue(__self, value);
		public static float GetOrangeLimit(this Battery __self) => _orangeLimit.Value.GetValue(__self);
		public static void SetOrangeLimit(this Battery __self, float value) => _orangeLimit.Value.SetValue(__self, value);
		public static UnityEngine.Color GetGreen(this Battery __self) => _green.Value.GetValue(__self);
		public static void SetGreen(this Battery __self, UnityEngine.Color value) => _green.Value.SetValue(__self, value);
		public static UnityEngine.Color GetYellow(this Battery __self) => _yellow.Value.GetValue(__self);
		public static void SetYellow(this Battery __self, UnityEngine.Color value) => _yellow.Value.SetValue(__self, value);
		public static UnityEngine.Color GetOrange(this Battery __self) => _orange.Value.GetValue(__self);
		public static void SetOrange(this Battery __self, UnityEngine.Color value) => _orange.Value.SetValue(__self, value);
		public static UnityEngine.Color GetRed(this Battery __self) => _red.Value.GetValue(__self);
		public static void SetRed(this Battery __self, UnityEngine.Color value) => _red.Value.SetValue(__self, value);
		public static MonoBehaviour_ID_Network GetNetworkBehaviourID(this Battery __self) => _networkBehaviourID.Value.GetValue(__self);
		public static void SetNetworkBehaviourID(this Battery __self, MonoBehaviour_ID_Network value) => _networkBehaviourID.Value.SetValue(__self, value);
		public static Network_Player GetLocalPlayer(this Battery __self) => _localPlayer.Value.GetValue(__self);
		public static void SetLocalPlayer(this Battery __self, Network_Player value) => _localPlayer.Value.SetValue(__self, value);
		public static ItemInstance GetBatteryInstance(this Battery __self) => _batteryInstance.Value.GetValue(__self);
		public static void SetBatteryInstance(this Battery __self, ItemInstance value) => _batteryInstance.Value.SetValue(__self, value);
		public static CanvasHelper GetCanvas(this Battery __self) => _canvas.Value.GetValue(__self);
		public static void SetCanvas(this Battery __self, CanvasHelper value) => _canvas.Value.SetValue(__self, value);
		public static UnityEngine.MaterialPropertyBlock GetMpb(this Battery __self) => _mpb.Value.GetValue(__self);
		public static void SetMpb(this Battery __self, UnityEngine.MaterialPropertyBlock value) => _mpb.Value.SetValue(__self, value);
		public static bool GetShowingText(this Battery __self) => _showingText.Value.GetValue(__self);
		public static void SetShowingText(this Battery __self, bool value) => _showingText.Value.SetValue(__self, value);
		public static bool GetOn(this Battery __self) => _on.Value.GetValue(__self);
		public static void SetOn(this Battery __self, bool value) => _on.Value.SetValue(__self, value);
		public static float GetTimer(this Battery __self) => _timer.Value.GetValue(__self);
		public static void SetTimer(this Battery __self, float value) => _timer.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Battery>> _Awake757602046 =
				new System.Lazy<MethodAccessor<Battery>>(() => MethodAccessor<Battery>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<Battery>> _Start757602046 =
				new System.Lazy<MethodAccessor<Battery>>(() => MethodAccessor<Battery>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<Battery>> _Update757602046 =
				new System.Lazy<MethodAccessor<Battery>>(() => MethodAccessor<Battery>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<Battery>> _UpdateBatteryHolderLights757602046 =
				new System.Lazy<MethodAccessor<Battery>>(() => MethodAccessor<Battery>.Create("UpdateBatteryHolderLights"));

		public static void Awake(this Battery __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this Battery __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this Battery __self) => _Update757602046.Value.Invoke(__self);
		public static void UpdateBatteryHolderLights(this Battery __self) => _UpdateBatteryHolderLights757602046.Value.Invoke(__self);

	}

	public static class Private_Battery
	{

		private static readonly System.Lazy<StaticFieldAccessor<int>> _usesLostPerSecond =
				new System.Lazy<StaticFieldAccessor<int>>(() => StaticFieldAccessor<int>.Create(typeof(Battery), "usesLostPerSecond"));
		private static readonly System.Lazy<StaticFieldAccessor<float>> _drainTime =
				new System.Lazy<StaticFieldAccessor<float>>(() => StaticFieldAccessor<float>.Create(typeof(Battery), "drainTime"));

		public static int GetUsesLostPerSecond() => _usesLostPerSecond.Value.GetValue();
		public static void SetUsesLostPerSecond(int value) => _usesLostPerSecond.Value.SetValue(value);
		public static float GetDrainTime() => _drainTime.Value.GetValue();
		public static void SetDrainTime(float value) => _drainTime.Value.SetValue(value);

	}

	public static class PrivateAccessor_RGD_Battery
	{

		private static readonly System.Lazy<MethodAccessor<RGD_Battery>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_Battery>>(() => MethodAccessor<RGD_Battery>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_Battery __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_BatteryCharger
	{

		private static readonly System.Lazy<FieldAccessor<BatteryCharger, StudioEventEmitterSustain>> _eventEmitter_charging =
				new System.Lazy<FieldAccessor<BatteryCharger, StudioEventEmitterSustain>>(() => FieldAccessor<BatteryCharger, StudioEventEmitterSustain>.Create("eventEmitter_charging"));
		private static readonly System.Lazy<FieldAccessor<BatteryCharger, Raft_Network>> _network =
				new System.Lazy<FieldAccessor<BatteryCharger, Raft_Network>>(() => FieldAccessor<BatteryCharger, Raft_Network>.Create("network"));
		private static readonly System.Lazy<FieldAccessor<BatteryCharger, TimerEventer>> _chargeTimer =
				new System.Lazy<FieldAccessor<BatteryCharger, TimerEventer>>(() => FieldAccessor<BatteryCharger, TimerEventer>.Create("chargeTimer"));
		private static readonly System.Lazy<FieldAccessor<BatteryCharger, TimerEventer>> _updateCanChargeTimer =
				new System.Lazy<FieldAccessor<BatteryCharger, TimerEventer>>(() => FieldAccessor<BatteryCharger, TimerEventer>.Create("updateCanChargeTimer"));
		private static readonly System.Lazy<FieldAccessor<BatteryCharger, Network_Player>> _localPlayer =
				new System.Lazy<FieldAccessor<BatteryCharger, Network_Player>>(() => FieldAccessor<BatteryCharger, Network_Player>.Create("localPlayer"));
		private static readonly System.Lazy<FieldAccessor<BatteryCharger, bool>> _hasBeenPlaced =
				new System.Lazy<FieldAccessor<BatteryCharger, bool>>(() => FieldAccessor<BatteryCharger, bool>.Create("hasBeenPlaced"));

		public static StudioEventEmitterSustain GetEventEmitter_charging(this BatteryCharger __self) => _eventEmitter_charging.Value.GetValue(__self);
		public static void SetEventEmitter_charging(this BatteryCharger __self, StudioEventEmitterSustain value) => _eventEmitter_charging.Value.SetValue(__self, value);
		public static Raft_Network GetNetwork(this BatteryCharger __self) => _network.Value.GetValue(__self);
		public static void SetNetwork(this BatteryCharger __self, Raft_Network value) => _network.Value.SetValue(__self, value);
		public static TimerEventer GetChargeTimer(this BatteryCharger __self) => _chargeTimer.Value.GetValue(__self);
		public static void SetChargeTimer(this BatteryCharger __self, TimerEventer value) => _chargeTimer.Value.SetValue(__self, value);
		public static TimerEventer GetUpdateCanChargeTimer(this BatteryCharger __self) => _updateCanChargeTimer.Value.GetValue(__self);
		public static void SetUpdateCanChargeTimer(this BatteryCharger __self, TimerEventer value) => _updateCanChargeTimer.Value.SetValue(__self, value);
		public static Network_Player GetLocalPlayer(this BatteryCharger __self) => _localPlayer.Value.GetValue(__self);
		public static void SetLocalPlayer(this BatteryCharger __self, Network_Player value) => _localPlayer.Value.SetValue(__self, value);
		public static bool GetHasBeenPlaced(this BatteryCharger __self) => _hasBeenPlaced.Value.GetValue(__self);
		public static void SetHasBeenPlaced(this BatteryCharger __self, bool value) => _hasBeenPlaced.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<BatteryCharger>> _OnValidate757602046 =
				new System.Lazy<MethodAccessor<BatteryCharger>>(() => MethodAccessor<BatteryCharger>.Create("OnValidate"));
		private static readonly System.Lazy<MethodAccessor<BatteryCharger>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<BatteryCharger>>(() => MethodAccessor<BatteryCharger>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<BatteryCharger>> _Update757602046 =
				new System.Lazy<MethodAccessor<BatteryCharger>>(() => MethodAccessor<BatteryCharger>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<BatteryCharger>> _OnTriggerBatteryCharge757602046 =
				new System.Lazy<MethodAccessor<BatteryCharger>>(() => MethodAccessor<BatteryCharger>.Create("OnTriggerBatteryCharge"));
		private static readonly System.Lazy<MethodAccessor<BatteryCharger>> _OnDoRequireChargeCheck757602046 =
				new System.Lazy<MethodAccessor<BatteryCharger>>(() => MethodAccessor<BatteryCharger>.Create("OnDoRequireChargeCheck"));
		private static readonly System.Lazy<MethodAccessor<BatteryCharger>> _AttemptRechargeBattery3482064742 =
				new System.Lazy<MethodAccessor<BatteryCharger>>(() => MethodAccessor<BatteryCharger>.Create("AttemptRechargeBattery", typeof(Battery)));
		private static readonly System.Lazy<MethodAccessor<BatteryCharger>> _DoesRequireCharge3482064742 =
				new System.Lazy<MethodAccessor<BatteryCharger>>(() => MethodAccessor<BatteryCharger>.Create("DoesRequireCharge", typeof(Battery)));
		private static readonly System.Lazy<MethodAccessor<BatteryCharger>> _RechargeBattery3482064742 =
				new System.Lazy<MethodAccessor<BatteryCharger>>(() => MethodAccessor<BatteryCharger>.Create("RechargeBattery", typeof(Battery)));

		public static void OnValidate(this BatteryCharger __self) => _OnValidate757602046.Value.Invoke(__self);
		public static void OnDestroy(this BatteryCharger __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void Update(this BatteryCharger __self) => _Update757602046.Value.Invoke(__self);
		public static void OnTriggerBatteryCharge(this BatteryCharger __self) => _OnTriggerBatteryCharge757602046.Value.Invoke(__self);
		public static void OnDoRequireChargeCheck(this BatteryCharger __self) => _OnDoRequireChargeCheck757602046.Value.Invoke(__self);
		public static bool AttemptRechargeBattery(this BatteryCharger __self, Battery battery) => (bool)_AttemptRechargeBattery3482064742.Value.Invoke(__self, battery);
		public static bool DoesRequireCharge(this BatteryCharger __self, Battery battery) => (bool)_DoesRequireCharge3482064742.Value.Invoke(__self, battery);
		public static void RechargeBattery(this BatteryCharger __self, Battery battery) => _RechargeBattery3482064742.Value.Invoke(__self, battery);

	}

	public static class PrivateAccessor_Bed
	{

		private static readonly System.Lazy<FieldAccessor<Bed, PlayerFullBodyAnimation>> _fullbodyAnimation =
				new System.Lazy<FieldAccessor<Bed, PlayerFullBodyAnimation>>(() => FieldAccessor<Bed, PlayerFullBodyAnimation>.Create("fullbodyAnimation"));
		private static readonly System.Lazy<FieldAccessor<Bed, UnityEngine.Transform>> _respawnPoint =
				new System.Lazy<FieldAccessor<Bed, UnityEngine.Transform>>(() => FieldAccessor<Bed, UnityEngine.Transform>.Create("respawnPoint"));
		private static readonly System.Lazy<FieldAccessor<Bed, UnityEngine.Transform>> _sleepPoint =
				new System.Lazy<FieldAccessor<Bed, UnityEngine.Transform>>(() => FieldAccessor<Bed, UnityEngine.Transform>.Create("sleepPoint"));
		private static readonly System.Lazy<FieldAccessor<Bed, UnityEngine.BoxCollider>> _interactBox =
				new System.Lazy<FieldAccessor<Bed, UnityEngine.BoxCollider>>(() => FieldAccessor<Bed, UnityEngine.BoxCollider>.Create("interactBox"));
		private static readonly System.Lazy<FieldAccessor<Bed, UnityEngine.GameObject>> _sheetSleeping =
				new System.Lazy<FieldAccessor<Bed, UnityEngine.GameObject>>(() => FieldAccessor<Bed, UnityEngine.GameObject>.Create("sheetSleeping"));
		private static readonly System.Lazy<FieldAccessor<Bed, UnityEngine.GameObject>> _sheetNormal =
				new System.Lazy<FieldAccessor<Bed, UnityEngine.GameObject>>(() => FieldAccessor<Bed, UnityEngine.GameObject>.Create("sheetNormal"));
		private static readonly System.Lazy<FieldAccessor<Bed, float>> _healthPercentage =
				new System.Lazy<FieldAccessor<Bed, float>>(() => FieldAccessor<Bed, float>.Create("healthPercentage"));
		private static readonly System.Lazy<FieldAccessor<Bed, float>> _hungerPercentage =
				new System.Lazy<FieldAccessor<Bed, float>>(() => FieldAccessor<Bed, float>.Create("hungerPercentage"));
		private static readonly System.Lazy<FieldAccessor<Bed, float>> _thirstPercentage =
				new System.Lazy<FieldAccessor<Bed, float>>(() => FieldAccessor<Bed, float>.Create("thirstPercentage"));
		private static readonly System.Lazy<FieldAccessor<Bed, float>> _healthRegen =
				new System.Lazy<FieldAccessor<Bed, float>>(() => FieldAccessor<Bed, float>.Create("healthRegen"));
		private static readonly System.Lazy<FieldAccessor<Bed, float>> _hungerDecay =
				new System.Lazy<FieldAccessor<Bed, float>>(() => FieldAccessor<Bed, float>.Create("hungerDecay"));
		private static readonly System.Lazy<FieldAccessor<Bed, float>> _thirstDecay =
				new System.Lazy<FieldAccessor<Bed, float>>(() => FieldAccessor<Bed, float>.Create("thirstDecay"));
		private static readonly System.Lazy<FieldAccessor<Bed, Network_Player>> _currentPlayer =
				new System.Lazy<FieldAccessor<Bed, Network_Player>>(() => FieldAccessor<Bed, Network_Player>.Create("currentPlayer"));
		private static readonly System.Lazy<FieldAccessor<Bed, CanvasHelper>> _canvas =
				new System.Lazy<FieldAccessor<Bed, CanvasHelper>>(() => FieldAccessor<Bed, CanvasHelper>.Create("canvas"));
		private static readonly System.Lazy<FieldAccessor<Bed, Network_Player>> _localPlayer =
				new System.Lazy<FieldAccessor<Bed, Network_Player>>(() => FieldAccessor<Bed, Network_Player>.Create("localPlayer"));
		private static readonly System.Lazy<FieldAccessor<Bed, bool>> _showText =
				new System.Lazy<FieldAccessor<Bed, bool>>(() => FieldAccessor<Bed, bool>.Create("showText"));

		public static PlayerFullBodyAnimation GetFullbodyAnimation(this Bed __self) => _fullbodyAnimation.Value.GetValue(__self);
		public static void SetFullbodyAnimation(this Bed __self, PlayerFullBodyAnimation value) => _fullbodyAnimation.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetRespawnPoint(this Bed __self) => _respawnPoint.Value.GetValue(__self);
		public static void SetRespawnPoint(this Bed __self, UnityEngine.Transform value) => _respawnPoint.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetSleepPoint(this Bed __self) => _sleepPoint.Value.GetValue(__self);
		public static void SetSleepPoint(this Bed __self, UnityEngine.Transform value) => _sleepPoint.Value.SetValue(__self, value);
		public static UnityEngine.BoxCollider GetInteractBox(this Bed __self) => _interactBox.Value.GetValue(__self);
		public static void SetInteractBox(this Bed __self, UnityEngine.BoxCollider value) => _interactBox.Value.SetValue(__self, value);
		public static UnityEngine.GameObject GetSheetSleeping(this Bed __self) => _sheetSleeping.Value.GetValue(__self);
		public static void SetSheetSleeping(this Bed __self, UnityEngine.GameObject value) => _sheetSleeping.Value.SetValue(__self, value);
		public static UnityEngine.GameObject GetSheetNormal(this Bed __self) => _sheetNormal.Value.GetValue(__self);
		public static void SetSheetNormal(this Bed __self, UnityEngine.GameObject value) => _sheetNormal.Value.SetValue(__self, value);
		public static float GetHealthPercentage(this Bed __self) => _healthPercentage.Value.GetValue(__self);
		public static void SetHealthPercentage(this Bed __self, float value) => _healthPercentage.Value.SetValue(__self, value);
		public static float GetHungerPercentage(this Bed __self) => _hungerPercentage.Value.GetValue(__self);
		public static void SetHungerPercentage(this Bed __self, float value) => _hungerPercentage.Value.SetValue(__self, value);
		public static float GetThirstPercentage(this Bed __self) => _thirstPercentage.Value.GetValue(__self);
		public static void SetThirstPercentage(this Bed __self, float value) => _thirstPercentage.Value.SetValue(__self, value);
		public static float GetHealthRegen(this Bed __self) => _healthRegen.Value.GetValue(__self);
		public static void SetHealthRegen(this Bed __self, float value) => _healthRegen.Value.SetValue(__self, value);
		public static float GetHungerDecay(this Bed __self) => _hungerDecay.Value.GetValue(__self);
		public static void SetHungerDecay(this Bed __self, float value) => _hungerDecay.Value.SetValue(__self, value);
		public static float GetThirstDecay(this Bed __self) => _thirstDecay.Value.GetValue(__self);
		public static void SetThirstDecay(this Bed __self, float value) => _thirstDecay.Value.SetValue(__self, value);
		public static Network_Player GetCurrentPlayer(this Bed __self) => _currentPlayer.Value.GetValue(__self);
		public static void SetCurrentPlayer(this Bed __self, Network_Player value) => _currentPlayer.Value.SetValue(__self, value);
		public static CanvasHelper GetCanvas(this Bed __self) => _canvas.Value.GetValue(__self);
		public static void SetCanvas(this Bed __self, CanvasHelper value) => _canvas.Value.SetValue(__self, value);
		public static Network_Player GetLocalPlayer(this Bed __self) => _localPlayer.Value.GetValue(__self);
		public static void SetLocalPlayer(this Bed __self, Network_Player value) => _localPlayer.Value.SetValue(__self, value);
		public static bool GetShowText(this Bed __self) => _showText.Value.GetValue(__self);
		public static void SetShowText(this Bed __self, bool value) => _showText.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Bed>> _Start757602046 =
				new System.Lazy<MethodAccessor<Bed>>(() => MethodAccessor<Bed>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<Bed>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<Bed>>(() => MethodAccessor<Bed>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<Bed>> _HandleAwake757602046 =
				new System.Lazy<MethodAccessor<Bed>>(() => MethodAccessor<Bed>.Create("HandleAwake"));
		private static readonly System.Lazy<MethodAccessor<Bed>> _SetSheetState3450040886 =
				new System.Lazy<MethodAccessor<Bed>>(() => MethodAccessor<Bed>.Create("SetSheetState", typeof(bool)));

		public static void Start(this Bed __self) => _Start757602046.Value.Invoke(__self);
		public static void OnDestroy(this Bed __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void HandleAwake(this Bed __self) => _HandleAwake757602046.Value.Invoke(__self);
		public static void SetSheetState(this Bed __self, bool playerSleeping) => _SetSheetState3450040886.Value.Invoke(__self, playerSleeping);

	}

	public static class PrivateAccessor_BeeHive
	{

		private static readonly System.Lazy<FieldAccessor<BeeHive, BlockButton_PickupItemText>> _harvestBlockButton =
				new System.Lazy<FieldAccessor<BeeHive, BlockButton_PickupItemText>>(() => FieldAccessor<BeeHive, BlockButton_PickupItemText>.Create("harvestBlockButton"));
		private static readonly System.Lazy<FieldAccessor<BeeHive, Beehive_HoneyLevel[]>> _honeyLevels =
				new System.Lazy<FieldAccessor<BeeHive, Beehive_HoneyLevel[]>>(() => FieldAccessor<BeeHive, Beehive_HoneyLevel[]>.Create("honeyLevels"));
		private static readonly System.Lazy<FieldAccessor<BeeHive, float>> __blockAmountMaxDistanceToFlowerCropplots =
				new System.Lazy<FieldAccessor<BeeHive, float>>(() => FieldAccessor<BeeHive, float>.Create("_blockAmountMaxDistanceToFlowerCropplots"));
		private static readonly System.Lazy<FieldAccessor<BeeHive, float>> _productionCooldown =
				new System.Lazy<FieldAccessor<BeeHive, float>>(() => FieldAccessor<BeeHive, float>.Create("productionCooldown"));
		private static readonly System.Lazy<FieldAccessor<BeeHive, float>> _checkParticleCooldown =
				new System.Lazy<FieldAccessor<BeeHive, float>>(() => FieldAccessor<BeeHive, float>.Create("checkParticleCooldown"));
		private static readonly System.Lazy<FieldAccessor<BeeHive, FMODUnity.StudioEventEmitter>> _beeAmbienceEmitter =
				new System.Lazy<FieldAccessor<BeeHive, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<BeeHive, FMODUnity.StudioEventEmitter>.Create("beeAmbienceEmitter"));
		private static readonly System.Lazy<FieldAccessor<BeeHive, System.Collections.Generic.List<Cropplot>>> _plantationCropplots =
				new System.Lazy<FieldAccessor<BeeHive, System.Collections.Generic.List<Cropplot>>>(() => FieldAccessor<BeeHive, System.Collections.Generic.List<Cropplot>>.Create("plantationCropplots"));
		private static readonly System.Lazy<FieldAccessor<BeeHive, Raft_Network>> _network =
				new System.Lazy<FieldAccessor<BeeHive, Raft_Network>>(() => FieldAccessor<BeeHive, Raft_Network>.Create("network"));
		private static readonly System.Lazy<FieldAccessor<BeeHive, Network_Player>> _localPlayer =
				new System.Lazy<FieldAccessor<BeeHive, Network_Player>>(() => FieldAccessor<BeeHive, Network_Player>.Create("localPlayer"));
		private static readonly System.Lazy<FieldAccessor<BeeHive, TimerEventer>> _checkParticleTimer =
				new System.Lazy<FieldAccessor<BeeHive, TimerEventer>>(() => FieldAccessor<BeeHive, TimerEventer>.Create("checkParticleTimer"));
		private static readonly System.Lazy<FieldAccessor<BeeHive, bool>> _isPlaced =
				new System.Lazy<FieldAccessor<BeeHive, bool>>(() => FieldAccessor<BeeHive, bool>.Create("isPlaced"));
		private static readonly System.Lazy<FieldAccessor<BeeHive, int>> _flowersInPlantationSlots =
				new System.Lazy<FieldAccessor<BeeHive, int>>(() => FieldAccessor<BeeHive, int>.Create("flowersInPlantationSlots"));

		public static BlockButton_PickupItemText GetHarvestBlockButton(this BeeHive __self) => _harvestBlockButton.Value.GetValue(__self);
		public static void SetHarvestBlockButton(this BeeHive __self, BlockButton_PickupItemText value) => _harvestBlockButton.Value.SetValue(__self, value);
		public static Beehive_HoneyLevel[] GetHoneyLevels(this BeeHive __self) => _honeyLevels.Value.GetValue(__self);
		public static void SetHoneyLevels(this BeeHive __self, Beehive_HoneyLevel[] value) => _honeyLevels.Value.SetValue(__self, value);
		public static float Get_blockAmountMaxDistanceToFlowerCropplots(this BeeHive __self) => __blockAmountMaxDistanceToFlowerCropplots.Value.GetValue(__self);
		public static void Set_blockAmountMaxDistanceToFlowerCropplots(this BeeHive __self, float value) => __blockAmountMaxDistanceToFlowerCropplots.Value.SetValue(__self, value);
		public static float GetProductionCooldown(this BeeHive __self) => _productionCooldown.Value.GetValue(__self);
		public static void SetProductionCooldown(this BeeHive __self, float value) => _productionCooldown.Value.SetValue(__self, value);
		public static float GetCheckParticleCooldown(this BeeHive __self) => _checkParticleCooldown.Value.GetValue(__self);
		public static void SetCheckParticleCooldown(this BeeHive __self, float value) => _checkParticleCooldown.Value.SetValue(__self, value);
		public static FMODUnity.StudioEventEmitter GetBeeAmbienceEmitter(this BeeHive __self) => _beeAmbienceEmitter.Value.GetValue(__self);
		public static void SetBeeAmbienceEmitter(this BeeHive __self, FMODUnity.StudioEventEmitter value) => _beeAmbienceEmitter.Value.SetValue(__self, value);
		public static System.Collections.Generic.List<Cropplot> GetPlantationCropplots(this BeeHive __self) => _plantationCropplots.Value.GetValue(__self);
		public static void SetPlantationCropplots(this BeeHive __self, System.Collections.Generic.List<Cropplot> value) => _plantationCropplots.Value.SetValue(__self, value);
		public static Raft_Network GetNetwork(this BeeHive __self) => _network.Value.GetValue(__self);
		public static void SetNetwork(this BeeHive __self, Raft_Network value) => _network.Value.SetValue(__self, value);
		public static Network_Player GetLocalPlayer(this BeeHive __self) => _localPlayer.Value.GetValue(__self);
		public static void SetLocalPlayer(this BeeHive __self, Network_Player value) => _localPlayer.Value.SetValue(__self, value);
		public static TimerEventer GetCheckParticleTimer(this BeeHive __self) => _checkParticleTimer.Value.GetValue(__self);
		public static void SetCheckParticleTimer(this BeeHive __self, TimerEventer value) => _checkParticleTimer.Value.SetValue(__self, value);
		public static bool GetIsPlaced(this BeeHive __self) => _isPlaced.Value.GetValue(__self);
		public static void SetIsPlaced(this BeeHive __self, bool value) => _isPlaced.Value.SetValue(__self, value);
		public static int GetFlowersInPlantationSlots(this BeeHive __self) => _flowersInPlantationSlots.Value.GetValue(__self);
		public static void SetFlowersInPlantationSlots(this BeeHive __self, int value) => _flowersInPlantationSlots.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<BeeHive>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<BeeHive>>(() => MethodAccessor<BeeHive>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<BeeHive>> _Update757602046 =
				new System.Lazy<MethodAccessor<BeeHive>>(() => MethodAccessor<BeeHive>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<BeeHive>> _AttemptProduction757602046 =
				new System.Lazy<MethodAccessor<BeeHive>>(() => MethodAccessor<BeeHive>.Create("AttemptProduction"));
		private static readonly System.Lazy<MethodAccessor<BeeHive>> _RecheckBeeParticles757602046 =
				new System.Lazy<MethodAccessor<BeeHive>>(() => MethodAccessor<BeeHive>.Create("RecheckBeeParticles"));
		private static readonly System.Lazy<MethodAccessor<BeeHive>> _ButtonHarvestYield757602046 =
				new System.Lazy<MethodAccessor<BeeHive>>(() => MethodAccessor<BeeHive>.Create("ButtonHarvestYield"));
		private static readonly System.Lazy<MethodAccessor<BeeHive>> _HarvestYield3461878659 =
				new System.Lazy<MethodAccessor<BeeHive>>(() => MethodAccessor<BeeHive>.Create("HarvestYield", typeof(Network_Player)));
		private static readonly System.Lazy<MethodAccessor<BeeHive>> _CalculateHoneyLevelIndex3486186818 =
				new System.Lazy<MethodAccessor<BeeHive>>(() => MethodAccessor<BeeHive>.Create("CalculateHoneyLevelIndex", typeof(int)));
		private static readonly System.Lazy<MethodAccessor<BeeHive>> _CanHarvest757602046 =
				new System.Lazy<MethodAccessor<BeeHive>>(() => MethodAccessor<BeeHive>.Create("CanHarvest"));
		private static readonly System.Lazy<MethodAccessor<BeeHive>> _SetBeeAmbienceSoundActive3450040886 =
				new System.Lazy<MethodAccessor<BeeHive>>(() => MethodAccessor<BeeHive>.Create("SetBeeAmbienceSoundActive", typeof(bool)));
		private static readonly System.Lazy<MethodAccessor<BeeHive>> _GetWateredFlowerPlantationSlotCount757602046 =
				new System.Lazy<MethodAccessor<BeeHive>>(() => MethodAccessor<BeeHive>.Create("GetWateredFlowerPlantationSlotCount"));
		private static readonly System.Lazy<MethodAccessor<BeeHive>> _IsPlantationSlotFlower3439793278 =
				new System.Lazy<MethodAccessor<BeeHive>>(() => MethodAccessor<BeeHive>.Create("IsPlantationSlotFlower", typeof(PlantationSlot)));
		private static readonly System.Lazy<MethodAccessor<BeeHive>> _HandleCropplotModified1044102573 =
				new System.Lazy<MethodAccessor<BeeHive>>(() => MethodAccessor<BeeHive>.Create("HandleCropplotModified", typeof(Cropplot), typeof(PlantManager.ObjectModification)));

		public static void OnDestroy(this BeeHive __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void Update(this BeeHive __self) => _Update757602046.Value.Invoke(__self);
		public static void AttemptProduction(this BeeHive __self) => _AttemptProduction757602046.Value.Invoke(__self);
		public static void RecheckBeeParticles(this BeeHive __self) => _RecheckBeeParticles757602046.Value.Invoke(__self);
		public static void ButtonHarvestYield(this BeeHive __self) => _ButtonHarvestYield757602046.Value.Invoke(__self);
		public static void HarvestYield(this BeeHive __self, Network_Player player) => _HarvestYield3461878659.Value.Invoke(__self, player);
		public static int CalculateHoneyLevelIndex(this BeeHive __self, int currentFlowerCount) => (int)_CalculateHoneyLevelIndex3486186818.Value.Invoke(__self, currentFlowerCount);
		public static bool CanHarvest(this BeeHive __self) => (bool)_CanHarvest757602046.Value.Invoke(__self);
		public static void SetBeeAmbienceSoundActive(this BeeHive __self, bool value) => _SetBeeAmbienceSoundActive3450040886.Value.Invoke(__self, value);
		public static int GetWateredFlowerPlantationSlotCount(this BeeHive __self) => (int)_GetWateredFlowerPlantationSlotCount757602046.Value.Invoke(__self);
		public static bool IsPlantationSlotFlower(this BeeHive __self, PlantationSlot slot) => (bool)_IsPlantationSlotFlower3439793278.Value.Invoke(__self, slot);
		public static void HandleCropplotModified(this BeeHive __self, Cropplot plot, PlantManager.ObjectModification modification) => _HandleCropplotModified1044102573.Value.Invoke(__self, plot, modification);

	}

	public static class PrivateAccessor_Message_BeeHive_Create
	{

		private static readonly System.Lazy<MethodAccessor<Message_BeeHive_Create>> _GetBeeHiveFromObjectIndex3507280400 =
				new System.Lazy<MethodAccessor<Message_BeeHive_Create>>(() => MethodAccessor<Message_BeeHive_Create>.Create("GetBeeHiveFromObjectIndex", typeof(BeeHive[]), typeof(uint)));

		public static BeeHive GetBeeHiveFromObjectIndex(this Message_BeeHive_Create __self, BeeHive[] beeHives, uint objectIndex) => (BeeHive)_GetBeeHiveFromObjectIndex3507280400.Value.Invoke(__self, beeHives, objectIndex);

	}

	public static class PrivateAccessor_BeeHive_BlockButton_Text
	{

		private static readonly System.Lazy<FieldAccessor<BeeHive_BlockButton_Text, BeeHive>> _beeHive =
				new System.Lazy<FieldAccessor<BeeHive_BlockButton_Text, BeeHive>>(() => FieldAccessor<BeeHive_BlockButton_Text, BeeHive>.Create("beeHive"));

		public static BeeHive GetBeeHive(this BeeHive_BlockButton_Text __self) => _beeHive.Value.GetValue(__self);
		public static void SetBeeHive(this BeeHive_BlockButton_Text __self, BeeHive value) => _beeHive.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<BeeHive_BlockButton_Text>> _ShowOnHoverText2054215474 =
				new System.Lazy<MethodAccessor<BeeHive_BlockButton_Text>>(() => MethodAccessor<BeeHive_BlockButton_Text>.Create("ShowOnHoverText", typeof(string), typeof(string)));

		public static void ShowOnHoverText(this BeeHive_BlockButton_Text __self, string p_localizationTerm, string p_keybindName) => _ShowOnHoverText2054215474.Value.Invoke(__self, p_localizationTerm, p_keybindName);

	}

	public static class PrivateAccessor_BirdsNest
	{

		private static readonly System.Lazy<FieldAccessor<BirdsNest, Item_Base>> _eggItem =
				new System.Lazy<FieldAccessor<BirdsNest, Item_Base>>(() => FieldAccessor<BirdsNest, Item_Base>.Create("eggItem"));
		private static readonly System.Lazy<FieldAccessor<BirdsNest, Item_Base>> _featherItem =
				new System.Lazy<FieldAccessor<BirdsNest, Item_Base>>(() => FieldAccessor<BirdsNest, Item_Base>.Create("featherItem"));
		private static readonly System.Lazy<FieldAccessor<BirdsNest, Raft_Network>> _network =
				new System.Lazy<FieldAccessor<BirdsNest, Raft_Network>>(() => FieldAccessor<BirdsNest, Raft_Network>.Create("network"));
		private static readonly System.Lazy<FieldAccessor<BirdsNest, bool>> _occupied =
				new System.Lazy<FieldAccessor<BirdsNest, bool>>(() => FieldAccessor<BirdsNest, bool>.Create("occupied"));
		private static readonly System.Lazy<FieldAccessor<BirdsNest, DisplayTextManager>> _displayTextManager =
				new System.Lazy<FieldAccessor<BirdsNest, DisplayTextManager>>(() => FieldAccessor<BirdsNest, DisplayTextManager>.Create("displayTextManager"));

		public static Item_Base GetEggItem(this BirdsNest __self) => _eggItem.Value.GetValue(__self);
		public static void SetEggItem(this BirdsNest __self, Item_Base value) => _eggItem.Value.SetValue(__self, value);
		public static Item_Base GetFeatherItem(this BirdsNest __self) => _featherItem.Value.GetValue(__self);
		public static void SetFeatherItem(this BirdsNest __self, Item_Base value) => _featherItem.Value.SetValue(__self, value);
		public static Raft_Network GetNetwork(this BirdsNest __self) => _network.Value.GetValue(__self);
		public static void SetNetwork(this BirdsNest __self, Raft_Network value) => _network.Value.SetValue(__self, value);
		public static bool GetOccupied(this BirdsNest __self) => _occupied.Value.GetValue(__self);
		public static void SetOccupied(this BirdsNest __self, bool value) => _occupied.Value.SetValue(__self, value);
		public static DisplayTextManager GetDisplayTextManager(this BirdsNest __self) => _displayTextManager.Value.GetValue(__self);
		public static void SetDisplayTextManager(this BirdsNest __self, DisplayTextManager value) => _displayTextManager.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<BirdsNest>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<BirdsNest>>(() => MethodAccessor<BirdsNest>.Create("OnDestroy"));

		public static void OnDestroy(this BirdsNest __self) => _OnDestroy757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_BlockButton
	{

		private static readonly System.Lazy<FieldAccessor<BlockButton, bool>> _hasBlockBeenPlaced =
				new System.Lazy<FieldAccessor<BlockButton, bool>>(() => FieldAccessor<BlockButton, bool>.Create("hasBlockBeenPlaced"));

		public static bool GetHasBlockBeenPlaced(this BlockButton __self) => _hasBlockBeenPlaced.Value.GetValue(__self);
		public static void SetHasBlockBeenPlaced(this BlockButton __self, bool value) => _hasBlockBeenPlaced.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<BlockButton>> _HandleOnIsRayed757602046 =
				new System.Lazy<MethodAccessor<BlockButton>>(() => MethodAccessor<BlockButton>.Create("HandleOnIsRayed"));

		public static void HandleOnIsRayed(this BlockButton __self) => _HandleOnIsRayed757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_BlockButton_PickupItemText
	{

		private static readonly System.Lazy<FieldAccessor<BlockButton_PickupItemText, Item_Base>> _pickupItem =
				new System.Lazy<FieldAccessor<BlockButton_PickupItemText, Item_Base>>(() => FieldAccessor<BlockButton_PickupItemText, Item_Base>.Create("pickupItem"));

		public static Item_Base GetPickupItem(this BlockButton_PickupItemText __self) => _pickupItem.Value.GetValue(__self);
		public static void SetPickupItem(this BlockButton_PickupItemText __self, Item_Base value) => _pickupItem.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<BlockButton_PickupItemText>> _OnValidate757602046 =
				new System.Lazy<MethodAccessor<BlockButton_PickupItemText>>(() => MethodAccessor<BlockButton_PickupItemText>.Create("OnValidate"));
		private static readonly System.Lazy<MethodAccessor<BlockButton_PickupItemText>> _ShowOnHoverText2054215474 =
				new System.Lazy<MethodAccessor<BlockButton_PickupItemText>>(() => MethodAccessor<BlockButton_PickupItemText>.Create("ShowOnHoverText", typeof(string), typeof(string)));

		public static void OnValidate(this BlockButton_PickupItemText __self) => _OnValidate757602046.Value.Invoke(__self);
		public static void ShowOnHoverText(this BlockButton_PickupItemText __self, string p_localizationTerm, string p_keybindName) => _ShowOnHoverText2054215474.Value.Invoke(__self, p_localizationTerm, p_keybindName);

	}

	public static class PrivateAccessor_Block_CookingStand
	{

		private static readonly System.Lazy<FieldAccessor<Block_CookingStand, Block_CookingStand.CookingSlotCollection[]>> _cookingSlotCollections =
				new System.Lazy<FieldAccessor<Block_CookingStand, Block_CookingStand.CookingSlotCollection[]>>(() => FieldAccessor<Block_CookingStand, Block_CookingStand.CookingSlotCollection[]>.Create("cookingSlotCollections"));
		private static readonly System.Lazy<FieldAccessor<Block_CookingStand, FMODUnity.StudioEventEmitter>> _soundEmitter =
				new System.Lazy<FieldAccessor<Block_CookingStand, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<Block_CookingStand, FMODUnity.StudioEventEmitter>.Create("soundEmitter"));
		private static readonly System.Lazy<FieldAccessor<Block_CookingStand, bool>> _endSoundEmitterWithCue =
				new System.Lazy<FieldAccessor<Block_CookingStand, bool>>(() => FieldAccessor<Block_CookingStand, bool>.Create("endSoundEmitterWithCue"));
		private static readonly System.Lazy<FieldAccessor<Block_CookingStand, FMODUnity.StudioEventEmitter>> _scndSoundEmitter =
				new System.Lazy<FieldAccessor<Block_CookingStand, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<Block_CookingStand, FMODUnity.StudioEventEmitter>.Create("scndSoundEmitter"));
		private static readonly System.Lazy<FieldAccessor<Block_CookingStand, bool>> _endScndSoundEmitterWithCue =
				new System.Lazy<FieldAccessor<Block_CookingStand, bool>>(() => FieldAccessor<Block_CookingStand, bool>.Create("endScndSoundEmitterWithCue"));
		private static readonly System.Lazy<FieldAccessor<Block_CookingStand, string>> _eventRef_pourWater =
				new System.Lazy<FieldAccessor<Block_CookingStand, string>>(() => FieldAccessor<Block_CookingStand, string>.Create("eventRef_pourWater"));
		private static readonly System.Lazy<FieldAccessor<Block_CookingStand, string>> _eventRef_fillWater =
				new System.Lazy<FieldAccessor<Block_CookingStand, string>>(() => FieldAccessor<Block_CookingStand, string>.Create("eventRef_fillWater"));
		private static readonly System.Lazy<FieldAccessor<Block_CookingStand, string>> _eventRef_placeItem =
				new System.Lazy<FieldAccessor<Block_CookingStand, string>>(() => FieldAccessor<Block_CookingStand, string>.Create("eventRef_placeItem"));
		private static readonly System.Lazy<FieldAccessor<Block_CookingStand, Network_Player>> _playerNetwork =
				new System.Lazy<FieldAccessor<Block_CookingStand, Network_Player>>(() => FieldAccessor<Block_CookingStand, Network_Player>.Create("playerNetwork"));
		private static readonly System.Lazy<FieldAccessor<Block_CookingStand, DisplayTextManager>> _displayTextManager =
				new System.Lazy<FieldAccessor<Block_CookingStand, DisplayTextManager>>(() => FieldAccessor<Block_CookingStand, DisplayTextManager>.Create("displayTextManager"));

		public static Block_CookingStand.CookingSlotCollection[] GetCookingSlotCollections(this Block_CookingStand __self) => _cookingSlotCollections.Value.GetValue(__self);
		public static void SetCookingSlotCollections(this Block_CookingStand __self, Block_CookingStand.CookingSlotCollection[] value) => _cookingSlotCollections.Value.SetValue(__self, value);
		public static FMODUnity.StudioEventEmitter GetSoundEmitter(this Block_CookingStand __self) => _soundEmitter.Value.GetValue(__self);
		public static void SetSoundEmitter(this Block_CookingStand __self, FMODUnity.StudioEventEmitter value) => _soundEmitter.Value.SetValue(__self, value);
		public static bool GetEndSoundEmitterWithCue(this Block_CookingStand __self) => _endSoundEmitterWithCue.Value.GetValue(__self);
		public static void SetEndSoundEmitterWithCue(this Block_CookingStand __self, bool value) => _endSoundEmitterWithCue.Value.SetValue(__self, value);
		public static FMODUnity.StudioEventEmitter GetScndSoundEmitter(this Block_CookingStand __self) => _scndSoundEmitter.Value.GetValue(__self);
		public static void SetScndSoundEmitter(this Block_CookingStand __self, FMODUnity.StudioEventEmitter value) => _scndSoundEmitter.Value.SetValue(__self, value);
		public static bool GetEndScndSoundEmitterWithCue(this Block_CookingStand __self) => _endScndSoundEmitterWithCue.Value.GetValue(__self);
		public static void SetEndScndSoundEmitterWithCue(this Block_CookingStand __self, bool value) => _endScndSoundEmitterWithCue.Value.SetValue(__self, value);
		public static string GetEventRef_pourWater(this Block_CookingStand __self) => _eventRef_pourWater.Value.GetValue(__self);
		public static void SetEventRef_pourWater(this Block_CookingStand __self, string value) => _eventRef_pourWater.Value.SetValue(__self, value);
		public static string GetEventRef_fillWater(this Block_CookingStand __self) => _eventRef_fillWater.Value.GetValue(__self);
		public static void SetEventRef_fillWater(this Block_CookingStand __self, string value) => _eventRef_fillWater.Value.SetValue(__self, value);
		public static string GetEventRef_placeItem(this Block_CookingStand __self) => _eventRef_placeItem.Value.GetValue(__self);
		public static void SetEventRef_placeItem(this Block_CookingStand __self, string value) => _eventRef_placeItem.Value.SetValue(__self, value);
		public static Network_Player GetPlayerNetwork(this Block_CookingStand __self) => _playerNetwork.Value.GetValue(__self);
		public static void SetPlayerNetwork(this Block_CookingStand __self, Network_Player value) => _playerNetwork.Value.SetValue(__self, value);
		public static DisplayTextManager GetDisplayTextManager(this Block_CookingStand __self) => _displayTextManager.Value.GetValue(__self);
		public static void SetDisplayTextManager(this Block_CookingStand __self, DisplayTextManager value) => _displayTextManager.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Block_CookingStand>> _Awake757602046 =
				new System.Lazy<MethodAccessor<Block_CookingStand>>(() => MethodAccessor<Block_CookingStand>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<Block_CookingStand>> _Start757602046 =
				new System.Lazy<MethodAccessor<Block_CookingStand>>(() => MethodAccessor<Block_CookingStand>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<Block_CookingStand>> _Update757602046 =
				new System.Lazy<MethodAccessor<Block_CookingStand>>(() => MethodAccessor<Block_CookingStand>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<Block_CookingStand>> _CheckForCollecting3424929776 =
				new System.Lazy<MethodAccessor<Block_CookingStand>>(() => MethodAccessor<Block_CookingStand>.Create("CheckForCollecting", typeof(CookingSlot)));
		private static readonly System.Lazy<MethodAccessor<Block_CookingStand>> _CanStartEnergySource757602046 =
				new System.Lazy<MethodAccessor<Block_CookingStand>>(() => MethodAccessor<Block_CookingStand>.Create("CanStartEnergySource"));
		private static readonly System.Lazy<MethodAccessor<Block_CookingStand>> _IsUsingEnergySource757602046 =
				new System.Lazy<MethodAccessor<Block_CookingStand>>(() => MethodAccessor<Block_CookingStand>.Create("IsUsingEnergySource"));
		private static readonly System.Lazy<MethodAccessor<Block_CookingStand>> _StartEnergySource757602046 =
				new System.Lazy<MethodAccessor<Block_CookingStand>>(() => MethodAccessor<Block_CookingStand>.Create("StartEnergySource"));
		private static readonly System.Lazy<MethodAccessor<Block_CookingStand>> _StopEnergySource757602046 =
				new System.Lazy<MethodAccessor<Block_CookingStand>>(() => MethodAccessor<Block_CookingStand>.Create("StopEnergySource"));
		private static readonly System.Lazy<MethodAccessor<Block_CookingStand>> _FinishSounds757602046 =
				new System.Lazy<MethodAccessor<Block_CookingStand>>(() => MethodAccessor<Block_CookingStand>.Create("FinishSounds"));
		private static readonly System.Lazy<MethodAccessor<Block_CookingStand>> _CookingSlotIsOurs3424929776 =
				new System.Lazy<MethodAccessor<Block_CookingStand>>(() => MethodAccessor<Block_CookingStand>.Create("CookingSlotIsOurs", typeof(CookingSlot)));
		private static readonly System.Lazy<MethodAccessor<Block_CookingStand>> _OnFuelRemoved757602046 =
				new System.Lazy<MethodAccessor<Block_CookingStand>>(() => MethodAccessor<Block_CookingStand>.Create("OnFuelRemoved"));
		private static readonly System.Lazy<MethodAccessor<Block_CookingStand>> _OnCookingSlotChanged3424929776 =
				new System.Lazy<MethodAccessor<Block_CookingStand>>(() => MethodAccessor<Block_CookingStand>.Create("OnCookingSlotChanged", typeof(CookingSlot)));
		private static readonly System.Lazy<MethodAccessor<Block_CookingStand>> _GetEmptyCookingSlot757602046 =
				new System.Lazy<MethodAccessor<Block_CookingStand>>(() => MethodAccessor<Block_CookingStand>.Create("GetEmptyCookingSlot"));
		private static readonly System.Lazy<MethodAccessor<Block_CookingStand>> _RawItemIsOnSlot757602046 =
				new System.Lazy<MethodAccessor<Block_CookingStand>>(() => MethodAccessor<Block_CookingStand>.Create("RawItemIsOnSlot"));

		public static void Awake(this Block_CookingStand __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this Block_CookingStand __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this Block_CookingStand __self) => _Update757602046.Value.Invoke(__self);
		public static void CheckForCollecting(this Block_CookingStand __self, CookingSlot slot) => _CheckForCollecting3424929776.Value.Invoke(__self, slot);
		public static bool CanStartEnergySource(this Block_CookingStand __self) => (bool)_CanStartEnergySource757602046.Value.Invoke(__self);
		public static bool IsUsingEnergySource(this Block_CookingStand __self) => (bool)_IsUsingEnergySource757602046.Value.Invoke(__self);
		public static void StartEnergySource(this Block_CookingStand __self) => _StartEnergySource757602046.Value.Invoke(__self);
		public static void StopEnergySource(this Block_CookingStand __self) => _StopEnergySource757602046.Value.Invoke(__self);
		public static void FinishSounds(this Block_CookingStand __self) => _FinishSounds757602046.Value.Invoke(__self);
		public static bool CookingSlotIsOurs(this Block_CookingStand __self, CookingSlot slot) => (bool)_CookingSlotIsOurs3424929776.Value.Invoke(__self, slot);
		public static void OnFuelRemoved(this Block_CookingStand __self) => _OnFuelRemoved757602046.Value.Invoke(__self);
		public static void OnCookingSlotChanged(this Block_CookingStand __self, CookingSlot slot) => _OnCookingSlotChanged3424929776.Value.Invoke(__self, slot);
		public static CookingSlot GetEmptyCookingSlot(this Block_CookingStand __self) => (CookingSlot)_GetEmptyCookingSlot757602046.Value.Invoke(__self);
		public static bool RawItemIsOnSlot(this Block_CookingStand __self) => (bool)_RawItemIsOnSlot757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Block_CookingStand_Electric
	{

		private static readonly System.Lazy<FieldAccessor<Block_CookingStand_Electric, UnityEngine.MeshRenderer>> _rend =
				new System.Lazy<FieldAccessor<Block_CookingStand_Electric, UnityEngine.MeshRenderer>>(() => FieldAccessor<Block_CookingStand_Electric, UnityEngine.MeshRenderer>.Create("rend"));
		private static readonly System.Lazy<FieldAccessor<Block_CookingStand_Electric, float>> _emissionLerpSpeed =
				new System.Lazy<FieldAccessor<Block_CookingStand_Electric, float>>(() => FieldAccessor<Block_CookingStand_Electric, float>.Create("emissionLerpSpeed"));
		private static readonly System.Lazy<FieldAccessor<Block_CookingStand_Electric, UnityEngine.MaterialPropertyBlock>> _materialPropertyBlock =
				new System.Lazy<FieldAccessor<Block_CookingStand_Electric, UnityEngine.MaterialPropertyBlock>>(() => FieldAccessor<Block_CookingStand_Electric, UnityEngine.MaterialPropertyBlock>.Create("materialPropertyBlock"));
		private static readonly System.Lazy<FieldAccessor<Block_CookingStand_Electric, float>> _timer =
				new System.Lazy<FieldAccessor<Block_CookingStand_Electric, float>>(() => FieldAccessor<Block_CookingStand_Electric, float>.Create("timer"));

		public static UnityEngine.MeshRenderer GetRend(this Block_CookingStand_Electric __self) => _rend.Value.GetValue(__self);
		public static void SetRend(this Block_CookingStand_Electric __self, UnityEngine.MeshRenderer value) => _rend.Value.SetValue(__self, value);
		public static float GetEmissionLerpSpeed(this Block_CookingStand_Electric __self) => _emissionLerpSpeed.Value.GetValue(__self);
		public static void SetEmissionLerpSpeed(this Block_CookingStand_Electric __self, float value) => _emissionLerpSpeed.Value.SetValue(__self, value);
		public static UnityEngine.MaterialPropertyBlock GetMaterialPropertyBlock(this Block_CookingStand_Electric __self) => _materialPropertyBlock.Value.GetValue(__self);
		public static void SetMaterialPropertyBlock(this Block_CookingStand_Electric __self, UnityEngine.MaterialPropertyBlock value) => _materialPropertyBlock.Value.SetValue(__self, value);
		public static float GetTimer(this Block_CookingStand_Electric __self) => _timer.Value.GetValue(__self);
		public static void SetTimer(this Block_CookingStand_Electric __self, float value) => _timer.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Block_CookingStand_Electric>> _Start757602046 =
				new System.Lazy<MethodAccessor<Block_CookingStand_Electric>>(() => MethodAccessor<Block_CookingStand_Electric>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<Block_CookingStand_Electric>> _Update757602046 =
				new System.Lazy<MethodAccessor<Block_CookingStand_Electric>>(() => MethodAccessor<Block_CookingStand_Electric>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<Block_CookingStand_Electric>> _CanStartEnergySource757602046 =
				new System.Lazy<MethodAccessor<Block_CookingStand_Electric>>(() => MethodAccessor<Block_CookingStand_Electric>.Create("CanStartEnergySource"));
		private static readonly System.Lazy<MethodAccessor<Block_CookingStand_Electric>> _IsUsingEnergySource757602046 =
				new System.Lazy<MethodAccessor<Block_CookingStand_Electric>>(() => MethodAccessor<Block_CookingStand_Electric>.Create("IsUsingEnergySource"));
		private static readonly System.Lazy<MethodAccessor<Block_CookingStand_Electric>> _StartEnergySource757602046 =
				new System.Lazy<MethodAccessor<Block_CookingStand_Electric>>(() => MethodAccessor<Block_CookingStand_Electric>.Create("StartEnergySource"));
		private static readonly System.Lazy<MethodAccessor<Block_CookingStand_Electric>> _StopEnergySource757602046 =
				new System.Lazy<MethodAccessor<Block_CookingStand_Electric>>(() => MethodAccessor<Block_CookingStand_Electric>.Create("StopEnergySource"));

		public static void Start(this Block_CookingStand_Electric __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this Block_CookingStand_Electric __self) => _Update757602046.Value.Invoke(__self);
		public static bool CanStartEnergySource(this Block_CookingStand_Electric __self) => (bool)_CanStartEnergySource757602046.Value.Invoke(__self);
		public static bool IsUsingEnergySource(this Block_CookingStand_Electric __self) => (bool)_IsUsingEnergySource757602046.Value.Invoke(__self);
		public static void StartEnergySource(this Block_CookingStand_Electric __self) => _StartEnergySource757602046.Value.Invoke(__self);
		public static void StopEnergySource(this Block_CookingStand_Electric __self) => _StopEnergySource757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Block_CookingStand_Purifier
	{

		private static readonly System.Lazy<FieldAccessor<Block_CookingStand_Purifier, FluidComponent>> _freshWater =
				new System.Lazy<FieldAccessor<Block_CookingStand_Purifier, FluidComponent>>(() => FieldAccessor<Block_CookingStand_Purifier, FluidComponent>.Create("freshWater"));
		private static readonly System.Lazy<FieldAccessor<Block_CookingStand_Purifier, FluidComponent>> _saltWater =
				new System.Lazy<FieldAccessor<Block_CookingStand_Purifier, FluidComponent>>(() => FieldAccessor<Block_CookingStand_Purifier, FluidComponent>.Create("saltWater"));

		public static FluidComponent GetFreshWater(this Block_CookingStand_Purifier __self) => _freshWater.Value.GetValue(__self);
		public static void SetFreshWater(this Block_CookingStand_Purifier __self, FluidComponent value) => _freshWater.Value.SetValue(__self, value);
		public static FluidComponent GetSaltWater(this Block_CookingStand_Purifier __self) => _saltWater.Value.GetValue(__self);
		public static void SetSaltWater(this Block_CookingStand_Purifier __self, FluidComponent value) => _saltWater.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Block_CookingStand_Purifier>> _Update757602046 =
				new System.Lazy<MethodAccessor<Block_CookingStand_Purifier>>(() => MethodAccessor<Block_CookingStand_Purifier>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<Block_CookingStand_Purifier>> _CheckForCollecting3424929776 =
				new System.Lazy<MethodAccessor<Block_CookingStand_Purifier>>(() => MethodAccessor<Block_CookingStand_Purifier>.Create("CheckForCollecting", typeof(CookingSlot)));
		private static readonly System.Lazy<MethodAccessor<Block_CookingStand_Purifier>> _GetActiveSlotCount757602046 =
				new System.Lazy<MethodAccessor<Block_CookingStand_Purifier>>(() => MethodAccessor<Block_CookingStand_Purifier>.Create("GetActiveSlotCount"));
		private static readonly System.Lazy<MethodAccessor<Block_CookingStand_Purifier>> _GetCompleteSlotCount757602046 =
				new System.Lazy<MethodAccessor<Block_CookingStand_Purifier>>(() => MethodAccessor<Block_CookingStand_Purifier>.Create("GetCompleteSlotCount"));

		public static void Update(this Block_CookingStand_Purifier __self) => _Update757602046.Value.Invoke(__self);
		public static void CheckForCollecting(this Block_CookingStand_Purifier __self, CookingSlot slot) => _CheckForCollecting3424929776.Value.Invoke(__self, slot);
		public static int GetActiveSlotCount(this Block_CookingStand_Purifier __self) => (int)_GetActiveSlotCount757602046.Value.Invoke(__self);
		public static int GetCompleteSlotCount(this Block_CookingStand_Purifier __self) => (int)_GetCompleteSlotCount757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Block_CookingStand_Smelter
	{

		private static readonly System.Lazy<FieldAccessor<Block_CookingStand_Smelter, int>> _batteryUsesPerMin =
				new System.Lazy<FieldAccessor<Block_CookingStand_Smelter, int>>(() => FieldAccessor<Block_CookingStand_Smelter, int>.Create("batteryUsesPerMin"));
		private static readonly System.Lazy<FieldAccessor<Block_CookingStand_Smelter, float>> _timer =
				new System.Lazy<FieldAccessor<Block_CookingStand_Smelter, float>>(() => FieldAccessor<Block_CookingStand_Smelter, float>.Create("timer"));
		private static readonly System.Lazy<FieldAccessor<Block_CookingStand_Smelter, bool>> _isUsingEnergy =
				new System.Lazy<FieldAccessor<Block_CookingStand_Smelter, bool>>(() => FieldAccessor<Block_CookingStand_Smelter, bool>.Create("isUsingEnergy"));

		public static int GetBatteryUsesPerMin(this Block_CookingStand_Smelter __self) => _batteryUsesPerMin.Value.GetValue(__self);
		public static void SetBatteryUsesPerMin(this Block_CookingStand_Smelter __self, int value) => _batteryUsesPerMin.Value.SetValue(__self, value);
		public static float GetTimer(this Block_CookingStand_Smelter __self) => _timer.Value.GetValue(__self);
		public static void SetTimer(this Block_CookingStand_Smelter __self, float value) => _timer.Value.SetValue(__self, value);
		public static bool GetIsUsingEnergy(this Block_CookingStand_Smelter __self) => _isUsingEnergy.Value.GetValue(__self);
		public static void SetIsUsingEnergy(this Block_CookingStand_Smelter __self, bool value) => _isUsingEnergy.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Block_CookingStand_Smelter>> _Update757602046 =
				new System.Lazy<MethodAccessor<Block_CookingStand_Smelter>>(() => MethodAccessor<Block_CookingStand_Smelter>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<Block_CookingStand_Smelter>> _StartEnergySource757602046 =
				new System.Lazy<MethodAccessor<Block_CookingStand_Smelter>>(() => MethodAccessor<Block_CookingStand_Smelter>.Create("StartEnergySource"));
		private static readonly System.Lazy<MethodAccessor<Block_CookingStand_Smelter>> _StopEnergySource757602046 =
				new System.Lazy<MethodAccessor<Block_CookingStand_Smelter>>(() => MethodAccessor<Block_CookingStand_Smelter>.Create("StopEnergySource"));
		private static readonly System.Lazy<MethodAccessor<Block_CookingStand_Smelter>> _IsUsingEnergySource757602046 =
				new System.Lazy<MethodAccessor<Block_CookingStand_Smelter>>(() => MethodAccessor<Block_CookingStand_Smelter>.Create("IsUsingEnergySource"));

		public static void Update(this Block_CookingStand_Smelter __self) => _Update757602046.Value.Invoke(__self);
		public static void StartEnergySource(this Block_CookingStand_Smelter __self) => _StartEnergySource757602046.Value.Invoke(__self);
		public static void StopEnergySource(this Block_CookingStand_Smelter __self) => _StopEnergySource757602046.Value.Invoke(__self);
		public static bool IsUsingEnergySource(this Block_CookingStand_Smelter __self) => (bool)_IsUsingEnergySource757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Block_CookingTable_Juicer
	{

		private static readonly System.Lazy<FieldAccessor<Block_CookingTable_Juicer, CookingTable_Juicer>> _juicer =
				new System.Lazy<FieldAccessor<Block_CookingTable_Juicer, CookingTable_Juicer>>(() => FieldAccessor<Block_CookingTable_Juicer, CookingTable_Juicer>.Create("juicer"));

		public static CookingTable_Juicer GetJuicer(this Block_CookingTable_Juicer __self) => _juicer.Value.GetValue(__self);
		public static void SetJuicer(this Block_CookingTable_Juicer __self, CookingTable_Juicer value) => _juicer.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_Block_CookingTable_Pot
	{

		private static readonly System.Lazy<FieldAccessor<Block_CookingTable_Pot, CookingTable_Pot>> _cookingPot =
				new System.Lazy<FieldAccessor<Block_CookingTable_Pot, CookingTable_Pot>>(() => FieldAccessor<Block_CookingTable_Pot, CookingTable_Pot>.Create("cookingPot"));

		public static CookingTable_Pot GetCookingPot(this Block_CookingTable_Pot __self) => _cookingPot.Value.GetValue(__self);
		public static void SetCookingPot(this Block_CookingTable_Pot __self, CookingTable_Pot value) => _cookingPot.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_Block_Firework
	{

		private static readonly System.Lazy<FieldAccessor<Block_Firework, UnityEngine.GameObject>> _fireworkModel =
				new System.Lazy<FieldAccessor<Block_Firework, UnityEngine.GameObject>>(() => FieldAccessor<Block_Firework, UnityEngine.GameObject>.Create("fireworkModel"));
		private static readonly System.Lazy<FieldAccessor<Block_Firework, UnityEngine.ParticleSystem>> _fuseParticle =
				new System.Lazy<FieldAccessor<Block_Firework, UnityEngine.ParticleSystem>>(() => FieldAccessor<Block_Firework, UnityEngine.ParticleSystem>.Create("fuseParticle"));
		private static readonly System.Lazy<FieldAccessor<Block_Firework, float>> _fuseTime =
				new System.Lazy<FieldAccessor<Block_Firework, float>>(() => FieldAccessor<Block_Firework, float>.Create("fuseTime"));
		private static readonly System.Lazy<FieldAccessor<Block_Firework, FMODUnity.StudioEventEmitter>> _emitter_fuse =
				new System.Lazy<FieldAccessor<Block_Firework, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<Block_Firework, FMODUnity.StudioEventEmitter>.Create("emitter_fuse"));
		private static readonly System.Lazy<FieldAccessor<Block_Firework, bool>> _hasBeenUsed =
				new System.Lazy<FieldAccessor<Block_Firework, bool>>(() => FieldAccessor<Block_Firework, bool>.Create("hasBeenUsed"));
		private static readonly System.Lazy<FieldAccessor<Block_Firework, Raft_Network>> _network =
				new System.Lazy<FieldAccessor<Block_Firework, Raft_Network>>(() => FieldAccessor<Block_Firework, Raft_Network>.Create("network"));

		public static UnityEngine.GameObject GetFireworkModel(this Block_Firework __self) => _fireworkModel.Value.GetValue(__self);
		public static void SetFireworkModel(this Block_Firework __self, UnityEngine.GameObject value) => _fireworkModel.Value.SetValue(__self, value);
		public static UnityEngine.ParticleSystem GetFuseParticle(this Block_Firework __self) => _fuseParticle.Value.GetValue(__self);
		public static void SetFuseParticle(this Block_Firework __self, UnityEngine.ParticleSystem value) => _fuseParticle.Value.SetValue(__self, value);
		public static float GetFuseTime(this Block_Firework __self) => _fuseTime.Value.GetValue(__self);
		public static void SetFuseTime(this Block_Firework __self, float value) => _fuseTime.Value.SetValue(__self, value);
		public static FMODUnity.StudioEventEmitter GetEmitter_fuse(this Block_Firework __self) => _emitter_fuse.Value.GetValue(__self);
		public static void SetEmitter_fuse(this Block_Firework __self, FMODUnity.StudioEventEmitter value) => _emitter_fuse.Value.SetValue(__self, value);
		public static bool GetHasBeenUsed(this Block_Firework __self) => _hasBeenUsed.Value.GetValue(__self);
		public static void SetHasBeenUsed(this Block_Firework __self, bool value) => _hasBeenUsed.Value.SetValue(__self, value);
		public static Raft_Network GetNetwork(this Block_Firework __self) => _network.Value.GetValue(__self);
		public static void SetNetwork(this Block_Firework __self, Raft_Network value) => _network.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Block_Firework>> _RemoveBlock757602046 =
				new System.Lazy<MethodAccessor<Block_Firework>>(() => MethodAccessor<Block_Firework>.Create("RemoveBlock"));
		private static readonly System.Lazy<MethodAccessor<Block_Firework>> _Launch757602046 =
				new System.Lazy<MethodAccessor<Block_Firework>>(() => MethodAccessor<Block_Firework>.Create("Launch"));

		public static void RemoveBlock(this Block_Firework __self) => _RemoveBlock757602046.Value.Invoke(__self);
		public static void Launch(this Block_Firework __self) => _Launch757602046.Value.Invoke(__self);

	}

	public static class Private_Block_Firework
	{

		private static readonly System.Lazy<StaticFieldAccessor<DisplayTextManager>> _displayTextManager =
				new System.Lazy<StaticFieldAccessor<DisplayTextManager>>(() => StaticFieldAccessor<DisplayTextManager>.Create(typeof(Block_Firework), "displayTextManager"));
		private static readonly System.Lazy<StaticFieldAccessor<Network_Player>> _localPlayer =
				new System.Lazy<StaticFieldAccessor<Network_Player>>(() => StaticFieldAccessor<Network_Player>.Create(typeof(Block_Firework), "localPlayer"));

		public static DisplayTextManager GetDisplayTextManager() => _displayTextManager.Value.GetValue();
		public static void SetDisplayTextManager(DisplayTextManager value) => _displayTextManager.Value.SetValue(value);
		public static Network_Player GetLocalPlayer() => _localPlayer.Value.GetValue();
		public static void SetLocalPlayer(Network_Player value) => _localPlayer.Value.SetValue(value);

	}

	public static class PrivateAccessor_Block_TicTacToe
	{

		private static readonly System.Lazy<FieldAccessor<Block_TicTacToe, TicTacToe>> _ticTacToe =
				new System.Lazy<FieldAccessor<Block_TicTacToe, TicTacToe>>(() => FieldAccessor<Block_TicTacToe, TicTacToe>.Create("ticTacToe"));
		private static readonly System.Lazy<FieldAccessor<Block_TicTacToe, UnityEngine.Mesh>> _mesh_X =
				new System.Lazy<FieldAccessor<Block_TicTacToe, UnityEngine.Mesh>>(() => FieldAccessor<Block_TicTacToe, UnityEngine.Mesh>.Create("mesh_X"));
		private static readonly System.Lazy<FieldAccessor<Block_TicTacToe, UnityEngine.Mesh>> _mesh_O =
				new System.Lazy<FieldAccessor<Block_TicTacToe, UnityEngine.Mesh>>(() => FieldAccessor<Block_TicTacToe, UnityEngine.Mesh>.Create("mesh_O"));
		private static readonly System.Lazy<FieldAccessor<Block_TicTacToe, InteractableButton_Networked_TicTacToe[]>> _buttons =
				new System.Lazy<FieldAccessor<Block_TicTacToe, InteractableButton_Networked_TicTacToe[]>>(() => FieldAccessor<Block_TicTacToe, InteractableButton_Networked_TicTacToe[]>.Create("buttons"));
		private static readonly System.Lazy<FieldAccessor<Block_TicTacToe, string>> _soundTakePiece =
				new System.Lazy<FieldAccessor<Block_TicTacToe, string>>(() => FieldAccessor<Block_TicTacToe, string>.Create("soundTakePiece"));
		private static readonly System.Lazy<FieldAccessor<Block_TicTacToe, string>> _soundDropPiece =
				new System.Lazy<FieldAccessor<Block_TicTacToe, string>>(() => FieldAccessor<Block_TicTacToe, string>.Create("soundDropPiece"));

		public static TicTacToe GetTicTacToe(this Block_TicTacToe __self) => _ticTacToe.Value.GetValue(__self);
		public static void SetTicTacToe(this Block_TicTacToe __self, TicTacToe value) => _ticTacToe.Value.SetValue(__self, value);
		public static UnityEngine.Mesh GetMesh_X(this Block_TicTacToe __self) => _mesh_X.Value.GetValue(__self);
		public static void SetMesh_X(this Block_TicTacToe __self, UnityEngine.Mesh value) => _mesh_X.Value.SetValue(__self, value);
		public static UnityEngine.Mesh GetMesh_O(this Block_TicTacToe __self) => _mesh_O.Value.GetValue(__self);
		public static void SetMesh_O(this Block_TicTacToe __self, UnityEngine.Mesh value) => _mesh_O.Value.SetValue(__self, value);
		public static InteractableButton_Networked_TicTacToe[] GetButtons(this Block_TicTacToe __self) => _buttons.Value.GetValue(__self);
		public static void SetButtons(this Block_TicTacToe __self, InteractableButton_Networked_TicTacToe[] value) => _buttons.Value.SetValue(__self, value);
		public static string GetSoundTakePiece(this Block_TicTacToe __self) => _soundTakePiece.Value.GetValue(__self);
		public static void SetSoundTakePiece(this Block_TicTacToe __self, string value) => _soundTakePiece.Value.SetValue(__self, value);
		public static string GetSoundDropPiece(this Block_TicTacToe __self) => _soundDropPiece.Value.GetValue(__self);
		public static void SetSoundDropPiece(this Block_TicTacToe __self, string value) => _soundDropPiece.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Block_TicTacToe>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<Block_TicTacToe>>(() => MethodAccessor<Block_TicTacToe>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<Block_TicTacToe>> _GetPlacedMeshCount3437154596 =
				new System.Lazy<MethodAccessor<Block_TicTacToe>>(() => MethodAccessor<Block_TicTacToe>.Create("GetPlacedMeshCount", typeof(UnityEngine.Mesh)));

		public static void OnDestroy(this Block_TicTacToe __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static int GetPlacedMeshCount(this Block_TicTacToe __self, UnityEngine.Mesh meshToCompare) => (int)_GetPlacedMeshCount3437154596.Value.Invoke(__self, meshToCompare);

	}

	public static class PrivateAccessor_Block_Wardrobe
	{

		private static readonly System.Lazy<FieldAccessor<Block_Wardrobe, Placeable_Wardrobe>> _placeableWardrobe =
				new System.Lazy<FieldAccessor<Block_Wardrobe, Placeable_Wardrobe>>(() => FieldAccessor<Block_Wardrobe, Placeable_Wardrobe>.Create("placeableWardrobe"));
		private static readonly System.Lazy<FieldAccessor<Block_Wardrobe, CanvasHelper>> _canvas =
				new System.Lazy<FieldAccessor<Block_Wardrobe, CanvasHelper>>(() => FieldAccessor<Block_Wardrobe, CanvasHelper>.Create("canvas"));
		private static readonly System.Lazy<FieldAccessor<Block_Wardrobe, bool>> _inputReleased =
				new System.Lazy<FieldAccessor<Block_Wardrobe, bool>>(() => FieldAccessor<Block_Wardrobe, bool>.Create("inputReleased"));

		public static Placeable_Wardrobe GetPlaceableWardrobe(this Block_Wardrobe __self) => _placeableWardrobe.Value.GetValue(__self);
		public static void SetPlaceableWardrobe(this Block_Wardrobe __self, Placeable_Wardrobe value) => _placeableWardrobe.Value.SetValue(__self, value);
		public static CanvasHelper GetCanvas(this Block_Wardrobe __self) => _canvas.Value.GetValue(__self);
		public static void SetCanvas(this Block_Wardrobe __self, CanvasHelper value) => _canvas.Value.SetValue(__self, value);
		public static bool GetInputReleased(this Block_Wardrobe __self) => _inputReleased.Value.GetValue(__self);
		public static void SetInputReleased(this Block_Wardrobe __self, bool value) => _inputReleased.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Block_Wardrobe>> _Start757602046 =
				new System.Lazy<MethodAccessor<Block_Wardrobe>>(() => MethodAccessor<Block_Wardrobe>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<Block_Wardrobe>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<Block_Wardrobe>>(() => MethodAccessor<Block_Wardrobe>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<Block_Wardrobe>> _Update757602046 =
				new System.Lazy<MethodAccessor<Block_Wardrobe>>(() => MethodAccessor<Block_Wardrobe>.Create("Update"));

		public static void Start(this Block_Wardrobe __self) => _Start757602046.Value.Invoke(__self);
		public static void OnDestroy(this Block_Wardrobe __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void Update(this Block_Wardrobe __self) => _Update757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Block_Windturbine
	{

		private static readonly System.Lazy<FieldAccessor<Block_Windturbine, WindTurbine>> _windturbine =
				new System.Lazy<FieldAccessor<Block_Windturbine, WindTurbine>>(() => FieldAccessor<Block_Windturbine, WindTurbine>.Create("windturbine"));

		public static WindTurbine GetWindturbine(this Block_Windturbine __self) => _windturbine.Value.GetValue(__self);
		public static void SetWindturbine(this Block_Windturbine __self, WindTurbine value) => _windturbine.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_Brick_Wet
	{

		private static readonly System.Lazy<FieldAccessor<Brick_Wet, UnityEngine.MeshFilter>> _filter =
				new System.Lazy<FieldAccessor<Brick_Wet, UnityEngine.MeshFilter>>(() => FieldAccessor<Brick_Wet, UnityEngine.MeshFilter>.Create("filter"));
		private static readonly System.Lazy<FieldAccessor<Brick_Wet, UnityEngine.Mesh>> _dryMesh =
				new System.Lazy<FieldAccessor<Brick_Wet, UnityEngine.Mesh>>(() => FieldAccessor<Brick_Wet, UnityEngine.Mesh>.Create("dryMesh"));
		private static readonly System.Lazy<FieldAccessor<Brick_Wet, float>> _timer =
				new System.Lazy<FieldAccessor<Brick_Wet, float>>(() => FieldAccessor<Brick_Wet, float>.Create("timer"));
		private static readonly System.Lazy<FieldAccessor<Brick_Wet, PlayerNetworkManager>> _playerNetworkManager =
				new System.Lazy<FieldAccessor<Brick_Wet, PlayerNetworkManager>>(() => FieldAccessor<Brick_Wet, PlayerNetworkManager>.Create("playerNetworkManager"));
		private static readonly System.Lazy<FieldAccessor<Brick_Wet, Raft_Network>> _network =
				new System.Lazy<FieldAccessor<Brick_Wet, Raft_Network>>(() => FieldAccessor<Brick_Wet, Raft_Network>.Create("network"));
		private static readonly System.Lazy<FieldAccessor<Brick_Wet, CanvasHelper>> _canvas =
				new System.Lazy<FieldAccessor<Brick_Wet, CanvasHelper>>(() => FieldAccessor<Brick_Wet, CanvasHelper>.Create("canvas"));

		public static UnityEngine.MeshFilter GetFilter(this Brick_Wet __self) => _filter.Value.GetValue(__self);
		public static void SetFilter(this Brick_Wet __self, UnityEngine.MeshFilter value) => _filter.Value.SetValue(__self, value);
		public static UnityEngine.Mesh GetDryMesh(this Brick_Wet __self) => _dryMesh.Value.GetValue(__self);
		public static void SetDryMesh(this Brick_Wet __self, UnityEngine.Mesh value) => _dryMesh.Value.SetValue(__self, value);
		public static float GetTimer(this Brick_Wet __self) => _timer.Value.GetValue(__self);
		public static void SetTimer(this Brick_Wet __self, float value) => _timer.Value.SetValue(__self, value);
		public static PlayerNetworkManager GetPlayerNetworkManager(this Brick_Wet __self) => _playerNetworkManager.Value.GetValue(__self);
		public static void SetPlayerNetworkManager(this Brick_Wet __self, PlayerNetworkManager value) => _playerNetworkManager.Value.SetValue(__self, value);
		public static Raft_Network GetNetwork(this Brick_Wet __self) => _network.Value.GetValue(__self);
		public static void SetNetwork(this Brick_Wet __self, Raft_Network value) => _network.Value.SetValue(__self, value);
		public static CanvasHelper GetCanvas(this Brick_Wet __self) => _canvas.Value.GetValue(__self);
		public static void SetCanvas(this Brick_Wet __self, CanvasHelper value) => _canvas.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Brick_Wet>> _Awake757602046 =
				new System.Lazy<MethodAccessor<Brick_Wet>>(() => MethodAccessor<Brick_Wet>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<Brick_Wet>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<Brick_Wet>>(() => MethodAccessor<Brick_Wet>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<Brick_Wet>> _Update757602046 =
				new System.Lazy<MethodAccessor<Brick_Wet>>(() => MethodAccessor<Brick_Wet>.Create("Update"));

		public static void Awake(this Brick_Wet __self) => _Awake757602046.Value.Invoke(__self);
		public static void OnDestroy(this Brick_Wet __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void Update(this Brick_Wet __self) => _Update757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_BuildingUI
	{

		private static readonly System.Lazy<FieldAccessor<BuildingUI, bool>> _bilboard =
				new System.Lazy<FieldAccessor<BuildingUI, bool>>(() => FieldAccessor<BuildingUI, bool>.Create("bilboard"));
		private static readonly System.Lazy<FieldAccessor<BuildingUI, bool>> _isVisible =
				new System.Lazy<FieldAccessor<BuildingUI, bool>>(() => FieldAccessor<BuildingUI, bool>.Create("isVisible"));

		public static bool GetBilboard(this BuildingUI __self) => _bilboard.Value.GetValue(__self);
		public static void SetBilboard(this BuildingUI __self, bool value) => _bilboard.Value.SetValue(__self, value);
		public static bool GetIsVisible(this BuildingUI __self) => _isVisible.Value.GetValue(__self);
		public static void SetIsVisible(this BuildingUI __self, bool value) => _isVisible.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<BuildingUI>> _Start757602046 =
				new System.Lazy<MethodAccessor<BuildingUI>>(() => MethodAccessor<BuildingUI>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<BuildingUI>> _Update757602046 =
				new System.Lazy<MethodAccessor<BuildingUI>>(() => MethodAccessor<BuildingUI>.Create("Update"));

		public static void Start(this BuildingUI __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this BuildingUI __self) => _Update757602046.Value.Invoke(__self);

	}

	public static class Private_BuildingUI
	{

		private static readonly System.Lazy<StaticFieldAccessor<UnityEngine.Transform>> _player =
				new System.Lazy<StaticFieldAccessor<UnityEngine.Transform>>(() => StaticFieldAccessor<UnityEngine.Transform>.Create(typeof(BuildingUI), "player"));

		public static UnityEngine.Transform GetPlayer() => _player.Value.GetValue();
		public static void SetPlayer(UnityEngine.Transform value) => _player.Value.SetValue(value);

	}

	public static class PrivateAccessor_BuildingUI_CostBox
	{

		private static readonly System.Lazy<FieldAccessor<BuildingUI_CostBox, BuildingUI_CostBox_Sub>> _subPrefab =
				new System.Lazy<FieldAccessor<BuildingUI_CostBox, BuildingUI_CostBox_Sub>>(() => FieldAccessor<BuildingUI_CostBox, BuildingUI_CostBox_Sub>.Create("subPrefab"));
		private static readonly System.Lazy<FieldAccessor<BuildingUI_CostBox, System.Collections.Generic.List<BuildingUI_CostBox_Sub>>> _subs =
				new System.Lazy<FieldAccessor<BuildingUI_CostBox, System.Collections.Generic.List<BuildingUI_CostBox_Sub>>>(() => FieldAccessor<BuildingUI_CostBox, System.Collections.Generic.List<BuildingUI_CostBox_Sub>>.Create("subs"));
		private static readonly System.Lazy<FieldAccessor<BuildingUI_CostBox, UnityEngine.Transform>> _subParent =
				new System.Lazy<FieldAccessor<BuildingUI_CostBox, UnityEngine.Transform>>(() => FieldAccessor<BuildingUI_CostBox, UnityEngine.Transform>.Create("subParent"));
		private static readonly System.Lazy<FieldAccessor<BuildingUI_CostBox, UnityEngine.UI.Image>> _radialImage =
				new System.Lazy<FieldAccessor<BuildingUI_CostBox, UnityEngine.UI.Image>>(() => FieldAccessor<BuildingUI_CostBox, UnityEngine.UI.Image>.Create("radialImage"));
		private static readonly System.Lazy<FieldAccessor<BuildingUI_CostBox, UnityEngine.UI.Text>> _label =
				new System.Lazy<FieldAccessor<BuildingUI_CostBox, UnityEngine.UI.Text>>(() => FieldAccessor<BuildingUI_CostBox, UnityEngine.UI.Text>.Create("label"));
		private static readonly System.Lazy<FieldAccessor<BuildingUI_CostBox, TMPro.TextMeshProUGUI>> _labelTextMeshPro =
				new System.Lazy<FieldAccessor<BuildingUI_CostBox, TMPro.TextMeshProUGUI>>(() => FieldAccessor<BuildingUI_CostBox, TMPro.TextMeshProUGUI>.Create("labelTextMeshPro"));
		private static readonly System.Lazy<FieldAccessor<BuildingUI_CostBox, UnityEngine.UI.Text>> _displayName =
				new System.Lazy<FieldAccessor<BuildingUI_CostBox, UnityEngine.UI.Text>>(() => FieldAccessor<BuildingUI_CostBox, UnityEngine.UI.Text>.Create("displayName"));
		private static readonly System.Lazy<FieldAccessor<BuildingUI_CostBox, System.Collections.Generic.List<Item_Base>>> _items =
				new System.Lazy<FieldAccessor<BuildingUI_CostBox, System.Collections.Generic.List<Item_Base>>>(() => FieldAccessor<BuildingUI_CostBox, System.Collections.Generic.List<Item_Base>>.Create("items"));
		private static readonly System.Lazy<FieldAccessor<BuildingUI_CostBox, int>> _requiredAmount =
				new System.Lazy<FieldAccessor<BuildingUI_CostBox, int>>(() => FieldAccessor<BuildingUI_CostBox, int>.Create("requiredAmount"));
		private static readonly System.Lazy<FieldAccessor<BuildingUI_CostBox, int>> _amount =
				new System.Lazy<FieldAccessor<BuildingUI_CostBox, int>>(() => FieldAccessor<BuildingUI_CostBox, int>.Create("amount"));
		private static readonly System.Lazy<FieldAccessor<BuildingUI_CostBox, int>> _lastAmount =
				new System.Lazy<FieldAccessor<BuildingUI_CostBox, int>>(() => FieldAccessor<BuildingUI_CostBox, int>.Create("lastAmount"));
		private static readonly System.Lazy<FieldAccessor<BuildingUI_CostBox, int>> _lastRequiredAmount =
				new System.Lazy<FieldAccessor<BuildingUI_CostBox, int>>(() => FieldAccessor<BuildingUI_CostBox, int>.Create("lastRequiredAmount"));

		public static BuildingUI_CostBox_Sub GetSubPrefab(this BuildingUI_CostBox __self) => _subPrefab.Value.GetValue(__self);
		public static void SetSubPrefab(this BuildingUI_CostBox __self, BuildingUI_CostBox_Sub value) => _subPrefab.Value.SetValue(__self, value);
		public static System.Collections.Generic.List<BuildingUI_CostBox_Sub> GetSubs(this BuildingUI_CostBox __self) => _subs.Value.GetValue(__self);
		public static void SetSubs(this BuildingUI_CostBox __self, System.Collections.Generic.List<BuildingUI_CostBox_Sub> value) => _subs.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetSubParent(this BuildingUI_CostBox __self) => _subParent.Value.GetValue(__self);
		public static void SetSubParent(this BuildingUI_CostBox __self, UnityEngine.Transform value) => _subParent.Value.SetValue(__self, value);
		public static UnityEngine.UI.Image GetRadialImage(this BuildingUI_CostBox __self) => _radialImage.Value.GetValue(__self);
		public static void SetRadialImage(this BuildingUI_CostBox __self, UnityEngine.UI.Image value) => _radialImage.Value.SetValue(__self, value);
		public static UnityEngine.UI.Text GetLabel(this BuildingUI_CostBox __self) => _label.Value.GetValue(__self);
		public static void SetLabel(this BuildingUI_CostBox __self, UnityEngine.UI.Text value) => _label.Value.SetValue(__self, value);
		public static TMPro.TextMeshProUGUI GetLabelTextMeshPro(this BuildingUI_CostBox __self) => _labelTextMeshPro.Value.GetValue(__self);
		public static void SetLabelTextMeshPro(this BuildingUI_CostBox __self, TMPro.TextMeshProUGUI value) => _labelTextMeshPro.Value.SetValue(__self, value);
		public static UnityEngine.UI.Text GetDisplayName(this BuildingUI_CostBox __self) => _displayName.Value.GetValue(__self);
		public static void SetDisplayName(this BuildingUI_CostBox __self, UnityEngine.UI.Text value) => _displayName.Value.SetValue(__self, value);
		public static System.Collections.Generic.List<Item_Base> GetItems(this BuildingUI_CostBox __self) => _items.Value.GetValue(__self);
		public static void SetItems(this BuildingUI_CostBox __self, System.Collections.Generic.List<Item_Base> value) => _items.Value.SetValue(__self, value);
		public static int GetRequiredAmount(this BuildingUI_CostBox __self) => _requiredAmount.Value.GetValue(__self);
		public static void SetRequiredAmount(this BuildingUI_CostBox __self, int value) => _requiredAmount.Value.SetValue(__self, value);
		public static int GetAmount(this BuildingUI_CostBox __self) => _amount.Value.GetValue(__self);
		public static void SetAmount(this BuildingUI_CostBox __self, int value) => _amount.Value.SetValue(__self, value);
		public static int GetLastAmount(this BuildingUI_CostBox __self) => _lastAmount.Value.GetValue(__self);
		public static void SetLastAmount(this BuildingUI_CostBox __self, int value) => _lastAmount.Value.SetValue(__self, value);
		public static int GetLastRequiredAmount(this BuildingUI_CostBox __self) => _lastRequiredAmount.Value.GetValue(__self);
		public static void SetLastRequiredAmount(this BuildingUI_CostBox __self, int value) => _lastRequiredAmount.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<BuildingUI_CostBox>> _Awake757602046 =
				new System.Lazy<MethodAccessor<BuildingUI_CostBox>>(() => MethodAccessor<BuildingUI_CostBox>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<BuildingUI_CostBox>> _SetNewSubLength3486186818 =
				new System.Lazy<MethodAccessor<BuildingUI_CostBox>>(() => MethodAccessor<BuildingUI_CostBox>.Create("SetNewSubLength", typeof(int)));
		private static readonly System.Lazy<MethodAccessor<BuildingUI_CostBox>> _SetLabel3454057852 =
				new System.Lazy<MethodAccessor<BuildingUI_CostBox>>(() => MethodAccessor<BuildingUI_CostBox>.Create("SetLabel", typeof(string)));

		public static void Awake(this BuildingUI_CostBox __self) => _Awake757602046.Value.Invoke(__self);
		public static void SetNewSubLength(this BuildingUI_CostBox __self, int length) => _SetNewSubLength3486186818.Value.Invoke(__self, length);
		public static void SetLabel(this BuildingUI_CostBox __self, string text) => _SetLabel3454057852.Value.Invoke(__self, text);

	}

	public static class PrivateAccessor_BuildingUI_CostBox_CraftingCost
	{

		private static readonly System.Lazy<MethodAccessor<BuildingUI_CostBox_CraftingCost>> _Start757602046 =
				new System.Lazy<MethodAccessor<BuildingUI_CostBox_CraftingCost>>(() => MethodAccessor<BuildingUI_CostBox_CraftingCost>.Create("Start"));

		public static void Start(this BuildingUI_CostBox_CraftingCost __self) => _Start757602046.Value.Invoke(__self);

	}

	public static class Private_BuildingUI_CostBox_CraftingCost
	{

		private static readonly System.Lazy<StaticFieldAccessor<PlayerInventory>> _playerInventory =
				new System.Lazy<StaticFieldAccessor<PlayerInventory>>(() => StaticFieldAccessor<PlayerInventory>.Create(typeof(BuildingUI_CostBox_CraftingCost), "playerInventory"));

		public static PlayerInventory GetPlayerInventory() => _playerInventory.Value.GetValue();
		public static void SetPlayerInventory(PlayerInventory value) => _playerInventory.Value.SetValue(value);

	}

	public static class PrivateAccessor_BuildingUI_CostBox_Disabled
	{

		private static readonly System.Lazy<FieldAccessor<BuildingUI_CostBox_Disabled, UnityEngine.UI.Image>> _backgroundImage =
				new System.Lazy<FieldAccessor<BuildingUI_CostBox_Disabled, UnityEngine.UI.Image>>(() => FieldAccessor<BuildingUI_CostBox_Disabled, UnityEngine.UI.Image>.Create("backgroundImage"));
		private static readonly System.Lazy<FieldAccessor<BuildingUI_CostBox_Disabled, UnityEngine.Sprite>> _normalSprite =
				new System.Lazy<FieldAccessor<BuildingUI_CostBox_Disabled, UnityEngine.Sprite>>(() => FieldAccessor<BuildingUI_CostBox_Disabled, UnityEngine.Sprite>.Create("normalSprite"));
		private static readonly System.Lazy<FieldAccessor<BuildingUI_CostBox_Disabled, UnityEngine.Sprite>> _disabledSprite =
				new System.Lazy<FieldAccessor<BuildingUI_CostBox_Disabled, UnityEngine.Sprite>>(() => FieldAccessor<BuildingUI_CostBox_Disabled, UnityEngine.Sprite>.Create("disabledSprite"));
		private static readonly System.Lazy<FieldAccessor<BuildingUI_CostBox_Disabled, UnityEngine.CanvasGroup>> _canvasGroup =
				new System.Lazy<FieldAccessor<BuildingUI_CostBox_Disabled, UnityEngine.CanvasGroup>>(() => FieldAccessor<BuildingUI_CostBox_Disabled, UnityEngine.CanvasGroup>.Create("canvasGroup"));

		public static UnityEngine.UI.Image GetBackgroundImage(this BuildingUI_CostBox_Disabled __self) => _backgroundImage.Value.GetValue(__self);
		public static void SetBackgroundImage(this BuildingUI_CostBox_Disabled __self, UnityEngine.UI.Image value) => _backgroundImage.Value.SetValue(__self, value);
		public static UnityEngine.Sprite GetNormalSprite(this BuildingUI_CostBox_Disabled __self) => _normalSprite.Value.GetValue(__self);
		public static void SetNormalSprite(this BuildingUI_CostBox_Disabled __self, UnityEngine.Sprite value) => _normalSprite.Value.SetValue(__self, value);
		public static UnityEngine.Sprite GetDisabledSprite(this BuildingUI_CostBox_Disabled __self) => _disabledSprite.Value.GetValue(__self);
		public static void SetDisabledSprite(this BuildingUI_CostBox_Disabled __self, UnityEngine.Sprite value) => _disabledSprite.Value.SetValue(__self, value);
		public static UnityEngine.CanvasGroup GetCanvasGroup(this BuildingUI_CostBox_Disabled __self) => _canvasGroup.Value.GetValue(__self);
		public static void SetCanvasGroup(this BuildingUI_CostBox_Disabled __self, UnityEngine.CanvasGroup value) => _canvasGroup.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_BuildingUI_CostBox_Sub
	{

		private static readonly System.Lazy<MethodAccessor<BuildingUI_CostBox_Sub>> _Start757602046 =
				new System.Lazy<MethodAccessor<BuildingUI_CostBox_Sub>>(() => MethodAccessor<BuildingUI_CostBox_Sub>.Create("Start"));

		public static void Start(this BuildingUI_CostBox_Sub __self) => _Start757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_BuildingUI_Costbox_Sub_Crafting
	{

		private static readonly System.Lazy<FieldAccessor<BuildingUI_Costbox_Sub_Crafting, UnityEngine.UI.Button>> _quickCraftButton =
				new System.Lazy<FieldAccessor<BuildingUI_Costbox_Sub_Crafting, UnityEngine.UI.Button>>(() => FieldAccessor<BuildingUI_Costbox_Sub_Crafting, UnityEngine.UI.Button>.Create("quickCraftButton"));
		private static readonly System.Lazy<FieldAccessor<BuildingUI_Costbox_Sub_Crafting, BuildingUI_CostBox_CraftingCost>> _costBox =
				new System.Lazy<FieldAccessor<BuildingUI_Costbox_Sub_Crafting, BuildingUI_CostBox_CraftingCost>>(() => FieldAccessor<BuildingUI_Costbox_Sub_Crafting, BuildingUI_CostBox_CraftingCost>.Create("costBox"));

		public static UnityEngine.UI.Button GetQuickCraftButton(this BuildingUI_Costbox_Sub_Crafting __self) => _quickCraftButton.Value.GetValue(__self);
		public static void SetQuickCraftButton(this BuildingUI_Costbox_Sub_Crafting __self, UnityEngine.UI.Button value) => _quickCraftButton.Value.SetValue(__self, value);
		public static BuildingUI_CostBox_CraftingCost GetCostBox(this BuildingUI_Costbox_Sub_Crafting __self) => _costBox.Value.GetValue(__self);
		public static void SetCostBox(this BuildingUI_Costbox_Sub_Crafting __self, BuildingUI_CostBox_CraftingCost value) => _costBox.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<BuildingUI_Costbox_Sub_Crafting>> _Start757602046 =
				new System.Lazy<MethodAccessor<BuildingUI_Costbox_Sub_Crafting>>(() => MethodAccessor<BuildingUI_Costbox_Sub_Crafting>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<BuildingUI_Costbox_Sub_Crafting>> _Update757602046 =
				new System.Lazy<MethodAccessor<BuildingUI_Costbox_Sub_Crafting>>(() => MethodAccessor<BuildingUI_Costbox_Sub_Crafting>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<BuildingUI_Costbox_Sub_Crafting>> _OnDisable757602046 =
				new System.Lazy<MethodAccessor<BuildingUI_Costbox_Sub_Crafting>>(() => MethodAccessor<BuildingUI_Costbox_Sub_Crafting>.Create("OnDisable"));

		public static void Start(this BuildingUI_Costbox_Sub_Crafting __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this BuildingUI_Costbox_Sub_Crafting __self) => _Update757602046.Value.Invoke(__self);
		public static void OnDisable(this BuildingUI_Costbox_Sub_Crafting __self) => _OnDisable757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Calendar
	{

		private static readonly System.Lazy<FieldAccessor<Calendar, TMPro.TextMeshPro>> _textMesh =
				new System.Lazy<FieldAccessor<Calendar, TMPro.TextMeshPro>>(() => FieldAccessor<Calendar, TMPro.TextMeshPro>.Create("textMesh"));
		private static readonly System.Lazy<FieldAccessor<Calendar, bool>> _placed =
				new System.Lazy<FieldAccessor<Calendar, bool>>(() => FieldAccessor<Calendar, bool>.Create("placed"));

		public static TMPro.TextMeshPro GetTextMesh(this Calendar __self) => _textMesh.Value.GetValue(__self);
		public static void SetTextMesh(this Calendar __self, TMPro.TextMeshPro value) => _textMesh.Value.SetValue(__self, value);
		public static bool GetPlaced(this Calendar __self) => _placed.Value.GetValue(__self);
		public static void SetPlaced(this Calendar __self, bool value) => _placed.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Calendar>> _Start757602046 =
				new System.Lazy<MethodAccessor<Calendar>>(() => MethodAccessor<Calendar>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<Calendar>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<Calendar>>(() => MethodAccessor<Calendar>.Create("OnDestroy"));

		public static void Start(this Calendar __self) => _Start757602046.Value.Invoke(__self);
		public static void OnDestroy(this Calendar __self) => _OnDestroy757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Chair
	{

		private static readonly System.Lazy<FieldAccessor<Chair, PlayerSeat>> _multiplePlayerSeat =
				new System.Lazy<FieldAccessor<Chair, PlayerSeat>>(() => FieldAccessor<Chair, PlayerSeat>.Create("multiplePlayerSeat"));

		public static PlayerSeat GetMultiplePlayerSeat(this Chair __self) => _multiplePlayerSeat.Value.GetValue(__self);
		public static void SetMultiplePlayerSeat(this Chair __self, PlayerSeat value) => _multiplePlayerSeat.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Chair>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<Chair>>(() => MethodAccessor<Chair>.Create("OnDestroy"));

		public static void OnDestroy(this Chair __self) => _OnDestroy757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Clock
	{

		private static readonly System.Lazy<FieldAccessor<Clock, UnityEngine.Transform>> _pointer =
				new System.Lazy<FieldAccessor<Clock, UnityEngine.Transform>>(() => FieldAccessor<Clock, UnityEngine.Transform>.Create("pointer"));

		public static UnityEngine.Transform GetPointer(this Clock __self) => _pointer.Value.GetValue(__self);
		public static void SetPointer(this Clock __self, UnityEngine.Transform value) => _pointer.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Clock>> _Start757602046 =
				new System.Lazy<MethodAccessor<Clock>>(() => MethodAccessor<Clock>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<Clock>> _Update757602046 =
				new System.Lazy<MethodAccessor<Clock>>(() => MethodAccessor<Clock>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<Clock>> _GetTimeRotation757602046 =
				new System.Lazy<MethodAccessor<Clock>>(() => MethodAccessor<Clock>.Create("GetTimeRotation"));

		public static void Start(this Clock __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this Clock __self) => _Update757602046.Value.Invoke(__self);
		public static float GetTimeRotation(this Clock __self) => (float)_GetTimeRotation757602046.Value.Invoke(__self);

	}

	public static class Private_Clock
	{

		private static readonly System.Lazy<StaticFieldAccessor<UnityEngine.AzureSky.AzureSkyController>> _skyController =
				new System.Lazy<StaticFieldAccessor<UnityEngine.AzureSky.AzureSkyController>>(() => StaticFieldAccessor<UnityEngine.AzureSky.AzureSkyController>.Create(typeof(Clock), "skyController"));

		public static UnityEngine.AzureSky.AzureSkyController GetSkyController() => _skyController.Value.GetValue();
		public static void SetSkyController(UnityEngine.AzureSky.AzureSkyController value) => _skyController.Value.SetValue(value);

	}

	public static class PrivateAccessor_ColorMachine
	{

		private static readonly System.Lazy<FieldAccessor<ColorMachine, UnityEngine.Animator>> _animator =
				new System.Lazy<FieldAccessor<ColorMachine, UnityEngine.Animator>>(() => FieldAccessor<ColorMachine, UnityEngine.Animator>.Create("animator"));
		private static readonly System.Lazy<FieldAccessor<ColorMachine, Interval_Float>> _waterSpeedInterval =
				new System.Lazy<FieldAccessor<ColorMachine, Interval_Float>>(() => FieldAccessor<ColorMachine, Interval_Float>.Create("waterSpeedInterval"));
		private static readonly System.Lazy<FieldAccessor<ColorMachine, Interval_Float>> _barrelSpeedInterval =
				new System.Lazy<FieldAccessor<ColorMachine, Interval_Float>>(() => FieldAccessor<ColorMachine, Interval_Float>.Create("barrelSpeedInterval"));
		private static readonly System.Lazy<FieldAccessor<ColorMachine, float>> _lerpSpeed =
				new System.Lazy<FieldAccessor<ColorMachine, float>>(() => FieldAccessor<ColorMachine, float>.Create("lerpSpeed"));
		private static readonly System.Lazy<FieldAccessor<ColorMachine, UnityEngine.Transform>> _barrelTransform =
				new System.Lazy<FieldAccessor<ColorMachine, UnityEngine.Transform>>(() => FieldAccessor<ColorMachine, UnityEngine.Transform>.Create("barrelTransform"));
		private static readonly System.Lazy<FieldAccessor<ColorMachine, Raft>> _raft =
				new System.Lazy<FieldAccessor<ColorMachine, Raft>>(() => FieldAccessor<ColorMachine, Raft>.Create("raft"));
		private static readonly System.Lazy<FieldAccessor<ColorMachine, Block_CookingStand>> _stand =
				new System.Lazy<FieldAccessor<ColorMachine, Block_CookingStand>>(() => FieldAccessor<ColorMachine, Block_CookingStand>.Create("stand"));
		private static readonly System.Lazy<FieldAccessor<ColorMachine, float>> _waterSpeed =
				new System.Lazy<FieldAccessor<ColorMachine, float>>(() => FieldAccessor<ColorMachine, float>.Create("waterSpeed"));
		private static readonly System.Lazy<FieldAccessor<ColorMachine, float>> _barrelSpeed =
				new System.Lazy<FieldAccessor<ColorMachine, float>>(() => FieldAccessor<ColorMachine, float>.Create("barrelSpeed"));

		public static UnityEngine.Animator GetAnimator(this ColorMachine __self) => _animator.Value.GetValue(__self);
		public static void SetAnimator(this ColorMachine __self, UnityEngine.Animator value) => _animator.Value.SetValue(__self, value);
		public static Interval_Float GetWaterSpeedInterval(this ColorMachine __self) => _waterSpeedInterval.Value.GetValue(__self);
		public static void SetWaterSpeedInterval(this ColorMachine __self, Interval_Float value) => _waterSpeedInterval.Value.SetValue(__self, value);
		public static Interval_Float GetBarrelSpeedInterval(this ColorMachine __self) => _barrelSpeedInterval.Value.GetValue(__self);
		public static void SetBarrelSpeedInterval(this ColorMachine __self, Interval_Float value) => _barrelSpeedInterval.Value.SetValue(__self, value);
		public static float GetLerpSpeed(this ColorMachine __self) => _lerpSpeed.Value.GetValue(__self);
		public static void SetLerpSpeed(this ColorMachine __self, float value) => _lerpSpeed.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetBarrelTransform(this ColorMachine __self) => _barrelTransform.Value.GetValue(__self);
		public static void SetBarrelTransform(this ColorMachine __self, UnityEngine.Transform value) => _barrelTransform.Value.SetValue(__self, value);
		public static Raft GetRaft(this ColorMachine __self) => _raft.Value.GetValue(__self);
		public static void SetRaft(this ColorMachine __self, Raft value) => _raft.Value.SetValue(__self, value);
		public static Block_CookingStand GetStand(this ColorMachine __self) => _stand.Value.GetValue(__self);
		public static void SetStand(this ColorMachine __self, Block_CookingStand value) => _stand.Value.SetValue(__self, value);
		public static float GetWaterSpeed(this ColorMachine __self) => _waterSpeed.Value.GetValue(__self);
		public static void SetWaterSpeed(this ColorMachine __self, float value) => _waterSpeed.Value.SetValue(__self, value);
		public static float GetBarrelSpeed(this ColorMachine __self) => _barrelSpeed.Value.GetValue(__self);
		public static void SetBarrelSpeed(this ColorMachine __self, float value) => _barrelSpeed.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<ColorMachine>> _OnBlockPlaced757602046 =
				new System.Lazy<MethodAccessor<ColorMachine>>(() => MethodAccessor<ColorMachine>.Create("OnBlockPlaced"));
		private static readonly System.Lazy<MethodAccessor<ColorMachine>> _Update757602046 =
				new System.Lazy<MethodAccessor<ColorMachine>>(() => MethodAccessor<ColorMachine>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<ColorMachine>> _HandleAnimation757602046 =
				new System.Lazy<MethodAccessor<ColorMachine>>(() => MethodAccessor<ColorMachine>.Create("HandleAnimation"));

		public static void OnBlockPlaced(this ColorMachine __self) => _OnBlockPlaced757602046.Value.Invoke(__self);
		public static void Update(this ColorMachine __self) => _Update757602046.Value.Invoke(__self);
		public static void HandleAnimation(this ColorMachine __self) => _HandleAnimation757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_CookingSlot
	{

		private static readonly System.Lazy<FieldAccessor<CookingSlot, System.Collections.Generic.List<CookItemConnection>>> _itemConnections =
				new System.Lazy<FieldAccessor<CookingSlot, System.Collections.Generic.List<CookItemConnection>>>(() => FieldAccessor<CookingSlot, System.Collections.Generic.List<CookItemConnection>>.Create("itemConnections"));
		private static readonly System.Lazy<FieldAccessor<CookingSlot, float>> _cookTimeMultiplier =
				new System.Lazy<FieldAccessor<CookingSlot, float>>(() => FieldAccessor<CookingSlot, float>.Create("cookTimeMultiplier"));
		private static readonly System.Lazy<FieldAccessor<CookingSlot, string>> _eventRef_placeItem =
				new System.Lazy<FieldAccessor<CookingSlot, string>>(() => FieldAccessor<CookingSlot, string>.Create("eventRef_placeItem"));
		private static readonly System.Lazy<FieldAccessor<CookingSlot, Item_Base>> _currentItem =
				new System.Lazy<FieldAccessor<CookingSlot, Item_Base>>(() => FieldAccessor<CookingSlot, Item_Base>.Create("currentItem"));
		private static readonly System.Lazy<FieldAccessor<CookingSlot, bool>> _complete =
				new System.Lazy<FieldAccessor<CookingSlot, bool>>(() => FieldAccessor<CookingSlot, bool>.Create("complete"));
		private static readonly System.Lazy<FieldAccessor<CookingSlot, float>> _cookTimer =
				new System.Lazy<FieldAccessor<CookingSlot, float>>(() => FieldAccessor<CookingSlot, float>.Create("cookTimer"));
		private static readonly System.Lazy<FieldAccessor<CookingSlot, UnityEngine.Collider[]>> _colliders =
				new System.Lazy<FieldAccessor<CookingSlot, UnityEngine.Collider[]>>(() => FieldAccessor<CookingSlot, UnityEngine.Collider[]>.Create("colliders"));

		public static System.Collections.Generic.List<CookItemConnection> GetItemConnections(this CookingSlot __self) => _itemConnections.Value.GetValue(__self);
		public static void SetItemConnections(this CookingSlot __self, System.Collections.Generic.List<CookItemConnection> value) => _itemConnections.Value.SetValue(__self, value);
		public static float GetCookTimeMultiplier(this CookingSlot __self) => _cookTimeMultiplier.Value.GetValue(__self);
		public static void SetCookTimeMultiplier(this CookingSlot __self, float value) => _cookTimeMultiplier.Value.SetValue(__self, value);
		public static string GetEventRef_placeItem(this CookingSlot __self) => _eventRef_placeItem.Value.GetValue(__self);
		public static void SetEventRef_placeItem(this CookingSlot __self, string value) => _eventRef_placeItem.Value.SetValue(__self, value);
		public static Item_Base GetCurrentItem(this CookingSlot __self) => _currentItem.Value.GetValue(__self);
		public static void SetCurrentItem(this CookingSlot __self, Item_Base value) => _currentItem.Value.SetValue(__self, value);
		public static bool GetComplete(this CookingSlot __self) => _complete.Value.GetValue(__self);
		public static void SetComplete(this CookingSlot __self, bool value) => _complete.Value.SetValue(__self, value);
		public static float GetCookTimer(this CookingSlot __self) => _cookTimer.Value.GetValue(__self);
		public static void SetCookTimer(this CookingSlot __self, float value) => _cookTimer.Value.SetValue(__self, value);
		public static UnityEngine.Collider[] GetColliders(this CookingSlot __self) => _colliders.Value.GetValue(__self);
		public static void SetColliders(this CookingSlot __self, UnityEngine.Collider[] value) => _colliders.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<CookingSlot>> _Awake757602046 =
				new System.Lazy<MethodAccessor<CookingSlot>>(() => MethodAccessor<CookingSlot>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<CookingSlot>> _OnValidate757602046 =
				new System.Lazy<MethodAccessor<CookingSlot>>(() => MethodAccessor<CookingSlot>.Create("OnValidate"));
		private static readonly System.Lazy<MethodAccessor<CookingSlot>> _DisableItems757602046 =
				new System.Lazy<MethodAccessor<CookingSlot>>(() => MethodAccessor<CookingSlot>.Create("DisableItems"));
		private static readonly System.Lazy<MethodAccessor<CookingSlot>> _SetColliderState3450040886 =
				new System.Lazy<MethodAccessor<CookingSlot>>(() => MethodAccessor<CookingSlot>.Create("SetColliderState", typeof(bool)));

		public static void Awake(this CookingSlot __self) => _Awake757602046.Value.Invoke(__self);
		public static void OnValidate(this CookingSlot __self) => _OnValidate757602046.Value.Invoke(__self);
		public static void DisableItems(this CookingSlot __self) => _DisableItems757602046.Value.Invoke(__self);
		public static void SetColliderState(this CookingSlot __self, bool enabled) => _SetColliderState3450040886.Value.Invoke(__self, enabled);

	}

	public static class PrivateAccessor_CookingSlot_Feedback
	{

		private static readonly System.Lazy<FieldAccessor<CookingSlot_Feedback, UnityEngine.Animator>> _animator =
				new System.Lazy<FieldAccessor<CookingSlot_Feedback, UnityEngine.Animator>>(() => FieldAccessor<CookingSlot_Feedback, UnityEngine.Animator>.Create("animator"));
		private static readonly System.Lazy<FieldAccessor<CookingSlot_Feedback, UnityEngine.ParticleSystem>> _particleSystem =
				new System.Lazy<FieldAccessor<CookingSlot_Feedback, UnityEngine.ParticleSystem>>(() => FieldAccessor<CookingSlot_Feedback, UnityEngine.ParticleSystem>.Create("particleSystem"));
		private static readonly System.Lazy<FieldAccessor<CookingSlot_Feedback, CookingSlot>> _cookingSlot =
				new System.Lazy<FieldAccessor<CookingSlot_Feedback, CookingSlot>>(() => FieldAccessor<CookingSlot_Feedback, CookingSlot>.Create("cookingSlot"));
		private static readonly System.Lazy<FieldAccessor<CookingSlot_Feedback, string>> _eventEmitter_HatchUp =
				new System.Lazy<FieldAccessor<CookingSlot_Feedback, string>>(() => FieldAccessor<CookingSlot_Feedback, string>.Create("eventEmitter_HatchUp"));
		private static readonly System.Lazy<FieldAccessor<CookingSlot_Feedback, string>> _eventEmitter_HatchDown =
				new System.Lazy<FieldAccessor<CookingSlot_Feedback, string>>(() => FieldAccessor<CookingSlot_Feedback, string>.Create("eventEmitter_HatchDown"));
		private static readonly System.Lazy<FieldAccessor<CookingSlot_Feedback, Battery>> _battery =
				new System.Lazy<FieldAccessor<CookingSlot_Feedback, Battery>>(() => FieldAccessor<CookingSlot_Feedback, Battery>.Create("battery"));
		private static readonly System.Lazy<FieldAccessor<CookingSlot_Feedback, bool>> _hasItemInSlot =
				new System.Lazy<FieldAccessor<CookingSlot_Feedback, bool>>(() => FieldAccessor<CookingSlot_Feedback, bool>.Create("hasItemInSlot"));
		private static readonly System.Lazy<FieldAccessor<CookingSlot_Feedback, bool>> _isComplete =
				new System.Lazy<FieldAccessor<CookingSlot_Feedback, bool>>(() => FieldAccessor<CookingSlot_Feedback, bool>.Create("isComplete"));

		public static UnityEngine.Animator GetAnimator(this CookingSlot_Feedback __self) => _animator.Value.GetValue(__self);
		public static void SetAnimator(this CookingSlot_Feedback __self, UnityEngine.Animator value) => _animator.Value.SetValue(__self, value);
		public static UnityEngine.ParticleSystem GetParticleSystem(this CookingSlot_Feedback __self) => _particleSystem.Value.GetValue(__self);
		public static void SetParticleSystem(this CookingSlot_Feedback __self, UnityEngine.ParticleSystem value) => _particleSystem.Value.SetValue(__self, value);
		public static CookingSlot GetCookingSlot(this CookingSlot_Feedback __self) => _cookingSlot.Value.GetValue(__self);
		public static void SetCookingSlot(this CookingSlot_Feedback __self, CookingSlot value) => _cookingSlot.Value.SetValue(__self, value);
		public static string GetEventEmitter_HatchUp(this CookingSlot_Feedback __self) => _eventEmitter_HatchUp.Value.GetValue(__self);
		public static void SetEventEmitter_HatchUp(this CookingSlot_Feedback __self, string value) => _eventEmitter_HatchUp.Value.SetValue(__self, value);
		public static string GetEventEmitter_HatchDown(this CookingSlot_Feedback __self) => _eventEmitter_HatchDown.Value.GetValue(__self);
		public static void SetEventEmitter_HatchDown(this CookingSlot_Feedback __self, string value) => _eventEmitter_HatchDown.Value.SetValue(__self, value);
		public static Battery GetBattery(this CookingSlot_Feedback __self) => _battery.Value.GetValue(__self);
		public static void SetBattery(this CookingSlot_Feedback __self, Battery value) => _battery.Value.SetValue(__self, value);
		public static bool GetHasItemInSlot(this CookingSlot_Feedback __self) => _hasItemInSlot.Value.GetValue(__self);
		public static void SetHasItemInSlot(this CookingSlot_Feedback __self, bool value) => _hasItemInSlot.Value.SetValue(__self, value);
		public static bool GetIsComplete(this CookingSlot_Feedback __self) => _isComplete.Value.GetValue(__self);
		public static void SetIsComplete(this CookingSlot_Feedback __self, bool value) => _isComplete.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<CookingSlot_Feedback>> _Awake757602046 =
				new System.Lazy<MethodAccessor<CookingSlot_Feedback>>(() => MethodAccessor<CookingSlot_Feedback>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<CookingSlot_Feedback>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<CookingSlot_Feedback>>(() => MethodAccessor<CookingSlot_Feedback>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<CookingSlot_Feedback>> _SlotChanged3424929776 =
				new System.Lazy<MethodAccessor<CookingSlot_Feedback>>(() => MethodAccessor<CookingSlot_Feedback>.Create("SlotChanged", typeof(CookingSlot)));
		private static readonly System.Lazy<MethodAccessor<CookingSlot_Feedback>> _OnBatteryChange757602046 =
				new System.Lazy<MethodAccessor<CookingSlot_Feedback>>(() => MethodAccessor<CookingSlot_Feedback>.Create("OnBatteryChange"));

		public static void Awake(this CookingSlot_Feedback __self) => _Awake757602046.Value.Invoke(__self);
		public static void OnDestroy(this CookingSlot_Feedback __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void SlotChanged(this CookingSlot_Feedback __self, CookingSlot slot) => _SlotChanged3424929776.Value.Invoke(__self, slot);
		public static void OnBatteryChange(this CookingSlot_Feedback __self) => _OnBatteryChange757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_CookingStand
	{

		private static readonly System.Lazy<FieldAccessor<CookingStand, Raft_Network>> _network =
				new System.Lazy<FieldAccessor<CookingStand, Raft_Network>>(() => FieldAccessor<CookingStand, Raft_Network>.Create("network"));

		public static Raft_Network GetNetwork(this CookingStand __self) => _network.Value.GetValue(__self);
		public static void SetNetwork(this CookingStand __self, Raft_Network value) => _network.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<CookingStand>> _Start757602046 =
				new System.Lazy<MethodAccessor<CookingStand>>(() => MethodAccessor<CookingStand>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<CookingStand>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<CookingStand>>(() => MethodAccessor<CookingStand>.Create("OnDestroy"));

		public static void Start(this CookingStand __self) => _Start757602046.Value.Invoke(__self);
		public static void OnDestroy(this CookingStand __self) => _OnDestroy757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_CookingStand_Electric
	{

		private static readonly System.Lazy<MethodAccessor<CookingStand_Electric>> _Start757602046 =
				new System.Lazy<MethodAccessor<CookingStand_Electric>>(() => MethodAccessor<CookingStand_Electric>.Create("Start"));

		public static void Start(this CookingStand_Electric __self) => _Start757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_CookingTable
	{

		private static readonly System.Lazy<FieldAccessor<CookingTable, SO_CookingTable_Recipe>> _currentRecipe =
				new System.Lazy<FieldAccessor<CookingTable, SO_CookingTable_Recipe>>(() => FieldAccessor<CookingTable, SO_CookingTable_Recipe>.Create("currentRecipe"));
		private static readonly System.Lazy<FieldAccessor<CookingTable, SO_CookingTable_Recipe>> _fallbackRecipe =
				new System.Lazy<FieldAccessor<CookingTable, SO_CookingTable_Recipe>>(() => FieldAccessor<CookingTable, SO_CookingTable_Recipe>.Create("fallbackRecipe"));
		private static readonly System.Lazy<FieldAccessor<CookingTable, UnityEngine.GameObject>> _finishedModel =
				new System.Lazy<FieldAccessor<CookingTable, UnityEngine.GameObject>>(() => FieldAccessor<CookingTable, UnityEngine.GameObject>.Create("finishedModel"));
		private static readonly System.Lazy<FieldAccessor<CookingTable, UnityEngine.GameObject>> _gooModel =
				new System.Lazy<FieldAccessor<CookingTable, UnityEngine.GameObject>>(() => FieldAccessor<CookingTable, UnityEngine.GameObject>.Create("gooModel"));
		private static readonly System.Lazy<FieldAccessor<CookingTable, Item_Base>> _pickupFoodItem =
				new System.Lazy<FieldAccessor<CookingTable, Item_Base>>(() => FieldAccessor<CookingTable, Item_Base>.Create("pickupFoodItem"));
		private static readonly System.Lazy<FieldAccessor<CookingTable, UnityEngine.ParticleSystem>> _particle_active =
				new System.Lazy<FieldAccessor<CookingTable, UnityEngine.ParticleSystem>>(() => FieldAccessor<CookingTable, UnityEngine.ParticleSystem>.Create("particle_active"));
		private static readonly System.Lazy<FieldAccessor<CookingTable, UnityEngine.ParticleSystem>> _particle_complete =
				new System.Lazy<FieldAccessor<CookingTable, UnityEngine.ParticleSystem>>(() => FieldAccessor<CookingTable, UnityEngine.ParticleSystem>.Create("particle_complete"));
		private static readonly System.Lazy<FieldAccessor<CookingTable, UnityEngine.ParticleSystem>> _particle_completeBuff =
				new System.Lazy<FieldAccessor<CookingTable, UnityEngine.ParticleSystem>>(() => FieldAccessor<CookingTable, UnityEngine.ParticleSystem>.Create("particle_completeBuff"));
		private static readonly System.Lazy<FieldAccessor<CookingTable, UnityEngine.ParticleSystem>> _particle_completeFailedRecipe =
				new System.Lazy<FieldAccessor<CookingTable, UnityEngine.ParticleSystem>>(() => FieldAccessor<CookingTable, UnityEngine.ParticleSystem>.Create("particle_completeFailedRecipe"));
		private static readonly System.Lazy<FieldAccessor<CookingTable, FMODUnity.StudioEventEmitter>> _eventEmitter_cooking =
				new System.Lazy<FieldAccessor<CookingTable, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<CookingTable, FMODUnity.StudioEventEmitter>.Create("eventEmitter_cooking"));
		private static readonly System.Lazy<FieldAccessor<CookingTable, string>> _eventRef_stopCooking =
				new System.Lazy<FieldAccessor<CookingTable, string>>(() => FieldAccessor<CookingTable, string>.Create("eventRef_stopCooking"));
		private static readonly System.Lazy<FieldAccessor<CookingTable, string>> _eventRef_startCooking =
				new System.Lazy<FieldAccessor<CookingTable, string>>(() => FieldAccessor<CookingTable, string>.Create("eventRef_startCooking"));
		private static readonly System.Lazy<FieldAccessor<CookingTable, UnityEngine.Animator>> _anim =
				new System.Lazy<FieldAccessor<CookingTable, UnityEngine.Animator>>(() => FieldAccessor<CookingTable, UnityEngine.Animator>.Create("anim"));
		private static readonly System.Lazy<FieldAccessor<CookingTable, float>> _startAnimDelay =
				new System.Lazy<FieldAccessor<CookingTable, float>>(() => FieldAccessor<CookingTable, float>.Create("startAnimDelay"));
		private static readonly System.Lazy<FieldAccessor<CookingTable, bool>> _useKeyOffForStoppingSound =
				new System.Lazy<FieldAccessor<CookingTable, bool>>(() => FieldAccessor<CookingTable, bool>.Create("useKeyOffForStoppingSound"));
		private static readonly System.Lazy<FieldAccessor<CookingTable, CookingTable_Slot[]>> _slots =
				new System.Lazy<FieldAccessor<CookingTable, CookingTable_Slot[]>>(() => FieldAccessor<CookingTable, CookingTable_Slot[]>.Create("slots"));
		private static readonly System.Lazy<FieldAccessor<CookingTable, Raft_Network>> _network =
				new System.Lazy<FieldAccessor<CookingTable, Raft_Network>>(() => FieldAccessor<CookingTable, Raft_Network>.Create("network"));
		private static readonly System.Lazy<FieldAccessor<CookingTable, float>> _cookTimer =
				new System.Lazy<FieldAccessor<CookingTable, float>>(() => FieldAccessor<CookingTable, float>.Create("cookTimer"));
		private static readonly System.Lazy<FieldAccessor<CookingTable, uint>> _finishedPortions =
				new System.Lazy<FieldAccessor<CookingTable, uint>>(() => FieldAccessor<CookingTable, uint>.Create("finishedPortions"));
		private static readonly System.Lazy<FieldAccessor<CookingTable, bool>> _hasBeenPlaced =
				new System.Lazy<FieldAccessor<CookingTable, bool>>(() => FieldAccessor<CookingTable, bool>.Create("hasBeenPlaced"));

		public static SO_CookingTable_Recipe GetCurrentRecipe(this CookingTable __self) => _currentRecipe.Value.GetValue(__self);
		public static void SetCurrentRecipe(this CookingTable __self, SO_CookingTable_Recipe value) => _currentRecipe.Value.SetValue(__self, value);
		public static SO_CookingTable_Recipe GetFallbackRecipe(this CookingTable __self) => _fallbackRecipe.Value.GetValue(__self);
		public static void SetFallbackRecipe(this CookingTable __self, SO_CookingTable_Recipe value) => _fallbackRecipe.Value.SetValue(__self, value);
		public static UnityEngine.GameObject GetFinishedModel(this CookingTable __self) => _finishedModel.Value.GetValue(__self);
		public static void SetFinishedModel(this CookingTable __self, UnityEngine.GameObject value) => _finishedModel.Value.SetValue(__self, value);
		public static UnityEngine.GameObject GetGooModel(this CookingTable __self) => _gooModel.Value.GetValue(__self);
		public static void SetGooModel(this CookingTable __self, UnityEngine.GameObject value) => _gooModel.Value.SetValue(__self, value);
		public static Item_Base GetPickupFoodItem(this CookingTable __self) => _pickupFoodItem.Value.GetValue(__self);
		public static void SetPickupFoodItem(this CookingTable __self, Item_Base value) => _pickupFoodItem.Value.SetValue(__self, value);
		public static UnityEngine.ParticleSystem GetParticle_active(this CookingTable __self) => _particle_active.Value.GetValue(__self);
		public static void SetParticle_active(this CookingTable __self, UnityEngine.ParticleSystem value) => _particle_active.Value.SetValue(__self, value);
		public static UnityEngine.ParticleSystem GetParticle_complete(this CookingTable __self) => _particle_complete.Value.GetValue(__self);
		public static void SetParticle_complete(this CookingTable __self, UnityEngine.ParticleSystem value) => _particle_complete.Value.SetValue(__self, value);
		public static UnityEngine.ParticleSystem GetParticle_completeBuff(this CookingTable __self) => _particle_completeBuff.Value.GetValue(__self);
		public static void SetParticle_completeBuff(this CookingTable __self, UnityEngine.ParticleSystem value) => _particle_completeBuff.Value.SetValue(__self, value);
		public static UnityEngine.ParticleSystem GetParticle_completeFailedRecipe(this CookingTable __self) => _particle_completeFailedRecipe.Value.GetValue(__self);
		public static void SetParticle_completeFailedRecipe(this CookingTable __self, UnityEngine.ParticleSystem value) => _particle_completeFailedRecipe.Value.SetValue(__self, value);
		public static FMODUnity.StudioEventEmitter GetEventEmitter_cooking(this CookingTable __self) => _eventEmitter_cooking.Value.GetValue(__self);
		public static void SetEventEmitter_cooking(this CookingTable __self, FMODUnity.StudioEventEmitter value) => _eventEmitter_cooking.Value.SetValue(__self, value);
		public static string GetEventRef_stopCooking(this CookingTable __self) => _eventRef_stopCooking.Value.GetValue(__self);
		public static void SetEventRef_stopCooking(this CookingTable __self, string value) => _eventRef_stopCooking.Value.SetValue(__self, value);
		public static string GetEventRef_startCooking(this CookingTable __self) => _eventRef_startCooking.Value.GetValue(__self);
		public static void SetEventRef_startCooking(this CookingTable __self, string value) => _eventRef_startCooking.Value.SetValue(__self, value);
		public static UnityEngine.Animator GetAnim(this CookingTable __self) => _anim.Value.GetValue(__self);
		public static void SetAnim(this CookingTable __self, UnityEngine.Animator value) => _anim.Value.SetValue(__self, value);
		public static float GetStartAnimDelay(this CookingTable __self) => _startAnimDelay.Value.GetValue(__self);
		public static void SetStartAnimDelay(this CookingTable __self, float value) => _startAnimDelay.Value.SetValue(__self, value);
		public static bool GetUseKeyOffForStoppingSound(this CookingTable __self) => _useKeyOffForStoppingSound.Value.GetValue(__self);
		public static void SetUseKeyOffForStoppingSound(this CookingTable __self, bool value) => _useKeyOffForStoppingSound.Value.SetValue(__self, value);
		public static CookingTable_Slot[] GetSlots(this CookingTable __self) => _slots.Value.GetValue(__self);
		public static void SetSlots(this CookingTable __self, CookingTable_Slot[] value) => _slots.Value.SetValue(__self, value);
		public static Raft_Network GetNetwork(this CookingTable __self) => _network.Value.GetValue(__self);
		public static void SetNetwork(this CookingTable __self, Raft_Network value) => _network.Value.SetValue(__self, value);
		public static float GetCookTimer(this CookingTable __self) => _cookTimer.Value.GetValue(__self);
		public static void SetCookTimer(this CookingTable __self, float value) => _cookTimer.Value.SetValue(__self, value);
		public static uint GetFinishedPortions(this CookingTable __self) => _finishedPortions.Value.GetValue(__self);
		public static void SetFinishedPortions(this CookingTable __self, uint value) => _finishedPortions.Value.SetValue(__self, value);
		public static bool GetHasBeenPlaced(this CookingTable __self) => _hasBeenPlaced.Value.GetValue(__self);
		public static void SetHasBeenPlaced(this CookingTable __self, bool value) => _hasBeenPlaced.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<CookingTable>> _Awake757602046 =
				new System.Lazy<MethodAccessor<CookingTable>>(() => MethodAccessor<CookingTable>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<CookingTable>> _OnBlockPlaced757602046 =
				new System.Lazy<MethodAccessor<CookingTable>>(() => MethodAccessor<CookingTable>.Create("OnBlockPlaced"));
		private static readonly System.Lazy<MethodAccessor<CookingTable>> _Update757602046 =
				new System.Lazy<MethodAccessor<CookingTable>>(() => MethodAccessor<CookingTable>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<CookingTable>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<CookingTable>>(() => MethodAccessor<CookingTable>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<CookingTable>> _OnSlotInsertItem2603832799 =
				new System.Lazy<MethodAccessor<CookingTable>>(() => MethodAccessor<CookingTable>.Create("OnSlotInsertItem", typeof(Network_Player), typeof(CookingTable_Slot), typeof(ItemInstance)));
		private static readonly System.Lazy<MethodAccessor<CookingTable>> _OnSlotPickupItem2603832799 =
				new System.Lazy<MethodAccessor<CookingTable>>(() => MethodAccessor<CookingTable>.Create("OnSlotPickupItem", typeof(Network_Player), typeof(CookingTable_Slot), typeof(ItemInstance)));
		private static readonly System.Lazy<MethodAccessor<CookingTable>> _IsCooking757602046 =
				new System.Lazy<MethodAccessor<CookingTable>>(() => MethodAccessor<CookingTable>.Create("IsCooking"));
		private static readonly System.Lazy<MethodAccessor<CookingTable>> _HandleStartCooking757602046 =
				new System.Lazy<MethodAccessor<CookingTable>>(() => MethodAccessor<CookingTable>.Create("HandleStartCooking"));
		private static readonly System.Lazy<MethodAccessor<CookingTable>> _HandlePickupFood757602046 =
				new System.Lazy<MethodAccessor<CookingTable>>(() => MethodAccessor<CookingTable>.Create("HandlePickupFood"));
		private static readonly System.Lazy<MethodAccessor<CookingTable>> _HandleBoilSound757602046 =
				new System.Lazy<MethodAccessor<CookingTable>>(() => MethodAccessor<CookingTable>.Create("HandleBoilSound"));
		private static readonly System.Lazy<MethodAccessor<CookingTable>> _HandleParticles757602046 =
				new System.Lazy<MethodAccessor<CookingTable>>(() => MethodAccessor<CookingTable>.Create("HandleParticles"));
		private static readonly System.Lazy<MethodAccessor<CookingTable>> _StartCooking3454591603 =
				new System.Lazy<MethodAccessor<CookingTable>>(() => MethodAccessor<CookingTable>.Create("StartCooking", typeof(SO_CookingTable_Recipe)));
		private static readonly System.Lazy<MethodAccessor<CookingTable>> _SetAnimationState3661303471 =
				new System.Lazy<MethodAccessor<CookingTable>>(() => MethodAccessor<CookingTable>.Create("SetAnimationState", typeof(bool), typeof(float)));
		private static readonly System.Lazy<MethodAccessor<CookingTable>> _FinishCooking757602046 =
				new System.Lazy<MethodAccessor<CookingTable>>(() => MethodAccessor<CookingTable>.Create("FinishCooking"));
		private static readonly System.Lazy<MethodAccessor<CookingTable>> _PickupFood3461878659 =
				new System.Lazy<MethodAccessor<CookingTable>>(() => MethodAccessor<CookingTable>.Create("PickupFood", typeof(Network_Player)));
		private static readonly System.Lazy<MethodAccessor<CookingTable>> _RetrieveAllRecipes757602046 =
				new System.Lazy<MethodAccessor<CookingTable>>(() => MethodAccessor<CookingTable>.Create("RetrieveAllRecipes"));
		private static readonly System.Lazy<MethodAccessor<CookingTable>> _GetRecipeFromIndex3486186818 =
				new System.Lazy<MethodAccessor<CookingTable>>(() => MethodAccessor<CookingTable>.Create("GetRecipeFromIndex", typeof(int)));
		private static readonly System.Lazy<MethodAccessor<CookingTable>> _GetRecipeFromIngredients757602046 =
				new System.Lazy<MethodAccessor<CookingTable>>(() => MethodAccessor<CookingTable>.Create("GetRecipeFromIngredients"));
		private static readonly System.Lazy<MethodAccessor<CookingTable>> _GetCurrentIngredients757602046 =
				new System.Lazy<MethodAccessor<CookingTable>>(() => MethodAccessor<CookingTable>.Create("GetCurrentIngredients"));
		private static readonly System.Lazy<MethodAccessor<CookingTable>> _InitializeSlots757602046 =
				new System.Lazy<MethodAccessor<CookingTable>>(() => MethodAccessor<CookingTable>.Create("InitializeSlots"));
		private static readonly System.Lazy<MethodAccessor<CookingTable>> _GetSlotFromIndex3486186818 =
				new System.Lazy<MethodAccessor<CookingTable>>(() => MethodAccessor<CookingTable>.Create("GetSlotFromIndex", typeof(int)));
		private static readonly System.Lazy<MethodAccessor<CookingTable>> _GetIngredientCount757602046 =
				new System.Lazy<MethodAccessor<CookingTable>>(() => MethodAccessor<CookingTable>.Create("GetIngredientCount"));
		private static readonly System.Lazy<MethodAccessor<CookingTable>> _SetFinishedFoodModel757602046 =
				new System.Lazy<MethodAccessor<CookingTable>>(() => MethodAccessor<CookingTable>.Create("SetFinishedFoodModel"));

		public static void Awake(this CookingTable __self) => _Awake757602046.Value.Invoke(__self);
		public static void OnBlockPlaced(this CookingTable __self) => _OnBlockPlaced757602046.Value.Invoke(__self);
		public static void Update(this CookingTable __self) => _Update757602046.Value.Invoke(__self);
		public static void OnDestroy(this CookingTable __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void OnSlotInsertItem(this CookingTable __self, Network_Player player, CookingTable_Slot slot, ItemInstance itemInstance) => _OnSlotInsertItem2603832799.Value.Invoke(__self, player, slot, itemInstance);
		public static void OnSlotPickupItem(this CookingTable __self, Network_Player player, CookingTable_Slot slot, ItemInstance itemInstance) => _OnSlotPickupItem2603832799.Value.Invoke(__self, player, slot, itemInstance);
		public static bool IsCooking(this CookingTable __self) => (bool)_IsCooking757602046.Value.Invoke(__self);
		public static void HandleStartCooking(this CookingTable __self) => _HandleStartCooking757602046.Value.Invoke(__self);
		public static void HandlePickupFood(this CookingTable __self) => _HandlePickupFood757602046.Value.Invoke(__self);
		public static void HandleBoilSound(this CookingTable __self) => _HandleBoilSound757602046.Value.Invoke(__self);
		public static void HandleParticles(this CookingTable __self) => _HandleParticles757602046.Value.Invoke(__self);
		public static bool StartCooking(this CookingTable __self, SO_CookingTable_Recipe recipe) => (bool)_StartCooking3454591603.Value.Invoke(__self, recipe);
		public static System.Collections.IEnumerator SetAnimationState(this CookingTable __self, bool state, float delay) => (System.Collections.IEnumerator)_SetAnimationState3661303471.Value.Invoke(__self, state, delay);
		public static void FinishCooking(this CookingTable __self) => _FinishCooking757602046.Value.Invoke(__self);
		public static bool PickupFood(this CookingTable __self, Network_Player player) => (bool)_PickupFood3461878659.Value.Invoke(__self, player);
		public static void RetrieveAllRecipes(this CookingTable __self) => _RetrieveAllRecipes757602046.Value.Invoke(__self);
		public static SO_CookingTable_Recipe GetRecipeFromIndex(this CookingTable __self, int recipeIndex) => (SO_CookingTable_Recipe)_GetRecipeFromIndex3486186818.Value.Invoke(__self, recipeIndex);
		public static SO_CookingTable_Recipe GetRecipeFromIngredients(this CookingTable __self) => (SO_CookingTable_Recipe)_GetRecipeFromIngredients757602046.Value.Invoke(__self);
		public static System.Collections.Generic.List<Item_Base> GetCurrentIngredients(this CookingTable __self) => (System.Collections.Generic.List<Item_Base>)_GetCurrentIngredients757602046.Value.Invoke(__self);
		public static void InitializeSlots(this CookingTable __self) => _InitializeSlots757602046.Value.Invoke(__self);
		public static CookingTable_Slot GetSlotFromIndex(this CookingTable __self, int slotIndex) => (CookingTable_Slot)_GetSlotFromIndex3486186818.Value.Invoke(__self, slotIndex);
		public static uint GetIngredientCount(this CookingTable __self) => (uint)_GetIngredientCount757602046.Value.Invoke(__self);
		public static void SetFinishedFoodModel(this CookingTable __self) => _SetFinishedFoodModel757602046.Value.Invoke(__self);

	}

	public static class Private_CookingTable
	{

		private static readonly System.Lazy<StaticFieldAccessor<SO_CookingTable_Recipe[]>> _allRecipes =
				new System.Lazy<StaticFieldAccessor<SO_CookingTable_Recipe[]>>(() => StaticFieldAccessor<SO_CookingTable_Recipe[]>.Create(typeof(CookingTable), "allRecipes"));

		public static SO_CookingTable_Recipe[] GetAllRecipes() => _allRecipes.Value.GetValue();
		public static void SetAllRecipes(SO_CookingTable_Recipe[] value) => _allRecipes.Value.SetValue(value);

	}

	public static class PrivateAccessor_CookingTable_Juicer
	{

		private static readonly System.Lazy<FieldAccessor<CookingTable_Juicer, int>> _batteryUsesPerMin =
				new System.Lazy<FieldAccessor<CookingTable_Juicer, int>>(() => FieldAccessor<CookingTable_Juicer, int>.Create("batteryUsesPerMin"));
		private static readonly System.Lazy<FieldAccessor<CookingTable_Juicer, FMODUnity.StudioEventEmitter>> _eventEmitter_juicerActive =
				new System.Lazy<FieldAccessor<CookingTable_Juicer, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<CookingTable_Juicer, FMODUnity.StudioEventEmitter>.Create("eventEmitter_juicerActive"));
		private static readonly System.Lazy<FieldAccessor<CookingTable_Juicer, float>> _timer =
				new System.Lazy<FieldAccessor<CookingTable_Juicer, float>>(() => FieldAccessor<CookingTable_Juicer, float>.Create("timer"));
		private static readonly System.Lazy<FieldAccessor<CookingTable_Juicer, float>> _scuffedAntilaggSoundTimer =
				new System.Lazy<FieldAccessor<CookingTable_Juicer, float>>(() => FieldAccessor<CookingTable_Juicer, float>.Create("scuffedAntilaggSoundTimer"));

		public static int GetBatteryUsesPerMin(this CookingTable_Juicer __self) => _batteryUsesPerMin.Value.GetValue(__self);
		public static void SetBatteryUsesPerMin(this CookingTable_Juicer __self, int value) => _batteryUsesPerMin.Value.SetValue(__self, value);
		public static FMODUnity.StudioEventEmitter GetEventEmitter_juicerActive(this CookingTable_Juicer __self) => _eventEmitter_juicerActive.Value.GetValue(__self);
		public static void SetEventEmitter_juicerActive(this CookingTable_Juicer __self, FMODUnity.StudioEventEmitter value) => _eventEmitter_juicerActive.Value.SetValue(__self, value);
		public static float GetTimer(this CookingTable_Juicer __self) => _timer.Value.GetValue(__self);
		public static void SetTimer(this CookingTable_Juicer __self, float value) => _timer.Value.SetValue(__self, value);
		public static float GetScuffedAntilaggSoundTimer(this CookingTable_Juicer __self) => _scuffedAntilaggSoundTimer.Value.GetValue(__self);
		public static void SetScuffedAntilaggSoundTimer(this CookingTable_Juicer __self, float value) => _scuffedAntilaggSoundTimer.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<CookingTable_Juicer>> _Update757602046 =
				new System.Lazy<MethodAccessor<CookingTable_Juicer>>(() => MethodAccessor<CookingTable_Juicer>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<CookingTable_Juicer>> _HandleSound757602046 =
				new System.Lazy<MethodAccessor<CookingTable_Juicer>>(() => MethodAccessor<CookingTable_Juicer>.Create("HandleSound"));
		private static readonly System.Lazy<MethodAccessor<CookingTable_Juicer>> _HandleAnimations757602046 =
				new System.Lazy<MethodAccessor<CookingTable_Juicer>>(() => MethodAccessor<CookingTable_Juicer>.Create("HandleAnimations"));
		private static readonly System.Lazy<MethodAccessor<CookingTable_Juicer>> _IsCooking757602046 =
				new System.Lazy<MethodAccessor<CookingTable_Juicer>>(() => MethodAccessor<CookingTable_Juicer>.Create("IsCooking"));
		private static readonly System.Lazy<MethodAccessor<CookingTable_Juicer>> _StartCooking3454591603 =
				new System.Lazy<MethodAccessor<CookingTable_Juicer>>(() => MethodAccessor<CookingTable_Juicer>.Create("StartCooking", typeof(SO_CookingTable_Recipe)));
		private static readonly System.Lazy<MethodAccessor<CookingTable_Juicer>> _FinishCooking757602046 =
				new System.Lazy<MethodAccessor<CookingTable_Juicer>>(() => MethodAccessor<CookingTable_Juicer>.Create("FinishCooking"));

		public static void Update(this CookingTable_Juicer __self) => _Update757602046.Value.Invoke(__self);
		public static void HandleSound(this CookingTable_Juicer __self) => _HandleSound757602046.Value.Invoke(__self);
		public static void HandleAnimations(this CookingTable_Juicer __self) => _HandleAnimations757602046.Value.Invoke(__self);
		public static bool IsCooking(this CookingTable_Juicer __self) => (bool)_IsCooking757602046.Value.Invoke(__self);
		public static bool StartCooking(this CookingTable_Juicer __self, SO_CookingTable_Recipe recipe) => (bool)_StartCooking3454591603.Value.Invoke(__self, recipe);
		public static void FinishCooking(this CookingTable_Juicer __self) => _FinishCooking757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_CookingTable_Pot
	{

		private static readonly System.Lazy<FieldAccessor<CookingTable_Pot, FuelNetwork>> _fuelInsertion =
				new System.Lazy<FieldAccessor<CookingTable_Pot, FuelNetwork>>(() => FieldAccessor<CookingTable_Pot, FuelNetwork>.Create("fuelInsertion"));

		public static FuelNetwork GetFuelInsertion(this CookingTable_Pot __self) => _fuelInsertion.Value.GetValue(__self);
		public static void SetFuelInsertion(this CookingTable_Pot __self, FuelNetwork value) => _fuelInsertion.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<CookingTable_Pot>> _Update757602046 =
				new System.Lazy<MethodAccessor<CookingTable_Pot>>(() => MethodAccessor<CookingTable_Pot>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<CookingTable_Pot>> _OnBlockPlaced757602046 =
				new System.Lazy<MethodAccessor<CookingTable_Pot>>(() => MethodAccessor<CookingTable_Pot>.Create("OnBlockPlaced"));
		private static readonly System.Lazy<MethodAccessor<CookingTable_Pot>> _IsCooking757602046 =
				new System.Lazy<MethodAccessor<CookingTable_Pot>>(() => MethodAccessor<CookingTable_Pot>.Create("IsCooking"));
		private static readonly System.Lazy<MethodAccessor<CookingTable_Pot>> _StartCooking3454591603 =
				new System.Lazy<MethodAccessor<CookingTable_Pot>>(() => MethodAccessor<CookingTable_Pot>.Create("StartCooking", typeof(SO_CookingTable_Recipe)));
		private static readonly System.Lazy<MethodAccessor<CookingTable_Pot>> _FinishCooking757602046 =
				new System.Lazy<MethodAccessor<CookingTable_Pot>>(() => MethodAccessor<CookingTable_Pot>.Create("FinishCooking"));
		private static readonly System.Lazy<MethodAccessor<CookingTable_Pot>> _HandleAnimations757602046 =
				new System.Lazy<MethodAccessor<CookingTable_Pot>>(() => MethodAccessor<CookingTable_Pot>.Create("HandleAnimations"));

		public static void Update(this CookingTable_Pot __self) => _Update757602046.Value.Invoke(__self);
		public static void OnBlockPlaced(this CookingTable_Pot __self) => _OnBlockPlaced757602046.Value.Invoke(__self);
		public static bool IsCooking(this CookingTable_Pot __self) => (bool)_IsCooking757602046.Value.Invoke(__self);
		public static bool StartCooking(this CookingTable_Pot __self, SO_CookingTable_Recipe recipe) => (bool)_StartCooking3454591603.Value.Invoke(__self, recipe);
		public static void FinishCooking(this CookingTable_Pot __self) => _FinishCooking757602046.Value.Invoke(__self);
		public static void HandleAnimations(this CookingTable_Pot __self) => _HandleAnimations757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_CookingTable_Recipe_UI
	{

		private static readonly System.Lazy<FieldAccessor<CookingTable_Recipe_UI, bool>> _showRecipeInStart =
				new System.Lazy<FieldAccessor<CookingTable_Recipe_UI, bool>>(() => FieldAccessor<CookingTable_Recipe_UI, bool>.Create("showRecipeInStart"));
		private static readonly System.Lazy<FieldAccessor<CookingTable_Recipe_UI, SO_CookingTable_Recipe>> _recipe =
				new System.Lazy<FieldAccessor<CookingTable_Recipe_UI, SO_CookingTable_Recipe>>(() => FieldAccessor<CookingTable_Recipe_UI, SO_CookingTable_Recipe>.Create("recipe"));
		private static readonly System.Lazy<FieldAccessor<CookingTable_Recipe_UI, CostCollection>> _costCollection =
				new System.Lazy<FieldAccessor<CookingTable_Recipe_UI, CostCollection>>(() => FieldAccessor<CookingTable_Recipe_UI, CostCollection>.Create("costCollection"));
		private static readonly System.Lazy<FieldAccessor<CookingTable_Recipe_UI, TMPro.TextMeshProUGUI>> _recipeTypeLabel =
				new System.Lazy<FieldAccessor<CookingTable_Recipe_UI, TMPro.TextMeshProUGUI>>(() => FieldAccessor<CookingTable_Recipe_UI, TMPro.TextMeshProUGUI>.Create("recipeTypeLabel"));
		private static readonly System.Lazy<FieldAccessor<CookingTable_Recipe_UI, TMPro.TextMeshProUGUI>> _recipeLabel =
				new System.Lazy<FieldAccessor<CookingTable_Recipe_UI, TMPro.TextMeshProUGUI>>(() => FieldAccessor<CookingTable_Recipe_UI, TMPro.TextMeshProUGUI>.Create("recipeLabel"));
		private static readonly System.Lazy<FieldAccessor<CookingTable_Recipe_UI, UnityEngine.UI.Image>> _recipeImage =
				new System.Lazy<FieldAccessor<CookingTable_Recipe_UI, UnityEngine.UI.Image>>(() => FieldAccessor<CookingTable_Recipe_UI, UnityEngine.UI.Image>.Create("recipeImage"));
		private static readonly System.Lazy<FieldAccessor<CookingTable_Recipe_UI, UnityEngine.MeshRenderer>> _paperRenderer =
				new System.Lazy<FieldAccessor<CookingTable_Recipe_UI, UnityEngine.MeshRenderer>>(() => FieldAccessor<CookingTable_Recipe_UI, UnityEngine.MeshRenderer>.Create("paperRenderer"));
		private static readonly System.Lazy<FieldAccessor<CookingTable_Recipe_UI, UnityEngine.Material>> _normalMaterial =
				new System.Lazy<FieldAccessor<CookingTable_Recipe_UI, UnityEngine.Material>>(() => FieldAccessor<CookingTable_Recipe_UI, UnityEngine.Material>.Create("normalMaterial"));
		private static readonly System.Lazy<FieldAccessor<CookingTable_Recipe_UI, UnityEngine.Material>> _buffMaterial =
				new System.Lazy<FieldAccessor<CookingTable_Recipe_UI, UnityEngine.Material>>(() => FieldAccessor<CookingTable_Recipe_UI, UnityEngine.Material>.Create("buffMaterial"));
		private static readonly System.Lazy<FieldAccessor<CookingTable_Recipe_UI, UnityEngine.Canvas>> _canvas =
				new System.Lazy<FieldAccessor<CookingTable_Recipe_UI, UnityEngine.Canvas>>(() => FieldAccessor<CookingTable_Recipe_UI, UnityEngine.Canvas>.Create("canvas"));
		private static readonly System.Lazy<FieldAccessor<CookingTable_Recipe_UI, UnityEngine.Renderer>> _renderedTexture =
				new System.Lazy<FieldAccessor<CookingTable_Recipe_UI, UnityEngine.Renderer>>(() => FieldAccessor<CookingTable_Recipe_UI, UnityEngine.Renderer>.Create("renderedTexture"));
		private static readonly System.Lazy<FieldAccessor<CookingTable_Recipe_UI, UnityEngine.Material[]>> _materialsAllowedToRender =
				new System.Lazy<FieldAccessor<CookingTable_Recipe_UI, UnityEngine.Material[]>>(() => FieldAccessor<CookingTable_Recipe_UI, UnityEngine.Material[]>.Create("materialsAllowedToRender"));
		private static readonly System.Lazy<FieldAccessor<CookingTable_Recipe_UI, UnityEngine.Material>> _uiMaterialInstance =
				new System.Lazy<FieldAccessor<CookingTable_Recipe_UI, UnityEngine.Material>>(() => FieldAccessor<CookingTable_Recipe_UI, UnityEngine.Material>.Create("uiMaterialInstance"));

		public static bool GetShowRecipeInStart(this CookingTable_Recipe_UI __self) => _showRecipeInStart.Value.GetValue(__self);
		public static void SetShowRecipeInStart(this CookingTable_Recipe_UI __self, bool value) => _showRecipeInStart.Value.SetValue(__self, value);
		public static SO_CookingTable_Recipe GetRecipe(this CookingTable_Recipe_UI __self) => _recipe.Value.GetValue(__self);
		public static void SetRecipe(this CookingTable_Recipe_UI __self, SO_CookingTable_Recipe value) => _recipe.Value.SetValue(__self, value);
		public static CostCollection GetCostCollection(this CookingTable_Recipe_UI __self) => _costCollection.Value.GetValue(__self);
		public static void SetCostCollection(this CookingTable_Recipe_UI __self, CostCollection value) => _costCollection.Value.SetValue(__self, value);
		public static TMPro.TextMeshProUGUI GetRecipeTypeLabel(this CookingTable_Recipe_UI __self) => _recipeTypeLabel.Value.GetValue(__self);
		public static void SetRecipeTypeLabel(this CookingTable_Recipe_UI __self, TMPro.TextMeshProUGUI value) => _recipeTypeLabel.Value.SetValue(__self, value);
		public static TMPro.TextMeshProUGUI GetRecipeLabel(this CookingTable_Recipe_UI __self) => _recipeLabel.Value.GetValue(__self);
		public static void SetRecipeLabel(this CookingTable_Recipe_UI __self, TMPro.TextMeshProUGUI value) => _recipeLabel.Value.SetValue(__self, value);
		public static UnityEngine.UI.Image GetRecipeImage(this CookingTable_Recipe_UI __self) => _recipeImage.Value.GetValue(__self);
		public static void SetRecipeImage(this CookingTable_Recipe_UI __self, UnityEngine.UI.Image value) => _recipeImage.Value.SetValue(__self, value);
		public static UnityEngine.MeshRenderer GetPaperRenderer(this CookingTable_Recipe_UI __self) => _paperRenderer.Value.GetValue(__self);
		public static void SetPaperRenderer(this CookingTable_Recipe_UI __self, UnityEngine.MeshRenderer value) => _paperRenderer.Value.SetValue(__self, value);
		public static UnityEngine.Material GetNormalMaterial(this CookingTable_Recipe_UI __self) => _normalMaterial.Value.GetValue(__self);
		public static void SetNormalMaterial(this CookingTable_Recipe_UI __self, UnityEngine.Material value) => _normalMaterial.Value.SetValue(__self, value);
		public static UnityEngine.Material GetBuffMaterial(this CookingTable_Recipe_UI __self) => _buffMaterial.Value.GetValue(__self);
		public static void SetBuffMaterial(this CookingTable_Recipe_UI __self, UnityEngine.Material value) => _buffMaterial.Value.SetValue(__self, value);
		public static UnityEngine.Canvas GetCanvas(this CookingTable_Recipe_UI __self) => _canvas.Value.GetValue(__self);
		public static void SetCanvas(this CookingTable_Recipe_UI __self, UnityEngine.Canvas value) => _canvas.Value.SetValue(__self, value);
		public static UnityEngine.Renderer GetRenderedTexture(this CookingTable_Recipe_UI __self) => _renderedTexture.Value.GetValue(__self);
		public static void SetRenderedTexture(this CookingTable_Recipe_UI __self, UnityEngine.Renderer value) => _renderedTexture.Value.SetValue(__self, value);
		public static UnityEngine.Material[] GetMaterialsAllowedToRender(this CookingTable_Recipe_UI __self) => _materialsAllowedToRender.Value.GetValue(__self);
		public static void SetMaterialsAllowedToRender(this CookingTable_Recipe_UI __self, UnityEngine.Material[] value) => _materialsAllowedToRender.Value.SetValue(__self, value);
		public static UnityEngine.Material GetUiMaterialInstance(this CookingTable_Recipe_UI __self) => _uiMaterialInstance.Value.GetValue(__self);
		public static void SetUiMaterialInstance(this CookingTable_Recipe_UI __self, UnityEngine.Material value) => _uiMaterialInstance.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<CookingTable_Recipe_UI>> _Start757602046 =
				new System.Lazy<MethodAccessor<CookingTable_Recipe_UI>>(() => MethodAccessor<CookingTable_Recipe_UI>.Create("Start"));

		public static void Start(this CookingTable_Recipe_UI __self) => _Start757602046.Value.Invoke(__self);

	}

	public static class Private_CookingTable_Recipe_UI
	{

		private static readonly System.Lazy<StaticFieldAccessor<System.Collections.Generic.Dictionary<Item_Base, UnityEngine.Material>>> _generatedMaterials =
				new System.Lazy<StaticFieldAccessor<System.Collections.Generic.Dictionary<Item_Base, UnityEngine.Material>>>(() => StaticFieldAccessor<System.Collections.Generic.Dictionary<Item_Base, UnityEngine.Material>>.Create(typeof(CookingTable_Recipe_UI), "generatedMaterials"));

		public static System.Collections.Generic.Dictionary<Item_Base, UnityEngine.Material> GetGeneratedMaterials() => _generatedMaterials.Value.GetValue();
		public static void SetGeneratedMaterials(System.Collections.Generic.Dictionary<Item_Base, UnityEngine.Material> value) => _generatedMaterials.Value.SetValue(value);

	}

	public static class PrivateAccessor_CookingTable_Slot
	{

		private static readonly System.Lazy<FieldAccessor<CookingTable_Slot, int>> _index =
				new System.Lazy<FieldAccessor<CookingTable_Slot, int>>(() => FieldAccessor<CookingTable_Slot, int>.Create("index"));
		private static readonly System.Lazy<FieldAccessor<CookingTable_Slot, ItemObjectEnabler>> _objectEnabler =
				new System.Lazy<FieldAccessor<CookingTable_Slot, ItemObjectEnabler>>(() => FieldAccessor<CookingTable_Slot, ItemObjectEnabler>.Create("objectEnabler"));
		private static readonly System.Lazy<FieldAccessor<CookingTable_Slot, UnityEngine.Animator>> _anim =
				new System.Lazy<FieldAccessor<CookingTable_Slot, UnityEngine.Animator>>(() => FieldAccessor<CookingTable_Slot, UnityEngine.Animator>.Create("anim"));
		private static readonly System.Lazy<FieldAccessor<CookingTable_Slot, float>> _hideItemDelay =
				new System.Lazy<FieldAccessor<CookingTable_Slot, float>>(() => FieldAccessor<CookingTable_Slot, float>.Create("hideItemDelay"));
		private static readonly System.Lazy<FieldAccessor<CookingTable_Slot, string>> _eventRef_plums =
				new System.Lazy<FieldAccessor<CookingTable_Slot, string>>(() => FieldAccessor<CookingTable_Slot, string>.Create("eventRef_plums"));
		private static readonly System.Lazy<FieldAccessor<CookingTable_Slot, string>> _eventRef_placeItem =
				new System.Lazy<FieldAccessor<CookingTable_Slot, string>>(() => FieldAccessor<CookingTable_Slot, string>.Create("eventRef_placeItem"));
		private static readonly System.Lazy<FieldAccessor<CookingTable_Slot, ItemInstance>> _currentItem =
				new System.Lazy<FieldAccessor<CookingTable_Slot, ItemInstance>>(() => FieldAccessor<CookingTable_Slot, ItemInstance>.Create("currentItem"));
		private static readonly System.Lazy<FieldAccessor<CookingTable_Slot, CookingTable>> _cookingPot =
				new System.Lazy<FieldAccessor<CookingTable_Slot, CookingTable>>(() => FieldAccessor<CookingTable_Slot, CookingTable>.Create("cookingPot"));
		private static readonly System.Lazy<FieldAccessor<CookingTable_Slot, bool>> _initialized =
				new System.Lazy<FieldAccessor<CookingTable_Slot, bool>>(() => FieldAccessor<CookingTable_Slot, bool>.Create("initialized"));

		public static int GetIndex(this CookingTable_Slot __self) => _index.Value.GetValue(__self);
		public static void SetIndex(this CookingTable_Slot __self, int value) => _index.Value.SetValue(__self, value);
		public static ItemObjectEnabler GetObjectEnabler(this CookingTable_Slot __self) => _objectEnabler.Value.GetValue(__self);
		public static void SetObjectEnabler(this CookingTable_Slot __self, ItemObjectEnabler value) => _objectEnabler.Value.SetValue(__self, value);
		public static UnityEngine.Animator GetAnim(this CookingTable_Slot __self) => _anim.Value.GetValue(__self);
		public static void SetAnim(this CookingTable_Slot __self, UnityEngine.Animator value) => _anim.Value.SetValue(__self, value);
		public static float GetHideItemDelay(this CookingTable_Slot __self) => _hideItemDelay.Value.GetValue(__self);
		public static void SetHideItemDelay(this CookingTable_Slot __self, float value) => _hideItemDelay.Value.SetValue(__self, value);
		public static string GetEventRef_plums(this CookingTable_Slot __self) => _eventRef_plums.Value.GetValue(__self);
		public static void SetEventRef_plums(this CookingTable_Slot __self, string value) => _eventRef_plums.Value.SetValue(__self, value);
		public static string GetEventRef_placeItem(this CookingTable_Slot __self) => _eventRef_placeItem.Value.GetValue(__self);
		public static void SetEventRef_placeItem(this CookingTable_Slot __self, string value) => _eventRef_placeItem.Value.SetValue(__self, value);
		public static ItemInstance GetCurrentItem(this CookingTable_Slot __self) => _currentItem.Value.GetValue(__self);
		public static void SetCurrentItem(this CookingTable_Slot __self, ItemInstance value) => _currentItem.Value.SetValue(__self, value);
		public static CookingTable GetCookingPot(this CookingTable_Slot __self) => _cookingPot.Value.GetValue(__self);
		public static void SetCookingPot(this CookingTable_Slot __self, CookingTable value) => _cookingPot.Value.SetValue(__self, value);
		public static bool GetInitialized(this CookingTable_Slot __self) => _initialized.Value.GetValue(__self);
		public static void SetInitialized(this CookingTable_Slot __self, bool value) => _initialized.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<CookingTable_Slot>> _HandlePickup757602046 =
				new System.Lazy<MethodAccessor<CookingTable_Slot>>(() => MethodAccessor<CookingTable_Slot>.Create("HandlePickup"));
		private static readonly System.Lazy<MethodAccessor<CookingTable_Slot>> _HandleInsertion757602046 =
				new System.Lazy<MethodAccessor<CookingTable_Slot>>(() => MethodAccessor<CookingTable_Slot>.Create("HandleInsertion"));

		public static void HandlePickup(this CookingTable_Slot __self) => _HandlePickup757602046.Value.Invoke(__self);
		public static void HandleInsertion(this CookingTable_Slot __self) => _HandleInsertion757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_DetailPlankLength
	{

		private static readonly System.Lazy<FieldAccessor<DetailPlankLength, UnityEngine.Transform>> _scalePivot =
				new System.Lazy<FieldAccessor<DetailPlankLength, UnityEngine.Transform>>(() => FieldAccessor<DetailPlankLength, UnityEngine.Transform>.Create("scalePivot"));
		private static readonly System.Lazy<FieldAccessor<DetailPlankLength, UnityEngine.MeshFilter>> _meshFilter =
				new System.Lazy<FieldAccessor<DetailPlankLength, UnityEngine.MeshFilter>>(() => FieldAccessor<DetailPlankLength, UnityEngine.MeshFilter>.Create("meshFilter"));
		private static readonly System.Lazy<FieldAccessor<DetailPlankLength, GizmoBox>> _secondRequiredCollider =
				new System.Lazy<FieldAccessor<DetailPlankLength, GizmoBox>>(() => FieldAccessor<DetailPlankLength, GizmoBox>.Create("secondRequiredCollider"));
		private static readonly System.Lazy<FieldAccessor<DetailPlankLength, UnityEngine.BoxCollider>> _boxCollider =
				new System.Lazy<FieldAccessor<DetailPlankLength, UnityEngine.BoxCollider>>(() => FieldAccessor<DetailPlankLength, UnityEngine.BoxCollider>.Create("boxCollider"));
		private static readonly System.Lazy<FieldAccessor<DetailPlankLength, DetailPlankLength.DetailLength[]>> _lengths =
				new System.Lazy<FieldAccessor<DetailPlankLength, DetailPlankLength.DetailLength[]>>(() => FieldAccessor<DetailPlankLength, DetailPlankLength.DetailLength[]>.Create("lengths"));

		public static UnityEngine.Transform GetScalePivot(this DetailPlankLength __self) => _scalePivot.Value.GetValue(__self);
		public static void SetScalePivot(this DetailPlankLength __self, UnityEngine.Transform value) => _scalePivot.Value.SetValue(__self, value);
		public static UnityEngine.MeshFilter GetMeshFilter(this DetailPlankLength __self) => _meshFilter.Value.GetValue(__self);
		public static void SetMeshFilter(this DetailPlankLength __self, UnityEngine.MeshFilter value) => _meshFilter.Value.SetValue(__self, value);
		public static GizmoBox GetSecondRequiredCollider(this DetailPlankLength __self) => _secondRequiredCollider.Value.GetValue(__self);
		public static void SetSecondRequiredCollider(this DetailPlankLength __self, GizmoBox value) => _secondRequiredCollider.Value.SetValue(__self, value);
		public static UnityEngine.BoxCollider GetBoxCollider(this DetailPlankLength __self) => _boxCollider.Value.GetValue(__self);
		public static void SetBoxCollider(this DetailPlankLength __self, UnityEngine.BoxCollider value) => _boxCollider.Value.SetValue(__self, value);
		public static DetailPlankLength.DetailLength[] GetLengths(this DetailPlankLength __self) => _lengths.Value.GetValue(__self);
		public static void SetLengths(this DetailPlankLength __self, DetailPlankLength.DetailLength[] value) => _lengths.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_Door
	{

		private static readonly System.Lazy<FieldAccessor<Door, UnityEngine.Animator>> _animator =
				new System.Lazy<FieldAccessor<Door, UnityEngine.Animator>>(() => FieldAccessor<Door, UnityEngine.Animator>.Create("animator"));
		private static readonly System.Lazy<FieldAccessor<Door, UnityEngine.Collider>> _doorCollider =
				new System.Lazy<FieldAccessor<Door, UnityEngine.Collider>>(() => FieldAccessor<Door, UnityEngine.Collider>.Create("doorCollider"));
		private static readonly System.Lazy<FieldAccessor<Door, string>> _eventRef_Open =
				new System.Lazy<FieldAccessor<Door, string>>(() => FieldAccessor<Door, string>.Create("eventRef_Open"));
		private static readonly System.Lazy<FieldAccessor<Door, string>> _eventRef_Close =
				new System.Lazy<FieldAccessor<Door, string>>(() => FieldAccessor<Door, string>.Create("eventRef_Close"));
		private static readonly System.Lazy<FieldAccessor<Door, string>> _eventRef_CloseSqueal =
				new System.Lazy<FieldAccessor<Door, string>>(() => FieldAccessor<Door, string>.Create("eventRef_CloseSqueal"));
		private static readonly System.Lazy<FieldAccessor<Door, Raft_Network>> _network =
				new System.Lazy<FieldAccessor<Door, Raft_Network>>(() => FieldAccessor<Door, Raft_Network>.Create("network"));
		private static readonly System.Lazy<FieldAccessor<Door, CanvasHelper>> _canvas =
				new System.Lazy<FieldAccessor<Door, CanvasHelper>>(() => FieldAccessor<Door, CanvasHelper>.Create("canvas"));
		private static readonly System.Lazy<FieldAccessor<Door, bool>> _placed =
				new System.Lazy<FieldAccessor<Door, bool>>(() => FieldAccessor<Door, bool>.Create("placed"));

		public static UnityEngine.Animator GetAnimator(this Door __self) => _animator.Value.GetValue(__self);
		public static void SetAnimator(this Door __self, UnityEngine.Animator value) => _animator.Value.SetValue(__self, value);
		public static UnityEngine.Collider GetDoorCollider(this Door __self) => _doorCollider.Value.GetValue(__self);
		public static void SetDoorCollider(this Door __self, UnityEngine.Collider value) => _doorCollider.Value.SetValue(__self, value);
		public static string GetEventRef_Open(this Door __self) => _eventRef_Open.Value.GetValue(__self);
		public static void SetEventRef_Open(this Door __self, string value) => _eventRef_Open.Value.SetValue(__self, value);
		public static string GetEventRef_Close(this Door __self) => _eventRef_Close.Value.GetValue(__self);
		public static void SetEventRef_Close(this Door __self, string value) => _eventRef_Close.Value.SetValue(__self, value);
		public static string GetEventRef_CloseSqueal(this Door __self) => _eventRef_CloseSqueal.Value.GetValue(__self);
		public static void SetEventRef_CloseSqueal(this Door __self, string value) => _eventRef_CloseSqueal.Value.SetValue(__self, value);
		public static Raft_Network GetNetwork(this Door __self) => _network.Value.GetValue(__self);
		public static void SetNetwork(this Door __self, Raft_Network value) => _network.Value.SetValue(__self, value);
		public static CanvasHelper GetCanvas(this Door __self) => _canvas.Value.GetValue(__self);
		public static void SetCanvas(this Door __self, CanvasHelper value) => _canvas.Value.SetValue(__self, value);
		public static bool GetPlaced(this Door __self) => _placed.Value.GetValue(__self);
		public static void SetPlaced(this Door __self, bool value) => _placed.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Door>> _Start757602046 =
				new System.Lazy<MethodAccessor<Door>>(() => MethodAccessor<Door>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<Door>> _Close757602046 =
				new System.Lazy<MethodAccessor<Door>>(() => MethodAccessor<Door>.Create("Close"));

		public static void Start(this Door __self) => _Start757602046.Value.Invoke(__self);
		public static void Close(this Door __self) => _Close757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Electric_Purifier
	{

		private static readonly System.Lazy<FieldAccessor<Electric_Purifier, int>> _batteryDrainPerPump =
				new System.Lazy<FieldAccessor<Electric_Purifier, int>>(() => FieldAccessor<Electric_Purifier, int>.Create("batteryDrainPerPump"));
		private static readonly System.Lazy<FieldAccessor<Electric_Purifier, int>> _tankFillPerPump =
				new System.Lazy<FieldAccessor<Electric_Purifier, int>>(() => FieldAccessor<Electric_Purifier, int>.Create("tankFillPerPump"));
		private static readonly System.Lazy<FieldAccessor<Electric_Purifier, UnityEngine.Animator>> _pumpAnimator =
				new System.Lazy<FieldAccessor<Electric_Purifier, UnityEngine.Animator>>(() => FieldAccessor<Electric_Purifier, UnityEngine.Animator>.Create("pumpAnimator"));
		private static readonly System.Lazy<FieldAccessor<Electric_Purifier, StudioEventEmitterSustain>> _emitter_Running =
				new System.Lazy<FieldAccessor<Electric_Purifier, StudioEventEmitterSustain>>(() => FieldAccessor<Electric_Purifier, StudioEventEmitterSustain>.Create("emitter_Running"));
		private static readonly System.Lazy<FieldAccessor<Electric_Purifier, bool>> _isPlaced =
				new System.Lazy<FieldAccessor<Electric_Purifier, bool>>(() => FieldAccessor<Electric_Purifier, bool>.Create("isPlaced"));
		private static readonly System.Lazy<FieldAccessor<Electric_Purifier, bool>> _isOn =
				new System.Lazy<FieldAccessor<Electric_Purifier, bool>>(() => FieldAccessor<Electric_Purifier, bool>.Create("isOn"));

		public static int GetBatteryDrainPerPump(this Electric_Purifier __self) => _batteryDrainPerPump.Value.GetValue(__self);
		public static void SetBatteryDrainPerPump(this Electric_Purifier __self, int value) => _batteryDrainPerPump.Value.SetValue(__self, value);
		public static int GetTankFillPerPump(this Electric_Purifier __self) => _tankFillPerPump.Value.GetValue(__self);
		public static void SetTankFillPerPump(this Electric_Purifier __self, int value) => _tankFillPerPump.Value.SetValue(__self, value);
		public static UnityEngine.Animator GetPumpAnimator(this Electric_Purifier __self) => _pumpAnimator.Value.GetValue(__self);
		public static void SetPumpAnimator(this Electric_Purifier __self, UnityEngine.Animator value) => _pumpAnimator.Value.SetValue(__self, value);
		public static StudioEventEmitterSustain GetEmitter_Running(this Electric_Purifier __self) => _emitter_Running.Value.GetValue(__self);
		public static void SetEmitter_Running(this Electric_Purifier __self, StudioEventEmitterSustain value) => _emitter_Running.Value.SetValue(__self, value);
		public static bool GetIsPlaced(this Electric_Purifier __self) => _isPlaced.Value.GetValue(__self);
		public static void SetIsPlaced(this Electric_Purifier __self, bool value) => _isPlaced.Value.SetValue(__self, value);
		public static bool GetIsOn(this Electric_Purifier __self) => _isOn.Value.GetValue(__self);
		public static void SetIsOn(this Electric_Purifier __self, bool value) => _isOn.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Electric_Purifier>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<Electric_Purifier>>(() => MethodAccessor<Electric_Purifier>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<Electric_Purifier>> _OnSuccessfullPump757602046 =
				new System.Lazy<MethodAccessor<Electric_Purifier>>(() => MethodAccessor<Electric_Purifier>.Create("OnSuccessfullPump"));
		private static readonly System.Lazy<MethodAccessor<Electric_Purifier>> _OnTankAmountChanged757602046 =
				new System.Lazy<MethodAccessor<Electric_Purifier>>(() => MethodAccessor<Electric_Purifier>.Create("OnTankAmountChanged"));
		private static readonly System.Lazy<MethodAccessor<Electric_Purifier>> _UpdateWaterMeterFill757602046 =
				new System.Lazy<MethodAccessor<Electric_Purifier>>(() => MethodAccessor<Electric_Purifier>.Create("UpdateWaterMeterFill"));
		private static readonly System.Lazy<MethodAccessor<Electric_Purifier>> _SetMachineState3450040886 =
				new System.Lazy<MethodAccessor<Electric_Purifier>>(() => MethodAccessor<Electric_Purifier>.Create("SetMachineState", typeof(bool)));

		public static void OnDestroy(this Electric_Purifier __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void OnSuccessfullPump(this Electric_Purifier __self) => _OnSuccessfullPump757602046.Value.Invoke(__self);
		public static void OnTankAmountChanged(this Electric_Purifier __self) => _OnTankAmountChanged757602046.Value.Invoke(__self);
		public static void UpdateWaterMeterFill(this Electric_Purifier __self) => _UpdateWaterMeterFill757602046.Value.Invoke(__self);
		public static void SetMachineState(this Electric_Purifier __self, bool value) => _SetMachineState3450040886.Value.Invoke(__self, value);

	}

	public static class PrivateAccessor_EngineControls
	{

		private static readonly System.Lazy<FieldAccessor<EngineControls, bool>> _ownAnchorsAreDown =
				new System.Lazy<FieldAccessor<EngineControls, bool>>(() => FieldAccessor<EngineControls, bool>.Create("ownAnchorsAreDown"));
		private static readonly System.Lazy<FieldAccessor<EngineControls, UnityEngine.Animator>> _animator =
				new System.Lazy<FieldAccessor<EngineControls, UnityEngine.Animator>>(() => FieldAccessor<EngineControls, UnityEngine.Animator>.Create("animator"));
		private static readonly System.Lazy<FieldAccessor<EngineControls, InteractableButton_Networked>> _button_reversal =
				new System.Lazy<FieldAccessor<EngineControls, InteractableButton_Networked>>(() => FieldAccessor<EngineControls, InteractableButton_Networked>.Create("button_reversal"));
		private static readonly System.Lazy<FieldAccessor<EngineControls, InteractableButton_Networked>> _button_invertPower =
				new System.Lazy<FieldAccessor<EngineControls, InteractableButton_Networked>>(() => FieldAccessor<EngineControls, InteractableButton_Networked>.Create("button_invertPower"));
		private static readonly System.Lazy<FieldAccessor<EngineControls, InteractableButton_Networked>> _button_anchorRemote =
				new System.Lazy<FieldAccessor<EngineControls, InteractableButton_Networked>>(() => FieldAccessor<EngineControls, InteractableButton_Networked>.Create("button_anchorRemote"));
		private static readonly System.Lazy<FieldAccessor<EngineControls, string>> _soundAnchorsDown =
				new System.Lazy<FieldAccessor<EngineControls, string>>(() => FieldAccessor<EngineControls, string>.Create("soundAnchorsDown"));
		private static readonly System.Lazy<FieldAccessor<EngineControls, string>> _soundAnchorsUp =
				new System.Lazy<FieldAccessor<EngineControls, string>>(() => FieldAccessor<EngineControls, string>.Create("soundAnchorsUp"));
		private static readonly System.Lazy<FieldAccessor<EngineControls, InteractableButton_Network_Forwarder>> _buttonForwarder =
				new System.Lazy<FieldAccessor<EngineControls, InteractableButton_Network_Forwarder>>(() => FieldAccessor<EngineControls, InteractableButton_Network_Forwarder>.Create("buttonForwarder"));
		private static readonly System.Lazy<FieldAccessor<EngineControls, Raft>> _raft =
				new System.Lazy<FieldAccessor<EngineControls, Raft>>(() => FieldAccessor<EngineControls, Raft>.Create("raft"));
		private static readonly System.Lazy<FieldAccessor<EngineControls, Raft_Network>> _network =
				new System.Lazy<FieldAccessor<EngineControls, Raft_Network>>(() => FieldAccessor<EngineControls, Raft_Network>.Create("network"));
		private static readonly System.Lazy<FieldAccessor<EngineControls, bool>> _hasBeenPlaced =
				new System.Lazy<FieldAccessor<EngineControls, bool>>(() => FieldAccessor<EngineControls, bool>.Create("hasBeenPlaced"));

		public static bool GetOwnAnchorsAreDown(this EngineControls __self) => _ownAnchorsAreDown.Value.GetValue(__self);
		public static void SetOwnAnchorsAreDown(this EngineControls __self, bool value) => _ownAnchorsAreDown.Value.SetValue(__self, value);
		public static UnityEngine.Animator GetAnimator(this EngineControls __self) => _animator.Value.GetValue(__self);
		public static void SetAnimator(this EngineControls __self, UnityEngine.Animator value) => _animator.Value.SetValue(__self, value);
		public static InteractableButton_Networked GetButton_reversal(this EngineControls __self) => _button_reversal.Value.GetValue(__self);
		public static void SetButton_reversal(this EngineControls __self, InteractableButton_Networked value) => _button_reversal.Value.SetValue(__self, value);
		public static InteractableButton_Networked GetButton_invertPower(this EngineControls __self) => _button_invertPower.Value.GetValue(__self);
		public static void SetButton_invertPower(this EngineControls __self, InteractableButton_Networked value) => _button_invertPower.Value.SetValue(__self, value);
		public static InteractableButton_Networked GetButton_anchorRemote(this EngineControls __self) => _button_anchorRemote.Value.GetValue(__self);
		public static void SetButton_anchorRemote(this EngineControls __self, InteractableButton_Networked value) => _button_anchorRemote.Value.SetValue(__self, value);
		public static string GetSoundAnchorsDown(this EngineControls __self) => _soundAnchorsDown.Value.GetValue(__self);
		public static void SetSoundAnchorsDown(this EngineControls __self, string value) => _soundAnchorsDown.Value.SetValue(__self, value);
		public static string GetSoundAnchorsUp(this EngineControls __self) => _soundAnchorsUp.Value.GetValue(__self);
		public static void SetSoundAnchorsUp(this EngineControls __self, string value) => _soundAnchorsUp.Value.SetValue(__self, value);
		public static InteractableButton_Network_Forwarder GetButtonForwarder(this EngineControls __self) => _buttonForwarder.Value.GetValue(__self);
		public static void SetButtonForwarder(this EngineControls __self, InteractableButton_Network_Forwarder value) => _buttonForwarder.Value.SetValue(__self, value);
		public static Raft GetRaft(this EngineControls __self) => _raft.Value.GetValue(__self);
		public static void SetRaft(this EngineControls __self, Raft value) => _raft.Value.SetValue(__self, value);
		public static Raft_Network GetNetwork(this EngineControls __self) => _network.Value.GetValue(__self);
		public static void SetNetwork(this EngineControls __self, Raft_Network value) => _network.Value.SetValue(__self, value);
		public static bool GetHasBeenPlaced(this EngineControls __self) => _hasBeenPlaced.Value.GetValue(__self);
		public static void SetHasBeenPlaced(this EngineControls __self, bool value) => _hasBeenPlaced.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<EngineControls>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<EngineControls>>(() => MethodAccessor<EngineControls>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<EngineControls>> _SetStateAnchorDownStateToAnchors757602046 =
				new System.Lazy<MethodAccessor<EngineControls>>(() => MethodAccessor<EngineControls>.Create("SetStateAnchorDownStateToAnchors"));
		private static readonly System.Lazy<MethodAccessor<EngineControls>> _ReverseDirection757602046 =
				new System.Lazy<MethodAccessor<EngineControls>>(() => MethodAccessor<EngineControls>.Create("ReverseDirection"));
		private static readonly System.Lazy<MethodAccessor<EngineControls>> _InvertPower757602046 =
				new System.Lazy<MethodAccessor<EngineControls>>(() => MethodAccessor<EngineControls>.Create("InvertPower"));
		private static readonly System.Lazy<MethodAccessor<EngineControls>> _ToggleRemoteAnchorsNetworked757602046 =
				new System.Lazy<MethodAccessor<EngineControls>>(() => MethodAccessor<EngineControls>.Create("ToggleRemoteAnchorsNetworked"));
		private static readonly System.Lazy<MethodAccessor<EngineControls>> _SetAnchorState3450040886 =
				new System.Lazy<MethodAccessor<EngineControls>>(() => MethodAccessor<EngineControls>.Create("SetAnchorState", typeof(bool)));

		public static void OnDestroy(this EngineControls __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void SetStateAnchorDownStateToAnchors(this EngineControls __self) => _SetStateAnchorDownStateToAnchors757602046.Value.Invoke(__self);
		public static void ReverseDirection(this EngineControls __self) => _ReverseDirection757602046.Value.Invoke(__self);
		public static void InvertPower(this EngineControls __self) => _InvertPower757602046.Value.Invoke(__self);
		public static void ToggleRemoteAnchorsNetworked(this EngineControls __self) => _ToggleRemoteAnchorsNetworked757602046.Value.Invoke(__self);
		public static void SetAnchorState(this EngineControls __self, bool state) => _SetAnchorState3450040886.Value.Invoke(__self, state);

	}

	public static class PrivateAccessor_FillContainerComponent
	{

		private static readonly System.Lazy<FieldAccessor<FillContainerComponent, Axis>> _axisToMove =
				new System.Lazy<FieldAccessor<FillContainerComponent, Axis>>(() => FieldAccessor<FillContainerComponent, Axis>.Create("axisToMove"));
		private static readonly System.Lazy<FieldAccessor<FillContainerComponent, UnityEngine.Transform>> _transformToMove =
				new System.Lazy<FieldAccessor<FillContainerComponent, UnityEngine.Transform>>(() => FieldAccessor<FillContainerComponent, UnityEngine.Transform>.Create("transformToMove"));
		private static readonly System.Lazy<FieldAccessor<FillContainerComponent, Interval_Float>> _localAxisValueInterval =
				new System.Lazy<FieldAccessor<FillContainerComponent, Interval_Float>>(() => FieldAccessor<FillContainerComponent, Interval_Float>.Create("localAxisValueInterval"));
		private static readonly System.Lazy<FieldAccessor<FillContainerComponent, float>> _moveTowardsSpeed =
				new System.Lazy<FieldAccessor<FillContainerComponent, float>>(() => FieldAccessor<FillContainerComponent, float>.Create("moveTowardsSpeed"));
		private static readonly System.Lazy<FieldAccessor<FillContainerComponent, bool>> _disableObjectAtZero =
				new System.Lazy<FieldAccessor<FillContainerComponent, bool>>(() => FieldAccessor<FillContainerComponent, bool>.Create("disableObjectAtZero"));
		private static readonly System.Lazy<FieldAccessor<FillContainerComponent, float>> _startValue =
				new System.Lazy<FieldAccessor<FillContainerComponent, float>>(() => FieldAccessor<FillContainerComponent, float>.Create("startValue"));
		private static readonly System.Lazy<FieldAccessor<FillContainerComponent, float>> _currentNormalizedValue =
				new System.Lazy<FieldAccessor<FillContainerComponent, float>>(() => FieldAccessor<FillContainerComponent, float>.Create("currentNormalizedValue"));

		public static Axis GetAxisToMove(this FillContainerComponent __self) => _axisToMove.Value.GetValue(__self);
		public static void SetAxisToMove(this FillContainerComponent __self, Axis value) => _axisToMove.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetTransformToMove(this FillContainerComponent __self) => _transformToMove.Value.GetValue(__self);
		public static void SetTransformToMove(this FillContainerComponent __self, UnityEngine.Transform value) => _transformToMove.Value.SetValue(__self, value);
		public static Interval_Float GetLocalAxisValueInterval(this FillContainerComponent __self) => _localAxisValueInterval.Value.GetValue(__self);
		public static void SetLocalAxisValueInterval(this FillContainerComponent __self, Interval_Float value) => _localAxisValueInterval.Value.SetValue(__self, value);
		public static float GetMoveTowardsSpeed(this FillContainerComponent __self) => _moveTowardsSpeed.Value.GetValue(__self);
		public static void SetMoveTowardsSpeed(this FillContainerComponent __self, float value) => _moveTowardsSpeed.Value.SetValue(__self, value);
		public static bool GetDisableObjectAtZero(this FillContainerComponent __self) => _disableObjectAtZero.Value.GetValue(__self);
		public static void SetDisableObjectAtZero(this FillContainerComponent __self, bool value) => _disableObjectAtZero.Value.SetValue(__self, value);
		public static float GetStartValue(this FillContainerComponent __self) => _startValue.Value.GetValue(__self);
		public static void SetStartValue(this FillContainerComponent __self, float value) => _startValue.Value.SetValue(__self, value);
		public static float GetCurrentNormalizedValue(this FillContainerComponent __self) => _currentNormalizedValue.Value.GetValue(__self);
		public static void SetCurrentNormalizedValue(this FillContainerComponent __self, float value) => _currentNormalizedValue.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<FillContainerComponent>> _OnEnable757602046 =
				new System.Lazy<MethodAccessor<FillContainerComponent>>(() => MethodAccessor<FillContainerComponent>.Create("OnEnable"));
		private static readonly System.Lazy<MethodAccessor<FillContainerComponent>> _OnValidate757602046 =
				new System.Lazy<MethodAccessor<FillContainerComponent>>(() => MethodAccessor<FillContainerComponent>.Create("OnValidate"));
		private static readonly System.Lazy<MethodAccessor<FillContainerComponent>> _SetYPositionCoroutine3486905475 =
				new System.Lazy<MethodAccessor<FillContainerComponent>>(() => MethodAccessor<FillContainerComponent>.Create("SetYPositionCoroutine", typeof(float)));
		private static readonly System.Lazy<MethodAccessor<FillContainerComponent>> _SetYPosition3486905475 =
				new System.Lazy<MethodAccessor<FillContainerComponent>>(() => MethodAccessor<FillContainerComponent>.Create("SetYPosition", typeof(float)));

		public static void OnEnable(this FillContainerComponent __self) => _OnEnable757602046.Value.Invoke(__self);
		public static void OnValidate(this FillContainerComponent __self) => _OnValidate757602046.Value.Invoke(__self);
		public static System.Collections.IEnumerator SetYPositionCoroutine(this FillContainerComponent __self, float normalizedValue) => (System.Collections.IEnumerator)_SetYPositionCoroutine3486905475.Value.Invoke(__self, normalizedValue);
		public static void SetYPosition(this FillContainerComponent __self, float normalizedValue) => _SetYPosition3486905475.Value.Invoke(__self, normalizedValue);

	}

	public static class PrivateAccessor_FoundationArmor
	{

		private static readonly System.Lazy<FieldAccessor<FoundationArmor, string>> _eventRef_reinforce =
				new System.Lazy<FieldAccessor<FoundationArmor, string>>(() => FieldAccessor<FoundationArmor, string>.Create("eventRef_reinforce"));

		public static string GetEventRef_reinforce(this FoundationArmor __self) => _eventRef_reinforce.Value.GetValue(__self);
		public static void SetEventRef_reinforce(this FoundationArmor __self, string value) => _eventRef_reinforce.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_FoundationCounter
	{

		private static readonly System.Lazy<FieldAccessor<FoundationCounter, UnityEngine.Transform[]>> _wheels =
				new System.Lazy<FieldAccessor<FoundationCounter, UnityEngine.Transform[]>>(() => FieldAccessor<FoundationCounter, UnityEngine.Transform[]>.Create("wheels"));
		private static readonly System.Lazy<FieldAccessor<FoundationCounter, float>> _turnTime =
				new System.Lazy<FieldAccessor<FoundationCounter, float>>(() => FieldAccessor<FoundationCounter, float>.Create("turnTime"));
		private static readonly System.Lazy<FieldAccessor<FoundationCounter, bool>> _hasBeenPlaced =
				new System.Lazy<FieldAccessor<FoundationCounter, bool>>(() => FieldAccessor<FoundationCounter, bool>.Create("hasBeenPlaced"));
		private static readonly System.Lazy<FieldAccessor<FoundationCounter, System.Collections.Generic.List<UnityEngine.Coroutine>>> _coroutines =
				new System.Lazy<FieldAccessor<FoundationCounter, System.Collections.Generic.List<UnityEngine.Coroutine>>>(() => FieldAccessor<FoundationCounter, System.Collections.Generic.List<UnityEngine.Coroutine>>.Create("coroutines"));

		public static UnityEngine.Transform[] GetWheels(this FoundationCounter __self) => _wheels.Value.GetValue(__self);
		public static void SetWheels(this FoundationCounter __self, UnityEngine.Transform[] value) => _wheels.Value.SetValue(__self, value);
		public static float GetTurnTime(this FoundationCounter __self) => _turnTime.Value.GetValue(__self);
		public static void SetTurnTime(this FoundationCounter __self, float value) => _turnTime.Value.SetValue(__self, value);
		public static bool GetHasBeenPlaced(this FoundationCounter __self) => _hasBeenPlaced.Value.GetValue(__self);
		public static void SetHasBeenPlaced(this FoundationCounter __self, bool value) => _hasBeenPlaced.Value.SetValue(__self, value);
		public static System.Collections.Generic.List<UnityEngine.Coroutine> GetCoroutines(this FoundationCounter __self) => _coroutines.Value.GetValue(__self);
		public static void SetCoroutines(this FoundationCounter __self, System.Collections.Generic.List<UnityEngine.Coroutine> value) => _coroutines.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<FoundationCounter>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<FoundationCounter>>(() => MethodAccessor<FoundationCounter>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<FoundationCounter>> _RefreshCount3486186818 =
				new System.Lazy<MethodAccessor<FoundationCounter>>(() => MethodAccessor<FoundationCounter>.Create("RefreshCount", typeof(int)));
		private static readonly System.Lazy<MethodAccessor<FoundationCounter>> _SetWheel1215742486 =
				new System.Lazy<MethodAccessor<FoundationCounter>>(() => MethodAccessor<FoundationCounter>.Create("SetWheel", typeof(int), typeof(int)));
		private static readonly System.Lazy<MethodAccessor<FoundationCounter>> _TurnWheelToAngle3648264468 =
				new System.Lazy<MethodAccessor<FoundationCounter>>(() => MethodAccessor<FoundationCounter>.Create("TurnWheelToAngle", typeof(UnityEngine.Transform), typeof(float)));
		private static readonly System.Lazy<MethodAccessor<FoundationCounter>> _ClearRoutines757602046 =
				new System.Lazy<MethodAccessor<FoundationCounter>>(() => MethodAccessor<FoundationCounter>.Create("ClearRoutines"));

		public static void OnDestroy(this FoundationCounter __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void RefreshCount(this FoundationCounter __self, int newCount) => _RefreshCount3486186818.Value.Invoke(__self, newCount);
		public static void SetWheel(this FoundationCounter __self, int wheelIndex, int number) => _SetWheel1215742486.Value.Invoke(__self, wheelIndex, number);
		public static System.Collections.IEnumerator TurnWheelToAngle(this FoundationCounter __self, UnityEngine.Transform wheel, float targetAngle) => (System.Collections.IEnumerator)_TurnWheelToAngle3648264468.Value.Invoke(__self, wheel, targetAngle);
		public static void ClearRoutines(this FoundationCounter __self) => _ClearRoutines757602046.Value.Invoke(__self);

	}

	public static class Private_FoundationCounter
	{

		private static readonly System.Lazy<StaticFieldAccessor<RaftBounds>> _bounds =
				new System.Lazy<StaticFieldAccessor<RaftBounds>>(() => StaticFieldAccessor<RaftBounds>.Create(typeof(FoundationCounter), "bounds"));

		public static RaftBounds GetBounds() => _bounds.Value.GetValue();
		public static void SetBounds(RaftBounds value) => _bounds.Value.SetValue(value);

	}

	public static class PrivateAccessor_Fuel
	{

		private static readonly System.Lazy<FieldAccessor<Fuel, float>> _burnTimePerFuel =
				new System.Lazy<FieldAccessor<Fuel, float>>(() => FieldAccessor<Fuel, float>.Create("burnTimePerFuel"));
		private static readonly System.Lazy<FieldAccessor<Fuel, int>> _maxFuel =
				new System.Lazy<FieldAccessor<Fuel, int>>(() => FieldAccessor<Fuel, int>.Create("maxFuel"));
		private static readonly System.Lazy<FieldAccessor<Fuel, System.Collections.Generic.List<UnityEngine.GameObject>>> _fuelModels =
				new System.Lazy<FieldAccessor<Fuel, System.Collections.Generic.List<UnityEngine.GameObject>>>(() => FieldAccessor<Fuel, System.Collections.Generic.List<UnityEngine.GameObject>>.Create("fuelModels"));
		private static readonly System.Lazy<FieldAccessor<Fuel, UnityEngine.ParticleSystem>> _particleSystem =
				new System.Lazy<FieldAccessor<Fuel, UnityEngine.ParticleSystem>>(() => FieldAccessor<Fuel, UnityEngine.ParticleSystem>.Create("particleSystem"));
		private static readonly System.Lazy<FieldAccessor<Fuel, ParticleController>> _particleController =
				new System.Lazy<FieldAccessor<Fuel, ParticleController>>(() => FieldAccessor<Fuel, ParticleController>.Create("particleController"));
		private static readonly System.Lazy<FieldAccessor<Fuel, FMODUnity.StudioEventEmitter>> _eventEmitter =
				new System.Lazy<FieldAccessor<Fuel, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<Fuel, FMODUnity.StudioEventEmitter>.Create("eventEmitter"));
		private static readonly System.Lazy<FieldAccessor<Fuel, int>> _fuelCount =
				new System.Lazy<FieldAccessor<Fuel, int>>(() => FieldAccessor<Fuel, int>.Create("fuelCount"));
		private static readonly System.Lazy<FieldAccessor<Fuel, bool>> _burningFuel =
				new System.Lazy<FieldAccessor<Fuel, bool>>(() => FieldAccessor<Fuel, bool>.Create("burningFuel"));
		private static readonly System.Lazy<FieldAccessor<Fuel, float>> _burnTimer =
				new System.Lazy<FieldAccessor<Fuel, float>>(() => FieldAccessor<Fuel, float>.Create("burnTimer"));

		public static float GetBurnTimePerFuel(this Fuel __self) => _burnTimePerFuel.Value.GetValue(__self);
		public static void SetBurnTimePerFuel(this Fuel __self, float value) => _burnTimePerFuel.Value.SetValue(__self, value);
		public static int GetMaxFuel(this Fuel __self) => _maxFuel.Value.GetValue(__self);
		public static void SetMaxFuel(this Fuel __self, int value) => _maxFuel.Value.SetValue(__self, value);
		public static System.Collections.Generic.List<UnityEngine.GameObject> GetFuelModels(this Fuel __self) => _fuelModels.Value.GetValue(__self);
		public static void SetFuelModels(this Fuel __self, System.Collections.Generic.List<UnityEngine.GameObject> value) => _fuelModels.Value.SetValue(__self, value);
		public static UnityEngine.ParticleSystem GetParticleSystem(this Fuel __self) => _particleSystem.Value.GetValue(__self);
		public static void SetParticleSystem(this Fuel __self, UnityEngine.ParticleSystem value) => _particleSystem.Value.SetValue(__self, value);
		public static ParticleController GetParticleController(this Fuel __self) => _particleController.Value.GetValue(__self);
		public static void SetParticleController(this Fuel __self, ParticleController value) => _particleController.Value.SetValue(__self, value);
		public static FMODUnity.StudioEventEmitter GetEventEmitter(this Fuel __self) => _eventEmitter.Value.GetValue(__self);
		public static void SetEventEmitter(this Fuel __self, FMODUnity.StudioEventEmitter value) => _eventEmitter.Value.SetValue(__self, value);
		public static int GetFuelCount(this Fuel __self) => _fuelCount.Value.GetValue(__self);
		public static void SetFuelCount(this Fuel __self, int value) => _fuelCount.Value.SetValue(__self, value);
		public static bool GetBurningFuel(this Fuel __self) => _burningFuel.Value.GetValue(__self);
		public static void SetBurningFuel(this Fuel __self, bool value) => _burningFuel.Value.SetValue(__self, value);
		public static float GetBurnTimer(this Fuel __self) => _burnTimer.Value.GetValue(__self);
		public static void SetBurnTimer(this Fuel __self, float value) => _burnTimer.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Fuel>> _Awake757602046 =
				new System.Lazy<MethodAccessor<Fuel>>(() => MethodAccessor<Fuel>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<Fuel>> _OnValidate757602046 =
				new System.Lazy<MethodAccessor<Fuel>>(() => MethodAccessor<Fuel>.Create("OnValidate"));
		private static readonly System.Lazy<MethodAccessor<Fuel>> _RefreshFuelModels757602046 =
				new System.Lazy<MethodAccessor<Fuel>>(() => MethodAccessor<Fuel>.Create("RefreshFuelModels"));

		public static void Awake(this Fuel __self) => _Awake757602046.Value.Invoke(__self);
		public static void OnValidate(this Fuel __self) => _OnValidate757602046.Value.Invoke(__self);
		public static void RefreshFuelModels(this Fuel __self) => _RefreshFuelModels757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_FuelNetwork
	{

		private static readonly System.Lazy<FieldAccessor<FuelNetwork, MonoBehaviour_ID>> _reciever =
				new System.Lazy<FieldAccessor<FuelNetwork, MonoBehaviour_ID>>(() => FieldAccessor<FuelNetwork, MonoBehaviour_ID>.Create("reciever"));
		private static readonly System.Lazy<FieldAccessor<FuelNetwork, Fuel>> _fuel =
				new System.Lazy<FieldAccessor<FuelNetwork, Fuel>>(() => FieldAccessor<FuelNetwork, Fuel>.Create("fuel"));
		private static readonly System.Lazy<FieldAccessor<FuelNetwork, Raft_Network>> _network =
				new System.Lazy<FieldAccessor<FuelNetwork, Raft_Network>>(() => FieldAccessor<FuelNetwork, Raft_Network>.Create("network"));
		private static readonly System.Lazy<FieldAccessor<FuelNetwork, Network_Player>> _localPlayer =
				new System.Lazy<FieldAccessor<FuelNetwork, Network_Player>>(() => FieldAccessor<FuelNetwork, Network_Player>.Create("localPlayer"));
		private static readonly System.Lazy<FieldAccessor<FuelNetwork, DisplayTextManager>> _displayText =
				new System.Lazy<FieldAccessor<FuelNetwork, DisplayTextManager>>(() => FieldAccessor<FuelNetwork, DisplayTextManager>.Create("displayText"));

		public static MonoBehaviour_ID GetReciever(this FuelNetwork __self) => _reciever.Value.GetValue(__self);
		public static void SetReciever(this FuelNetwork __self, MonoBehaviour_ID value) => _reciever.Value.SetValue(__self, value);
		public static Fuel GetFuel(this FuelNetwork __self) => _fuel.Value.GetValue(__self);
		public static void SetFuel(this FuelNetwork __self, Fuel value) => _fuel.Value.SetValue(__self, value);
		public static Raft_Network GetNetwork(this FuelNetwork __self) => _network.Value.GetValue(__self);
		public static void SetNetwork(this FuelNetwork __self, Raft_Network value) => _network.Value.SetValue(__self, value);
		public static Network_Player GetLocalPlayer(this FuelNetwork __self) => _localPlayer.Value.GetValue(__self);
		public static void SetLocalPlayer(this FuelNetwork __self, Network_Player value) => _localPlayer.Value.SetValue(__self, value);
		public static DisplayTextManager GetDisplayText(this FuelNetwork __self) => _displayText.Value.GetValue(__self);
		public static void SetDisplayText(this FuelNetwork __self, DisplayTextManager value) => _displayText.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<FuelNetwork>> _Awake757602046 =
				new System.Lazy<MethodAccessor<FuelNetwork>>(() => MethodAccessor<FuelNetwork>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<FuelNetwork>> _Start757602046 =
				new System.Lazy<MethodAccessor<FuelNetwork>>(() => MethodAccessor<FuelNetwork>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<FuelNetwork>> _OnFuelRemoved757602046 =
				new System.Lazy<MethodAccessor<FuelNetwork>>(() => MethodAccessor<FuelNetwork>.Create("OnFuelRemoved"));
		private static readonly System.Lazy<MethodAccessor<FuelNetwork>> _AddFuel1191434327 =
				new System.Lazy<MethodAccessor<FuelNetwork>>(() => MethodAccessor<FuelNetwork>.Create("AddFuel", typeof(Network_Player), typeof(int)));

		public static void Awake(this FuelNetwork __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this FuelNetwork __self) => _Start757602046.Value.Invoke(__self);
		public static void OnFuelRemoved(this FuelNetwork __self) => _OnFuelRemoved757602046.Value.Invoke(__self);
		public static bool AddFuel(this FuelNetwork __self, Network_Player player, int incrementAmount) => (bool)_AddFuel1191434327.Value.Invoke(__self, player, incrementAmount);

	}

	public static class PrivateAccessor_LiquidFuelManager
	{

		private static readonly System.Lazy<MethodAccessor<LiquidFuelManager>> _Awake757602046 =
				new System.Lazy<MethodAccessor<LiquidFuelManager>>(() => MethodAccessor<LiquidFuelManager>.Create("Awake"));

		public static void Awake(this LiquidFuelManager __self) => _Awake757602046.Value.Invoke(__self);

	}

	public static class Private_LiquidFuelManager
	{

		private static readonly System.Lazy<StaticFieldAccessor<System.Collections.Generic.Dictionary<FuelValue_FiltrationType, System.Collections.Generic.List<SO_FuelValue>>>> _fuelValueDictionary =
				new System.Lazy<StaticFieldAccessor<System.Collections.Generic.Dictionary<FuelValue_FiltrationType, System.Collections.Generic.List<SO_FuelValue>>>>(() => StaticFieldAccessor<System.Collections.Generic.Dictionary<FuelValue_FiltrationType, System.Collections.Generic.List<SO_FuelValue>>>.Create(typeof(LiquidFuelManager), "fuelValueDictionary"));
		private static readonly System.Lazy<StaticFieldAccessor<bool>> _initialized =
				new System.Lazy<StaticFieldAccessor<bool>>(() => StaticFieldAccessor<bool>.Create(typeof(LiquidFuelManager), "initialized"));

		public static System.Collections.Generic.Dictionary<FuelValue_FiltrationType, System.Collections.Generic.List<SO_FuelValue>> GetFuelValueDictionary() => _fuelValueDictionary.Value.GetValue();
		public static void SetFuelValueDictionary(System.Collections.Generic.Dictionary<FuelValue_FiltrationType, System.Collections.Generic.List<SO_FuelValue>> value) => _fuelValueDictionary.Value.SetValue(value);
		public static bool GetInitialized() => _initialized.Value.GetValue();
		public static void SetInitialized(bool value) => _initialized.Value.SetValue(value);

	}

	public static class PrivateAccessor_Gauge
	{

		private static readonly System.Lazy<FieldAccessor<Gauge, UnityEngine.Transform>> _fuelGaugeMeter =
				new System.Lazy<FieldAccessor<Gauge, UnityEngine.Transform>>(() => FieldAccessor<Gauge, UnityEngine.Transform>.Create("fuelGaugeMeter"));
		private static readonly System.Lazy<FieldAccessor<Gauge, float>> _pointerMinAngle =
				new System.Lazy<FieldAccessor<Gauge, float>>(() => FieldAccessor<Gauge, float>.Create("pointerMinAngle"));
		private static readonly System.Lazy<FieldAccessor<Gauge, float>> _pointerMaxAngle =
				new System.Lazy<FieldAccessor<Gauge, float>>(() => FieldAccessor<Gauge, float>.Create("pointerMaxAngle"));
		private static readonly System.Lazy<FieldAccessor<Gauge, Axis>> _rotationAxis =
				new System.Lazy<FieldAccessor<Gauge, Axis>>(() => FieldAccessor<Gauge, Axis>.Create("rotationAxis"));
		private static readonly System.Lazy<FieldAccessor<Gauge, float>> _fuelGaugeTargetAngle =
				new System.Lazy<FieldAccessor<Gauge, float>>(() => FieldAccessor<Gauge, float>.Create("fuelGaugeTargetAngle"));
		private static readonly System.Lazy<FieldAccessor<Gauge, float>> _fuelGaugeCurrentAngle =
				new System.Lazy<FieldAccessor<Gauge, float>>(() => FieldAccessor<Gauge, float>.Create("fuelGaugeCurrentAngle"));
		private static readonly System.Lazy<FieldAccessor<Gauge, UnityEngine.Vector3>> _startAngle =
				new System.Lazy<FieldAccessor<Gauge, UnityEngine.Vector3>>(() => FieldAccessor<Gauge, UnityEngine.Vector3>.Create("startAngle"));

		public static UnityEngine.Transform GetFuelGaugeMeter(this Gauge __self) => _fuelGaugeMeter.Value.GetValue(__self);
		public static void SetFuelGaugeMeter(this Gauge __self, UnityEngine.Transform value) => _fuelGaugeMeter.Value.SetValue(__self, value);
		public static float GetPointerMinAngle(this Gauge __self) => _pointerMinAngle.Value.GetValue(__self);
		public static void SetPointerMinAngle(this Gauge __self, float value) => _pointerMinAngle.Value.SetValue(__self, value);
		public static float GetPointerMaxAngle(this Gauge __self) => _pointerMaxAngle.Value.GetValue(__self);
		public static void SetPointerMaxAngle(this Gauge __self, float value) => _pointerMaxAngle.Value.SetValue(__self, value);
		public static Axis GetRotationAxis(this Gauge __self) => _rotationAxis.Value.GetValue(__self);
		public static void SetRotationAxis(this Gauge __self, Axis value) => _rotationAxis.Value.SetValue(__self, value);
		public static float GetFuelGaugeTargetAngle(this Gauge __self) => _fuelGaugeTargetAngle.Value.GetValue(__self);
		public static void SetFuelGaugeTargetAngle(this Gauge __self, float value) => _fuelGaugeTargetAngle.Value.SetValue(__self, value);
		public static float GetFuelGaugeCurrentAngle(this Gauge __self) => _fuelGaugeCurrentAngle.Value.GetValue(__self);
		public static void SetFuelGaugeCurrentAngle(this Gauge __self, float value) => _fuelGaugeCurrentAngle.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetStartAngle(this Gauge __self) => _startAngle.Value.GetValue(__self);
		public static void SetStartAngle(this Gauge __self, UnityEngine.Vector3 value) => _startAngle.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Gauge>> _Awake757602046 =
				new System.Lazy<MethodAccessor<Gauge>>(() => MethodAccessor<Gauge>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<Gauge>> _LateUpdate757602046 =
				new System.Lazy<MethodAccessor<Gauge>>(() => MethodAccessor<Gauge>.Create("LateUpdate"));
		private static readonly System.Lazy<MethodAccessor<Gauge>> _LerpGauge757602046 =
				new System.Lazy<MethodAccessor<Gauge>>(() => MethodAccessor<Gauge>.Create("LerpGauge"));

		public static void Awake(this Gauge __self) => _Awake757602046.Value.Invoke(__self);
		public static void LateUpdate(this Gauge __self) => _LateUpdate757602046.Value.Invoke(__self);
		public static void LerpGauge(this Gauge __self) => _LerpGauge757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_GizmoBox
	{

		private static readonly System.Lazy<MethodAccessor<GizmoBox>> _OnDrawGizmosSelected757602046 =
				new System.Lazy<MethodAccessor<GizmoBox>>(() => MethodAccessor<GizmoBox>.Create("OnDrawGizmosSelected"));

		public static void OnDrawGizmosSelected(this GizmoBox __self) => _OnDrawGizmosSelected757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_GizmoBoxConverter
	{

		private static readonly System.Lazy<MethodAccessor<GizmoBoxConverter>> _Start757602046 =
				new System.Lazy<MethodAccessor<GizmoBoxConverter>>(() => MethodAccessor<GizmoBoxConverter>.Create("Start"));

		public static void Start(this GizmoBoxConverter __self) => _Start757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_GizmoBox_Center
	{

		private static readonly System.Lazy<MethodAccessor<GizmoBox_Center>> _OnDrawGizmosSelected757602046 =
				new System.Lazy<MethodAccessor<GizmoBox_Center>>(() => MethodAccessor<GizmoBox_Center>.Create("OnDrawGizmosSelected"));

		public static void OnDrawGizmosSelected(this GizmoBox_Center __self) => _OnDrawGizmosSelected757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Grill
	{

		private static readonly System.Lazy<FieldAccessor<Grill, UnityEngine.Animator>> _anim =
				new System.Lazy<FieldAccessor<Grill, UnityEngine.Animator>>(() => FieldAccessor<Grill, UnityEngine.Animator>.Create("anim"));
		private static readonly System.Lazy<FieldAccessor<Grill, Block_CookingStand>> _cookingStand =
				new System.Lazy<FieldAccessor<Grill, Block_CookingStand>>(() => FieldAccessor<Grill, Block_CookingStand>.Create("cookingStand"));

		public static UnityEngine.Animator GetAnim(this Grill __self) => _anim.Value.GetValue(__self);
		public static void SetAnim(this Grill __self, UnityEngine.Animator value) => _anim.Value.SetValue(__self, value);
		public static Block_CookingStand GetCookingStand(this Grill __self) => _cookingStand.Value.GetValue(__self);
		public static void SetCookingStand(this Grill __self, Block_CookingStand value) => _cookingStand.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Grill>> _OnMouseEnter757602046 =
				new System.Lazy<MethodAccessor<Grill>>(() => MethodAccessor<Grill>.Create("OnMouseEnter"));
		private static readonly System.Lazy<MethodAccessor<Grill>> _OnMouseExit757602046 =
				new System.Lazy<MethodAccessor<Grill>>(() => MethodAccessor<Grill>.Create("OnMouseExit"));

		public static void OnMouseEnter(this Grill __self) => _OnMouseEnter757602046.Value.Invoke(__self);
		public static void OnMouseExit(this Grill __self) => _OnMouseExit757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_HandHeld_Radio
	{

		private static readonly System.Lazy<FieldAccessor<HandHeld_Radio, UnityEngine.Coroutine>> _radioStop =
				new System.Lazy<FieldAccessor<HandHeld_Radio, UnityEngine.Coroutine>>(() => FieldAccessor<HandHeld_Radio, UnityEngine.Coroutine>.Create("radioStop"));

		public static UnityEngine.Coroutine GetRadioStop(this HandHeld_Radio __self) => _radioStop.Value.GetValue(__self);
		public static void SetRadioStop(this HandHeld_Radio __self, UnityEngine.Coroutine value) => _radioStop.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<HandHeld_Radio>> _StopRadio3486905475 =
				new System.Lazy<MethodAccessor<HandHeld_Radio>>(() => MethodAccessor<HandHeld_Radio>.Create("StopRadio", typeof(float)));

		public static System.Collections.IEnumerator StopRadio(this HandHeld_Radio __self, float waitTime) => (System.Collections.IEnumerator)_StopRadio3486905475.Value.Invoke(__self, waitTime);

	}

	public static class PrivateAccessor_InteractableButton
	{

		private static readonly System.Lazy<FieldAccessor<InteractableButton, string>> _keybindName =
				new System.Lazy<FieldAccessor<InteractableButton, string>>(() => FieldAccessor<InteractableButton, string>.Create("keybindName"));
		private static readonly System.Lazy<FieldAccessor<InteractableButton, UnityEngine.Animator>> _animator =
				new System.Lazy<FieldAccessor<InteractableButton, UnityEngine.Animator>>(() => FieldAccessor<InteractableButton, UnityEngine.Animator>.Create("animator"));
		private static readonly System.Lazy<FieldAccessor<InteractableButton, string>> _triggerParameter =
				new System.Lazy<FieldAccessor<InteractableButton, string>>(() => FieldAccessor<InteractableButton, string>.Create("triggerParameter"));
		private static readonly System.Lazy<FieldAccessor<InteractableButton, string>> _eventRef_Click =
				new System.Lazy<FieldAccessor<InteractableButton, string>>(() => FieldAccessor<InteractableButton, string>.Create("eventRef_Click"));
		private static readonly System.Lazy<FieldAccessor<InteractableButton, string>> _eventRef_FailClick =
				new System.Lazy<FieldAccessor<InteractableButton, string>>(() => FieldAccessor<InteractableButton, string>.Create("eventRef_FailClick"));

		public static string GetKeybindName(this InteractableButton __self) => _keybindName.Value.GetValue(__self);
		public static void SetKeybindName(this InteractableButton __self, string value) => _keybindName.Value.SetValue(__self, value);
		public static UnityEngine.Animator GetAnimator(this InteractableButton __self) => _animator.Value.GetValue(__self);
		public static void SetAnimator(this InteractableButton __self, UnityEngine.Animator value) => _animator.Value.SetValue(__self, value);
		public static string GetTriggerParameter(this InteractableButton __self) => _triggerParameter.Value.GetValue(__self);
		public static void SetTriggerParameter(this InteractableButton __self, string value) => _triggerParameter.Value.SetValue(__self, value);
		public static string GetEventRef_Click(this InteractableButton __self) => _eventRef_Click.Value.GetValue(__self);
		public static void SetEventRef_Click(this InteractableButton __self, string value) => _eventRef_Click.Value.SetValue(__self, value);
		public static string GetEventRef_FailClick(this InteractableButton __self) => _eventRef_FailClick.Value.GetValue(__self);
		public static void SetEventRef_FailClick(this InteractableButton __self, string value) => _eventRef_FailClick.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<InteractableButton>> _Start757602046 =
				new System.Lazy<MethodAccessor<InteractableButton>>(() => MethodAccessor<InteractableButton>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<InteractableButton>> _HasValidKeybindName757602046 =
				new System.Lazy<MethodAccessor<InteractableButton>>(() => MethodAccessor<InteractableButton>.Create("HasValidKeybindName"));
		private static readonly System.Lazy<MethodAccessor<InteractableButton>> _OnInspectorGUILocalizationTerm757602046 =
				new System.Lazy<MethodAccessor<InteractableButton>>(() => MethodAccessor<InteractableButton>.Create("OnInspectorGUILocalizationTerm"));
		private static readonly System.Lazy<MethodAccessor<InteractableButton>> _HandleOnIsRayed757602046 =
				new System.Lazy<MethodAccessor<InteractableButton>>(() => MethodAccessor<InteractableButton>.Create("HandleOnIsRayed"));
		private static readonly System.Lazy<MethodAccessor<InteractableButton>> _ShowOnHoverText2054215474 =
				new System.Lazy<MethodAccessor<InteractableButton>>(() => MethodAccessor<InteractableButton>.Create("ShowOnHoverText", typeof(string), typeof(string)));
		private static readonly System.Lazy<MethodAccessor<InteractableButton>> _ButtonPressed757602046 =
				new System.Lazy<MethodAccessor<InteractableButton>>(() => MethodAccessor<InteractableButton>.Create("ButtonPressed"));
		private static readonly System.Lazy<MethodAccessor<InteractableButton>> _CanButtonBePressed757602046 =
				new System.Lazy<MethodAccessor<InteractableButton>>(() => MethodAccessor<InteractableButton>.Create("CanButtonBePressed"));
		private static readonly System.Lazy<MethodAccessor<InteractableButton>> _PlayAnimation757602046 =
				new System.Lazy<MethodAccessor<InteractableButton>>(() => MethodAccessor<InteractableButton>.Create("PlayAnimation"));

		public static void Start(this InteractableButton __self) => _Start757602046.Value.Invoke(__self);
		public static bool HasValidKeybindName(this InteractableButton __self) => (bool)_HasValidKeybindName757602046.Value.Invoke(__self);
		public static void OnInspectorGUILocalizationTerm(this InteractableButton __self) => _OnInspectorGUILocalizationTerm757602046.Value.Invoke(__self);
		public static void HandleOnIsRayed(this InteractableButton __self) => _HandleOnIsRayed757602046.Value.Invoke(__self);
		public static void ShowOnHoverText(this InteractableButton __self, string p_localizationTerm, string p_keybindName) => _ShowOnHoverText2054215474.Value.Invoke(__self, p_localizationTerm, p_keybindName);
		public static bool ButtonPressed(this InteractableButton __self) => (bool)_ButtonPressed757602046.Value.Invoke(__self);
		public static bool CanButtonBePressed(this InteractableButton __self) => (bool)_CanButtonBePressed757602046.Value.Invoke(__self);
		public static void PlayAnimation(this InteractableButton __self) => _PlayAnimation757602046.Value.Invoke(__self);

	}

	public static class Private_InteractableButton
	{

		private static readonly System.Lazy<StaticFieldAccessor<DisplayTextManager>> _displayTextManager =
				new System.Lazy<StaticFieldAccessor<DisplayTextManager>>(() => StaticFieldAccessor<DisplayTextManager>.Create(typeof(InteractableButton), "displayTextManager"));
		private static readonly System.Lazy<StaticFieldAccessor<Network_Player>> _localPlayer =
				new System.Lazy<StaticFieldAccessor<Network_Player>>(() => StaticFieldAccessor<Network_Player>.Create(typeof(InteractableButton), "localPlayer"));

		public static DisplayTextManager GetDisplayTextManager() => _displayTextManager.Value.GetValue();
		public static void SetDisplayTextManager(DisplayTextManager value) => _displayTextManager.Value.SetValue(value);
		public static Network_Player GetLocalPlayer() => _localPlayer.Value.GetValue();
		public static void SetLocalPlayer(Network_Player value) => _localPlayer.Value.SetValue(value);

	}

	public static class PrivateAccessor_InteractableButton_Networked
	{

		private static readonly System.Lazy<FieldAccessor<InteractableButton_Networked, MonoBehaviour_ID_Network>> _messageReciever =
				new System.Lazy<FieldAccessor<InteractableButton_Networked, MonoBehaviour_ID_Network>>(() => FieldAccessor<InteractableButton_Networked, MonoBehaviour_ID_Network>.Create("messageReciever"));

		public static MonoBehaviour_ID_Network GetMessageReciever(this InteractableButton_Networked __self) => _messageReciever.Value.GetValue(__self);
		public static void SetMessageReciever(this InteractableButton_Networked __self, MonoBehaviour_ID_Network value) => _messageReciever.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<InteractableButton_Networked>> _Button_SetName757602046 =
				new System.Lazy<MethodAccessor<InteractableButton_Networked>>(() => MethodAccessor<InteractableButton_Networked>.Create("Button_SetName"));
		private static readonly System.Lazy<MethodAccessor<InteractableButton_Networked>> _ButtonPressed757602046 =
				new System.Lazy<MethodAccessor<InteractableButton_Networked>>(() => MethodAccessor<InteractableButton_Networked>.Create("ButtonPressed"));
		private static readonly System.Lazy<MethodAccessor<InteractableButton_Networked>> _CreateInteractMessage757602046 =
				new System.Lazy<MethodAccessor<InteractableButton_Networked>>(() => MethodAccessor<InteractableButton_Networked>.Create("CreateInteractMessage"));

		public static void Button_SetName(this InteractableButton_Networked __self) => _Button_SetName757602046.Value.Invoke(__self);
		public static bool ButtonPressed(this InteractableButton_Networked __self) => (bool)_ButtonPressed757602046.Value.Invoke(__self);
		public static Message_InteractableButtonPress CreateInteractMessage(this InteractableButton_Networked __self) => (Message_InteractableButtonPress)_CreateInteractMessage757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_InteractableButton_Networked_ClawChallenge
	{

		private static readonly System.Lazy<FieldAccessor<InteractableButton_Networked_ClawChallenge, ClawChallenge>> _clawChallengeRef =
				new System.Lazy<FieldAccessor<InteractableButton_Networked_ClawChallenge, ClawChallenge>>(() => FieldAccessor<InteractableButton_Networked_ClawChallenge, ClawChallenge>.Create("clawChallengeRef"));

		public static ClawChallenge GetClawChallengeRef(this InteractableButton_Networked_ClawChallenge __self) => _clawChallengeRef.Value.GetValue(__self);
		public static void SetClawChallengeRef(this InteractableButton_Networked_ClawChallenge __self, ClawChallenge value) => _clawChallengeRef.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<InteractableButton_Networked_ClawChallenge>> _CanButtonBePressed757602046 =
				new System.Lazy<MethodAccessor<InteractableButton_Networked_ClawChallenge>>(() => MethodAccessor<InteractableButton_Networked_ClawChallenge>.Create("CanButtonBePressed"));

		public static bool CanButtonBePressed(this InteractableButton_Networked_ClawChallenge __self) => (bool)_CanButtonBePressed757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_InteractableButton_Networked_JusticeScale
	{

		private static readonly System.Lazy<MethodAccessor<InteractableButton_Networked_JusticeScale>> _CreateInteractMessage757602046 =
				new System.Lazy<MethodAccessor<InteractableButton_Networked_JusticeScale>>(() => MethodAccessor<InteractableButton_Networked_JusticeScale>.Create("CreateInteractMessage"));

		public static Message_InteractableButtonPress CreateInteractMessage(this InteractableButton_Networked_JusticeScale __self) => (Message_InteractableButtonPress)_CreateInteractMessage757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_InteractableButton_Networked_Placeable
	{

		private static readonly System.Lazy<FieldAccessor<InteractableButton_Networked_Placeable, Placeable_Interactable>> _placeableInteractable =
				new System.Lazy<FieldAccessor<InteractableButton_Networked_Placeable, Placeable_Interactable>>(() => FieldAccessor<InteractableButton_Networked_Placeable, Placeable_Interactable>.Create("placeableInteractable"));

		public static Placeable_Interactable GetPlaceableInteractable(this InteractableButton_Networked_Placeable __self) => _placeableInteractable.Value.GetValue(__self);
		public static void SetPlaceableInteractable(this InteractableButton_Networked_Placeable __self, Placeable_Interactable value) => _placeableInteractable.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<InteractableButton_Networked_Placeable>> _Start757602046 =
				new System.Lazy<MethodAccessor<InteractableButton_Networked_Placeable>>(() => MethodAccessor<InteractableButton_Networked_Placeable>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<InteractableButton_Networked_Placeable>> _ShowOnHoverText2054215474 =
				new System.Lazy<MethodAccessor<InteractableButton_Networked_Placeable>>(() => MethodAccessor<InteractableButton_Networked_Placeable>.Create("ShowOnHoverText", typeof(string), typeof(string)));

		public static void Start(this InteractableButton_Networked_Placeable __self) => _Start757602046.Value.Invoke(__self);
		public static void ShowOnHoverText(this InteractableButton_Networked_Placeable __self, string p_localizationTerm, string p_keybindName) => _ShowOnHoverText2054215474.Value.Invoke(__self, p_localizationTerm, p_keybindName);

	}

	public static class PrivateAccessor_InteractableButton_Networked_RadioCassette
	{

		private static readonly System.Lazy<FieldAccessor<InteractableButton_Networked_RadioCassette, RadioPlayer>> _radio =
				new System.Lazy<FieldAccessor<InteractableButton_Networked_RadioCassette, RadioPlayer>>(() => FieldAccessor<InteractableButton_Networked_RadioCassette, RadioPlayer>.Create("radio"));
		private static readonly System.Lazy<FieldAccessor<InteractableButton_Networked_RadioCassette, string>> _takeCassetteLocalizationTerm =
				new System.Lazy<FieldAccessor<InteractableButton_Networked_RadioCassette, string>>(() => FieldAccessor<InteractableButton_Networked_RadioCassette, string>.Create("takeCassetteLocalizationTerm"));

		public static RadioPlayer GetRadio(this InteractableButton_Networked_RadioCassette __self) => _radio.Value.GetValue(__self);
		public static void SetRadio(this InteractableButton_Networked_RadioCassette __self, RadioPlayer value) => _radio.Value.SetValue(__self, value);
		public static string GetTakeCassetteLocalizationTerm(this InteractableButton_Networked_RadioCassette __self) => _takeCassetteLocalizationTerm.Value.GetValue(__self);
		public static void SetTakeCassetteLocalizationTerm(this InteractableButton_Networked_RadioCassette __self, string value) => _takeCassetteLocalizationTerm.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<InteractableButton_Networked_RadioCassette>> _HandleOnIsRayed757602046 =
				new System.Lazy<MethodAccessor<InteractableButton_Networked_RadioCassette>>(() => MethodAccessor<InteractableButton_Networked_RadioCassette>.Create("HandleOnIsRayed"));
		private static readonly System.Lazy<MethodAccessor<InteractableButton_Networked_RadioCassette>> _ShowOnHoverText2054215474 =
				new System.Lazy<MethodAccessor<InteractableButton_Networked_RadioCassette>>(() => MethodAccessor<InteractableButton_Networked_RadioCassette>.Create("ShowOnHoverText", typeof(string), typeof(string)));
		private static readonly System.Lazy<MethodAccessor<InteractableButton_Networked_RadioCassette>> _CreateInteractMessage757602046 =
				new System.Lazy<MethodAccessor<InteractableButton_Networked_RadioCassette>>(() => MethodAccessor<InteractableButton_Networked_RadioCassette>.Create("CreateInteractMessage"));
		private static readonly System.Lazy<MethodAccessor<InteractableButton_Networked_RadioCassette>> _IsHoldingACassette757602046 =
				new System.Lazy<MethodAccessor<InteractableButton_Networked_RadioCassette>>(() => MethodAccessor<InteractableButton_Networked_RadioCassette>.Create("IsHoldingACassette"));

		public static void HandleOnIsRayed(this InteractableButton_Networked_RadioCassette __self) => _HandleOnIsRayed757602046.Value.Invoke(__self);
		public static void ShowOnHoverText(this InteractableButton_Networked_RadioCassette __self, string p_localizationTerm, string p_keybindName) => _ShowOnHoverText2054215474.Value.Invoke(__self, p_localizationTerm, p_keybindName);
		public static Message_InteractableButtonPress CreateInteractMessage(this InteractableButton_Networked_RadioCassette __self) => (Message_InteractableButtonPress)_CreateInteractMessage757602046.Value.Invoke(__self);
		public static bool IsHoldingACassette(this InteractableButton_Networked_RadioCassette __self) => (bool)_IsHoldingACassette757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_InteractableButton_Networked_TicTacToe
	{

		private static readonly System.Lazy<FieldAccessor<InteractableButton_Networked_TicTacToe, Block_TicTacToe>> _blockTicTacToe =
				new System.Lazy<FieldAccessor<InteractableButton_Networked_TicTacToe, Block_TicTacToe>>(() => FieldAccessor<InteractableButton_Networked_TicTacToe, Block_TicTacToe>.Create("blockTicTacToe"));

		public static Block_TicTacToe GetBlockTicTacToe(this InteractableButton_Networked_TicTacToe __self) => _blockTicTacToe.Value.GetValue(__self);
		public static void SetBlockTicTacToe(this InteractableButton_Networked_TicTacToe __self, Block_TicTacToe value) => _blockTicTacToe.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<InteractableButton_Networked_TicTacToe>> _HandleOnIsRayed757602046 =
				new System.Lazy<MethodAccessor<InteractableButton_Networked_TicTacToe>>(() => MethodAccessor<InteractableButton_Networked_TicTacToe>.Create("HandleOnIsRayed"));
		private static readonly System.Lazy<MethodAccessor<InteractableButton_Networked_TicTacToe>> _ShowOnHoverText2054215474 =
				new System.Lazy<MethodAccessor<InteractableButton_Networked_TicTacToe>>(() => MethodAccessor<InteractableButton_Networked_TicTacToe>.Create("ShowOnHoverText", typeof(string), typeof(string)));

		public static void HandleOnIsRayed(this InteractableButton_Networked_TicTacToe __self) => _HandleOnIsRayed757602046.Value.Invoke(__self);
		public static void ShowOnHoverText(this InteractableButton_Networked_TicTacToe __self, string p_localizationTerm, string p_keybindName) => _ShowOnHoverText2054215474.Value.Invoke(__self, p_localizationTerm, p_keybindName);

	}

	public static class PrivateAccessor_InteractableButton_Tank
	{

		private static readonly System.Lazy<FieldAccessor<InteractableButton_Tank, string>> _tankDoesntHaveEnoughWaterLocTerm =
				new System.Lazy<FieldAccessor<InteractableButton_Tank, string>>(() => FieldAccessor<InteractableButton_Tank, string>.Create("tankDoesntHaveEnoughWaterLocTerm"));

		public static string GetTankDoesntHaveEnoughWaterLocTerm(this InteractableButton_Tank __self) => _tankDoesntHaveEnoughWaterLocTerm.Value.GetValue(__self);
		public static void SetTankDoesntHaveEnoughWaterLocTerm(this InteractableButton_Tank __self, string value) => _tankDoesntHaveEnoughWaterLocTerm.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<InteractableButton_Tank>> _ShowOnHoverText2054215474 =
				new System.Lazy<MethodAccessor<InteractableButton_Tank>>(() => MethodAccessor<InteractableButton_Tank>.Create("ShowOnHoverText", typeof(string), typeof(string)));
		private static readonly System.Lazy<MethodAccessor<InteractableButton_Tank>> _CanButtonBePressed757602046 =
				new System.Lazy<MethodAccessor<InteractableButton_Tank>>(() => MethodAccessor<InteractableButton_Tank>.Create("CanButtonBePressed"));

		public static void ShowOnHoverText(this InteractableButton_Tank __self, string p_localizationTerm, string p_keybindName) => _ShowOnHoverText2054215474.Value.Invoke(__self, p_localizationTerm, p_keybindName);
		public static bool CanButtonBePressed(this InteractableButton_Tank __self) => (bool)_CanButtonBePressed757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_InteractionMotorWheelPowerButton
	{

		private static readonly System.Lazy<FieldAccessor<InteractionMotorWheelPowerButton, string>> _localizationTermMotorWheelTurnOff =
				new System.Lazy<FieldAccessor<InteractionMotorWheelPowerButton, string>>(() => FieldAccessor<InteractionMotorWheelPowerButton, string>.Create("localizationTermMotorWheelTurnOff"));

		public static string GetLocalizationTermMotorWheelTurnOff(this InteractionMotorWheelPowerButton __self) => _localizationTermMotorWheelTurnOff.Value.GetValue(__self);
		public static void SetLocalizationTermMotorWheelTurnOff(this InteractionMotorWheelPowerButton __self, string value) => _localizationTermMotorWheelTurnOff.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<InteractionMotorWheelPowerButton>> _ShowOnHoverText2054215474 =
				new System.Lazy<MethodAccessor<InteractionMotorWheelPowerButton>>(() => MethodAccessor<InteractionMotorWheelPowerButton>.Create("ShowOnHoverText", typeof(string), typeof(string)));

		public static void ShowOnHoverText(this InteractionMotorWheelPowerButton __self, string p_localizationTerm, string p_keybindName) => _ShowOnHoverText2054215474.Value.Invoke(__self, p_localizationTerm, p_keybindName);

	}

	public static class PrivateAccessor_MotorWheel
	{

		private static readonly System.Lazy<FieldAccessor<MotorWheel, int>> __motorStrenght =
				new System.Lazy<FieldAccessor<MotorWheel, int>>(() => FieldAccessor<MotorWheel, int>.Create("_motorStrenght"));
		private static readonly System.Lazy<FieldAccessor<MotorWheel, int>> __extraMotorStrength =
				new System.Lazy<FieldAccessor<MotorWheel, int>>(() => FieldAccessor<MotorWheel, int>.Create("_extraMotorStrength"));
		private static readonly System.Lazy<FieldAccessor<MotorWheel, float>> __raftSpeed =
				new System.Lazy<FieldAccessor<MotorWheel, float>>(() => FieldAccessor<MotorWheel, float>.Create("_raftSpeed"));
		private static readonly System.Lazy<FieldAccessor<MotorWheel, bool>> __motorState =
				new System.Lazy<FieldAccessor<MotorWheel, bool>>(() => FieldAccessor<MotorWheel, bool>.Create("_motorState"));
		private static readonly System.Lazy<FieldAccessor<MotorWheel, InteractionMotorWheelPowerButton>> _button_EngineOnOff =
				new System.Lazy<FieldAccessor<MotorWheel, InteractionMotorWheelPowerButton>>(() => FieldAccessor<MotorWheel, InteractionMotorWheelPowerButton>.Create("button_EngineOnOff"));
		private static readonly System.Lazy<FieldAccessor<MotorWheel, BlockButton>> _button_ChangeDirection =
				new System.Lazy<FieldAccessor<MotorWheel, BlockButton>>(() => FieldAccessor<MotorWheel, BlockButton>.Create("button_ChangeDirection"));
		private static readonly System.Lazy<FieldAccessor<MotorWheel, UnityEngine.Transform>> _motorWheel =
				new System.Lazy<FieldAccessor<MotorWheel, UnityEngine.Transform>>(() => FieldAccessor<MotorWheel, UnityEngine.Transform>.Create("motorWheel"));
		private static readonly System.Lazy<FieldAccessor<MotorWheel, float>> _timePerFuel =
				new System.Lazy<FieldAccessor<MotorWheel, float>>(() => FieldAccessor<MotorWheel, float>.Create("timePerFuel"));
		private static readonly System.Lazy<FieldAccessor<MotorWheel, float>> _wheelRotationSpeed =
				new System.Lazy<FieldAccessor<MotorWheel, float>>(() => FieldAccessor<MotorWheel, float>.Create("wheelRotationSpeed"));
		private static readonly System.Lazy<FieldAccessor<MotorWheel, float>> _waterParticleTimer =
				new System.Lazy<FieldAccessor<MotorWheel, float>>(() => FieldAccessor<MotorWheel, float>.Create("waterParticleTimer"));
		private static readonly System.Lazy<FieldAccessor<MotorWheel, float>> _waterParticleInterval =
				new System.Lazy<FieldAccessor<MotorWheel, float>>(() => FieldAccessor<MotorWheel, float>.Create("waterParticleInterval"));
		private static readonly System.Lazy<FieldAccessor<MotorWheel, UnityEngine.Animator>> _animator_engine =
				new System.Lazy<FieldAccessor<MotorWheel, UnityEngine.Animator>>(() => FieldAccessor<MotorWheel, UnityEngine.Animator>.Create("animator_engine"));
		private static readonly System.Lazy<FieldAccessor<MotorWheel, UnityEngine.Animator>> _animator_wheel =
				new System.Lazy<FieldAccessor<MotorWheel, UnityEngine.Animator>>(() => FieldAccessor<MotorWheel, UnityEngine.Animator>.Create("animator_wheel"));
		private static readonly System.Lazy<FieldAccessor<MotorWheel, float>> _jitterChance =
				new System.Lazy<FieldAccessor<MotorWheel, float>>(() => FieldAccessor<MotorWheel, float>.Create("jitterChance"));
		private static readonly System.Lazy<FieldAccessor<MotorWheel, UnityEngine.ParticleSystem[]>> _waterParticles =
				new System.Lazy<FieldAccessor<MotorWheel, UnityEngine.ParticleSystem[]>>(() => FieldAccessor<MotorWheel, UnityEngine.ParticleSystem[]>.Create("waterParticles"));
		private static readonly System.Lazy<FieldAccessor<MotorWheel, string>> _eventRef_lever =
				new System.Lazy<FieldAccessor<MotorWheel, string>>(() => FieldAccessor<MotorWheel, string>.Create("eventRef_lever"));
		private static readonly System.Lazy<FieldAccessor<MotorWheel, StudioEventEmitterSustain>> _eventEmitter_boiler =
				new System.Lazy<FieldAccessor<MotorWheel, StudioEventEmitterSustain>>(() => FieldAccessor<MotorWheel, StudioEventEmitterSustain>.Create("eventEmitter_boiler"));
		private static readonly System.Lazy<FieldAccessor<MotorWheel, StudioEventEmitterSustain>> _eventEmitter_engine =
				new System.Lazy<FieldAccessor<MotorWheel, StudioEventEmitterSustain>>(() => FieldAccessor<MotorWheel, StudioEventEmitterSustain>.Create("eventEmitter_engine"));
		private static readonly System.Lazy<FieldAccessor<MotorWheel, StudioEventEmitterSustain>> _eventEmitter_waterWheel =
				new System.Lazy<FieldAccessor<MotorWheel, StudioEventEmitterSustain>>(() => FieldAccessor<MotorWheel, StudioEventEmitterSustain>.Create("eventEmitter_waterWheel"));
		private static readonly System.Lazy<FieldAccessor<MotorWheel, DisplayTextManager>> _displayText =
				new System.Lazy<FieldAccessor<MotorWheel, DisplayTextManager>>(() => FieldAccessor<MotorWheel, DisplayTextManager>.Create("displayText"));
		private static readonly System.Lazy<FieldAccessor<MotorWheel, Raft_Network>> _network =
				new System.Lazy<FieldAccessor<MotorWheel, Raft_Network>>(() => FieldAccessor<MotorWheel, Raft_Network>.Create("network"));
		private static readonly System.Lazy<FieldAccessor<MotorWheel, bool>> _isDisplayingText =
				new System.Lazy<FieldAccessor<MotorWheel, bool>>(() => FieldAccessor<MotorWheel, bool>.Create("isDisplayingText"));
		private static readonly System.Lazy<FieldAccessor<MotorWheel, bool>> _hasBeenPlaced =
				new System.Lazy<FieldAccessor<MotorWheel, bool>>(() => FieldAccessor<MotorWheel, bool>.Create("hasBeenPlaced"));
		private static readonly System.Lazy<FieldAccessor<MotorWheel, float>> _currentRotationSpeed =
				new System.Lazy<FieldAccessor<MotorWheel, float>>(() => FieldAccessor<MotorWheel, float>.Create("currentRotationSpeed"));

		public static int Get_motorStrenght(this MotorWheel __self) => __motorStrenght.Value.GetValue(__self);
		public static void Set_motorStrenght(this MotorWheel __self, int value) => __motorStrenght.Value.SetValue(__self, value);
		public static int Get_extraMotorStrength(this MotorWheel __self) => __extraMotorStrength.Value.GetValue(__self);
		public static void Set_extraMotorStrength(this MotorWheel __self, int value) => __extraMotorStrength.Value.SetValue(__self, value);
		public static float Get_raftSpeed(this MotorWheel __self) => __raftSpeed.Value.GetValue(__self);
		public static void Set_raftSpeed(this MotorWheel __self, float value) => __raftSpeed.Value.SetValue(__self, value);
		public static bool Get_motorState(this MotorWheel __self) => __motorState.Value.GetValue(__self);
		public static void Set_motorState(this MotorWheel __self, bool value) => __motorState.Value.SetValue(__self, value);
		public static InteractionMotorWheelPowerButton GetButton_EngineOnOff(this MotorWheel __self) => _button_EngineOnOff.Value.GetValue(__self);
		public static void SetButton_EngineOnOff(this MotorWheel __self, InteractionMotorWheelPowerButton value) => _button_EngineOnOff.Value.SetValue(__self, value);
		public static BlockButton GetButton_ChangeDirection(this MotorWheel __self) => _button_ChangeDirection.Value.GetValue(__self);
		public static void SetButton_ChangeDirection(this MotorWheel __self, BlockButton value) => _button_ChangeDirection.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetMotorWheel(this MotorWheel __self) => _motorWheel.Value.GetValue(__self);
		public static void SetMotorWheel(this MotorWheel __self, UnityEngine.Transform value) => _motorWheel.Value.SetValue(__self, value);
		public static float GetTimePerFuel(this MotorWheel __self) => _timePerFuel.Value.GetValue(__self);
		public static void SetTimePerFuel(this MotorWheel __self, float value) => _timePerFuel.Value.SetValue(__self, value);
		public static float GetWheelRotationSpeed(this MotorWheel __self) => _wheelRotationSpeed.Value.GetValue(__self);
		public static void SetWheelRotationSpeed(this MotorWheel __self, float value) => _wheelRotationSpeed.Value.SetValue(__self, value);
		public static float GetWaterParticleTimer(this MotorWheel __self) => _waterParticleTimer.Value.GetValue(__self);
		public static void SetWaterParticleTimer(this MotorWheel __self, float value) => _waterParticleTimer.Value.SetValue(__self, value);
		public static float GetWaterParticleInterval(this MotorWheel __self) => _waterParticleInterval.Value.GetValue(__self);
		public static void SetWaterParticleInterval(this MotorWheel __self, float value) => _waterParticleInterval.Value.SetValue(__self, value);
		public static UnityEngine.Animator GetAnimator_engine(this MotorWheel __self) => _animator_engine.Value.GetValue(__self);
		public static void SetAnimator_engine(this MotorWheel __self, UnityEngine.Animator value) => _animator_engine.Value.SetValue(__self, value);
		public static UnityEngine.Animator GetAnimator_wheel(this MotorWheel __self) => _animator_wheel.Value.GetValue(__self);
		public static void SetAnimator_wheel(this MotorWheel __self, UnityEngine.Animator value) => _animator_wheel.Value.SetValue(__self, value);
		public static float GetJitterChance(this MotorWheel __self) => _jitterChance.Value.GetValue(__self);
		public static void SetJitterChance(this MotorWheel __self, float value) => _jitterChance.Value.SetValue(__self, value);
		public static UnityEngine.ParticleSystem[] GetWaterParticles(this MotorWheel __self) => _waterParticles.Value.GetValue(__self);
		public static void SetWaterParticles(this MotorWheel __self, UnityEngine.ParticleSystem[] value) => _waterParticles.Value.SetValue(__self, value);
		public static string GetEventRef_lever(this MotorWheel __self) => _eventRef_lever.Value.GetValue(__self);
		public static void SetEventRef_lever(this MotorWheel __self, string value) => _eventRef_lever.Value.SetValue(__self, value);
		public static StudioEventEmitterSustain GetEventEmitter_boiler(this MotorWheel __self) => _eventEmitter_boiler.Value.GetValue(__self);
		public static void SetEventEmitter_boiler(this MotorWheel __self, StudioEventEmitterSustain value) => _eventEmitter_boiler.Value.SetValue(__self, value);
		public static StudioEventEmitterSustain GetEventEmitter_engine(this MotorWheel __self) => _eventEmitter_engine.Value.GetValue(__self);
		public static void SetEventEmitter_engine(this MotorWheel __self, StudioEventEmitterSustain value) => _eventEmitter_engine.Value.SetValue(__self, value);
		public static StudioEventEmitterSustain GetEventEmitter_waterWheel(this MotorWheel __self) => _eventEmitter_waterWheel.Value.GetValue(__self);
		public static void SetEventEmitter_waterWheel(this MotorWheel __self, StudioEventEmitterSustain value) => _eventEmitter_waterWheel.Value.SetValue(__self, value);
		public static DisplayTextManager GetDisplayText(this MotorWheel __self) => _displayText.Value.GetValue(__self);
		public static void SetDisplayText(this MotorWheel __self, DisplayTextManager value) => _displayText.Value.SetValue(__self, value);
		public static Raft_Network GetNetwork(this MotorWheel __self) => _network.Value.GetValue(__self);
		public static void SetNetwork(this MotorWheel __self, Raft_Network value) => _network.Value.SetValue(__self, value);
		public static bool GetIsDisplayingText(this MotorWheel __self) => _isDisplayingText.Value.GetValue(__self);
		public static void SetIsDisplayingText(this MotorWheel __self, bool value) => _isDisplayingText.Value.SetValue(__self, value);
		public static bool GetHasBeenPlaced(this MotorWheel __self) => _hasBeenPlaced.Value.GetValue(__self);
		public static void SetHasBeenPlaced(this MotorWheel __self, bool value) => _hasBeenPlaced.Value.SetValue(__self, value);
		public static float GetCurrentRotationSpeed(this MotorWheel __self) => _currentRotationSpeed.Value.GetValue(__self);
		public static void SetCurrentRotationSpeed(this MotorWheel __self, float value) => _currentRotationSpeed.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<MotorWheel>> _Awake757602046 =
				new System.Lazy<MethodAccessor<MotorWheel>>(() => MethodAccessor<MotorWheel>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<MotorWheel>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<MotorWheel>>(() => MethodAccessor<MotorWheel>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<MotorWheel>> _OnBlockPlaced757602046 =
				new System.Lazy<MethodAccessor<MotorWheel>>(() => MethodAccessor<MotorWheel>.Create("OnBlockPlaced"));
		private static readonly System.Lazy<MethodAccessor<MotorWheel>> _SendUpdateGuageMeterNetworked757602046 =
				new System.Lazy<MethodAccessor<MotorWheel>>(() => MethodAccessor<MotorWheel>.Create("SendUpdateGuageMeterNetworked"));
		private static readonly System.Lazy<MethodAccessor<MotorWheel>> _InitializeFuel757602046 =
				new System.Lazy<MethodAccessor<MotorWheel>>(() => MethodAccessor<MotorWheel>.Create("InitializeFuel"));
		private static readonly System.Lazy<MethodAccessor<MotorWheel>> _RotateWheel757602046 =
				new System.Lazy<MethodAccessor<MotorWheel>>(() => MethodAccessor<MotorWheel>.Create("RotateWheel"));
		private static readonly System.Lazy<MethodAccessor<MotorWheel>> _SimulateWaterInteraction757602046 =
				new System.Lazy<MethodAccessor<MotorWheel>>(() => MethodAccessor<MotorWheel>.Create("SimulateWaterInteraction"));
		private static readonly System.Lazy<MethodAccessor<MotorWheel>> _LocalOnMotorDirty757602046 =
				new System.Lazy<MethodAccessor<MotorWheel>>(() => MethodAccessor<MotorWheel>.Create("LocalOnMotorDirty"));
		private static readonly System.Lazy<MethodAccessor<MotorWheel>> _HandleWeightStrengthAnimation757602046 =
				new System.Lazy<MethodAccessor<MotorWheel>>(() => MethodAccessor<MotorWheel>.Create("HandleWeightStrengthAnimation"));
		private static readonly System.Lazy<MethodAccessor<MotorWheel>> _HandleSounds757602046 =
				new System.Lazy<MethodAccessor<MotorWheel>>(() => MethodAccessor<MotorWheel>.Create("HandleSounds"));

		public static void Awake(this MotorWheel __self) => _Awake757602046.Value.Invoke(__self);
		public static void OnDestroy(this MotorWheel __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void OnBlockPlaced(this MotorWheel __self) => _OnBlockPlaced757602046.Value.Invoke(__self);
		public static void SendUpdateGuageMeterNetworked(this MotorWheel __self) => _SendUpdateGuageMeterNetworked757602046.Value.Invoke(__self);
		public static void InitializeFuel(this MotorWheel __self) => _InitializeFuel757602046.Value.Invoke(__self);
		public static void RotateWheel(this MotorWheel __self) => _RotateWheel757602046.Value.Invoke(__self);
		public static void SimulateWaterInteraction(this MotorWheel __self) => _SimulateWaterInteraction757602046.Value.Invoke(__self);
		public static void LocalOnMotorDirty(this MotorWheel __self) => _LocalOnMotorDirty757602046.Value.Invoke(__self);
		public static void HandleWeightStrengthAnimation(this MotorWheel __self) => _HandleWeightStrengthAnimation757602046.Value.Invoke(__self);
		public static void HandleSounds(this MotorWheel __self) => _HandleSounds757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Message_MotorWheelCreate
	{

		private static readonly System.Lazy<MethodAccessor<Message_MotorWheelCreate>> _GetMotorWheelFromObjectIndex3491706632 =
				new System.Lazy<MethodAccessor<Message_MotorWheelCreate>>(() => MethodAccessor<Message_MotorWheelCreate>.Create("GetMotorWheelFromObjectIndex", typeof(MotorWheel[]), typeof(uint)));

		public static MotorWheel GetMotorWheelFromObjectIndex(this Message_MotorWheelCreate __self, MotorWheel[] motorWheels, uint objectIndex) => (MotorWheel)_GetMotorWheelFromObjectIndex3491706632.Value.Invoke(__self, motorWheels, objectIndex);

	}

	public static class PrivateAccessor_MotorWheelEngineAnimator
	{

		private static readonly System.Lazy<FieldAccessor<MotorWheelEngineAnimator, UnityEngine.ParticleSystem[]>> _smokeParticles =
				new System.Lazy<FieldAccessor<MotorWheelEngineAnimator, UnityEngine.ParticleSystem[]>>(() => FieldAccessor<MotorWheelEngineAnimator, UnityEngine.ParticleSystem[]>.Create("smokeParticles"));

		public static UnityEngine.ParticleSystem[] GetSmokeParticles(this MotorWheelEngineAnimator __self) => _smokeParticles.Value.GetValue(__self);
		public static void SetSmokeParticles(this MotorWheelEngineAnimator __self, UnityEngine.ParticleSystem[] value) => _smokeParticles.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<MotorWheelEngineAnimator>> _Start757602046 =
				new System.Lazy<MethodAccessor<MotorWheelEngineAnimator>>(() => MethodAccessor<MotorWheelEngineAnimator>.Create("Start"));

		public static void Start(this MotorWheelEngineAnimator __self) => _Start757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Pipe
	{

		private static readonly System.Lazy<FieldAccessor<Pipe, BitmaskTile>> _bitmaskTile =
				new System.Lazy<FieldAccessor<Pipe, BitmaskTile>>(() => FieldAccessor<Pipe, BitmaskTile>.Create("bitmaskTile"));

		public static BitmaskTile GetBitmaskTile(this Pipe __self) => _bitmaskTile.Value.GetValue(__self);
		public static void SetBitmaskTile(this Pipe __self, BitmaskTile value) => _bitmaskTile.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Pipe>> _FloodFill3470631076 =
				new System.Lazy<MethodAccessor<Pipe>>(() => MethodAccessor<Pipe>.Create("FloodFill", typeof(System.Collections.Generic.List<Pipe>)));
		private static readonly System.Lazy<MethodAccessor<Pipe>> _DisconnectFromPipeGroup757602046 =
				new System.Lazy<MethodAccessor<Pipe>>(() => MethodAccessor<Pipe>.Create("DisconnectFromPipeGroup"));
		private static readonly System.Lazy<MethodAccessor<Pipe>> _LogNearbyPipes757602046 =
				new System.Lazy<MethodAccessor<Pipe>>(() => MethodAccessor<Pipe>.Create("LogNearbyPipes"));
		private static readonly System.Lazy<MethodAccessor<Pipe>> _LogFloodFill757602046 =
				new System.Lazy<MethodAccessor<Pipe>>(() => MethodAccessor<Pipe>.Create("LogFloodFill"));
		private static readonly System.Lazy<MethodAccessor<Pipe>> _SimulatePipePlaced757602046 =
				new System.Lazy<MethodAccessor<Pipe>>(() => MethodAccessor<Pipe>.Create("SimulatePipePlaced"));
		private static readonly System.Lazy<MethodAccessor<Pipe>> _SimulatePipeRemoved757602046 =
				new System.Lazy<MethodAccessor<Pipe>>(() => MethodAccessor<Pipe>.Create("SimulatePipeRemoved"));

		public static void FloodFill(this Pipe __self, System.Collections.Generic.List<Pipe> pipesInFloodFill) => _FloodFill3470631076.Value.Invoke(__self, pipesInFloodFill);
		public static void DisconnectFromPipeGroup(this Pipe __self) => _DisconnectFromPipeGroup757602046.Value.Invoke(__self);
		public static void LogNearbyPipes(this Pipe __self) => _LogNearbyPipes757602046.Value.Invoke(__self);
		public static void LogFloodFill(this Pipe __self) => _LogFloodFill757602046.Value.Invoke(__self);
		public static void SimulatePipePlaced(this Pipe __self) => _SimulatePipePlaced757602046.Value.Invoke(__self);
		public static void SimulatePipeRemoved(this Pipe __self) => _SimulatePipeRemoved757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_PipeSocket_Tank
	{

		private static readonly System.Lazy<MethodAccessor<PipeSocket_Tank>> _OnValidate757602046 =
				new System.Lazy<MethodAccessor<PipeSocket_Tank>>(() => MethodAccessor<PipeSocket_Tank>.Create("OnValidate"));

		public static void OnValidate(this PipeSocket_Tank __self) => _OnValidate757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_PlaceableFirework
	{

		private static readonly System.Lazy<FieldAccessor<PlaceableFirework, Block_Firework>> _fireworkBlock =
				new System.Lazy<FieldAccessor<PlaceableFirework, Block_Firework>>(() => FieldAccessor<PlaceableFirework, Block_Firework>.Create("fireworkBlock"));

		public static Block_Firework GetFireworkBlock(this PlaceableFirework __self) => _fireworkBlock.Value.GetValue(__self);
		public static void SetFireworkBlock(this PlaceableFirework __self, Block_Firework value) => _fireworkBlock.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<PlaceableFirework>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<PlaceableFirework>>(() => MethodAccessor<PlaceableFirework>.Create("OnDestroy"));

		public static void OnDestroy(this PlaceableFirework __self) => _OnDestroy757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Placeable_BiofuelExtractor
	{

		private static readonly System.Lazy<FieldAccessor<Placeable_BiofuelExtractor, FillContainerComponent>> _fillContainer_honey =
				new System.Lazy<FieldAccessor<Placeable_BiofuelExtractor, FillContainerComponent>>(() => FieldAccessor<Placeable_BiofuelExtractor, FillContainerComponent>.Create("fillContainer_honey"));
		private static readonly System.Lazy<FieldAccessor<Placeable_BiofuelExtractor, int>> _honeyDrainAtMerge =
				new System.Lazy<FieldAccessor<Placeable_BiofuelExtractor, int>>(() => FieldAccessor<Placeable_BiofuelExtractor, int>.Create("honeyDrainAtMerge"));
		private static readonly System.Lazy<FieldAccessor<Placeable_BiofuelExtractor, UnityEngine.ParticleSystem>> _smokeParticles =
				new System.Lazy<FieldAccessor<Placeable_BiofuelExtractor, UnityEngine.ParticleSystem>>(() => FieldAccessor<Placeable_BiofuelExtractor, UnityEngine.ParticleSystem>.Create("smokeParticles"));
		private static readonly System.Lazy<FieldAccessor<Placeable_BiofuelExtractor, UnityEngine.ParticleSystem>> _dripParticles =
				new System.Lazy<FieldAccessor<Placeable_BiofuelExtractor, UnityEngine.ParticleSystem>>(() => FieldAccessor<Placeable_BiofuelExtractor, UnityEngine.ParticleSystem>.Create("dripParticles"));
		private static readonly System.Lazy<FieldAccessor<Placeable_BiofuelExtractor, UnityEngine.ParticleSystem>> _smokeParticlesExhaust =
				new System.Lazy<FieldAccessor<Placeable_BiofuelExtractor, UnityEngine.ParticleSystem>>(() => FieldAccessor<Placeable_BiofuelExtractor, UnityEngine.ParticleSystem>.Create("smokeParticlesExhaust"));
		private static readonly System.Lazy<FieldAccessor<Placeable_BiofuelExtractor, UnityEngine.Renderer>> _rendererAnimatedHose =
				new System.Lazy<FieldAccessor<Placeable_BiofuelExtractor, UnityEngine.Renderer>>(() => FieldAccessor<Placeable_BiofuelExtractor, UnityEngine.Renderer>.Create("rendererAnimatedHose"));
		private static readonly System.Lazy<FieldAccessor<Placeable_BiofuelExtractor, FMODUnity.StudioEventEmitter>> _emitter_drip =
				new System.Lazy<FieldAccessor<Placeable_BiofuelExtractor, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<Placeable_BiofuelExtractor, FMODUnity.StudioEventEmitter>.Create("emitter_drip"));
		private static readonly System.Lazy<FieldAccessor<Placeable_BiofuelExtractor, float>> _dripRate =
				new System.Lazy<FieldAccessor<Placeable_BiofuelExtractor, float>>(() => FieldAccessor<Placeable_BiofuelExtractor, float>.Create("dripRate"));
		private static readonly System.Lazy<FieldAccessor<Placeable_BiofuelExtractor, float>> _dripTimer =
				new System.Lazy<FieldAccessor<Placeable_BiofuelExtractor, float>>(() => FieldAccessor<Placeable_BiofuelExtractor, float>.Create("dripTimer"));
		private static readonly System.Lazy<FieldAccessor<Placeable_BiofuelExtractor, UnityEngine.MaterialPropertyBlock>> _animatedHoseProperty =
				new System.Lazy<FieldAccessor<Placeable_BiofuelExtractor, UnityEngine.MaterialPropertyBlock>>(() => FieldAccessor<Placeable_BiofuelExtractor, UnityEngine.MaterialPropertyBlock>.Create("animatedHoseProperty"));

		public static FillContainerComponent GetFillContainer_honey(this Placeable_BiofuelExtractor __self) => _fillContainer_honey.Value.GetValue(__self);
		public static void SetFillContainer_honey(this Placeable_BiofuelExtractor __self, FillContainerComponent value) => _fillContainer_honey.Value.SetValue(__self, value);
		public static int GetHoneyDrainAtMerge(this Placeable_BiofuelExtractor __self) => _honeyDrainAtMerge.Value.GetValue(__self);
		public static void SetHoneyDrainAtMerge(this Placeable_BiofuelExtractor __self, int value) => _honeyDrainAtMerge.Value.SetValue(__self, value);
		public static UnityEngine.ParticleSystem GetSmokeParticles(this Placeable_BiofuelExtractor __self) => _smokeParticles.Value.GetValue(__self);
		public static void SetSmokeParticles(this Placeable_BiofuelExtractor __self, UnityEngine.ParticleSystem value) => _smokeParticles.Value.SetValue(__self, value);
		public static UnityEngine.ParticleSystem GetDripParticles(this Placeable_BiofuelExtractor __self) => _dripParticles.Value.GetValue(__self);
		public static void SetDripParticles(this Placeable_BiofuelExtractor __self, UnityEngine.ParticleSystem value) => _dripParticles.Value.SetValue(__self, value);
		public static UnityEngine.ParticleSystem GetSmokeParticlesExhaust(this Placeable_BiofuelExtractor __self) => _smokeParticlesExhaust.Value.GetValue(__self);
		public static void SetSmokeParticlesExhaust(this Placeable_BiofuelExtractor __self, UnityEngine.ParticleSystem value) => _smokeParticlesExhaust.Value.SetValue(__self, value);
		public static UnityEngine.Renderer GetRendererAnimatedHose(this Placeable_BiofuelExtractor __self) => _rendererAnimatedHose.Value.GetValue(__self);
		public static void SetRendererAnimatedHose(this Placeable_BiofuelExtractor __self, UnityEngine.Renderer value) => _rendererAnimatedHose.Value.SetValue(__self, value);
		public static FMODUnity.StudioEventEmitter GetEmitter_drip(this Placeable_BiofuelExtractor __self) => _emitter_drip.Value.GetValue(__self);
		public static void SetEmitter_drip(this Placeable_BiofuelExtractor __self, FMODUnity.StudioEventEmitter value) => _emitter_drip.Value.SetValue(__self, value);
		public static float GetDripRate(this Placeable_BiofuelExtractor __self) => _dripRate.Value.GetValue(__self);
		public static void SetDripRate(this Placeable_BiofuelExtractor __self, float value) => _dripRate.Value.SetValue(__self, value);
		public static float GetDripTimer(this Placeable_BiofuelExtractor __self) => _dripTimer.Value.GetValue(__self);
		public static void SetDripTimer(this Placeable_BiofuelExtractor __self, float value) => _dripTimer.Value.SetValue(__self, value);
		public static UnityEngine.MaterialPropertyBlock GetAnimatedHoseProperty(this Placeable_BiofuelExtractor __self) => _animatedHoseProperty.Value.GetValue(__self);
		public static void SetAnimatedHoseProperty(this Placeable_BiofuelExtractor __self, UnityEngine.MaterialPropertyBlock value) => _animatedHoseProperty.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Placeable_BiofuelExtractor>> _OnBlockPlaced757602046 =
				new System.Lazy<MethodAccessor<Placeable_BiofuelExtractor>>(() => MethodAccessor<Placeable_BiofuelExtractor>.Create("OnBlockPlaced"));
		private static readonly System.Lazy<MethodAccessor<Placeable_BiofuelExtractor>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<Placeable_BiofuelExtractor>>(() => MethodAccessor<Placeable_BiofuelExtractor>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<Placeable_BiofuelExtractor>> _Update757602046 =
				new System.Lazy<MethodAccessor<Placeable_BiofuelExtractor>>(() => MethodAccessor<Placeable_BiofuelExtractor>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<Placeable_BiofuelExtractor>> _HoneyTankChangedCall757602046 =
				new System.Lazy<MethodAccessor<Placeable_BiofuelExtractor>>(() => MethodAccessor<Placeable_BiofuelExtractor>.Create("HoneyTankChangedCall"));
		private static readonly System.Lazy<MethodAccessor<Placeable_BiofuelExtractor>> _CanProcessTanks757602046 =
				new System.Lazy<MethodAccessor<Placeable_BiofuelExtractor>>(() => MethodAccessor<Placeable_BiofuelExtractor>.Create("CanProcessTanks"));
		private static readonly System.Lazy<MethodAccessor<Placeable_BiofuelExtractor>> _ProcessTanks757602046 =
				new System.Lazy<MethodAccessor<Placeable_BiofuelExtractor>>(() => MethodAccessor<Placeable_BiofuelExtractor>.Create("ProcessTanks"));
		private static readonly System.Lazy<MethodAccessor<Placeable_BiofuelExtractor>> _HandleSounds3450040886 =
				new System.Lazy<MethodAccessor<Placeable_BiofuelExtractor>>(() => MethodAccessor<Placeable_BiofuelExtractor>.Create("HandleSounds", typeof(bool)));
		private static readonly System.Lazy<MethodAccessor<Placeable_BiofuelExtractor>> _HandleParticles3450040886 =
				new System.Lazy<MethodAccessor<Placeable_BiofuelExtractor>>(() => MethodAccessor<Placeable_BiofuelExtractor>.Create("HandleParticles", typeof(bool)));

		public static void OnBlockPlaced(this Placeable_BiofuelExtractor __self) => _OnBlockPlaced757602046.Value.Invoke(__self);
		public static void OnDestroy(this Placeable_BiofuelExtractor __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void Update(this Placeable_BiofuelExtractor __self) => _Update757602046.Value.Invoke(__self);
		public static void HoneyTankChangedCall(this Placeable_BiofuelExtractor __self) => _HoneyTankChangedCall757602046.Value.Invoke(__self);
		public static bool CanProcessTanks(this Placeable_BiofuelExtractor __self) => (bool)_CanProcessTanks757602046.Value.Invoke(__self);
		public static void ProcessTanks(this Placeable_BiofuelExtractor __self) => _ProcessTanks757602046.Value.Invoke(__self);
		public static void HandleSounds(this Placeable_BiofuelExtractor __self, bool isActive) => _HandleSounds3450040886.Value.Invoke(__self, isActive);
		public static void HandleParticles(this Placeable_BiofuelExtractor __self, bool particleState) => _HandleParticles3450040886.Value.Invoke(__self, particleState);

	}

	public static class PrivateAccessor_Placeable_Extractor
	{

		private static readonly System.Lazy<FieldAccessor<Placeable_Extractor, FMODUnity.StudioEventEmitter>> _emitter_processTank =
				new System.Lazy<FieldAccessor<Placeable_Extractor, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<Placeable_Extractor, FMODUnity.StudioEventEmitter>.Create("emitter_processTank"));
		private static readonly System.Lazy<FieldAccessor<Placeable_Extractor, UnityEngine.Collider>> _outputCollider =
				new System.Lazy<FieldAccessor<Placeable_Extractor, UnityEngine.Collider>>(() => FieldAccessor<Placeable_Extractor, UnityEngine.Collider>.Create("outputCollider"));
		private static readonly System.Lazy<FieldAccessor<Placeable_Extractor, UnityEngine.Renderer>> _outputRenderer =
				new System.Lazy<FieldAccessor<Placeable_Extractor, UnityEngine.Renderer>>(() => FieldAccessor<Placeable_Extractor, UnityEngine.Renderer>.Create("outputRenderer"));
		private static readonly System.Lazy<FieldAccessor<Placeable_Extractor, FillContainerComponent>> _fillContainer_processedResourceTank =
				new System.Lazy<FieldAccessor<Placeable_Extractor, FillContainerComponent>>(() => FieldAccessor<Placeable_Extractor, FillContainerComponent>.Create("fillContainer_processedResourceTank"));
		private static readonly System.Lazy<FieldAccessor<Placeable_Extractor, FillContainerComponent>> _fillContainer_processing =
				new System.Lazy<FieldAccessor<Placeable_Extractor, FillContainerComponent>>(() => FieldAccessor<Placeable_Extractor, FillContainerComponent>.Create("fillContainer_processing"));
		private static readonly System.Lazy<FieldAccessor<Placeable_Extractor, int>> _processingTankDrainAtMerge =
				new System.Lazy<FieldAccessor<Placeable_Extractor, int>>(() => FieldAccessor<Placeable_Extractor, int>.Create("processingTankDrainAtMerge"));
		private static readonly System.Lazy<FieldAccessor<Placeable_Extractor, float>> _processCooldown =
				new System.Lazy<FieldAccessor<Placeable_Extractor, float>>(() => FieldAccessor<Placeable_Extractor, float>.Create("processCooldown"));
		private static readonly System.Lazy<FieldAccessor<Placeable_Extractor, float>> _processingTankAdditionAmount =
				new System.Lazy<FieldAccessor<Placeable_Extractor, float>>(() => FieldAccessor<Placeable_Extractor, float>.Create("processingTankAdditionAmount"));
		private static readonly System.Lazy<FieldAccessor<Placeable_Extractor, Tank[]>> _allTanks =
				new System.Lazy<FieldAccessor<Placeable_Extractor, Tank[]>>(() => FieldAccessor<Placeable_Extractor, Tank[]>.Create("allTanks"));
		private static readonly System.Lazy<FieldAccessor<Placeable_Extractor, float>> _processProgress =
				new System.Lazy<FieldAccessor<Placeable_Extractor, float>>(() => FieldAccessor<Placeable_Extractor, float>.Create("processProgress"));
		private static readonly System.Lazy<FieldAccessor<Placeable_Extractor, bool>> _hasBeenPlaced =
				new System.Lazy<FieldAccessor<Placeable_Extractor, bool>>(() => FieldAccessor<Placeable_Extractor, bool>.Create("hasBeenPlaced"));
		private static readonly System.Lazy<FieldAccessor<Placeable_Extractor, Raft_Network>> _network =
				new System.Lazy<FieldAccessor<Placeable_Extractor, Raft_Network>>(() => FieldAccessor<Placeable_Extractor, Raft_Network>.Create("network"));

		public static FMODUnity.StudioEventEmitter GetEmitter_processTank(this Placeable_Extractor __self) => _emitter_processTank.Value.GetValue(__self);
		public static void SetEmitter_processTank(this Placeable_Extractor __self, FMODUnity.StudioEventEmitter value) => _emitter_processTank.Value.SetValue(__self, value);
		public static UnityEngine.Collider GetOutputCollider(this Placeable_Extractor __self) => _outputCollider.Value.GetValue(__self);
		public static void SetOutputCollider(this Placeable_Extractor __self, UnityEngine.Collider value) => _outputCollider.Value.SetValue(__self, value);
		public static UnityEngine.Renderer GetOutputRenderer(this Placeable_Extractor __self) => _outputRenderer.Value.GetValue(__self);
		public static void SetOutputRenderer(this Placeable_Extractor __self, UnityEngine.Renderer value) => _outputRenderer.Value.SetValue(__self, value);
		public static FillContainerComponent GetFillContainer_processedResourceTank(this Placeable_Extractor __self) => _fillContainer_processedResourceTank.Value.GetValue(__self);
		public static void SetFillContainer_processedResourceTank(this Placeable_Extractor __self, FillContainerComponent value) => _fillContainer_processedResourceTank.Value.SetValue(__self, value);
		public static FillContainerComponent GetFillContainer_processing(this Placeable_Extractor __self) => _fillContainer_processing.Value.GetValue(__self);
		public static void SetFillContainer_processing(this Placeable_Extractor __self, FillContainerComponent value) => _fillContainer_processing.Value.SetValue(__self, value);
		public static int GetProcessingTankDrainAtMerge(this Placeable_Extractor __self) => _processingTankDrainAtMerge.Value.GetValue(__self);
		public static void SetProcessingTankDrainAtMerge(this Placeable_Extractor __self, int value) => _processingTankDrainAtMerge.Value.SetValue(__self, value);
		public static float GetProcessCooldown(this Placeable_Extractor __self) => _processCooldown.Value.GetValue(__self);
		public static void SetProcessCooldown(this Placeable_Extractor __self, float value) => _processCooldown.Value.SetValue(__self, value);
		public static float GetProcessingTankAdditionAmount(this Placeable_Extractor __self) => _processingTankAdditionAmount.Value.GetValue(__self);
		public static void SetProcessingTankAdditionAmount(this Placeable_Extractor __self, float value) => _processingTankAdditionAmount.Value.SetValue(__self, value);
		public static Tank[] GetAllTanks(this Placeable_Extractor __self) => _allTanks.Value.GetValue(__self);
		public static void SetAllTanks(this Placeable_Extractor __self, Tank[] value) => _allTanks.Value.SetValue(__self, value);
		public static float GetProcessProgress(this Placeable_Extractor __self) => _processProgress.Value.GetValue(__self);
		public static void SetProcessProgress(this Placeable_Extractor __self, float value) => _processProgress.Value.SetValue(__self, value);
		public static bool GetHasBeenPlaced(this Placeable_Extractor __self) => _hasBeenPlaced.Value.GetValue(__self);
		public static void SetHasBeenPlaced(this Placeable_Extractor __self, bool value) => _hasBeenPlaced.Value.SetValue(__self, value);
		public static Raft_Network GetNetwork(this Placeable_Extractor __self) => _network.Value.GetValue(__self);
		public static void SetNetwork(this Placeable_Extractor __self, Raft_Network value) => _network.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Placeable_Extractor>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<Placeable_Extractor>>(() => MethodAccessor<Placeable_Extractor>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<Placeable_Extractor>> _Update757602046 =
				new System.Lazy<MethodAccessor<Placeable_Extractor>>(() => MethodAccessor<Placeable_Extractor>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<Placeable_Extractor>> _SendProcessExtractorMessageNetworked757602046 =
				new System.Lazy<MethodAccessor<Placeable_Extractor>>(() => MethodAccessor<Placeable_Extractor>.Create("SendProcessExtractorMessageNetworked"));
		private static readonly System.Lazy<MethodAccessor<Placeable_Extractor>> _ButtonHarvestOutput757602046 =
				new System.Lazy<MethodAccessor<Placeable_Extractor>>(() => MethodAccessor<Placeable_Extractor>.Create("ButtonHarvestOutput"));
		private static readonly System.Lazy<MethodAccessor<Placeable_Extractor>> _ProcessingTankChangedCall757602046 =
				new System.Lazy<MethodAccessor<Placeable_Extractor>>(() => MethodAccessor<Placeable_Extractor>.Create("ProcessingTankChangedCall"));
		private static readonly System.Lazy<MethodAccessor<Placeable_Extractor>> _OutputChangedCall757602046 =
				new System.Lazy<MethodAccessor<Placeable_Extractor>>(() => MethodAccessor<Placeable_Extractor>.Create("OutputChangedCall"));
		private static readonly System.Lazy<MethodAccessor<Placeable_Extractor>> _OnBlockPlaced757602046 =
				new System.Lazy<MethodAccessor<Placeable_Extractor>>(() => MethodAccessor<Placeable_Extractor>.Create("OnBlockPlaced"));
		private static readonly System.Lazy<MethodAccessor<Placeable_Extractor>> _CanProcessTanks757602046 =
				new System.Lazy<MethodAccessor<Placeable_Extractor>>(() => MethodAccessor<Placeable_Extractor>.Create("CanProcessTanks"));
		private static readonly System.Lazy<MethodAccessor<Placeable_Extractor>> _ProcessTanks757602046 =
				new System.Lazy<MethodAccessor<Placeable_Extractor>>(() => MethodAccessor<Placeable_Extractor>.Create("ProcessTanks"));
		private static readonly System.Lazy<MethodAccessor<Placeable_Extractor>> _HandleSounds3450040886 =
				new System.Lazy<MethodAccessor<Placeable_Extractor>>(() => MethodAccessor<Placeable_Extractor>.Create("HandleSounds", typeof(bool)));
		private static readonly System.Lazy<MethodAccessor<Placeable_Extractor>> _HarvestAmount757602046 =
				new System.Lazy<MethodAccessor<Placeable_Extractor>>(() => MethodAccessor<Placeable_Extractor>.Create("HarvestAmount"));
		private static readonly System.Lazy<MethodAccessor<Placeable_Extractor>> _CanHarvestOutputtedFuel757602046 =
				new System.Lazy<MethodAccessor<Placeable_Extractor>>(() => MethodAccessor<Placeable_Extractor>.Create("CanHarvestOutputtedFuel"));
		private static readonly System.Lazy<MethodAccessor<Placeable_Extractor>> _HandlePartialHarvest3461878659 =
				new System.Lazy<MethodAccessor<Placeable_Extractor>>(() => MethodAccessor<Placeable_Extractor>.Create("HandlePartialHarvest", typeof(Network_Player)));
		private static readonly System.Lazy<MethodAccessor<Placeable_Extractor>> _HarvestOutput3461878659 =
				new System.Lazy<MethodAccessor<Placeable_Extractor>>(() => MethodAccessor<Placeable_Extractor>.Create("HarvestOutput", typeof(Network_Player)));
		private static readonly System.Lazy<MethodAccessor<Placeable_Extractor>> _SetOutPutEnabled3450040886 =
				new System.Lazy<MethodAccessor<Placeable_Extractor>>(() => MethodAccessor<Placeable_Extractor>.Create("SetOutPutEnabled", typeof(bool)));

		public static void OnDestroy(this Placeable_Extractor __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void Update(this Placeable_Extractor __self) => _Update757602046.Value.Invoke(__self);
		public static void SendProcessExtractorMessageNetworked(this Placeable_Extractor __self) => _SendProcessExtractorMessageNetworked757602046.Value.Invoke(__self);
		public static void ButtonHarvestOutput(this Placeable_Extractor __self) => _ButtonHarvestOutput757602046.Value.Invoke(__self);
		public static void ProcessingTankChangedCall(this Placeable_Extractor __self) => _ProcessingTankChangedCall757602046.Value.Invoke(__self);
		public static void OutputChangedCall(this Placeable_Extractor __self) => _OutputChangedCall757602046.Value.Invoke(__self);
		public static void OnBlockPlaced(this Placeable_Extractor __self) => _OnBlockPlaced757602046.Value.Invoke(__self);
		public static bool CanProcessTanks(this Placeable_Extractor __self) => (bool)_CanProcessTanks757602046.Value.Invoke(__self);
		public static void ProcessTanks(this Placeable_Extractor __self) => _ProcessTanks757602046.Value.Invoke(__self);
		public static void HandleSounds(this Placeable_Extractor __self, bool isActive) => _HandleSounds3450040886.Value.Invoke(__self, isActive);
		public static int HarvestAmount(this Placeable_Extractor __self) => (int)_HarvestAmount757602046.Value.Invoke(__self);
		public static bool CanHarvestOutputtedFuel(this Placeable_Extractor __self) => (bool)_CanHarvestOutputtedFuel757602046.Value.Invoke(__self);
		public static void HandlePartialHarvest(this Placeable_Extractor __self, Network_Player player) => _HandlePartialHarvest3461878659.Value.Invoke(__self, player);
		public static void HarvestOutput(this Placeable_Extractor __self, Network_Player player) => _HarvestOutput3461878659.Value.Invoke(__self, player);
		public static void SetOutPutEnabled(this Placeable_Extractor __self, bool value) => _SetOutPutEnabled3450040886.Value.Invoke(__self, value);

	}

	public static class PrivateAccessor_Message_Extractor_Create
	{

		private static readonly System.Lazy<MethodAccessor<Message_Extractor_Create>> _GetExtractorFromObjectIndex3471686765 =
				new System.Lazy<MethodAccessor<Message_Extractor_Create>>(() => MethodAccessor<Message_Extractor_Create>.Create("GetExtractorFromObjectIndex", typeof(Placeable_Extractor[]), typeof(uint)));

		public static Placeable_Extractor GetExtractorFromObjectIndex(this Message_Extractor_Create __self, Placeable_Extractor[] extractors, uint objectIndex) => (Placeable_Extractor)_GetExtractorFromObjectIndex3471686765.Value.Invoke(__self, extractors, objectIndex);

	}

	public static class PrivateAccessor_Placeable_Interactable
	{

		private static readonly System.Lazy<FieldAccessor<Placeable_Interactable, Block_Interactable>> _blockInteractable =
				new System.Lazy<FieldAccessor<Placeable_Interactable, Block_Interactable>>(() => FieldAccessor<Placeable_Interactable, Block_Interactable>.Create("blockInteractable"));
		private static readonly System.Lazy<FieldAccessor<Placeable_Interactable, InteractableButton_Networked>> _button =
				new System.Lazy<FieldAccessor<Placeable_Interactable, InteractableButton_Networked>>(() => FieldAccessor<Placeable_Interactable, InteractableButton_Networked>.Create("button"));
		private static readonly System.Lazy<FieldAccessor<Placeable_Interactable, int>> _currentIndex =
				new System.Lazy<FieldAccessor<Placeable_Interactable, int>>(() => FieldAccessor<Placeable_Interactable, int>.Create("currentIndex"));
		private static readonly System.Lazy<FieldAccessor<Placeable_Interactable, int>> _maxIndex =
				new System.Lazy<FieldAccessor<Placeable_Interactable, int>>(() => FieldAccessor<Placeable_Interactable, int>.Create("maxIndex"));
		private static readonly System.Lazy<FieldAccessor<Placeable_Interactable, bool>> _loopIndex =
				new System.Lazy<FieldAccessor<Placeable_Interactable, bool>>(() => FieldAccessor<Placeable_Interactable, bool>.Create("loopIndex"));
		private static readonly System.Lazy<FieldAccessor<Placeable_Interactable, float>> _cooldown =
				new System.Lazy<FieldAccessor<Placeable_Interactable, float>>(() => FieldAccessor<Placeable_Interactable, float>.Create("cooldown"));
		private static readonly System.Lazy<FieldAccessor<Placeable_Interactable, float>> _cooldownTimer =
				new System.Lazy<FieldAccessor<Placeable_Interactable, float>>(() => FieldAccessor<Placeable_Interactable, float>.Create("cooldownTimer"));

		public static Block_Interactable GetBlockInteractable(this Placeable_Interactable __self) => _blockInteractable.Value.GetValue(__self);
		public static void SetBlockInteractable(this Placeable_Interactable __self, Block_Interactable value) => _blockInteractable.Value.SetValue(__self, value);
		public static InteractableButton_Networked GetButton(this Placeable_Interactable __self) => _button.Value.GetValue(__self);
		public static void SetButton(this Placeable_Interactable __self, InteractableButton_Networked value) => _button.Value.SetValue(__self, value);
		public static int GetCurrentIndex(this Placeable_Interactable __self) => _currentIndex.Value.GetValue(__self);
		public static void SetCurrentIndex(this Placeable_Interactable __self, int value) => _currentIndex.Value.SetValue(__self, value);
		public static int GetMaxIndex(this Placeable_Interactable __self) => _maxIndex.Value.GetValue(__self);
		public static void SetMaxIndex(this Placeable_Interactable __self, int value) => _maxIndex.Value.SetValue(__self, value);
		public static bool GetLoopIndex(this Placeable_Interactable __self) => _loopIndex.Value.GetValue(__self);
		public static void SetLoopIndex(this Placeable_Interactable __self, bool value) => _loopIndex.Value.SetValue(__self, value);
		public static float GetCooldown(this Placeable_Interactable __self) => _cooldown.Value.GetValue(__self);
		public static void SetCooldown(this Placeable_Interactable __self, float value) => _cooldown.Value.SetValue(__self, value);
		public static float GetCooldownTimer(this Placeable_Interactable __self) => _cooldownTimer.Value.GetValue(__self);
		public static void SetCooldownTimer(this Placeable_Interactable __self, float value) => _cooldownTimer.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Placeable_Interactable>> _Start757602046 =
				new System.Lazy<MethodAccessor<Placeable_Interactable>>(() => MethodAccessor<Placeable_Interactable>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<Placeable_Interactable>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<Placeable_Interactable>>(() => MethodAccessor<Placeable_Interactable>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<Placeable_Interactable>> _Update757602046 =
				new System.Lazy<MethodAccessor<Placeable_Interactable>>(() => MethodAccessor<Placeable_Interactable>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<Placeable_Interactable>> _OnInteract3450040886 =
				new System.Lazy<MethodAccessor<Placeable_Interactable>>(() => MethodAccessor<Placeable_Interactable>.Create("OnInteract", typeof(bool)));
		private static readonly System.Lazy<MethodAccessor<Placeable_Interactable>> _BlockPlaced757602046 =
				new System.Lazy<MethodAccessor<Placeable_Interactable>>(() => MethodAccessor<Placeable_Interactable>.Create("BlockPlaced"));

		public static void Start(this Placeable_Interactable __self) => _Start757602046.Value.Invoke(__self);
		public static void OnDestroy(this Placeable_Interactable __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void Update(this Placeable_Interactable __self) => _Update757602046.Value.Invoke(__self);
		public static void OnInteract(this Placeable_Interactable __self, bool restoring) => _OnInteract3450040886.Value.Invoke(__self, restoring);
		public static void BlockPlaced(this Placeable_Interactable __self) => _BlockPlaced757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Placeable_Interactable_HonkHorn
	{

		private static readonly System.Lazy<FieldAccessor<Placeable_Interactable_HonkHorn, FMODUnity.StudioEventEmitter>> _emitter =
				new System.Lazy<FieldAccessor<Placeable_Interactable_HonkHorn, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<Placeable_Interactable_HonkHorn, FMODUnity.StudioEventEmitter>.Create("emitter"));

		public static FMODUnity.StudioEventEmitter GetEmitter(this Placeable_Interactable_HonkHorn __self) => _emitter.Value.GetValue(__self);
		public static void SetEmitter(this Placeable_Interactable_HonkHorn __self, FMODUnity.StudioEventEmitter value) => _emitter.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Placeable_Interactable_HonkHorn>> _OnInteract3450040886 =
				new System.Lazy<MethodAccessor<Placeable_Interactable_HonkHorn>>(() => MethodAccessor<Placeable_Interactable_HonkHorn>.Create("OnInteract", typeof(bool)));

		public static void OnInteract(this Placeable_Interactable_HonkHorn __self, bool restoring) => _OnInteract3450040886.Value.Invoke(__self, restoring);

	}

	public static class PrivateAccessor_Placeable_Interactable_OpenClose
	{

		private static readonly System.Lazy<FieldAccessor<Placeable_Interactable_OpenClose, UnityEngine.Animator>> _animator =
				new System.Lazy<FieldAccessor<Placeable_Interactable_OpenClose, UnityEngine.Animator>>(() => FieldAccessor<Placeable_Interactable_OpenClose, UnityEngine.Animator>.Create("animator"));
		private static readonly System.Lazy<FieldAccessor<Placeable_Interactable_OpenClose, string>> _boolParameter =
				new System.Lazy<FieldAccessor<Placeable_Interactable_OpenClose, string>>(() => FieldAccessor<Placeable_Interactable_OpenClose, string>.Create("boolParameter"));
		private static readonly System.Lazy<FieldAccessor<Placeable_Interactable_OpenClose, string>> _eventRef_open =
				new System.Lazy<FieldAccessor<Placeable_Interactable_OpenClose, string>>(() => FieldAccessor<Placeable_Interactable_OpenClose, string>.Create("eventRef_open"));
		private static readonly System.Lazy<FieldAccessor<Placeable_Interactable_OpenClose, string>> _eventRef_close =
				new System.Lazy<FieldAccessor<Placeable_Interactable_OpenClose, string>>(() => FieldAccessor<Placeable_Interactable_OpenClose, string>.Create("eventRef_close"));

		public static UnityEngine.Animator GetAnimator(this Placeable_Interactable_OpenClose __self) => _animator.Value.GetValue(__self);
		public static void SetAnimator(this Placeable_Interactable_OpenClose __self, UnityEngine.Animator value) => _animator.Value.SetValue(__self, value);
		public static string GetBoolParameter(this Placeable_Interactable_OpenClose __self) => _boolParameter.Value.GetValue(__self);
		public static void SetBoolParameter(this Placeable_Interactable_OpenClose __self, string value) => _boolParameter.Value.SetValue(__self, value);
		public static string GetEventRef_open(this Placeable_Interactable_OpenClose __self) => _eventRef_open.Value.GetValue(__self);
		public static void SetEventRef_open(this Placeable_Interactable_OpenClose __self, string value) => _eventRef_open.Value.SetValue(__self, value);
		public static string GetEventRef_close(this Placeable_Interactable_OpenClose __self) => _eventRef_close.Value.GetValue(__self);
		public static void SetEventRef_close(this Placeable_Interactable_OpenClose __self, string value) => _eventRef_close.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Placeable_Interactable_OpenClose>> _OnInteract3450040886 =
				new System.Lazy<MethodAccessor<Placeable_Interactable_OpenClose>>(() => MethodAccessor<Placeable_Interactable_OpenClose>.Create("OnInteract", typeof(bool)));
		private static readonly System.Lazy<MethodAccessor<Placeable_Interactable_OpenClose>> _BlockPlaced757602046 =
				new System.Lazy<MethodAccessor<Placeable_Interactable_OpenClose>>(() => MethodAccessor<Placeable_Interactable_OpenClose>.Create("BlockPlaced"));

		public static void OnInteract(this Placeable_Interactable_OpenClose __self, bool restoring) => _OnInteract3450040886.Value.Invoke(__self, restoring);
		public static void BlockPlaced(this Placeable_Interactable_OpenClose __self) => _BlockPlaced757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Placeable_RecyclerExtractor
	{

		private static readonly System.Lazy<FieldAccessor<Placeable_RecyclerExtractor, string>> _crusherDown =
				new System.Lazy<FieldAccessor<Placeable_RecyclerExtractor, string>>(() => FieldAccessor<Placeable_RecyclerExtractor, string>.Create("crusherDown"));
		private static readonly System.Lazy<FieldAccessor<Placeable_RecyclerExtractor, string>> _crusherReset =
				new System.Lazy<FieldAccessor<Placeable_RecyclerExtractor, string>>(() => FieldAccessor<Placeable_RecyclerExtractor, string>.Create("crusherReset"));

		public static string GetCrusherDown(this Placeable_RecyclerExtractor __self) => _crusherDown.Value.GetValue(__self);
		public static void SetCrusherDown(this Placeable_RecyclerExtractor __self, string value) => _crusherDown.Value.SetValue(__self, value);
		public static string GetCrusherReset(this Placeable_RecyclerExtractor __self) => _crusherReset.Value.GetValue(__self);
		public static void SetCrusherReset(this Placeable_RecyclerExtractor __self, string value) => _crusherReset.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Placeable_RecyclerExtractor>> _Update757602046 =
				new System.Lazy<MethodAccessor<Placeable_RecyclerExtractor>>(() => MethodAccessor<Placeable_RecyclerExtractor>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<Placeable_RecyclerExtractor>> _CanProcessTanks757602046 =
				new System.Lazy<MethodAccessor<Placeable_RecyclerExtractor>>(() => MethodAccessor<Placeable_RecyclerExtractor>.Create("CanProcessTanks"));
		private static readonly System.Lazy<MethodAccessor<Placeable_RecyclerExtractor>> _ProcessTanks757602046 =
				new System.Lazy<MethodAccessor<Placeable_RecyclerExtractor>>(() => MethodAccessor<Placeable_RecyclerExtractor>.Create("ProcessTanks"));
		private static readonly System.Lazy<MethodAccessor<Placeable_RecyclerExtractor>> _HarvestAmount757602046 =
				new System.Lazy<MethodAccessor<Placeable_RecyclerExtractor>>(() => MethodAccessor<Placeable_RecyclerExtractor>.Create("HarvestAmount"));
		private static readonly System.Lazy<MethodAccessor<Placeable_RecyclerExtractor>> _HandlePartialHarvest3461878659 =
				new System.Lazy<MethodAccessor<Placeable_RecyclerExtractor>>(() => MethodAccessor<Placeable_RecyclerExtractor>.Create("HandlePartialHarvest", typeof(Network_Player)));
		private static readonly System.Lazy<MethodAccessor<Placeable_RecyclerExtractor>> _OnAnimatorMessage3454057852 =
				new System.Lazy<MethodAccessor<Placeable_RecyclerExtractor>>(() => MethodAccessor<Placeable_RecyclerExtractor>.Create("OnAnimatorMessage", typeof(string)));

		public static void Update(this Placeable_RecyclerExtractor __self) => _Update757602046.Value.Invoke(__self);
		public static bool CanProcessTanks(this Placeable_RecyclerExtractor __self) => (bool)_CanProcessTanks757602046.Value.Invoke(__self);
		public static void ProcessTanks(this Placeable_RecyclerExtractor __self) => _ProcessTanks757602046.Value.Invoke(__self);
		public static int HarvestAmount(this Placeable_RecyclerExtractor __self) => (int)_HarvestAmount757602046.Value.Invoke(__self);
		public static void HandlePartialHarvest(this Placeable_RecyclerExtractor __self, Network_Player player) => _HandlePartialHarvest3461878659.Value.Invoke(__self, player);
		public static void OnAnimatorMessage(this Placeable_RecyclerExtractor __self, string msg) => _OnAnimatorMessage3454057852.Value.Invoke(__self, msg);

	}

	public static class PrivateAccessor_Placeable_Wardrobe
	{

		private static readonly System.Lazy<FieldAccessor<Placeable_Wardrobe, UnityEngine.Animator>> _animator =
				new System.Lazy<FieldAccessor<Placeable_Wardrobe, UnityEngine.Animator>>(() => FieldAccessor<Placeable_Wardrobe, UnityEngine.Animator>.Create("animator"));
		private static readonly System.Lazy<FieldAccessor<Placeable_Wardrobe, string>> _eventRef_Open =
				new System.Lazy<FieldAccessor<Placeable_Wardrobe, string>>(() => FieldAccessor<Placeable_Wardrobe, string>.Create("eventRef_Open"));
		private static readonly System.Lazy<FieldAccessor<Placeable_Wardrobe, string>> _eventRef_Close =
				new System.Lazy<FieldAccessor<Placeable_Wardrobe, string>>(() => FieldAccessor<Placeable_Wardrobe, string>.Create("eventRef_Close"));
		private static readonly System.Lazy<FieldAccessor<Placeable_Wardrobe, System.Collections.Generic.HashSet<Network_Player>>> _playersUsingIt =
				new System.Lazy<FieldAccessor<Placeable_Wardrobe, System.Collections.Generic.HashSet<Network_Player>>>(() => FieldAccessor<Placeable_Wardrobe, System.Collections.Generic.HashSet<Network_Player>>.Create("playersUsingIt"));

		public static UnityEngine.Animator GetAnimator(this Placeable_Wardrobe __self) => _animator.Value.GetValue(__self);
		public static void SetAnimator(this Placeable_Wardrobe __self, UnityEngine.Animator value) => _animator.Value.SetValue(__self, value);
		public static string GetEventRef_Open(this Placeable_Wardrobe __self) => _eventRef_Open.Value.GetValue(__self);
		public static void SetEventRef_Open(this Placeable_Wardrobe __self, string value) => _eventRef_Open.Value.SetValue(__self, value);
		public static string GetEventRef_Close(this Placeable_Wardrobe __self) => _eventRef_Close.Value.GetValue(__self);
		public static void SetEventRef_Close(this Placeable_Wardrobe __self, string value) => _eventRef_Close.Value.SetValue(__self, value);
		public static System.Collections.Generic.HashSet<Network_Player> GetPlayersUsingIt(this Placeable_Wardrobe __self) => _playersUsingIt.Value.GetValue(__self);
		public static void SetPlayersUsingIt(this Placeable_Wardrobe __self, System.Collections.Generic.HashSet<Network_Player> value) => _playersUsingIt.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Placeable_Wardrobe>> _Start757602046 =
				new System.Lazy<MethodAccessor<Placeable_Wardrobe>>(() => MethodAccessor<Placeable_Wardrobe>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<Placeable_Wardrobe>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<Placeable_Wardrobe>>(() => MethodAccessor<Placeable_Wardrobe>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<Placeable_Wardrobe>> _UpdateOpen757602046 =
				new System.Lazy<MethodAccessor<Placeable_Wardrobe>>(() => MethodAccessor<Placeable_Wardrobe>.Create("UpdateOpen"));

		public static void Start(this Placeable_Wardrobe __self) => _Start757602046.Value.Invoke(__self);
		public static void OnDestroy(this Placeable_Wardrobe __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void UpdateOpen(this Placeable_Wardrobe __self) => _UpdateOpen757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_PlayerSeat
	{

		private static readonly System.Lazy<FieldAccessor<PlayerSeat, Raft_Network>> __network =
				new System.Lazy<FieldAccessor<PlayerSeat, Raft_Network>>(() => FieldAccessor<PlayerSeat, Raft_Network>.Create("_network"));
		private static readonly System.Lazy<FieldAccessor<PlayerSeat, MonoBehaviour_ID_Network>> _receiver =
				new System.Lazy<FieldAccessor<PlayerSeat, MonoBehaviour_ID_Network>>(() => FieldAccessor<PlayerSeat, MonoBehaviour_ID_Network>.Create("receiver"));
		private static readonly System.Lazy<FieldAccessor<PlayerSeat, AttachPlayer[]>> _attachPlayerScripts =
				new System.Lazy<FieldAccessor<PlayerSeat, AttachPlayer[]>>(() => FieldAccessor<PlayerSeat, AttachPlayer[]>.Create("attachPlayerScripts"));
		private static readonly System.Lazy<FieldAccessor<PlayerSeat, bool>> _canLeave =
				new System.Lazy<FieldAccessor<PlayerSeat, bool>>(() => FieldAccessor<PlayerSeat, bool>.Create("canLeave"));
		private static readonly System.Lazy<FieldAccessor<PlayerSeat, bool>> _localPlayerIsSitting =
				new System.Lazy<FieldAccessor<PlayerSeat, bool>>(() => FieldAccessor<PlayerSeat, bool>.Create("localPlayerIsSitting"));

		public static Raft_Network Get_network(this PlayerSeat __self) => __network.Value.GetValue(__self);
		public static void Set_network(this PlayerSeat __self, Raft_Network value) => __network.Value.SetValue(__self, value);
		public static MonoBehaviour_ID_Network GetReceiver(this PlayerSeat __self) => _receiver.Value.GetValue(__self);
		public static void SetReceiver(this PlayerSeat __self, MonoBehaviour_ID_Network value) => _receiver.Value.SetValue(__self, value);
		public static AttachPlayer[] GetAttachPlayerScripts(this PlayerSeat __self) => _attachPlayerScripts.Value.GetValue(__self);
		public static void SetAttachPlayerScripts(this PlayerSeat __self, AttachPlayer[] value) => _attachPlayerScripts.Value.SetValue(__self, value);
		public static bool GetCanLeave(this PlayerSeat __self) => _canLeave.Value.GetValue(__self);
		public static void SetCanLeave(this PlayerSeat __self, bool value) => _canLeave.Value.SetValue(__self, value);
		public static bool GetLocalPlayerIsSitting(this PlayerSeat __self) => _localPlayerIsSitting.Value.GetValue(__self);
		public static void SetLocalPlayerIsSitting(this PlayerSeat __self, bool value) => _localPlayerIsSitting.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<PlayerSeat>> _Awake757602046 =
				new System.Lazy<MethodAccessor<PlayerSeat>>(() => MethodAccessor<PlayerSeat>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<PlayerSeat>> _Start757602046 =
				new System.Lazy<MethodAccessor<PlayerSeat>>(() => MethodAccessor<PlayerSeat>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<PlayerSeat>> _Update757602046 =
				new System.Lazy<MethodAccessor<PlayerSeat>>(() => MethodAccessor<PlayerSeat>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<PlayerSeat>> _LeaveSeat3461878659 =
				new System.Lazy<MethodAccessor<PlayerSeat>>(() => MethodAccessor<PlayerSeat>.Create("LeaveSeat", typeof(Network_Player)));
		private static readonly System.Lazy<MethodAccessor<PlayerSeat>> _LeaveSeat3451923620 =
				new System.Lazy<MethodAccessor<PlayerSeat>>(() => MethodAccessor<PlayerSeat>.Create("LeaveSeat", typeof(AttachPlayer)));

		public static void Awake(this PlayerSeat __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this PlayerSeat __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this PlayerSeat __self) => _Update757602046.Value.Invoke(__self);
		public static bool LeaveSeat(this PlayerSeat __self, Network_Player player) => (bool)_LeaveSeat3461878659.Value.Invoke(__self, player);
		public static bool LeaveSeat(this PlayerSeat __self, AttachPlayer attachScript) => (bool)_LeaveSeat3451923620.Value.Invoke(__self, attachScript);

	}

	public static class Private_PlayerSeat
	{

		private static readonly System.Lazy<StaticFieldAccessor<CanvasHelper>> _canvas =
				new System.Lazy<StaticFieldAccessor<CanvasHelper>>(() => StaticFieldAccessor<CanvasHelper>.Create(typeof(PlayerSeat), "canvas"));
		private static readonly System.Lazy<StaticFieldAccessor<Network_Player>> _localPlayer =
				new System.Lazy<StaticFieldAccessor<Network_Player>>(() => StaticFieldAccessor<Network_Player>.Create(typeof(PlayerSeat), "localPlayer"));

		public static CanvasHelper GetCanvas() => _canvas.Value.GetValue();
		public static void SetCanvas(CanvasHelper value) => _canvas.Value.SetValue(value);
		public static Network_Player GetLocalPlayer() => _localPlayer.Value.GetValue();
		public static void SetLocalPlayer(Network_Player value) => _localPlayer.Value.SetValue(value);

	}

	public static class PrivateAccessor_RadioPlayer
	{

		private static readonly System.Lazy<FieldAccessor<RadioPlayer, UnityEngine.MeshRenderer>> _renderer =
				new System.Lazy<FieldAccessor<RadioPlayer, UnityEngine.MeshRenderer>>(() => FieldAccessor<RadioPlayer, UnityEngine.MeshRenderer>.Create("renderer"));
		private static readonly System.Lazy<FieldAccessor<RadioPlayer, UnityEngine.MeshFilter>> _cassetteMeshFilter =
				new System.Lazy<FieldAccessor<RadioPlayer, UnityEngine.MeshFilter>>(() => FieldAccessor<RadioPlayer, UnityEngine.MeshFilter>.Create("cassetteMeshFilter"));
		private static readonly System.Lazy<FieldAccessor<RadioPlayer, UnityEngine.MeshRenderer>> _cassetteMeshRenderer =
				new System.Lazy<FieldAccessor<RadioPlayer, UnityEngine.MeshRenderer>>(() => FieldAccessor<RadioPlayer, UnityEngine.MeshRenderer>.Create("cassetteMeshRenderer"));
		private static readonly System.Lazy<FieldAccessor<RadioPlayer, UnityEngine.Animator>> _animator =
				new System.Lazy<FieldAccessor<RadioPlayer, UnityEngine.Animator>>(() => FieldAccessor<RadioPlayer, UnityEngine.Animator>.Create("animator"));
		private static readonly System.Lazy<FieldAccessor<RadioPlayer, RadioPlayer.CassetteConnection[]>> _cassetteConnections =
				new System.Lazy<FieldAccessor<RadioPlayer, RadioPlayer.CassetteConnection[]>>(() => FieldAccessor<RadioPlayer, RadioPlayer.CassetteConnection[]>.Create("cassetteConnections"));
		private static readonly System.Lazy<FieldAccessor<RadioPlayer, bool>> _radioIsOn =
				new System.Lazy<FieldAccessor<RadioPlayer, bool>>(() => FieldAccessor<RadioPlayer, bool>.Create("radioIsOn"));
		private static readonly System.Lazy<FieldAccessor<RadioPlayer, int>> _cassetteIndex =
				new System.Lazy<FieldAccessor<RadioPlayer, int>>(() => FieldAccessor<RadioPlayer, int>.Create("cassetteIndex"));
		private static readonly System.Lazy<FieldAccessor<RadioPlayer, InteractableButton_Networked>> _cassetteButton =
				new System.Lazy<FieldAccessor<RadioPlayer, InteractableButton_Networked>>(() => FieldAccessor<RadioPlayer, InteractableButton_Networked>.Create("cassetteButton"));
		private static readonly System.Lazy<FieldAccessor<RadioPlayer, FMODUnity.StudioEventEmitter>> _eventEmitter_radioOn =
				new System.Lazy<FieldAccessor<RadioPlayer, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<RadioPlayer, FMODUnity.StudioEventEmitter>.Create("eventEmitter_radioOn"));
		private static readonly System.Lazy<FieldAccessor<RadioPlayer, DisplayTextManager>> _displayText =
				new System.Lazy<FieldAccessor<RadioPlayer, DisplayTextManager>>(() => FieldAccessor<RadioPlayer, DisplayTextManager>.Create("displayText"));
		private static readonly System.Lazy<FieldAccessor<RadioPlayer, bool>> _isPlaced =
				new System.Lazy<FieldAccessor<RadioPlayer, bool>>(() => FieldAccessor<RadioPlayer, bool>.Create("isPlaced"));

		public static UnityEngine.MeshRenderer GetRenderer(this RadioPlayer __self) => _renderer.Value.GetValue(__self);
		public static void SetRenderer(this RadioPlayer __self, UnityEngine.MeshRenderer value) => _renderer.Value.SetValue(__self, value);
		public static UnityEngine.MeshFilter GetCassetteMeshFilter(this RadioPlayer __self) => _cassetteMeshFilter.Value.GetValue(__self);
		public static void SetCassetteMeshFilter(this RadioPlayer __self, UnityEngine.MeshFilter value) => _cassetteMeshFilter.Value.SetValue(__self, value);
		public static UnityEngine.MeshRenderer GetCassetteMeshRenderer(this RadioPlayer __self) => _cassetteMeshRenderer.Value.GetValue(__self);
		public static void SetCassetteMeshRenderer(this RadioPlayer __self, UnityEngine.MeshRenderer value) => _cassetteMeshRenderer.Value.SetValue(__self, value);
		public static UnityEngine.Animator GetAnimator(this RadioPlayer __self) => _animator.Value.GetValue(__self);
		public static void SetAnimator(this RadioPlayer __self, UnityEngine.Animator value) => _animator.Value.SetValue(__self, value);
		public static RadioPlayer.CassetteConnection[] GetCassetteConnections(this RadioPlayer __self) => _cassetteConnections.Value.GetValue(__self);
		public static void SetCassetteConnections(this RadioPlayer __self, RadioPlayer.CassetteConnection[] value) => _cassetteConnections.Value.SetValue(__self, value);
		public static bool GetRadioIsOn(this RadioPlayer __self) => _radioIsOn.Value.GetValue(__self);
		public static void SetRadioIsOn(this RadioPlayer __self, bool value) => _radioIsOn.Value.SetValue(__self, value);
		public static int GetCassetteIndex(this RadioPlayer __self) => _cassetteIndex.Value.GetValue(__self);
		public static void SetCassetteIndex(this RadioPlayer __self, int value) => _cassetteIndex.Value.SetValue(__self, value);
		public static InteractableButton_Networked GetCassetteButton(this RadioPlayer __self) => _cassetteButton.Value.GetValue(__self);
		public static void SetCassetteButton(this RadioPlayer __self, InteractableButton_Networked value) => _cassetteButton.Value.SetValue(__self, value);
		public static FMODUnity.StudioEventEmitter GetEventEmitter_radioOn(this RadioPlayer __self) => _eventEmitter_radioOn.Value.GetValue(__self);
		public static void SetEventEmitter_radioOn(this RadioPlayer __self, FMODUnity.StudioEventEmitter value) => _eventEmitter_radioOn.Value.SetValue(__self, value);
		public static DisplayTextManager GetDisplayText(this RadioPlayer __self) => _displayText.Value.GetValue(__self);
		public static void SetDisplayText(this RadioPlayer __self, DisplayTextManager value) => _displayText.Value.SetValue(__self, value);
		public static bool GetIsPlaced(this RadioPlayer __self) => _isPlaced.Value.GetValue(__self);
		public static void SetIsPlaced(this RadioPlayer __self, bool value) => _isPlaced.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<RadioPlayer>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<RadioPlayer>>(() => MethodAccessor<RadioPlayer>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<RadioPlayer>> _HandleTurningOnAndOff757602046 =
				new System.Lazy<MethodAccessor<RadioPlayer>>(() => MethodAccessor<RadioPlayer>.Create("HandleTurningOnAndOff"));
		private static readonly System.Lazy<MethodAccessor<RadioPlayer>> _UpdateRadiomesh757602046 =
				new System.Lazy<MethodAccessor<RadioPlayer>>(() => MethodAccessor<RadioPlayer>.Create("UpdateRadiomesh"));
		private static readonly System.Lazy<MethodAccessor<RadioPlayer>> _OnBlockPlaced757602046 =
				new System.Lazy<MethodAccessor<RadioPlayer>>(() => MethodAccessor<RadioPlayer>.Create("OnBlockPlaced"));
		private static readonly System.Lazy<MethodAccessor<RadioPlayer>> _InsertCassette1191434327 =
				new System.Lazy<MethodAccessor<RadioPlayer>>(() => MethodAccessor<RadioPlayer>.Create("InsertCassette", typeof(Network_Player), typeof(int)));
		private static readonly System.Lazy<MethodAccessor<RadioPlayer>> _TakeCassette3461878659 =
				new System.Lazy<MethodAccessor<RadioPlayer>>(() => MethodAccessor<RadioPlayer>.Create("TakeCassette", typeof(Network_Player)));

		public static void OnDestroy(this RadioPlayer __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void HandleTurningOnAndOff(this RadioPlayer __self) => _HandleTurningOnAndOff757602046.Value.Invoke(__self);
		public static void UpdateRadiomesh(this RadioPlayer __self) => _UpdateRadiomesh757602046.Value.Invoke(__self);
		public static void OnBlockPlaced(this RadioPlayer __self) => _OnBlockPlaced757602046.Value.Invoke(__self);
		public static bool InsertCassette(this RadioPlayer __self, Network_Player interactingPlayer, int cassetteIndex) => (bool)_InsertCassette1191434327.Value.Invoke(__self, interactingPlayer, cassetteIndex);
		public static bool TakeCassette(this RadioPlayer __self, Network_Player interactingPlayer) => (bool)_TakeCassette3461878659.Value.Invoke(__self, interactingPlayer);

	}

	public static class Private_RadioPlayer
	{

		private static readonly System.Lazy<StaticFieldAccessor<RadioStation>> _radioStation =
				new System.Lazy<StaticFieldAccessor<RadioStation>>(() => StaticFieldAccessor<RadioStation>.Create(typeof(RadioPlayer), "radioStation"));
		private static readonly System.Lazy<StaticFieldAccessor<Network_Player>> _localPlayer =
				new System.Lazy<StaticFieldAccessor<Network_Player>>(() => StaticFieldAccessor<Network_Player>.Create(typeof(RadioPlayer), "localPlayer"));

		public static RadioStation GetRadioStation() => _radioStation.Value.GetValue();
		public static void SetRadioStation(RadioStation value) => _radioStation.Value.SetValue(value);
		public static Network_Player GetLocalPlayer() => _localPlayer.Value.GetValue();
		public static void SetLocalPlayer(Network_Player value) => _localPlayer.Value.SetValue(value);

	}

	public static class PrivateAccessor_Message_RadioPlayer_Create
	{

		private static readonly System.Lazy<FieldAccessor<Message_RadioPlayer_Create, RGD_RadioPlayer[]>> _rgdRadioPlayers =
				new System.Lazy<FieldAccessor<Message_RadioPlayer_Create, RGD_RadioPlayer[]>>(() => FieldAccessor<Message_RadioPlayer_Create, RGD_RadioPlayer[]>.Create("rgdRadioPlayers"));

		public static RGD_RadioPlayer[] GetRgdRadioPlayers(this Message_RadioPlayer_Create __self) => _rgdRadioPlayers.Value.GetValue(__self);
		public static void SetRgdRadioPlayers(this Message_RadioPlayer_Create __self, RGD_RadioPlayer[] value) => _rgdRadioPlayers.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_RadioStation
	{

		private static readonly System.Lazy<FieldAccessor<RadioStation, float>> _maxDifference =
				new System.Lazy<FieldAccessor<RadioStation, float>>(() => FieldAccessor<RadioStation, float>.Create("maxDifference"));
		private static readonly System.Lazy<FieldAccessor<RadioStation, float>> _currentCalculatedRadioTime =
				new System.Lazy<FieldAccessor<RadioStation, float>>(() => FieldAccessor<RadioStation, float>.Create("currentCalculatedRadioTime"));
		private static readonly System.Lazy<FieldAccessor<RadioStation, Network_Water>> _water =
				new System.Lazy<FieldAccessor<RadioStation, Network_Water>>(() => FieldAccessor<RadioStation, Network_Water>.Create("water"));

		public static float GetMaxDifference(this RadioStation __self) => _maxDifference.Value.GetValue(__self);
		public static void SetMaxDifference(this RadioStation __self, float value) => _maxDifference.Value.SetValue(__self, value);
		public static float GetCurrentCalculatedRadioTime(this RadioStation __self) => _currentCalculatedRadioTime.Value.GetValue(__self);
		public static void SetCurrentCalculatedRadioTime(this RadioStation __self, float value) => _currentCalculatedRadioTime.Value.SetValue(__self, value);
		public static Network_Water GetWater(this RadioStation __self) => _water.Value.GetValue(__self);
		public static void SetWater(this RadioStation __self, Network_Water value) => _water.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<RadioStation>> _Awake757602046 =
				new System.Lazy<MethodAccessor<RadioStation>>(() => MethodAccessor<RadioStation>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<RadioStation>> _Start757602046 =
				new System.Lazy<MethodAccessor<RadioStation>>(() => MethodAccessor<RadioStation>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<RadioStation>> _FixedUpdate757602046 =
				new System.Lazy<MethodAccessor<RadioStation>>(() => MethodAccessor<RadioStation>.Create("FixedUpdate"));
		private static readonly System.Lazy<MethodAccessor<RadioStation>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<RadioStation>>(() => MethodAccessor<RadioStation>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<RadioStation>> _GetRadioTimeProgress757602046 =
				new System.Lazy<MethodAccessor<RadioStation>>(() => MethodAccessor<RadioStation>.Create("GetRadioTimeProgress"));
		private static readonly System.Lazy<MethodAccessor<RadioStation>> _CalculateRadioTimeWithWater3486905475 =
				new System.Lazy<MethodAccessor<RadioStation>>(() => MethodAccessor<RadioStation>.Create("CalculateRadioTimeWithWater", typeof(float)));
		private static readonly System.Lazy<MethodAccessor<RadioStation>> _SyncRadioTimeToWaterTime757602046 =
				new System.Lazy<MethodAccessor<RadioStation>>(() => MethodAccessor<RadioStation>.Create("SyncRadioTimeToWaterTime"));

		public static void Awake(this RadioStation __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this RadioStation __self) => _Start757602046.Value.Invoke(__self);
		public static void FixedUpdate(this RadioStation __self) => _FixedUpdate757602046.Value.Invoke(__self);
		public static void OnDestroy(this RadioStation __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static float GetRadioTimeProgress(this RadioStation __self) => (float)_GetRadioTimeProgress757602046.Value.Invoke(__self);
		public static float CalculateRadioTimeWithWater(this RadioStation __self, float waterTime) => (float)_CalculateRadioTimeWithWater3486905475.Value.Invoke(__self, waterTime);
		public static void SyncRadioTimeToWaterTime(this RadioStation __self) => _SyncRadioTimeToWaterTime757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Reciever
	{

		private static readonly System.Lazy<FieldAccessor<Reciever, RecieverFrequency>> _currentFrequency =
				new System.Lazy<FieldAccessor<Reciever, RecieverFrequency>>(() => FieldAccessor<Reciever, RecieverFrequency>.Create("currentFrequency"));
		private static readonly System.Lazy<FieldAccessor<Reciever, System.Collections.Generic.List<ChunkPointType>>> _typesToDisplay =
				new System.Lazy<FieldAccessor<Reciever, System.Collections.Generic.List<ChunkPointType>>>(() => FieldAccessor<Reciever, System.Collections.Generic.List<ChunkPointType>>.Create("typesToDisplay"));
		private static readonly System.Lazy<FieldAccessor<Reciever, Reciever_Dot>> _dotPrefab =
				new System.Lazy<FieldAccessor<Reciever, Reciever_Dot>>(() => FieldAccessor<Reciever, Reciever_Dot>.Create("dotPrefab"));
		private static readonly System.Lazy<FieldAccessor<Reciever, Interval_Float>> _requiredAntennaDistance =
				new System.Lazy<FieldAccessor<Reciever, Interval_Float>>(() => FieldAccessor<Reciever, Interval_Float>.Create("requiredAntennaDistance"));
		private static readonly System.Lazy<FieldAccessor<Reciever, float>> _minDistanceBetweenAntennas =
				new System.Lazy<FieldAccessor<Reciever, float>>(() => FieldAccessor<Reciever, float>.Create("minDistanceBetweenAntennas"));
		private static readonly System.Lazy<FieldAccessor<Reciever, int>> _antennasRequired =
				new System.Lazy<FieldAccessor<Reciever, int>>(() => FieldAccessor<Reciever, int>.Create("antennasRequired"));
		private static readonly System.Lazy<FieldAccessor<Reciever, float>> _radarNoticePointLength =
				new System.Lazy<FieldAccessor<Reciever, float>>(() => FieldAccessor<Reciever, float>.Create("radarNoticePointLength"));
		private static readonly System.Lazy<FieldAccessor<Reciever, float>> _radarLength =
				new System.Lazy<FieldAccessor<Reciever, float>>(() => FieldAccessor<Reciever, float>.Create("radarLength"));
		private static readonly System.Lazy<FieldAccessor<Reciever, float>> _radarUIWidth =
				new System.Lazy<FieldAccessor<Reciever, float>>(() => FieldAccessor<Reciever, float>.Create("radarUIWidth"));
		private static readonly System.Lazy<FieldAccessor<Reciever, BlockButton>> _button_Cycle =
				new System.Lazy<FieldAccessor<Reciever, BlockButton>>(() => FieldAccessor<Reciever, BlockButton>.Create("button_Cycle"));
		private static readonly System.Lazy<FieldAccessor<Reciever, BlockButton>> _button_Up =
				new System.Lazy<FieldAccessor<Reciever, BlockButton>>(() => FieldAccessor<Reciever, BlockButton>.Create("button_Up"));
		private static readonly System.Lazy<FieldAccessor<Reciever, BlockButton>> _button_Down =
				new System.Lazy<FieldAccessor<Reciever, BlockButton>>(() => FieldAccessor<Reciever, BlockButton>.Create("button_Down"));
		private static readonly System.Lazy<FieldAccessor<Reciever, AntennaPanel[]>> _antennaPanels =
				new System.Lazy<FieldAccessor<Reciever, AntennaPanel[]>>(() => FieldAccessor<Reciever, AntennaPanel[]>.Create("antennaPanels"));
		private static readonly System.Lazy<FieldAccessor<Reciever, UnityEngine.GameObject>> _altitudeSection =
				new System.Lazy<FieldAccessor<Reciever, UnityEngine.GameObject>>(() => FieldAccessor<Reciever, UnityEngine.GameObject>.Create("altitudeSection"));
		private static readonly System.Lazy<FieldAccessor<Reciever, UnityEngine.GameObject>> _canvasSection =
				new System.Lazy<FieldAccessor<Reciever, UnityEngine.GameObject>>(() => FieldAccessor<Reciever, UnityEngine.GameObject>.Create("canvasSection"));
		private static readonly System.Lazy<FieldAccessor<Reciever, UnityEngine.GameObject>> _antennaSection =
				new System.Lazy<FieldAccessor<Reciever, UnityEngine.GameObject>>(() => FieldAccessor<Reciever, UnityEngine.GameObject>.Create("antennaSection"));
		private static readonly System.Lazy<FieldAccessor<Reciever, UnityEngine.GameObject>> _radarSection =
				new System.Lazy<FieldAccessor<Reciever, UnityEngine.GameObject>>(() => FieldAccessor<Reciever, UnityEngine.GameObject>.Create("radarSection"));
		private static readonly System.Lazy<FieldAccessor<Reciever, UnityEngine.GameObject>> _noFrequencySection =
				new System.Lazy<FieldAccessor<Reciever, UnityEngine.GameObject>>(() => FieldAccessor<Reciever, UnityEngine.GameObject>.Create("noFrequencySection"));
		private static readonly System.Lazy<FieldAccessor<Reciever, UnityEngine.GameObject>> _updateRequirecSection =
				new System.Lazy<FieldAccessor<Reciever, UnityEngine.GameObject>>(() => FieldAccessor<Reciever, UnityEngine.GameObject>.Create("updateRequirecSection"));
		private static readonly System.Lazy<FieldAccessor<Reciever, UnityEngine.GameObject>> _numberSection =
				new System.Lazy<FieldAccessor<Reciever, UnityEngine.GameObject>>(() => FieldAccessor<Reciever, UnityEngine.GameObject>.Create("numberSection"));
		private static readonly System.Lazy<FieldAccessor<Reciever, UnityEngine.GameObject>> _lightGreen =
				new System.Lazy<FieldAccessor<Reciever, UnityEngine.GameObject>>(() => FieldAccessor<Reciever, UnityEngine.GameObject>.Create("lightGreen"));
		private static readonly System.Lazy<FieldAccessor<Reciever, UnityEngine.GameObject>> _lightRed =
				new System.Lazy<FieldAccessor<Reciever, UnityEngine.GameObject>>(() => FieldAccessor<Reciever, UnityEngine.GameObject>.Create("lightRed"));
		private static readonly System.Lazy<FieldAccessor<Reciever, UnityEngine.GameObject>> _lightOff =
				new System.Lazy<FieldAccessor<Reciever, UnityEngine.GameObject>>(() => FieldAccessor<Reciever, UnityEngine.GameObject>.Create("lightOff"));
		private static readonly System.Lazy<FieldAccessor<Reciever, UnityEngine.RectTransform>> _dotParent =
				new System.Lazy<FieldAccessor<Reciever, UnityEngine.RectTransform>>(() => FieldAccessor<Reciever, UnityEngine.RectTransform>.Create("dotParent"));
		private static readonly System.Lazy<FieldAccessor<Reciever, UnityEngine.UI.Slider>> _batterySlider =
				new System.Lazy<FieldAccessor<Reciever, UnityEngine.UI.Slider>>(() => FieldAccessor<Reciever, UnityEngine.UI.Slider>.Create("batterySlider"));
		private static readonly System.Lazy<FieldAccessor<Reciever, TMPro.TextMeshPro[]>> _frequencyTextNumbers =
				new System.Lazy<FieldAccessor<Reciever, TMPro.TextMeshPro[]>>(() => FieldAccessor<Reciever, TMPro.TextMeshPro[]>.Create("frequencyTextNumbers"));
		private static readonly System.Lazy<FieldAccessor<Reciever, UnityEngine.Transform>> _frequencyArrow =
				new System.Lazy<FieldAccessor<Reciever, UnityEngine.Transform>>(() => FieldAccessor<Reciever, UnityEngine.Transform>.Create("frequencyArrow"));
		private static readonly System.Lazy<FieldAccessor<Reciever, float>> _frequencyArrowSpeed =
				new System.Lazy<FieldAccessor<Reciever, float>>(() => FieldAccessor<Reciever, float>.Create("frequencyArrowSpeed"));
		private static readonly System.Lazy<FieldAccessor<Reciever, UnityEngine.Animator>> _buttonUpAnimator =
				new System.Lazy<FieldAccessor<Reciever, UnityEngine.Animator>>(() => FieldAccessor<Reciever, UnityEngine.Animator>.Create("buttonUpAnimator"));
		private static readonly System.Lazy<FieldAccessor<Reciever, UnityEngine.Animator>> _buttonDownAnimator =
				new System.Lazy<FieldAccessor<Reciever, UnityEngine.Animator>>(() => FieldAccessor<Reciever, UnityEngine.Animator>.Create("buttonDownAnimator"));
		private static readonly System.Lazy<FieldAccessor<Reciever, UnityEngine.Animator>> _leverAnimator =
				new System.Lazy<FieldAccessor<Reciever, UnityEngine.Animator>>(() => FieldAccessor<Reciever, UnityEngine.Animator>.Create("leverAnimator"));
		private static readonly System.Lazy<FieldAccessor<Reciever, string>> _eventRef_radarOn =
				new System.Lazy<FieldAccessor<Reciever, string>>(() => FieldAccessor<Reciever, string>.Create("eventRef_radarOn"));
		private static readonly System.Lazy<FieldAccessor<Reciever, string>> _eventRef_radarOff =
				new System.Lazy<FieldAccessor<Reciever, string>>(() => FieldAccessor<Reciever, string>.Create("eventRef_radarOff"));
		private static readonly System.Lazy<FieldAccessor<Reciever, string>> _eventRef_radarJingle =
				new System.Lazy<FieldAccessor<Reciever, string>>(() => FieldAccessor<Reciever, string>.Create("eventRef_radarJingle"));
		private static readonly System.Lazy<FieldAccessor<Reciever, string>> _eventRef_radarSearch =
				new System.Lazy<FieldAccessor<Reciever, string>>(() => FieldAccessor<Reciever, string>.Create("eventRef_radarSearch"));
		private static readonly System.Lazy<FieldAccessor<Reciever, string>> _eventRef_radarBip =
				new System.Lazy<FieldAccessor<Reciever, string>>(() => FieldAccessor<Reciever, string>.Create("eventRef_radarBip"));
		private static readonly System.Lazy<FieldAccessor<Reciever, string>> _eventRef_radarButton =
				new System.Lazy<FieldAccessor<Reciever, string>>(() => FieldAccessor<Reciever, string>.Create("eventRef_radarButton"));
		private static readonly System.Lazy<FieldAccessor<Reciever, string>> _eventRef_radarLever =
				new System.Lazy<FieldAccessor<Reciever, string>>(() => FieldAccessor<Reciever, string>.Create("eventRef_radarLever"));
		private static readonly System.Lazy<FieldAccessor<Reciever, FMODUnity.StudioEventEmitter>> _eventEmitter_batteryHum =
				new System.Lazy<FieldAccessor<Reciever, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<Reciever, FMODUnity.StudioEventEmitter>.Create("eventEmitter_batteryHum"));
		private static readonly System.Lazy<FieldAccessor<Reciever, System.Collections.Generic.List<Reciever_Dot>>> _radarPoints =
				new System.Lazy<FieldAccessor<Reciever, System.Collections.Generic.List<Reciever_Dot>>>(() => FieldAccessor<Reciever, System.Collections.Generic.List<Reciever_Dot>>.Create("radarPoints"));
		private static readonly System.Lazy<FieldAccessor<Reciever, ChunkManager>> _chunkManager =
				new System.Lazy<FieldAccessor<Reciever, ChunkManager>>(() => FieldAccessor<Reciever, ChunkManager>.Create("chunkManager"));
		private static readonly System.Lazy<FieldAccessor<Reciever, bool>> _hasBeenPlaced =
				new System.Lazy<FieldAccessor<Reciever, bool>>(() => FieldAccessor<Reciever, bool>.Create("hasBeenPlaced"));
		private static readonly System.Lazy<FieldAccessor<Reciever, bool>> _active =
				new System.Lazy<FieldAccessor<Reciever, bool>>(() => FieldAccessor<Reciever, bool>.Create("active"));
		private static readonly System.Lazy<FieldAccessor<Reciever, bool>> _prevHasSignal =
				new System.Lazy<FieldAccessor<Reciever, bool>>(() => FieldAccessor<Reciever, bool>.Create("prevHasSignal"));
		private static readonly System.Lazy<FieldAccessor<Reciever, bool>> _isCurrentlyShowingRadarDot =
				new System.Lazy<FieldAccessor<Reciever, bool>>(() => FieldAccessor<Reciever, bool>.Create("isCurrentlyShowingRadarDot"));
		private static readonly System.Lazy<FieldAccessor<Reciever, int>> _frequencyNumberIndex =
				new System.Lazy<FieldAccessor<Reciever, int>>(() => FieldAccessor<Reciever, int>.Create("frequencyNumberIndex"));
		private static readonly System.Lazy<FieldAccessor<Reciever, bool>> _addNoteBookNoteOnActivation =
				new System.Lazy<FieldAccessor<Reciever, bool>>(() => FieldAccessor<Reciever, bool>.Create("addNoteBookNoteOnActivation"));

		public static RecieverFrequency GetCurrentFrequency(this Reciever __self) => _currentFrequency.Value.GetValue(__self);
		public static void SetCurrentFrequency(this Reciever __self, RecieverFrequency value) => _currentFrequency.Value.SetValue(__self, value);
		public static System.Collections.Generic.List<ChunkPointType> GetTypesToDisplay(this Reciever __self) => _typesToDisplay.Value.GetValue(__self);
		public static void SetTypesToDisplay(this Reciever __self, System.Collections.Generic.List<ChunkPointType> value) => _typesToDisplay.Value.SetValue(__self, value);
		public static Reciever_Dot GetDotPrefab(this Reciever __self) => _dotPrefab.Value.GetValue(__self);
		public static void SetDotPrefab(this Reciever __self, Reciever_Dot value) => _dotPrefab.Value.SetValue(__self, value);
		public static Interval_Float GetRequiredAntennaDistance(this Reciever __self) => _requiredAntennaDistance.Value.GetValue(__self);
		public static void SetRequiredAntennaDistance(this Reciever __self, Interval_Float value) => _requiredAntennaDistance.Value.SetValue(__self, value);
		public static float GetMinDistanceBetweenAntennas(this Reciever __self) => _minDistanceBetweenAntennas.Value.GetValue(__self);
		public static void SetMinDistanceBetweenAntennas(this Reciever __self, float value) => _minDistanceBetweenAntennas.Value.SetValue(__self, value);
		public static int GetAntennasRequired(this Reciever __self) => _antennasRequired.Value.GetValue(__self);
		public static void SetAntennasRequired(this Reciever __self, int value) => _antennasRequired.Value.SetValue(__self, value);
		public static float GetRadarNoticePointLength(this Reciever __self) => _radarNoticePointLength.Value.GetValue(__self);
		public static void SetRadarNoticePointLength(this Reciever __self, float value) => _radarNoticePointLength.Value.SetValue(__self, value);
		public static float GetRadarLength(this Reciever __self) => _radarLength.Value.GetValue(__self);
		public static void SetRadarLength(this Reciever __self, float value) => _radarLength.Value.SetValue(__self, value);
		public static float GetRadarUIWidth(this Reciever __self) => _radarUIWidth.Value.GetValue(__self);
		public static void SetRadarUIWidth(this Reciever __self, float value) => _radarUIWidth.Value.SetValue(__self, value);
		public static BlockButton GetButton_Cycle(this Reciever __self) => _button_Cycle.Value.GetValue(__self);
		public static void SetButton_Cycle(this Reciever __self, BlockButton value) => _button_Cycle.Value.SetValue(__self, value);
		public static BlockButton GetButton_Up(this Reciever __self) => _button_Up.Value.GetValue(__self);
		public static void SetButton_Up(this Reciever __self, BlockButton value) => _button_Up.Value.SetValue(__self, value);
		public static BlockButton GetButton_Down(this Reciever __self) => _button_Down.Value.GetValue(__self);
		public static void SetButton_Down(this Reciever __self, BlockButton value) => _button_Down.Value.SetValue(__self, value);
		public static AntennaPanel[] GetAntennaPanels(this Reciever __self) => _antennaPanels.Value.GetValue(__self);
		public static void SetAntennaPanels(this Reciever __self, AntennaPanel[] value) => _antennaPanels.Value.SetValue(__self, value);
		public static UnityEngine.GameObject GetAltitudeSection(this Reciever __self) => _altitudeSection.Value.GetValue(__self);
		public static void SetAltitudeSection(this Reciever __self, UnityEngine.GameObject value) => _altitudeSection.Value.SetValue(__self, value);
		public static UnityEngine.GameObject GetCanvasSection(this Reciever __self) => _canvasSection.Value.GetValue(__self);
		public static void SetCanvasSection(this Reciever __self, UnityEngine.GameObject value) => _canvasSection.Value.SetValue(__self, value);
		public static UnityEngine.GameObject GetAntennaSection(this Reciever __self) => _antennaSection.Value.GetValue(__self);
		public static void SetAntennaSection(this Reciever __self, UnityEngine.GameObject value) => _antennaSection.Value.SetValue(__self, value);
		public static UnityEngine.GameObject GetRadarSection(this Reciever __self) => _radarSection.Value.GetValue(__self);
		public static void SetRadarSection(this Reciever __self, UnityEngine.GameObject value) => _radarSection.Value.SetValue(__self, value);
		public static UnityEngine.GameObject GetNoFrequencySection(this Reciever __self) => _noFrequencySection.Value.GetValue(__self);
		public static void SetNoFrequencySection(this Reciever __self, UnityEngine.GameObject value) => _noFrequencySection.Value.SetValue(__self, value);
		public static UnityEngine.GameObject GetUpdateRequirecSection(this Reciever __self) => _updateRequirecSection.Value.GetValue(__self);
		public static void SetUpdateRequirecSection(this Reciever __self, UnityEngine.GameObject value) => _updateRequirecSection.Value.SetValue(__self, value);
		public static UnityEngine.GameObject GetNumberSection(this Reciever __self) => _numberSection.Value.GetValue(__self);
		public static void SetNumberSection(this Reciever __self, UnityEngine.GameObject value) => _numberSection.Value.SetValue(__self, value);
		public static UnityEngine.GameObject GetLightGreen(this Reciever __self) => _lightGreen.Value.GetValue(__self);
		public static void SetLightGreen(this Reciever __self, UnityEngine.GameObject value) => _lightGreen.Value.SetValue(__self, value);
		public static UnityEngine.GameObject GetLightRed(this Reciever __self) => _lightRed.Value.GetValue(__self);
		public static void SetLightRed(this Reciever __self, UnityEngine.GameObject value) => _lightRed.Value.SetValue(__self, value);
		public static UnityEngine.GameObject GetLightOff(this Reciever __self) => _lightOff.Value.GetValue(__self);
		public static void SetLightOff(this Reciever __self, UnityEngine.GameObject value) => _lightOff.Value.SetValue(__self, value);
		public static UnityEngine.RectTransform GetDotParent(this Reciever __self) => _dotParent.Value.GetValue(__self);
		public static void SetDotParent(this Reciever __self, UnityEngine.RectTransform value) => _dotParent.Value.SetValue(__self, value);
		public static UnityEngine.UI.Slider GetBatterySlider(this Reciever __self) => _batterySlider.Value.GetValue(__self);
		public static void SetBatterySlider(this Reciever __self, UnityEngine.UI.Slider value) => _batterySlider.Value.SetValue(__self, value);
		public static TMPro.TextMeshPro[] GetFrequencyTextNumbers(this Reciever __self) => _frequencyTextNumbers.Value.GetValue(__self);
		public static void SetFrequencyTextNumbers(this Reciever __self, TMPro.TextMeshPro[] value) => _frequencyTextNumbers.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetFrequencyArrow(this Reciever __self) => _frequencyArrow.Value.GetValue(__self);
		public static void SetFrequencyArrow(this Reciever __self, UnityEngine.Transform value) => _frequencyArrow.Value.SetValue(__self, value);
		public static float GetFrequencyArrowSpeed(this Reciever __self) => _frequencyArrowSpeed.Value.GetValue(__self);
		public static void SetFrequencyArrowSpeed(this Reciever __self, float value) => _frequencyArrowSpeed.Value.SetValue(__self, value);
		public static UnityEngine.Animator GetButtonUpAnimator(this Reciever __self) => _buttonUpAnimator.Value.GetValue(__self);
		public static void SetButtonUpAnimator(this Reciever __self, UnityEngine.Animator value) => _buttonUpAnimator.Value.SetValue(__self, value);
		public static UnityEngine.Animator GetButtonDownAnimator(this Reciever __self) => _buttonDownAnimator.Value.GetValue(__self);
		public static void SetButtonDownAnimator(this Reciever __self, UnityEngine.Animator value) => _buttonDownAnimator.Value.SetValue(__self, value);
		public static UnityEngine.Animator GetLeverAnimator(this Reciever __self) => _leverAnimator.Value.GetValue(__self);
		public static void SetLeverAnimator(this Reciever __self, UnityEngine.Animator value) => _leverAnimator.Value.SetValue(__self, value);
		public static string GetEventRef_radarOn(this Reciever __self) => _eventRef_radarOn.Value.GetValue(__self);
		public static void SetEventRef_radarOn(this Reciever __self, string value) => _eventRef_radarOn.Value.SetValue(__self, value);
		public static string GetEventRef_radarOff(this Reciever __self) => _eventRef_radarOff.Value.GetValue(__self);
		public static void SetEventRef_radarOff(this Reciever __self, string value) => _eventRef_radarOff.Value.SetValue(__self, value);
		public static string GetEventRef_radarJingle(this Reciever __self) => _eventRef_radarJingle.Value.GetValue(__self);
		public static void SetEventRef_radarJingle(this Reciever __self, string value) => _eventRef_radarJingle.Value.SetValue(__self, value);
		public static string GetEventRef_radarSearch(this Reciever __self) => _eventRef_radarSearch.Value.GetValue(__self);
		public static void SetEventRef_radarSearch(this Reciever __self, string value) => _eventRef_radarSearch.Value.SetValue(__self, value);
		public static string GetEventRef_radarBip(this Reciever __self) => _eventRef_radarBip.Value.GetValue(__self);
		public static void SetEventRef_radarBip(this Reciever __self, string value) => _eventRef_radarBip.Value.SetValue(__self, value);
		public static string GetEventRef_radarButton(this Reciever __self) => _eventRef_radarButton.Value.GetValue(__self);
		public static void SetEventRef_radarButton(this Reciever __self, string value) => _eventRef_radarButton.Value.SetValue(__self, value);
		public static string GetEventRef_radarLever(this Reciever __self) => _eventRef_radarLever.Value.GetValue(__self);
		public static void SetEventRef_radarLever(this Reciever __self, string value) => _eventRef_radarLever.Value.SetValue(__self, value);
		public static FMODUnity.StudioEventEmitter GetEventEmitter_batteryHum(this Reciever __self) => _eventEmitter_batteryHum.Value.GetValue(__self);
		public static void SetEventEmitter_batteryHum(this Reciever __self, FMODUnity.StudioEventEmitter value) => _eventEmitter_batteryHum.Value.SetValue(__self, value);
		public static System.Collections.Generic.List<Reciever_Dot> GetRadarPoints(this Reciever __self) => _radarPoints.Value.GetValue(__self);
		public static void SetRadarPoints(this Reciever __self, System.Collections.Generic.List<Reciever_Dot> value) => _radarPoints.Value.SetValue(__self, value);
		public static ChunkManager GetChunkManager(this Reciever __self) => _chunkManager.Value.GetValue(__self);
		public static void SetChunkManager(this Reciever __self, ChunkManager value) => _chunkManager.Value.SetValue(__self, value);
		public static bool GetHasBeenPlaced(this Reciever __self) => _hasBeenPlaced.Value.GetValue(__self);
		public static void SetHasBeenPlaced(this Reciever __self, bool value) => _hasBeenPlaced.Value.SetValue(__self, value);
		public static bool GetActive(this Reciever __self) => _active.Value.GetValue(__self);
		public static void SetActive(this Reciever __self, bool value) => _active.Value.SetValue(__self, value);
		public static bool GetPrevHasSignal(this Reciever __self) => _prevHasSignal.Value.GetValue(__self);
		public static void SetPrevHasSignal(this Reciever __self, bool value) => _prevHasSignal.Value.SetValue(__self, value);
		public static bool GetIsCurrentlyShowingRadarDot(this Reciever __self) => _isCurrentlyShowingRadarDot.Value.GetValue(__self);
		public static void SetIsCurrentlyShowingRadarDot(this Reciever __self, bool value) => _isCurrentlyShowingRadarDot.Value.SetValue(__self, value);
		public static int GetFrequencyNumberIndex(this Reciever __self) => _frequencyNumberIndex.Value.GetValue(__self);
		public static void SetFrequencyNumberIndex(this Reciever __self, int value) => _frequencyNumberIndex.Value.SetValue(__self, value);
		public static bool GetAddNoteBookNoteOnActivation(this Reciever __self) => _addNoteBookNoteOnActivation.Value.GetValue(__self);
		public static void SetAddNoteBookNoteOnActivation(this Reciever __self, bool value) => _addNoteBookNoteOnActivation.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Reciever>> _Awake757602046 =
				new System.Lazy<MethodAccessor<Reciever>>(() => MethodAccessor<Reciever>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<Reciever>> _Start757602046 =
				new System.Lazy<MethodAccessor<Reciever>>(() => MethodAccessor<Reciever>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<Reciever>> _Update757602046 =
				new System.Lazy<MethodAccessor<Reciever>>(() => MethodAccessor<Reciever>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<Reciever>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<Reciever>>(() => MethodAccessor<Reciever>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<Reciever>> _OnBatteryStateChange757602046 =
				new System.Lazy<MethodAccessor<Reciever>>(() => MethodAccessor<Reciever>.Create("OnBatteryStateChange"));
		private static readonly System.Lazy<MethodAccessor<Reciever>> _OnButtonCyclePressed757602046 =
				new System.Lazy<MethodAccessor<Reciever>>(() => MethodAccessor<Reciever>.Create("OnButtonCyclePressed"));
		private static readonly System.Lazy<MethodAccessor<Reciever>> _ButtonCyclePressed757602046 =
				new System.Lazy<MethodAccessor<Reciever>>(() => MethodAccessor<Reciever>.Create("ButtonCyclePressed"));
		private static readonly System.Lazy<MethodAccessor<Reciever>> _OnButtonUpPressed757602046 =
				new System.Lazy<MethodAccessor<Reciever>>(() => MethodAccessor<Reciever>.Create("OnButtonUpPressed"));
		private static readonly System.Lazy<MethodAccessor<Reciever>> _ButtonUpPress757602046 =
				new System.Lazy<MethodAccessor<Reciever>>(() => MethodAccessor<Reciever>.Create("ButtonUpPress"));
		private static readonly System.Lazy<MethodAccessor<Reciever>> _OnButtonDownPressed757602046 =
				new System.Lazy<MethodAccessor<Reciever>>(() => MethodAccessor<Reciever>.Create("OnButtonDownPressed"));
		private static readonly System.Lazy<MethodAccessor<Reciever>> _ButtonDownPress757602046 =
				new System.Lazy<MethodAccessor<Reciever>>(() => MethodAccessor<Reciever>.Create("ButtonDownPress"));
		private static readonly System.Lazy<MethodAccessor<Reciever>> _HandleUI757602046 =
				new System.Lazy<MethodAccessor<Reciever>>(() => MethodAccessor<Reciever>.Create("HandleUI"));
		private static readonly System.Lazy<MethodAccessor<Reciever>> _GetAngle3525281758 =
				new System.Lazy<MethodAccessor<Reciever>>(() => MethodAccessor<Reciever>.Create("GetAngle", typeof(UnityEngine.Vector2), typeof(UnityEngine.Vector2)));
		private static readonly System.Lazy<MethodAccessor<Reciever>> _GetAntennaFromBlockIndex3473662494 =
				new System.Lazy<MethodAccessor<Reciever>>(() => MethodAccessor<Reciever>.Create("GetAntennaFromBlockIndex", typeof(uint)));
		private static readonly System.Lazy<MethodAccessor<Reciever>> _IncrementFrequencyIndex757602046 =
				new System.Lazy<MethodAccessor<Reciever>>(() => MethodAccessor<Reciever>.Create("IncrementFrequencyIndex"));
		private static readonly System.Lazy<MethodAccessor<Reciever>> _IncrementCurrentFrequencyNumber3486186818 =
				new System.Lazy<MethodAccessor<Reciever>>(() => MethodAccessor<Reciever>.Create("IncrementCurrentFrequencyNumber", typeof(int)));
		private static readonly System.Lazy<MethodAccessor<Reciever>> _HandleFrequencyUpdateMessage3478055067 =
				new System.Lazy<MethodAccessor<Reciever>>(() => MethodAccessor<Reciever>.Create("HandleFrequencyUpdateMessage", typeof(Message_Reciever_FrequencyUpdate)));
		private static readonly System.Lazy<MethodAccessor<Reciever>> _SetFrequencyNumbers3479986306 =
				new System.Lazy<MethodAccessor<Reciever>>(() => MethodAccessor<Reciever>.Create("SetFrequencyNumbers", typeof(System.Int32[])));
		private static readonly System.Lazy<MethodAccessor<Reciever>> _RefreshFrequencyIndexArrow757602046 =
				new System.Lazy<MethodAccessor<Reciever>>(() => MethodAccessor<Reciever>.Create("RefreshFrequencyIndexArrow"));
		private static readonly System.Lazy<MethodAccessor<Reciever>> _RefreshFrequencyNumberText757602046 =
				new System.Lazy<MethodAccessor<Reciever>>(() => MethodAccessor<Reciever>.Create("RefreshFrequencyNumberText"));
		private static readonly System.Lazy<MethodAccessor<Reciever>> _GetCurrentMatchingFrequency757602046 =
				new System.Lazy<MethodAccessor<Reciever>>(() => MethodAccessor<Reciever>.Create("GetCurrentMatchingFrequency"));
		private static readonly System.Lazy<MethodAccessor<Reciever>> _SendFrequencyUpdateMessage757602046 =
				new System.Lazy<MethodAccessor<Reciever>>(() => MethodAccessor<Reciever>.Create("SendFrequencyUpdateMessage"));

		public static void Awake(this Reciever __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this Reciever __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this Reciever __self) => _Update757602046.Value.Invoke(__self);
		public static void OnDestroy(this Reciever __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void OnBatteryStateChange(this Reciever __self) => _OnBatteryStateChange757602046.Value.Invoke(__self);
		public static void OnButtonCyclePressed(this Reciever __self) => _OnButtonCyclePressed757602046.Value.Invoke(__self);
		public static void ButtonCyclePressed(this Reciever __self) => _ButtonCyclePressed757602046.Value.Invoke(__self);
		public static void OnButtonUpPressed(this Reciever __self) => _OnButtonUpPressed757602046.Value.Invoke(__self);
		public static void ButtonUpPress(this Reciever __self) => _ButtonUpPress757602046.Value.Invoke(__self);
		public static void OnButtonDownPressed(this Reciever __self) => _OnButtonDownPressed757602046.Value.Invoke(__self);
		public static void ButtonDownPress(this Reciever __self) => _ButtonDownPress757602046.Value.Invoke(__self);
		public static void HandleUI(this Reciever __self) => _HandleUI757602046.Value.Invoke(__self);
		public static float GetAngle(this Reciever __self, UnityEngine.Vector2 dirOne, UnityEngine.Vector2 dirTwo) => (float)_GetAngle3525281758.Value.Invoke(__self, dirOne, dirTwo);
		public static Reciever_Antenna GetAntennaFromBlockIndex(this Reciever __self, uint blockIndex) => (Reciever_Antenna)_GetAntennaFromBlockIndex3473662494.Value.Invoke(__self, blockIndex);
		public static void IncrementFrequencyIndex(this Reciever __self) => _IncrementFrequencyIndex757602046.Value.Invoke(__self);
		public static void IncrementCurrentFrequencyNumber(this Reciever __self, int increment) => _IncrementCurrentFrequencyNumber3486186818.Value.Invoke(__self, increment);
		public static void HandleFrequencyUpdateMessage(this Reciever __self, Message_Reciever_FrequencyUpdate msgFrequencyUpdate) => _HandleFrequencyUpdateMessage3478055067.Value.Invoke(__self, msgFrequencyUpdate);
		public static void SetFrequencyNumbers(this Reciever __self, System.Int32[] numbers) => _SetFrequencyNumbers3479986306.Value.Invoke(__self, numbers);
		public static void RefreshFrequencyIndexArrow(this Reciever __self) => _RefreshFrequencyIndexArrow757602046.Value.Invoke(__self);
		public static void RefreshFrequencyNumberText(this Reciever __self) => _RefreshFrequencyNumberText757602046.Value.Invoke(__self);
		public static RecieverFrequency GetCurrentMatchingFrequency(this Reciever __self) => (RecieverFrequency)_GetCurrentMatchingFrequency757602046.Value.Invoke(__self);
		public static void SendFrequencyUpdateMessage(this Reciever __self) => _SendFrequencyUpdateMessage757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Reciever_Antenna
	{

		private static readonly System.Lazy<FieldAccessor<Reciever_Antenna, Rope>> _wire =
				new System.Lazy<FieldAccessor<Reciever_Antenna, Rope>>(() => FieldAccessor<Reciever_Antenna, Rope>.Create("wire"));
		private static readonly System.Lazy<FieldAccessor<Reciever_Antenna, UnityEngine.GameObject>> _light_Off =
				new System.Lazy<FieldAccessor<Reciever_Antenna, UnityEngine.GameObject>>(() => FieldAccessor<Reciever_Antenna, UnityEngine.GameObject>.Create("light_Off"));
		private static readonly System.Lazy<FieldAccessor<Reciever_Antenna, UnityEngine.GameObject>> _light_Green =
				new System.Lazy<FieldAccessor<Reciever_Antenna, UnityEngine.GameObject>>(() => FieldAccessor<Reciever_Antenna, UnityEngine.GameObject>.Create("light_Green"));
		private static readonly System.Lazy<FieldAccessor<Reciever_Antenna, UnityEngine.GameObject>> _light_Red =
				new System.Lazy<FieldAccessor<Reciever_Antenna, UnityEngine.GameObject>>(() => FieldAccessor<Reciever_Antenna, UnityEngine.GameObject>.Create("light_Red"));
		private static readonly System.Lazy<FieldAccessor<Reciever_Antenna, CanvasHelper>> _canvas =
				new System.Lazy<FieldAccessor<Reciever_Antenna, CanvasHelper>>(() => FieldAccessor<Reciever_Antenna, CanvasHelper>.Create("canvas"));
		private static readonly System.Lazy<FieldAccessor<Reciever_Antenna, Block>> _blockScript =
				new System.Lazy<FieldAccessor<Reciever_Antenna, Block>>(() => FieldAccessor<Reciever_Antenna, Block>.Create("blockScript"));
		private static readonly System.Lazy<FieldAccessor<Reciever_Antenna, Reciever>> _reciever =
				new System.Lazy<FieldAccessor<Reciever_Antenna, Reciever>>(() => FieldAccessor<Reciever_Antenna, Reciever>.Create("reciever"));
		private static readonly System.Lazy<FieldAccessor<Reciever_Antenna, bool>> _hasBeenPlaced =
				new System.Lazy<FieldAccessor<Reciever_Antenna, bool>>(() => FieldAccessor<Reciever_Antenna, bool>.Create("hasBeenPlaced"));
		private static readonly System.Lazy<FieldAccessor<Reciever_Antenna, bool>> _showingText =
				new System.Lazy<FieldAccessor<Reciever_Antenna, bool>>(() => FieldAccessor<Reciever_Antenna, bool>.Create("showingText"));

		public static Rope GetWire(this Reciever_Antenna __self) => _wire.Value.GetValue(__self);
		public static void SetWire(this Reciever_Antenna __self, Rope value) => _wire.Value.SetValue(__self, value);
		public static UnityEngine.GameObject GetLight_Off(this Reciever_Antenna __self) => _light_Off.Value.GetValue(__self);
		public static void SetLight_Off(this Reciever_Antenna __self, UnityEngine.GameObject value) => _light_Off.Value.SetValue(__self, value);
		public static UnityEngine.GameObject GetLight_Green(this Reciever_Antenna __self) => _light_Green.Value.GetValue(__self);
		public static void SetLight_Green(this Reciever_Antenna __self, UnityEngine.GameObject value) => _light_Green.Value.SetValue(__self, value);
		public static UnityEngine.GameObject GetLight_Red(this Reciever_Antenna __self) => _light_Red.Value.GetValue(__self);
		public static void SetLight_Red(this Reciever_Antenna __self, UnityEngine.GameObject value) => _light_Red.Value.SetValue(__self, value);
		public static CanvasHelper GetCanvas(this Reciever_Antenna __self) => _canvas.Value.GetValue(__self);
		public static void SetCanvas(this Reciever_Antenna __self, CanvasHelper value) => _canvas.Value.SetValue(__self, value);
		public static Block GetBlockScript(this Reciever_Antenna __self) => _blockScript.Value.GetValue(__self);
		public static void SetBlockScript(this Reciever_Antenna __self, Block value) => _blockScript.Value.SetValue(__self, value);
		public static Reciever GetReciever(this Reciever_Antenna __self) => _reciever.Value.GetValue(__self);
		public static void SetReciever(this Reciever_Antenna __self, Reciever value) => _reciever.Value.SetValue(__self, value);
		public static bool GetHasBeenPlaced(this Reciever_Antenna __self) => _hasBeenPlaced.Value.GetValue(__self);
		public static void SetHasBeenPlaced(this Reciever_Antenna __self, bool value) => _hasBeenPlaced.Value.SetValue(__self, value);
		public static bool GetShowingText(this Reciever_Antenna __self) => _showingText.Value.GetValue(__self);
		public static void SetShowingText(this Reciever_Antenna __self, bool value) => _showingText.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Reciever_Antenna>> _Awake757602046 =
				new System.Lazy<MethodAccessor<Reciever_Antenna>>(() => MethodAccessor<Reciever_Antenna>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<Reciever_Antenna>> _Update757602046 =
				new System.Lazy<MethodAccessor<Reciever_Antenna>>(() => MethodAccessor<Reciever_Antenna>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<Reciever_Antenna>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<Reciever_Antenna>>(() => MethodAccessor<Reciever_Antenna>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<Reciever_Antenna>> _SetLight3487888178 =
				new System.Lazy<MethodAccessor<Reciever_Antenna>>(() => MethodAccessor<Reciever_Antenna>.Create("SetLight", typeof(AntennaLightState)));

		public static void Awake(this Reciever_Antenna __self) => _Awake757602046.Value.Invoke(__self);
		public static void Update(this Reciever_Antenna __self) => _Update757602046.Value.Invoke(__self);
		public static void OnDestroy(this Reciever_Antenna __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void SetLight(this Reciever_Antenna __self, AntennaLightState state) => _SetLight3487888178.Value.Invoke(__self, state);

	}

	public static class PrivateAccessor_Reciever_Dot
	{

		private static readonly System.Lazy<FieldAccessor<Reciever_Dot, float>> _lengthToPoint =
				new System.Lazy<FieldAccessor<Reciever_Dot, float>>(() => FieldAccessor<Reciever_Dot, float>.Create("lengthToPoint"));
		private static readonly System.Lazy<FieldAccessor<Reciever_Dot, UnityEngine.RectTransform>> _rect =
				new System.Lazy<FieldAccessor<Reciever_Dot, UnityEngine.RectTransform>>(() => FieldAccessor<Reciever_Dot, UnityEngine.RectTransform>.Create("rect"));
		private static readonly System.Lazy<FieldAccessor<Reciever_Dot, UnityEngine.UI.Text>> _dotNumberText =
				new System.Lazy<FieldAccessor<Reciever_Dot, UnityEngine.UI.Text>>(() => FieldAccessor<Reciever_Dot, UnityEngine.UI.Text>.Create("dotNumberText"));
		private static readonly System.Lazy<FieldAccessor<Reciever_Dot, UnityEngine.UI.Image>> _dotImage =
				new System.Lazy<FieldAccessor<Reciever_Dot, UnityEngine.UI.Image>>(() => FieldAccessor<Reciever_Dot, UnityEngine.UI.Image>.Create("dotImage"));
		private static readonly System.Lazy<FieldAccessor<Reciever_Dot, UnityEngine.Sprite>> _dotSprite =
				new System.Lazy<FieldAccessor<Reciever_Dot, UnityEngine.Sprite>>(() => FieldAccessor<Reciever_Dot, UnityEngine.Sprite>.Create("dotSprite"));
		private static readonly System.Lazy<FieldAccessor<Reciever_Dot, UnityEngine.Sprite>> _targetedDotSprite =
				new System.Lazy<FieldAccessor<Reciever_Dot, UnityEngine.Sprite>>(() => FieldAccessor<Reciever_Dot, UnityEngine.Sprite>.Create("targetedDotSprite"));
		private static readonly System.Lazy<FieldAccessor<Reciever_Dot, UnityEngine.Sprite>> _notTargetedDotSprite =
				new System.Lazy<FieldAccessor<Reciever_Dot, UnityEngine.Sprite>>(() => FieldAccessor<Reciever_Dot, UnityEngine.Sprite>.Create("notTargetedDotSprite"));

		public static float GetLengthToPoint(this Reciever_Dot __self) => _lengthToPoint.Value.GetValue(__self);
		public static void SetLengthToPoint(this Reciever_Dot __self, float value) => _lengthToPoint.Value.SetValue(__self, value);
		public static UnityEngine.RectTransform GetRect(this Reciever_Dot __self) => _rect.Value.GetValue(__self);
		public static void SetRect(this Reciever_Dot __self, UnityEngine.RectTransform value) => _rect.Value.SetValue(__self, value);
		public static UnityEngine.UI.Text GetDotNumberText(this Reciever_Dot __self) => _dotNumberText.Value.GetValue(__self);
		public static void SetDotNumberText(this Reciever_Dot __self, UnityEngine.UI.Text value) => _dotNumberText.Value.SetValue(__self, value);
		public static UnityEngine.UI.Image GetDotImage(this Reciever_Dot __self) => _dotImage.Value.GetValue(__self);
		public static void SetDotImage(this Reciever_Dot __self, UnityEngine.UI.Image value) => _dotImage.Value.SetValue(__self, value);
		public static UnityEngine.Sprite GetDotSprite(this Reciever_Dot __self) => _dotSprite.Value.GetValue(__self);
		public static void SetDotSprite(this Reciever_Dot __self, UnityEngine.Sprite value) => _dotSprite.Value.SetValue(__self, value);
		public static UnityEngine.Sprite GetTargetedDotSprite(this Reciever_Dot __self) => _targetedDotSprite.Value.GetValue(__self);
		public static void SetTargetedDotSprite(this Reciever_Dot __self, UnityEngine.Sprite value) => _targetedDotSprite.Value.SetValue(__self, value);
		public static UnityEngine.Sprite GetNotTargetedDotSprite(this Reciever_Dot __self) => _notTargetedDotSprite.Value.GetValue(__self);
		public static void SetNotTargetedDotSprite(this Reciever_Dot __self, UnityEngine.Sprite value) => _notTargetedDotSprite.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Reciever_Dot>> _Awake757602046 =
				new System.Lazy<MethodAccessor<Reciever_Dot>>(() => MethodAccessor<Reciever_Dot>.Create("Awake"));

		public static void Awake(this Reciever_Dot __self) => _Awake757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_ResearchTable
	{

		private static readonly System.Lazy<FieldAccessor<ResearchTable, UnityEngine.Animator>> _animator =
				new System.Lazy<FieldAccessor<ResearchTable, UnityEngine.Animator>>(() => FieldAccessor<ResearchTable, UnityEngine.Animator>.Create("animator"));
		private static readonly System.Lazy<FieldAccessor<ResearchTable, CanvasHelper>> _canvas =
				new System.Lazy<FieldAccessor<ResearchTable, CanvasHelper>>(() => FieldAccessor<ResearchTable, CanvasHelper>.Create("canvas"));
		private static readonly System.Lazy<FieldAccessor<ResearchTable, Raft_Network>> _network =
				new System.Lazy<FieldAccessor<ResearchTable, Raft_Network>>(() => FieldAccessor<ResearchTable, Raft_Network>.Create("network"));
		private static readonly System.Lazy<FieldAccessor<ResearchTable, Network_Player>> _localPlayer =
				new System.Lazy<FieldAccessor<ResearchTable, Network_Player>>(() => FieldAccessor<ResearchTable, Network_Player>.Create("localPlayer"));
		private static readonly System.Lazy<FieldAccessor<ResearchTable, Steamworks.CSteamID>> _occupyingPlayerID =
				new System.Lazy<FieldAccessor<ResearchTable, Steamworks.CSteamID>>(() => FieldAccessor<ResearchTable, Steamworks.CSteamID>.Create("occupyingPlayerID"));
		private static readonly System.Lazy<FieldAccessor<ResearchTable, bool>> _hasBeenPlaced =
				new System.Lazy<FieldAccessor<ResearchTable, bool>>(() => FieldAccessor<ResearchTable, bool>.Create("hasBeenPlaced"));
		private static readonly System.Lazy<FieldAccessor<ResearchTable, bool>> _canClose =
				new System.Lazy<FieldAccessor<ResearchTable, bool>>(() => FieldAccessor<ResearchTable, bool>.Create("canClose"));

		public static UnityEngine.Animator GetAnimator(this ResearchTable __self) => _animator.Value.GetValue(__self);
		public static void SetAnimator(this ResearchTable __self, UnityEngine.Animator value) => _animator.Value.SetValue(__self, value);
		public static CanvasHelper GetCanvas(this ResearchTable __self) => _canvas.Value.GetValue(__self);
		public static void SetCanvas(this ResearchTable __self, CanvasHelper value) => _canvas.Value.SetValue(__self, value);
		public static Raft_Network GetNetwork(this ResearchTable __self) => _network.Value.GetValue(__self);
		public static void SetNetwork(this ResearchTable __self, Raft_Network value) => _network.Value.SetValue(__self, value);
		public static Network_Player GetLocalPlayer(this ResearchTable __self) => _localPlayer.Value.GetValue(__self);
		public static void SetLocalPlayer(this ResearchTable __self, Network_Player value) => _localPlayer.Value.SetValue(__self, value);
		public static Steamworks.CSteamID GetOccupyingPlayerID(this ResearchTable __self) => _occupyingPlayerID.Value.GetValue(__self);
		public static void SetOccupyingPlayerID(this ResearchTable __self, Steamworks.CSteamID value) => _occupyingPlayerID.Value.SetValue(__self, value);
		public static bool GetHasBeenPlaced(this ResearchTable __self) => _hasBeenPlaced.Value.GetValue(__self);
		public static void SetHasBeenPlaced(this ResearchTable __self, bool value) => _hasBeenPlaced.Value.SetValue(__self, value);
		public static bool GetCanClose(this ResearchTable __self) => _canClose.Value.GetValue(__self);
		public static void SetCanClose(this ResearchTable __self, bool value) => _canClose.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<ResearchTable>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<ResearchTable>>(() => MethodAccessor<ResearchTable>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<ResearchTable>> _Update757602046 =
				new System.Lazy<MethodAccessor<ResearchTable>>(() => MethodAccessor<ResearchTable>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<ResearchTable>> _Open307531626 =
				new System.Lazy<MethodAccessor<ResearchTable>>(() => MethodAccessor<ResearchTable>.Create("Open", typeof(bool), typeof(Steamworks.CSteamID)));
		private static readonly System.Lazy<MethodAccessor<ResearchTable>> _Close757602046 =
				new System.Lazy<MethodAccessor<ResearchTable>>(() => MethodAccessor<ResearchTable>.Create("Close"));
		private static readonly System.Lazy<MethodAccessor<ResearchTable>> _AllowCloseWithUseButton757602046 =
				new System.Lazy<MethodAccessor<ResearchTable>>(() => MethodAccessor<ResearchTable>.Create("AllowCloseWithUseButton"));
		private static readonly System.Lazy<MethodAccessor<ResearchTable>> _OnClientDisconnect891012833 =
				new System.Lazy<MethodAccessor<ResearchTable>>(() => MethodAccessor<ResearchTable>.Create("OnClientDisconnect", typeof(Steamworks.CSteamID), typeof(DisconnectReason)));

		public static void OnDestroy(this ResearchTable __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void Update(this ResearchTable __self) => _Update757602046.Value.Invoke(__self);
		public static bool Open(this ResearchTable __self, bool asLocalPlayer, Steamworks.CSteamID playerID) => (bool)_Open307531626.Value.Invoke(__self, asLocalPlayer, playerID);
		public static void Close(this ResearchTable __self) => _Close757602046.Value.Invoke(__self);
		public static void AllowCloseWithUseButton(this ResearchTable __self) => _AllowCloseWithUseButton757602046.Value.Invoke(__self);
		public static void OnClientDisconnect(this ResearchTable __self, Steamworks.CSteamID steamID, DisconnectReason reason) => _OnClientDisconnect891012833.Value.Invoke(__self, steamID, reason);

	}

	public static class Private_ResearchTable
	{

		private static readonly System.Lazy<StaticFieldAccessor<Inventory_ResearchTable>> _inventoryReference =
				new System.Lazy<StaticFieldAccessor<Inventory_ResearchTable>>(() => StaticFieldAccessor<Inventory_ResearchTable>.Create(typeof(ResearchTable), "inventoryReference"));

		public static Inventory_ResearchTable GetInventoryReference() => _inventoryReference.Value.GetValue();
		public static void SetInventoryReference(Inventory_ResearchTable value) => _inventoryReference.Value.SetValue(value);

	}

	public static class PrivateAccessor_Rudder
	{

		private static readonly System.Lazy<FieldAccessor<Rudder, UnityEngine.Transform>> _transformToRotate =
				new System.Lazy<FieldAccessor<Rudder, UnityEngine.Transform>>(() => FieldAccessor<Rudder, UnityEngine.Transform>.Create("transformToRotate"));

		public static UnityEngine.Transform GetTransformToRotate(this Rudder __self) => _transformToRotate.Value.GetValue(__self);
		public static void SetTransformToRotate(this Rudder __self, UnityEngine.Transform value) => _transformToRotate.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_Sail
	{

		private static readonly System.Lazy<FieldAccessor<Sail, UnityEngine.Animator>> _animator =
				new System.Lazy<FieldAccessor<Sail, UnityEngine.Animator>>(() => FieldAccessor<Sail, UnityEngine.Animator>.Create("animator"));
		private static readonly System.Lazy<FieldAccessor<Sail, UnityEngine.Transform>> _rotationTransform =
				new System.Lazy<FieldAccessor<Sail, UnityEngine.Transform>>(() => FieldAccessor<Sail, UnityEngine.Transform>.Create("rotationTransform"));
		private static readonly System.Lazy<FieldAccessor<Sail, UnityEngine.GameObject>> _paintCollider =
				new System.Lazy<FieldAccessor<Sail, UnityEngine.GameObject>>(() => FieldAccessor<Sail, UnityEngine.GameObject>.Create("paintCollider"));
		private static readonly System.Lazy<FieldAccessor<Sail, float>> _force =
				new System.Lazy<FieldAccessor<Sail, float>>(() => FieldAccessor<Sail, float>.Create("force"));
		private static readonly System.Lazy<FieldAccessor<Sail, float>> _remoteClientLerpSpeed =
				new System.Lazy<FieldAccessor<Sail, float>>(() => FieldAccessor<Sail, float>.Create("remoteClientLerpSpeed"));
		private static readonly System.Lazy<FieldAccessor<Sail, Interval_Float>> _backwardAngle =
				new System.Lazy<FieldAccessor<Sail, Interval_Float>>(() => FieldAccessor<Sail, Interval_Float>.Create("backwardAngle"));
		private static readonly System.Lazy<FieldAccessor<Sail, Interval_Float>> _forwardAngle =
				new System.Lazy<FieldAccessor<Sail, Interval_Float>>(() => FieldAccessor<Sail, Interval_Float>.Create("forwardAngle"));
		private static readonly System.Lazy<FieldAccessor<Sail, string>> _eventRef_SetSail =
				new System.Lazy<FieldAccessor<Sail, string>>(() => FieldAccessor<Sail, string>.Create("eventRef_SetSail"));
		private static readonly System.Lazy<FieldAccessor<Sail, FMODUnity.StudioEventEmitter>> _eventEmitter_sailFlap =
				new System.Lazy<FieldAccessor<Sail, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<Sail, FMODUnity.StudioEventEmitter>.Create("eventEmitter_sailFlap"));
		private static readonly System.Lazy<FieldAccessor<Sail, Raft>> _raft =
				new System.Lazy<FieldAccessor<Sail, Raft>>(() => FieldAccessor<Sail, Raft>.Create("raft"));
		private static readonly System.Lazy<FieldAccessor<Sail, CanvasHelper>> _canvas =
				new System.Lazy<FieldAccessor<Sail, CanvasHelper>>(() => FieldAccessor<Sail, CanvasHelper>.Create("canvas"));
		private static readonly System.Lazy<FieldAccessor<Sail, Raft_Network>> _network =
				new System.Lazy<FieldAccessor<Sail, Raft_Network>>(() => FieldAccessor<Sail, Raft_Network>.Create("network"));
		private static readonly System.Lazy<FieldAccessor<Sail, Network_Player>> _localPlayer =
				new System.Lazy<FieldAccessor<Sail, Network_Player>>(() => FieldAccessor<Sail, Network_Player>.Create("localPlayer"));
		private static readonly System.Lazy<FieldAccessor<Sail, System.Collections.IEnumerator>> _rotationCoroutine =
				new System.Lazy<FieldAccessor<Sail, System.Collections.IEnumerator>>(() => FieldAccessor<Sail, System.Collections.IEnumerator>.Create("rotationCoroutine"));
		private static readonly System.Lazy<FieldAccessor<Sail, float>> _targetLocalEulerY =
				new System.Lazy<FieldAccessor<Sail, float>>(() => FieldAccessor<Sail, float>.Create("targetLocalEulerY"));
		private static readonly System.Lazy<FieldAccessor<Sail, bool>> _isRotating =
				new System.Lazy<FieldAccessor<Sail, bool>>(() => FieldAccessor<Sail, bool>.Create("isRotating"));
		private static readonly System.Lazy<FieldAccessor<Sail, bool>> _blockPlaced =
				new System.Lazy<FieldAccessor<Sail, bool>>(() => FieldAccessor<Sail, bool>.Create("blockPlaced"));

		public static UnityEngine.Animator GetAnimator(this Sail __self) => _animator.Value.GetValue(__self);
		public static void SetAnimator(this Sail __self, UnityEngine.Animator value) => _animator.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetRotationTransform(this Sail __self) => _rotationTransform.Value.GetValue(__self);
		public static void SetRotationTransform(this Sail __self, UnityEngine.Transform value) => _rotationTransform.Value.SetValue(__self, value);
		public static UnityEngine.GameObject GetPaintCollider(this Sail __self) => _paintCollider.Value.GetValue(__self);
		public static void SetPaintCollider(this Sail __self, UnityEngine.GameObject value) => _paintCollider.Value.SetValue(__self, value);
		public static float GetForce(this Sail __self) => _force.Value.GetValue(__self);
		public static void SetForce(this Sail __self, float value) => _force.Value.SetValue(__self, value);
		public static float GetRemoteClientLerpSpeed(this Sail __self) => _remoteClientLerpSpeed.Value.GetValue(__self);
		public static void SetRemoteClientLerpSpeed(this Sail __self, float value) => _remoteClientLerpSpeed.Value.SetValue(__self, value);
		public static Interval_Float GetBackwardAngle(this Sail __self) => _backwardAngle.Value.GetValue(__self);
		public static void SetBackwardAngle(this Sail __self, Interval_Float value) => _backwardAngle.Value.SetValue(__self, value);
		public static Interval_Float GetForwardAngle(this Sail __self) => _forwardAngle.Value.GetValue(__self);
		public static void SetForwardAngle(this Sail __self, Interval_Float value) => _forwardAngle.Value.SetValue(__self, value);
		public static string GetEventRef_SetSail(this Sail __self) => _eventRef_SetSail.Value.GetValue(__self);
		public static void SetEventRef_SetSail(this Sail __self, string value) => _eventRef_SetSail.Value.SetValue(__self, value);
		public static FMODUnity.StudioEventEmitter GetEventEmitter_sailFlap(this Sail __self) => _eventEmitter_sailFlap.Value.GetValue(__self);
		public static void SetEventEmitter_sailFlap(this Sail __self, FMODUnity.StudioEventEmitter value) => _eventEmitter_sailFlap.Value.SetValue(__self, value);
		public static Raft GetRaft(this Sail __self) => _raft.Value.GetValue(__self);
		public static void SetRaft(this Sail __self, Raft value) => _raft.Value.SetValue(__self, value);
		public static CanvasHelper GetCanvas(this Sail __self) => _canvas.Value.GetValue(__self);
		public static void SetCanvas(this Sail __self, CanvasHelper value) => _canvas.Value.SetValue(__self, value);
		public static Raft_Network GetNetwork(this Sail __self) => _network.Value.GetValue(__self);
		public static void SetNetwork(this Sail __self, Raft_Network value) => _network.Value.SetValue(__self, value);
		public static Network_Player GetLocalPlayer(this Sail __self) => _localPlayer.Value.GetValue(__self);
		public static void SetLocalPlayer(this Sail __self, Network_Player value) => _localPlayer.Value.SetValue(__self, value);
		public static System.Collections.IEnumerator GetRotationCoroutine(this Sail __self) => _rotationCoroutine.Value.GetValue(__self);
		public static void SetRotationCoroutine(this Sail __self, System.Collections.IEnumerator value) => _rotationCoroutine.Value.SetValue(__self, value);
		public static float GetTargetLocalEulerY(this Sail __self) => _targetLocalEulerY.Value.GetValue(__self);
		public static void SetTargetLocalEulerY(this Sail __self, float value) => _targetLocalEulerY.Value.SetValue(__self, value);
		public static bool GetIsRotating(this Sail __self) => _isRotating.Value.GetValue(__self);
		public static void SetIsRotating(this Sail __self, bool value) => _isRotating.Value.SetValue(__self, value);
		public static bool GetBlockPlaced(this Sail __self) => _blockPlaced.Value.GetValue(__self);
		public static void SetBlockPlaced(this Sail __self, bool value) => _blockPlaced.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Sail>> _Start757602046 =
				new System.Lazy<MethodAccessor<Sail>>(() => MethodAccessor<Sail>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<Sail>> _Update757602046 =
				new System.Lazy<MethodAccessor<Sail>>(() => MethodAccessor<Sail>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<Sail>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<Sail>>(() => MethodAccessor<Sail>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<Sail>> _OnBlockPlaced757602046 =
				new System.Lazy<MethodAccessor<Sail>>(() => MethodAccessor<Sail>.Create("OnBlockPlaced"));
		private static readonly System.Lazy<MethodAccessor<Sail>> _Close757602046 =
				new System.Lazy<MethodAccessor<Sail>>(() => MethodAccessor<Sail>.Create("Close"));
		private static readonly System.Lazy<MethodAccessor<Sail>> _CalculateForceMultiplier757602046 =
				new System.Lazy<MethodAccessor<Sail>>(() => MethodAccessor<Sail>.Create("CalculateForceMultiplier"));
		private static readonly System.Lazy<MethodAccessor<Sail>> _Rotate3486905475 =
				new System.Lazy<MethodAccessor<Sail>>(() => MethodAccessor<Sail>.Create("Rotate", typeof(float)));

		public static void Start(this Sail __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this Sail __self) => _Update757602046.Value.Invoke(__self);
		public static void OnDestroy(this Sail __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void OnBlockPlaced(this Sail __self) => _OnBlockPlaced757602046.Value.Invoke(__self);
		public static void Close(this Sail __self) => _Close757602046.Value.Invoke(__self);
		public static void CalculateForceMultiplier(this Sail __self) => _CalculateForceMultiplier757602046.Value.Invoke(__self);
		public static void Rotate(this Sail __self, float degree) => _Rotate3486905475.Value.Invoke(__self, degree);

	}

	public static class PrivateAccessor_Scarecrow
	{

		private static readonly System.Lazy<FieldAccessor<Scarecrow, System.Collections.Generic.List<UnityEngine.Rigidbody>>> _parts =
				new System.Lazy<FieldAccessor<Scarecrow, System.Collections.Generic.List<UnityEngine.Rigidbody>>>(() => FieldAccessor<Scarecrow, System.Collections.Generic.List<UnityEngine.Rigidbody>>.Create("parts"));
		private static readonly System.Lazy<FieldAccessor<Scarecrow, string>> _eventRef_break =
				new System.Lazy<FieldAccessor<Scarecrow, string>>(() => FieldAccessor<Scarecrow, string>.Create("eventRef_break"));
		private static readonly System.Lazy<FieldAccessor<Scarecrow, Raft_Network>> _network =
				new System.Lazy<FieldAccessor<Scarecrow, Raft_Network>>(() => FieldAccessor<Scarecrow, Raft_Network>.Create("network"));
		private static readonly System.Lazy<FieldAccessor<Scarecrow, bool>> _occupied =
				new System.Lazy<FieldAccessor<Scarecrow, bool>>(() => FieldAccessor<Scarecrow, bool>.Create("occupied"));

		public static System.Collections.Generic.List<UnityEngine.Rigidbody> GetParts(this Scarecrow __self) => _parts.Value.GetValue(__self);
		public static void SetParts(this Scarecrow __self, System.Collections.Generic.List<UnityEngine.Rigidbody> value) => _parts.Value.SetValue(__self, value);
		public static string GetEventRef_break(this Scarecrow __self) => _eventRef_break.Value.GetValue(__self);
		public static void SetEventRef_break(this Scarecrow __self, string value) => _eventRef_break.Value.SetValue(__self, value);
		public static Raft_Network GetNetwork(this Scarecrow __self) => _network.Value.GetValue(__self);
		public static void SetNetwork(this Scarecrow __self, Raft_Network value) => _network.Value.SetValue(__self, value);
		public static bool GetOccupied(this Scarecrow __self) => _occupied.Value.GetValue(__self);
		public static void SetOccupied(this Scarecrow __self, bool value) => _occupied.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Scarecrow>> _Start757602046 =
				new System.Lazy<MethodAccessor<Scarecrow>>(() => MethodAccessor<Scarecrow>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<Scarecrow>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<Scarecrow>>(() => MethodAccessor<Scarecrow>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<Scarecrow>> _DestroyScarecrowLate757602046 =
				new System.Lazy<MethodAccessor<Scarecrow>>(() => MethodAccessor<Scarecrow>.Create("DestroyScarecrowLate"));
		private static readonly System.Lazy<MethodAccessor<Scarecrow>> _RemovePart757602046 =
				new System.Lazy<MethodAccessor<Scarecrow>>(() => MethodAccessor<Scarecrow>.Create("RemovePart"));

		public static void Start(this Scarecrow __self) => _Start757602046.Value.Invoke(__self);
		public static void OnDestroy(this Scarecrow __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void DestroyScarecrowLate(this Scarecrow __self) => _DestroyScarecrowLate757602046.Value.Invoke(__self);
		public static void RemovePart(this Scarecrow __self) => _RemovePart757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Message_Scarecrow_Create
	{

		private static readonly System.Lazy<MethodAccessor<Message_Scarecrow_Create>> _GetScareCrowFromObjectIndex3454752246 =
				new System.Lazy<MethodAccessor<Message_Scarecrow_Create>>(() => MethodAccessor<Message_Scarecrow_Create>.Create("GetScareCrowFromObjectIndex", typeof(Scarecrow[]), typeof(uint)));

		public static Scarecrow GetScareCrowFromObjectIndex(this Message_Scarecrow_Create __self, Scarecrow[] scareCrows, uint objectIndex) => (Scarecrow)_GetScareCrowFromObjectIndex3454752246.Value.Invoke(__self, scareCrows, objectIndex);

	}

	public static class PrivateAccessor_Sprinkler
	{

		private static readonly System.Lazy<FieldAccessor<Sprinkler, UnityEngine.Transform>> _findGrassPlotCenterPoint =
				new System.Lazy<FieldAccessor<Sprinkler, UnityEngine.Transform>>(() => FieldAccessor<Sprinkler, UnityEngine.Transform>.Create("findGrassPlotCenterPoint"));
		private static readonly System.Lazy<FieldAccessor<Sprinkler, UnityEngine.ParticleSystem>> _waterParticles =
				new System.Lazy<FieldAccessor<Sprinkler, UnityEngine.ParticleSystem>>(() => FieldAccessor<Sprinkler, UnityEngine.ParticleSystem>.Create("waterParticles"));
		private static readonly System.Lazy<FieldAccessor<Sprinkler, float>> _waterInterval =
				new System.Lazy<FieldAccessor<Sprinkler, float>>(() => FieldAccessor<Sprinkler, float>.Create("waterInterval"));
		private static readonly System.Lazy<FieldAccessor<Sprinkler, int>> _batteryUsesPerPlot =
				new System.Lazy<FieldAccessor<Sprinkler, int>>(() => FieldAccessor<Sprinkler, int>.Create("batteryUsesPerPlot"));
		private static readonly System.Lazy<FieldAccessor<Sprinkler, int>> _waterUsesPerPlot =
				new System.Lazy<FieldAccessor<Sprinkler, int>>(() => FieldAccessor<Sprinkler, int>.Create("waterUsesPerPlot"));
		private static readonly System.Lazy<FieldAccessor<Sprinkler, UnityEngine.LayerMask>> _waterableLayer =
				new System.Lazy<FieldAccessor<Sprinkler, UnityEngine.LayerMask>>(() => FieldAccessor<Sprinkler, UnityEngine.LayerMask>.Create("waterableLayer"));
		private static readonly System.Lazy<FieldAccessor<Sprinkler, string>> _eventRef_sprinkler =
				new System.Lazy<FieldAccessor<Sprinkler, string>>(() => FieldAccessor<Sprinkler, string>.Create("eventRef_sprinkler"));
		private static readonly System.Lazy<FieldAccessor<Sprinkler, int>> _numberOfSprays =
				new System.Lazy<FieldAccessor<Sprinkler, int>>(() => FieldAccessor<Sprinkler, int>.Create("numberOfSprays"));
		private static readonly System.Lazy<FieldAccessor<Sprinkler, Interval_Float>> _sprayInterval =
				new System.Lazy<FieldAccessor<Sprinkler, Interval_Float>>(() => FieldAccessor<Sprinkler, Interval_Float>.Create("sprayInterval"));
		private static readonly System.Lazy<FieldAccessor<Sprinkler, Raft_Network>> _network =
				new System.Lazy<FieldAccessor<Sprinkler, Raft_Network>>(() => FieldAccessor<Sprinkler, Raft_Network>.Create("network"));
		private static readonly System.Lazy<FieldAccessor<Sprinkler, PlantManager>> _plantManager =
				new System.Lazy<FieldAccessor<Sprinkler, PlantManager>>(() => FieldAccessor<Sprinkler, PlantManager>.Create("plantManager"));
		private static readonly System.Lazy<FieldAccessor<Sprinkler, float>> _waterTimer =
				new System.Lazy<FieldAccessor<Sprinkler, float>>(() => FieldAccessor<Sprinkler, float>.Create("waterTimer"));

		public static UnityEngine.Transform GetFindGrassPlotCenterPoint(this Sprinkler __self) => _findGrassPlotCenterPoint.Value.GetValue(__self);
		public static void SetFindGrassPlotCenterPoint(this Sprinkler __self, UnityEngine.Transform value) => _findGrassPlotCenterPoint.Value.SetValue(__self, value);
		public static UnityEngine.ParticleSystem GetWaterParticles(this Sprinkler __self) => _waterParticles.Value.GetValue(__self);
		public static void SetWaterParticles(this Sprinkler __self, UnityEngine.ParticleSystem value) => _waterParticles.Value.SetValue(__self, value);
		public static float GetWaterInterval(this Sprinkler __self) => _waterInterval.Value.GetValue(__self);
		public static void SetWaterInterval(this Sprinkler __self, float value) => _waterInterval.Value.SetValue(__self, value);
		public static int GetBatteryUsesPerPlot(this Sprinkler __self) => _batteryUsesPerPlot.Value.GetValue(__self);
		public static void SetBatteryUsesPerPlot(this Sprinkler __self, int value) => _batteryUsesPerPlot.Value.SetValue(__self, value);
		public static int GetWaterUsesPerPlot(this Sprinkler __self) => _waterUsesPerPlot.Value.GetValue(__self);
		public static void SetWaterUsesPerPlot(this Sprinkler __self, int value) => _waterUsesPerPlot.Value.SetValue(__self, value);
		public static UnityEngine.LayerMask GetWaterableLayer(this Sprinkler __self) => _waterableLayer.Value.GetValue(__self);
		public static void SetWaterableLayer(this Sprinkler __self, UnityEngine.LayerMask value) => _waterableLayer.Value.SetValue(__self, value);
		public static string GetEventRef_sprinkler(this Sprinkler __self) => _eventRef_sprinkler.Value.GetValue(__self);
		public static void SetEventRef_sprinkler(this Sprinkler __self, string value) => _eventRef_sprinkler.Value.SetValue(__self, value);
		public static int GetNumberOfSprays(this Sprinkler __self) => _numberOfSprays.Value.GetValue(__self);
		public static void SetNumberOfSprays(this Sprinkler __self, int value) => _numberOfSprays.Value.SetValue(__self, value);
		public static Interval_Float GetSprayInterval(this Sprinkler __self) => _sprayInterval.Value.GetValue(__self);
		public static void SetSprayInterval(this Sprinkler __self, Interval_Float value) => _sprayInterval.Value.SetValue(__self, value);
		public static Raft_Network GetNetwork(this Sprinkler __self) => _network.Value.GetValue(__self);
		public static void SetNetwork(this Sprinkler __self, Raft_Network value) => _network.Value.SetValue(__self, value);
		public static PlantManager GetPlantManager(this Sprinkler __self) => _plantManager.Value.GetValue(__self);
		public static void SetPlantManager(this Sprinkler __self, PlantManager value) => _plantManager.Value.SetValue(__self, value);
		public static float GetWaterTimer(this Sprinkler __self) => _waterTimer.Value.GetValue(__self);
		public static void SetWaterTimer(this Sprinkler __self, float value) => _waterTimer.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Sprinkler>> _Start757602046 =
				new System.Lazy<MethodAccessor<Sprinkler>>(() => MethodAccessor<Sprinkler>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<Sprinkler>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<Sprinkler>>(() => MethodAccessor<Sprinkler>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<Sprinkler>> _Update757602046 =
				new System.Lazy<MethodAccessor<Sprinkler>>(() => MethodAccessor<Sprinkler>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<Sprinkler>> _HandleWaterTimer757602046 =
				new System.Lazy<MethodAccessor<Sprinkler>>(() => MethodAccessor<Sprinkler>.Create("HandleWaterTimer"));
		private static readonly System.Lazy<MethodAccessor<Sprinkler>> _Button_PlayWaterEffect757602046 =
				new System.Lazy<MethodAccessor<Sprinkler>>(() => MethodAccessor<Sprinkler>.Create("Button_PlayWaterEffect"));
		private static readonly System.Lazy<MethodAccessor<Sprinkler>> _WaterNearbyPlots757602046 =
				new System.Lazy<MethodAccessor<Sprinkler>>(() => MethodAccessor<Sprinkler>.Create("WaterNearbyPlots"));
		private static readonly System.Lazy<MethodAccessor<Sprinkler>> _PlayWaterEffects757602046 =
				new System.Lazy<MethodAccessor<Sprinkler>>(() => MethodAccessor<Sprinkler>.Create("PlayWaterEffects"));
		private static readonly System.Lazy<MethodAccessor<Sprinkler>> _WaterCropplot3479347266 =
				new System.Lazy<MethodAccessor<Sprinkler>>(() => MethodAccessor<Sprinkler>.Create("WaterCropplot", typeof(Cropplot)));

		public static void Start(this Sprinkler __self) => _Start757602046.Value.Invoke(__self);
		public static void OnDestroy(this Sprinkler __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void Update(this Sprinkler __self) => _Update757602046.Value.Invoke(__self);
		public static void HandleWaterTimer(this Sprinkler __self) => _HandleWaterTimer757602046.Value.Invoke(__self);
		public static void Button_PlayWaterEffect(this Sprinkler __self) => _Button_PlayWaterEffect757602046.Value.Invoke(__self);
		public static void WaterNearbyPlots(this Sprinkler __self) => _WaterNearbyPlots757602046.Value.Invoke(__self);
		public static System.Collections.IEnumerator PlayWaterEffects(this Sprinkler __self) => (System.Collections.IEnumerator)_PlayWaterEffects757602046.Value.Invoke(__self);
		public static void WaterCropplot(this Sprinkler __self, Cropplot cropplot) => _WaterCropplot3479347266.Value.Invoke(__self, cropplot);

	}

	public static class PrivateAccessor_SteeringWheel
	{

		private static readonly System.Lazy<FieldAccessor<SteeringWheel, UnityEngine.Transform>> _rotationTransform =
				new System.Lazy<FieldAccessor<SteeringWheel, UnityEngine.Transform>>(() => FieldAccessor<SteeringWheel, UnityEngine.Transform>.Create("rotationTransform"));
		private static readonly System.Lazy<FieldAccessor<SteeringWheel, float>> _deadZoneAngle =
				new System.Lazy<FieldAccessor<SteeringWheel, float>>(() => FieldAccessor<SteeringWheel, float>.Create("deadZoneAngle"));
		private static readonly System.Lazy<FieldAccessor<SteeringWheel, float>> _maxRotationAngle =
				new System.Lazy<FieldAccessor<SteeringWheel, float>>(() => FieldAccessor<SteeringWheel, float>.Create("maxRotationAngle"));
		private static readonly System.Lazy<FieldAccessor<SteeringWheel, float>> _steeringWheelLerpSpeed =
				new System.Lazy<FieldAccessor<SteeringWheel, float>>(() => FieldAccessor<SteeringWheel, float>.Create("steeringWheelLerpSpeed"));
		private static readonly System.Lazy<FieldAccessor<SteeringWheel, Raft_Network>> _network =
				new System.Lazy<FieldAccessor<SteeringWheel, Raft_Network>>(() => FieldAccessor<SteeringWheel, Raft_Network>.Create("network"));
		private static readonly System.Lazy<FieldAccessor<SteeringWheel, DisplayTextManager>> _displayText =
				new System.Lazy<FieldAccessor<SteeringWheel, DisplayTextManager>>(() => FieldAccessor<SteeringWheel, DisplayTextManager>.Create("displayText"));
		private static readonly System.Lazy<FieldAccessor<SteeringWheel, Network_Player>> _localPlayer =
				new System.Lazy<FieldAccessor<SteeringWheel, Network_Player>>(() => FieldAccessor<SteeringWheel, Network_Player>.Create("localPlayer"));
		private static readonly System.Lazy<FieldAccessor<SteeringWheel, bool>> _hasBeenPlaced =
				new System.Lazy<FieldAccessor<SteeringWheel, bool>>(() => FieldAccessor<SteeringWheel, bool>.Create("hasBeenPlaced"));
		private static readonly System.Lazy<FieldAccessor<SteeringWheel, bool>> _isDisplayingText =
				new System.Lazy<FieldAccessor<SteeringWheel, bool>>(() => FieldAccessor<SteeringWheel, bool>.Create("isDisplayingText"));

		public static UnityEngine.Transform GetRotationTransform(this SteeringWheel __self) => _rotationTransform.Value.GetValue(__self);
		public static void SetRotationTransform(this SteeringWheel __self, UnityEngine.Transform value) => _rotationTransform.Value.SetValue(__self, value);
		public static float GetDeadZoneAngle(this SteeringWheel __self) => _deadZoneAngle.Value.GetValue(__self);
		public static void SetDeadZoneAngle(this SteeringWheel __self, float value) => _deadZoneAngle.Value.SetValue(__self, value);
		public static float GetMaxRotationAngle(this SteeringWheel __self) => _maxRotationAngle.Value.GetValue(__self);
		public static void SetMaxRotationAngle(this SteeringWheel __self, float value) => _maxRotationAngle.Value.SetValue(__self, value);
		public static float GetSteeringWheelLerpSpeed(this SteeringWheel __self) => _steeringWheelLerpSpeed.Value.GetValue(__self);
		public static void SetSteeringWheelLerpSpeed(this SteeringWheel __self, float value) => _steeringWheelLerpSpeed.Value.SetValue(__self, value);
		public static Raft_Network GetNetwork(this SteeringWheel __self) => _network.Value.GetValue(__self);
		public static void SetNetwork(this SteeringWheel __self, Raft_Network value) => _network.Value.SetValue(__self, value);
		public static DisplayTextManager GetDisplayText(this SteeringWheel __self) => _displayText.Value.GetValue(__self);
		public static void SetDisplayText(this SteeringWheel __self, DisplayTextManager value) => _displayText.Value.SetValue(__self, value);
		public static Network_Player GetLocalPlayer(this SteeringWheel __self) => _localPlayer.Value.GetValue(__self);
		public static void SetLocalPlayer(this SteeringWheel __self, Network_Player value) => _localPlayer.Value.SetValue(__self, value);
		public static bool GetHasBeenPlaced(this SteeringWheel __self) => _hasBeenPlaced.Value.GetValue(__self);
		public static void SetHasBeenPlaced(this SteeringWheel __self, bool value) => _hasBeenPlaced.Value.SetValue(__self, value);
		public static bool GetIsDisplayingText(this SteeringWheel __self) => _isDisplayingText.Value.GetValue(__self);
		public static void SetIsDisplayingText(this SteeringWheel __self, bool value) => _isDisplayingText.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<SteeringWheel>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<SteeringWheel>>(() => MethodAccessor<SteeringWheel>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<SteeringWheel>> _Update757602046 =
				new System.Lazy<MethodAccessor<SteeringWheel>>(() => MethodAccessor<SteeringWheel>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<SteeringWheel>> _OnBlockPlaced757602046 =
				new System.Lazy<MethodAccessor<SteeringWheel>>(() => MethodAccessor<SteeringWheel>.Create("OnBlockPlaced"));
		private static readonly System.Lazy<MethodAccessor<SteeringWheel>> _Rotate3486905475 =
				new System.Lazy<MethodAccessor<SteeringWheel>>(() => MethodAccessor<SteeringWheel>.Create("Rotate", typeof(float)));

		public static void OnDestroy(this SteeringWheel __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void Update(this SteeringWheel __self) => _Update757602046.Value.Invoke(__self);
		public static void OnBlockPlaced(this SteeringWheel __self) => _OnBlockPlaced757602046.Value.Invoke(__self);
		public static void Rotate(this SteeringWheel __self, float degree) => _Rotate3486905475.Value.Invoke(__self, degree);

	}

	public static class PrivateAccessor_Message_SteeringWheel_Create
	{

		private static readonly System.Lazy<MethodAccessor<Message_SteeringWheel_Create>> _GetSteeringWheelFromObjectIndex3488589327 =
				new System.Lazy<MethodAccessor<Message_SteeringWheel_Create>>(() => MethodAccessor<Message_SteeringWheel_Create>.Create("GetSteeringWheelFromObjectIndex", typeof(SteeringWheel[]), typeof(uint)));

		public static SteeringWheel GetSteeringWheelFromObjectIndex(this Message_SteeringWheel_Create __self, SteeringWheel[] steeringWheels, uint objectIndex) => (SteeringWheel)_GetSteeringWheelFromObjectIndex3488589327.Value.Invoke(__self, steeringWheels, objectIndex);

	}

	public static class PrivateAccessor_SteeringWheelRudderAttachment
	{

		private static readonly System.Lazy<FieldAccessor<SteeringWheelRudderAttachment, SteeringWheel>> _steeringWheel =
				new System.Lazy<FieldAccessor<SteeringWheelRudderAttachment, SteeringWheel>>(() => FieldAccessor<SteeringWheelRudderAttachment, SteeringWheel>.Create("steeringWheel"));

		public static SteeringWheel GetSteeringWheel(this SteeringWheelRudderAttachment __self) => _steeringWheel.Value.GetValue(__self);
		public static void SetSteeringWheel(this SteeringWheelRudderAttachment __self, SteeringWheel value) => _steeringWheel.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<SteeringWheelRudderAttachment>> _OnValidate757602046 =
				new System.Lazy<MethodAccessor<SteeringWheelRudderAttachment>>(() => MethodAccessor<SteeringWheelRudderAttachment>.Create("OnValidate"));
		private static readonly System.Lazy<MethodAccessor<SteeringWheelRudderAttachment>> _Start757602046 =
				new System.Lazy<MethodAccessor<SteeringWheelRudderAttachment>>(() => MethodAccessor<SteeringWheelRudderAttachment>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<SteeringWheelRudderAttachment>> _BuildRudderPipe3429126434 =
				new System.Lazy<MethodAccessor<SteeringWheelRudderAttachment>>(() => MethodAccessor<SteeringWheelRudderAttachment>.Create("BuildRudderPipe", typeof(UnityEngine.Vector3)));
		private static readonly System.Lazy<MethodAccessor<SteeringWheelRudderAttachment>> _BuildHalfRudderPipe3429126434 =
				new System.Lazy<MethodAccessor<SteeringWheelRudderAttachment>>(() => MethodAccessor<SteeringWheelRudderAttachment>.Create("BuildHalfRudderPipe", typeof(UnityEngine.Vector3)));
		private static readonly System.Lazy<MethodAccessor<SteeringWheelRudderAttachment>> _BuildRudder3429126434 =
				new System.Lazy<MethodAccessor<SteeringWheelRudderAttachment>>(() => MethodAccessor<SteeringWheelRudderAttachment>.Create("BuildRudder", typeof(UnityEngine.Vector3)));
		private static readonly System.Lazy<MethodAccessor<SteeringWheelRudderAttachment>> _ExtendSteeringWheelColliderToPosition1701212201 =
				new System.Lazy<MethodAccessor<SteeringWheelRudderAttachment>>(() => MethodAccessor<SteeringWheelRudderAttachment>.Create("ExtendSteeringWheelColliderToPosition", typeof(SteeringWheel), typeof(UnityEngine.Vector3)));

		public static void OnValidate(this SteeringWheelRudderAttachment __self) => _OnValidate757602046.Value.Invoke(__self);
		public static void Start(this SteeringWheelRudderAttachment __self) => _Start757602046.Value.Invoke(__self);
		public static void BuildRudderPipe(this SteeringWheelRudderAttachment __self, UnityEngine.Vector3 position) => _BuildRudderPipe3429126434.Value.Invoke(__self, position);
		public static void BuildHalfRudderPipe(this SteeringWheelRudderAttachment __self, UnityEngine.Vector3 position) => _BuildHalfRudderPipe3429126434.Value.Invoke(__self, position);
		public static void BuildRudder(this SteeringWheelRudderAttachment __self, UnityEngine.Vector3 position) => _BuildRudder3429126434.Value.Invoke(__self, position);
		public static void ExtendSteeringWheelColliderToPosition(this SteeringWheelRudderAttachment __self, SteeringWheel steeringWheel, UnityEngine.Vector3 position) => _ExtendSteeringWheelColliderToPosition1701212201.Value.Invoke(__self, steeringWheel, position);

	}

	public static class PrivateAccessor_StorageManager
	{

		private static readonly System.Lazy<FieldAccessor<StorageManager, Network_Player>> _playerNetwork =
				new System.Lazy<FieldAccessor<StorageManager, Network_Player>>(() => FieldAccessor<StorageManager, Network_Player>.Create("playerNetwork"));

		public static Network_Player GetPlayerNetwork(this StorageManager __self) => _playerNetwork.Value.GetValue(__self);
		public static void SetPlayerNetwork(this StorageManager __self, Network_Player value) => _playerNetwork.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<StorageManager>> _Start757602046 =
				new System.Lazy<MethodAccessor<StorageManager>>(() => MethodAccessor<StorageManager>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<StorageManager>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<StorageManager>>(() => MethodAccessor<StorageManager>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<StorageManager>> _Update757602046 =
				new System.Lazy<MethodAccessor<StorageManager>>(() => MethodAccessor<StorageManager>.Create("Update"));

		public static void Start(this StorageManager __self) => _Start757602046.Value.Invoke(__self);
		public static void OnDestroy(this StorageManager __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void Update(this StorageManager __self) => _Update757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Storage_Small
	{

		private static readonly System.Lazy<FieldAccessor<Storage_Small, Storage_Small.StorageFill[]>> _storageFillers =
				new System.Lazy<FieldAccessor<Storage_Small, Storage_Small.StorageFill[]>>(() => FieldAccessor<Storage_Small, Storage_Small.StorageFill[]>.Create("storageFillers"));
		private static readonly System.Lazy<FieldAccessor<Storage_Small, AnimatorMessageForwarder>> _animatorMessageForwarder =
				new System.Lazy<FieldAccessor<Storage_Small, AnimatorMessageForwarder>>(() => FieldAccessor<Storage_Small, AnimatorMessageForwarder>.Create("animatorMessageForwarder"));
		private static readonly System.Lazy<FieldAccessor<Storage_Small, string>> _eventRef_open =
				new System.Lazy<FieldAccessor<Storage_Small, string>>(() => FieldAccessor<Storage_Small, string>.Create("eventRef_open"));
		private static readonly System.Lazy<FieldAccessor<Storage_Small, string>> _eventRef_close =
				new System.Lazy<FieldAccessor<Storage_Small, string>>(() => FieldAccessor<Storage_Small, string>.Create("eventRef_close"));
		private static readonly System.Lazy<FieldAccessor<Storage_Small, string>> _eventRef_close_squeal =
				new System.Lazy<FieldAccessor<Storage_Small, string>>(() => FieldAccessor<Storage_Small, string>.Create("eventRef_close_squeal"));
		private static readonly System.Lazy<FieldAccessor<Storage_Small, bool>> _playCloseSoundEndOfAnimation =
				new System.Lazy<FieldAccessor<Storage_Small, bool>>(() => FieldAccessor<Storage_Small, bool>.Create("playCloseSoundEndOfAnimation"));
		private static readonly System.Lazy<FieldAccessor<Storage_Small, Inventory>> _inventoryReference =
				new System.Lazy<FieldAccessor<Storage_Small, Inventory>>(() => FieldAccessor<Storage_Small, Inventory>.Create("inventoryReference"));
		private static readonly System.Lazy<FieldAccessor<Storage_Small, CanvasHelper>> _canvas =
				new System.Lazy<FieldAccessor<Storage_Small, CanvasHelper>>(() => FieldAccessor<Storage_Small, CanvasHelper>.Create("canvas"));
		private static readonly System.Lazy<FieldAccessor<Storage_Small, bool>> _isOpen =
				new System.Lazy<FieldAccessor<Storage_Small, bool>>(() => FieldAccessor<Storage_Small, bool>.Create("isOpen"));
		private static readonly System.Lazy<FieldAccessor<Storage_Small, bool>> _canCloseWithUsebutton =
				new System.Lazy<FieldAccessor<Storage_Small, bool>>(() => FieldAccessor<Storage_Small, bool>.Create("canCloseWithUsebutton"));
		private static readonly System.Lazy<FieldAccessor<Storage_Small, StorageManager>> _storageManager =
				new System.Lazy<FieldAccessor<Storage_Small, StorageManager>>(() => FieldAccessor<Storage_Small, StorageManager>.Create("storageManager"));
		private static readonly System.Lazy<FieldAccessor<Storage_Small, Raft_Network>> _network =
				new System.Lazy<FieldAccessor<Storage_Small, Raft_Network>>(() => FieldAccessor<Storage_Small, Raft_Network>.Create("network"));
		private static readonly System.Lazy<FieldAccessor<Storage_Small, Network_Player>> _currentPlayer =
				new System.Lazy<FieldAccessor<Storage_Small, Network_Player>>(() => FieldAccessor<Storage_Small, Network_Player>.Create("currentPlayer"));

		public static Storage_Small.StorageFill[] GetStorageFillers(this Storage_Small __self) => _storageFillers.Value.GetValue(__self);
		public static void SetStorageFillers(this Storage_Small __self, Storage_Small.StorageFill[] value) => _storageFillers.Value.SetValue(__self, value);
		public static AnimatorMessageForwarder GetAnimatorMessageForwarder(this Storage_Small __self) => _animatorMessageForwarder.Value.GetValue(__self);
		public static void SetAnimatorMessageForwarder(this Storage_Small __self, AnimatorMessageForwarder value) => _animatorMessageForwarder.Value.SetValue(__self, value);
		public static string GetEventRef_open(this Storage_Small __self) => _eventRef_open.Value.GetValue(__self);
		public static void SetEventRef_open(this Storage_Small __self, string value) => _eventRef_open.Value.SetValue(__self, value);
		public static string GetEventRef_close(this Storage_Small __self) => _eventRef_close.Value.GetValue(__self);
		public static void SetEventRef_close(this Storage_Small __self, string value) => _eventRef_close.Value.SetValue(__self, value);
		public static string GetEventRef_close_squeal(this Storage_Small __self) => _eventRef_close_squeal.Value.GetValue(__self);
		public static void SetEventRef_close_squeal(this Storage_Small __self, string value) => _eventRef_close_squeal.Value.SetValue(__self, value);
		public static bool GetPlayCloseSoundEndOfAnimation(this Storage_Small __self) => _playCloseSoundEndOfAnimation.Value.GetValue(__self);
		public static void SetPlayCloseSoundEndOfAnimation(this Storage_Small __self, bool value) => _playCloseSoundEndOfAnimation.Value.SetValue(__self, value);
		public static Inventory GetInventoryReference(this Storage_Small __self) => _inventoryReference.Value.GetValue(__self);
		public static void SetInventoryReference(this Storage_Small __self, Inventory value) => _inventoryReference.Value.SetValue(__self, value);
		public static CanvasHelper GetCanvas(this Storage_Small __self) => _canvas.Value.GetValue(__self);
		public static void SetCanvas(this Storage_Small __self, CanvasHelper value) => _canvas.Value.SetValue(__self, value);
		public static bool GetIsOpen(this Storage_Small __self) => _isOpen.Value.GetValue(__self);
		public static void SetIsOpen(this Storage_Small __self, bool value) => _isOpen.Value.SetValue(__self, value);
		public static bool GetCanCloseWithUsebutton(this Storage_Small __self) => _canCloseWithUsebutton.Value.GetValue(__self);
		public static void SetCanCloseWithUsebutton(this Storage_Small __self, bool value) => _canCloseWithUsebutton.Value.SetValue(__self, value);
		public static StorageManager GetStorageManager(this Storage_Small __self) => _storageManager.Value.GetValue(__self);
		public static void SetStorageManager(this Storage_Small __self, StorageManager value) => _storageManager.Value.SetValue(__self, value);
		public static Raft_Network GetNetwork(this Storage_Small __self) => _network.Value.GetValue(__self);
		public static void SetNetwork(this Storage_Small __self, Raft_Network value) => _network.Value.SetValue(__self, value);
		public static Network_Player GetCurrentPlayer(this Storage_Small __self) => _currentPlayer.Value.GetValue(__self);
		public static void SetCurrentPlayer(this Storage_Small __self, Network_Player value) => _currentPlayer.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Storage_Small>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<Storage_Small>>(() => MethodAccessor<Storage_Small>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<Storage_Small>> _OnAnimatorMessage3454057852 =
				new System.Lazy<MethodAccessor<Storage_Small>>(() => MethodAccessor<Storage_Small>.Create("OnAnimatorMessage", typeof(string)));
		private static readonly System.Lazy<MethodAccessor<Storage_Small>> _UpdateStorageFillRenderers757602046 =
				new System.Lazy<MethodAccessor<Storage_Small>>(() => MethodAccessor<Storage_Small>.Create("UpdateStorageFillRenderers"));
		private static readonly System.Lazy<MethodAccessor<Storage_Small>> _SetStorageFillers3486905475 =
				new System.Lazy<MethodAccessor<Storage_Small>>(() => MethodAccessor<Storage_Small>.Create("SetStorageFillers", typeof(float)));
		private static readonly System.Lazy<MethodAccessor<Storage_Small>> _AllowCloseWithUseButton757602046 =
				new System.Lazy<MethodAccessor<Storage_Small>>(() => MethodAccessor<Storage_Small>.Create("AllowCloseWithUseButton"));

		public static void OnDestroy(this Storage_Small __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void OnAnimatorMessage(this Storage_Small __self, string message) => _OnAnimatorMessage3454057852.Value.Invoke(__self, message);
		public static void UpdateStorageFillRenderers(this Storage_Small __self) => _UpdateStorageFillRenderers757602046.Value.Invoke(__self);
		public static void SetStorageFillers(this Storage_Small __self, float normalizedFullInventory) => _SetStorageFillers3486905475.Value.Invoke(__self, normalizedFullInventory);
		public static void AllowCloseWithUseButton(this Storage_Small __self) => _AllowCloseWithUseButton757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Streamer
	{

		private static readonly System.Lazy<FieldAccessor<Streamer, float>> _rotationSpeed =
				new System.Lazy<FieldAccessor<Streamer, float>>(() => FieldAccessor<Streamer, float>.Create("rotationSpeed"));
		private static readonly System.Lazy<FieldAccessor<Streamer, UnityEngine.Transform>> _streamerTransform =
				new System.Lazy<FieldAccessor<Streamer, UnityEngine.Transform>>(() => FieldAccessor<Streamer, UnityEngine.Transform>.Create("streamerTransform"));
		private static readonly System.Lazy<FieldAccessor<Streamer, UnityEngine.Vector3>> _worldRotationTargetDir =
				new System.Lazy<FieldAccessor<Streamer, UnityEngine.Vector3>>(() => FieldAccessor<Streamer, UnityEngine.Vector3>.Create("worldRotationTargetDir"));

		public static float GetRotationSpeed(this Streamer __self) => _rotationSpeed.Value.GetValue(__self);
		public static void SetRotationSpeed(this Streamer __self, float value) => _rotationSpeed.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetStreamerTransform(this Streamer __self) => _streamerTransform.Value.GetValue(__self);
		public static void SetStreamerTransform(this Streamer __self, UnityEngine.Transform value) => _streamerTransform.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetWorldRotationTargetDir(this Streamer __self) => _worldRotationTargetDir.Value.GetValue(__self);
		public static void SetWorldRotationTargetDir(this Streamer __self, UnityEngine.Vector3 value) => _worldRotationTargetDir.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Streamer>> _Update757602046 =
				new System.Lazy<MethodAccessor<Streamer>>(() => MethodAccessor<Streamer>.Create("Update"));

		public static void Update(this Streamer __self) => _Update757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_MotorwheelFuelTank
	{

		private static readonly System.Lazy<MethodAccessor<MotorwheelFuelTank>> _OnValidate757602046 =
				new System.Lazy<MethodAccessor<MotorwheelFuelTank>>(() => MethodAccessor<MotorwheelFuelTank>.Create("OnValidate"));
		private static readonly System.Lazy<MethodAccessor<MotorwheelFuelTank>> _LocalTankAmountChange757602046 =
				new System.Lazy<MethodAccessor<MotorwheelFuelTank>>(() => MethodAccessor<MotorwheelFuelTank>.Create("LocalTankAmountChange"));

		public static void OnValidate(this MotorwheelFuelTank __self) => _OnValidate757602046.Value.Invoke(__self);
		public static void LocalTankAmountChange(this MotorwheelFuelTank __self) => _LocalTankAmountChange757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Placeable_Tank
	{

		private static readonly System.Lazy<MethodAccessor<Placeable_Tank>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<Placeable_Tank>>(() => MethodAccessor<Placeable_Tank>.Create("OnDestroy"));

		public static void OnDestroy(this Placeable_Tank __self) => _OnDestroy757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Tank
	{

		private static readonly System.Lazy<FieldAccessor<Tank, float>> _currentTankAmount =
				new System.Lazy<FieldAccessor<Tank, float>>(() => FieldAccessor<Tank, float>.Create("currentTankAmount"));
		private static readonly System.Lazy<FieldAccessor<Tank, MonoBehaviour_ID_Network>> _messageReciever =
				new System.Lazy<FieldAccessor<Tank, MonoBehaviour_ID_Network>>(() => FieldAccessor<Tank, MonoBehaviour_ID_Network>.Create("messageReciever"));
		private static readonly System.Lazy<FieldAccessor<Tank, InteractableButton_Tank>> _outputButton =
				new System.Lazy<FieldAccessor<Tank, InteractableButton_Tank>>(() => FieldAccessor<Tank, InteractableButton_Tank>.Create("outputButton"));
		private static readonly System.Lazy<FieldAccessor<Tank, System.Collections.Generic.List<Item_Base>>> _acceptableTypes =
				new System.Lazy<FieldAccessor<Tank, System.Collections.Generic.List<Item_Base>>>(() => FieldAccessor<Tank, System.Collections.Generic.List<Item_Base>>.Create("acceptableTypes"));
		private static readonly System.Lazy<FieldAccessor<Tank, System.Collections.Generic.List<Item_Base>>> _acceptableOutputTypes =
				new System.Lazy<FieldAccessor<Tank, System.Collections.Generic.List<Item_Base>>>(() => FieldAccessor<Tank, System.Collections.Generic.List<Item_Base>>.Create("acceptableOutputTypes"));
		private static readonly System.Lazy<FieldAccessor<Tank, Raft_Network>> _network =
				new System.Lazy<FieldAccessor<Tank, Raft_Network>>(() => FieldAccessor<Tank, Raft_Network>.Create("network"));
		private static readonly System.Lazy<FieldAccessor<Tank, Network_Player>> _localPlayer =
				new System.Lazy<FieldAccessor<Tank, Network_Player>>(() => FieldAccessor<Tank, Network_Player>.Create("localPlayer"));
		private static readonly System.Lazy<FieldAccessor<Tank, DisplayTextManager>> _displayText =
				new System.Lazy<FieldAccessor<Tank, DisplayTextManager>>(() => FieldAccessor<Tank, DisplayTextManager>.Create("displayText"));
		private static readonly System.Lazy<FieldAccessor<Tank, bool>> _hasBeenPlaced =
				new System.Lazy<FieldAccessor<Tank, bool>>(() => FieldAccessor<Tank, bool>.Create("hasBeenPlaced"));
		private static readonly System.Lazy<FieldAccessor<Tank, Tank.TankAcceptance>> _tankAcceptance =
				new System.Lazy<FieldAccessor<Tank, Tank.TankAcceptance>>(() => FieldAccessor<Tank, Tank.TankAcceptance>.Create("tankAcceptance"));

		public static float GetCurrentTankAmount(this Tank __self) => _currentTankAmount.Value.GetValue(__self);
		public static void SetCurrentTankAmount(this Tank __self, float value) => _currentTankAmount.Value.SetValue(__self, value);
		public static MonoBehaviour_ID_Network GetMessageReciever(this Tank __self) => _messageReciever.Value.GetValue(__self);
		public static void SetMessageReciever(this Tank __self, MonoBehaviour_ID_Network value) => _messageReciever.Value.SetValue(__self, value);
		public static InteractableButton_Tank GetOutputButton(this Tank __self) => _outputButton.Value.GetValue(__self);
		public static void SetOutputButton(this Tank __self, InteractableButton_Tank value) => _outputButton.Value.SetValue(__self, value);
		public static System.Collections.Generic.List<Item_Base> GetAcceptableTypes(this Tank __self) => _acceptableTypes.Value.GetValue(__self);
		public static void SetAcceptableTypes(this Tank __self, System.Collections.Generic.List<Item_Base> value) => _acceptableTypes.Value.SetValue(__self, value);
		public static System.Collections.Generic.List<Item_Base> GetAcceptableOutputTypes(this Tank __self) => _acceptableOutputTypes.Value.GetValue(__self);
		public static void SetAcceptableOutputTypes(this Tank __self, System.Collections.Generic.List<Item_Base> value) => _acceptableOutputTypes.Value.SetValue(__self, value);
		public static Raft_Network GetNetwork(this Tank __self) => _network.Value.GetValue(__self);
		public static void SetNetwork(this Tank __self, Raft_Network value) => _network.Value.SetValue(__self, value);
		public static Network_Player GetLocalPlayer(this Tank __self) => _localPlayer.Value.GetValue(__self);
		public static void SetLocalPlayer(this Tank __self, Network_Player value) => _localPlayer.Value.SetValue(__self, value);
		public static DisplayTextManager GetDisplayText(this Tank __self) => _displayText.Value.GetValue(__self);
		public static void SetDisplayText(this Tank __self, DisplayTextManager value) => _displayText.Value.SetValue(__self, value);
		public static bool GetHasBeenPlaced(this Tank __self) => _hasBeenPlaced.Value.GetValue(__self);
		public static void SetHasBeenPlaced(this Tank __self, bool value) => _hasBeenPlaced.Value.SetValue(__self, value);
		public static Tank.TankAcceptance GetTankAcceptance(this Tank __self) => _tankAcceptance.Value.GetValue(__self);
		public static void SetTankAcceptance(this Tank __self, Tank.TankAcceptance value) => _tankAcceptance.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Tank>> _HandleAddFuel757602046 =
				new System.Lazy<MethodAccessor<Tank>>(() => MethodAccessor<Tank>.Create("HandleAddFuel"));
		private static readonly System.Lazy<MethodAccessor<Tank>> _HandleTakeFuel757602046 =
				new System.Lazy<MethodAccessor<Tank>>(() => MethodAccessor<Tank>.Create("HandleTakeFuel"));
		private static readonly System.Lazy<MethodAccessor<Tank>> _TempUpdateText757602046 =
				new System.Lazy<MethodAccessor<Tank>>(() => MethodAccessor<Tank>.Create("TempUpdateText"));
		private static readonly System.Lazy<MethodAccessor<Tank>> _LocalTankAmountChange757602046 =
				new System.Lazy<MethodAccessor<Tank>>(() => MethodAccessor<Tank>.Create("LocalTankAmountChange"));
		private static readonly System.Lazy<MethodAccessor<Tank>> _HandlePlayerTankModificationAnimation3461878659 =
				new System.Lazy<MethodAccessor<Tank>>(() => MethodAccessor<Tank>.Create("HandlePlayerTankModificationAnimation", typeof(Network_Player)));

		public static void HandleAddFuel(this Tank __self) => _HandleAddFuel757602046.Value.Invoke(__self);
		public static void HandleTakeFuel(this Tank __self) => _HandleTakeFuel757602046.Value.Invoke(__self);
		public static void TempUpdateText(this Tank __self) => _TempUpdateText757602046.Value.Invoke(__self);
		public static void LocalTankAmountChange(this Tank __self) => _LocalTankAmountChange757602046.Value.Invoke(__self);
		public static void HandlePlayerTankModificationAnimation(this Tank __self, Network_Player player) => _HandlePlayerTankModificationAnimation3461878659.Value.Invoke(__self, player);

	}

	public static class PrivateAccessor_Tank_Gauge
	{

		private static readonly System.Lazy<FieldAccessor<Tank_Gauge, float>> _fuelGaugeTargetAngle =
				new System.Lazy<FieldAccessor<Tank_Gauge, float>>(() => FieldAccessor<Tank_Gauge, float>.Create("fuelGaugeTargetAngle"));
		private static readonly System.Lazy<FieldAccessor<Tank_Gauge, float>> _fuelGaugeCurrentAngle =
				new System.Lazy<FieldAccessor<Tank_Gauge, float>>(() => FieldAccessor<Tank_Gauge, float>.Create("fuelGaugeCurrentAngle"));
		private static readonly System.Lazy<FieldAccessor<Tank_Gauge, float>> _pointerMinAngle =
				new System.Lazy<FieldAccessor<Tank_Gauge, float>>(() => FieldAccessor<Tank_Gauge, float>.Create("pointerMinAngle"));
		private static readonly System.Lazy<FieldAccessor<Tank_Gauge, float>> _pointerMaxAngle =
				new System.Lazy<FieldAccessor<Tank_Gauge, float>>(() => FieldAccessor<Tank_Gauge, float>.Create("pointerMaxAngle"));
		private static readonly System.Lazy<FieldAccessor<Tank_Gauge, int>> _previouslySentFuelGaugeValue =
				new System.Lazy<FieldAccessor<Tank_Gauge, int>>(() => FieldAccessor<Tank_Gauge, int>.Create("previouslySentFuelGaugeValue"));
		private static readonly System.Lazy<FieldAccessor<Tank_Gauge, Axis>> _rotationAxis =
				new System.Lazy<FieldAccessor<Tank_Gauge, Axis>>(() => FieldAccessor<Tank_Gauge, Axis>.Create("rotationAxis"));
		private static readonly System.Lazy<FieldAccessor<Tank_Gauge, UnityEngine.Vector3>> _startAngle =
				new System.Lazy<FieldAccessor<Tank_Gauge, UnityEngine.Vector3>>(() => FieldAccessor<Tank_Gauge, UnityEngine.Vector3>.Create("startAngle"));

		public static float GetFuelGaugeTargetAngle(this Tank_Gauge __self) => _fuelGaugeTargetAngle.Value.GetValue(__self);
		public static void SetFuelGaugeTargetAngle(this Tank_Gauge __self, float value) => _fuelGaugeTargetAngle.Value.SetValue(__self, value);
		public static float GetFuelGaugeCurrentAngle(this Tank_Gauge __self) => _fuelGaugeCurrentAngle.Value.GetValue(__self);
		public static void SetFuelGaugeCurrentAngle(this Tank_Gauge __self, float value) => _fuelGaugeCurrentAngle.Value.SetValue(__self, value);
		public static float GetPointerMinAngle(this Tank_Gauge __self) => _pointerMinAngle.Value.GetValue(__self);
		public static void SetPointerMinAngle(this Tank_Gauge __self, float value) => _pointerMinAngle.Value.SetValue(__self, value);
		public static float GetPointerMaxAngle(this Tank_Gauge __self) => _pointerMaxAngle.Value.GetValue(__self);
		public static void SetPointerMaxAngle(this Tank_Gauge __self, float value) => _pointerMaxAngle.Value.SetValue(__self, value);
		public static int GetPreviouslySentFuelGaugeValue(this Tank_Gauge __self) => _previouslySentFuelGaugeValue.Value.GetValue(__self);
		public static void SetPreviouslySentFuelGaugeValue(this Tank_Gauge __self, int value) => _previouslySentFuelGaugeValue.Value.SetValue(__self, value);
		public static Axis GetRotationAxis(this Tank_Gauge __self) => _rotationAxis.Value.GetValue(__self);
		public static void SetRotationAxis(this Tank_Gauge __self, Axis value) => _rotationAxis.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetStartAngle(this Tank_Gauge __self) => _startAngle.Value.GetValue(__self);
		public static void SetStartAngle(this Tank_Gauge __self, UnityEngine.Vector3 value) => _startAngle.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Tank_Gauge>> _OnValidate757602046 =
				new System.Lazy<MethodAccessor<Tank_Gauge>>(() => MethodAccessor<Tank_Gauge>.Create("OnValidate"));
		private static readonly System.Lazy<MethodAccessor<Tank_Gauge>> _Awake757602046 =
				new System.Lazy<MethodAccessor<Tank_Gauge>>(() => MethodAccessor<Tank_Gauge>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<Tank_Gauge>> _LateUpdate757602046 =
				new System.Lazy<MethodAccessor<Tank_Gauge>>(() => MethodAccessor<Tank_Gauge>.Create("LateUpdate"));
		private static readonly System.Lazy<MethodAccessor<Tank_Gauge>> _LerpGauge757602046 =
				new System.Lazy<MethodAccessor<Tank_Gauge>>(() => MethodAccessor<Tank_Gauge>.Create("LerpGauge"));
		private static readonly System.Lazy<MethodAccessor<Tank_Gauge>> _UpdateFuelGauge757602046 =
				new System.Lazy<MethodAccessor<Tank_Gauge>>(() => MethodAccessor<Tank_Gauge>.Create("UpdateFuelGauge"));

		public static void OnValidate(this Tank_Gauge __self) => _OnValidate757602046.Value.Invoke(__self);
		public static void Awake(this Tank_Gauge __self) => _Awake757602046.Value.Invoke(__self);
		public static void LateUpdate(this Tank_Gauge __self) => _LateUpdate757602046.Value.Invoke(__self);
		public static void LerpGauge(this Tank_Gauge __self) => _LerpGauge757602046.Value.Invoke(__self);
		public static void UpdateFuelGauge(this Tank_Gauge __self) => _UpdateFuelGauge757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Tank_GaugeObjectScaler
	{

		private static readonly System.Lazy<FieldAccessor<Tank_GaugeObjectScaler, Tank>> _tank =
				new System.Lazy<FieldAccessor<Tank_GaugeObjectScaler, Tank>>(() => FieldAccessor<Tank_GaugeObjectScaler, Tank>.Create("tank"));
		private static readonly System.Lazy<FieldAccessor<Tank_GaugeObjectScaler, ObjectScaler>> _objectScaler =
				new System.Lazy<FieldAccessor<Tank_GaugeObjectScaler, ObjectScaler>>(() => FieldAccessor<Tank_GaugeObjectScaler, ObjectScaler>.Create("objectScaler"));

		public static Tank GetTank(this Tank_GaugeObjectScaler __self) => _tank.Value.GetValue(__self);
		public static void SetTank(this Tank_GaugeObjectScaler __self, Tank value) => _tank.Value.SetValue(__self, value);
		public static ObjectScaler GetObjectScaler(this Tank_GaugeObjectScaler __self) => _objectScaler.Value.GetValue(__self);
		public static void SetObjectScaler(this Tank_GaugeObjectScaler __self, ObjectScaler value) => _objectScaler.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Tank_GaugeObjectScaler>> _Awake757602046 =
				new System.Lazy<MethodAccessor<Tank_GaugeObjectScaler>>(() => MethodAccessor<Tank_GaugeObjectScaler>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<Tank_GaugeObjectScaler>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<Tank_GaugeObjectScaler>>(() => MethodAccessor<Tank_GaugeObjectScaler>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<Tank_GaugeObjectScaler>> _OnTankAmountChanged757602046 =
				new System.Lazy<MethodAccessor<Tank_GaugeObjectScaler>>(() => MethodAccessor<Tank_GaugeObjectScaler>.Create("OnTankAmountChanged"));

		public static void Awake(this Tank_GaugeObjectScaler __self) => _Awake757602046.Value.Invoke(__self);
		public static void OnDestroy(this Tank_GaugeObjectScaler __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void OnTankAmountChanged(this Tank_GaugeObjectScaler __self) => _OnTankAmountChanged757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Tank_Listener_Animation
	{

		private static readonly System.Lazy<FieldAccessor<Tank_Listener_Animation, string>> _eventEmitter_TankOpened =
				new System.Lazy<FieldAccessor<Tank_Listener_Animation, string>>(() => FieldAccessor<Tank_Listener_Animation, string>.Create("eventEmitter_TankOpened"));
		private static readonly System.Lazy<FieldAccessor<Tank_Listener_Animation, string>> _eventEmitter_TankClosed =
				new System.Lazy<FieldAccessor<Tank_Listener_Animation, string>>(() => FieldAccessor<Tank_Listener_Animation, string>.Create("eventEmitter_TankClosed"));

		public static string GetEventEmitter_TankOpened(this Tank_Listener_Animation __self) => _eventEmitter_TankOpened.Value.GetValue(__self);
		public static void SetEventEmitter_TankOpened(this Tank_Listener_Animation __self, string value) => _eventEmitter_TankOpened.Value.SetValue(__self, value);
		public static string GetEventEmitter_TankClosed(this Tank_Listener_Animation __self) => _eventEmitter_TankClosed.Value.GetValue(__self);
		public static void SetEventEmitter_TankClosed(this Tank_Listener_Animation __self, string value) => _eventEmitter_TankClosed.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Tank_Listener_Animation>> _TriggerAnim757602046 =
				new System.Lazy<MethodAccessor<Tank_Listener_Animation>>(() => MethodAccessor<Tank_Listener_Animation>.Create("TriggerAnim"));

		public static void TriggerAnim(this Tank_Listener_Animation __self) => _TriggerAnim757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Tank_Recycler_Output
	{

		private static readonly System.Lazy<FieldAccessor<Tank_Recycler_Output, UnityEngine.Renderer[]>> _trashCubeRenderers =
				new System.Lazy<FieldAccessor<Tank_Recycler_Output, UnityEngine.Renderer[]>>(() => FieldAccessor<Tank_Recycler_Output, UnityEngine.Renderer[]>.Create("trashCubeRenderers"));

		public static UnityEngine.Renderer[] GetTrashCubeRenderers(this Tank_Recycler_Output __self) => _trashCubeRenderers.Value.GetValue(__self);
		public static void SetTrashCubeRenderers(this Tank_Recycler_Output __self, UnityEngine.Renderer[] value) => _trashCubeRenderers.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Tank_Recycler_Output>> _LocalTankAmountChange757602046 =
				new System.Lazy<MethodAccessor<Tank_Recycler_Output>>(() => MethodAccessor<Tank_Recycler_Output>.Create("LocalTankAmountChange"));

		public static void LocalTankAmountChange(this Tank_Recycler_Output __self) => _LocalTankAmountChange757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_TextWriterObject
	{

		private static readonly System.Lazy<FieldAccessor<TextWriterObject, TMPro.TextMeshPro>> _textMesh =
				new System.Lazy<FieldAccessor<TextWriterObject, TMPro.TextMeshPro>>(() => FieldAccessor<TextWriterObject, TMPro.TextMeshPro>.Create("textMesh"));

		public static TMPro.TextMeshPro GetTextMesh(this TextWriterObject __self) => _textMesh.Value.GetValue(__self);
		public static void SetTextMesh(this TextWriterObject __self, TMPro.TextMeshPro value) => _textMesh.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<TextWriterObject>> _Awake757602046 =
				new System.Lazy<MethodAccessor<TextWriterObject>>(() => MethodAccessor<TextWriterObject>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<TextWriterObject>> _Start757602046 =
				new System.Lazy<MethodAccessor<TextWriterObject>>(() => MethodAccessor<TextWriterObject>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<TextWriterObject>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<TextWriterObject>>(() => MethodAccessor<TextWriterObject>.Create("OnDestroy"));

		public static void Awake(this TextWriterObject __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this TextWriterObject __self) => _Start757602046.Value.Invoke(__self);
		public static void OnDestroy(this TextWriterObject __self) => _OnDestroy757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Message_Sign_Create
	{

		private static readonly System.Lazy<MethodAccessor<Message_Sign_Create>> _GetSignFromObjectIndex3475068981 =
				new System.Lazy<MethodAccessor<Message_Sign_Create>>(() => MethodAccessor<Message_Sign_Create>.Create("GetSignFromObjectIndex", typeof(TextWriterObject[]), typeof(uint)));

		public static TextWriterObject GetSignFromObjectIndex(this Message_Sign_Create __self, TextWriterObject[] p_signs, uint objectIndex) => (TextWriterObject)_GetSignFromObjectIndex3475068981.Value.Invoke(__self, p_signs, objectIndex);

	}

	public static class PrivateAccessor_TicTacToe
	{

		private static readonly System.Lazy<FieldAccessor<TicTacToe, Block_TicTacToe>> _blockTicTacToe =
				new System.Lazy<FieldAccessor<TicTacToe, Block_TicTacToe>>(() => FieldAccessor<TicTacToe, Block_TicTacToe>.Create("blockTicTacToe"));

		public static Block_TicTacToe GetBlockTicTacToe(this TicTacToe __self) => _blockTicTacToe.Value.GetValue(__self);
		public static void SetBlockTicTacToe(this TicTacToe __self, Block_TicTacToe value) => _blockTicTacToe.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_TikiPole_Head
	{

		private static readonly System.Lazy<FieldAccessor<TikiPole_Head, Item_Base>> _completedTotem =
				new System.Lazy<FieldAccessor<TikiPole_Head, Item_Base>>(() => FieldAccessor<TikiPole_Head, Item_Base>.Create("completedTotem"));
		private static readonly System.Lazy<FieldAccessor<TikiPole_Head, Item_Base>> _tikiMask =
				new System.Lazy<FieldAccessor<TikiPole_Head, Item_Base>>(() => FieldAccessor<TikiPole_Head, Item_Base>.Create("tikiMask"));
		private static readonly System.Lazy<FieldAccessor<TikiPole_Head, float>> _tikiPiecesCheckDownwardsRange =
				new System.Lazy<FieldAccessor<TikiPole_Head, float>>(() => FieldAccessor<TikiPole_Head, float>.Create("tikiPiecesCheckDownwardsRange"));
		private static readonly System.Lazy<FieldAccessor<TikiPole_Head, float>> _spinSpeed =
				new System.Lazy<FieldAccessor<TikiPole_Head, float>>(() => FieldAccessor<TikiPole_Head, float>.Create("spinSpeed"));
		private static readonly System.Lazy<FieldAccessor<TikiPole_Head, UnityEngine.ParticleSystem>> _completeTikiParticles =
				new System.Lazy<FieldAccessor<TikiPole_Head, UnityEngine.ParticleSystem>>(() => FieldAccessor<TikiPole_Head, UnityEngine.ParticleSystem>.Create("completeTikiParticles"));
		private static readonly System.Lazy<FieldAccessor<TikiPole_Head, StudioEventEmitterSustain>> _emitter_spin =
				new System.Lazy<FieldAccessor<TikiPole_Head, StudioEventEmitterSustain>>(() => FieldAccessor<TikiPole_Head, StudioEventEmitterSustain>.Create("emitter_spin"));
		private static readonly System.Lazy<FieldAccessor<TikiPole_Head, FMODUnity.StudioEventEmitter>> _emitter_finishSpin =
				new System.Lazy<FieldAccessor<TikiPole_Head, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<TikiPole_Head, FMODUnity.StudioEventEmitter>.Create("emitter_finishSpin"));
		private static readonly System.Lazy<FieldAccessor<TikiPole_Head, Network_Player>> _hostPlayer =
				new System.Lazy<FieldAccessor<TikiPole_Head, Network_Player>>(() => FieldAccessor<TikiPole_Head, Network_Player>.Create("hostPlayer"));

		public static Item_Base GetCompletedTotem(this TikiPole_Head __self) => _completedTotem.Value.GetValue(__self);
		public static void SetCompletedTotem(this TikiPole_Head __self, Item_Base value) => _completedTotem.Value.SetValue(__self, value);
		public static Item_Base GetTikiMask(this TikiPole_Head __self) => _tikiMask.Value.GetValue(__self);
		public static void SetTikiMask(this TikiPole_Head __self, Item_Base value) => _tikiMask.Value.SetValue(__self, value);
		public static float GetTikiPiecesCheckDownwardsRange(this TikiPole_Head __self) => _tikiPiecesCheckDownwardsRange.Value.GetValue(__self);
		public static void SetTikiPiecesCheckDownwardsRange(this TikiPole_Head __self, float value) => _tikiPiecesCheckDownwardsRange.Value.SetValue(__self, value);
		public static float GetSpinSpeed(this TikiPole_Head __self) => _spinSpeed.Value.GetValue(__self);
		public static void SetSpinSpeed(this TikiPole_Head __self, float value) => _spinSpeed.Value.SetValue(__self, value);
		public static UnityEngine.ParticleSystem GetCompleteTikiParticles(this TikiPole_Head __self) => _completeTikiParticles.Value.GetValue(__self);
		public static void SetCompleteTikiParticles(this TikiPole_Head __self, UnityEngine.ParticleSystem value) => _completeTikiParticles.Value.SetValue(__self, value);
		public static StudioEventEmitterSustain GetEmitter_spin(this TikiPole_Head __self) => _emitter_spin.Value.GetValue(__self);
		public static void SetEmitter_spin(this TikiPole_Head __self, StudioEventEmitterSustain value) => _emitter_spin.Value.SetValue(__self, value);
		public static FMODUnity.StudioEventEmitter GetEmitter_finishSpin(this TikiPole_Head __self) => _emitter_finishSpin.Value.GetValue(__self);
		public static void SetEmitter_finishSpin(this TikiPole_Head __self, FMODUnity.StudioEventEmitter value) => _emitter_finishSpin.Value.SetValue(__self, value);
		public static Network_Player GetHostPlayer(this TikiPole_Head __self) => _hostPlayer.Value.GetValue(__self);
		public static void SetHostPlayer(this TikiPole_Head __self, Network_Player value) => _hostPlayer.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<TikiPole_Head>> _SpinPieces757602046 =
				new System.Lazy<MethodAccessor<TikiPole_Head>>(() => MethodAccessor<TikiPole_Head>.Create("SpinPieces"));
		private static readonly System.Lazy<MethodAccessor<TikiPole_Head>> _OnPlacementCheck757602046 =
				new System.Lazy<MethodAccessor<TikiPole_Head>>(() => MethodAccessor<TikiPole_Head>.Create("OnPlacementCheck"));
		private static readonly System.Lazy<MethodAccessor<TikiPole_Head>> _ReplaceTotemPiecesWithCompletedPrefab757602046 =
				new System.Lazy<MethodAccessor<TikiPole_Head>>(() => MethodAccessor<TikiPole_Head>.Create("ReplaceTotemPiecesWithCompletedPrefab"));

		public static System.Collections.IEnumerator SpinPieces(this TikiPole_Head __self) => (System.Collections.IEnumerator)_SpinPieces757602046.Value.Invoke(__self);
		public static void OnPlacementCheck(this TikiPole_Head __self) => _OnPlacementCheck757602046.Value.Invoke(__self);
		public static void ReplaceTotemPiecesWithCompletedPrefab(this TikiPole_Head __self) => _ReplaceTotemPiecesWithCompletedPrefab757602046.Value.Invoke(__self);

	}

	public static class Private_TikiPole_Head
	{

		private static readonly System.Lazy<StaticFieldAccessor<TikiPole_Piece.TIKIPIECEINDEX[]>> _targetTikiPoleStructure =
				new System.Lazy<StaticFieldAccessor<TikiPole_Piece.TIKIPIECEINDEX[]>>(() => StaticFieldAccessor<TikiPole_Piece.TIKIPIECEINDEX[]>.Create(typeof(TikiPole_Head), "targetTikiPoleStructure"));

		public static TikiPole_Piece.TIKIPIECEINDEX[] GetTargetTikiPoleStructure() => _targetTikiPoleStructure.Value.GetValue();
		public static void SetTargetTikiPoleStructure(TikiPole_Piece.TIKIPIECEINDEX[] value) => _targetTikiPoleStructure.Value.SetValue(value);

	}

	public static class PrivateAccessor_TikiPole_Piece
	{

		private static readonly System.Lazy<FieldAccessor<TikiPole_Piece, TikiPole_Piece.TIKIPIECEINDEX>> _tikiPoleIndex =
				new System.Lazy<FieldAccessor<TikiPole_Piece, TikiPole_Piece.TIKIPIECEINDEX>>(() => FieldAccessor<TikiPole_Piece, TikiPole_Piece.TIKIPIECEINDEX>.Create("tikiPoleIndex"));

		public static TikiPole_Piece.TIKIPIECEINDEX GetTikiPoleIndex(this TikiPole_Piece __self) => _tikiPoleIndex.Value.GetValue(__self);
		public static void SetTikiPoleIndex(this TikiPole_Piece __self, TikiPole_Piece.TIKIPIECEINDEX value) => _tikiPoleIndex.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<TikiPole_Piece>> _DoesOrderMatch462914915 =
				new System.Lazy<MethodAccessor<TikiPole_Piece>>(() => MethodAccessor<TikiPole_Piece>.Create("DoesOrderMatch", typeof(TikiPole_Piece[]), typeof(TikiPole_Piece.TIKIPIECEINDEX[])));
		private static readonly System.Lazy<MethodAccessor<TikiPole_Piece>> _GetTikiPieceByTikiIndex3302256362 =
				new System.Lazy<MethodAccessor<TikiPole_Piece>>(() => MethodAccessor<TikiPole_Piece>.Create("GetTikiPieceByTikiIndex", typeof(TikiPole_Piece[]), typeof(TikiPole_Piece.TIKIPIECEINDEX)));
		private static readonly System.Lazy<MethodAccessor<TikiPole_Piece>> _FindTikisUnderneath3460848027 =
				new System.Lazy<MethodAccessor<TikiPole_Piece>>(() => MethodAccessor<TikiPole_Piece>.Create("FindTikisUnderneath", typeof(float), typeof(bool)));

		public static bool DoesOrderMatch(this TikiPole_Piece __self, TikiPole_Piece[] tikiPoles, TikiPole_Piece.TIKIPIECEINDEX[] targetTikiPoleStructure) => (bool)_DoesOrderMatch462914915.Value.Invoke(__self, tikiPoles, targetTikiPoleStructure);
		public static TikiPole_Piece GetTikiPieceByTikiIndex(this TikiPole_Piece __self, TikiPole_Piece[] tikis, TikiPole_Piece.TIKIPIECEINDEX index) => (TikiPole_Piece)_GetTikiPieceByTikiIndex3302256362.Value.Invoke(__self, tikis, index);
		public static TikiPole_Piece[] FindTikisUnderneath(this TikiPole_Piece __self, float range, bool includeSelf) => (TikiPole_Piece[])_FindTikisUnderneath3460848027.Value.Invoke(__self, range, includeSelf);

	}

	public static class PrivateAccessor_VendingMachine_Element
	{

		private static readonly System.Lazy<FieldAccessor<VendingMachine_Element, TMPro.TextMeshProUGUI>> _requirementLabel =
				new System.Lazy<FieldAccessor<VendingMachine_Element, TMPro.TextMeshProUGUI>>(() => FieldAccessor<VendingMachine_Element, TMPro.TextMeshProUGUI>.Create("requirementLabel"));
		private static readonly System.Lazy<FieldAccessor<VendingMachine_Element, UnityEngine.UI.Image>> _requirementImage =
				new System.Lazy<FieldAccessor<VendingMachine_Element, UnityEngine.UI.Image>>(() => FieldAccessor<VendingMachine_Element, UnityEngine.UI.Image>.Create("requirementImage"));
		private static readonly System.Lazy<FieldAccessor<VendingMachine_Element, UnityEngine.UI.Image>> _outputImage =
				new System.Lazy<FieldAccessor<VendingMachine_Element, UnityEngine.UI.Image>>(() => FieldAccessor<VendingMachine_Element, UnityEngine.UI.Image>.Create("outputImage"));
		private static readonly System.Lazy<FieldAccessor<VendingMachine_Element, TMPro.TextMeshProUGUI>> _outputCountLabel =
				new System.Lazy<FieldAccessor<VendingMachine_Element, TMPro.TextMeshProUGUI>>(() => FieldAccessor<VendingMachine_Element, TMPro.TextMeshProUGUI>.Create("outputCountLabel"));

		public static TMPro.TextMeshProUGUI GetRequirementLabel(this VendingMachine_Element __self) => _requirementLabel.Value.GetValue(__self);
		public static void SetRequirementLabel(this VendingMachine_Element __self, TMPro.TextMeshProUGUI value) => _requirementLabel.Value.SetValue(__self, value);
		public static UnityEngine.UI.Image GetRequirementImage(this VendingMachine_Element __self) => _requirementImage.Value.GetValue(__self);
		public static void SetRequirementImage(this VendingMachine_Element __self, UnityEngine.UI.Image value) => _requirementImage.Value.SetValue(__self, value);
		public static UnityEngine.UI.Image GetOutputImage(this VendingMachine_Element __self) => _outputImage.Value.GetValue(__self);
		public static void SetOutputImage(this VendingMachine_Element __self, UnityEngine.UI.Image value) => _outputImage.Value.SetValue(__self, value);
		public static TMPro.TextMeshProUGUI GetOutputCountLabel(this VendingMachine_Element __self) => _outputCountLabel.Value.GetValue(__self);
		public static void SetOutputCountLabel(this VendingMachine_Element __self, TMPro.TextMeshProUGUI value) => _outputCountLabel.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<VendingMachine_Element>> _Start757602046 =
				new System.Lazy<MethodAccessor<VendingMachine_Element>>(() => MethodAccessor<VendingMachine_Element>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<VendingMachine_Element>> _RefreshUI757602046 =
				new System.Lazy<MethodAccessor<VendingMachine_Element>>(() => MethodAccessor<VendingMachine_Element>.Create("RefreshUI"));

		public static void Start(this VendingMachine_Element __self) => _Start757602046.Value.Invoke(__self);
		public static void RefreshUI(this VendingMachine_Element __self) => _RefreshUI757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_WindTurbine
	{

		private static readonly System.Lazy<FieldAccessor<WindTurbine, int>> _batteryChargesPerTick =
				new System.Lazy<FieldAccessor<WindTurbine, int>>(() => FieldAccessor<WindTurbine, int>.Create("batteryChargesPerTick"));
		private static readonly System.Lazy<FieldAccessor<WindTurbine, TimerEventer>> _rechargeTimer =
				new System.Lazy<FieldAccessor<WindTurbine, TimerEventer>>(() => FieldAccessor<WindTurbine, TimerEventer>.Create("rechargeTimer"));
		private static readonly System.Lazy<FieldAccessor<WindTurbine, UnityEngine.Transform>> _propellerBlades =
				new System.Lazy<FieldAccessor<WindTurbine, UnityEngine.Transform>>(() => FieldAccessor<WindTurbine, UnityEngine.Transform>.Create("propellerBlades"));
		private static readonly System.Lazy<FieldAccessor<WindTurbine, float>> _minEfficiancyValue =
				new System.Lazy<FieldAccessor<WindTurbine, float>>(() => FieldAccessor<WindTurbine, float>.Create("minEfficiancyValue"));
		private static readonly System.Lazy<FieldAccessor<WindTurbine, float>> _maxEfficianyBlockHeight =
				new System.Lazy<FieldAccessor<WindTurbine, float>>(() => FieldAccessor<WindTurbine, float>.Create("maxEfficianyBlockHeight"));
		private static readonly System.Lazy<FieldAccessor<WindTurbine, float>> _rotationSpeed =
				new System.Lazy<FieldAccessor<WindTurbine, float>>(() => FieldAccessor<WindTurbine, float>.Create("rotationSpeed"));
		private static readonly System.Lazy<FieldAccessor<WindTurbine, Gauge>> _gauge =
				new System.Lazy<FieldAccessor<WindTurbine, Gauge>>(() => FieldAccessor<WindTurbine, Gauge>.Create("gauge"));
		private static readonly System.Lazy<FieldAccessor<WindTurbine, Interval_Int>> _gaugeMinMaxAngle =
				new System.Lazy<FieldAccessor<WindTurbine, Interval_Int>>(() => FieldAccessor<WindTurbine, Interval_Int>.Create("gaugeMinMaxAngle"));
		private static readonly System.Lazy<FieldAccessor<WindTurbine, FMODUnity.StudioEventEmitter>> _emitter_charge =
				new System.Lazy<FieldAccessor<WindTurbine, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<WindTurbine, FMODUnity.StudioEventEmitter>.Create("emitter_charge"));
		private static readonly System.Lazy<FieldAccessor<WindTurbine, FMODUnity.StudioEventEmitter>> _emitter_spin =
				new System.Lazy<FieldAccessor<WindTurbine, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<WindTurbine, FMODUnity.StudioEventEmitter>.Create("emitter_spin"));
		private static readonly System.Lazy<FieldAccessor<WindTurbine, bool>> _hasBeenPlaced =
				new System.Lazy<FieldAccessor<WindTurbine, bool>>(() => FieldAccessor<WindTurbine, bool>.Create("hasBeenPlaced"));
		private static readonly System.Lazy<FieldAccessor<WindTurbine, float>> _efficiancy =
				new System.Lazy<FieldAccessor<WindTurbine, float>>(() => FieldAccessor<WindTurbine, float>.Create("efficiancy"));

		public static int GetBatteryChargesPerTick(this WindTurbine __self) => _batteryChargesPerTick.Value.GetValue(__self);
		public static void SetBatteryChargesPerTick(this WindTurbine __self, int value) => _batteryChargesPerTick.Value.SetValue(__self, value);
		public static TimerEventer GetRechargeTimer(this WindTurbine __self) => _rechargeTimer.Value.GetValue(__self);
		public static void SetRechargeTimer(this WindTurbine __self, TimerEventer value) => _rechargeTimer.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetPropellerBlades(this WindTurbine __self) => _propellerBlades.Value.GetValue(__self);
		public static void SetPropellerBlades(this WindTurbine __self, UnityEngine.Transform value) => _propellerBlades.Value.SetValue(__self, value);
		public static float GetMinEfficiancyValue(this WindTurbine __self) => _minEfficiancyValue.Value.GetValue(__self);
		public static void SetMinEfficiancyValue(this WindTurbine __self, float value) => _minEfficiancyValue.Value.SetValue(__self, value);
		public static float GetMaxEfficianyBlockHeight(this WindTurbine __self) => _maxEfficianyBlockHeight.Value.GetValue(__self);
		public static void SetMaxEfficianyBlockHeight(this WindTurbine __self, float value) => _maxEfficianyBlockHeight.Value.SetValue(__self, value);
		public static float GetRotationSpeed(this WindTurbine __self) => _rotationSpeed.Value.GetValue(__self);
		public static void SetRotationSpeed(this WindTurbine __self, float value) => _rotationSpeed.Value.SetValue(__self, value);
		public static Gauge GetGauge(this WindTurbine __self) => _gauge.Value.GetValue(__self);
		public static void SetGauge(this WindTurbine __self, Gauge value) => _gauge.Value.SetValue(__self, value);
		public static Interval_Int GetGaugeMinMaxAngle(this WindTurbine __self) => _gaugeMinMaxAngle.Value.GetValue(__self);
		public static void SetGaugeMinMaxAngle(this WindTurbine __self, Interval_Int value) => _gaugeMinMaxAngle.Value.SetValue(__self, value);
		public static FMODUnity.StudioEventEmitter GetEmitter_charge(this WindTurbine __self) => _emitter_charge.Value.GetValue(__self);
		public static void SetEmitter_charge(this WindTurbine __self, FMODUnity.StudioEventEmitter value) => _emitter_charge.Value.SetValue(__self, value);
		public static FMODUnity.StudioEventEmitter GetEmitter_spin(this WindTurbine __self) => _emitter_spin.Value.GetValue(__self);
		public static void SetEmitter_spin(this WindTurbine __self, FMODUnity.StudioEventEmitter value) => _emitter_spin.Value.SetValue(__self, value);
		public static bool GetHasBeenPlaced(this WindTurbine __self) => _hasBeenPlaced.Value.GetValue(__self);
		public static void SetHasBeenPlaced(this WindTurbine __self, bool value) => _hasBeenPlaced.Value.SetValue(__self, value);
		public static float GetEfficiancy(this WindTurbine __self) => _efficiancy.Value.GetValue(__self);
		public static void SetEfficiancy(this WindTurbine __self, float value) => _efficiancy.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<WindTurbine>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<WindTurbine>>(() => MethodAccessor<WindTurbine>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<WindTurbine>> _HandleChargeSound757602046 =
				new System.Lazy<MethodAccessor<WindTurbine>>(() => MethodAccessor<WindTurbine>.Create("HandleChargeSound"));
		private static readonly System.Lazy<MethodAccessor<WindTurbine>> _ChargeBatteries757602046 =
				new System.Lazy<MethodAccessor<WindTurbine>>(() => MethodAccessor<WindTurbine>.Create("ChargeBatteries"));
		private static readonly System.Lazy<MethodAccessor<WindTurbine>> _RechargeBattery3482064742 =
				new System.Lazy<MethodAccessor<WindTurbine>>(() => MethodAccessor<WindTurbine>.Create("RechargeBattery", typeof(Battery)));

		public static void OnDestroy(this WindTurbine __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void HandleChargeSound(this WindTurbine __self) => _HandleChargeSound757602046.Value.Invoke(__self);
		public static void ChargeBatteries(this WindTurbine __self) => _ChargeBatteries757602046.Value.Invoke(__self);
		public static void RechargeBattery(this WindTurbine __self, Battery battery) => _RechargeBattery3482064742.Value.Invoke(__self, battery);

	}

	public static class PrivateAccessor_MeshPath
	{

		private static readonly System.Lazy<FieldAccessor<MeshPath, bool>> _drawGizmoPoints =
				new System.Lazy<FieldAccessor<MeshPath, bool>>(() => FieldAccessor<MeshPath, bool>.Create("drawGizmoPoints"));
		private static readonly System.Lazy<FieldAccessor<MeshPath, float>> _gizmosScale =
				new System.Lazy<FieldAccessor<MeshPath, float>>(() => FieldAccessor<MeshPath, float>.Create("gizmosScale"));
		private static readonly System.Lazy<FieldAccessor<MeshPath, float>> _ropeWidth =
				new System.Lazy<FieldAccessor<MeshPath, float>>(() => FieldAccessor<MeshPath, float>.Create("ropeWidth"));
		private static readonly System.Lazy<FieldAccessor<MeshPath, float>> _colliderRopeWidthMultiplier =
				new System.Lazy<FieldAccessor<MeshPath, float>>(() => FieldAccessor<MeshPath, float>.Create("colliderRopeWidthMultiplier"));
		private static readonly System.Lazy<FieldAccessor<MeshPath, UnityEngine.MeshFilter>> _meshFilter =
				new System.Lazy<FieldAccessor<MeshPath, UnityEngine.MeshFilter>>(() => FieldAccessor<MeshPath, UnityEngine.MeshFilter>.Create("meshFilter"));
		private static readonly System.Lazy<FieldAccessor<MeshPath, string>> _eventRef_createZipline =
				new System.Lazy<FieldAccessor<MeshPath, string>>(() => FieldAccessor<MeshPath, string>.Create("eventRef_createZipline"));

		public static bool GetDrawGizmoPoints(this MeshPath __self) => _drawGizmoPoints.Value.GetValue(__self);
		public static void SetDrawGizmoPoints(this MeshPath __self, bool value) => _drawGizmoPoints.Value.SetValue(__self, value);
		public static float GetGizmosScale(this MeshPath __self) => _gizmosScale.Value.GetValue(__self);
		public static void SetGizmosScale(this MeshPath __self, float value) => _gizmosScale.Value.SetValue(__self, value);
		public static float GetRopeWidth(this MeshPath __self) => _ropeWidth.Value.GetValue(__self);
		public static void SetRopeWidth(this MeshPath __self, float value) => _ropeWidth.Value.SetValue(__self, value);
		public static float GetColliderRopeWidthMultiplier(this MeshPath __self) => _colliderRopeWidthMultiplier.Value.GetValue(__self);
		public static void SetColliderRopeWidthMultiplier(this MeshPath __self, float value) => _colliderRopeWidthMultiplier.Value.SetValue(__self, value);
		public static UnityEngine.MeshFilter GetMeshFilter(this MeshPath __self) => _meshFilter.Value.GetValue(__self);
		public static void SetMeshFilter(this MeshPath __self, UnityEngine.MeshFilter value) => _meshFilter.Value.SetValue(__self, value);
		public static string GetEventRef_createZipline(this MeshPath __self) => _eventRef_createZipline.Value.GetValue(__self);
		public static void SetEventRef_createZipline(this MeshPath __self, string value) => _eventRef_createZipline.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<MeshPath>> _OnDrawGizmos757602046 =
				new System.Lazy<MethodAccessor<MeshPath>>(() => MethodAccessor<MeshPath>.Create("OnDrawGizmos"));
		private static readonly System.Lazy<MethodAccessor<MeshPath>> _GenerateMeshFromPath3981832511 =
				new System.Lazy<MethodAccessor<MeshPath>>(() => MethodAccessor<MeshPath>.Create("GenerateMeshFromPath", typeof(UnityEngine.Vector3), typeof(UnityEngine.Vector3), typeof(float)));
		private static readonly System.Lazy<MethodAccessor<MeshPath>> _GetPathLength757602046 =
				new System.Lazy<MethodAccessor<MeshPath>>(() => MethodAccessor<MeshPath>.Create("GetPathLength"));

		public static void OnDrawGizmos(this MeshPath __self) => _OnDrawGizmos757602046.Value.Invoke(__self);
		public static UnityEngine.Mesh GenerateMeshFromPath(this MeshPath __self, UnityEngine.Vector3 pointA, UnityEngine.Vector3 pointB, float ropeWidth) => (UnityEngine.Mesh)_GenerateMeshFromPath3981832511.Value.Invoke(__self, pointA, pointB, ropeWidth);
		public static float GetPathLength(this MeshPath __self) => (float)_GetPathLength757602046.Value.Invoke(__self);

	}

	public static class Private_MeshPath
	{

		private static readonly System.Lazy<StaticMethodAccessor> _CreateNewMeshPathGameObject3820662563 =
				new System.Lazy<StaticMethodAccessor>(() => StaticMethodAccessor.Create(typeof(MeshPath), "CreateNewMeshPathGameObject", typeof(MeshPath), typeof(UnityEngine.Vector3), typeof(UnityEngine.Transform)));

		public static MeshPath CreateNewMeshPathGameObject(MeshPath pathPrefab, UnityEngine.Vector3 position, UnityEngine.Transform parent) => (MeshPath)_CreateNewMeshPathGameObject3820662563.Value.Invoke(pathPrefab, position, parent);

	}

	public static class PrivateAccessor_MeshPathBase
	{

		private static readonly System.Lazy<FieldAccessor<MeshPathBase, CanvasHelper>> _canvas =
				new System.Lazy<FieldAccessor<MeshPathBase, CanvasHelper>>(() => FieldAccessor<MeshPathBase, CanvasHelper>.Create("canvas"));
		private static readonly System.Lazy<FieldAccessor<MeshPathBase, Network_Player>> _localPlayer =
				new System.Lazy<FieldAccessor<MeshPathBase, Network_Player>>(() => FieldAccessor<MeshPathBase, Network_Player>.Create("localPlayer"));

		public static CanvasHelper GetCanvas(this MeshPathBase __self) => _canvas.Value.GetValue(__self);
		public static void SetCanvas(this MeshPathBase __self, CanvasHelper value) => _canvas.Value.SetValue(__self, value);
		public static Network_Player GetLocalPlayer(this MeshPathBase __self) => _localPlayer.Value.GetValue(__self);
		public static void SetLocalPlayer(this MeshPathBase __self, Network_Player value) => _localPlayer.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<MeshPathBase>> _Start757602046 =
				new System.Lazy<MethodAccessor<MeshPathBase>>(() => MethodAccessor<MeshPathBase>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<MeshPathBase>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<MeshPathBase>>(() => MethodAccessor<MeshPathBase>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<MeshPathBase>> _CanStartCreatingPath757602046 =
				new System.Lazy<MethodAccessor<MeshPathBase>>(() => MethodAccessor<MeshPathBase>.Create("CanStartCreatingPath"));
		private static readonly System.Lazy<MethodAccessor<MeshPathBase>> _FinishCreatingZipline757602046 =
				new System.Lazy<MethodAccessor<MeshPathBase>>(() => MethodAccessor<MeshPathBase>.Create("FinishCreatingZipline"));
		private static readonly System.Lazy<MethodAccessor<MeshPathBase>> _StartCreatingZipline757602046 =
				new System.Lazy<MethodAccessor<MeshPathBase>>(() => MethodAccessor<MeshPathBase>.Create("StartCreatingZipline"));
		private static readonly System.Lazy<MethodAccessor<MeshPathBase>> _ResetRecentlyCreatedMeshPath757602046 =
				new System.Lazy<MethodAccessor<MeshPathBase>>(() => MethodAccessor<MeshPathBase>.Create("ResetRecentlyCreatedMeshPath"));

		public static void Start(this MeshPathBase __self) => _Start757602046.Value.Invoke(__self);
		public static void OnDestroy(this MeshPathBase __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static bool CanStartCreatingPath(this MeshPathBase __self) => (bool)_CanStartCreatingPath757602046.Value.Invoke(__self);
		public static void FinishCreatingZipline(this MeshPathBase __self) => _FinishCreatingZipline757602046.Value.Invoke(__self);
		public static void StartCreatingZipline(this MeshPathBase __self) => _StartCreatingZipline757602046.Value.Invoke(__self);
		public static void ResetRecentlyCreatedMeshPath(this MeshPathBase __self) => _ResetRecentlyCreatedMeshPath757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_MeshPathBase_Electricity
	{

		private static readonly System.Lazy<FieldAccessor<MeshPathBase_Electricity, bool>> _hasElectricity =
				new System.Lazy<FieldAccessor<MeshPathBase_Electricity, bool>>(() => FieldAccessor<MeshPathBase_Electricity, bool>.Create("hasElectricity"));
		private static readonly System.Lazy<FieldAccessor<MeshPathBase_Electricity, Electricity_Challenge>> _electricityChallenge =
				new System.Lazy<FieldAccessor<MeshPathBase_Electricity, Electricity_Challenge>>(() => FieldAccessor<MeshPathBase_Electricity, Electricity_Challenge>.Create("electricityChallenge"));
		private static readonly System.Lazy<FieldAccessor<MeshPathBase_Electricity, UnityEngine.ParticleSystem>> _sparkParticles =
				new System.Lazy<FieldAccessor<MeshPathBase_Electricity, UnityEngine.ParticleSystem>>(() => FieldAccessor<MeshPathBase_Electricity, UnityEngine.ParticleSystem>.Create("sparkParticles"));
		private static readonly System.Lazy<FieldAccessor<MeshPathBase_Electricity, UnityEngine.Renderer>> _emissionRenderer =
				new System.Lazy<FieldAccessor<MeshPathBase_Electricity, UnityEngine.Renderer>>(() => FieldAccessor<MeshPathBase_Electricity, UnityEngine.Renderer>.Create("emissionRenderer"));
		private static readonly System.Lazy<FieldAccessor<MeshPathBase_Electricity, QuestItemType>> _requiredQuestItem =
				new System.Lazy<FieldAccessor<MeshPathBase_Electricity, QuestItemType>>(() => FieldAccessor<MeshPathBase_Electricity, QuestItemType>.Create("requiredQuestItem"));
		private static readonly System.Lazy<FieldAccessor<MeshPathBase_Electricity, string>> _eventRef_connect =
				new System.Lazy<FieldAccessor<MeshPathBase_Electricity, string>>(() => FieldAccessor<MeshPathBase_Electricity, string>.Create("eventRef_connect"));
		private static readonly System.Lazy<FieldAccessor<MeshPathBase_Electricity, string>> _eventRef_disconnect =
				new System.Lazy<FieldAccessor<MeshPathBase_Electricity, string>>(() => FieldAccessor<MeshPathBase_Electricity, string>.Create("eventRef_disconnect"));
		private static readonly System.Lazy<FieldAccessor<MeshPathBase_Electricity, bool>> _previousHasElectricity =
				new System.Lazy<FieldAccessor<MeshPathBase_Electricity, bool>>(() => FieldAccessor<MeshPathBase_Electricity, bool>.Create("previousHasElectricity"));
		private static readonly System.Lazy<FieldAccessor<MeshPathBase_Electricity, UnityEngine.MaterialPropertyBlock>> _mpb =
				new System.Lazy<FieldAccessor<MeshPathBase_Electricity, UnityEngine.MaterialPropertyBlock>>(() => FieldAccessor<MeshPathBase_Electricity, UnityEngine.MaterialPropertyBlock>.Create("mpb"));
		private static readonly System.Lazy<FieldAccessor<MeshPathBase_Electricity, MeshPath_Igloo>> _pathIgloo =
				new System.Lazy<FieldAccessor<MeshPathBase_Electricity, MeshPath_Igloo>>(() => FieldAccessor<MeshPathBase_Electricity, MeshPath_Igloo>.Create("pathIgloo"));

		public static bool GetHasElectricity(this MeshPathBase_Electricity __self) => _hasElectricity.Value.GetValue(__self);
		public static void SetHasElectricity(this MeshPathBase_Electricity __self, bool value) => _hasElectricity.Value.SetValue(__self, value);
		public static Electricity_Challenge GetElectricityChallenge(this MeshPathBase_Electricity __self) => _electricityChallenge.Value.GetValue(__self);
		public static void SetElectricityChallenge(this MeshPathBase_Electricity __self, Electricity_Challenge value) => _electricityChallenge.Value.SetValue(__self, value);
		public static UnityEngine.ParticleSystem GetSparkParticles(this MeshPathBase_Electricity __self) => _sparkParticles.Value.GetValue(__self);
		public static void SetSparkParticles(this MeshPathBase_Electricity __self, UnityEngine.ParticleSystem value) => _sparkParticles.Value.SetValue(__self, value);
		public static UnityEngine.Renderer GetEmissionRenderer(this MeshPathBase_Electricity __self) => _emissionRenderer.Value.GetValue(__self);
		public static void SetEmissionRenderer(this MeshPathBase_Electricity __self, UnityEngine.Renderer value) => _emissionRenderer.Value.SetValue(__self, value);
		public static QuestItemType GetRequiredQuestItem(this MeshPathBase_Electricity __self) => _requiredQuestItem.Value.GetValue(__self);
		public static void SetRequiredQuestItem(this MeshPathBase_Electricity __self, QuestItemType value) => _requiredQuestItem.Value.SetValue(__self, value);
		public static string GetEventRef_connect(this MeshPathBase_Electricity __self) => _eventRef_connect.Value.GetValue(__self);
		public static void SetEventRef_connect(this MeshPathBase_Electricity __self, string value) => _eventRef_connect.Value.SetValue(__self, value);
		public static string GetEventRef_disconnect(this MeshPathBase_Electricity __self) => _eventRef_disconnect.Value.GetValue(__self);
		public static void SetEventRef_disconnect(this MeshPathBase_Electricity __self, string value) => _eventRef_disconnect.Value.SetValue(__self, value);
		public static bool GetPreviousHasElectricity(this MeshPathBase_Electricity __self) => _previousHasElectricity.Value.GetValue(__self);
		public static void SetPreviousHasElectricity(this MeshPathBase_Electricity __self, bool value) => _previousHasElectricity.Value.SetValue(__self, value);
		public static UnityEngine.MaterialPropertyBlock GetMpb(this MeshPathBase_Electricity __self) => _mpb.Value.GetValue(__self);
		public static void SetMpb(this MeshPathBase_Electricity __self, UnityEngine.MaterialPropertyBlock value) => _mpb.Value.SetValue(__self, value);
		public static MeshPath_Igloo GetPathIgloo(this MeshPathBase_Electricity __self) => _pathIgloo.Value.GetValue(__self);
		public static void SetPathIgloo(this MeshPathBase_Electricity __self, MeshPath_Igloo value) => _pathIgloo.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<MeshPathBase_Electricity>> _OnEnable757602046 =
				new System.Lazy<MethodAccessor<MeshPathBase_Electricity>>(() => MethodAccessor<MeshPathBase_Electricity>.Create("OnEnable"));
		private static readonly System.Lazy<MethodAccessor<MeshPathBase_Electricity>> _RefreshElectricityVisuals757602046 =
				new System.Lazy<MethodAccessor<MeshPathBase_Electricity>>(() => MethodAccessor<MeshPathBase_Electricity>.Create("RefreshElectricityVisuals"));
		private static readonly System.Lazy<MethodAccessor<MeshPathBase_Electricity>> _CanStartCreatingPath757602046 =
				new System.Lazy<MethodAccessor<MeshPathBase_Electricity>>(() => MethodAccessor<MeshPathBase_Electricity>.Create("CanStartCreatingPath"));

		public static void OnEnable(this MeshPathBase_Electricity __self) => _OnEnable757602046.Value.Invoke(__self);
		public static void RefreshElectricityVisuals(this MeshPathBase_Electricity __self) => _RefreshElectricityVisuals757602046.Value.Invoke(__self);
		public static bool CanStartCreatingPath(this MeshPathBase_Electricity __self) => (bool)_CanStartCreatingPath757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_MeshPathBase_Igloo
	{

		private static readonly System.Lazy<FieldAccessor<MeshPathBase_Igloo, UnityEngine.Animator>> _iglooAnimator =
				new System.Lazy<FieldAccessor<MeshPathBase_Igloo, UnityEngine.Animator>>(() => FieldAccessor<MeshPathBase_Igloo, UnityEngine.Animator>.Create("iglooAnimator"));
		private static readonly System.Lazy<FieldAccessor<MeshPathBase_Igloo, UnityEngine.Renderer>> _iglooRenderer =
				new System.Lazy<FieldAccessor<MeshPathBase_Igloo, UnityEngine.Renderer>>(() => FieldAccessor<MeshPathBase_Igloo, UnityEngine.Renderer>.Create("iglooRenderer"));
		private static readonly System.Lazy<FieldAccessor<MeshPathBase_Igloo, UnityEngine.Light[]>> _iglooLights =
				new System.Lazy<FieldAccessor<MeshPathBase_Igloo, UnityEngine.Light[]>>(() => FieldAccessor<MeshPathBase_Igloo, UnityEngine.Light[]>.Create("iglooLights"));
		private static readonly System.Lazy<FieldAccessor<MeshPathBase_Igloo, FMODUnity.StudioEventEmitter>> _emitter_openDoor =
				new System.Lazy<FieldAccessor<MeshPathBase_Igloo, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<MeshPathBase_Igloo, FMODUnity.StudioEventEmitter>.Create("emitter_openDoor"));
		private static readonly System.Lazy<FieldAccessor<MeshPathBase_Igloo, FMODUnity.StudioEventEmitter>> _emitter_closeDoor =
				new System.Lazy<FieldAccessor<MeshPathBase_Igloo, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<MeshPathBase_Igloo, FMODUnity.StudioEventEmitter>.Create("emitter_closeDoor"));
		private static readonly System.Lazy<FieldAccessor<MeshPathBase_Igloo, UnityEngine.MaterialPropertyBlock>> _emissionBlock =
				new System.Lazy<FieldAccessor<MeshPathBase_Igloo, UnityEngine.MaterialPropertyBlock>>(() => FieldAccessor<MeshPathBase_Igloo, UnityEngine.MaterialPropertyBlock>.Create("emissionBlock"));

		public static UnityEngine.Animator GetIglooAnimator(this MeshPathBase_Igloo __self) => _iglooAnimator.Value.GetValue(__self);
		public static void SetIglooAnimator(this MeshPathBase_Igloo __self, UnityEngine.Animator value) => _iglooAnimator.Value.SetValue(__self, value);
		public static UnityEngine.Renderer GetIglooRenderer(this MeshPathBase_Igloo __self) => _iglooRenderer.Value.GetValue(__self);
		public static void SetIglooRenderer(this MeshPathBase_Igloo __self, UnityEngine.Renderer value) => _iglooRenderer.Value.SetValue(__self, value);
		public static UnityEngine.Light[] GetIglooLights(this MeshPathBase_Igloo __self) => _iglooLights.Value.GetValue(__self);
		public static void SetIglooLights(this MeshPathBase_Igloo __self, UnityEngine.Light[] value) => _iglooLights.Value.SetValue(__self, value);
		public static FMODUnity.StudioEventEmitter GetEmitter_openDoor(this MeshPathBase_Igloo __self) => _emitter_openDoor.Value.GetValue(__self);
		public static void SetEmitter_openDoor(this MeshPathBase_Igloo __self, FMODUnity.StudioEventEmitter value) => _emitter_openDoor.Value.SetValue(__self, value);
		public static FMODUnity.StudioEventEmitter GetEmitter_closeDoor(this MeshPathBase_Igloo __self) => _emitter_closeDoor.Value.GetValue(__self);
		public static void SetEmitter_closeDoor(this MeshPathBase_Igloo __self, FMODUnity.StudioEventEmitter value) => _emitter_closeDoor.Value.SetValue(__self, value);
		public static UnityEngine.MaterialPropertyBlock GetEmissionBlock(this MeshPathBase_Igloo __self) => _emissionBlock.Value.GetValue(__self);
		public static void SetEmissionBlock(this MeshPathBase_Igloo __self, UnityEngine.MaterialPropertyBlock value) => _emissionBlock.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<MeshPathBase_Igloo>> _RefreshElectricityVisuals757602046 =
				new System.Lazy<MethodAccessor<MeshPathBase_Igloo>>(() => MethodAccessor<MeshPathBase_Igloo>.Create("RefreshElectricityVisuals"));
		private static readonly System.Lazy<MethodAccessor<MeshPathBase_Igloo>> _SetIglooEmission3486186818 =
				new System.Lazy<MethodAccessor<MeshPathBase_Igloo>>(() => MethodAccessor<MeshPathBase_Igloo>.Create("SetIglooEmission", typeof(int)));
		private static readonly System.Lazy<MethodAccessor<MeshPathBase_Igloo>> _SetLampsEnabled3450040886 =
				new System.Lazy<MethodAccessor<MeshPathBase_Igloo>>(() => MethodAccessor<MeshPathBase_Igloo>.Create("SetLampsEnabled", typeof(bool)));

		public static void RefreshElectricityVisuals(this MeshPathBase_Igloo __self) => _RefreshElectricityVisuals757602046.Value.Invoke(__self);
		public static void SetIglooEmission(this MeshPathBase_Igloo __self, int emission) => _SetIglooEmission3486186818.Value.Invoke(__self, emission);
		public static void SetLampsEnabled(this MeshPathBase_Igloo __self, bool enabled) => _SetLampsEnabled3450040886.Value.Invoke(__self, enabled);

	}

	public static class PrivateAccessor_MeshPath_Igloo
	{

		private static readonly System.Lazy<FieldAccessor<MeshPath_Igloo, VFX_Electricity>> _vfxPrefab =
				new System.Lazy<FieldAccessor<MeshPath_Igloo, VFX_Electricity>>(() => FieldAccessor<MeshPath_Igloo, VFX_Electricity>.Create("vfxPrefab"));
		private static readonly System.Lazy<FieldAccessor<MeshPath_Igloo, CanvasHelper>> _canvas =
				new System.Lazy<FieldAccessor<MeshPath_Igloo, CanvasHelper>>(() => FieldAccessor<MeshPath_Igloo, CanvasHelper>.Create("canvas"));
		private static readonly System.Lazy<FieldAccessor<MeshPath_Igloo, Network_Player>> _localPlayer =
				new System.Lazy<FieldAccessor<MeshPath_Igloo, Network_Player>>(() => FieldAccessor<MeshPath_Igloo, Network_Player>.Create("localPlayer"));

		public static VFX_Electricity GetVfxPrefab(this MeshPath_Igloo __self) => _vfxPrefab.Value.GetValue(__self);
		public static void SetVfxPrefab(this MeshPath_Igloo __self, VFX_Electricity value) => _vfxPrefab.Value.SetValue(__self, value);
		public static CanvasHelper GetCanvas(this MeshPath_Igloo __self) => _canvas.Value.GetValue(__self);
		public static void SetCanvas(this MeshPath_Igloo __self, CanvasHelper value) => _canvas.Value.SetValue(__self, value);
		public static Network_Player GetLocalPlayer(this MeshPath_Igloo __self) => _localPlayer.Value.GetValue(__self);
		public static void SetLocalPlayer(this MeshPath_Igloo __self, Network_Player value) => _localPlayer.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<MeshPath_Igloo>> _Awake757602046 =
				new System.Lazy<MethodAccessor<MeshPath_Igloo>>(() => MethodAccessor<MeshPath_Igloo>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<MeshPath_Igloo>> _Start757602046 =
				new System.Lazy<MethodAccessor<MeshPath_Igloo>>(() => MethodAccessor<MeshPath_Igloo>.Create("Start"));

		public static void Awake(this MeshPath_Igloo __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this MeshPath_Igloo __self) => _Start757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_MeshPath_Zipline
	{

		private static readonly System.Lazy<FieldAccessor<MeshPath_Zipline, CanvasHelper>> _canvas =
				new System.Lazy<FieldAccessor<MeshPath_Zipline, CanvasHelper>>(() => FieldAccessor<MeshPath_Zipline, CanvasHelper>.Create("canvas"));
		private static readonly System.Lazy<FieldAccessor<MeshPath_Zipline, Network_Player>> _localPlayer =
				new System.Lazy<FieldAccessor<MeshPath_Zipline, Network_Player>>(() => FieldAccessor<MeshPath_Zipline, Network_Player>.Create("localPlayer"));

		public static CanvasHelper GetCanvas(this MeshPath_Zipline __self) => _canvas.Value.GetValue(__self);
		public static void SetCanvas(this MeshPath_Zipline __self, CanvasHelper value) => _canvas.Value.SetValue(__self, value);
		public static Network_Player GetLocalPlayer(this MeshPath_Zipline __self) => _localPlayer.Value.GetValue(__self);
		public static void SetLocalPlayer(this MeshPath_Zipline __self, Network_Player value) => _localPlayer.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<MeshPath_Zipline>> _Start757602046 =
				new System.Lazy<MethodAccessor<MeshPath_Zipline>>(() => MethodAccessor<MeshPath_Zipline>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<MeshPath_Zipline>> _AttachPlayerToZipline757602046 =
				new System.Lazy<MethodAccessor<MeshPath_Zipline>>(() => MethodAccessor<MeshPath_Zipline>.Create("AttachPlayerToZipline"));

		public static void Start(this MeshPath_Zipline __self) => _Start757602046.Value.Invoke(__self);
		public static void AttachPlayerToZipline(this MeshPath_Zipline __self) => _AttachPlayerToZipline757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_MeshPath_Zipline_Landmark
	{

		private static readonly System.Lazy<FieldAccessor<MeshPath_Zipline_Landmark, UnityEngine.Transform>> _pointA =
				new System.Lazy<FieldAccessor<MeshPath_Zipline_Landmark, UnityEngine.Transform>>(() => FieldAccessor<MeshPath_Zipline_Landmark, UnityEngine.Transform>.Create("pointA"));
		private static readonly System.Lazy<FieldAccessor<MeshPath_Zipline_Landmark, UnityEngine.Transform>> _pointB =
				new System.Lazy<FieldAccessor<MeshPath_Zipline_Landmark, UnityEngine.Transform>>(() => FieldAccessor<MeshPath_Zipline_Landmark, UnityEngine.Transform>.Create("pointB"));
		private static readonly System.Lazy<FieldAccessor<MeshPath_Zipline_Landmark, int>> _minPoints =
				new System.Lazy<FieldAccessor<MeshPath_Zipline_Landmark, int>>(() => FieldAccessor<MeshPath_Zipline_Landmark, int>.Create("minPoints"));
		private static readonly System.Lazy<FieldAccessor<MeshPath_Zipline_Landmark, int>> _maxPoints =
				new System.Lazy<FieldAccessor<MeshPath_Zipline_Landmark, int>>(() => FieldAccessor<MeshPath_Zipline_Landmark, int>.Create("maxPoints"));
		private static readonly System.Lazy<FieldAccessor<MeshPath_Zipline_Landmark, float>> _slack =
				new System.Lazy<FieldAccessor<MeshPath_Zipline_Landmark, float>>(() => FieldAccessor<MeshPath_Zipline_Landmark, float>.Create("slack"));

		public static UnityEngine.Transform GetPointA(this MeshPath_Zipline_Landmark __self) => _pointA.Value.GetValue(__self);
		public static void SetPointA(this MeshPath_Zipline_Landmark __self, UnityEngine.Transform value) => _pointA.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetPointB(this MeshPath_Zipline_Landmark __self) => _pointB.Value.GetValue(__self);
		public static void SetPointB(this MeshPath_Zipline_Landmark __self, UnityEngine.Transform value) => _pointB.Value.SetValue(__self, value);
		public static int GetMinPoints(this MeshPath_Zipline_Landmark __self) => _minPoints.Value.GetValue(__self);
		public static void SetMinPoints(this MeshPath_Zipline_Landmark __self, int value) => _minPoints.Value.SetValue(__self, value);
		public static int GetMaxPoints(this MeshPath_Zipline_Landmark __self) => _maxPoints.Value.GetValue(__self);
		public static void SetMaxPoints(this MeshPath_Zipline_Landmark __self, int value) => _maxPoints.Value.SetValue(__self, value);
		public static float GetSlack(this MeshPath_Zipline_Landmark __self) => _slack.Value.GetValue(__self);
		public static void SetSlack(this MeshPath_Zipline_Landmark __self, float value) => _slack.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<MeshPath_Zipline_Landmark>> _OnDrawGizmos757602046 =
				new System.Lazy<MethodAccessor<MeshPath_Zipline_Landmark>>(() => MethodAccessor<MeshPath_Zipline_Landmark>.Create("OnDrawGizmos"));
		private static readonly System.Lazy<MethodAccessor<MeshPath_Zipline_Landmark>> _OnEnable757602046 =
				new System.Lazy<MethodAccessor<MeshPath_Zipline_Landmark>>(() => MethodAccessor<MeshPath_Zipline_Landmark>.Create("OnEnable"));
		private static readonly System.Lazy<MethodAccessor<MeshPath_Zipline_Landmark>> _ForceCreatePath757602046 =
				new System.Lazy<MethodAccessor<MeshPath_Zipline_Landmark>>(() => MethodAccessor<MeshPath_Zipline_Landmark>.Create("ForceCreatePath"));

		public static void OnDrawGizmos(this MeshPath_Zipline_Landmark __self) => _OnDrawGizmos757602046.Value.Invoke(__self);
		public static void OnEnable(this MeshPath_Zipline_Landmark __self) => _OnEnable757602046.Value.Invoke(__self);
		public static void ForceCreatePath(this MeshPath_Zipline_Landmark __self) => _ForceCreatePath757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_ZiplineBase
	{

		private static readonly System.Lazy<FieldAccessor<ZiplineBase, MeshPathBase>> _meshPath =
				new System.Lazy<FieldAccessor<ZiplineBase, MeshPathBase>>(() => FieldAccessor<ZiplineBase, MeshPathBase>.Create("meshPath"));

		public static MeshPathBase GetMeshPath(this ZiplineBase __self) => _meshPath.Value.GetValue(__self);
		public static void SetMeshPath(this ZiplineBase __self, MeshPathBase value) => _meshPath.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<ZiplineBase>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<ZiplineBase>>(() => MethodAccessor<ZiplineBase>.Create("OnDestroy"));

		public static void OnDestroy(this ZiplineBase __self) => _OnDestroy757602046.Value.Invoke(__self);

	}

	public static class Private_Cheat
	{

		private static readonly System.Lazy<StaticFieldAccessor<CanvasHelper>> _canvas =
				new System.Lazy<StaticFieldAccessor<CanvasHelper>>(() => StaticFieldAccessor<CanvasHelper>.Create(typeof(Cheat), "canvas"));
		private static readonly System.Lazy<StaticFieldAccessor<Network_Player>> _player =
				new System.Lazy<StaticFieldAccessor<Network_Player>>(() => StaticFieldAccessor<Network_Player>.Create(typeof(Cheat), "player"));
		private static readonly System.Lazy<StaticFieldAccessor<WeatherManager>> _weatherManager =
				new System.Lazy<StaticFieldAccessor<WeatherManager>>(() => StaticFieldAccessor<WeatherManager>.Create(typeof(Cheat), "weatherManager"));
		private static readonly System.Lazy<StaticFieldAccessor<Network_Host_Entities>> _networkHostEntities =
				new System.Lazy<StaticFieldAccessor<Network_Host_Entities>>(() => StaticFieldAccessor<Network_Host_Entities>.Create(typeof(Cheat), "networkHostEntities"));
		private static readonly System.Lazy<StaticFieldAccessor<ChunkManager>> _chunkManager =
				new System.Lazy<StaticFieldAccessor<ChunkManager>>(() => StaticFieldAccessor<ChunkManager>.Create(typeof(Cheat), "chunkManager"));
		private static readonly System.Lazy<StaticFieldAccessor<RaftCollisionManager>> _raftColliManager =
				new System.Lazy<StaticFieldAccessor<RaftCollisionManager>>(() => StaticFieldAccessor<RaftCollisionManager>.Create(typeof(Cheat), "raftColliManager"));
		private static readonly System.Lazy<StaticFieldAccessor<TreasurePointManager>> _treasurePointManager =
				new System.Lazy<StaticFieldAccessor<TreasurePointManager>>(() => StaticFieldAccessor<TreasurePointManager>.Create(typeof(Cheat), "treasurePointManager"));
		private static readonly System.Lazy<StaticFieldAccessor<Raft_Network>> _network =
				new System.Lazy<StaticFieldAccessor<Raft_Network>>(() => StaticFieldAccessor<Raft_Network>.Create(typeof(Cheat), "network"));
		private static readonly System.Lazy<StaticFieldAccessor<SO_SteamUser[]>> _steamUsers =
				new System.Lazy<StaticFieldAccessor<SO_SteamUser[]>>(() => StaticFieldAccessor<SO_SteamUser[]>.Create(typeof(Cheat), "steamUsers"));
		private static readonly System.Lazy<StaticFieldAccessor<RemoteConfigManager>> _remoteConfigManager =
				new System.Lazy<StaticFieldAccessor<RemoteConfigManager>>(() => StaticFieldAccessor<RemoteConfigManager>.Create(typeof(Cheat), "remoteConfigManager"));
		private static readonly System.Lazy<StaticFieldAccessor<UnityEngine.Vector3>> _markLocation =
				new System.Lazy<StaticFieldAccessor<UnityEngine.Vector3>>(() => StaticFieldAccessor<UnityEngine.Vector3>.Create(typeof(Cheat), "markLocation"));

		public static CanvasHelper GetCanvas() => _canvas.Value.GetValue();
		public static void SetCanvas(CanvasHelper value) => _canvas.Value.SetValue(value);
		public static Network_Player GetPlayer() => _player.Value.GetValue();
		public static void SetPlayer(Network_Player value) => _player.Value.SetValue(value);
		public static WeatherManager GetWeatherManager() => _weatherManager.Value.GetValue();
		public static void SetWeatherManager(WeatherManager value) => _weatherManager.Value.SetValue(value);
		public static Network_Host_Entities GetNetworkHostEntities() => _networkHostEntities.Value.GetValue();
		public static void SetNetworkHostEntities(Network_Host_Entities value) => _networkHostEntities.Value.SetValue(value);
		public static ChunkManager GetChunkManager() => _chunkManager.Value.GetValue();
		public static void SetChunkManager(ChunkManager value) => _chunkManager.Value.SetValue(value);
		public static RaftCollisionManager GetRaftColliManager() => _raftColliManager.Value.GetValue();
		public static void SetRaftColliManager(RaftCollisionManager value) => _raftColliManager.Value.SetValue(value);
		public static TreasurePointManager GetTreasurePointManager() => _treasurePointManager.Value.GetValue();
		public static void SetTreasurePointManager(TreasurePointManager value) => _treasurePointManager.Value.SetValue(value);
		public static Raft_Network GetNetwork() => _network.Value.GetValue();
		public static void SetNetwork(Raft_Network value) => _network.Value.SetValue(value);
		public static SO_SteamUser[] GetSteamUsers() => _steamUsers.Value.GetValue();
		public static void SetSteamUsers(SO_SteamUser[] value) => _steamUsers.Value.SetValue(value);
		public static RemoteConfigManager GetRemoteConfigManager() => _remoteConfigManager.Value.GetValue();
		public static void SetRemoteConfigManager(RemoteConfigManager value) => _remoteConfigManager.Value.SetValue(value);
		public static UnityEngine.Vector3 GetMarkLocation() => _markLocation.Value.GetValue();
		public static void SetMarkLocation(UnityEngine.Vector3 value) => _markLocation.Value.SetValue(value);

		private static readonly System.Lazy<StaticMethodAccessor> _Landmark320431798 =
				new System.Lazy<StaticMethodAccessor>(() => StaticMethodAccessor.Create(typeof(Cheat), "Landmark", typeof(System.String[]), typeof(Steamworks.CSteamID)));
		private static readonly System.Lazy<StaticMethodAccessor> _Give320431798 =
				new System.Lazy<StaticMethodAccessor>(() => StaticMethodAccessor.Create(typeof(Cheat), "Give", typeof(System.String[]), typeof(Steamworks.CSteamID)));
		private static readonly System.Lazy<StaticMethodAccessor> _Spawn320431798 =
				new System.Lazy<StaticMethodAccessor>(() => StaticMethodAccessor.Create(typeof(Cheat), "Spawn", typeof(System.String[]), typeof(Steamworks.CSteamID)));
		private static readonly System.Lazy<StaticMethodAccessor> _Set320431798 =
				new System.Lazy<StaticMethodAccessor>(() => StaticMethodAccessor.Create(typeof(Cheat), "Set", typeof(System.String[]), typeof(Steamworks.CSteamID)));
		private static readonly System.Lazy<StaticMethodAccessor> _SetDurability3653408158 =
				new System.Lazy<StaticMethodAccessor>(() => StaticMethodAccessor.Create(typeof(Cheat), "SetDurability", typeof(System.String[]), typeof(Steamworks.CSteamID), typeof(int)));
		private static readonly System.Lazy<StaticMethodAccessor> _Frequencies3654262495 =
				new System.Lazy<StaticMethodAccessor>(() => StaticMethodAccessor.Create(typeof(Cheat), "Frequencies", typeof(System.String[]), typeof(Steamworks.CSteamID), typeof(float)));
		private static readonly System.Lazy<StaticMethodAccessor> _Show320431798 =
				new System.Lazy<StaticMethodAccessor>(() => StaticMethodAccessor.Create(typeof(Cheat), "Show", typeof(System.String[]), typeof(Steamworks.CSteamID)));
		private static readonly System.Lazy<StaticMethodAccessor> _Quest320431798 =
				new System.Lazy<StaticMethodAccessor>(() => StaticMethodAccessor.Create(typeof(Cheat), "Quest", typeof(System.String[]), typeof(Steamworks.CSteamID)));
		private static readonly System.Lazy<StaticMethodAccessor> _Raft320431798 =
				new System.Lazy<StaticMethodAccessor>(() => StaticMethodAccessor.Create(typeof(Cheat), "Raft", typeof(System.String[]), typeof(Steamworks.CSteamID)));
		private static readonly System.Lazy<StaticMethodAccessor> _Weather320431798 =
				new System.Lazy<StaticMethodAccessor>(() => StaticMethodAccessor.Create(typeof(Cheat), "Weather", typeof(System.String[]), typeof(Steamworks.CSteamID)));
		private static readonly System.Lazy<StaticMethodAccessor> _Unlock320431798 =
				new System.Lazy<StaticMethodAccessor>(() => StaticMethodAccessor.Create(typeof(Cheat), "Unlock", typeof(System.String[]), typeof(Steamworks.CSteamID)));
		private static readonly System.Lazy<StaticMethodAccessor> _Notebook320431798 =
				new System.Lazy<StaticMethodAccessor>(() => StaticMethodAccessor.Create(typeof(Cheat), "Notebook", typeof(System.String[]), typeof(Steamworks.CSteamID)));
		private static readonly System.Lazy<StaticMethodAccessor> _QuestItem320431798 =
				new System.Lazy<StaticMethodAccessor>(() => StaticMethodAccessor.Create(typeof(Cheat), "QuestItem", typeof(System.String[]), typeof(Steamworks.CSteamID)));
		private static readonly System.Lazy<StaticMethodAccessor> _Camera320431798 =
				new System.Lazy<StaticMethodAccessor>(() => StaticMethodAccessor.Create(typeof(Cheat), "Camera", typeof(System.String[]), typeof(Steamworks.CSteamID)));
		private static readonly System.Lazy<StaticMethodAccessor> _Kit320431798 =
				new System.Lazy<StaticMethodAccessor>(() => StaticMethodAccessor.Create(typeof(Cheat), "Kit", typeof(System.String[]), typeof(Steamworks.CSteamID)));
		private static readonly System.Lazy<StaticMethodAccessor> _Mark320431798 =
				new System.Lazy<StaticMethodAccessor>(() => StaticMethodAccessor.Create(typeof(Cheat), "Mark", typeof(System.String[]), typeof(Steamworks.CSteamID)));
		private static readonly System.Lazy<StaticMethodAccessor> _Recall320431798 =
				new System.Lazy<StaticMethodAccessor>(() => StaticMethodAccessor.Create(typeof(Cheat), "Recall", typeof(System.String[]), typeof(Steamworks.CSteamID)));
		private static readonly System.Lazy<StaticMethodAccessor> _WorldEvent320431798 =
				new System.Lazy<StaticMethodAccessor>(() => StaticMethodAccessor.Create(typeof(Cheat), "WorldEvent", typeof(System.String[]), typeof(Steamworks.CSteamID)));
		private static readonly System.Lazy<StaticMethodAccessor> _WorldEventStop320431798 =
				new System.Lazy<StaticMethodAccessor>(() => StaticMethodAccessor.Create(typeof(Cheat), "WorldEventStop", typeof(System.String[]), typeof(Steamworks.CSteamID)));
		private static readonly System.Lazy<StaticMethodAccessor> _HandleHazmatSuit320431798 =
				new System.Lazy<StaticMethodAccessor>(() => StaticMethodAccessor.Create(typeof(Cheat), "HandleHazmatSuit", typeof(System.String[]), typeof(Steamworks.CSteamID)));
		private static readonly System.Lazy<StaticMethodAccessor> _HandleOldWater320431798 =
				new System.Lazy<StaticMethodAccessor>(() => StaticMethodAccessor.Create(typeof(Cheat), "HandleOldWater", typeof(System.String[]), typeof(Steamworks.CSteamID)));
		private static readonly System.Lazy<StaticMethodAccessor> _Honk320431798 =
				new System.Lazy<StaticMethodAccessor>(() => StaticMethodAccessor.Create(typeof(Cheat), "Honk", typeof(System.String[]), typeof(Steamworks.CSteamID)));
		private static readonly System.Lazy<StaticMethodAccessor> _DestroyBlocks320431798 =
				new System.Lazy<StaticMethodAccessor>(() => StaticMethodAccessor.Create(typeof(Cheat), "DestroyBlocks", typeof(System.String[]), typeof(Steamworks.CSteamID)));
		private static readonly System.Lazy<StaticMethodAccessor> _HandleBakingBlocks320431798 =
				new System.Lazy<StaticMethodAccessor>(() => StaticMethodAccessor.Create(typeof(Cheat), "HandleBakingBlocks", typeof(System.String[]), typeof(Steamworks.CSteamID)));
		private static readonly System.Lazy<StaticMethodAccessor> _PrintCheat320431798 =
				new System.Lazy<StaticMethodAccessor>(() => StaticMethodAccessor.Create(typeof(Cheat), "PrintCheat", typeof(System.String[]), typeof(Steamworks.CSteamID)));
		private static readonly System.Lazy<StaticMethodAccessor> _Simulate320431798 =
				new System.Lazy<StaticMethodAccessor>(() => StaticMethodAccessor.Create(typeof(Cheat), "Simulate", typeof(System.String[]), typeof(Steamworks.CSteamID)));
		private static readonly System.Lazy<StaticMethodAccessor> _Reflections320431798 =
				new System.Lazy<StaticMethodAccessor>(() => StaticMethodAccessor.Create(typeof(Cheat), "Reflections", typeof(System.String[]), typeof(Steamworks.CSteamID)));
		private static readonly System.Lazy<StaticMethodAccessor> _EnvironmentLight320431798 =
				new System.Lazy<StaticMethodAccessor>(() => StaticMethodAccessor.Create(typeof(Cheat), "EnvironmentLight", typeof(System.String[]), typeof(Steamworks.CSteamID)));
		private static readonly System.Lazy<StaticMethodAccessor> _Reciever320431798 =
				new System.Lazy<StaticMethodAccessor>(() => StaticMethodAccessor.Create(typeof(Cheat), "Reciever", typeof(System.String[]), typeof(Steamworks.CSteamID)));
		private static readonly System.Lazy<StaticMethodAccessor> _Build320431798 =
				new System.Lazy<StaticMethodAccessor>(() => StaticMethodAccessor.Create(typeof(Cheat), "Build", typeof(System.String[]), typeof(Steamworks.CSteamID)));
		private static readonly System.Lazy<StaticMethodAccessor> _Reset320431798 =
				new System.Lazy<StaticMethodAccessor>(() => StaticMethodAccessor.Create(typeof(Cheat), "Reset", typeof(System.String[]), typeof(Steamworks.CSteamID)));
		private static readonly System.Lazy<StaticMethodAccessor> _Nuke757602046 =
				new System.Lazy<StaticMethodAccessor>(() => StaticMethodAccessor.Create(typeof(Cheat), "Nuke"));
		private static readonly System.Lazy<StaticMethodAccessor> _Teleport320431798 =
				new System.Lazy<StaticMethodAccessor>(() => StaticMethodAccessor.Create(typeof(Cheat), "Teleport", typeof(System.String[]), typeof(Steamworks.CSteamID)));
		private static readonly System.Lazy<StaticMethodAccessor> _SetBlockHealth344396215 =
				new System.Lazy<StaticMethodAccessor>(() => StaticMethodAccessor.Create(typeof(Cheat), "SetBlockHealth", typeof(float), typeof(Steamworks.CSteamID)));
		private static readonly System.Lazy<StaticMethodAccessor> _CookingTable320431798 =
				new System.Lazy<StaticMethodAccessor>(() => StaticMethodAccessor.Create(typeof(Cheat), "CookingTable", typeof(System.String[]), typeof(Steamworks.CSteamID)));
		private static readonly System.Lazy<StaticMethodAccessor> _WorldShift3429031458 =
				new System.Lazy<StaticMethodAccessor>(() => StaticMethodAccessor.Create(typeof(Cheat), "WorldShift", typeof(Steamworks.CSteamID)));
		private static readonly System.Lazy<StaticMethodAccessor> _GetAmountFromEntries1192496726 =
				new System.Lazy<StaticMethodAccessor>(() => StaticMethodAccessor.Create(typeof(Cheat), "GetAmountFromEntries", typeof(System.String[]), typeof(int)));
		private static readonly System.Lazy<StaticMethodAccessor> _IsSteamIDLocalPlayer3429031458 =
				new System.Lazy<StaticMethodAccessor>(() => StaticMethodAccessor.Create(typeof(Cheat), "IsSteamIDLocalPlayer", typeof(Steamworks.CSteamID)));
		private static readonly System.Lazy<StaticMethodAccessor> _GetPlayerFromName3454057852 =
				new System.Lazy<StaticMethodAccessor>(() => StaticMethodAccessor.Create(typeof(Cheat), "GetPlayerFromName", typeof(string)));

		public static void Landmark(System.String[] entries, Steamworks.CSteamID steamID) => _Landmark320431798.Value.Invoke(entries, steamID);
		public static void Give(System.String[] entries, Steamworks.CSteamID steamID) => _Give320431798.Value.Invoke(entries, steamID);
		public static void Spawn(System.String[] entries, Steamworks.CSteamID p_steamID) => _Spawn320431798.Value.Invoke(entries, p_steamID);
		public static void Set(System.String[] entries, Steamworks.CSteamID p_steamID) => _Set320431798.Value.Invoke(entries, p_steamID);
		public static void SetDurability(System.String[] entries, Steamworks.CSteamID p_steamID, int amount) => _SetDurability3653408158.Value.Invoke(entries, p_steamID, amount);
		public static void Frequencies(System.String[] entries, Steamworks.CSteamID p_steamID, float amount) => _Frequencies3654262495.Value.Invoke(entries, p_steamID, amount);
		public static void Show(System.String[] entries, Steamworks.CSteamID p_steamID) => _Show320431798.Value.Invoke(entries, p_steamID);
		public static void Quest(System.String[] entries, Steamworks.CSteamID p_steamID) => _Quest320431798.Value.Invoke(entries, p_steamID);
		public static void Raft(System.String[] entries, Steamworks.CSteamID p_steamID) => _Raft320431798.Value.Invoke(entries, p_steamID);
		public static void Weather(System.String[] entries, Steamworks.CSteamID p_steamID) => _Weather320431798.Value.Invoke(entries, p_steamID);
		public static void Unlock(System.String[] entries, Steamworks.CSteamID p_steamID) => _Unlock320431798.Value.Invoke(entries, p_steamID);
		public static void Notebook(System.String[] entries, Steamworks.CSteamID p_steamID) => _Notebook320431798.Value.Invoke(entries, p_steamID);
		public static void QuestItem(System.String[] entries, Steamworks.CSteamID p_steamID) => _QuestItem320431798.Value.Invoke(entries, p_steamID);
		public static void Camera(System.String[] entries, Steamworks.CSteamID p_steamID) => _Camera320431798.Value.Invoke(entries, p_steamID);
		public static void Kit(System.String[] entries, Steamworks.CSteamID p_steamID) => _Kit320431798.Value.Invoke(entries, p_steamID);
		public static void Mark(System.String[] entries, Steamworks.CSteamID p_steamID) => _Mark320431798.Value.Invoke(entries, p_steamID);
		public static void Recall(System.String[] entries, Steamworks.CSteamID p_steamID) => _Recall320431798.Value.Invoke(entries, p_steamID);
		public static void WorldEvent(System.String[] entries, Steamworks.CSteamID p_steamID) => _WorldEvent320431798.Value.Invoke(entries, p_steamID);
		public static void WorldEventStop(System.String[] entries, Steamworks.CSteamID p_steamID) => _WorldEventStop320431798.Value.Invoke(entries, p_steamID);
		public static void HandleHazmatSuit(System.String[] entries, Steamworks.CSteamID p_steamID) => _HandleHazmatSuit320431798.Value.Invoke(entries, p_steamID);
		public static void HandleOldWater(System.String[] entries, Steamworks.CSteamID p_steamID) => _HandleOldWater320431798.Value.Invoke(entries, p_steamID);
		public static void Honk(System.String[] entries, Steamworks.CSteamID p_steamID) => _Honk320431798.Value.Invoke(entries, p_steamID);
		public static void DestroyBlocks(System.String[] entries, Steamworks.CSteamID p_steamID) => _DestroyBlocks320431798.Value.Invoke(entries, p_steamID);
		public static void HandleBakingBlocks(System.String[] entries, Steamworks.CSteamID p_steamID) => _HandleBakingBlocks320431798.Value.Invoke(entries, p_steamID);
		public static void PrintCheat(System.String[] entries, Steamworks.CSteamID p_steamID) => _PrintCheat320431798.Value.Invoke(entries, p_steamID);
		public static void Simulate(System.String[] entries, Steamworks.CSteamID p_steamID) => _Simulate320431798.Value.Invoke(entries, p_steamID);
		public static void Reflections(System.String[] entries, Steamworks.CSteamID p_steamID) => _Reflections320431798.Value.Invoke(entries, p_steamID);
		public static void EnvironmentLight(System.String[] entries, Steamworks.CSteamID p_steamID) => _EnvironmentLight320431798.Value.Invoke(entries, p_steamID);
		public static void Reciever(System.String[] entries, Steamworks.CSteamID p_steamID) => _Reciever320431798.Value.Invoke(entries, p_steamID);
		public static void Build(System.String[] entries, Steamworks.CSteamID p_steamID) => _Build320431798.Value.Invoke(entries, p_steamID);
		public static void Reset(System.String[] entries, Steamworks.CSteamID p_steamID) => _Reset320431798.Value.Invoke(entries, p_steamID);
		public static void Nuke() => _Nuke757602046.Value.Invoke();
		public static void Teleport(System.String[] entries, Steamworks.CSteamID p_steamID) => _Teleport320431798.Value.Invoke(entries, p_steamID);
		public static void SetBlockHealth(float amount, Steamworks.CSteamID p_steamID) => _SetBlockHealth344396215.Value.Invoke(amount, p_steamID);
		public static void CookingTable(System.String[] entries, Steamworks.CSteamID p_steamID) => _CookingTable320431798.Value.Invoke(entries, p_steamID);
		public static void WorldShift(Steamworks.CSteamID p_steamID) => _WorldShift3429031458.Value.Invoke(p_steamID);
		public static int GetAmountFromEntries(System.String[] entries, int defaultAmount) => (int)_GetAmountFromEntries1192496726.Value.Invoke(entries, defaultAmount);
		public static bool IsSteamIDLocalPlayer(Steamworks.CSteamID p_steamID) => (bool)_IsSteamIDLocalPlayer3429031458.Value.Invoke(p_steamID);
		public static Network_Player GetPlayerFromName(string name) => (Network_Player)_GetPlayerFromName3454057852.Value.Invoke(name);

	}

	public static class PrivateAccessor_Coconut
	{

		private static readonly System.Lazy<FieldAccessor<Coconut, UnityEngine.Rigidbody>> _body =
				new System.Lazy<FieldAccessor<Coconut, UnityEngine.Rigidbody>>(() => FieldAccessor<Coconut, UnityEngine.Rigidbody>.Create("body"));
		private static readonly System.Lazy<FieldAccessor<Coconut, PickupItem>> _pickup =
				new System.Lazy<FieldAccessor<Coconut, PickupItem>>(() => FieldAccessor<Coconut, PickupItem>.Create("pickup"));

		public static UnityEngine.Rigidbody GetBody(this Coconut __self) => _body.Value.GetValue(__self);
		public static void SetBody(this Coconut __self, UnityEngine.Rigidbody value) => _body.Value.SetValue(__self, value);
		public static PickupItem GetPickup(this Coconut __self) => _pickup.Value.GetValue(__self);
		public static void SetPickup(this Coconut __self, PickupItem value) => _pickup.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Coconut>> _Start757602046 =
				new System.Lazy<MethodAccessor<Coconut>>(() => MethodAccessor<Coconut>.Create("Start"));

		public static void Start(this Coconut __self) => _Start757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_CostCollection
	{

		private static readonly System.Lazy<FieldAccessor<CostCollection, bool>> _useInventoryAsAmount =
				new System.Lazy<FieldAccessor<CostCollection, bool>>(() => FieldAccessor<CostCollection, bool>.Create("useInventoryAsAmount"));
		private static readonly System.Lazy<FieldAccessor<CostCollection, bool>> _includeSecondaryInventory =
				new System.Lazy<FieldAccessor<CostCollection, bool>>(() => FieldAccessor<CostCollection, bool>.Create("includeSecondaryInventory"));
		private static readonly System.Lazy<FieldAccessor<CostCollection, PlayerInventory>> _inventory =
				new System.Lazy<FieldAccessor<CostCollection, PlayerInventory>>(() => FieldAccessor<CostCollection, PlayerInventory>.Create("inventory"));

		public static bool GetUseInventoryAsAmount(this CostCollection __self) => _useInventoryAsAmount.Value.GetValue(__self);
		public static void SetUseInventoryAsAmount(this CostCollection __self, bool value) => _useInventoryAsAmount.Value.SetValue(__self, value);
		public static bool GetIncludeSecondaryInventory(this CostCollection __self) => _includeSecondaryInventory.Value.GetValue(__self);
		public static void SetIncludeSecondaryInventory(this CostCollection __self, bool value) => _includeSecondaryInventory.Value.SetValue(__self, value);
		public static PlayerInventory GetInventory(this CostCollection __self) => _inventory.Value.GetValue(__self);
		public static void SetInventory(this CostCollection __self, PlayerInventory value) => _inventory.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<CostCollection>> _Start757602046 =
				new System.Lazy<MethodAccessor<CostCollection>>(() => MethodAccessor<CostCollection>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<CostCollection>> _SetNewLength3486186818 =
				new System.Lazy<MethodAccessor<CostCollection>>(() => MethodAccessor<CostCollection>.Create("SetNewLength", typeof(int)));

		public static void Start(this CostCollection __self) => _Start757602046.Value.Invoke(__self);
		public static void SetNewLength(this CostCollection __self, int newLength) => _SetNewLength3486186818.Value.Invoke(__self, newLength);

	}

	public static class PrivateAccessor_ItemInstance_Cookable
	{

		private static readonly System.Lazy<FieldAccessor<ItemInstance_Cookable, float>> _cookTime =
				new System.Lazy<FieldAccessor<ItemInstance_Cookable, float>>(() => FieldAccessor<ItemInstance_Cookable, float>.Create("cookTime"));
		private static readonly System.Lazy<FieldAccessor<ItemInstance_Cookable, Cost>> _cookingResult =
				new System.Lazy<FieldAccessor<ItemInstance_Cookable, Cost>>(() => FieldAccessor<ItemInstance_Cookable, Cost>.Create("cookingResult"));
		private static readonly System.Lazy<FieldAccessor<ItemInstance_Cookable, int>> _cookingSlotsRequired =
				new System.Lazy<FieldAccessor<ItemInstance_Cookable, int>>(() => FieldAccessor<ItemInstance_Cookable, int>.Create("cookingSlotsRequired"));

		public static float GetCookTime(this ItemInstance_Cookable __self) => _cookTime.Value.GetValue(__self);
		public static void SetCookTime(this ItemInstance_Cookable __self, float value) => _cookTime.Value.SetValue(__self, value);
		public static Cost GetCookingResult(this ItemInstance_Cookable __self) => _cookingResult.Value.GetValue(__self);
		public static void SetCookingResult(this ItemInstance_Cookable __self, Cost value) => _cookingResult.Value.SetValue(__self, value);
		public static int GetCookingSlotsRequired(this ItemInstance_Cookable __self) => _cookingSlotsRequired.Value.GetValue(__self);
		public static void SetCookingSlotsRequired(this ItemInstance_Cookable __self, int value) => _cookingSlotsRequired.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_ItemInstance_Consumeable
	{

		private static readonly System.Lazy<FieldAccessor<ItemInstance_Consumeable, FoodType>> _foodType =
				new System.Lazy<FieldAccessor<ItemInstance_Consumeable, FoodType>>(() => FieldAccessor<ItemInstance_Consumeable, FoodType>.Create("foodType"));
		private static readonly System.Lazy<FieldAccessor<ItemInstance_Consumeable, FoodForm>> _foodForm =
				new System.Lazy<FieldAccessor<ItemInstance_Consumeable, FoodForm>>(() => FieldAccessor<ItemInstance_Consumeable, FoodForm>.Create("foodForm"));
		private static readonly System.Lazy<FieldAccessor<ItemInstance_Consumeable, float>> _oxygenYield =
				new System.Lazy<FieldAccessor<ItemInstance_Consumeable, float>>(() => FieldAccessor<ItemInstance_Consumeable, float>.Create("oxygenYield"));
		private static readonly System.Lazy<FieldAccessor<ItemInstance_Consumeable, float>> _hungerYield =
				new System.Lazy<FieldAccessor<ItemInstance_Consumeable, float>>(() => FieldAccessor<ItemInstance_Consumeable, float>.Create("hungerYield"));
		private static readonly System.Lazy<FieldAccessor<ItemInstance_Consumeable, float>> _bonusHungerYield =
				new System.Lazy<FieldAccessor<ItemInstance_Consumeable, float>>(() => FieldAccessor<ItemInstance_Consumeable, float>.Create("bonusHungerYield"));
		private static readonly System.Lazy<FieldAccessor<ItemInstance_Consumeable, float>> _thirstYield =
				new System.Lazy<FieldAccessor<ItemInstance_Consumeable, float>>(() => FieldAccessor<ItemInstance_Consumeable, float>.Create("thirstYield"));
		private static readonly System.Lazy<FieldAccessor<ItemInstance_Consumeable, float>> _bonusThirstYield =
				new System.Lazy<FieldAccessor<ItemInstance_Consumeable, float>>(() => FieldAccessor<ItemInstance_Consumeable, float>.Create("bonusThirstYield"));
		private static readonly System.Lazy<FieldAccessor<ItemInstance_Consumeable, bool>> _isRaw =
				new System.Lazy<FieldAccessor<ItemInstance_Consumeable, bool>>(() => FieldAccessor<ItemInstance_Consumeable, bool>.Create("isRaw"));
		private static readonly System.Lazy<FieldAccessor<ItemInstance_Consumeable, string>> _eventRef_consumeSound =
				new System.Lazy<FieldAccessor<ItemInstance_Consumeable, string>>(() => FieldAccessor<ItemInstance_Consumeable, string>.Create("eventRef_consumeSound"));
		private static readonly System.Lazy<FieldAccessor<ItemInstance_Consumeable, Cost>> _itemAfterUse =
				new System.Lazy<FieldAccessor<ItemInstance_Consumeable, Cost>>(() => FieldAccessor<ItemInstance_Consumeable, Cost>.Create("itemAfterUse"));

		public static FoodType GetFoodType(this ItemInstance_Consumeable __self) => _foodType.Value.GetValue(__self);
		public static void SetFoodType(this ItemInstance_Consumeable __self, FoodType value) => _foodType.Value.SetValue(__self, value);
		public static FoodForm GetFoodForm(this ItemInstance_Consumeable __self) => _foodForm.Value.GetValue(__self);
		public static void SetFoodForm(this ItemInstance_Consumeable __self, FoodForm value) => _foodForm.Value.SetValue(__self, value);
		public static float GetOxygenYield(this ItemInstance_Consumeable __self) => _oxygenYield.Value.GetValue(__self);
		public static void SetOxygenYield(this ItemInstance_Consumeable __self, float value) => _oxygenYield.Value.SetValue(__self, value);
		public static float GetHungerYield(this ItemInstance_Consumeable __self) => _hungerYield.Value.GetValue(__self);
		public static void SetHungerYield(this ItemInstance_Consumeable __self, float value) => _hungerYield.Value.SetValue(__self, value);
		public static float GetBonusHungerYield(this ItemInstance_Consumeable __self) => _bonusHungerYield.Value.GetValue(__self);
		public static void SetBonusHungerYield(this ItemInstance_Consumeable __self, float value) => _bonusHungerYield.Value.SetValue(__self, value);
		public static float GetThirstYield(this ItemInstance_Consumeable __self) => _thirstYield.Value.GetValue(__self);
		public static void SetThirstYield(this ItemInstance_Consumeable __self, float value) => _thirstYield.Value.SetValue(__self, value);
		public static float GetBonusThirstYield(this ItemInstance_Consumeable __self) => _bonusThirstYield.Value.GetValue(__self);
		public static void SetBonusThirstYield(this ItemInstance_Consumeable __self, float value) => _bonusThirstYield.Value.SetValue(__self, value);
		public static bool GetIsRaw(this ItemInstance_Consumeable __self) => _isRaw.Value.GetValue(__self);
		public static void SetIsRaw(this ItemInstance_Consumeable __self, bool value) => _isRaw.Value.SetValue(__self, value);
		public static string GetEventRef_consumeSound(this ItemInstance_Consumeable __self) => _eventRef_consumeSound.Value.GetValue(__self);
		public static void SetEventRef_consumeSound(this ItemInstance_Consumeable __self, string value) => _eventRef_consumeSound.Value.SetValue(__self, value);
		public static Cost GetItemAfterUse(this ItemInstance_Consumeable __self) => _itemAfterUse.Value.GetValue(__self);
		public static void SetItemAfterUse(this ItemInstance_Consumeable __self, Cost value) => _itemAfterUse.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_ItemInstance_Usable
	{

		private static readonly System.Lazy<FieldAccessor<ItemInstance_Usable, bool>> _isUsable =
				new System.Lazy<FieldAccessor<ItemInstance_Usable, bool>>(() => FieldAccessor<ItemInstance_Usable, bool>.Create("isUsable"));
		private static readonly System.Lazy<FieldAccessor<ItemInstance_Usable, bool>> _allowHoldButton =
				new System.Lazy<FieldAccessor<ItemInstance_Usable, bool>>(() => FieldAccessor<ItemInstance_Usable, bool>.Create("allowHoldButton"));
		private static readonly System.Lazy<FieldAccessor<ItemInstance_Usable, string>> _useButtonName =
				new System.Lazy<FieldAccessor<ItemInstance_Usable, string>>(() => FieldAccessor<ItemInstance_Usable, string>.Create("useButtonName"));
		private static readonly System.Lazy<FieldAccessor<ItemInstance_Usable, float>> _useButtonCooldown =
				new System.Lazy<FieldAccessor<ItemInstance_Usable, float>>(() => FieldAccessor<ItemInstance_Usable, float>.Create("useButtonCooldown"));
		private static readonly System.Lazy<FieldAccessor<ItemInstance_Usable, PlayerAnimation>> _animationOnSelect =
				new System.Lazy<FieldAccessor<ItemInstance_Usable, PlayerAnimation>>(() => FieldAccessor<ItemInstance_Usable, PlayerAnimation>.Create("animationOnSelect"));
		private static readonly System.Lazy<FieldAccessor<ItemInstance_Usable, PlayerAnimation>> _animationOnUse =
				new System.Lazy<FieldAccessor<ItemInstance_Usable, PlayerAnimation>>(() => FieldAccessor<ItemInstance_Usable, PlayerAnimation>.Create("animationOnUse"));
		private static readonly System.Lazy<FieldAccessor<ItemInstance_Usable, bool>> _forceAnimationIndex =
				new System.Lazy<FieldAccessor<ItemInstance_Usable, bool>>(() => FieldAccessor<ItemInstance_Usable, bool>.Create("forceAnimationIndex"));
		private static readonly System.Lazy<FieldAccessor<ItemInstance_Usable, bool>> _setTriggering =
				new System.Lazy<FieldAccessor<ItemInstance_Usable, bool>>(() => FieldAccessor<ItemInstance_Usable, bool>.Create("setTriggering"));
		private static readonly System.Lazy<FieldAccessor<ItemInstance_Usable, bool>> _lockItemDuringCooldown =
				new System.Lazy<FieldAccessor<ItemInstance_Usable, bool>>(() => FieldAccessor<ItemInstance_Usable, bool>.Create("lockItemDuringCooldown"));
		private static readonly System.Lazy<FieldAccessor<ItemInstance_Usable, string>> _resetTriggerOnDeselect =
				new System.Lazy<FieldAccessor<ItemInstance_Usable, string>>(() => FieldAccessor<ItemInstance_Usable, string>.Create("resetTriggerOnDeselect"));
		private static readonly System.Lazy<FieldAccessor<ItemInstance_Usable, int>> _consumeUseAmount =
				new System.Lazy<FieldAccessor<ItemInstance_Usable, int>>(() => FieldAccessor<ItemInstance_Usable, int>.Create("consumeUseAmount"));
		private static readonly System.Lazy<FieldAccessor<ItemInstance_Usable, string>> _eventRef_break =
				new System.Lazy<FieldAccessor<ItemInstance_Usable, string>>(() => FieldAccessor<ItemInstance_Usable, string>.Create("eventRef_break"));

		public static bool GetIsUsable(this ItemInstance_Usable __self) => _isUsable.Value.GetValue(__self);
		public static void SetIsUsable(this ItemInstance_Usable __self, bool value) => _isUsable.Value.SetValue(__self, value);
		public static bool GetAllowHoldButton(this ItemInstance_Usable __self) => _allowHoldButton.Value.GetValue(__self);
		public static void SetAllowHoldButton(this ItemInstance_Usable __self, bool value) => _allowHoldButton.Value.SetValue(__self, value);
		public static string GetUseButtonName(this ItemInstance_Usable __self) => _useButtonName.Value.GetValue(__self);
		public static void SetUseButtonName(this ItemInstance_Usable __self, string value) => _useButtonName.Value.SetValue(__self, value);
		public static float GetUseButtonCooldown(this ItemInstance_Usable __self) => _useButtonCooldown.Value.GetValue(__self);
		public static void SetUseButtonCooldown(this ItemInstance_Usable __self, float value) => _useButtonCooldown.Value.SetValue(__self, value);
		public static PlayerAnimation GetAnimationOnSelect(this ItemInstance_Usable __self) => _animationOnSelect.Value.GetValue(__self);
		public static void SetAnimationOnSelect(this ItemInstance_Usable __self, PlayerAnimation value) => _animationOnSelect.Value.SetValue(__self, value);
		public static PlayerAnimation GetAnimationOnUse(this ItemInstance_Usable __self) => _animationOnUse.Value.GetValue(__self);
		public static void SetAnimationOnUse(this ItemInstance_Usable __self, PlayerAnimation value) => _animationOnUse.Value.SetValue(__self, value);
		public static bool GetForceAnimationIndex(this ItemInstance_Usable __self) => _forceAnimationIndex.Value.GetValue(__self);
		public static void SetForceAnimationIndex(this ItemInstance_Usable __self, bool value) => _forceAnimationIndex.Value.SetValue(__self, value);
		public static bool GetSetTriggering(this ItemInstance_Usable __self) => _setTriggering.Value.GetValue(__self);
		public static void SetSetTriggering(this ItemInstance_Usable __self, bool value) => _setTriggering.Value.SetValue(__self, value);
		public static bool GetLockItemDuringCooldown(this ItemInstance_Usable __self) => _lockItemDuringCooldown.Value.GetValue(__self);
		public static void SetLockItemDuringCooldown(this ItemInstance_Usable __self, bool value) => _lockItemDuringCooldown.Value.SetValue(__self, value);
		public static string GetResetTriggerOnDeselect(this ItemInstance_Usable __self) => _resetTriggerOnDeselect.Value.GetValue(__self);
		public static void SetResetTriggerOnDeselect(this ItemInstance_Usable __self, string value) => _resetTriggerOnDeselect.Value.SetValue(__self, value);
		public static int GetConsumeUseAmount(this ItemInstance_Usable __self) => _consumeUseAmount.Value.GetValue(__self);
		public static void SetConsumeUseAmount(this ItemInstance_Usable __self, int value) => _consumeUseAmount.Value.SetValue(__self, value);
		public static string GetEventRef_break(this ItemInstance_Usable __self) => _eventRef_break.Value.GetValue(__self);
		public static void SetEventRef_break(this ItemInstance_Usable __self, string value) => _eventRef_break.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_ItemInstance_Inventory
	{

		private static readonly System.Lazy<FieldAccessor<ItemInstance_Inventory, UnityEngine.Sprite>> _sprite =
				new System.Lazy<FieldAccessor<ItemInstance_Inventory, UnityEngine.Sprite>>(() => FieldAccessor<ItemInstance_Inventory, UnityEngine.Sprite>.Create("sprite"));
		private static readonly System.Lazy<FieldAccessor<ItemInstance_Inventory, string>> _localizationTerm =
				new System.Lazy<FieldAccessor<ItemInstance_Inventory, string>>(() => FieldAccessor<ItemInstance_Inventory, string>.Create("localizationTerm"));
		private static readonly System.Lazy<FieldAccessor<ItemInstance_Inventory, string>> _displayName =
				new System.Lazy<FieldAccessor<ItemInstance_Inventory, string>>(() => FieldAccessor<ItemInstance_Inventory, string>.Create("displayName"));
		private static readonly System.Lazy<FieldAccessor<ItemInstance_Inventory, string>> _description =
				new System.Lazy<FieldAccessor<ItemInstance_Inventory, string>>(() => FieldAccessor<ItemInstance_Inventory, string>.Create("description"));
		private static readonly System.Lazy<FieldAccessor<ItemInstance_Inventory, int>> _stackSize =
				new System.Lazy<FieldAccessor<ItemInstance_Inventory, int>>(() => FieldAccessor<ItemInstance_Inventory, int>.Create("stackSize"));

		public static UnityEngine.Sprite GetSprite(this ItemInstance_Inventory __self) => _sprite.Value.GetValue(__self);
		public static void SetSprite(this ItemInstance_Inventory __self, UnityEngine.Sprite value) => _sprite.Value.SetValue(__self, value);
		public static string GetLocalizationTerm(this ItemInstance_Inventory __self) => _localizationTerm.Value.GetValue(__self);
		public static void SetLocalizationTerm(this ItemInstance_Inventory __self, string value) => _localizationTerm.Value.SetValue(__self, value);
		public static string GetDisplayName(this ItemInstance_Inventory __self) => _displayName.Value.GetValue(__self);
		public static void SetDisplayName(this ItemInstance_Inventory __self, string value) => _displayName.Value.SetValue(__self, value);
		public static string GetDescription(this ItemInstance_Inventory __self) => _description.Value.GetValue(__self);
		public static void SetDescription(this ItemInstance_Inventory __self, string value) => _description.Value.SetValue(__self, value);
		public static int GetStackSize(this ItemInstance_Inventory __self) => _stackSize.Value.GetValue(__self);
		public static void SetStackSize(this ItemInstance_Inventory __self, int value) => _stackSize.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_ItemInstance_Buildable
	{

		private static readonly System.Lazy<FieldAccessor<ItemInstance_Buildable, Block[]>> _blockPrefabs =
				new System.Lazy<FieldAccessor<ItemInstance_Buildable, Block[]>>(() => FieldAccessor<ItemInstance_Buildable, Block[]>.Create("blockPrefabs"));
		private static readonly System.Lazy<FieldAccessor<ItemInstance_Buildable, Item_Base>> _mirroredVersion =
				new System.Lazy<FieldAccessor<ItemInstance_Buildable, Item_Base>>(() => FieldAccessor<ItemInstance_Buildable, Item_Base>.Create("mirroredVersion"));
		private static readonly System.Lazy<FieldAccessor<ItemInstance_Buildable, ItemInstance_Buildable.Upgrade>> _upgrades =
				new System.Lazy<FieldAccessor<ItemInstance_Buildable, ItemInstance_Buildable.Upgrade>>(() => FieldAccessor<ItemInstance_Buildable, ItemInstance_Buildable.Upgrade>.Create("upgrades"));
		private static readonly System.Lazy<FieldAccessor<ItemInstance_Buildable, Axis>> _primaryPaintAxis =
				new System.Lazy<FieldAccessor<ItemInstance_Buildable, Axis>>(() => FieldAccessor<ItemInstance_Buildable, Axis>.Create("primaryPaintAxis"));
		private static readonly System.Lazy<FieldAccessor<ItemInstance_Buildable, PaintMode>> _paintMode =
				new System.Lazy<FieldAccessor<ItemInstance_Buildable, PaintMode>>(() => FieldAccessor<ItemInstance_Buildable, PaintMode>.Create("paintMode"));
		private static readonly System.Lazy<FieldAccessor<ItemInstance_Buildable, bool>> _decorationPaint =
				new System.Lazy<FieldAccessor<ItemInstance_Buildable, bool>>(() => FieldAccessor<ItemInstance_Buildable, bool>.Create("decorationPaint"));
		private static readonly System.Lazy<FieldAccessor<ItemInstance_Buildable, bool>> _reselectOnBuild =
				new System.Lazy<FieldAccessor<ItemInstance_Buildable, bool>>(() => FieldAccessor<ItemInstance_Buildable, bool>.Create("reselectOnBuild"));
		private static readonly System.Lazy<FieldAccessor<ItemInstance_Buildable, bool>> _placeable =
				new System.Lazy<FieldAccessor<ItemInstance_Buildable, bool>>(() => FieldAccessor<ItemInstance_Buildable, bool>.Create("placeable"));
		private static readonly System.Lazy<FieldAccessor<ItemInstance_Buildable, bool>> _hideWhenOverlapSamePos =
				new System.Lazy<FieldAccessor<ItemInstance_Buildable, bool>>(() => FieldAccessor<ItemInstance_Buildable, bool>.Create("hideWhenOverlapSamePos"));
		private static readonly System.Lazy<FieldAccessor<ItemInstance_Buildable, bool>> _playParticlesWhenRemoved =
				new System.Lazy<FieldAccessor<ItemInstance_Buildable, bool>>(() => FieldAccessor<ItemInstance_Buildable, bool>.Create("playParticlesWhenRemoved"));
		private static readonly System.Lazy<FieldAccessor<ItemInstance_Buildable, bool>> _returnPlaceablesWhenUpgraded =
				new System.Lazy<FieldAccessor<ItemInstance_Buildable, bool>>(() => FieldAccessor<ItemInstance_Buildable, bool>.Create("returnPlaceablesWhenUpgraded"));
		private static readonly System.Lazy<FieldAccessor<ItemInstance_Buildable, bool>> _returnItemWhenRemovedRecursively =
				new System.Lazy<FieldAccessor<ItemInstance_Buildable, bool>>(() => FieldAccessor<ItemInstance_Buildable, bool>.Create("returnItemWhenRemovedRecursively"));
		private static readonly System.Lazy<FieldAccessor<ItemInstance_Buildable, float>> _unstableCheckDistance =
				new System.Lazy<FieldAccessor<ItemInstance_Buildable, float>>(() => FieldAccessor<ItemInstance_Buildable, float>.Create("unstableCheckDistance"));

		public static Block[] GetBlockPrefabs(this ItemInstance_Buildable __self) => _blockPrefabs.Value.GetValue(__self);
		public static void SetBlockPrefabs(this ItemInstance_Buildable __self, Block[] value) => _blockPrefabs.Value.SetValue(__self, value);
		public static Item_Base GetMirroredVersion(this ItemInstance_Buildable __self) => _mirroredVersion.Value.GetValue(__self);
		public static void SetMirroredVersion(this ItemInstance_Buildable __self, Item_Base value) => _mirroredVersion.Value.SetValue(__self, value);
		public static ItemInstance_Buildable.Upgrade GetUpgrades(this ItemInstance_Buildable __self) => _upgrades.Value.GetValue(__self);
		public static void SetUpgrades(this ItemInstance_Buildable __self, ItemInstance_Buildable.Upgrade value) => _upgrades.Value.SetValue(__self, value);
		public static Axis GetPrimaryPaintAxis(this ItemInstance_Buildable __self) => _primaryPaintAxis.Value.GetValue(__self);
		public static void SetPrimaryPaintAxis(this ItemInstance_Buildable __self, Axis value) => _primaryPaintAxis.Value.SetValue(__self, value);
		public static PaintMode GetPaintMode(this ItemInstance_Buildable __self) => _paintMode.Value.GetValue(__self);
		public static void SetPaintMode(this ItemInstance_Buildable __self, PaintMode value) => _paintMode.Value.SetValue(__self, value);
		public static bool GetDecorationPaint(this ItemInstance_Buildable __self) => _decorationPaint.Value.GetValue(__self);
		public static void SetDecorationPaint(this ItemInstance_Buildable __self, bool value) => _decorationPaint.Value.SetValue(__self, value);
		public static bool GetReselectOnBuild(this ItemInstance_Buildable __self) => _reselectOnBuild.Value.GetValue(__self);
		public static void SetReselectOnBuild(this ItemInstance_Buildable __self, bool value) => _reselectOnBuild.Value.SetValue(__self, value);
		public static bool GetPlaceable(this ItemInstance_Buildable __self) => _placeable.Value.GetValue(__self);
		public static void SetPlaceable(this ItemInstance_Buildable __self, bool value) => _placeable.Value.SetValue(__self, value);
		public static bool GetHideWhenOverlapSamePos(this ItemInstance_Buildable __self) => _hideWhenOverlapSamePos.Value.GetValue(__self);
		public static void SetHideWhenOverlapSamePos(this ItemInstance_Buildable __self, bool value) => _hideWhenOverlapSamePos.Value.SetValue(__self, value);
		public static bool GetPlayParticlesWhenRemoved(this ItemInstance_Buildable __self) => _playParticlesWhenRemoved.Value.GetValue(__self);
		public static void SetPlayParticlesWhenRemoved(this ItemInstance_Buildable __self, bool value) => _playParticlesWhenRemoved.Value.SetValue(__self, value);
		public static bool GetReturnPlaceablesWhenUpgraded(this ItemInstance_Buildable __self) => _returnPlaceablesWhenUpgraded.Value.GetValue(__self);
		public static void SetReturnPlaceablesWhenUpgraded(this ItemInstance_Buildable __self, bool value) => _returnPlaceablesWhenUpgraded.Value.SetValue(__self, value);
		public static bool GetReturnItemWhenRemovedRecursively(this ItemInstance_Buildable __self) => _returnItemWhenRemovedRecursively.Value.GetValue(__self);
		public static void SetReturnItemWhenRemovedRecursively(this ItemInstance_Buildable __self, bool value) => _returnItemWhenRemovedRecursively.Value.SetValue(__self, value);
		public static float GetUnstableCheckDistance(this ItemInstance_Buildable __self) => _unstableCheckDistance.Value.GetValue(__self);
		public static void SetUnstableCheckDistance(this ItemInstance_Buildable __self, float value) => _unstableCheckDistance.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_ItemInstance_Equipment
	{

		private static readonly System.Lazy<FieldAccessor<ItemInstance_Equipment, EquipSlotType>> _slotType =
				new System.Lazy<FieldAccessor<ItemInstance_Equipment, EquipSlotType>>(() => FieldAccessor<ItemInstance_Equipment, EquipSlotType>.Create("slotType"));

		public static EquipSlotType GetSlotType(this ItemInstance_Equipment __self) => _slotType.Value.GetValue(__self);
		public static void SetSlotType(this ItemInstance_Equipment __self, EquipSlotType value) => _slotType.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_ItemInstance_Recipe
	{

		private static readonly System.Lazy<FieldAccessor<ItemInstance_Recipe, CraftingCategory>> _craftingCategory =
				new System.Lazy<FieldAccessor<ItemInstance_Recipe, CraftingCategory>>(() => FieldAccessor<ItemInstance_Recipe, CraftingCategory>.Create("craftingCategory"));
		private static readonly System.Lazy<FieldAccessor<ItemInstance_Recipe, string>> _subCategory =
				new System.Lazy<FieldAccessor<ItemInstance_Recipe, string>>(() => FieldAccessor<ItemInstance_Recipe, string>.Create("subCategory"));
		private static readonly System.Lazy<FieldAccessor<ItemInstance_Recipe, int>> _subCatergoryOrder =
				new System.Lazy<FieldAccessor<ItemInstance_Recipe, int>>(() => FieldAccessor<ItemInstance_Recipe, int>.Create("subCatergoryOrder"));
		private static readonly System.Lazy<FieldAccessor<ItemInstance_Recipe, Item_Base[]>> _skins =
				new System.Lazy<FieldAccessor<ItemInstance_Recipe, Item_Base[]>>(() => FieldAccessor<ItemInstance_Recipe, Item_Base[]>.Create("skins"));
		private static readonly System.Lazy<FieldAccessor<ItemInstance_Recipe, CostMultiple[]>> _newCostToCraft =
				new System.Lazy<FieldAccessor<ItemInstance_Recipe, CostMultiple[]>>(() => FieldAccessor<ItemInstance_Recipe, CostMultiple[]>.Create("newCostToCraft"));
		private static readonly System.Lazy<FieldAccessor<ItemInstance_Recipe, int>> _amountToCraft =
				new System.Lazy<FieldAccessor<ItemInstance_Recipe, int>>(() => FieldAccessor<ItemInstance_Recipe, int>.Create("amountToCraft"));
		private static readonly System.Lazy<FieldAccessor<ItemInstance_Recipe, bool>> _learned =
				new System.Lazy<FieldAccessor<ItemInstance_Recipe, bool>>(() => FieldAccessor<ItemInstance_Recipe, bool>.Create("learned"));
		private static readonly System.Lazy<FieldAccessor<ItemInstance_Recipe, bool>> _learnedFromBeginning =
				new System.Lazy<FieldAccessor<ItemInstance_Recipe, bool>>(() => FieldAccessor<ItemInstance_Recipe, bool>.Create("learnedFromBeginning"));
		private static readonly System.Lazy<FieldAccessor<ItemInstance_Recipe, bool>> __hiddenInResearchTable =
				new System.Lazy<FieldAccessor<ItemInstance_Recipe, bool>>(() => FieldAccessor<ItemInstance_Recipe, bool>.Create("_hiddenInResearchTable"));
		private static readonly System.Lazy<FieldAccessor<ItemInstance_Recipe, Item_Base>> _blueprintItem =
				new System.Lazy<FieldAccessor<ItemInstance_Recipe, Item_Base>>(() => FieldAccessor<ItemInstance_Recipe, Item_Base>.Create("blueprintItem"));
		private static readonly System.Lazy<FieldAccessor<ItemInstance_Recipe, Item_Base[]>> _extraBlueprintItems =
				new System.Lazy<FieldAccessor<ItemInstance_Recipe, Item_Base[]>>(() => FieldAccessor<ItemInstance_Recipe, Item_Base[]>.Create("extraBlueprintItems"));
		private static readonly System.Lazy<FieldAccessor<ItemInstance_Recipe, bool>> _learnedViaBlueprint =
				new System.Lazy<FieldAccessor<ItemInstance_Recipe, bool>>(() => FieldAccessor<ItemInstance_Recipe, bool>.Create("learnedViaBlueprint"));

		public static CraftingCategory GetCraftingCategory(this ItemInstance_Recipe __self) => _craftingCategory.Value.GetValue(__self);
		public static void SetCraftingCategory(this ItemInstance_Recipe __self, CraftingCategory value) => _craftingCategory.Value.SetValue(__self, value);
		public static string GetSubCategory(this ItemInstance_Recipe __self) => _subCategory.Value.GetValue(__self);
		public static void SetSubCategory(this ItemInstance_Recipe __self, string value) => _subCategory.Value.SetValue(__self, value);
		public static int GetSubCatergoryOrder(this ItemInstance_Recipe __self) => _subCatergoryOrder.Value.GetValue(__self);
		public static void SetSubCatergoryOrder(this ItemInstance_Recipe __self, int value) => _subCatergoryOrder.Value.SetValue(__self, value);
		public static Item_Base[] GetSkins(this ItemInstance_Recipe __self) => _skins.Value.GetValue(__self);
		public static void SetSkins(this ItemInstance_Recipe __self, Item_Base[] value) => _skins.Value.SetValue(__self, value);
		public static CostMultiple[] GetNewCostToCraft(this ItemInstance_Recipe __self) => _newCostToCraft.Value.GetValue(__self);
		public static void SetNewCostToCraft(this ItemInstance_Recipe __self, CostMultiple[] value) => _newCostToCraft.Value.SetValue(__self, value);
		public static int GetAmountToCraft(this ItemInstance_Recipe __self) => _amountToCraft.Value.GetValue(__self);
		public static void SetAmountToCraft(this ItemInstance_Recipe __self, int value) => _amountToCraft.Value.SetValue(__self, value);
		public static bool GetLearned(this ItemInstance_Recipe __self) => _learned.Value.GetValue(__self);
		public static void SetLearned(this ItemInstance_Recipe __self, bool value) => _learned.Value.SetValue(__self, value);
		public static bool GetLearnedFromBeginning(this ItemInstance_Recipe __self) => _learnedFromBeginning.Value.GetValue(__self);
		public static void SetLearnedFromBeginning(this ItemInstance_Recipe __self, bool value) => _learnedFromBeginning.Value.SetValue(__self, value);
		public static bool Get_hiddenInResearchTable(this ItemInstance_Recipe __self) => __hiddenInResearchTable.Value.GetValue(__self);
		public static void Set_hiddenInResearchTable(this ItemInstance_Recipe __self, bool value) => __hiddenInResearchTable.Value.SetValue(__self, value);
		public static Item_Base GetBlueprintItem(this ItemInstance_Recipe __self) => _blueprintItem.Value.GetValue(__self);
		public static void SetBlueprintItem(this ItemInstance_Recipe __self, Item_Base value) => _blueprintItem.Value.SetValue(__self, value);
		public static Item_Base[] GetExtraBlueprintItems(this ItemInstance_Recipe __self) => _extraBlueprintItems.Value.GetValue(__self);
		public static void SetExtraBlueprintItems(this ItemInstance_Recipe __self, Item_Base[] value) => _extraBlueprintItems.Value.SetValue(__self, value);
		public static bool GetLearnedViaBlueprint(this ItemInstance_Recipe __self) => _learnedViaBlueprint.Value.GetValue(__self);
		public static void SetLearnedViaBlueprint(this ItemInstance_Recipe __self, bool value) => _learnedViaBlueprint.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<ItemInstance_Recipe>> _Button_ToggleLearnedViaBlueprint757602046 =
				new System.Lazy<MethodAccessor<ItemInstance_Recipe>>(() => MethodAccessor<ItemInstance_Recipe>.Create("Button_ToggleLearnedViaBlueprint"));

		public static void Button_ToggleLearnedViaBlueprint(this ItemInstance_Recipe __self) => _Button_ToggleLearnedViaBlueprint757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_ItemInstance
	{

		private static readonly System.Lazy<FieldAccessor<ItemInstance, int>> _amount =
				new System.Lazy<FieldAccessor<ItemInstance, int>>(() => FieldAccessor<ItemInstance, int>.Create("amount"));
		private static readonly System.Lazy<FieldAccessor<ItemInstance, int>> _uses =
				new System.Lazy<FieldAccessor<ItemInstance, int>>(() => FieldAccessor<ItemInstance, int>.Create("uses"));
		private static readonly System.Lazy<FieldAccessor<ItemInstance, string>> _uniqueName =
				new System.Lazy<FieldAccessor<ItemInstance, string>>(() => FieldAccessor<ItemInstance, string>.Create("uniqueName"));
		private static readonly System.Lazy<FieldAccessor<ItemInstance, int>> _uniqueIndex =
				new System.Lazy<FieldAccessor<ItemInstance, int>>(() => FieldAccessor<ItemInstance, int>.Create("uniqueIndex"));

		public static int GetAmount(this ItemInstance __self) => _amount.Value.GetValue(__self);
		public static void SetAmount(this ItemInstance __self, int value) => _amount.Value.SetValue(__self, value);
		public static int GetUses(this ItemInstance __self) => _uses.Value.GetValue(__self);
		public static void SetUses(this ItemInstance __self, int value) => _uses.Value.SetValue(__self, value);
		public static string GetUniqueName(this ItemInstance __self) => _uniqueName.Value.GetValue(__self);
		public static void SetUniqueName(this ItemInstance __self, string value) => _uniqueName.Value.SetValue(__self, value);
		public static int GetUniqueIndex(this ItemInstance __self) => _uniqueIndex.Value.GetValue(__self);
		public static void SetUniqueIndex(this ItemInstance __self, int value) => _uniqueIndex.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_UI_DebugGraphs
	{

		private static readonly System.Lazy<FieldAccessor<UI_DebugGraphs, UnityEngine.Camera>> __ViewportCamera =
				new System.Lazy<FieldAccessor<UI_DebugGraphs, UnityEngine.Camera>>(() => FieldAccessor<UI_DebugGraphs, UnityEngine.Camera>.Create("_ViewportCamera"));
		private static readonly System.Lazy<FieldAccessor<UI_DebugGraphs, UnityEngine.Camera>> __GraphCamera =
				new System.Lazy<FieldAccessor<UI_DebugGraphs, UnityEngine.Camera>>(() => FieldAccessor<UI_DebugGraphs, UnityEngine.Camera>.Create("_GraphCamera"));
		private static readonly System.Lazy<FieldAccessor<UI_DebugGraphs, UI_GraphDrawer>> __DrawingComponent =
				new System.Lazy<FieldAccessor<UI_DebugGraphs, UI_GraphDrawer>>(() => FieldAccessor<UI_DebugGraphs, UI_GraphDrawer>.Create("_DrawingComponent"));
		private static readonly System.Lazy<FieldAccessor<UI_DebugGraphs, float>> __UVPerFrame =
				new System.Lazy<FieldAccessor<UI_DebugGraphs, float>>(() => FieldAccessor<UI_DebugGraphs, float>.Create("_UVPerFrame"));
		private static readonly System.Lazy<FieldAccessor<UI_DebugGraphs, int>> __PixelWidth =
				new System.Lazy<FieldAccessor<UI_DebugGraphs, int>>(() => FieldAccessor<UI_DebugGraphs, int>.Create("_PixelWidth"));
		private static readonly System.Lazy<FieldAccessor<UI_DebugGraphs, int>> __PixelHeight =
				new System.Lazy<FieldAccessor<UI_DebugGraphs, int>>(() => FieldAccessor<UI_DebugGraphs, int>.Create("_PixelHeight"));
		private static readonly System.Lazy<FieldAccessor<UI_DebugGraphs, System.Collections.Generic.Dictionary<string, UI_DebugGraphs.GraphData>>> __Graphs =
				new System.Lazy<FieldAccessor<UI_DebugGraphs, System.Collections.Generic.Dictionary<string, UI_DebugGraphs.GraphData>>>(() => FieldAccessor<UI_DebugGraphs, System.Collections.Generic.Dictionary<string, UI_DebugGraphs.GraphData>>.Create("_Graphs"));

		public static UnityEngine.Camera Get_ViewportCamera(this UI_DebugGraphs __self) => __ViewportCamera.Value.GetValue(__self);
		public static void Set_ViewportCamera(this UI_DebugGraphs __self, UnityEngine.Camera value) => __ViewportCamera.Value.SetValue(__self, value);
		public static UnityEngine.Camera Get_GraphCamera(this UI_DebugGraphs __self) => __GraphCamera.Value.GetValue(__self);
		public static void Set_GraphCamera(this UI_DebugGraphs __self, UnityEngine.Camera value) => __GraphCamera.Value.SetValue(__self, value);
		public static UI_GraphDrawer Get_DrawingComponent(this UI_DebugGraphs __self) => __DrawingComponent.Value.GetValue(__self);
		public static void Set_DrawingComponent(this UI_DebugGraphs __self, UI_GraphDrawer value) => __DrawingComponent.Value.SetValue(__self, value);
		public static float Get_UVPerFrame(this UI_DebugGraphs __self) => __UVPerFrame.Value.GetValue(__self);
		public static void Set_UVPerFrame(this UI_DebugGraphs __self, float value) => __UVPerFrame.Value.SetValue(__self, value);
		public static int Get_PixelWidth(this UI_DebugGraphs __self) => __PixelWidth.Value.GetValue(__self);
		public static void Set_PixelWidth(this UI_DebugGraphs __self, int value) => __PixelWidth.Value.SetValue(__self, value);
		public static int Get_PixelHeight(this UI_DebugGraphs __self) => __PixelHeight.Value.GetValue(__self);
		public static void Set_PixelHeight(this UI_DebugGraphs __self, int value) => __PixelHeight.Value.SetValue(__self, value);
		public static System.Collections.Generic.Dictionary<string, UI_DebugGraphs.GraphData> Get_Graphs(this UI_DebugGraphs __self) => __Graphs.Value.GetValue(__self);
		public static void Set_Graphs(this UI_DebugGraphs __self, System.Collections.Generic.Dictionary<string, UI_DebugGraphs.GraphData> value) => __Graphs.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<UI_DebugGraphs>> _ReConfigureResolution757602046 =
				new System.Lazy<MethodAccessor<UI_DebugGraphs>>(() => MethodAccessor<UI_DebugGraphs>.Create("ReConfigureResolution"));
		private static readonly System.Lazy<MethodAccessor<UI_DebugGraphs>> _Update757602046 =
				new System.Lazy<MethodAccessor<UI_DebugGraphs>>(() => MethodAccessor<UI_DebugGraphs>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<UI_DebugGraphs>> _LateUpdate757602046 =
				new System.Lazy<MethodAccessor<UI_DebugGraphs>>(() => MethodAccessor<UI_DebugGraphs>.Create("LateUpdate"));
		private static readonly System.Lazy<MethodAccessor<UI_DebugGraphs>> _SetupGraph4256270724 =
				new System.Lazy<MethodAccessor<UI_DebugGraphs>>(() => MethodAccessor<UI_DebugGraphs>.Create("SetupGraph", typeof(string), typeof(UI_DebugGraphs.GraphData)));

		public static void ReConfigureResolution(this UI_DebugGraphs __self) => _ReConfigureResolution757602046.Value.Invoke(__self);
		public static void Update(this UI_DebugGraphs __self) => _Update757602046.Value.Invoke(__self);
		public static void LateUpdate(this UI_DebugGraphs __self) => _LateUpdate757602046.Value.Invoke(__self);
		public static void SetupGraph(this UI_DebugGraphs __self, string name, UI_DebugGraphs.GraphData data) => _SetupGraph4256270724.Value.Invoke(__self, name, data);

	}

	public static class Private_UI_DebugGraphs
	{

		private static readonly System.Lazy<StaticFieldAccessor<UI_DebugGraphs>> __Instance =
				new System.Lazy<StaticFieldAccessor<UI_DebugGraphs>>(() => StaticFieldAccessor<UI_DebugGraphs>.Create(typeof(UI_DebugGraphs), "_Instance"));

		public static UI_DebugGraphs Get_Instance() => __Instance.Value.GetValue();
		public static void Set_Instance(UI_DebugGraphs value) => __Instance.Value.SetValue(value);

	}

	public static class PrivateAccessor_UI_GraphDrawer
	{

		private static readonly System.Lazy<MethodAccessor<UI_GraphDrawer>> _OnPostRender757602046 =
				new System.Lazy<MethodAccessor<UI_GraphDrawer>>(() => MethodAccessor<UI_GraphDrawer>.Create("OnPostRender"));

		public static void OnPostRender(this UI_GraphDrawer __self) => _OnPostRender757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_BalboaRelayStationScreen
	{

		private static readonly System.Lazy<FieldAccessor<BalboaRelayStationScreen, TMPro.TextMeshPro>> _frequencyText =
				new System.Lazy<FieldAccessor<BalboaRelayStationScreen, TMPro.TextMeshPro>>(() => FieldAccessor<BalboaRelayStationScreen, TMPro.TextMeshPro>.Create("frequencyText"));
		private static readonly System.Lazy<FieldAccessor<BalboaRelayStationScreen, TMPro.TextMeshPro>> _stationsActivatedText =
				new System.Lazy<FieldAccessor<BalboaRelayStationScreen, TMPro.TextMeshPro>>(() => FieldAccessor<BalboaRelayStationScreen, TMPro.TextMeshPro>.Create("stationsActivatedText"));
		private static readonly System.Lazy<FieldAccessor<BalboaRelayStationScreen, UnityEngine.GameObject>> _edgeGlow =
				new System.Lazy<FieldAccessor<BalboaRelayStationScreen, UnityEngine.GameObject>>(() => FieldAccessor<BalboaRelayStationScreen, UnityEngine.GameObject>.Create("edgeGlow"));

		public static TMPro.TextMeshPro GetFrequencyText(this BalboaRelayStationScreen __self) => _frequencyText.Value.GetValue(__self);
		public static void SetFrequencyText(this BalboaRelayStationScreen __self, TMPro.TextMeshPro value) => _frequencyText.Value.SetValue(__self, value);
		public static TMPro.TextMeshPro GetStationsActivatedText(this BalboaRelayStationScreen __self) => _stationsActivatedText.Value.GetValue(__self);
		public static void SetStationsActivatedText(this BalboaRelayStationScreen __self, TMPro.TextMeshPro value) => _stationsActivatedText.Value.SetValue(__self, value);
		public static UnityEngine.GameObject GetEdgeGlow(this BalboaRelayStationScreen __self) => _edgeGlow.Value.GetValue(__self);
		public static void SetEdgeGlow(this BalboaRelayStationScreen __self, UnityEngine.GameObject value) => _edgeGlow.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<BalboaRelayStationScreen>> _Awake757602046 =
				new System.Lazy<MethodAccessor<BalboaRelayStationScreen>>(() => MethodAccessor<BalboaRelayStationScreen>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<BalboaRelayStationScreen>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<BalboaRelayStationScreen>>(() => MethodAccessor<BalboaRelayStationScreen>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<BalboaRelayStationScreen>> _RefreshScreen757602046 =
				new System.Lazy<MethodAccessor<BalboaRelayStationScreen>>(() => MethodAccessor<BalboaRelayStationScreen>.Create("RefreshScreen"));
		private static readonly System.Lazy<MethodAccessor<BalboaRelayStationScreen>> _GetActiveStationCount757602046 =
				new System.Lazy<MethodAccessor<BalboaRelayStationScreen>>(() => MethodAccessor<BalboaRelayStationScreen>.Create("GetActiveStationCount"));

		public static void Awake(this BalboaRelayStationScreen __self) => _Awake757602046.Value.Invoke(__self);
		public static void OnDestroy(this BalboaRelayStationScreen __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void RefreshScreen(this BalboaRelayStationScreen __self) => _RefreshScreen757602046.Value.Invoke(__self);
		public static int GetActiveStationCount(this BalboaRelayStationScreen __self) => (int)_GetActiveStationCount757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_BrunosToolBoard
	{

		private static readonly System.Lazy<FieldAccessor<BrunosToolBoard, QuestInteractable[]>> _toolslots =
				new System.Lazy<FieldAccessor<BrunosToolBoard, QuestInteractable[]>>(() => FieldAccessor<BrunosToolBoard, QuestInteractable[]>.Create("toolslots"));
		private static readonly System.Lazy<FieldAccessor<BrunosToolBoard, UnityEngine.Animator>> _animator =
				new System.Lazy<FieldAccessor<BrunosToolBoard, UnityEngine.Animator>>(() => FieldAccessor<BrunosToolBoard, UnityEngine.Animator>.Create("animator"));
		private static readonly System.Lazy<FieldAccessor<BrunosToolBoard, UnityEngine.GameObject>> _toolboardNoShimmer =
				new System.Lazy<FieldAccessor<BrunosToolBoard, UnityEngine.GameObject>>(() => FieldAccessor<BrunosToolBoard, UnityEngine.GameObject>.Create("toolboardNoShimmer"));
		private static readonly System.Lazy<FieldAccessor<BrunosToolBoard, UnityEngine.GameObject>> _toolboardShimmer =
				new System.Lazy<FieldAccessor<BrunosToolBoard, UnityEngine.GameObject>>(() => FieldAccessor<BrunosToolBoard, UnityEngine.GameObject>.Create("toolboardShimmer"));
		private static readonly System.Lazy<FieldAccessor<BrunosToolBoard, bool>> _toolboardComplete =
				new System.Lazy<FieldAccessor<BrunosToolBoard, bool>>(() => FieldAccessor<BrunosToolBoard, bool>.Create("toolboardComplete"));

		public static QuestInteractable[] GetToolslots(this BrunosToolBoard __self) => _toolslots.Value.GetValue(__self);
		public static void SetToolslots(this BrunosToolBoard __self, QuestInteractable[] value) => _toolslots.Value.SetValue(__self, value);
		public static UnityEngine.Animator GetAnimator(this BrunosToolBoard __self) => _animator.Value.GetValue(__self);
		public static void SetAnimator(this BrunosToolBoard __self, UnityEngine.Animator value) => _animator.Value.SetValue(__self, value);
		public static UnityEngine.GameObject GetToolboardNoShimmer(this BrunosToolBoard __self) => _toolboardNoShimmer.Value.GetValue(__self);
		public static void SetToolboardNoShimmer(this BrunosToolBoard __self, UnityEngine.GameObject value) => _toolboardNoShimmer.Value.SetValue(__self, value);
		public static UnityEngine.GameObject GetToolboardShimmer(this BrunosToolBoard __self) => _toolboardShimmer.Value.GetValue(__self);
		public static void SetToolboardShimmer(this BrunosToolBoard __self, UnityEngine.GameObject value) => _toolboardShimmer.Value.SetValue(__self, value);
		public static bool GetToolboardComplete(this BrunosToolBoard __self) => _toolboardComplete.Value.GetValue(__self);
		public static void SetToolboardComplete(this BrunosToolBoard __self, bool value) => _toolboardComplete.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<BrunosToolBoard>> _Awake757602046 =
				new System.Lazy<MethodAccessor<BrunosToolBoard>>(() => MethodAccessor<BrunosToolBoard>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<BrunosToolBoard>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<BrunosToolBoard>>(() => MethodAccessor<BrunosToolBoard>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<BrunosToolBoard>> _OnEnable757602046 =
				new System.Lazy<MethodAccessor<BrunosToolBoard>>(() => MethodAccessor<BrunosToolBoard>.Create("OnEnable"));
		private static readonly System.Lazy<MethodAccessor<BrunosToolBoard>> _OnToolSlotInteract3171859007 =
				new System.Lazy<MethodAccessor<BrunosToolBoard>>(() => MethodAccessor<BrunosToolBoard>.Create("OnToolSlotInteract", typeof(int), typeof(bool), typeof(Network_Player), typeof(bool)));
		private static readonly System.Lazy<MethodAccessor<BrunosToolBoard>> _UpdateBoardState757602046 =
				new System.Lazy<MethodAccessor<BrunosToolBoard>>(() => MethodAccessor<BrunosToolBoard>.Create("UpdateBoardState"));
		private static readonly System.Lazy<MethodAccessor<BrunosToolBoard>> _AllToolsPlaced757602046 =
				new System.Lazy<MethodAccessor<BrunosToolBoard>>(() => MethodAccessor<BrunosToolBoard>.Create("AllToolsPlaced"));

		public static void Awake(this BrunosToolBoard __self) => _Awake757602046.Value.Invoke(__self);
		public static void OnDestroy(this BrunosToolBoard __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void OnEnable(this BrunosToolBoard __self) => _OnEnable757602046.Value.Invoke(__self);
		public static void OnToolSlotInteract(this BrunosToolBoard __self, int objectStateIndex, bool atStart, Network_Player player, bool success) => _OnToolSlotInteract3171859007.Value.Invoke(__self, objectStateIndex, atStart, player, success);
		public static void UpdateBoardState(this BrunosToolBoard __self) => _UpdateBoardState757602046.Value.Invoke(__self);
		public static bool AllToolsPlaced(this BrunosToolBoard __self) => (bool)_AllToolsPlaced757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_SinkingObstacle
	{

		private static readonly System.Lazy<FieldAccessor<SinkingObstacle, UnityEngine.Transform>> _sinkTransform =
				new System.Lazy<FieldAccessor<SinkingObstacle, UnityEngine.Transform>>(() => FieldAccessor<SinkingObstacle, UnityEngine.Transform>.Create("sinkTransform"));
		private static readonly System.Lazy<FieldAccessor<SinkingObstacle, float>> _sinkDepth =
				new System.Lazy<FieldAccessor<SinkingObstacle, float>>(() => FieldAccessor<SinkingObstacle, float>.Create("sinkDepth"));
		private static readonly System.Lazy<FieldAccessor<SinkingObstacle, float>> _animationTime =
				new System.Lazy<FieldAccessor<SinkingObstacle, float>>(() => FieldAccessor<SinkingObstacle, float>.Create("animationTime"));
		private static readonly System.Lazy<FieldAccessor<SinkingObstacle, bool>> _sinking =
				new System.Lazy<FieldAccessor<SinkingObstacle, bool>>(() => FieldAccessor<SinkingObstacle, bool>.Create("sinking"));
		private static readonly System.Lazy<FieldAccessor<SinkingObstacle, TriggerBoxEnterAction>> _triggerBoxEnter =
				new System.Lazy<FieldAccessor<SinkingObstacle, TriggerBoxEnterAction>>(() => FieldAccessor<SinkingObstacle, TriggerBoxEnterAction>.Create("triggerBoxEnter"));
		private static readonly System.Lazy<FieldAccessor<SinkingObstacle, ParticleController>> _particleController =
				new System.Lazy<FieldAccessor<SinkingObstacle, ParticleController>>(() => FieldAccessor<SinkingObstacle, ParticleController>.Create("particleController"));
		private static readonly System.Lazy<FieldAccessor<SinkingObstacle, FMODUnity.StudioEventEmitter>> _sinkingEmitter =
				new System.Lazy<FieldAccessor<SinkingObstacle, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<SinkingObstacle, FMODUnity.StudioEventEmitter>.Create("sinkingEmitter"));
		private static readonly System.Lazy<FieldAccessor<SinkingObstacle, Raft_Network>> _network =
				new System.Lazy<FieldAccessor<SinkingObstacle, Raft_Network>>(() => FieldAccessor<SinkingObstacle, Raft_Network>.Create("network"));
		private static readonly System.Lazy<FieldAccessor<SinkingObstacle, UnityEngine.Vector3>> _startPosition =
				new System.Lazy<FieldAccessor<SinkingObstacle, UnityEngine.Vector3>>(() => FieldAccessor<SinkingObstacle, UnityEngine.Vector3>.Create("startPosition"));

		public static UnityEngine.Transform GetSinkTransform(this SinkingObstacle __self) => _sinkTransform.Value.GetValue(__self);
		public static void SetSinkTransform(this SinkingObstacle __self, UnityEngine.Transform value) => _sinkTransform.Value.SetValue(__self, value);
		public static float GetSinkDepth(this SinkingObstacle __self) => _sinkDepth.Value.GetValue(__self);
		public static void SetSinkDepth(this SinkingObstacle __self, float value) => _sinkDepth.Value.SetValue(__self, value);
		public static float GetAnimationTime(this SinkingObstacle __self) => _animationTime.Value.GetValue(__self);
		public static void SetAnimationTime(this SinkingObstacle __self, float value) => _animationTime.Value.SetValue(__self, value);
		public static bool GetSinking(this SinkingObstacle __self) => _sinking.Value.GetValue(__self);
		public static void SetSinking(this SinkingObstacle __self, bool value) => _sinking.Value.SetValue(__self, value);
		public static TriggerBoxEnterAction GetTriggerBoxEnter(this SinkingObstacle __self) => _triggerBoxEnter.Value.GetValue(__self);
		public static void SetTriggerBoxEnter(this SinkingObstacle __self, TriggerBoxEnterAction value) => _triggerBoxEnter.Value.SetValue(__self, value);
		public static ParticleController GetParticleController(this SinkingObstacle __self) => _particleController.Value.GetValue(__self);
		public static void SetParticleController(this SinkingObstacle __self, ParticleController value) => _particleController.Value.SetValue(__self, value);
		public static FMODUnity.StudioEventEmitter GetSinkingEmitter(this SinkingObstacle __self) => _sinkingEmitter.Value.GetValue(__self);
		public static void SetSinkingEmitter(this SinkingObstacle __self, FMODUnity.StudioEventEmitter value) => _sinkingEmitter.Value.SetValue(__self, value);
		public static Raft_Network GetNetwork(this SinkingObstacle __self) => _network.Value.GetValue(__self);
		public static void SetNetwork(this SinkingObstacle __self, Raft_Network value) => _network.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetStartPosition(this SinkingObstacle __self) => _startPosition.Value.GetValue(__self);
		public static void SetStartPosition(this SinkingObstacle __self, UnityEngine.Vector3 value) => _startPosition.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<SinkingObstacle>> _OnDisable757602046 =
				new System.Lazy<MethodAccessor<SinkingObstacle>>(() => MethodAccessor<SinkingObstacle>.Create("OnDisable"));
		private static readonly System.Lazy<MethodAccessor<SinkingObstacle>> _Awake757602046 =
				new System.Lazy<MethodAccessor<SinkingObstacle>>(() => MethodAccessor<SinkingObstacle>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<SinkingObstacle>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<SinkingObstacle>>(() => MethodAccessor<SinkingObstacle>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<SinkingObstacle>> _Start757602046 =
				new System.Lazy<MethodAccessor<SinkingObstacle>>(() => MethodAccessor<SinkingObstacle>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<SinkingObstacle>> _OnTriggerBoxEnter3468606003 =
				new System.Lazy<MethodAccessor<SinkingObstacle>>(() => MethodAccessor<SinkingObstacle>.Create("OnTriggerBoxEnter", typeof(UnityEngine.Collider)));
		private static readonly System.Lazy<MethodAccessor<SinkingObstacle>> _RPC_StartSinking757602046 =
				new System.Lazy<MethodAccessor<SinkingObstacle>>(() => MethodAccessor<SinkingObstacle>.Create("RPC_StartSinking"));
		private static readonly System.Lazy<MethodAccessor<SinkingObstacle>> _StartSinking757602046 =
				new System.Lazy<MethodAccessor<SinkingObstacle>>(() => MethodAccessor<SinkingObstacle>.Create("StartSinking"));
		private static readonly System.Lazy<MethodAccessor<SinkingObstacle>> _ResetSink757602046 =
				new System.Lazy<MethodAccessor<SinkingObstacle>>(() => MethodAccessor<SinkingObstacle>.Create("ResetSink"));
		private static readonly System.Lazy<MethodAccessor<SinkingObstacle>> _Sink757602046 =
				new System.Lazy<MethodAccessor<SinkingObstacle>>(() => MethodAccessor<SinkingObstacle>.Create("Sink"));

		public static void OnDisable(this SinkingObstacle __self) => _OnDisable757602046.Value.Invoke(__self);
		public static void Awake(this SinkingObstacle __self) => _Awake757602046.Value.Invoke(__self);
		public static void OnDestroy(this SinkingObstacle __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void Start(this SinkingObstacle __self) => _Start757602046.Value.Invoke(__self);
		public static void OnTriggerBoxEnter(this SinkingObstacle __self, UnityEngine.Collider other) => _OnTriggerBoxEnter3468606003.Value.Invoke(__self, other);
		public static void RPC_StartSinking(this SinkingObstacle __self) => _RPC_StartSinking757602046.Value.Invoke(__self);
		public static bool StartSinking(this SinkingObstacle __self) => (bool)_StartSinking757602046.Value.Invoke(__self);
		public static void ResetSink(this SinkingObstacle __self) => _ResetSink757602046.Value.Invoke(__self);
		public static System.Collections.IEnumerator Sink(this SinkingObstacle __self) => (System.Collections.IEnumerator)_Sink757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Carry
	{

		private static readonly System.Lazy<FieldAccessor<Carry, bool>> _allowCarry =
				new System.Lazy<FieldAccessor<Carry, bool>>(() => FieldAccessor<Carry, bool>.Create("allowCarry"));
		private static readonly System.Lazy<FieldAccessor<Carry, bool>> _allowDisplayText =
				new System.Lazy<FieldAccessor<Carry, bool>>(() => FieldAccessor<Carry, bool>.Create("allowDisplayText"));
		private static readonly System.Lazy<FieldAccessor<Carry, UnityEngine.Collider[]>> _colliders =
				new System.Lazy<FieldAccessor<Carry, UnityEngine.Collider[]>>(() => FieldAccessor<Carry, UnityEngine.Collider[]>.Create("colliders"));
		private static readonly System.Lazy<FieldAccessor<Carry, PlayerAnimation>> _carryAnimation =
				new System.Lazy<FieldAccessor<Carry, PlayerAnimation>>(() => FieldAccessor<Carry, PlayerAnimation>.Create("carryAnimation"));
		private static readonly System.Lazy<FieldAccessor<Carry, DisplayTextManager>> _textManager =
				new System.Lazy<FieldAccessor<Carry, DisplayTextManager>>(() => FieldAccessor<Carry, DisplayTextManager>.Create("textManager"));
		private static readonly System.Lazy<FieldAccessor<Carry, float>> _cooldownTimer =
				new System.Lazy<FieldAccessor<Carry, float>>(() => FieldAccessor<Carry, float>.Create("cooldownTimer"));
		private static readonly System.Lazy<FieldAccessor<Carry, Network_Player>> _localPlayer =
				new System.Lazy<FieldAccessor<Carry, Network_Player>>(() => FieldAccessor<Carry, Network_Player>.Create("localPlayer"));

		public static bool GetAllowCarry(this Carry __self) => _allowCarry.Value.GetValue(__self);
		public static void SetAllowCarry(this Carry __self, bool value) => _allowCarry.Value.SetValue(__self, value);
		public static bool GetAllowDisplayText(this Carry __self) => _allowDisplayText.Value.GetValue(__self);
		public static void SetAllowDisplayText(this Carry __self, bool value) => _allowDisplayText.Value.SetValue(__self, value);
		public static UnityEngine.Collider[] GetColliders(this Carry __self) => _colliders.Value.GetValue(__self);
		public static void SetColliders(this Carry __self, UnityEngine.Collider[] value) => _colliders.Value.SetValue(__self, value);
		public static PlayerAnimation GetCarryAnimation(this Carry __self) => _carryAnimation.Value.GetValue(__self);
		public static void SetCarryAnimation(this Carry __self, PlayerAnimation value) => _carryAnimation.Value.SetValue(__self, value);
		public static DisplayTextManager GetTextManager(this Carry __self) => _textManager.Value.GetValue(__self);
		public static void SetTextManager(this Carry __self, DisplayTextManager value) => _textManager.Value.SetValue(__self, value);
		public static float GetCooldownTimer(this Carry __self) => _cooldownTimer.Value.GetValue(__self);
		public static void SetCooldownTimer(this Carry __self, float value) => _cooldownTimer.Value.SetValue(__self, value);
		public static Network_Player GetLocalPlayer(this Carry __self) => _localPlayer.Value.GetValue(__self);
		public static void SetLocalPlayer(this Carry __self, Network_Player value) => _localPlayer.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Carry>> _Awake757602046 =
				new System.Lazy<MethodAccessor<Carry>>(() => MethodAccessor<Carry>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<Carry>> _Start757602046 =
				new System.Lazy<MethodAccessor<Carry>>(() => MethodAccessor<Carry>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<Carry>> _Update757602046 =
				new System.Lazy<MethodAccessor<Carry>>(() => MethodAccessor<Carry>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<Carry>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<Carry>>(() => MethodAccessor<Carry>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<Carry>> _OnWorldShift3429126434 =
				new System.Lazy<MethodAccessor<Carry>>(() => MethodAccessor<Carry>.Create("OnWorldShift", typeof(UnityEngine.Vector3)));
		private static readonly System.Lazy<MethodAccessor<Carry>> _HandleBeingCarried757602046 =
				new System.Lazy<MethodAccessor<Carry>>(() => MethodAccessor<Carry>.Create("HandleBeingCarried"));
		private static readonly System.Lazy<MethodAccessor<Carry>> _HandleCarryInput757602046 =
				new System.Lazy<MethodAccessor<Carry>>(() => MethodAccessor<Carry>.Create("HandleCarryInput"));
		private static readonly System.Lazy<MethodAccessor<Carry>> _ShowCarryText757602046 =
				new System.Lazy<MethodAccessor<Carry>>(() => MethodAccessor<Carry>.Create("ShowCarryText"));
		private static readonly System.Lazy<MethodAccessor<Carry>> _ShowStopCarryText757602046 =
				new System.Lazy<MethodAccessor<Carry>>(() => MethodAccessor<Carry>.Create("ShowStopCarryText"));
		private static readonly System.Lazy<MethodAccessor<Carry>> _ShouldDisplayDropText757602046 =
				new System.Lazy<MethodAccessor<Carry>>(() => MethodAccessor<Carry>.Create("ShouldDisplayDropText"));

		public static void Awake(this Carry __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this Carry __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this Carry __self) => _Update757602046.Value.Invoke(__self);
		public static void OnDestroy(this Carry __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void OnWorldShift(this Carry __self, UnityEngine.Vector3 shift) => _OnWorldShift3429126434.Value.Invoke(__self, shift);
		public static void HandleBeingCarried(this Carry __self) => _HandleBeingCarried757602046.Value.Invoke(__self);
		public static void HandleCarryInput(this Carry __self) => _HandleCarryInput757602046.Value.Invoke(__self);
		public static void ShowCarryText(this Carry __self) => _ShowCarryText757602046.Value.Invoke(__self);
		public static void ShowStopCarryText(this Carry __self) => _ShowStopCarryText757602046.Value.Invoke(__self);
		public static bool ShouldDisplayDropText(this Carry __self) => (bool)_ShouldDisplayDropText757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_CarryNetworked
	{

		private static readonly System.Lazy<FieldAccessor<CarryNetworked, UnityEngine.Transform>> _objectToParent =
				new System.Lazy<FieldAccessor<CarryNetworked, UnityEngine.Transform>>(() => FieldAccessor<CarryNetworked, UnityEngine.Transform>.Create("objectToParent"));
		private static readonly System.Lazy<FieldAccessor<CarryNetworked, AreaZone>> _zoneLimitation =
				new System.Lazy<FieldAccessor<CarryNetworked, AreaZone>>(() => FieldAccessor<CarryNetworked, AreaZone>.Create("zoneLimitation"));
		private static readonly System.Lazy<FieldAccessor<CarryNetworked, UnityEngine.Transform>> _respawnPoint =
				new System.Lazy<FieldAccessor<CarryNetworked, UnityEngine.Transform>>(() => FieldAccessor<CarryNetworked, UnityEngine.Transform>.Create("respawnPoint"));
		private static readonly System.Lazy<FieldAccessor<CarryNetworked, float>> _minValidDropAngle =
				new System.Lazy<FieldAccessor<CarryNetworked, float>>(() => FieldAccessor<CarryNetworked, float>.Create("minValidDropAngle"));
		private static readonly System.Lazy<FieldAccessor<CarryNetworked, UnityEngine.MeshRenderer>> _ghostOriginalRenderer =
				new System.Lazy<FieldAccessor<CarryNetworked, UnityEngine.MeshRenderer>>(() => FieldAccessor<CarryNetworked, UnityEngine.MeshRenderer>.Create("ghostOriginalRenderer"));
		private static readonly System.Lazy<FieldAccessor<CarryNetworked, UnityEngine.Renderer[]>> _shadowCasters =
				new System.Lazy<FieldAccessor<CarryNetworked, UnityEngine.Renderer[]>>(() => FieldAccessor<CarryNetworked, UnityEngine.Renderer[]>.Create("shadowCasters"));
		private static readonly System.Lazy<FieldAccessor<CarryNetworked, GizmoBox>> _occupyingGizmo =
				new System.Lazy<FieldAccessor<CarryNetworked, GizmoBox>>(() => FieldAccessor<CarryNetworked, GizmoBox>.Create("occupyingGizmo"));
		private static readonly System.Lazy<FieldAccessor<CarryNetworked, bool>> _changeScale =
				new System.Lazy<FieldAccessor<CarryNetworked, bool>>(() => FieldAccessor<CarryNetworked, bool>.Create("changeScale"));
		private static readonly System.Lazy<FieldAccessor<CarryNetworked, UnityEngine.Vector3>> _carryPosOffset =
				new System.Lazy<FieldAccessor<CarryNetworked, UnityEngine.Vector3>>(() => FieldAccessor<CarryNetworked, UnityEngine.Vector3>.Create("carryPosOffset"));
		private static readonly System.Lazy<FieldAccessor<CarryNetworked, UnityEngine.Vector3>> _carryRotOffset =
				new System.Lazy<FieldAccessor<CarryNetworked, UnityEngine.Vector3>>(() => FieldAccessor<CarryNetworked, UnityEngine.Vector3>.Create("carryRotOffset"));
		private static readonly System.Lazy<FieldAccessor<CarryNetworked, UnityEngine.Vector3>> _carryLocalScale =
				new System.Lazy<FieldAccessor<CarryNetworked, UnityEngine.Vector3>>(() => FieldAccessor<CarryNetworked, UnityEngine.Vector3>.Create("carryLocalScale"));
		private static readonly System.Lazy<FieldAccessor<CarryNetworked, UnityEngine.Vector3>> _thirdPcarryPosOffset =
				new System.Lazy<FieldAccessor<CarryNetworked, UnityEngine.Vector3>>(() => FieldAccessor<CarryNetworked, UnityEngine.Vector3>.Create("thirdPcarryPosOffset"));
		private static readonly System.Lazy<FieldAccessor<CarryNetworked, UnityEngine.Vector3>> _thirdPcarryRotOffset =
				new System.Lazy<FieldAccessor<CarryNetworked, UnityEngine.Vector3>>(() => FieldAccessor<CarryNetworked, UnityEngine.Vector3>.Create("thirdPcarryRotOffset"));
		private static readonly System.Lazy<FieldAccessor<CarryNetworked, UnityEngine.Vector3>> _thirdPcarryLocalScale =
				new System.Lazy<FieldAccessor<CarryNetworked, UnityEngine.Vector3>>(() => FieldAccessor<CarryNetworked, UnityEngine.Vector3>.Create("thirdPcarryLocalScale"));
		private static readonly System.Lazy<FieldAccessor<CarryNetworked, string>> _eventRef_startCarry =
				new System.Lazy<FieldAccessor<CarryNetworked, string>>(() => FieldAccessor<CarryNetworked, string>.Create("eventRef_startCarry"));
		private static readonly System.Lazy<FieldAccessor<CarryNetworked, string>> _eventRef_stopCarry =
				new System.Lazy<FieldAccessor<CarryNetworked, string>>(() => FieldAccessor<CarryNetworked, string>.Create("eventRef_stopCarry"));
		private static readonly System.Lazy<FieldAccessor<CarryNetworked, Raft_Network>> _network =
				new System.Lazy<FieldAccessor<CarryNetworked, Raft_Network>>(() => FieldAccessor<CarryNetworked, Raft_Network>.Create("network"));
		private static readonly System.Lazy<FieldAccessor<CarryNetworked, bool>> _hasBeenInitialized =
				new System.Lazy<FieldAccessor<CarryNetworked, bool>>(() => FieldAccessor<CarryNetworked, bool>.Create("hasBeenInitialized"));
		private static readonly System.Lazy<FieldAccessor<CarryNetworked, UnityEngine.Transform>> _currentGhost =
				new System.Lazy<FieldAccessor<CarryNetworked, UnityEngine.Transform>>(() => FieldAccessor<CarryNetworked, UnityEngine.Transform>.Create("currentGhost"));
		private static readonly System.Lazy<FieldAccessor<CarryNetworked, UnityEngine.Transform>> _startingParent =
				new System.Lazy<FieldAccessor<CarryNetworked, UnityEngine.Transform>>(() => FieldAccessor<CarryNetworked, UnityEngine.Transform>.Create("startingParent"));
		private static readonly System.Lazy<FieldAccessor<CarryNetworked, GizmoBox>> _currentGhostGizmo =
				new System.Lazy<FieldAccessor<CarryNetworked, GizmoBox>>(() => FieldAccessor<CarryNetworked, GizmoBox>.Create("currentGhostGizmo"));
		private static readonly System.Lazy<FieldAccessor<CarryNetworked, UnityEngine.Vector3>> _originalScale =
				new System.Lazy<FieldAccessor<CarryNetworked, UnityEngine.Vector3>>(() => FieldAccessor<CarryNetworked, UnityEngine.Vector3>.Create("originalScale"));

		public static UnityEngine.Transform GetObjectToParent(this CarryNetworked __self) => _objectToParent.Value.GetValue(__self);
		public static void SetObjectToParent(this CarryNetworked __self, UnityEngine.Transform value) => _objectToParent.Value.SetValue(__self, value);
		public static AreaZone GetZoneLimitation(this CarryNetworked __self) => _zoneLimitation.Value.GetValue(__self);
		public static void SetZoneLimitation(this CarryNetworked __self, AreaZone value) => _zoneLimitation.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetRespawnPoint(this CarryNetworked __self) => _respawnPoint.Value.GetValue(__self);
		public static void SetRespawnPoint(this CarryNetworked __self, UnityEngine.Transform value) => _respawnPoint.Value.SetValue(__self, value);
		public static float GetMinValidDropAngle(this CarryNetworked __self) => _minValidDropAngle.Value.GetValue(__self);
		public static void SetMinValidDropAngle(this CarryNetworked __self, float value) => _minValidDropAngle.Value.SetValue(__self, value);
		public static UnityEngine.MeshRenderer GetGhostOriginalRenderer(this CarryNetworked __self) => _ghostOriginalRenderer.Value.GetValue(__self);
		public static void SetGhostOriginalRenderer(this CarryNetworked __self, UnityEngine.MeshRenderer value) => _ghostOriginalRenderer.Value.SetValue(__self, value);
		public static UnityEngine.Renderer[] GetShadowCasters(this CarryNetworked __self) => _shadowCasters.Value.GetValue(__self);
		public static void SetShadowCasters(this CarryNetworked __self, UnityEngine.Renderer[] value) => _shadowCasters.Value.SetValue(__self, value);
		public static GizmoBox GetOccupyingGizmo(this CarryNetworked __self) => _occupyingGizmo.Value.GetValue(__self);
		public static void SetOccupyingGizmo(this CarryNetworked __self, GizmoBox value) => _occupyingGizmo.Value.SetValue(__self, value);
		public static bool GetChangeScale(this CarryNetworked __self) => _changeScale.Value.GetValue(__self);
		public static void SetChangeScale(this CarryNetworked __self, bool value) => _changeScale.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetCarryPosOffset(this CarryNetworked __self) => _carryPosOffset.Value.GetValue(__self);
		public static void SetCarryPosOffset(this CarryNetworked __self, UnityEngine.Vector3 value) => _carryPosOffset.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetCarryRotOffset(this CarryNetworked __self) => _carryRotOffset.Value.GetValue(__self);
		public static void SetCarryRotOffset(this CarryNetworked __self, UnityEngine.Vector3 value) => _carryRotOffset.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetCarryLocalScale(this CarryNetworked __self) => _carryLocalScale.Value.GetValue(__self);
		public static void SetCarryLocalScale(this CarryNetworked __self, UnityEngine.Vector3 value) => _carryLocalScale.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetThirdPcarryPosOffset(this CarryNetworked __self) => _thirdPcarryPosOffset.Value.GetValue(__self);
		public static void SetThirdPcarryPosOffset(this CarryNetworked __self, UnityEngine.Vector3 value) => _thirdPcarryPosOffset.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetThirdPcarryRotOffset(this CarryNetworked __self) => _thirdPcarryRotOffset.Value.GetValue(__self);
		public static void SetThirdPcarryRotOffset(this CarryNetworked __self, UnityEngine.Vector3 value) => _thirdPcarryRotOffset.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetThirdPcarryLocalScale(this CarryNetworked __self) => _thirdPcarryLocalScale.Value.GetValue(__self);
		public static void SetThirdPcarryLocalScale(this CarryNetworked __self, UnityEngine.Vector3 value) => _thirdPcarryLocalScale.Value.SetValue(__self, value);
		public static string GetEventRef_startCarry(this CarryNetworked __self) => _eventRef_startCarry.Value.GetValue(__self);
		public static void SetEventRef_startCarry(this CarryNetworked __self, string value) => _eventRef_startCarry.Value.SetValue(__self, value);
		public static string GetEventRef_stopCarry(this CarryNetworked __self) => _eventRef_stopCarry.Value.GetValue(__self);
		public static void SetEventRef_stopCarry(this CarryNetworked __self, string value) => _eventRef_stopCarry.Value.SetValue(__self, value);
		public static Raft_Network GetNetwork(this CarryNetworked __self) => _network.Value.GetValue(__self);
		public static void SetNetwork(this CarryNetworked __self, Raft_Network value) => _network.Value.SetValue(__self, value);
		public static bool GetHasBeenInitialized(this CarryNetworked __self) => _hasBeenInitialized.Value.GetValue(__self);
		public static void SetHasBeenInitialized(this CarryNetworked __self, bool value) => _hasBeenInitialized.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetCurrentGhost(this CarryNetworked __self) => _currentGhost.Value.GetValue(__self);
		public static void SetCurrentGhost(this CarryNetworked __self, UnityEngine.Transform value) => _currentGhost.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetStartingParent(this CarryNetworked __self) => _startingParent.Value.GetValue(__self);
		public static void SetStartingParent(this CarryNetworked __self, UnityEngine.Transform value) => _startingParent.Value.SetValue(__self, value);
		public static GizmoBox GetCurrentGhostGizmo(this CarryNetworked __self) => _currentGhostGizmo.Value.GetValue(__self);
		public static void SetCurrentGhostGizmo(this CarryNetworked __self, GizmoBox value) => _currentGhostGizmo.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetOriginalScale(this CarryNetworked __self) => _originalScale.Value.GetValue(__self);
		public static void SetOriginalScale(this CarryNetworked __self, UnityEngine.Vector3 value) => _originalScale.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<CarryNetworked>> _Start757602046 =
				new System.Lazy<MethodAccessor<CarryNetworked>>(() => MethodAccessor<CarryNetworked>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<CarryNetworked>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<CarryNetworked>>(() => MethodAccessor<CarryNetworked>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<CarryNetworked>> _Update757602046 =
				new System.Lazy<MethodAccessor<CarryNetworked>>(() => MethodAccessor<CarryNetworked>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<CarryNetworked>> _OnStartCarry3461878659 =
				new System.Lazy<MethodAccessor<CarryNetworked>>(() => MethodAccessor<CarryNetworked>.Create("OnStartCarry", typeof(Network_Player)));
		private static readonly System.Lazy<MethodAccessor<CarryNetworked>> _OnStopCarry3435821211 =
				new System.Lazy<MethodAccessor<CarryNetworked>>(() => MethodAccessor<CarryNetworked>.Create("OnStopCarry", typeof(Network_Player), typeof(bool)));
		private static readonly System.Lazy<MethodAccessor<CarryNetworked>> _HandleGhost757602046 =
				new System.Lazy<MethodAccessor<CarryNetworked>>(() => MethodAccessor<CarryNetworked>.Create("HandleGhost"));
		private static readonly System.Lazy<MethodAccessor<CarryNetworked>> _SetGhostRotation757602046 =
				new System.Lazy<MethodAccessor<CarryNetworked>>(() => MethodAccessor<CarryNetworked>.Create("SetGhostRotation"));
		private static readonly System.Lazy<MethodAccessor<CarryNetworked>> _GetNewGhostPosition3450040886 =
				new System.Lazy<MethodAccessor<CarryNetworked>>(() => MethodAccessor<CarryNetworked>.Create("GetNewGhostPosition", typeof(bool)));
		private static readonly System.Lazy<MethodAccessor<CarryNetworked>> _GetDropPosition3435821211 =
				new System.Lazy<MethodAccessor<CarryNetworked>>(() => MethodAccessor<CarryNetworked>.Create("GetDropPosition", typeof(Network_Player), typeof(bool)));
		private static readonly System.Lazy<MethodAccessor<CarryNetworked>> _StopCarry1695322039 =
				new System.Lazy<MethodAccessor<CarryNetworked>>(() => MethodAccessor<CarryNetworked>.Create("StopCarry", typeof(Network_Player), typeof(UnityEngine.Vector3)));
		private static readonly System.Lazy<MethodAccessor<CarryNetworked>> _SetStartCarriedOffsets3461878659 =
				new System.Lazy<MethodAccessor<CarryNetworked>>(() => MethodAccessor<CarryNetworked>.Create("SetStartCarriedOffsets", typeof(Network_Player)));
		private static readonly System.Lazy<MethodAccessor<CarryNetworked>> _SetStopCarriedOffsets3461878659 =
				new System.Lazy<MethodAccessor<CarryNetworked>>(() => MethodAccessor<CarryNetworked>.Create("SetStopCarriedOffsets", typeof(Network_Player)));
		private static readonly System.Lazy<MethodAccessor<CarryNetworked>> _ListenToCharacterPerspectiveChange3435821211 =
				new System.Lazy<MethodAccessor<CarryNetworked>>(() => MethodAccessor<CarryNetworked>.Create("ListenToCharacterPerspectiveChange", typeof(Network_Player), typeof(bool)));
		private static readonly System.Lazy<MethodAccessor<CarryNetworked>> _PlayOneShot1687501232 =
				new System.Lazy<MethodAccessor<CarryNetworked>>(() => MethodAccessor<CarryNetworked>.Create("PlayOneShot", typeof(string), typeof(UnityEngine.Vector3)));
		private static readonly System.Lazy<MethodAccessor<CarryNetworked>> _OnPerspectiveSwap3450040886 =
				new System.Lazy<MethodAccessor<CarryNetworked>>(() => MethodAccessor<CarryNetworked>.Create("OnPerspectiveSwap", typeof(bool)));
		private static readonly System.Lazy<MethodAccessor<CarryNetworked>> _AllowPlacement757602046 =
				new System.Lazy<MethodAccessor<CarryNetworked>>(() => MethodAccessor<CarryNetworked>.Create("AllowPlacement"));
		private static readonly System.Lazy<MethodAccessor<CarryNetworked>> _SetGhostActiveStatus3450040886 =
				new System.Lazy<MethodAccessor<CarryNetworked>>(() => MethodAccessor<CarryNetworked>.Create("SetGhostActiveStatus", typeof(bool)));
		private static readonly System.Lazy<MethodAccessor<CarryNetworked>> _SetShadowMode3450040886 =
				new System.Lazy<MethodAccessor<CarryNetworked>>(() => MethodAccessor<CarryNetworked>.Create("SetShadowMode", typeof(bool)));

		public static void Start(this CarryNetworked __self) => _Start757602046.Value.Invoke(__self);
		public static void OnDestroy(this CarryNetworked __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void Update(this CarryNetworked __self) => _Update757602046.Value.Invoke(__self);
		public static void OnStartCarry(this CarryNetworked __self, Network_Player player) => _OnStartCarry3461878659.Value.Invoke(__self, player);
		public static void OnStopCarry(this CarryNetworked __self, Network_Player player, bool force) => _OnStopCarry3435821211.Value.Invoke(__self, player, force);
		public static void HandleGhost(this CarryNetworked __self) => _HandleGhost757602046.Value.Invoke(__self);
		public static void SetGhostRotation(this CarryNetworked __self) => _SetGhostRotation757602046.Value.Invoke(__self);
		public static UnityEngine.Vector3 GetNewGhostPosition(this CarryNetworked __self, bool force) => (UnityEngine.Vector3)_GetNewGhostPosition3450040886.Value.Invoke(__self, force);
		public static UnityEngine.Vector3 GetDropPosition(this CarryNetworked __self, Network_Player player, bool force) => (UnityEngine.Vector3)_GetDropPosition3435821211.Value.Invoke(__self, player, force);
		public static bool StopCarry(this CarryNetworked __self, Network_Player player, UnityEngine.Vector3 position) => (bool)_StopCarry1695322039.Value.Invoke(__self, player, position);
		public static void SetStartCarriedOffsets(this CarryNetworked __self, Network_Player player) => _SetStartCarriedOffsets3461878659.Value.Invoke(__self, player);
		public static void SetStopCarriedOffsets(this CarryNetworked __self, Network_Player player) => _SetStopCarriedOffsets3461878659.Value.Invoke(__self, player);
		public static void ListenToCharacterPerspectiveChange(this CarryNetworked __self, Network_Player playerNetwork, bool value) => _ListenToCharacterPerspectiveChange3435821211.Value.Invoke(__self, playerNetwork, value);
		public static void PlayOneShot(this CarryNetworked __self, string eventRef, UnityEngine.Vector3 position) => _PlayOneShot1687501232.Value.Invoke(__self, eventRef, position);
		public static void OnPerspectiveSwap(this CarryNetworked __self, bool toThirdPerson) => _OnPerspectiveSwap3450040886.Value.Invoke(__self, toThirdPerson);
		public static bool AllowPlacement(this CarryNetworked __self) => (bool)_AllowPlacement757602046.Value.Invoke(__self);
		public static void SetGhostActiveStatus(this CarryNetworked __self, bool active) => _SetGhostActiveStatus3450040886.Value.Invoke(__self, active);
		public static void SetShadowMode(this CarryNetworked __self, bool castShadows) => _SetShadowMode3450040886.Value.Invoke(__self, castShadows);

	}

	public static class PrivateAccessor_CarryNetworked_InterestPoint
	{

		private static readonly System.Lazy<FieldAccessor<CarryNetworked_InterestPoint, System.Collections.Generic.List<ObjectOfInterestType>>> _validDropTypes =
				new System.Lazy<FieldAccessor<CarryNetworked_InterestPoint, System.Collections.Generic.List<ObjectOfInterestType>>>(() => FieldAccessor<CarryNetworked_InterestPoint, System.Collections.Generic.List<ObjectOfInterestType>>.Create("validDropTypes"));

		public static System.Collections.Generic.List<ObjectOfInterestType> GetValidDropTypes(this CarryNetworked_InterestPoint __self) => _validDropTypes.Value.GetValue(__self);
		public static void SetValidDropTypes(this CarryNetworked_InterestPoint __self, System.Collections.Generic.List<ObjectOfInterestType> value) => _validDropTypes.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<CarryNetworked_InterestPoint>> _OnStartCarry3461878659 =
				new System.Lazy<MethodAccessor<CarryNetworked_InterestPoint>>(() => MethodAccessor<CarryNetworked_InterestPoint>.Create("OnStartCarry", typeof(Network_Player)));
		private static readonly System.Lazy<MethodAccessor<CarryNetworked_InterestPoint>> _OnStopCarry3435821211 =
				new System.Lazy<MethodAccessor<CarryNetworked_InterestPoint>>(() => MethodAccessor<CarryNetworked_InterestPoint>.Create("OnStopCarry", typeof(Network_Player), typeof(bool)));
		private static readonly System.Lazy<MethodAccessor<CarryNetworked_InterestPoint>> _GetNewGhostPosition3450040886 =
				new System.Lazy<MethodAccessor<CarryNetworked_InterestPoint>>(() => MethodAccessor<CarryNetworked_InterestPoint>.Create("GetNewGhostPosition", typeof(bool)));
		private static readonly System.Lazy<MethodAccessor<CarryNetworked_InterestPoint>> _SetGhostRotation757602046 =
				new System.Lazy<MethodAccessor<CarryNetworked_InterestPoint>>(() => MethodAccessor<CarryNetworked_InterestPoint>.Create("SetGhostRotation"));
		private static readonly System.Lazy<MethodAccessor<CarryNetworked_InterestPoint>> _StopCarryInterest3731306806 =
				new System.Lazy<MethodAccessor<CarryNetworked_InterestPoint>>(() => MethodAccessor<CarryNetworked_InterestPoint>.Create("StopCarryInterest", typeof(Network_Player), typeof(ObjectOfInterestType)));
		private static readonly System.Lazy<MethodAccessor<CarryNetworked_InterestPoint>> _RaycastForInterestPoint757602046 =
				new System.Lazy<MethodAccessor<CarryNetworked_InterestPoint>>(() => MethodAccessor<CarryNetworked_InterestPoint>.Create("RaycastForInterestPoint"));

		public static void OnStartCarry(this CarryNetworked_InterestPoint __self, Network_Player player) => _OnStartCarry3461878659.Value.Invoke(__self, player);
		public static void OnStopCarry(this CarryNetworked_InterestPoint __self, Network_Player player, bool force) => _OnStopCarry3435821211.Value.Invoke(__self, player, force);
		public static UnityEngine.Vector3 GetNewGhostPosition(this CarryNetworked_InterestPoint __self, bool force) => (UnityEngine.Vector3)_GetNewGhostPosition3450040886.Value.Invoke(__self, force);
		public static void SetGhostRotation(this CarryNetworked_InterestPoint __self) => _SetGhostRotation757602046.Value.Invoke(__self);
		public static bool StopCarryInterest(this CarryNetworked_InterestPoint __self, Network_Player player, ObjectOfInterestType interestType) => (bool)_StopCarryInterest3731306806.Value.Invoke(__self, player, interestType);
		public static ObjectOfInterestTracker RaycastForInterestPoint(this CarryNetworked_InterestPoint __self) => (ObjectOfInterestTracker)_RaycastForInterestPoint757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_CarryNetworked_Stackable
	{

		private static readonly System.Lazy<FieldAccessor<CarryNetworked_Stackable, UnityEngine.Vector3>> _localStackOffset =
				new System.Lazy<FieldAccessor<CarryNetworked_Stackable, UnityEngine.Vector3>>(() => FieldAccessor<CarryNetworked_Stackable, UnityEngine.Vector3>.Create("localStackOffset"));
		private static readonly System.Lazy<FieldAccessor<CarryNetworked_Stackable, GizmoBox>> _occupyingGizmoBox =
				new System.Lazy<FieldAccessor<CarryNetworked_Stackable, GizmoBox>>(() => FieldAccessor<CarryNetworked_Stackable, GizmoBox>.Create("occupyingGizmoBox"));
		private static readonly System.Lazy<FieldAccessor<CarryNetworked_Stackable, UnityEngine.Collider>> _stackableCollider =
				new System.Lazy<FieldAccessor<CarryNetworked_Stackable, UnityEngine.Collider>>(() => FieldAccessor<CarryNetworked_Stackable, UnityEngine.Collider>.Create("stackableCollider"));
		private static readonly System.Lazy<FieldAccessor<CarryNetworked_Stackable, CarryNetworked_Stackable>> _aimedAtStackable =
				new System.Lazy<FieldAccessor<CarryNetworked_Stackable, CarryNetworked_Stackable>>(() => FieldAccessor<CarryNetworked_Stackable, CarryNetworked_Stackable>.Create("aimedAtStackable"));

		public static UnityEngine.Vector3 GetLocalStackOffset(this CarryNetworked_Stackable __self) => _localStackOffset.Value.GetValue(__self);
		public static void SetLocalStackOffset(this CarryNetworked_Stackable __self, UnityEngine.Vector3 value) => _localStackOffset.Value.SetValue(__self, value);
		public static GizmoBox GetOccupyingGizmoBox(this CarryNetworked_Stackable __self) => _occupyingGizmoBox.Value.GetValue(__self);
		public static void SetOccupyingGizmoBox(this CarryNetworked_Stackable __self, GizmoBox value) => _occupyingGizmoBox.Value.SetValue(__self, value);
		public static UnityEngine.Collider GetStackableCollider(this CarryNetworked_Stackable __self) => _stackableCollider.Value.GetValue(__self);
		public static void SetStackableCollider(this CarryNetworked_Stackable __self, UnityEngine.Collider value) => _stackableCollider.Value.SetValue(__self, value);
		public static CarryNetworked_Stackable GetAimedAtStackable(this CarryNetworked_Stackable __self) => _aimedAtStackable.Value.GetValue(__self);
		public static void SetAimedAtStackable(this CarryNetworked_Stackable __self, CarryNetworked_Stackable value) => _aimedAtStackable.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<CarryNetworked_Stackable>> _Start757602046 =
				new System.Lazy<MethodAccessor<CarryNetworked_Stackable>>(() => MethodAccessor<CarryNetworked_Stackable>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<CarryNetworked_Stackable>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<CarryNetworked_Stackable>>(() => MethodAccessor<CarryNetworked_Stackable>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<CarryNetworked_Stackable>> _OnLocalPlayerStartCarryObject3487946675 =
				new System.Lazy<MethodAccessor<CarryNetworked_Stackable>>(() => MethodAccessor<CarryNetworked_Stackable>.Create("OnLocalPlayerStartCarryObject", typeof(Carry)));
		private static readonly System.Lazy<MethodAccessor<CarryNetworked_Stackable>> _OnLocalPlayerStopCarryObject3487946675 =
				new System.Lazy<MethodAccessor<CarryNetworked_Stackable>>(() => MethodAccessor<CarryNetworked_Stackable>.Create("OnLocalPlayerStopCarryObject", typeof(Carry)));
		private static readonly System.Lazy<MethodAccessor<CarryNetworked_Stackable>> _OnStopCarry3435821211 =
				new System.Lazy<MethodAccessor<CarryNetworked_Stackable>>(() => MethodAccessor<CarryNetworked_Stackable>.Create("OnStopCarry", typeof(Network_Player), typeof(bool)));
		private static readonly System.Lazy<MethodAccessor<CarryNetworked_Stackable>> _GetNewGhostPosition3450040886 =
				new System.Lazy<MethodAccessor<CarryNetworked_Stackable>>(() => MethodAccessor<CarryNetworked_Stackable>.Create("GetNewGhostPosition", typeof(bool)));
		private static readonly System.Lazy<MethodAccessor<CarryNetworked_Stackable>> _SetGhostRotation757602046 =
				new System.Lazy<MethodAccessor<CarryNetworked_Stackable>>(() => MethodAccessor<CarryNetworked_Stackable>.Create("SetGhostRotation"));
		private static readonly System.Lazy<MethodAccessor<CarryNetworked_Stackable>> _StopCarryStack4247013020 =
				new System.Lazy<MethodAccessor<CarryNetworked_Stackable>>(() => MethodAccessor<CarryNetworked_Stackable>.Create("StopCarryStack", typeof(Network_Player), typeof(CarryNetworked)));
		private static readonly System.Lazy<MethodAccessor<CarryNetworked_Stackable>> _GetStackedObjectAboveStackableRecursive3487030998 =
				new System.Lazy<MethodAccessor<CarryNetworked_Stackable>>(() => MethodAccessor<CarryNetworked_Stackable>.Create("GetStackedObjectAboveStackableRecursive", typeof(CarryNetworked_Stackable)));
		private static readonly System.Lazy<MethodAccessor<CarryNetworked_Stackable>> _GetStackedObjectAboveStackable3487030998 =
				new System.Lazy<MethodAccessor<CarryNetworked_Stackable>>(() => MethodAccessor<CarryNetworked_Stackable>.Create("GetStackedObjectAboveStackable", typeof(CarryNetworked_Stackable)));
		private static readonly System.Lazy<MethodAccessor<CarryNetworked_Stackable>> _GetStackableAtCursor757602046 =
				new System.Lazy<MethodAccessor<CarryNetworked_Stackable>>(() => MethodAccessor<CarryNetworked_Stackable>.Create("GetStackableAtCursor"));

		public static void Start(this CarryNetworked_Stackable __self) => _Start757602046.Value.Invoke(__self);
		public static void OnDestroy(this CarryNetworked_Stackable __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void OnLocalPlayerStartCarryObject(this CarryNetworked_Stackable __self, Carry carryObject) => _OnLocalPlayerStartCarryObject3487946675.Value.Invoke(__self, carryObject);
		public static void OnLocalPlayerStopCarryObject(this CarryNetworked_Stackable __self, Carry carryObject) => _OnLocalPlayerStopCarryObject3487946675.Value.Invoke(__self, carryObject);
		public static void OnStopCarry(this CarryNetworked_Stackable __self, Network_Player player, bool force) => _OnStopCarry3435821211.Value.Invoke(__self, player, force);
		public static UnityEngine.Vector3 GetNewGhostPosition(this CarryNetworked_Stackable __self, bool force) => (UnityEngine.Vector3)_GetNewGhostPosition3450040886.Value.Invoke(__self, force);
		public static void SetGhostRotation(this CarryNetworked_Stackable __self) => _SetGhostRotation757602046.Value.Invoke(__self);
		public static bool StopCarryStack(this CarryNetworked_Stackable __self, Network_Player player, CarryNetworked other) => (bool)_StopCarryStack4247013020.Value.Invoke(__self, player, other);
		public static CarryNetworked_Stackable GetStackedObjectAboveStackableRecursive(this CarryNetworked_Stackable __self, CarryNetworked_Stackable stackable) => (CarryNetworked_Stackable)_GetStackedObjectAboveStackableRecursive3487030998.Value.Invoke(__self, stackable);
		public static CarryNetworked_Stackable GetStackedObjectAboveStackable(this CarryNetworked_Stackable __self, CarryNetworked_Stackable stackable) => (CarryNetworked_Stackable)_GetStackedObjectAboveStackable3487030998.Value.Invoke(__self, stackable);
		public static CarryNetworked_Stackable GetStackableAtCursor(this CarryNetworked_Stackable __self) => (CarryNetworked_Stackable)_GetStackableAtCursor757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Carry_InterestPoint
	{

		private static readonly System.Lazy<FieldAccessor<Carry_InterestPoint, CarryNetworked_InterestPoint>> _carryNetworkedInterest =
				new System.Lazy<FieldAccessor<Carry_InterestPoint, CarryNetworked_InterestPoint>>(() => FieldAccessor<Carry_InterestPoint, CarryNetworked_InterestPoint>.Create("carryNetworkedInterest"));

		public static CarryNetworked_InterestPoint GetCarryNetworkedInterest(this Carry_InterestPoint __self) => _carryNetworkedInterest.Value.GetValue(__self);
		public static void SetCarryNetworkedInterest(this Carry_InterestPoint __self, CarryNetworked_InterestPoint value) => _carryNetworkedInterest.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Carry_InterestPoint>> _ShowStopCarryText757602046 =
				new System.Lazy<MethodAccessor<Carry_InterestPoint>>(() => MethodAccessor<Carry_InterestPoint>.Create("ShowStopCarryText"));

		public static void ShowStopCarryText(this Carry_InterestPoint __self) => _ShowStopCarryText757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_CharacterUnlock
	{

		private static readonly System.Lazy<FieldAccessor<CharacterUnlock, QuestInteractable>> _questInteractable =
				new System.Lazy<FieldAccessor<CharacterUnlock, QuestInteractable>>(() => FieldAccessor<CharacterUnlock, QuestInteractable>.Create("questInteractable"));
		private static readonly System.Lazy<FieldAccessor<CharacterUnlock, float>> _questInteractDelay =
				new System.Lazy<FieldAccessor<CharacterUnlock, float>>(() => FieldAccessor<CharacterUnlock, float>.Create("questInteractDelay"));
		private static readonly System.Lazy<FieldAccessor<CharacterUnlock, SO_Character>> _characterToUnlock =
				new System.Lazy<FieldAccessor<CharacterUnlock, SO_Character>>(() => FieldAccessor<CharacterUnlock, SO_Character>.Create("characterToUnlock"));
		private static readonly System.Lazy<FieldAccessor<CharacterUnlock, Dialogue>> _dialogue =
				new System.Lazy<FieldAccessor<CharacterUnlock, Dialogue>>(() => FieldAccessor<CharacterUnlock, Dialogue>.Create("dialogue"));
		private static readonly System.Lazy<FieldAccessor<CharacterUnlock, UnityEngine.GameObject>> _replaySphere =
				new System.Lazy<FieldAccessor<CharacterUnlock, UnityEngine.GameObject>>(() => FieldAccessor<CharacterUnlock, UnityEngine.GameObject>.Create("replaySphere"));
		private static readonly System.Lazy<FieldAccessor<CharacterUnlock, UnityEngine.GameObject>> _characterModel =
				new System.Lazy<FieldAccessor<CharacterUnlock, UnityEngine.GameObject>>(() => FieldAccessor<CharacterUnlock, UnityEngine.GameObject>.Create("characterModel"));
		private static readonly System.Lazy<FieldAccessor<CharacterUnlock, UnityEngine.Animator>> _characterAnimator =
				new System.Lazy<FieldAccessor<CharacterUnlock, UnityEngine.Animator>>(() => FieldAccessor<CharacterUnlock, UnityEngine.Animator>.Create("characterAnimator"));
		private static readonly System.Lazy<FieldAccessor<CharacterUnlock, UnityEngine.Animator>> _objectAnimator =
				new System.Lazy<FieldAccessor<CharacterUnlock, UnityEngine.Animator>>(() => FieldAccessor<CharacterUnlock, UnityEngine.Animator>.Create("objectAnimator"));
		private static readonly System.Lazy<FieldAccessor<CharacterUnlock, float>> _objectAnimationDelay =
				new System.Lazy<FieldAccessor<CharacterUnlock, float>>(() => FieldAccessor<CharacterUnlock, float>.Create("objectAnimationDelay"));
		private static readonly System.Lazy<FieldAccessor<CharacterUnlock, float>> _fadeSpeed =
				new System.Lazy<FieldAccessor<CharacterUnlock, float>>(() => FieldAccessor<CharacterUnlock, float>.Create("fadeSpeed"));
		private static readonly System.Lazy<FieldAccessor<CharacterUnlock, float>> _startTalkingDelay =
				new System.Lazy<FieldAccessor<CharacterUnlock, float>>(() => FieldAccessor<CharacterUnlock, float>.Create("startTalkingDelay"));
		private static readonly System.Lazy<FieldAccessor<CharacterUnlock, float>> _endTalkingDelay =
				new System.Lazy<FieldAccessor<CharacterUnlock, float>>(() => FieldAccessor<CharacterUnlock, float>.Create("endTalkingDelay"));
		private static readonly System.Lazy<FieldAccessor<CharacterUnlock, UnityEngine.Renderer[]>> _defaultRenderers =
				new System.Lazy<FieldAccessor<CharacterUnlock, UnityEngine.Renderer[]>>(() => FieldAccessor<CharacterUnlock, UnityEngine.Renderer[]>.Create("defaultRenderers"));
		private static readonly System.Lazy<FieldAccessor<CharacterUnlock, UnityEngine.Renderer[]>> _dissolveRenderers =
				new System.Lazy<FieldAccessor<CharacterUnlock, UnityEngine.Renderer[]>>(() => FieldAccessor<CharacterUnlock, UnityEngine.Renderer[]>.Create("dissolveRenderers"));
		private static readonly System.Lazy<FieldAccessor<CharacterUnlock, HeadTrackingIK>> _headTrackingIK =
				new System.Lazy<FieldAccessor<CharacterUnlock, HeadTrackingIK>>(() => FieldAccessor<CharacterUnlock, HeadTrackingIK>.Create("headTrackingIK"));
		private static readonly System.Lazy<FieldAccessor<CharacterUnlock, FMODUnity.StudioEventEmitter>> _emitter_unlock =
				new System.Lazy<FieldAccessor<CharacterUnlock, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<CharacterUnlock, FMODUnity.StudioEventEmitter>.Create("emitter_unlock"));
		private static readonly System.Lazy<FieldAccessor<CharacterUnlock, bool>> _playBeforeObjectAnimationDelay =
				new System.Lazy<FieldAccessor<CharacterUnlock, bool>>(() => FieldAccessor<CharacterUnlock, bool>.Create("playBeforeObjectAnimationDelay"));
		private static readonly System.Lazy<FieldAccessor<CharacterUnlock, Raft_Network>> _network =
				new System.Lazy<FieldAccessor<CharacterUnlock, Raft_Network>>(() => FieldAccessor<CharacterUnlock, Raft_Network>.Create("network"));
		private static readonly System.Lazy<FieldAccessor<CharacterUnlock, DisplayTextManager>> _displayTextManager =
				new System.Lazy<FieldAccessor<CharacterUnlock, DisplayTextManager>>(() => FieldAccessor<CharacterUnlock, DisplayTextManager>.Create("displayTextManager"));
		private static readonly System.Lazy<FieldAccessor<CharacterUnlock, bool>> _unlocked =
				new System.Lazy<FieldAccessor<CharacterUnlock, bool>>(() => FieldAccessor<CharacterUnlock, bool>.Create("unlocked"));
		private static readonly System.Lazy<FieldAccessor<CharacterUnlock, UnityEngine.Coroutine>> _coroutine =
				new System.Lazy<FieldAccessor<CharacterUnlock, UnityEngine.Coroutine>>(() => FieldAccessor<CharacterUnlock, UnityEngine.Coroutine>.Create("coroutine"));
		private static readonly System.Lazy<FieldAccessor<CharacterUnlock, UnityEngine.MaterialPropertyBlock>> _mpb =
				new System.Lazy<FieldAccessor<CharacterUnlock, UnityEngine.MaterialPropertyBlock>>(() => FieldAccessor<CharacterUnlock, UnityEngine.MaterialPropertyBlock>.Create("mpb"));

		public static QuestInteractable GetQuestInteractable(this CharacterUnlock __self) => _questInteractable.Value.GetValue(__self);
		public static void SetQuestInteractable(this CharacterUnlock __self, QuestInteractable value) => _questInteractable.Value.SetValue(__self, value);
		public static float GetQuestInteractDelay(this CharacterUnlock __self) => _questInteractDelay.Value.GetValue(__self);
		public static void SetQuestInteractDelay(this CharacterUnlock __self, float value) => _questInteractDelay.Value.SetValue(__self, value);
		public static SO_Character GetCharacterToUnlock(this CharacterUnlock __self) => _characterToUnlock.Value.GetValue(__self);
		public static void SetCharacterToUnlock(this CharacterUnlock __self, SO_Character value) => _characterToUnlock.Value.SetValue(__self, value);
		public static Dialogue GetDialogue(this CharacterUnlock __self) => _dialogue.Value.GetValue(__self);
		public static void SetDialogue(this CharacterUnlock __self, Dialogue value) => _dialogue.Value.SetValue(__self, value);
		public static UnityEngine.GameObject GetReplaySphere(this CharacterUnlock __self) => _replaySphere.Value.GetValue(__self);
		public static void SetReplaySphere(this CharacterUnlock __self, UnityEngine.GameObject value) => _replaySphere.Value.SetValue(__self, value);
		public static UnityEngine.GameObject GetCharacterModel(this CharacterUnlock __self) => _characterModel.Value.GetValue(__self);
		public static void SetCharacterModel(this CharacterUnlock __self, UnityEngine.GameObject value) => _characterModel.Value.SetValue(__self, value);
		public static UnityEngine.Animator GetCharacterAnimator(this CharacterUnlock __self) => _characterAnimator.Value.GetValue(__self);
		public static void SetCharacterAnimator(this CharacterUnlock __self, UnityEngine.Animator value) => _characterAnimator.Value.SetValue(__self, value);
		public static UnityEngine.Animator GetObjectAnimator(this CharacterUnlock __self) => _objectAnimator.Value.GetValue(__self);
		public static void SetObjectAnimator(this CharacterUnlock __self, UnityEngine.Animator value) => _objectAnimator.Value.SetValue(__self, value);
		public static float GetObjectAnimationDelay(this CharacterUnlock __self) => _objectAnimationDelay.Value.GetValue(__self);
		public static void SetObjectAnimationDelay(this CharacterUnlock __self, float value) => _objectAnimationDelay.Value.SetValue(__self, value);
		public static float GetFadeSpeed(this CharacterUnlock __self) => _fadeSpeed.Value.GetValue(__self);
		public static void SetFadeSpeed(this CharacterUnlock __self, float value) => _fadeSpeed.Value.SetValue(__self, value);
		public static float GetStartTalkingDelay(this CharacterUnlock __self) => _startTalkingDelay.Value.GetValue(__self);
		public static void SetStartTalkingDelay(this CharacterUnlock __self, float value) => _startTalkingDelay.Value.SetValue(__self, value);
		public static float GetEndTalkingDelay(this CharacterUnlock __self) => _endTalkingDelay.Value.GetValue(__self);
		public static void SetEndTalkingDelay(this CharacterUnlock __self, float value) => _endTalkingDelay.Value.SetValue(__self, value);
		public static UnityEngine.Renderer[] GetDefaultRenderers(this CharacterUnlock __self) => _defaultRenderers.Value.GetValue(__self);
		public static void SetDefaultRenderers(this CharacterUnlock __self, UnityEngine.Renderer[] value) => _defaultRenderers.Value.SetValue(__self, value);
		public static UnityEngine.Renderer[] GetDissolveRenderers(this CharacterUnlock __self) => _dissolveRenderers.Value.GetValue(__self);
		public static void SetDissolveRenderers(this CharacterUnlock __self, UnityEngine.Renderer[] value) => _dissolveRenderers.Value.SetValue(__self, value);
		public static HeadTrackingIK GetHeadTrackingIK(this CharacterUnlock __self) => _headTrackingIK.Value.GetValue(__self);
		public static void SetHeadTrackingIK(this CharacterUnlock __self, HeadTrackingIK value) => _headTrackingIK.Value.SetValue(__self, value);
		public static FMODUnity.StudioEventEmitter GetEmitter_unlock(this CharacterUnlock __self) => _emitter_unlock.Value.GetValue(__self);
		public static void SetEmitter_unlock(this CharacterUnlock __self, FMODUnity.StudioEventEmitter value) => _emitter_unlock.Value.SetValue(__self, value);
		public static bool GetPlayBeforeObjectAnimationDelay(this CharacterUnlock __self) => _playBeforeObjectAnimationDelay.Value.GetValue(__self);
		public static void SetPlayBeforeObjectAnimationDelay(this CharacterUnlock __self, bool value) => _playBeforeObjectAnimationDelay.Value.SetValue(__self, value);
		public static Raft_Network GetNetwork(this CharacterUnlock __self) => _network.Value.GetValue(__self);
		public static void SetNetwork(this CharacterUnlock __self, Raft_Network value) => _network.Value.SetValue(__self, value);
		public static DisplayTextManager GetDisplayTextManager(this CharacterUnlock __self) => _displayTextManager.Value.GetValue(__self);
		public static void SetDisplayTextManager(this CharacterUnlock __self, DisplayTextManager value) => _displayTextManager.Value.SetValue(__self, value);
		public static bool GetUnlocked(this CharacterUnlock __self) => _unlocked.Value.GetValue(__self);
		public static void SetUnlocked(this CharacterUnlock __self, bool value) => _unlocked.Value.SetValue(__self, value);
		public static UnityEngine.Coroutine GetCoroutine(this CharacterUnlock __self) => _coroutine.Value.GetValue(__self);
		public static void SetCoroutine(this CharacterUnlock __self, UnityEngine.Coroutine value) => _coroutine.Value.SetValue(__self, value);
		public static UnityEngine.MaterialPropertyBlock GetMpb(this CharacterUnlock __self) => _mpb.Value.GetValue(__self);
		public static void SetMpb(this CharacterUnlock __self, UnityEngine.MaterialPropertyBlock value) => _mpb.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<CharacterUnlock>> _Start757602046 =
				new System.Lazy<MethodAccessor<CharacterUnlock>>(() => MethodAccessor<CharacterUnlock>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<CharacterUnlock>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<CharacterUnlock>>(() => MethodAccessor<CharacterUnlock>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<CharacterUnlock>> _OnQuestInteract3171859007 =
				new System.Lazy<MethodAccessor<CharacterUnlock>>(() => MethodAccessor<CharacterUnlock>.Create("OnQuestInteract", typeof(int), typeof(bool), typeof(Network_Player), typeof(bool)));
		private static readonly System.Lazy<MethodAccessor<CharacterUnlock>> _LateInteract757602046 =
				new System.Lazy<MethodAccessor<CharacterUnlock>>(() => MethodAccessor<CharacterUnlock>.Create("LateInteract"));
		private static readonly System.Lazy<MethodAccessor<CharacterUnlock>> _InteractNetworked757602046 =
				new System.Lazy<MethodAccessor<CharacterUnlock>>(() => MethodAccessor<CharacterUnlock>.Create("InteractNetworked"));
		private static readonly System.Lazy<MethodAccessor<CharacterUnlock>> _Interact3461878659 =
				new System.Lazy<MethodAccessor<CharacterUnlock>>(() => MethodAccessor<CharacterUnlock>.Create("Interact", typeof(Network_Player)));
		private static readonly System.Lazy<MethodAccessor<CharacterUnlock>> _Unlock2456177071 =
				new System.Lazy<MethodAccessor<CharacterUnlock>>(() => MethodAccessor<CharacterUnlock>.Create("Unlock", typeof(bool), typeof(Network_Player)));
		private static readonly System.Lazy<MethodAccessor<CharacterUnlock>> _SetDissolveMaterialActive3450040886 =
				new System.Lazy<MethodAccessor<CharacterUnlock>>(() => MethodAccessor<CharacterUnlock>.Create("SetDissolveMaterialActive", typeof(bool)));
		private static readonly System.Lazy<MethodAccessor<CharacterUnlock>> _FadeCharacter3460848027 =
				new System.Lazy<MethodAccessor<CharacterUnlock>>(() => MethodAccessor<CharacterUnlock>.Create("FadeCharacter", typeof(float), typeof(bool)));

		public static void Start(this CharacterUnlock __self) => _Start757602046.Value.Invoke(__self);
		public static void OnDestroy(this CharacterUnlock __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void OnQuestInteract(this CharacterUnlock __self, int objectStateIndex, bool atStart, Network_Player player, bool success) => _OnQuestInteract3171859007.Value.Invoke(__self, objectStateIndex, atStart, player, success);
		public static void LateInteract(this CharacterUnlock __self) => _LateInteract757602046.Value.Invoke(__self);
		public static void InteractNetworked(this CharacterUnlock __self) => _InteractNetworked757602046.Value.Invoke(__self);
		public static bool Interact(this CharacterUnlock __self, Network_Player interactor) => (bool)_Interact3461878659.Value.Invoke(__self, interactor);
		public static System.Collections.IEnumerator Unlock(this CharacterUnlock __self, bool restoring, Network_Player interactor) => (System.Collections.IEnumerator)_Unlock2456177071.Value.Invoke(__self, restoring, interactor);
		public static void SetDissolveMaterialActive(this CharacterUnlock __self, bool active) => _SetDissolveMaterialActive3450040886.Value.Invoke(__self, active);
		public static System.Collections.IEnumerator FadeCharacter(this CharacterUnlock __self, float time, bool visible) => (System.Collections.IEnumerator)_FadeCharacter3460848027.Value.Invoke(__self, time, visible);

	}

	public static class PrivateAccessor_Elevator
	{

		private static readonly System.Lazy<FieldAccessor<Elevator, float>> _timePerFloor =
				new System.Lazy<FieldAccessor<Elevator, float>>(() => FieldAccessor<Elevator, float>.Create("timePerFloor"));
		private static readonly System.Lazy<FieldAccessor<Elevator, UnityEngine.Transform>> _transformToMove =
				new System.Lazy<FieldAccessor<Elevator, UnityEngine.Transform>>(() => FieldAccessor<Elevator, UnityEngine.Transform>.Create("transformToMove"));
		private static readonly System.Lazy<FieldAccessor<Elevator, UnityEngine.Animator>> _insideDoor =
				new System.Lazy<FieldAccessor<Elevator, UnityEngine.Animator>>(() => FieldAccessor<Elevator, UnityEngine.Animator>.Create("insideDoor"));
		private static readonly System.Lazy<FieldAccessor<Elevator, ElevatorFloor[]>> _floors =
				new System.Lazy<FieldAccessor<Elevator, ElevatorFloor[]>>(() => FieldAccessor<Elevator, ElevatorFloor[]>.Create("floors"));
		private static readonly System.Lazy<FieldAccessor<Elevator, int>> _currentFloorIndex =
				new System.Lazy<FieldAccessor<Elevator, int>>(() => FieldAccessor<Elevator, int>.Create("currentFloorIndex"));
		private static readonly System.Lazy<FieldAccessor<Elevator, bool>> _moving =
				new System.Lazy<FieldAccessor<Elevator, bool>>(() => FieldAccessor<Elevator, bool>.Create("moving"));
		private static readonly System.Lazy<FieldAccessor<Elevator, StudioEventEmitterSustain>> _emitter_running =
				new System.Lazy<FieldAccessor<Elevator, StudioEventEmitterSustain>>(() => FieldAccessor<Elevator, StudioEventEmitterSustain>.Create("emitter_running"));
		private static readonly System.Lazy<FieldAccessor<Elevator, FMODUnity.StudioEventEmitter>> _emitter_doorOpen =
				new System.Lazy<FieldAccessor<Elevator, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<Elevator, FMODUnity.StudioEventEmitter>.Create("emitter_doorOpen"));
		private static readonly System.Lazy<FieldAccessor<Elevator, FMODUnity.StudioEventEmitter>> _emitter_doorClose =
				new System.Lazy<FieldAccessor<Elevator, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<Elevator, FMODUnity.StudioEventEmitter>.Create("emitter_doorClose"));
		private static readonly System.Lazy<FieldAccessor<Elevator, ElevatorFloorDisplay[]>> _floorDisplays =
				new System.Lazy<FieldAccessor<Elevator, ElevatorFloorDisplay[]>>(() => FieldAccessor<Elevator, ElevatorFloorDisplay[]>.Create("floorDisplays"));
		private static readonly System.Lazy<FieldAccessor<Elevator, UnityEngine.Coroutine>> _moveCoroutine =
				new System.Lazy<FieldAccessor<Elevator, UnityEngine.Coroutine>>(() => FieldAccessor<Elevator, UnityEngine.Coroutine>.Create("moveCoroutine"));
		private static readonly System.Lazy<FieldAccessor<Elevator, InteractableButton_Network_Forwarder>> _buttonForwarder =
				new System.Lazy<FieldAccessor<Elevator, InteractableButton_Network_Forwarder>>(() => FieldAccessor<Elevator, InteractableButton_Network_Forwarder>.Create("buttonForwarder"));

		public static float GetTimePerFloor(this Elevator __self) => _timePerFloor.Value.GetValue(__self);
		public static void SetTimePerFloor(this Elevator __self, float value) => _timePerFloor.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetTransformToMove(this Elevator __self) => _transformToMove.Value.GetValue(__self);
		public static void SetTransformToMove(this Elevator __self, UnityEngine.Transform value) => _transformToMove.Value.SetValue(__self, value);
		public static UnityEngine.Animator GetInsideDoor(this Elevator __self) => _insideDoor.Value.GetValue(__self);
		public static void SetInsideDoor(this Elevator __self, UnityEngine.Animator value) => _insideDoor.Value.SetValue(__self, value);
		public static ElevatorFloor[] GetFloors(this Elevator __self) => _floors.Value.GetValue(__self);
		public static void SetFloors(this Elevator __self, ElevatorFloor[] value) => _floors.Value.SetValue(__self, value);
		public static int GetCurrentFloorIndex(this Elevator __self) => _currentFloorIndex.Value.GetValue(__self);
		public static void SetCurrentFloorIndex(this Elevator __self, int value) => _currentFloorIndex.Value.SetValue(__self, value);
		public static bool GetMoving(this Elevator __self) => _moving.Value.GetValue(__self);
		public static void SetMoving(this Elevator __self, bool value) => _moving.Value.SetValue(__self, value);
		public static StudioEventEmitterSustain GetEmitter_running(this Elevator __self) => _emitter_running.Value.GetValue(__self);
		public static void SetEmitter_running(this Elevator __self, StudioEventEmitterSustain value) => _emitter_running.Value.SetValue(__self, value);
		public static FMODUnity.StudioEventEmitter GetEmitter_doorOpen(this Elevator __self) => _emitter_doorOpen.Value.GetValue(__self);
		public static void SetEmitter_doorOpen(this Elevator __self, FMODUnity.StudioEventEmitter value) => _emitter_doorOpen.Value.SetValue(__self, value);
		public static FMODUnity.StudioEventEmitter GetEmitter_doorClose(this Elevator __self) => _emitter_doorClose.Value.GetValue(__self);
		public static void SetEmitter_doorClose(this Elevator __self, FMODUnity.StudioEventEmitter value) => _emitter_doorClose.Value.SetValue(__self, value);
		public static ElevatorFloorDisplay[] GetFloorDisplays(this Elevator __self) => _floorDisplays.Value.GetValue(__self);
		public static void SetFloorDisplays(this Elevator __self, ElevatorFloorDisplay[] value) => _floorDisplays.Value.SetValue(__self, value);
		public static UnityEngine.Coroutine GetMoveCoroutine(this Elevator __self) => _moveCoroutine.Value.GetValue(__self);
		public static void SetMoveCoroutine(this Elevator __self, UnityEngine.Coroutine value) => _moveCoroutine.Value.SetValue(__self, value);
		public static InteractableButton_Network_Forwarder GetButtonForwarder(this Elevator __self) => _buttonForwarder.Value.GetValue(__self);
		public static void SetButtonForwarder(this Elevator __self, InteractableButton_Network_Forwarder value) => _buttonForwarder.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Elevator>> _OnEnable757602046 =
				new System.Lazy<MethodAccessor<Elevator>>(() => MethodAccessor<Elevator>.Create("OnEnable"));
		private static readonly System.Lazy<MethodAccessor<Elevator>> _Awake757602046 =
				new System.Lazy<MethodAccessor<Elevator>>(() => MethodAccessor<Elevator>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<Elevator>> _ButtonPress3486186818 =
				new System.Lazy<MethodAccessor<Elevator>>(() => MethodAccessor<Elevator>.Create("ButtonPress", typeof(int)));
		private static readonly System.Lazy<MethodAccessor<Elevator>> _CloseAllDoors3450040886 =
				new System.Lazy<MethodAccessor<Elevator>>(() => MethodAccessor<Elevator>.Create("CloseAllDoors", typeof(bool)));
		private static readonly System.Lazy<MethodAccessor<Elevator>> _MoveToFloorCoroutine3460129370 =
				new System.Lazy<MethodAccessor<Elevator>>(() => MethodAccessor<Elevator>.Create("MoveToFloorCoroutine", typeof(int), typeof(bool)));
		private static readonly System.Lazy<MethodAccessor<Elevator>> _GetLocalFloorPosition3486186818 =
				new System.Lazy<MethodAccessor<Elevator>>(() => MethodAccessor<Elevator>.Create("GetLocalFloorPosition", typeof(int)));
		private static readonly System.Lazy<MethodAccessor<Elevator>> _GetWorldFloorPosition3486186818 =
				new System.Lazy<MethodAccessor<Elevator>>(() => MethodAccessor<Elevator>.Create("GetWorldFloorPosition", typeof(int)));
		private static readonly System.Lazy<MethodAccessor<Elevator>> _IsFloorIndexValid3486186818 =
				new System.Lazy<MethodAccessor<Elevator>>(() => MethodAccessor<Elevator>.Create("IsFloorIndexValid", typeof(int)));
		private static readonly System.Lazy<MethodAccessor<Elevator>> _DisplayCurrentFloorNumber757602046 =
				new System.Lazy<MethodAccessor<Elevator>>(() => MethodAccessor<Elevator>.Create("DisplayCurrentFloorNumber"));
		private static readonly System.Lazy<MethodAccessor<Elevator>> _DisplayFloorNumber3486186818 =
				new System.Lazy<MethodAccessor<Elevator>>(() => MethodAccessor<Elevator>.Create("DisplayFloorNumber", typeof(int)));
		private static readonly System.Lazy<MethodAccessor<Elevator>> _TeleportElevatorToFloor3486186818 =
				new System.Lazy<MethodAccessor<Elevator>>(() => MethodAccessor<Elevator>.Create("TeleportElevatorToFloor", typeof(int)));
		private static readonly System.Lazy<MethodAccessor<Elevator>> _TeleportPlayersToFloor1215742486 =
				new System.Lazy<MethodAccessor<Elevator>>(() => MethodAccessor<Elevator>.Create("TeleportPlayersToFloor", typeof(int), typeof(int)));
		private static readonly System.Lazy<MethodAccessor<Elevator>> _TeleportItemsToFloor1215742486 =
				new System.Lazy<MethodAccessor<Elevator>>(() => MethodAccessor<Elevator>.Create("TeleportItemsToFloor", typeof(int), typeof(int)));
		private static readonly System.Lazy<MethodAccessor<Elevator>> _TeleportCarriables1215742486 =
				new System.Lazy<MethodAccessor<Elevator>>(() => MethodAccessor<Elevator>.Create("TeleportCarriables", typeof(int), typeof(int)));
		private static readonly System.Lazy<MethodAccessor<Elevator>> _OpenDoorAtCurrentFloor3450040886 =
				new System.Lazy<MethodAccessor<Elevator>>(() => MethodAccessor<Elevator>.Create("OpenDoorAtCurrentFloor", typeof(bool)));

		public static void OnEnable(this Elevator __self) => _OnEnable757602046.Value.Invoke(__self);
		public static void Awake(this Elevator __self) => _Awake757602046.Value.Invoke(__self);
		public static bool ButtonPress(this Elevator __self, int buttonIndex) => (bool)_ButtonPress3486186818.Value.Invoke(__self, buttonIndex);
		public static void CloseAllDoors(this Elevator __self, bool playSound) => _CloseAllDoors3450040886.Value.Invoke(__self, playSound);
		public static System.Collections.IEnumerator MoveToFloorCoroutine(this Elevator __self, int floorIndex, bool instant) => (System.Collections.IEnumerator)_MoveToFloorCoroutine3460129370.Value.Invoke(__self, floorIndex, instant);
		public static UnityEngine.Vector3 GetLocalFloorPosition(this Elevator __self, int floorIndex) => (UnityEngine.Vector3)_GetLocalFloorPosition3486186818.Value.Invoke(__self, floorIndex);
		public static UnityEngine.Vector3 GetWorldFloorPosition(this Elevator __self, int floorIndex) => (UnityEngine.Vector3)_GetWorldFloorPosition3486186818.Value.Invoke(__self, floorIndex);
		public static bool IsFloorIndexValid(this Elevator __self, int floorIndex) => (bool)_IsFloorIndexValid3486186818.Value.Invoke(__self, floorIndex);
		public static void DisplayCurrentFloorNumber(this Elevator __self) => _DisplayCurrentFloorNumber757602046.Value.Invoke(__self);
		public static void DisplayFloorNumber(this Elevator __self, int displayNumber) => _DisplayFloorNumber3486186818.Value.Invoke(__self, displayNumber);
		public static void TeleportElevatorToFloor(this Elevator __self, int floorIndex) => _TeleportElevatorToFloor3486186818.Value.Invoke(__self, floorIndex);
		public static void TeleportPlayersToFloor(this Elevator __self, int startFloorIndex, int endFloorIndex) => _TeleportPlayersToFloor1215742486.Value.Invoke(__self, startFloorIndex, endFloorIndex);
		public static void TeleportItemsToFloor(this Elevator __self, int startFloorIndex, int endFloorIndex) => _TeleportItemsToFloor1215742486.Value.Invoke(__self, startFloorIndex, endFloorIndex);
		public static void TeleportCarriables(this Elevator __self, int startFloorIndex, int endFloorIndex) => _TeleportCarriables1215742486.Value.Invoke(__self, startFloorIndex, endFloorIndex);
		public static void OpenDoorAtCurrentFloor(this Elevator __self, bool playSound) => _OpenDoorAtCurrentFloor3450040886.Value.Invoke(__self, playSound);

	}

	public static class PrivateAccessor_RGD_Elevator
	{

		private static readonly System.Lazy<MethodAccessor<RGD_Elevator>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_Elevator>>(() => MethodAccessor<RGD_Elevator>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_Elevator __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_ElevatorFloor
	{

		private static readonly System.Lazy<FieldAccessor<ElevatorFloor, UnityEngine.Animator>> _doorAnimator =
				new System.Lazy<FieldAccessor<ElevatorFloor, UnityEngine.Animator>>(() => FieldAccessor<ElevatorFloor, UnityEngine.Animator>.Create("doorAnimator"));

		public static UnityEngine.Animator GetDoorAnimator(this ElevatorFloor __self) => _doorAnimator.Value.GetValue(__self);
		public static void SetDoorAnimator(this ElevatorFloor __self, UnityEngine.Animator value) => _doorAnimator.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_ElevatorFloorDisplay
	{

		private static readonly System.Lazy<FieldAccessor<ElevatorFloorDisplay, TMPro.TextMeshPro>> _display =
				new System.Lazy<FieldAccessor<ElevatorFloorDisplay, TMPro.TextMeshPro>>(() => FieldAccessor<ElevatorFloorDisplay, TMPro.TextMeshPro>.Create("display"));

		public static TMPro.TextMeshPro GetDisplay(this ElevatorFloorDisplay __self) => _display.Value.GetValue(__self);
		public static void SetDisplay(this ElevatorFloorDisplay __self, TMPro.TextMeshPro value) => _display.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_FrequencyTextMeshPro
	{

		private static readonly System.Lazy<FieldAccessor<FrequencyTextMeshPro, ChunkPointType>> _frequencyType =
				new System.Lazy<FieldAccessor<FrequencyTextMeshPro, ChunkPointType>>(() => FieldAccessor<FrequencyTextMeshPro, ChunkPointType>.Create("frequencyType"));
		private static readonly System.Lazy<FieldAccessor<FrequencyTextMeshPro, TMPro.TextMeshPro>> _frequencyText =
				new System.Lazy<FieldAccessor<FrequencyTextMeshPro, TMPro.TextMeshPro>>(() => FieldAccessor<FrequencyTextMeshPro, TMPro.TextMeshPro>.Create("frequencyText"));

		public static ChunkPointType GetFrequencyType(this FrequencyTextMeshPro __self) => _frequencyType.Value.GetValue(__self);
		public static void SetFrequencyType(this FrequencyTextMeshPro __self, ChunkPointType value) => _frequencyType.Value.SetValue(__self, value);
		public static TMPro.TextMeshPro GetFrequencyText(this FrequencyTextMeshPro __self) => _frequencyText.Value.GetValue(__self);
		public static void SetFrequencyText(this FrequencyTextMeshPro __self, TMPro.TextMeshPro value) => _frequencyText.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<FrequencyTextMeshPro>> _Start757602046 =
				new System.Lazy<MethodAccessor<FrequencyTextMeshPro>>(() => MethodAccessor<FrequencyTextMeshPro>.Create("Start"));

		public static void Start(this FrequencyTextMeshPro __self) => _Start757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_FrequencyTextMeshProUI
	{

		private static readonly System.Lazy<FieldAccessor<FrequencyTextMeshProUI, TMPro.TextMeshProUGUI>> _frequencyText =
				new System.Lazy<FieldAccessor<FrequencyTextMeshProUI, TMPro.TextMeshProUGUI>>(() => FieldAccessor<FrequencyTextMeshProUI, TMPro.TextMeshProUGUI>.Create("frequencyText"));

		public static TMPro.TextMeshProUGUI GetFrequencyText(this FrequencyTextMeshProUI __self) => _frequencyText.Value.GetValue(__self);
		public static void SetFrequencyText(this FrequencyTextMeshProUI __self, TMPro.TextMeshProUGUI value) => _frequencyText.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<FrequencyTextMeshProUI>> _Start757602046 =
				new System.Lazy<MethodAccessor<FrequencyTextMeshProUI>>(() => MethodAccessor<FrequencyTextMeshProUI>.Create("Start"));

		public static void Start(this FrequencyTextMeshProUI __self) => _Start757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Keypad
	{

		private static readonly System.Lazy<FieldAccessor<Keypad, string>> _correctString =
				new System.Lazy<FieldAccessor<Keypad, string>>(() => FieldAccessor<Keypad, string>.Create("correctString"));
		private static readonly System.Lazy<FieldAccessor<Keypad, TMPro.TextMeshPro>> _codeTextMesh =
				new System.Lazy<FieldAccessor<Keypad, TMPro.TextMeshPro>>(() => FieldAccessor<Keypad, TMPro.TextMeshPro>.Create("codeTextMesh"));
		private static readonly System.Lazy<FieldAccessor<Keypad, float>> _displayFeedbackTime =
				new System.Lazy<FieldAccessor<Keypad, float>>(() => FieldAccessor<Keypad, float>.Create("displayFeedbackTime"));
		private static readonly System.Lazy<FieldAccessor<Keypad, UnityEngine.Color>> _normalColor =
				new System.Lazy<FieldAccessor<Keypad, UnityEngine.Color>>(() => FieldAccessor<Keypad, UnityEngine.Color>.Create("normalColor"));
		private static readonly System.Lazy<FieldAccessor<Keypad, UnityEngine.Color>> _successColor =
				new System.Lazy<FieldAccessor<Keypad, UnityEngine.Color>>(() => FieldAccessor<Keypad, UnityEngine.Color>.Create("successColor"));
		private static readonly System.Lazy<FieldAccessor<Keypad, UnityEngine.Color>> _errorColor =
				new System.Lazy<FieldAccessor<Keypad, UnityEngine.Color>>(() => FieldAccessor<Keypad, UnityEngine.Color>.Create("errorColor"));
		private static readonly System.Lazy<FieldAccessor<Keypad, UnityEngine.GameObject>> _sucessLamp =
				new System.Lazy<FieldAccessor<Keypad, UnityEngine.GameObject>>(() => FieldAccessor<Keypad, UnityEngine.GameObject>.Create("sucessLamp"));
		private static readonly System.Lazy<FieldAccessor<Keypad, UnityEngine.GameObject>> _failureLamp =
				new System.Lazy<FieldAccessor<Keypad, UnityEngine.GameObject>>(() => FieldAccessor<Keypad, UnityEngine.GameObject>.Create("failureLamp"));
		private static readonly System.Lazy<FieldAccessor<Keypad, System.String[]>> _buttonIndexToString =
				new System.Lazy<FieldAccessor<Keypad, System.String[]>>(() => FieldAccessor<Keypad, System.String[]>.Create("buttonIndexToString"));
		private static readonly System.Lazy<FieldAccessor<Keypad, string>> _successTerm =
				new System.Lazy<FieldAccessor<Keypad, string>>(() => FieldAccessor<Keypad, string>.Create("successTerm"));
		private static readonly System.Lazy<FieldAccessor<Keypad, string>> _errorTerm =
				new System.Lazy<FieldAccessor<Keypad, string>>(() => FieldAccessor<Keypad, string>.Create("errorTerm"));
		private static readonly System.Lazy<FieldAccessor<Keypad, string>> _eventRef_success =
				new System.Lazy<FieldAccessor<Keypad, string>>(() => FieldAccessor<Keypad, string>.Create("eventRef_success"));
		private static readonly System.Lazy<FieldAccessor<Keypad, string>> _eventRef_failure =
				new System.Lazy<FieldAccessor<Keypad, string>>(() => FieldAccessor<Keypad, string>.Create("eventRef_failure"));
		private static readonly System.Lazy<FieldAccessor<Keypad, Raft_Network>> _network =
				new System.Lazy<FieldAccessor<Keypad, Raft_Network>>(() => FieldAccessor<Keypad, Raft_Network>.Create("network"));
		private static readonly System.Lazy<FieldAccessor<Keypad, InteractableButton_Network_Forwarder>> _buttonForwarder =
				new System.Lazy<FieldAccessor<Keypad, InteractableButton_Network_Forwarder>>(() => FieldAccessor<Keypad, InteractableButton_Network_Forwarder>.Create("buttonForwarder"));
		private static readonly System.Lazy<FieldAccessor<Keypad, UnityEngine.Coroutine>> _displayFeedbackRoutine =
				new System.Lazy<FieldAccessor<Keypad, UnityEngine.Coroutine>>(() => FieldAccessor<Keypad, UnityEngine.Coroutine>.Create("displayFeedbackRoutine"));
		private static readonly System.Lazy<FieldAccessor<Keypad, bool>> _canInteractWithKeyPad =
				new System.Lazy<FieldAccessor<Keypad, bool>>(() => FieldAccessor<Keypad, bool>.Create("canInteractWithKeyPad"));
		private static readonly System.Lazy<FieldAccessor<Keypad, bool>> _displayingFeedback =
				new System.Lazy<FieldAccessor<Keypad, bool>>(() => FieldAccessor<Keypad, bool>.Create("displayingFeedback"));

		public static string GetCorrectString(this Keypad __self) => _correctString.Value.GetValue(__self);
		public static void SetCorrectString(this Keypad __self, string value) => _correctString.Value.SetValue(__self, value);
		public static TMPro.TextMeshPro GetCodeTextMesh(this Keypad __self) => _codeTextMesh.Value.GetValue(__self);
		public static void SetCodeTextMesh(this Keypad __self, TMPro.TextMeshPro value) => _codeTextMesh.Value.SetValue(__self, value);
		public static float GetDisplayFeedbackTime(this Keypad __self) => _displayFeedbackTime.Value.GetValue(__self);
		public static void SetDisplayFeedbackTime(this Keypad __self, float value) => _displayFeedbackTime.Value.SetValue(__self, value);
		public static UnityEngine.Color GetNormalColor(this Keypad __self) => _normalColor.Value.GetValue(__self);
		public static void SetNormalColor(this Keypad __self, UnityEngine.Color value) => _normalColor.Value.SetValue(__self, value);
		public static UnityEngine.Color GetSuccessColor(this Keypad __self) => _successColor.Value.GetValue(__self);
		public static void SetSuccessColor(this Keypad __self, UnityEngine.Color value) => _successColor.Value.SetValue(__self, value);
		public static UnityEngine.Color GetErrorColor(this Keypad __self) => _errorColor.Value.GetValue(__self);
		public static void SetErrorColor(this Keypad __self, UnityEngine.Color value) => _errorColor.Value.SetValue(__self, value);
		public static UnityEngine.GameObject GetSucessLamp(this Keypad __self) => _sucessLamp.Value.GetValue(__self);
		public static void SetSucessLamp(this Keypad __self, UnityEngine.GameObject value) => _sucessLamp.Value.SetValue(__self, value);
		public static UnityEngine.GameObject GetFailureLamp(this Keypad __self) => _failureLamp.Value.GetValue(__self);
		public static void SetFailureLamp(this Keypad __self, UnityEngine.GameObject value) => _failureLamp.Value.SetValue(__self, value);
		public static System.String[] GetButtonIndexToString(this Keypad __self) => _buttonIndexToString.Value.GetValue(__self);
		public static void SetButtonIndexToString(this Keypad __self, System.String[] value) => _buttonIndexToString.Value.SetValue(__self, value);
		public static string GetSuccessTerm(this Keypad __self) => _successTerm.Value.GetValue(__self);
		public static void SetSuccessTerm(this Keypad __self, string value) => _successTerm.Value.SetValue(__self, value);
		public static string GetErrorTerm(this Keypad __self) => _errorTerm.Value.GetValue(__self);
		public static void SetErrorTerm(this Keypad __self, string value) => _errorTerm.Value.SetValue(__self, value);
		public static string GetEventRef_success(this Keypad __self) => _eventRef_success.Value.GetValue(__self);
		public static void SetEventRef_success(this Keypad __self, string value) => _eventRef_success.Value.SetValue(__self, value);
		public static string GetEventRef_failure(this Keypad __self) => _eventRef_failure.Value.GetValue(__self);
		public static void SetEventRef_failure(this Keypad __self, string value) => _eventRef_failure.Value.SetValue(__self, value);
		public static Raft_Network GetNetwork(this Keypad __self) => _network.Value.GetValue(__self);
		public static void SetNetwork(this Keypad __self, Raft_Network value) => _network.Value.SetValue(__self, value);
		public static InteractableButton_Network_Forwarder GetButtonForwarder(this Keypad __self) => _buttonForwarder.Value.GetValue(__self);
		public static void SetButtonForwarder(this Keypad __self, InteractableButton_Network_Forwarder value) => _buttonForwarder.Value.SetValue(__self, value);
		public static UnityEngine.Coroutine GetDisplayFeedbackRoutine(this Keypad __self) => _displayFeedbackRoutine.Value.GetValue(__self);
		public static void SetDisplayFeedbackRoutine(this Keypad __self, UnityEngine.Coroutine value) => _displayFeedbackRoutine.Value.SetValue(__self, value);
		public static bool GetCanInteractWithKeyPad(this Keypad __self) => _canInteractWithKeyPad.Value.GetValue(__self);
		public static void SetCanInteractWithKeyPad(this Keypad __self, bool value) => _canInteractWithKeyPad.Value.SetValue(__self, value);
		public static bool GetDisplayingFeedback(this Keypad __self) => _displayingFeedback.Value.GetValue(__self);
		public static void SetDisplayingFeedback(this Keypad __self, bool value) => _displayingFeedback.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Keypad>> _Awake757602046 =
				new System.Lazy<MethodAccessor<Keypad>>(() => MethodAccessor<Keypad>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<Keypad>> _Start757602046 =
				new System.Lazy<MethodAccessor<Keypad>>(() => MethodAccessor<Keypad>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<Keypad>> _ButtonPress3486186818 =
				new System.Lazy<MethodAccessor<Keypad>>(() => MethodAccessor<Keypad>.Create("ButtonPress", typeof(int)));
		private static readonly System.Lazy<MethodAccessor<Keypad>> _IsKeypadCodeComplete3454057852 =
				new System.Lazy<MethodAccessor<Keypad>>(() => MethodAccessor<Keypad>.Create("IsKeypadCodeComplete", typeof(string)));
		private static readonly System.Lazy<MethodAccessor<Keypad>> _StartDisplayingFeedback3450040886 =
				new System.Lazy<MethodAccessor<Keypad>>(() => MethodAccessor<Keypad>.Create("StartDisplayingFeedback", typeof(bool)));
		private static readonly System.Lazy<MethodAccessor<Keypad>> _DisplayFeedback3450040886 =
				new System.Lazy<MethodAccessor<Keypad>>(() => MethodAccessor<Keypad>.Create("DisplayFeedback", typeof(bool)));
		private static readonly System.Lazy<MethodAccessor<Keypad>> _GetStringFromButtonIndex3486186818 =
				new System.Lazy<MethodAccessor<Keypad>>(() => MethodAccessor<Keypad>.Create("GetStringFromButtonIndex", typeof(int)));

		public static void Awake(this Keypad __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this Keypad __self) => _Start757602046.Value.Invoke(__self);
		public static bool ButtonPress(this Keypad __self, int buttonIndex) => (bool)_ButtonPress3486186818.Value.Invoke(__self, buttonIndex);
		public static bool IsKeypadCodeComplete(this Keypad __self, string currentCode) => (bool)_IsKeypadCodeComplete3454057852.Value.Invoke(__self, currentCode);
		public static void StartDisplayingFeedback(this Keypad __self, bool codeComplete) => _StartDisplayingFeedback3450040886.Value.Invoke(__self, codeComplete);
		public static System.Collections.IEnumerator DisplayFeedback(this Keypad __self, bool codeComplete) => (System.Collections.IEnumerator)_DisplayFeedback3450040886.Value.Invoke(__self, codeComplete);
		public static string GetStringFromButtonIndex(this Keypad __self, int buttonIndex) => (string)_GetStringFromButtonIndex3486186818.Value.Invoke(__self, buttonIndex);

	}

	public static class PrivateAccessor_RGD_Keypad
	{

		private static readonly System.Lazy<MethodAccessor<RGD_Keypad>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_Keypad>>(() => MethodAccessor<RGD_Keypad>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_Keypad __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_KeypadCompleteInteractQuest
	{

		private static readonly System.Lazy<FieldAccessor<KeypadCompleteInteractQuest, Keypad>> _connectedKeypad =
				new System.Lazy<FieldAccessor<KeypadCompleteInteractQuest, Keypad>>(() => FieldAccessor<KeypadCompleteInteractQuest, Keypad>.Create("connectedKeypad"));
		private static readonly System.Lazy<FieldAccessor<KeypadCompleteInteractQuest, QuestEventBase>> _questEventBase =
				new System.Lazy<FieldAccessor<KeypadCompleteInteractQuest, QuestEventBase>>(() => FieldAccessor<KeypadCompleteInteractQuest, QuestEventBase>.Create("questEventBase"));

		public static Keypad GetConnectedKeypad(this KeypadCompleteInteractQuest __self) => _connectedKeypad.Value.GetValue(__self);
		public static void SetConnectedKeypad(this KeypadCompleteInteractQuest __self, Keypad value) => _connectedKeypad.Value.SetValue(__self, value);
		public static QuestEventBase GetQuestEventBase(this KeypadCompleteInteractQuest __self) => _questEventBase.Value.GetValue(__self);
		public static void SetQuestEventBase(this KeypadCompleteInteractQuest __self, QuestEventBase value) => _questEventBase.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<KeypadCompleteInteractQuest>> _Start757602046 =
				new System.Lazy<MethodAccessor<KeypadCompleteInteractQuest>>(() => MethodAccessor<KeypadCompleteInteractQuest>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<KeypadCompleteInteractQuest>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<KeypadCompleteInteractQuest>>(() => MethodAccessor<KeypadCompleteInteractQuest>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<KeypadCompleteInteractQuest>> _OnKeypadComplete757602046 =
				new System.Lazy<MethodAccessor<KeypadCompleteInteractQuest>>(() => MethodAccessor<KeypadCompleteInteractQuest>.Create("OnKeypadComplete"));

		public static void Start(this KeypadCompleteInteractQuest __self) => _Start757602046.Value.Invoke(__self);
		public static void OnDestroy(this KeypadCompleteInteractQuest __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void OnKeypadComplete(this KeypadCompleteInteractQuest __self) => _OnKeypadComplete757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_ClawChallenge
	{

		private static readonly System.Lazy<FieldAccessor<ClawChallenge, float>> _clawMoveXZTime =
				new System.Lazy<FieldAccessor<ClawChallenge, float>>(() => FieldAccessor<ClawChallenge, float>.Create("clawMoveXZTime"));
		private static readonly System.Lazy<FieldAccessor<ClawChallenge, float>> _clawMoveYTime =
				new System.Lazy<FieldAccessor<ClawChallenge, float>>(() => FieldAccessor<ClawChallenge, float>.Create("clawMoveYTime"));
		private static readonly System.Lazy<FieldAccessor<ClawChallenge, float>> _slotSize =
				new System.Lazy<FieldAccessor<ClawChallenge, float>>(() => FieldAccessor<ClawChallenge, float>.Create("slotSize"));
		private static readonly System.Lazy<FieldAccessor<ClawChallenge, float>> _startLocalYPosition =
				new System.Lazy<FieldAccessor<ClawChallenge, float>>(() => FieldAccessor<ClawChallenge, float>.Create("startLocalYPosition"));
		private static readonly System.Lazy<FieldAccessor<ClawChallenge, float>> _clawGoDownDistance =
				new System.Lazy<FieldAccessor<ClawChallenge, float>>(() => FieldAccessor<ClawChallenge, float>.Create("clawGoDownDistance"));
		private static readonly System.Lazy<FieldAccessor<ClawChallenge, float>> _clawLiftDistance =
				new System.Lazy<FieldAccessor<ClawChallenge, float>>(() => FieldAccessor<ClawChallenge, float>.Create("clawLiftDistance"));
		private static readonly System.Lazy<FieldAccessor<ClawChallenge, UnityEngine.Vector2Int>> _startSlotIndex =
				new System.Lazy<FieldAccessor<ClawChallenge, UnityEngine.Vector2Int>>(() => FieldAccessor<ClawChallenge, UnityEngine.Vector2Int>.Create("startSlotIndex"));
		private static readonly System.Lazy<FieldAccessor<ClawChallenge, AreaZone_PlayerCounter>> _clawArea =
				new System.Lazy<FieldAccessor<ClawChallenge, AreaZone_PlayerCounter>>(() => FieldAccessor<ClawChallenge, AreaZone_PlayerCounter>.Create("clawArea"));
		private static readonly System.Lazy<FieldAccessor<ClawChallenge, UnityEngine.Transform>> _clawTransformHorizontal =
				new System.Lazy<FieldAccessor<ClawChallenge, UnityEngine.Transform>>(() => FieldAccessor<ClawChallenge, UnityEngine.Transform>.Create("clawTransformHorizontal"));
		private static readonly System.Lazy<FieldAccessor<ClawChallenge, UnityEngine.Transform>> _clawTransformVertical =
				new System.Lazy<FieldAccessor<ClawChallenge, UnityEngine.Transform>>(() => FieldAccessor<ClawChallenge, UnityEngine.Transform>.Create("clawTransformVertical"));
		private static readonly System.Lazy<FieldAccessor<ClawChallenge, UnityEngine.Transform>> _clawTransform =
				new System.Lazy<FieldAccessor<ClawChallenge, UnityEngine.Transform>>(() => FieldAccessor<ClawChallenge, UnityEngine.Transform>.Create("clawTransform"));
		private static readonly System.Lazy<FieldAccessor<ClawChallenge, UnityEngine.Transform>> _liftCrateParent =
				new System.Lazy<FieldAccessor<ClawChallenge, UnityEngine.Transform>>(() => FieldAccessor<ClawChallenge, UnityEngine.Transform>.Create("liftCrateParent"));
		private static readonly System.Lazy<FieldAccessor<ClawChallenge, UnityEngine.Transform>> _liftableObjectsParent =
				new System.Lazy<FieldAccessor<ClawChallenge, UnityEngine.Transform>>(() => FieldAccessor<ClawChallenge, UnityEngine.Transform>.Create("liftableObjectsParent"));
		private static readonly System.Lazy<FieldAccessor<ClawChallenge, UnityEngine.GameObject>> _ui_electricityParent =
				new System.Lazy<FieldAccessor<ClawChallenge, UnityEngine.GameObject>>(() => FieldAccessor<ClawChallenge, UnityEngine.GameObject>.Create("ui_electricityParent"));
		private static readonly System.Lazy<FieldAccessor<ClawChallenge, UnityEngine.GameObject>> _ui_errorText =
				new System.Lazy<FieldAccessor<ClawChallenge, UnityEngine.GameObject>>(() => FieldAccessor<ClawChallenge, UnityEngine.GameObject>.Create("ui_errorText"));
		private static readonly System.Lazy<FieldAccessor<ClawChallenge, UnityEngine.GameObject>> _ui_readyText =
				new System.Lazy<FieldAccessor<ClawChallenge, UnityEngine.GameObject>>(() => FieldAccessor<ClawChallenge, UnityEngine.GameObject>.Create("ui_readyText"));
		private static readonly System.Lazy<FieldAccessor<ClawChallenge, string>> _eventRef_moveXZ =
				new System.Lazy<FieldAccessor<ClawChallenge, string>>(() => FieldAccessor<ClawChallenge, string>.Create("eventRef_moveXZ"));
		private static readonly System.Lazy<FieldAccessor<ClawChallenge, string>> _eventRef_moveY =
				new System.Lazy<FieldAccessor<ClawChallenge, string>>(() => FieldAccessor<ClawChallenge, string>.Create("eventRef_moveY"));
		private static readonly System.Lazy<FieldAccessor<ClawChallenge, string>> _eventRef_pickup =
				new System.Lazy<FieldAccessor<ClawChallenge, string>>(() => FieldAccessor<ClawChallenge, string>.Create("eventRef_pickup"));
		private static readonly System.Lazy<FieldAccessor<ClawChallenge, string>> _eventRef_drop =
				new System.Lazy<FieldAccessor<ClawChallenge, string>>(() => FieldAccessor<ClawChallenge, string>.Create("eventRef_drop"));
		private static readonly System.Lazy<FieldAccessor<ClawChallenge, string>> _eventRef_containerHitFloor =
				new System.Lazy<FieldAccessor<ClawChallenge, string>>(() => FieldAccessor<ClawChallenge, string>.Create("eventRef_containerHitFloor"));
		private static readonly System.Lazy<FieldAccessor<ClawChallenge, UnityEngine.Vector2Int>> _clawSlotIndex =
				new System.Lazy<FieldAccessor<ClawChallenge, UnityEngine.Vector2Int>>(() => FieldAccessor<ClawChallenge, UnityEngine.Vector2Int>.Create("clawSlotIndex"));
		private static readonly System.Lazy<FieldAccessor<ClawChallenge, bool>> _clawMovingXZ =
				new System.Lazy<FieldAccessor<ClawChallenge, bool>>(() => FieldAccessor<ClawChallenge, bool>.Create("clawMovingXZ"));
		private static readonly System.Lazy<FieldAccessor<ClawChallenge, bool>> _clawMovingY =
				new System.Lazy<FieldAccessor<ClawChallenge, bool>>(() => FieldAccessor<ClawChallenge, bool>.Create("clawMovingY"));
		private static readonly System.Lazy<FieldAccessor<ClawChallenge, ClawChallengeLiftableObject>> _objectBeingLifted =
				new System.Lazy<FieldAccessor<ClawChallenge, ClawChallengeLiftableObject>>(() => FieldAccessor<ClawChallenge, ClawChallengeLiftableObject>.Create("objectBeingLifted"));
		private static readonly System.Lazy<FieldAccessor<ClawChallenge, System.Collections.Generic.List<ClawChallengeLiftableObject>>> _liftableObjects =
				new System.Lazy<FieldAccessor<ClawChallenge, System.Collections.Generic.List<ClawChallengeLiftableObject>>>(() => FieldAccessor<ClawChallenge, System.Collections.Generic.List<ClawChallengeLiftableObject>>.Create("liftableObjects"));
		private static readonly System.Lazy<FieldAccessor<ClawChallenge, System.Collections.Generic.Queue<System.Action>>> _actionQueue =
				new System.Lazy<FieldAccessor<ClawChallenge, System.Collections.Generic.Queue<System.Action>>>(() => FieldAccessor<ClawChallenge, System.Collections.Generic.Queue<System.Action>>.Create("actionQueue"));
		private static readonly System.Lazy<FieldAccessor<ClawChallenge, Raft_Network>> _network =
				new System.Lazy<FieldAccessor<ClawChallenge, Raft_Network>>(() => FieldAccessor<ClawChallenge, Raft_Network>.Create("network"));
		private static readonly System.Lazy<FieldAccessor<ClawChallenge, bool>> _hasError =
				new System.Lazy<FieldAccessor<ClawChallenge, bool>>(() => FieldAccessor<ClawChallenge, bool>.Create("hasError"));
		private static readonly System.Lazy<FieldAccessor<ClawChallenge, InteractableButton_Network_Forwarder>> _buttonForwarder =
				new System.Lazy<FieldAccessor<ClawChallenge, InteractableButton_Network_Forwarder>>(() => FieldAccessor<ClawChallenge, InteractableButton_Network_Forwarder>.Create("buttonForwarder"));

		public static float GetClawMoveXZTime(this ClawChallenge __self) => _clawMoveXZTime.Value.GetValue(__self);
		public static void SetClawMoveXZTime(this ClawChallenge __self, float value) => _clawMoveXZTime.Value.SetValue(__self, value);
		public static float GetClawMoveYTime(this ClawChallenge __self) => _clawMoveYTime.Value.GetValue(__self);
		public static void SetClawMoveYTime(this ClawChallenge __self, float value) => _clawMoveYTime.Value.SetValue(__self, value);
		public static float GetSlotSize(this ClawChallenge __self) => _slotSize.Value.GetValue(__self);
		public static void SetSlotSize(this ClawChallenge __self, float value) => _slotSize.Value.SetValue(__self, value);
		public static float GetStartLocalYPosition(this ClawChallenge __self) => _startLocalYPosition.Value.GetValue(__self);
		public static void SetStartLocalYPosition(this ClawChallenge __self, float value) => _startLocalYPosition.Value.SetValue(__self, value);
		public static float GetClawGoDownDistance(this ClawChallenge __self) => _clawGoDownDistance.Value.GetValue(__self);
		public static void SetClawGoDownDistance(this ClawChallenge __self, float value) => _clawGoDownDistance.Value.SetValue(__self, value);
		public static float GetClawLiftDistance(this ClawChallenge __self) => _clawLiftDistance.Value.GetValue(__self);
		public static void SetClawLiftDistance(this ClawChallenge __self, float value) => _clawLiftDistance.Value.SetValue(__self, value);
		public static UnityEngine.Vector2Int GetStartSlotIndex(this ClawChallenge __self) => _startSlotIndex.Value.GetValue(__self);
		public static void SetStartSlotIndex(this ClawChallenge __self, UnityEngine.Vector2Int value) => _startSlotIndex.Value.SetValue(__self, value);
		public static AreaZone_PlayerCounter GetClawArea(this ClawChallenge __self) => _clawArea.Value.GetValue(__self);
		public static void SetClawArea(this ClawChallenge __self, AreaZone_PlayerCounter value) => _clawArea.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetClawTransformHorizontal(this ClawChallenge __self) => _clawTransformHorizontal.Value.GetValue(__self);
		public static void SetClawTransformHorizontal(this ClawChallenge __self, UnityEngine.Transform value) => _clawTransformHorizontal.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetClawTransformVertical(this ClawChallenge __self) => _clawTransformVertical.Value.GetValue(__self);
		public static void SetClawTransformVertical(this ClawChallenge __self, UnityEngine.Transform value) => _clawTransformVertical.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetClawTransform(this ClawChallenge __self) => _clawTransform.Value.GetValue(__self);
		public static void SetClawTransform(this ClawChallenge __self, UnityEngine.Transform value) => _clawTransform.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetLiftCrateParent(this ClawChallenge __self) => _liftCrateParent.Value.GetValue(__self);
		public static void SetLiftCrateParent(this ClawChallenge __self, UnityEngine.Transform value) => _liftCrateParent.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetLiftableObjectsParent(this ClawChallenge __self) => _liftableObjectsParent.Value.GetValue(__self);
		public static void SetLiftableObjectsParent(this ClawChallenge __self, UnityEngine.Transform value) => _liftableObjectsParent.Value.SetValue(__self, value);
		public static UnityEngine.GameObject GetUi_electricityParent(this ClawChallenge __self) => _ui_electricityParent.Value.GetValue(__self);
		public static void SetUi_electricityParent(this ClawChallenge __self, UnityEngine.GameObject value) => _ui_electricityParent.Value.SetValue(__self, value);
		public static UnityEngine.GameObject GetUi_errorText(this ClawChallenge __self) => _ui_errorText.Value.GetValue(__self);
		public static void SetUi_errorText(this ClawChallenge __self, UnityEngine.GameObject value) => _ui_errorText.Value.SetValue(__self, value);
		public static UnityEngine.GameObject GetUi_readyText(this ClawChallenge __self) => _ui_readyText.Value.GetValue(__self);
		public static void SetUi_readyText(this ClawChallenge __self, UnityEngine.GameObject value) => _ui_readyText.Value.SetValue(__self, value);
		public static string GetEventRef_moveXZ(this ClawChallenge __self) => _eventRef_moveXZ.Value.GetValue(__self);
		public static void SetEventRef_moveXZ(this ClawChallenge __self, string value) => _eventRef_moveXZ.Value.SetValue(__self, value);
		public static string GetEventRef_moveY(this ClawChallenge __self) => _eventRef_moveY.Value.GetValue(__self);
		public static void SetEventRef_moveY(this ClawChallenge __self, string value) => _eventRef_moveY.Value.SetValue(__self, value);
		public static string GetEventRef_pickup(this ClawChallenge __self) => _eventRef_pickup.Value.GetValue(__self);
		public static void SetEventRef_pickup(this ClawChallenge __self, string value) => _eventRef_pickup.Value.SetValue(__self, value);
		public static string GetEventRef_drop(this ClawChallenge __self) => _eventRef_drop.Value.GetValue(__self);
		public static void SetEventRef_drop(this ClawChallenge __self, string value) => _eventRef_drop.Value.SetValue(__self, value);
		public static string GetEventRef_containerHitFloor(this ClawChallenge __self) => _eventRef_containerHitFloor.Value.GetValue(__self);
		public static void SetEventRef_containerHitFloor(this ClawChallenge __self, string value) => _eventRef_containerHitFloor.Value.SetValue(__self, value);
		public static UnityEngine.Vector2Int GetClawSlotIndex(this ClawChallenge __self) => _clawSlotIndex.Value.GetValue(__self);
		public static void SetClawSlotIndex(this ClawChallenge __self, UnityEngine.Vector2Int value) => _clawSlotIndex.Value.SetValue(__self, value);
		public static bool GetClawMovingXZ(this ClawChallenge __self) => _clawMovingXZ.Value.GetValue(__self);
		public static void SetClawMovingXZ(this ClawChallenge __self, bool value) => _clawMovingXZ.Value.SetValue(__self, value);
		public static bool GetClawMovingY(this ClawChallenge __self) => _clawMovingY.Value.GetValue(__self);
		public static void SetClawMovingY(this ClawChallenge __self, bool value) => _clawMovingY.Value.SetValue(__self, value);
		public static ClawChallengeLiftableObject GetObjectBeingLifted(this ClawChallenge __self) => _objectBeingLifted.Value.GetValue(__self);
		public static void SetObjectBeingLifted(this ClawChallenge __self, ClawChallengeLiftableObject value) => _objectBeingLifted.Value.SetValue(__self, value);
		public static System.Collections.Generic.List<ClawChallengeLiftableObject> GetLiftableObjects(this ClawChallenge __self) => _liftableObjects.Value.GetValue(__self);
		public static void SetLiftableObjects(this ClawChallenge __self, System.Collections.Generic.List<ClawChallengeLiftableObject> value) => _liftableObjects.Value.SetValue(__self, value);
		public static System.Collections.Generic.Queue<System.Action> GetActionQueue(this ClawChallenge __self) => _actionQueue.Value.GetValue(__self);
		public static void SetActionQueue(this ClawChallenge __self, System.Collections.Generic.Queue<System.Action> value) => _actionQueue.Value.SetValue(__self, value);
		public static Raft_Network GetNetwork(this ClawChallenge __self) => _network.Value.GetValue(__self);
		public static void SetNetwork(this ClawChallenge __self, Raft_Network value) => _network.Value.SetValue(__self, value);
		public static bool GetHasError(this ClawChallenge __self) => _hasError.Value.GetValue(__self);
		public static void SetHasError(this ClawChallenge __self, bool value) => _hasError.Value.SetValue(__self, value);
		public static InteractableButton_Network_Forwarder GetButtonForwarder(this ClawChallenge __self) => _buttonForwarder.Value.GetValue(__self);
		public static void SetButtonForwarder(this ClawChallenge __self, InteractableButton_Network_Forwarder value) => _buttonForwarder.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<ClawChallenge>> _Awake757602046 =
				new System.Lazy<MethodAccessor<ClawChallenge>>(() => MethodAccessor<ClawChallenge>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<ClawChallenge>> _Start757602046 =
				new System.Lazy<MethodAccessor<ClawChallenge>>(() => MethodAccessor<ClawChallenge>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<ClawChallenge>> _OnValidate757602046 =
				new System.Lazy<MethodAccessor<ClawChallenge>>(() => MethodAccessor<ClawChallenge>.Create("OnValidate"));
		private static readonly System.Lazy<MethodAccessor<ClawChallenge>> _OnDrawGizmos757602046 =
				new System.Lazy<MethodAccessor<ClawChallenge>>(() => MethodAccessor<ClawChallenge>.Create("OnDrawGizmos"));
		private static readonly System.Lazy<MethodAccessor<ClawChallenge>> _Update757602046 =
				new System.Lazy<MethodAccessor<ClawChallenge>>(() => MethodAccessor<ClawChallenge>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<ClawChallenge>> _FindLiftableObjects757602046 =
				new System.Lazy<MethodAccessor<ClawChallenge>>(() => MethodAccessor<ClawChallenge>.Create("FindLiftableObjects"));
		private static readonly System.Lazy<MethodAccessor<ClawChallenge>> _AssignIndexesToLiftableObjects757602046 =
				new System.Lazy<MethodAccessor<ClawChallenge>>(() => MethodAccessor<ClawChallenge>.Create("AssignIndexesToLiftableObjects"));
		private static readonly System.Lazy<MethodAccessor<ClawChallenge>> _OnPlayersInAreaChanged757602046 =
				new System.Lazy<MethodAccessor<ClawChallenge>>(() => MethodAccessor<ClawChallenge>.Create("OnPlayersInAreaChanged"));
		private static readonly System.Lazy<MethodAccessor<ClawChallenge>> _OnGeneratorQuestComplete757602046 =
				new System.Lazy<MethodAccessor<ClawChallenge>>(() => MethodAccessor<ClawChallenge>.Create("OnGeneratorQuestComplete"));
		private static readonly System.Lazy<MethodAccessor<ClawChallenge>> _ButtonPress3486186818 =
				new System.Lazy<MethodAccessor<ClawChallenge>>(() => MethodAccessor<ClawChallenge>.Create("ButtonPress", typeof(int)));
		private static readonly System.Lazy<MethodAccessor<ClawChallenge>> _UseClaw757602046 =
				new System.Lazy<MethodAccessor<ClawChallenge>>(() => MethodAccessor<ClawChallenge>.Create("UseClaw"));
		private static readonly System.Lazy<MethodAccessor<ClawChallenge>> _UseClawCoroutine757602046 =
				new System.Lazy<MethodAccessor<ClawChallenge>>(() => MethodAccessor<ClawChallenge>.Create("UseClawCoroutine"));
		private static readonly System.Lazy<MethodAccessor<ClawChallenge>> _MoveClaw2930000587 =
				new System.Lazy<MethodAccessor<ClawChallenge>>(() => MethodAccessor<ClawChallenge>.Create("MoveClaw", typeof(UnityEngine.Vector2Int), typeof(bool), typeof(bool)));
		private static readonly System.Lazy<MethodAccessor<ClawChallenge>> _MoveTransformToNewLocalPosCoroutine4174710818 =
				new System.Lazy<MethodAccessor<ClawChallenge>>(() => MethodAccessor<ClawChallenge>.Create("MoveTransformToNewLocalPosCoroutine", typeof(UnityEngine.Transform), typeof(UnityEngine.Vector3), typeof(float)));
		private static readonly System.Lazy<MethodAccessor<ClawChallenge>> _MoveTransformToNewLocalPos1670445263 =
				new System.Lazy<MethodAccessor<ClawChallenge>>(() => MethodAccessor<ClawChallenge>.Create("MoveTransformToNewLocalPos", typeof(UnityEngine.Transform), typeof(UnityEngine.Vector3)));
		private static readonly System.Lazy<MethodAccessor<ClawChallenge>> _IsSlotIndexValid1215742486 =
				new System.Lazy<MethodAccessor<ClawChallenge>>(() => MethodAccessor<ClawChallenge>.Create("IsSlotIndexValid", typeof(int), typeof(int)));
		private static readonly System.Lazy<MethodAccessor<ClawChallenge>> _LiftObject3486186818 =
				new System.Lazy<MethodAccessor<ClawChallenge>>(() => MethodAccessor<ClawChallenge>.Create("LiftObject", typeof(int)));
		private static readonly System.Lazy<MethodAccessor<ClawChallenge>> _DropObject1064694142 =
				new System.Lazy<MethodAccessor<ClawChallenge>>(() => MethodAccessor<ClawChallenge>.Create("DropObject", typeof(int), typeof(int), typeof(int)));
		private static readonly System.Lazy<MethodAccessor<ClawChallenge>> _PlayBoxHitFloorSound3640389019 =
				new System.Lazy<MethodAccessor<ClawChallenge>>(() => MethodAccessor<ClawChallenge>.Create("PlayBoxHitFloorSound", typeof(UnityEngine.Vector3), typeof(float)));
		private static readonly System.Lazy<MethodAccessor<ClawChallenge>> _GetSlotPositionFromIndex1215742486 =
				new System.Lazy<MethodAccessor<ClawChallenge>>(() => MethodAccessor<ClawChallenge>.Create("GetSlotPositionFromIndex", typeof(int), typeof(int)));
		private static readonly System.Lazy<MethodAccessor<ClawChallenge>> _GetObjectInSlot1215742486 =
				new System.Lazy<MethodAccessor<ClawChallenge>>(() => MethodAccessor<ClawChallenge>.Create("GetObjectInSlot", typeof(int), typeof(int)));
		private static readonly System.Lazy<MethodAccessor<ClawChallenge>> _SetErrorState3450040886 =
				new System.Lazy<MethodAccessor<ClawChallenge>>(() => MethodAccessor<ClawChallenge>.Create("SetErrorState", typeof(bool)));
		private static readonly System.Lazy<MethodAccessor<ClawChallenge>> _SetElectricityState3450040886 =
				new System.Lazy<MethodAccessor<ClawChallenge>>(() => MethodAccessor<ClawChallenge>.Create("SetElectricityState", typeof(bool)));

		public static void Awake(this ClawChallenge __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this ClawChallenge __self) => _Start757602046.Value.Invoke(__self);
		public static void OnValidate(this ClawChallenge __self) => _OnValidate757602046.Value.Invoke(__self);
		public static void OnDrawGizmos(this ClawChallenge __self) => _OnDrawGizmos757602046.Value.Invoke(__self);
		public static void Update(this ClawChallenge __self) => _Update757602046.Value.Invoke(__self);
		public static void FindLiftableObjects(this ClawChallenge __self) => _FindLiftableObjects757602046.Value.Invoke(__self);
		public static void AssignIndexesToLiftableObjects(this ClawChallenge __self) => _AssignIndexesToLiftableObjects757602046.Value.Invoke(__self);
		public static void OnPlayersInAreaChanged(this ClawChallenge __self) => _OnPlayersInAreaChanged757602046.Value.Invoke(__self);
		public static void OnGeneratorQuestComplete(this ClawChallenge __self) => _OnGeneratorQuestComplete757602046.Value.Invoke(__self);
		public static bool ButtonPress(this ClawChallenge __self, int buttonIndex) => (bool)_ButtonPress3486186818.Value.Invoke(__self, buttonIndex);
		public static bool UseClaw(this ClawChallenge __self) => (bool)_UseClaw757602046.Value.Invoke(__self);
		public static System.Collections.IEnumerator UseClawCoroutine(this ClawChallenge __self) => (System.Collections.IEnumerator)_UseClawCoroutine757602046.Value.Invoke(__self);
		public static bool MoveClaw(this ClawChallenge __self, UnityEngine.Vector2Int newSlotIndex, bool force, bool instant) => (bool)_MoveClaw2930000587.Value.Invoke(__self, newSlotIndex, force, instant);
		public static System.Collections.IEnumerator MoveTransformToNewLocalPosCoroutine(this ClawChallenge __self, UnityEngine.Transform transform, UnityEngine.Vector3 newLocalPosition, float time) => (System.Collections.IEnumerator)_MoveTransformToNewLocalPosCoroutine4174710818.Value.Invoke(__self, transform, newLocalPosition, time);
		public static void MoveTransformToNewLocalPos(this ClawChallenge __self, UnityEngine.Transform transform, UnityEngine.Vector3 newLocalPosition) => _MoveTransformToNewLocalPos1670445263.Value.Invoke(__self, transform, newLocalPosition);
		public static bool IsSlotIndexValid(this ClawChallenge __self, int xSlotIndex, int zSlotIndex) => (bool)_IsSlotIndexValid1215742486.Value.Invoke(__self, xSlotIndex, zSlotIndex);
		public static void LiftObject(this ClawChallenge __self, int liftObjectIndex) => _LiftObject3486186818.Value.Invoke(__self, liftObjectIndex);
		public static void DropObject(this ClawChallenge __self, int liftObjectIndex, int xSlotIndex, int zSlotIndex) => _DropObject1064694142.Value.Invoke(__self, liftObjectIndex, xSlotIndex, zSlotIndex);
		public static System.Collections.IEnumerator PlayBoxHitFloorSound(this ClawChallenge __self, UnityEngine.Vector3 position, float delay) => (System.Collections.IEnumerator)_PlayBoxHitFloorSound3640389019.Value.Invoke(__self, position, delay);
		public static UnityEngine.Vector3 GetSlotPositionFromIndex(this ClawChallenge __self, int xSlotIndex, int zSlotIndex) => (UnityEngine.Vector3)_GetSlotPositionFromIndex1215742486.Value.Invoke(__self, xSlotIndex, zSlotIndex);
		public static ClawChallengeLiftableObject GetObjectInSlot(this ClawChallenge __self, int xSlotIndex, int zSlotIndex) => (ClawChallengeLiftableObject)_GetObjectInSlot1215742486.Value.Invoke(__self, xSlotIndex, zSlotIndex);
		public static void SetErrorState(this ClawChallenge __self, bool state) => _SetErrorState3450040886.Value.Invoke(__self, state);
		public static void SetElectricityState(this ClawChallenge __self, bool state) => _SetElectricityState3450040886.Value.Invoke(__self, state);

	}

	public static class PrivateAccessor_ClawChallengeLiftableObject
	{

		private static readonly System.Lazy<MethodAccessor<ClawChallengeLiftableObject>> _Awake757602046 =
				new System.Lazy<MethodAccessor<ClawChallengeLiftableObject>>(() => MethodAccessor<ClawChallengeLiftableObject>.Create("Awake"));

		public static void Awake(this ClawChallengeLiftableObject __self) => _Awake757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_FlickerMaterial
	{

		private static readonly System.Lazy<FieldAccessor<FlickerMaterial, UnityEngine.MeshRenderer>> _renderer =
				new System.Lazy<FieldAccessor<FlickerMaterial, UnityEngine.MeshRenderer>>(() => FieldAccessor<FlickerMaterial, UnityEngine.MeshRenderer>.Create("renderer"));
		private static readonly System.Lazy<FieldAccessor<FlickerMaterial, UnityEngine.Material>> _onMaterial =
				new System.Lazy<FieldAccessor<FlickerMaterial, UnityEngine.Material>>(() => FieldAccessor<FlickerMaterial, UnityEngine.Material>.Create("onMaterial"));
		private static readonly System.Lazy<FieldAccessor<FlickerMaterial, UnityEngine.Material>> _offMaterial =
				new System.Lazy<FieldAccessor<FlickerMaterial, UnityEngine.Material>>(() => FieldAccessor<FlickerMaterial, UnityEngine.Material>.Create("offMaterial"));
		private static readonly System.Lazy<FieldAccessor<FlickerMaterial, Interval_Float>> _delay =
				new System.Lazy<FieldAccessor<FlickerMaterial, Interval_Float>>(() => FieldAccessor<FlickerMaterial, Interval_Float>.Create("delay"));
		private static readonly System.Lazy<FieldAccessor<FlickerMaterial, Interval_Float>> _onOffSpan =
				new System.Lazy<FieldAccessor<FlickerMaterial, Interval_Float>>(() => FieldAccessor<FlickerMaterial, Interval_Float>.Create("onOffSpan"));
		private static readonly System.Lazy<FieldAccessor<FlickerMaterial, Interval_Int>> _numberOfTimes =
				new System.Lazy<FieldAccessor<FlickerMaterial, Interval_Int>>(() => FieldAccessor<FlickerMaterial, Interval_Int>.Create("numberOfTimes"));
		private static readonly System.Lazy<FieldAccessor<FlickerMaterial, float>> _timer =
				new System.Lazy<FieldAccessor<FlickerMaterial, float>>(() => FieldAccessor<FlickerMaterial, float>.Create("timer"));
		private static readonly System.Lazy<FieldAccessor<FlickerMaterial, float>> _currentDelay =
				new System.Lazy<FieldAccessor<FlickerMaterial, float>>(() => FieldAccessor<FlickerMaterial, float>.Create("currentDelay"));
		private static readonly System.Lazy<FieldAccessor<FlickerMaterial, UnityEngine.Coroutine>> _flickerRoutine =
				new System.Lazy<FieldAccessor<FlickerMaterial, UnityEngine.Coroutine>>(() => FieldAccessor<FlickerMaterial, UnityEngine.Coroutine>.Create("flickerRoutine"));

		public static UnityEngine.MeshRenderer GetRenderer(this FlickerMaterial __self) => _renderer.Value.GetValue(__self);
		public static void SetRenderer(this FlickerMaterial __self, UnityEngine.MeshRenderer value) => _renderer.Value.SetValue(__self, value);
		public static UnityEngine.Material GetOnMaterial(this FlickerMaterial __self) => _onMaterial.Value.GetValue(__self);
		public static void SetOnMaterial(this FlickerMaterial __self, UnityEngine.Material value) => _onMaterial.Value.SetValue(__self, value);
		public static UnityEngine.Material GetOffMaterial(this FlickerMaterial __self) => _offMaterial.Value.GetValue(__self);
		public static void SetOffMaterial(this FlickerMaterial __self, UnityEngine.Material value) => _offMaterial.Value.SetValue(__self, value);
		public static Interval_Float GetDelay(this FlickerMaterial __self) => _delay.Value.GetValue(__self);
		public static void SetDelay(this FlickerMaterial __self, Interval_Float value) => _delay.Value.SetValue(__self, value);
		public static Interval_Float GetOnOffSpan(this FlickerMaterial __self) => _onOffSpan.Value.GetValue(__self);
		public static void SetOnOffSpan(this FlickerMaterial __self, Interval_Float value) => _onOffSpan.Value.SetValue(__self, value);
		public static Interval_Int GetNumberOfTimes(this FlickerMaterial __self) => _numberOfTimes.Value.GetValue(__self);
		public static void SetNumberOfTimes(this FlickerMaterial __self, Interval_Int value) => _numberOfTimes.Value.SetValue(__self, value);
		public static float GetTimer(this FlickerMaterial __self) => _timer.Value.GetValue(__self);
		public static void SetTimer(this FlickerMaterial __self, float value) => _timer.Value.SetValue(__self, value);
		public static float GetCurrentDelay(this FlickerMaterial __self) => _currentDelay.Value.GetValue(__self);
		public static void SetCurrentDelay(this FlickerMaterial __self, float value) => _currentDelay.Value.SetValue(__self, value);
		public static UnityEngine.Coroutine GetFlickerRoutine(this FlickerMaterial __self) => _flickerRoutine.Value.GetValue(__self);
		public static void SetFlickerRoutine(this FlickerMaterial __self, UnityEngine.Coroutine value) => _flickerRoutine.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<FlickerMaterial>> _Start757602046 =
				new System.Lazy<MethodAccessor<FlickerMaterial>>(() => MethodAccessor<FlickerMaterial>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<FlickerMaterial>> _Update757602046 =
				new System.Lazy<MethodAccessor<FlickerMaterial>>(() => MethodAccessor<FlickerMaterial>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<FlickerMaterial>> _Flicker757602046 =
				new System.Lazy<MethodAccessor<FlickerMaterial>>(() => MethodAccessor<FlickerMaterial>.Create("Flicker"));

		public static void Start(this FlickerMaterial __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this FlickerMaterial __self) => _Update757602046.Value.Invoke(__self);
		public static System.Collections.IEnumerator Flicker(this FlickerMaterial __self) => (System.Collections.IEnumerator)_Flicker757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_GeneratorChallenge
	{

		private static readonly System.Lazy<FieldAccessor<GeneratorChallenge, QuestInteractable[]>> _childSlots =
				new System.Lazy<FieldAccessor<GeneratorChallenge, QuestInteractable[]>>(() => FieldAccessor<GeneratorChallenge, QuestInteractable[]>.Create("childSlots"));
		private static readonly System.Lazy<FieldAccessor<GeneratorChallenge, QuestType>> _questToCompleteOnDone =
				new System.Lazy<FieldAccessor<GeneratorChallenge, QuestType>>(() => FieldAccessor<GeneratorChallenge, QuestType>.Create("questToCompleteOnDone"));
		private static readonly System.Lazy<FieldAccessor<GeneratorChallenge, UnityEngine.GameObject>> _particleParent =
				new System.Lazy<FieldAccessor<GeneratorChallenge, UnityEngine.GameObject>>(() => FieldAccessor<GeneratorChallenge, UnityEngine.GameObject>.Create("particleParent"));
		private static readonly System.Lazy<FieldAccessor<GeneratorChallenge, UnityEngine.Renderer>> _lightsRenderer =
				new System.Lazy<FieldAccessor<GeneratorChallenge, UnityEngine.Renderer>>(() => FieldAccessor<GeneratorChallenge, UnityEngine.Renderer>.Create("lightsRenderer"));
		private static readonly System.Lazy<FieldAccessor<GeneratorChallenge, TimerEventer>> _changeLightTimer =
				new System.Lazy<FieldAccessor<GeneratorChallenge, TimerEventer>>(() => FieldAccessor<GeneratorChallenge, TimerEventer>.Create("changeLightTimer"));
		private static readonly System.Lazy<FieldAccessor<GeneratorChallenge, UnityEngine.Animator>> _fanAnimator =
				new System.Lazy<FieldAccessor<GeneratorChallenge, UnityEngine.Animator>>(() => FieldAccessor<GeneratorChallenge, UnityEngine.Animator>.Create("fanAnimator"));
		private static readonly System.Lazy<FieldAccessor<GeneratorChallenge, UnityEngine.Light>> _clawroomLight =
				new System.Lazy<FieldAccessor<GeneratorChallenge, UnityEngine.Light>>(() => FieldAccessor<GeneratorChallenge, UnityEngine.Light>.Create("clawroomLight"));
		private static readonly System.Lazy<FieldAccessor<GeneratorChallenge, UnityEngine.Renderer>> _clawroomLampRenderer =
				new System.Lazy<FieldAccessor<GeneratorChallenge, UnityEngine.Renderer>>(() => FieldAccessor<GeneratorChallenge, UnityEngine.Renderer>.Create("clawroomLampRenderer"));
		private static readonly System.Lazy<FieldAccessor<GeneratorChallenge, UnityEngine.Material>> _clawroomLampNormalMaterial =
				new System.Lazy<FieldAccessor<GeneratorChallenge, UnityEngine.Material>>(() => FieldAccessor<GeneratorChallenge, UnityEngine.Material>.Create("clawroomLampNormalMaterial"));
		private static readonly System.Lazy<FieldAccessor<GeneratorChallenge, UnityEngine.Material>> _clawroomLampEmissiveMaterial =
				new System.Lazy<FieldAccessor<GeneratorChallenge, UnityEngine.Material>>(() => FieldAccessor<GeneratorChallenge, UnityEngine.Material>.Create("clawroomLampEmissiveMaterial"));
		private static readonly System.Lazy<FieldAccessor<GeneratorChallenge, FMODUnity.StudioEventEmitter>> _eventEmitter_generatorOn =
				new System.Lazy<FieldAccessor<GeneratorChallenge, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<GeneratorChallenge, FMODUnity.StudioEventEmitter>.Create("eventEmitter_generatorOn"));
		private static readonly System.Lazy<FieldAccessor<GeneratorChallenge, bool>> _challengeComplete =
				new System.Lazy<FieldAccessor<GeneratorChallenge, bool>>(() => FieldAccessor<GeneratorChallenge, bool>.Create("challengeComplete"));
		private static readonly System.Lazy<FieldAccessor<GeneratorChallenge, UnityEngine.MaterialPropertyBlock>> _lightsMPB =
				new System.Lazy<FieldAccessor<GeneratorChallenge, UnityEngine.MaterialPropertyBlock>>(() => FieldAccessor<GeneratorChallenge, UnityEngine.MaterialPropertyBlock>.Create("lightsMPB"));
		private static readonly System.Lazy<FieldAccessor<GeneratorChallenge, float>> _lightValue =
				new System.Lazy<FieldAccessor<GeneratorChallenge, float>>(() => FieldAccessor<GeneratorChallenge, float>.Create("lightValue"));
		private static readonly System.Lazy<FieldAccessor<GeneratorChallenge, float>> _lightTargetValue =
				new System.Lazy<FieldAccessor<GeneratorChallenge, float>>(() => FieldAccessor<GeneratorChallenge, float>.Create("lightTargetValue"));
		private static readonly System.Lazy<FieldAccessor<GeneratorChallenge, bool>> _hasLightsBeenMaxed =
				new System.Lazy<FieldAccessor<GeneratorChallenge, bool>>(() => FieldAccessor<GeneratorChallenge, bool>.Create("hasLightsBeenMaxed"));

		public static QuestInteractable[] GetChildSlots(this GeneratorChallenge __self) => _childSlots.Value.GetValue(__self);
		public static void SetChildSlots(this GeneratorChallenge __self, QuestInteractable[] value) => _childSlots.Value.SetValue(__self, value);
		public static QuestType GetQuestToCompleteOnDone(this GeneratorChallenge __self) => _questToCompleteOnDone.Value.GetValue(__self);
		public static void SetQuestToCompleteOnDone(this GeneratorChallenge __self, QuestType value) => _questToCompleteOnDone.Value.SetValue(__self, value);
		public static UnityEngine.GameObject GetParticleParent(this GeneratorChallenge __self) => _particleParent.Value.GetValue(__self);
		public static void SetParticleParent(this GeneratorChallenge __self, UnityEngine.GameObject value) => _particleParent.Value.SetValue(__self, value);
		public static UnityEngine.Renderer GetLightsRenderer(this GeneratorChallenge __self) => _lightsRenderer.Value.GetValue(__self);
		public static void SetLightsRenderer(this GeneratorChallenge __self, UnityEngine.Renderer value) => _lightsRenderer.Value.SetValue(__self, value);
		public static TimerEventer GetChangeLightTimer(this GeneratorChallenge __self) => _changeLightTimer.Value.GetValue(__self);
		public static void SetChangeLightTimer(this GeneratorChallenge __self, TimerEventer value) => _changeLightTimer.Value.SetValue(__self, value);
		public static UnityEngine.Animator GetFanAnimator(this GeneratorChallenge __self) => _fanAnimator.Value.GetValue(__self);
		public static void SetFanAnimator(this GeneratorChallenge __self, UnityEngine.Animator value) => _fanAnimator.Value.SetValue(__self, value);
		public static UnityEngine.Light GetClawroomLight(this GeneratorChallenge __self) => _clawroomLight.Value.GetValue(__self);
		public static void SetClawroomLight(this GeneratorChallenge __self, UnityEngine.Light value) => _clawroomLight.Value.SetValue(__self, value);
		public static UnityEngine.Renderer GetClawroomLampRenderer(this GeneratorChallenge __self) => _clawroomLampRenderer.Value.GetValue(__self);
		public static void SetClawroomLampRenderer(this GeneratorChallenge __self, UnityEngine.Renderer value) => _clawroomLampRenderer.Value.SetValue(__self, value);
		public static UnityEngine.Material GetClawroomLampNormalMaterial(this GeneratorChallenge __self) => _clawroomLampNormalMaterial.Value.GetValue(__self);
		public static void SetClawroomLampNormalMaterial(this GeneratorChallenge __self, UnityEngine.Material value) => _clawroomLampNormalMaterial.Value.SetValue(__self, value);
		public static UnityEngine.Material GetClawroomLampEmissiveMaterial(this GeneratorChallenge __self) => _clawroomLampEmissiveMaterial.Value.GetValue(__self);
		public static void SetClawroomLampEmissiveMaterial(this GeneratorChallenge __self, UnityEngine.Material value) => _clawroomLampEmissiveMaterial.Value.SetValue(__self, value);
		public static FMODUnity.StudioEventEmitter GetEventEmitter_generatorOn(this GeneratorChallenge __self) => _eventEmitter_generatorOn.Value.GetValue(__self);
		public static void SetEventEmitter_generatorOn(this GeneratorChallenge __self, FMODUnity.StudioEventEmitter value) => _eventEmitter_generatorOn.Value.SetValue(__self, value);
		public static bool GetChallengeComplete(this GeneratorChallenge __self) => _challengeComplete.Value.GetValue(__self);
		public static void SetChallengeComplete(this GeneratorChallenge __self, bool value) => _challengeComplete.Value.SetValue(__self, value);
		public static UnityEngine.MaterialPropertyBlock GetLightsMPB(this GeneratorChallenge __self) => _lightsMPB.Value.GetValue(__self);
		public static void SetLightsMPB(this GeneratorChallenge __self, UnityEngine.MaterialPropertyBlock value) => _lightsMPB.Value.SetValue(__self, value);
		public static float GetLightValue(this GeneratorChallenge __self) => _lightValue.Value.GetValue(__self);
		public static void SetLightValue(this GeneratorChallenge __self, float value) => _lightValue.Value.SetValue(__self, value);
		public static float GetLightTargetValue(this GeneratorChallenge __self) => _lightTargetValue.Value.GetValue(__self);
		public static void SetLightTargetValue(this GeneratorChallenge __self, float value) => _lightTargetValue.Value.SetValue(__self, value);
		public static bool GetHasLightsBeenMaxed(this GeneratorChallenge __self) => _hasLightsBeenMaxed.Value.GetValue(__self);
		public static void SetHasLightsBeenMaxed(this GeneratorChallenge __self, bool value) => _hasLightsBeenMaxed.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<GeneratorChallenge>> _Awake757602046 =
				new System.Lazy<MethodAccessor<GeneratorChallenge>>(() => MethodAccessor<GeneratorChallenge>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<GeneratorChallenge>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<GeneratorChallenge>>(() => MethodAccessor<GeneratorChallenge>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<GeneratorChallenge>> _OnEnable757602046 =
				new System.Lazy<MethodAccessor<GeneratorChallenge>>(() => MethodAccessor<GeneratorChallenge>.Create("OnEnable"));
		private static readonly System.Lazy<MethodAccessor<GeneratorChallenge>> _Update757602046 =
				new System.Lazy<MethodAccessor<GeneratorChallenge>>(() => MethodAccessor<GeneratorChallenge>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<GeneratorChallenge>> _OnChildInteract3171859007 =
				new System.Lazy<MethodAccessor<GeneratorChallenge>>(() => MethodAccessor<GeneratorChallenge>.Create("OnChildInteract", typeof(int), typeof(bool), typeof(Network_Player), typeof(bool)));
		private static readonly System.Lazy<MethodAccessor<GeneratorChallenge>> _UpdateChallengeState757602046 =
				new System.Lazy<MethodAccessor<GeneratorChallenge>>(() => MethodAccessor<GeneratorChallenge>.Create("UpdateChallengeState"));
		private static readonly System.Lazy<MethodAccessor<GeneratorChallenge>> _AllChildrenAtMaxStateIndex757602046 =
				new System.Lazy<MethodAccessor<GeneratorChallenge>>(() => MethodAccessor<GeneratorChallenge>.Create("AllChildrenAtMaxStateIndex"));

		public static void Awake(this GeneratorChallenge __self) => _Awake757602046.Value.Invoke(__self);
		public static void OnDestroy(this GeneratorChallenge __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void OnEnable(this GeneratorChallenge __self) => _OnEnable757602046.Value.Invoke(__self);
		public static void Update(this GeneratorChallenge __self) => _Update757602046.Value.Invoke(__self);
		public static void OnChildInteract(this GeneratorChallenge __self, int objectStateIndex, bool atStart, Network_Player player, bool success) => _OnChildInteract3171859007.Value.Invoke(__self, objectStateIndex, atStart, player, success);
		public static void UpdateChallengeState(this GeneratorChallenge __self) => _UpdateChallengeState757602046.Value.Invoke(__self);
		public static bool AllChildrenAtMaxStateIndex(this GeneratorChallenge __self) => (bool)_AllChildrenAtMaxStateIndex757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_NoPlayerSpawnRegion
	{

		private static readonly System.Lazy<FieldAccessor<NoPlayerSpawnRegion, UnityEngine.Transform>> _respawnPoint =
				new System.Lazy<FieldAccessor<NoPlayerSpawnRegion, UnityEngine.Transform>>(() => FieldAccessor<NoPlayerSpawnRegion, UnityEngine.Transform>.Create("respawnPoint"));
		private static readonly System.Lazy<FieldAccessor<NoPlayerSpawnRegion, AreaZone_PlayerCounter>> _regionArea =
				new System.Lazy<FieldAccessor<NoPlayerSpawnRegion, AreaZone_PlayerCounter>>(() => FieldAccessor<NoPlayerSpawnRegion, AreaZone_PlayerCounter>.Create("regionArea"));
		private static readonly System.Lazy<FieldAccessor<NoPlayerSpawnRegion, GizmoBox>> _gizmoBox =
				new System.Lazy<FieldAccessor<NoPlayerSpawnRegion, GizmoBox>>(() => FieldAccessor<NoPlayerSpawnRegion, GizmoBox>.Create("gizmoBox"));

		public static UnityEngine.Transform GetRespawnPoint(this NoPlayerSpawnRegion __self) => _respawnPoint.Value.GetValue(__self);
		public static void SetRespawnPoint(this NoPlayerSpawnRegion __self, UnityEngine.Transform value) => _respawnPoint.Value.SetValue(__self, value);
		public static AreaZone_PlayerCounter GetRegionArea(this NoPlayerSpawnRegion __self) => _regionArea.Value.GetValue(__self);
		public static void SetRegionArea(this NoPlayerSpawnRegion __self, AreaZone_PlayerCounter value) => _regionArea.Value.SetValue(__self, value);
		public static GizmoBox GetGizmoBox(this NoPlayerSpawnRegion __self) => _gizmoBox.Value.GetValue(__self);
		public static void SetGizmoBox(this NoPlayerSpawnRegion __self, GizmoBox value) => _gizmoBox.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<NoPlayerSpawnRegion>> _Awake757602046 =
				new System.Lazy<MethodAccessor<NoPlayerSpawnRegion>>(() => MethodAccessor<NoPlayerSpawnRegion>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<NoPlayerSpawnRegion>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<NoPlayerSpawnRegion>>(() => MethodAccessor<NoPlayerSpawnRegion>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<NoPlayerSpawnRegion>> _OnPlayerInitialized3461878659 =
				new System.Lazy<MethodAccessor<NoPlayerSpawnRegion>>(() => MethodAccessor<NoPlayerSpawnRegion>.Create("OnPlayerInitialized", typeof(Network_Player)));
		private static readonly System.Lazy<MethodAccessor<NoPlayerSpawnRegion>> _OnWorldRecievedLate757602046 =
				new System.Lazy<MethodAccessor<NoPlayerSpawnRegion>>(() => MethodAccessor<NoPlayerSpawnRegion>.Create("OnWorldRecievedLate"));
		private static readonly System.Lazy<MethodAccessor<NoPlayerSpawnRegion>> _TryToResetPlayetToRespawnPoint757602046 =
				new System.Lazy<MethodAccessor<NoPlayerSpawnRegion>>(() => MethodAccessor<NoPlayerSpawnRegion>.Create("TryToResetPlayetToRespawnPoint"));
		private static readonly System.Lazy<MethodAccessor<NoPlayerSpawnRegion>> _GetPlayersInArea757602046 =
				new System.Lazy<MethodAccessor<NoPlayerSpawnRegion>>(() => MethodAccessor<NoPlayerSpawnRegion>.Create("GetPlayersInArea"));

		public static void Awake(this NoPlayerSpawnRegion __self) => _Awake757602046.Value.Invoke(__self);
		public static void OnDestroy(this NoPlayerSpawnRegion __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void OnPlayerInitialized(this NoPlayerSpawnRegion __self, Network_Player player) => _OnPlayerInitialized3461878659.Value.Invoke(__self, player);
		public static void OnWorldRecievedLate(this NoPlayerSpawnRegion __self) => _OnWorldRecievedLate757602046.Value.Invoke(__self);
		public static void TryToResetPlayetToRespawnPoint(this NoPlayerSpawnRegion __self) => _TryToResetPlayetToRespawnPoint757602046.Value.Invoke(__self);
		public static System.Collections.Generic.List<Network_Player> GetPlayersInArea(this NoPlayerSpawnRegion __self) => (System.Collections.Generic.List<Network_Player>)_GetPlayersInArea757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_TangaroaCockpitLaunch
	{

		private static readonly System.Lazy<FieldAccessor<TangaroaCockpitLaunch, float>> _totalCurveTime =
				new System.Lazy<FieldAccessor<TangaroaCockpitLaunch, float>>(() => FieldAccessor<TangaroaCockpitLaunch, float>.Create("totalCurveTime"));
		private static readonly System.Lazy<FieldAccessor<TangaroaCockpitLaunch, float>> _offsetFromCenter =
				new System.Lazy<FieldAccessor<TangaroaCockpitLaunch, float>>(() => FieldAccessor<TangaroaCockpitLaunch, float>.Create("offsetFromCenter"));
		private static readonly System.Lazy<FieldAccessor<TangaroaCockpitLaunch, UnityEngine.AnimationCurve>> _yPositionCurve =
				new System.Lazy<FieldAccessor<TangaroaCockpitLaunch, UnityEngine.AnimationCurve>>(() => FieldAccessor<TangaroaCockpitLaunch, UnityEngine.AnimationCurve>.Create("yPositionCurve"));
		private static readonly System.Lazy<FieldAccessor<TangaroaCockpitLaunch, UnityEngine.AnimationCurve>> _offsetVelocityCurve =
				new System.Lazy<FieldAccessor<TangaroaCockpitLaunch, UnityEngine.AnimationCurve>>(() => FieldAccessor<TangaroaCockpitLaunch, UnityEngine.AnimationCurve>.Create("offsetVelocityCurve"));
		private static readonly System.Lazy<FieldAccessor<TangaroaCockpitLaunch, UnityEngine.AnimationCurve>> _xRotationCurve =
				new System.Lazy<FieldAccessor<TangaroaCockpitLaunch, UnityEngine.AnimationCurve>>(() => FieldAccessor<TangaroaCockpitLaunch, UnityEngine.AnimationCurve>.Create("xRotationCurve"));
		private static readonly System.Lazy<FieldAccessor<TangaroaCockpitLaunch, UnityEngine.AnimationCurve>> _yRotationCurve =
				new System.Lazy<FieldAccessor<TangaroaCockpitLaunch, UnityEngine.AnimationCurve>>(() => FieldAccessor<TangaroaCockpitLaunch, UnityEngine.AnimationCurve>.Create("yRotationCurve"));
		private static readonly System.Lazy<FieldAccessor<TangaroaCockpitLaunch, UnityEngine.AnimationCurve>> _zRotationCurve =
				new System.Lazy<FieldAccessor<TangaroaCockpitLaunch, UnityEngine.AnimationCurve>>(() => FieldAccessor<TangaroaCockpitLaunch, UnityEngine.AnimationCurve>.Create("zRotationCurve"));
		private static readonly System.Lazy<FieldAccessor<TangaroaCockpitLaunch, UnityEngine.ParticleSystem>> _particle_sparks =
				new System.Lazy<FieldAccessor<TangaroaCockpitLaunch, UnityEngine.ParticleSystem>>(() => FieldAccessor<TangaroaCockpitLaunch, UnityEngine.ParticleSystem>.Create("particle_sparks"));
		private static readonly System.Lazy<FieldAccessor<TangaroaCockpitLaunch, UnityEngine.ParticleSystem>> _particle_smokeTrail =
				new System.Lazy<FieldAccessor<TangaroaCockpitLaunch, UnityEngine.ParticleSystem>>(() => FieldAccessor<TangaroaCockpitLaunch, UnityEngine.ParticleSystem>.Create("particle_smokeTrail"));
		private static readonly System.Lazy<FieldAccessor<TangaroaCockpitLaunch, UnityEngine.ParticleSystem>> _particle_launch =
				new System.Lazy<FieldAccessor<TangaroaCockpitLaunch, UnityEngine.ParticleSystem>>(() => FieldAccessor<TangaroaCockpitLaunch, UnityEngine.ParticleSystem>.Create("particle_launch"));
		private static readonly System.Lazy<FieldAccessor<TangaroaCockpitLaunch, float>> _playLaunchTimeline =
				new System.Lazy<FieldAccessor<TangaroaCockpitLaunch, float>>(() => FieldAccessor<TangaroaCockpitLaunch, float>.Create("playLaunchTimeline"));
		private static readonly System.Lazy<FieldAccessor<TangaroaCockpitLaunch, UnityEngine.ParticleSystem>> _particle_waterSplash =
				new System.Lazy<FieldAccessor<TangaroaCockpitLaunch, UnityEngine.ParticleSystem>>(() => FieldAccessor<TangaroaCockpitLaunch, UnityEngine.ParticleSystem>.Create("particle_waterSplash"));
		private static readonly System.Lazy<FieldAccessor<TangaroaCockpitLaunch, float>> _playWaterSplashTimeline =
				new System.Lazy<FieldAccessor<TangaroaCockpitLaunch, float>>(() => FieldAccessor<TangaroaCockpitLaunch, float>.Create("playWaterSplashTimeline"));
		private static readonly System.Lazy<FieldAccessor<TangaroaCockpitLaunch, Keypad>> _launchKeypad =
				new System.Lazy<FieldAccessor<TangaroaCockpitLaunch, Keypad>>(() => FieldAccessor<TangaroaCockpitLaunch, Keypad>.Create("launchKeypad"));
		private static readonly System.Lazy<FieldAccessor<TangaroaCockpitLaunch, UnityEngine.Transform>> _transformToMove =
				new System.Lazy<FieldAccessor<TangaroaCockpitLaunch, UnityEngine.Transform>>(() => FieldAccessor<TangaroaCockpitLaunch, UnityEngine.Transform>.Create("transformToMove"));
		private static readonly System.Lazy<FieldAccessor<TangaroaCockpitLaunch, UnityEngine.GameObject>> _flotationObject =
				new System.Lazy<FieldAccessor<TangaroaCockpitLaunch, UnityEngine.GameObject>>(() => FieldAccessor<TangaroaCockpitLaunch, UnityEngine.GameObject>.Create("flotationObject"));
		private static readonly System.Lazy<FieldAccessor<TangaroaCockpitLaunch, SO_CameraShaker>> _launchShakeSetting =
				new System.Lazy<FieldAccessor<TangaroaCockpitLaunch, SO_CameraShaker>>(() => FieldAccessor<TangaroaCockpitLaunch, SO_CameraShaker>.Create("launchShakeSetting"));
		private static readonly System.Lazy<FieldAccessor<TangaroaCockpitLaunch, SO_CameraShaker>> _sparkShakeSetting =
				new System.Lazy<FieldAccessor<TangaroaCockpitLaunch, SO_CameraShaker>>(() => FieldAccessor<TangaroaCockpitLaunch, SO_CameraShaker>.Create("sparkShakeSetting"));
		private static readonly System.Lazy<FieldAccessor<TangaroaCockpitLaunch, FMODUnity.StudioEventEmitter>> _emitter_Launch =
				new System.Lazy<FieldAccessor<TangaroaCockpitLaunch, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<TangaroaCockpitLaunch, FMODUnity.StudioEventEmitter>.Create("emitter_Launch"));
		private static readonly System.Lazy<FieldAccessor<TangaroaCockpitLaunch, UnityEngine.Vector3>> _startPosition =
				new System.Lazy<FieldAccessor<TangaroaCockpitLaunch, UnityEngine.Vector3>>(() => FieldAccessor<TangaroaCockpitLaunch, UnityEngine.Vector3>.Create("startPosition"));
		private static readonly System.Lazy<FieldAccessor<TangaroaCockpitLaunch, UnityEngine.Vector3>> _latestLaunchTargetLocalPositionXZ =
				new System.Lazy<FieldAccessor<TangaroaCockpitLaunch, UnityEngine.Vector3>>(() => FieldAccessor<TangaroaCockpitLaunch, UnityEngine.Vector3>.Create("latestLaunchTargetLocalPositionXZ"));
		private static readonly System.Lazy<FieldAccessor<TangaroaCockpitLaunch, Raft_Network>> _network =
				new System.Lazy<FieldAccessor<TangaroaCockpitLaunch, Raft_Network>>(() => FieldAccessor<TangaroaCockpitLaunch, Raft_Network>.Create("network"));
		private static readonly System.Lazy<FieldAccessor<TangaroaCockpitLaunch, bool>> _launched =
				new System.Lazy<FieldAccessor<TangaroaCockpitLaunch, bool>>(() => FieldAccessor<TangaroaCockpitLaunch, bool>.Create("launched"));

		public static float GetTotalCurveTime(this TangaroaCockpitLaunch __self) => _totalCurveTime.Value.GetValue(__self);
		public static void SetTotalCurveTime(this TangaroaCockpitLaunch __self, float value) => _totalCurveTime.Value.SetValue(__self, value);
		public static float GetOffsetFromCenter(this TangaroaCockpitLaunch __self) => _offsetFromCenter.Value.GetValue(__self);
		public static void SetOffsetFromCenter(this TangaroaCockpitLaunch __self, float value) => _offsetFromCenter.Value.SetValue(__self, value);
		public static UnityEngine.AnimationCurve GetYPositionCurve(this TangaroaCockpitLaunch __self) => _yPositionCurve.Value.GetValue(__self);
		public static void SetYPositionCurve(this TangaroaCockpitLaunch __self, UnityEngine.AnimationCurve value) => _yPositionCurve.Value.SetValue(__self, value);
		public static UnityEngine.AnimationCurve GetOffsetVelocityCurve(this TangaroaCockpitLaunch __self) => _offsetVelocityCurve.Value.GetValue(__self);
		public static void SetOffsetVelocityCurve(this TangaroaCockpitLaunch __self, UnityEngine.AnimationCurve value) => _offsetVelocityCurve.Value.SetValue(__self, value);
		public static UnityEngine.AnimationCurve GetXRotationCurve(this TangaroaCockpitLaunch __self) => _xRotationCurve.Value.GetValue(__self);
		public static void SetXRotationCurve(this TangaroaCockpitLaunch __self, UnityEngine.AnimationCurve value) => _xRotationCurve.Value.SetValue(__self, value);
		public static UnityEngine.AnimationCurve GetYRotationCurve(this TangaroaCockpitLaunch __self) => _yRotationCurve.Value.GetValue(__self);
		public static void SetYRotationCurve(this TangaroaCockpitLaunch __self, UnityEngine.AnimationCurve value) => _yRotationCurve.Value.SetValue(__self, value);
		public static UnityEngine.AnimationCurve GetZRotationCurve(this TangaroaCockpitLaunch __self) => _zRotationCurve.Value.GetValue(__self);
		public static void SetZRotationCurve(this TangaroaCockpitLaunch __self, UnityEngine.AnimationCurve value) => _zRotationCurve.Value.SetValue(__self, value);
		public static UnityEngine.ParticleSystem GetParticle_sparks(this TangaroaCockpitLaunch __self) => _particle_sparks.Value.GetValue(__self);
		public static void SetParticle_sparks(this TangaroaCockpitLaunch __self, UnityEngine.ParticleSystem value) => _particle_sparks.Value.SetValue(__self, value);
		public static UnityEngine.ParticleSystem GetParticle_smokeTrail(this TangaroaCockpitLaunch __self) => _particle_smokeTrail.Value.GetValue(__self);
		public static void SetParticle_smokeTrail(this TangaroaCockpitLaunch __self, UnityEngine.ParticleSystem value) => _particle_smokeTrail.Value.SetValue(__self, value);
		public static UnityEngine.ParticleSystem GetParticle_launch(this TangaroaCockpitLaunch __self) => _particle_launch.Value.GetValue(__self);
		public static void SetParticle_launch(this TangaroaCockpitLaunch __self, UnityEngine.ParticleSystem value) => _particle_launch.Value.SetValue(__self, value);
		public static float GetPlayLaunchTimeline(this TangaroaCockpitLaunch __self) => _playLaunchTimeline.Value.GetValue(__self);
		public static void SetPlayLaunchTimeline(this TangaroaCockpitLaunch __self, float value) => _playLaunchTimeline.Value.SetValue(__self, value);
		public static UnityEngine.ParticleSystem GetParticle_waterSplash(this TangaroaCockpitLaunch __self) => _particle_waterSplash.Value.GetValue(__self);
		public static void SetParticle_waterSplash(this TangaroaCockpitLaunch __self, UnityEngine.ParticleSystem value) => _particle_waterSplash.Value.SetValue(__self, value);
		public static float GetPlayWaterSplashTimeline(this TangaroaCockpitLaunch __self) => _playWaterSplashTimeline.Value.GetValue(__self);
		public static void SetPlayWaterSplashTimeline(this TangaroaCockpitLaunch __self, float value) => _playWaterSplashTimeline.Value.SetValue(__self, value);
		public static Keypad GetLaunchKeypad(this TangaroaCockpitLaunch __self) => _launchKeypad.Value.GetValue(__self);
		public static void SetLaunchKeypad(this TangaroaCockpitLaunch __self, Keypad value) => _launchKeypad.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetTransformToMove(this TangaroaCockpitLaunch __self) => _transformToMove.Value.GetValue(__self);
		public static void SetTransformToMove(this TangaroaCockpitLaunch __self, UnityEngine.Transform value) => _transformToMove.Value.SetValue(__self, value);
		public static UnityEngine.GameObject GetFlotationObject(this TangaroaCockpitLaunch __self) => _flotationObject.Value.GetValue(__self);
		public static void SetFlotationObject(this TangaroaCockpitLaunch __self, UnityEngine.GameObject value) => _flotationObject.Value.SetValue(__self, value);
		public static SO_CameraShaker GetLaunchShakeSetting(this TangaroaCockpitLaunch __self) => _launchShakeSetting.Value.GetValue(__self);
		public static void SetLaunchShakeSetting(this TangaroaCockpitLaunch __self, SO_CameraShaker value) => _launchShakeSetting.Value.SetValue(__self, value);
		public static SO_CameraShaker GetSparkShakeSetting(this TangaroaCockpitLaunch __self) => _sparkShakeSetting.Value.GetValue(__self);
		public static void SetSparkShakeSetting(this TangaroaCockpitLaunch __self, SO_CameraShaker value) => _sparkShakeSetting.Value.SetValue(__self, value);
		public static FMODUnity.StudioEventEmitter GetEmitter_Launch(this TangaroaCockpitLaunch __self) => _emitter_Launch.Value.GetValue(__self);
		public static void SetEmitter_Launch(this TangaroaCockpitLaunch __self, FMODUnity.StudioEventEmitter value) => _emitter_Launch.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetStartPosition(this TangaroaCockpitLaunch __self) => _startPosition.Value.GetValue(__self);
		public static void SetStartPosition(this TangaroaCockpitLaunch __self, UnityEngine.Vector3 value) => _startPosition.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetLatestLaunchTargetLocalPositionXZ(this TangaroaCockpitLaunch __self) => _latestLaunchTargetLocalPositionXZ.Value.GetValue(__self);
		public static void SetLatestLaunchTargetLocalPositionXZ(this TangaroaCockpitLaunch __self, UnityEngine.Vector3 value) => _latestLaunchTargetLocalPositionXZ.Value.SetValue(__self, value);
		public static Raft_Network GetNetwork(this TangaroaCockpitLaunch __self) => _network.Value.GetValue(__self);
		public static void SetNetwork(this TangaroaCockpitLaunch __self, Raft_Network value) => _network.Value.SetValue(__self, value);
		public static bool GetLaunched(this TangaroaCockpitLaunch __self) => _launched.Value.GetValue(__self);
		public static void SetLaunched(this TangaroaCockpitLaunch __self, bool value) => _launched.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<TangaroaCockpitLaunch>> _Awake757602046 =
				new System.Lazy<MethodAccessor<TangaroaCockpitLaunch>>(() => MethodAccessor<TangaroaCockpitLaunch>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<TangaroaCockpitLaunch>> _Start757602046 =
				new System.Lazy<MethodAccessor<TangaroaCockpitLaunch>>(() => MethodAccessor<TangaroaCockpitLaunch>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<TangaroaCockpitLaunch>> _OnEnable757602046 =
				new System.Lazy<MethodAccessor<TangaroaCockpitLaunch>>(() => MethodAccessor<TangaroaCockpitLaunch>.Create("OnEnable"));
		private static readonly System.Lazy<MethodAccessor<TangaroaCockpitLaunch>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<TangaroaCockpitLaunch>>(() => MethodAccessor<TangaroaCockpitLaunch>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<TangaroaCockpitLaunch>> _OnKeypadCodeComplete757602046 =
				new System.Lazy<MethodAccessor<TangaroaCockpitLaunch>>(() => MethodAccessor<TangaroaCockpitLaunch>.Create("OnKeypadCodeComplete"));
		private static readonly System.Lazy<MethodAccessor<TangaroaCockpitLaunch>> _LaunchNetworked_Editor757602046 =
				new System.Lazy<MethodAccessor<TangaroaCockpitLaunch>>(() => MethodAccessor<TangaroaCockpitLaunch>.Create("LaunchNetworked_Editor"));
		private static readonly System.Lazy<MethodAccessor<TangaroaCockpitLaunch>> _Reset_Editor757602046 =
				new System.Lazy<MethodAccessor<TangaroaCockpitLaunch>>(() => MethodAccessor<TangaroaCockpitLaunch>.Create("Reset_Editor"));
		private static readonly System.Lazy<MethodAccessor<TangaroaCockpitLaunch>> _Launch3429126434 =
				new System.Lazy<MethodAccessor<TangaroaCockpitLaunch>>(() => MethodAccessor<TangaroaCockpitLaunch>.Create("Launch", typeof(UnityEngine.Vector3)));
		private static readonly System.Lazy<MethodAccessor<TangaroaCockpitLaunch>> _SetCockpitInTimeline1720348855 =
				new System.Lazy<MethodAccessor<TangaroaCockpitLaunch>>(() => MethodAccessor<TangaroaCockpitLaunch>.Create("SetCockpitInTimeline", typeof(float), typeof(UnityEngine.Vector3)));
		private static readonly System.Lazy<MethodAccessor<TangaroaCockpitLaunch>> _GetTargetLocalPositionXZ757602046 =
				new System.Lazy<MethodAccessor<TangaroaCockpitLaunch>>(() => MethodAccessor<TangaroaCockpitLaunch>.Create("GetTargetLocalPositionXZ"));

		public static void Awake(this TangaroaCockpitLaunch __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this TangaroaCockpitLaunch __self) => _Start757602046.Value.Invoke(__self);
		public static void OnEnable(this TangaroaCockpitLaunch __self) => _OnEnable757602046.Value.Invoke(__self);
		public static void OnDestroy(this TangaroaCockpitLaunch __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void OnKeypadCodeComplete(this TangaroaCockpitLaunch __self) => _OnKeypadCodeComplete757602046.Value.Invoke(__self);
		public static void LaunchNetworked_Editor(this TangaroaCockpitLaunch __self) => _LaunchNetworked_Editor757602046.Value.Invoke(__self);
		public static void Reset_Editor(this TangaroaCockpitLaunch __self) => _Reset_Editor757602046.Value.Invoke(__self);
		public static System.Collections.IEnumerator Launch(this TangaroaCockpitLaunch __self, UnityEngine.Vector3 targetLocalPositionXZ) => (System.Collections.IEnumerator)_Launch3429126434.Value.Invoke(__self, targetLocalPositionXZ);
		public static void SetCockpitInTimeline(this TangaroaCockpitLaunch __self, float normalizedTime, UnityEngine.Vector3 targetLocalPositionXZ) => _SetCockpitInTimeline1720348855.Value.Invoke(__self, normalizedTime, targetLocalPositionXZ);
		public static UnityEngine.Vector3 GetTargetLocalPositionXZ(this TangaroaCockpitLaunch __self) => (UnityEngine.Vector3)_GetTargetLocalPositionXZ757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Message_TangaroaCockpitLaunch
	{

		private static readonly System.Lazy<FieldAccessor<Message_TangaroaCockpitLaunch, int>> _x =
				new System.Lazy<FieldAccessor<Message_TangaroaCockpitLaunch, int>>(() => FieldAccessor<Message_TangaroaCockpitLaunch, int>.Create("x"));
		private static readonly System.Lazy<FieldAccessor<Message_TangaroaCockpitLaunch, int>> _z =
				new System.Lazy<FieldAccessor<Message_TangaroaCockpitLaunch, int>>(() => FieldAccessor<Message_TangaroaCockpitLaunch, int>.Create("z"));

		public static int GetX(this Message_TangaroaCockpitLaunch __self) => _x.Value.GetValue(__self);
		public static void SetX(this Message_TangaroaCockpitLaunch __self, int value) => _x.Value.SetValue(__self, value);
		public static int GetZ(this Message_TangaroaCockpitLaunch __self) => _z.Value.GetValue(__self);
		public static void SetZ(this Message_TangaroaCockpitLaunch __self, int value) => _z.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_TangaroaCockpitLaunchPanel
	{

		private static readonly System.Lazy<MethodAccessor<TangaroaCockpitLaunchPanel>> _Start757602046 =
				new System.Lazy<MethodAccessor<TangaroaCockpitLaunchPanel>>(() => MethodAccessor<TangaroaCockpitLaunchPanel>.Create("Start"));

		public static void Start(this TangaroaCockpitLaunchPanel __self) => _Start757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_TapeChallenge
	{

		private static readonly System.Lazy<FieldAccessor<TapeChallenge, EnvironmentLightAffector>> _environmentLightAffector =
				new System.Lazy<FieldAccessor<TapeChallenge, EnvironmentLightAffector>>(() => FieldAccessor<TapeChallenge, EnvironmentLightAffector>.Create("environmentLightAffector"));
		private static readonly System.Lazy<FieldAccessor<TapeChallenge, QuestInteractable[]>> _tapeInteractables =
				new System.Lazy<FieldAccessor<TapeChallenge, QuestInteractable[]>>(() => FieldAccessor<TapeChallenge, QuestInteractable[]>.Create("tapeInteractables"));
		private static readonly System.Lazy<FieldAccessor<TapeChallenge, UnityEngine.ParticleSystem>> _particle_electricity =
				new System.Lazy<FieldAccessor<TapeChallenge, UnityEngine.ParticleSystem>>(() => FieldAccessor<TapeChallenge, UnityEngine.ParticleSystem>.Create("particle_electricity"));
		private static readonly System.Lazy<FieldAccessor<TapeChallenge, UnityEngine.MeshRenderer>> _electricityWaterRenderer =
				new System.Lazy<FieldAccessor<TapeChallenge, UnityEngine.MeshRenderer>>(() => FieldAccessor<TapeChallenge, UnityEngine.MeshRenderer>.Create("electricityWaterRenderer"));
		private static readonly System.Lazy<FieldAccessor<TapeChallenge, DamageArea>> _damageArea =
				new System.Lazy<FieldAccessor<TapeChallenge, DamageArea>>(() => FieldAccessor<TapeChallenge, DamageArea>.Create("damageArea"));
		private static readonly System.Lazy<FieldAccessor<TapeChallenge, FMODUnity.StudioEventEmitter>> _emitter_ElectricityWater =
				new System.Lazy<FieldAccessor<TapeChallenge, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<TapeChallenge, FMODUnity.StudioEventEmitter>.Create("emitter_ElectricityWater"));
		private static readonly System.Lazy<FieldAccessor<TapeChallenge, float>> _playSoundMaxPlayerYDistance =
				new System.Lazy<FieldAccessor<TapeChallenge, float>>(() => FieldAccessor<TapeChallenge, float>.Create("playSoundMaxPlayerYDistance"));
		private static readonly System.Lazy<FieldAccessor<TapeChallenge, Network_Water>> _water =
				new System.Lazy<FieldAccessor<TapeChallenge, Network_Water>>(() => FieldAccessor<TapeChallenge, Network_Water>.Create("water"));
		private static readonly System.Lazy<FieldAccessor<TapeChallenge, UnityEngine.MaterialPropertyBlock>> _materialPropertyBlock =
				new System.Lazy<FieldAccessor<TapeChallenge, UnityEngine.MaterialPropertyBlock>>(() => FieldAccessor<TapeChallenge, UnityEngine.MaterialPropertyBlock>.Create("materialPropertyBlock"));
		private static readonly System.Lazy<FieldAccessor<TapeChallenge, Network_Player>> _player =
				new System.Lazy<FieldAccessor<TapeChallenge, Network_Player>>(() => FieldAccessor<TapeChallenge, Network_Player>.Create("player"));
		private static readonly System.Lazy<FieldAccessor<TapeChallenge, bool>> _challengeComplete =
				new System.Lazy<FieldAccessor<TapeChallenge, bool>>(() => FieldAccessor<TapeChallenge, bool>.Create("challengeComplete"));

		public static EnvironmentLightAffector GetEnvironmentLightAffector(this TapeChallenge __self) => _environmentLightAffector.Value.GetValue(__self);
		public static void SetEnvironmentLightAffector(this TapeChallenge __self, EnvironmentLightAffector value) => _environmentLightAffector.Value.SetValue(__self, value);
		public static QuestInteractable[] GetTapeInteractables(this TapeChallenge __self) => _tapeInteractables.Value.GetValue(__self);
		public static void SetTapeInteractables(this TapeChallenge __self, QuestInteractable[] value) => _tapeInteractables.Value.SetValue(__self, value);
		public static UnityEngine.ParticleSystem GetParticle_electricity(this TapeChallenge __self) => _particle_electricity.Value.GetValue(__self);
		public static void SetParticle_electricity(this TapeChallenge __self, UnityEngine.ParticleSystem value) => _particle_electricity.Value.SetValue(__self, value);
		public static UnityEngine.MeshRenderer GetElectricityWaterRenderer(this TapeChallenge __self) => _electricityWaterRenderer.Value.GetValue(__self);
		public static void SetElectricityWaterRenderer(this TapeChallenge __self, UnityEngine.MeshRenderer value) => _electricityWaterRenderer.Value.SetValue(__self, value);
		public static DamageArea GetDamageArea(this TapeChallenge __self) => _damageArea.Value.GetValue(__self);
		public static void SetDamageArea(this TapeChallenge __self, DamageArea value) => _damageArea.Value.SetValue(__self, value);
		public static FMODUnity.StudioEventEmitter GetEmitter_ElectricityWater(this TapeChallenge __self) => _emitter_ElectricityWater.Value.GetValue(__self);
		public static void SetEmitter_ElectricityWater(this TapeChallenge __self, FMODUnity.StudioEventEmitter value) => _emitter_ElectricityWater.Value.SetValue(__self, value);
		public static float GetPlaySoundMaxPlayerYDistance(this TapeChallenge __self) => _playSoundMaxPlayerYDistance.Value.GetValue(__self);
		public static void SetPlaySoundMaxPlayerYDistance(this TapeChallenge __self, float value) => _playSoundMaxPlayerYDistance.Value.SetValue(__self, value);
		public static Network_Water GetWater(this TapeChallenge __self) => _water.Value.GetValue(__self);
		public static void SetWater(this TapeChallenge __self, Network_Water value) => _water.Value.SetValue(__self, value);
		public static UnityEngine.MaterialPropertyBlock GetMaterialPropertyBlock(this TapeChallenge __self) => _materialPropertyBlock.Value.GetValue(__self);
		public static void SetMaterialPropertyBlock(this TapeChallenge __self, UnityEngine.MaterialPropertyBlock value) => _materialPropertyBlock.Value.SetValue(__self, value);
		public static Network_Player GetPlayer(this TapeChallenge __self) => _player.Value.GetValue(__self);
		public static void SetPlayer(this TapeChallenge __self, Network_Player value) => _player.Value.SetValue(__self, value);
		public static bool GetChallengeComplete(this TapeChallenge __self) => _challengeComplete.Value.GetValue(__self);
		public static void SetChallengeComplete(this TapeChallenge __self, bool value) => _challengeComplete.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<TapeChallenge>> _Awake757602046 =
				new System.Lazy<MethodAccessor<TapeChallenge>>(() => MethodAccessor<TapeChallenge>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<TapeChallenge>> _Start757602046 =
				new System.Lazy<MethodAccessor<TapeChallenge>>(() => MethodAccessor<TapeChallenge>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<TapeChallenge>> _UpdateChallengeState757602046 =
				new System.Lazy<MethodAccessor<TapeChallenge>>(() => MethodAccessor<TapeChallenge>.Create("UpdateChallengeState"));
		private static readonly System.Lazy<MethodAccessor<TapeChallenge>> _SetWaterElectricityState3450040886 =
				new System.Lazy<MethodAccessor<TapeChallenge>>(() => MethodAccessor<TapeChallenge>.Create("SetWaterElectricityState", typeof(bool)));
		private static readonly System.Lazy<MethodAccessor<TapeChallenge>> _OnInteractUpdateState3171859007 =
				new System.Lazy<MethodAccessor<TapeChallenge>>(() => MethodAccessor<TapeChallenge>.Create("OnInteractUpdateState", typeof(int), typeof(bool), typeof(Network_Player), typeof(bool)));
		private static readonly System.Lazy<MethodAccessor<TapeChallenge>> _AllInteractablesAtMaxIndex757602046 =
				new System.Lazy<MethodAccessor<TapeChallenge>>(() => MethodAccessor<TapeChallenge>.Create("AllInteractablesAtMaxIndex"));

		public static void Awake(this TapeChallenge __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this TapeChallenge __self) => _Start757602046.Value.Invoke(__self);
		public static void UpdateChallengeState(this TapeChallenge __self) => _UpdateChallengeState757602046.Value.Invoke(__self);
		public static void SetWaterElectricityState(this TapeChallenge __self, bool electric) => _SetWaterElectricityState3450040886.Value.Invoke(__self, electric);
		public static void OnInteractUpdateState(this TapeChallenge __self, int objectStateIndex, bool atStart, Network_Player player, bool success) => _OnInteractUpdateState3171859007.Value.Invoke(__self, objectStateIndex, atStart, player, success);
		public static bool AllInteractablesAtMaxIndex(this TapeChallenge __self) => (bool)_AllInteractablesAtMaxIndex757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_VendingMachine
	{

		private static readonly System.Lazy<FieldAccessor<VendingMachine, UnityEngine.Animator>> _animator =
				new System.Lazy<FieldAccessor<VendingMachine, UnityEngine.Animator>>(() => FieldAccessor<VendingMachine, UnityEngine.Animator>.Create("animator"));
		private static readonly System.Lazy<FieldAccessor<VendingMachine, VendingMachine_Element[]>> _vendingElements =
				new System.Lazy<FieldAccessor<VendingMachine, VendingMachine_Element[]>>(() => FieldAccessor<VendingMachine, VendingMachine_Element[]>.Create("vendingElements"));
		private static readonly System.Lazy<FieldAccessor<VendingMachine, TimerEventer>> _checkPlayerDistanceTimer =
				new System.Lazy<FieldAccessor<VendingMachine, TimerEventer>>(() => FieldAccessor<VendingMachine, TimerEventer>.Create("checkPlayerDistanceTimer"));
		private static readonly System.Lazy<FieldAccessor<VendingMachine, UnityEngine.GameObject>> _canvasParent =
				new System.Lazy<FieldAccessor<VendingMachine, UnityEngine.GameObject>>(() => FieldAccessor<VendingMachine, UnityEngine.GameObject>.Create("canvasParent"));
		private static readonly System.Lazy<FieldAccessor<VendingMachine, float>> _hideCanvasDistance =
				new System.Lazy<FieldAccessor<VendingMachine, float>>(() => FieldAccessor<VendingMachine, float>.Create("hideCanvasDistance"));
		private static readonly System.Lazy<FieldAccessor<VendingMachine, VendingMachine_Element>> _latestPurchase =
				new System.Lazy<FieldAccessor<VendingMachine, VendingMachine_Element>>(() => FieldAccessor<VendingMachine, VendingMachine_Element>.Create("latestPurchase"));
		private static readonly System.Lazy<FieldAccessor<VendingMachine, InteractableButton_Network_Forwarder>> _buttonForwarder =
				new System.Lazy<FieldAccessor<VendingMachine, InteractableButton_Network_Forwarder>>(() => FieldAccessor<VendingMachine, InteractableButton_Network_Forwarder>.Create("buttonForwarder"));
		private static readonly System.Lazy<FieldAccessor<VendingMachine, Raft_Network>> _network =
				new System.Lazy<FieldAccessor<VendingMachine, Raft_Network>>(() => FieldAccessor<VendingMachine, Raft_Network>.Create("network"));
		private static readonly System.Lazy<FieldAccessor<VendingMachine, QuestItemManager>> _questItemManager =
				new System.Lazy<FieldAccessor<VendingMachine, QuestItemManager>>(() => FieldAccessor<VendingMachine, QuestItemManager>.Create("questItemManager"));

		public static UnityEngine.Animator GetAnimator(this VendingMachine __self) => _animator.Value.GetValue(__self);
		public static void SetAnimator(this VendingMachine __self, UnityEngine.Animator value) => _animator.Value.SetValue(__self, value);
		public static VendingMachine_Element[] GetVendingElements(this VendingMachine __self) => _vendingElements.Value.GetValue(__self);
		public static void SetVendingElements(this VendingMachine __self, VendingMachine_Element[] value) => _vendingElements.Value.SetValue(__self, value);
		public static TimerEventer GetCheckPlayerDistanceTimer(this VendingMachine __self) => _checkPlayerDistanceTimer.Value.GetValue(__self);
		public static void SetCheckPlayerDistanceTimer(this VendingMachine __self, TimerEventer value) => _checkPlayerDistanceTimer.Value.SetValue(__self, value);
		public static UnityEngine.GameObject GetCanvasParent(this VendingMachine __self) => _canvasParent.Value.GetValue(__self);
		public static void SetCanvasParent(this VendingMachine __self, UnityEngine.GameObject value) => _canvasParent.Value.SetValue(__self, value);
		public static float GetHideCanvasDistance(this VendingMachine __self) => _hideCanvasDistance.Value.GetValue(__self);
		public static void SetHideCanvasDistance(this VendingMachine __self, float value) => _hideCanvasDistance.Value.SetValue(__self, value);
		public static VendingMachine_Element GetLatestPurchase(this VendingMachine __self) => _latestPurchase.Value.GetValue(__self);
		public static void SetLatestPurchase(this VendingMachine __self, VendingMachine_Element value) => _latestPurchase.Value.SetValue(__self, value);
		public static InteractableButton_Network_Forwarder GetButtonForwarder(this VendingMachine __self) => _buttonForwarder.Value.GetValue(__self);
		public static void SetButtonForwarder(this VendingMachine __self, InteractableButton_Network_Forwarder value) => _buttonForwarder.Value.SetValue(__self, value);
		public static Raft_Network GetNetwork(this VendingMachine __self) => _network.Value.GetValue(__self);
		public static void SetNetwork(this VendingMachine __self, Raft_Network value) => _network.Value.SetValue(__self, value);
		public static QuestItemManager GetQuestItemManager(this VendingMachine __self) => _questItemManager.Value.GetValue(__self);
		public static void SetQuestItemManager(this VendingMachine __self, QuestItemManager value) => _questItemManager.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<VendingMachine>> _FindElements757602046 =
				new System.Lazy<MethodAccessor<VendingMachine>>(() => MethodAccessor<VendingMachine>.Create("FindElements"));
		private static readonly System.Lazy<MethodAccessor<VendingMachine>> _Awake757602046 =
				new System.Lazy<MethodAccessor<VendingMachine>>(() => MethodAccessor<VendingMachine>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<VendingMachine>> _Start757602046 =
				new System.Lazy<MethodAccessor<VendingMachine>>(() => MethodAccessor<VendingMachine>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<VendingMachine>> _Update757602046 =
				new System.Lazy<MethodAccessor<VendingMachine>>(() => MethodAccessor<VendingMachine>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<VendingMachine>> _AddTokensToAnimator3486186818 =
				new System.Lazy<MethodAccessor<VendingMachine>>(() => MethodAccessor<VendingMachine>.Create("AddTokensToAnimator", typeof(int)));
		private static readonly System.Lazy<MethodAccessor<VendingMachine>> _GetVendingMachineButton3486186818 =
				new System.Lazy<MethodAccessor<VendingMachine>>(() => MethodAccessor<VendingMachine>.Create("GetVendingMachineButton", typeof(int)));
		private static readonly System.Lazy<MethodAccessor<VendingMachine>> _ButtonPress343677558 =
				new System.Lazy<MethodAccessor<VendingMachine>>(() => MethodAccessor<VendingMachine>.Create("ButtonPress", typeof(int), typeof(Steamworks.CSteamID)));
		private static readonly System.Lazy<MethodAccessor<VendingMachine>> _PickupVendingHatch3461878659 =
				new System.Lazy<MethodAccessor<VendingMachine>>(() => MethodAccessor<VendingMachine>.Create("PickupVendingHatch", typeof(Network_Player)));

		public static void FindElements(this VendingMachine __self) => _FindElements757602046.Value.Invoke(__self);
		public static void Awake(this VendingMachine __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this VendingMachine __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this VendingMachine __self) => _Update757602046.Value.Invoke(__self);
		public static void AddTokensToAnimator(this VendingMachine __self, int amount) => _AddTokensToAnimator3486186818.Value.Invoke(__self, amount);
		public static VendingMachine_Element GetVendingMachineButton(this VendingMachine __self, int index) => (VendingMachine_Element)_GetVendingMachineButton3486186818.Value.Invoke(__self, index);
		public static bool ButtonPress(this VendingMachine __self, int buttonIndex, Steamworks.CSteamID steamID) => (bool)_ButtonPress343677558.Value.Invoke(__self, buttonIndex, steamID);
		public static void PickupVendingHatch(this VendingMachine __self, Network_Player interactPlayer) => _PickupVendingHatch3461878659.Value.Invoke(__self, interactPlayer);

	}

	public static class PrivateAccessor_ComputerChallenge
	{

		private static readonly System.Lazy<FieldAccessor<ComputerChallenge, float>> _maxTimer =
				new System.Lazy<FieldAccessor<ComputerChallenge, float>>(() => FieldAccessor<ComputerChallenge, float>.Create("maxTimer"));
		private static readonly System.Lazy<FieldAccessor<ComputerChallenge, QuestInteractable>> _lockedDoor =
				new System.Lazy<FieldAccessor<ComputerChallenge, QuestInteractable>>(() => FieldAccessor<ComputerChallenge, QuestInteractable>.Create("lockedDoor"));
		private static readonly System.Lazy<FieldAccessor<ComputerChallenge, Keypad_ComputerChallenge[]>> _computerKeypads =
				new System.Lazy<FieldAccessor<ComputerChallenge, Keypad_ComputerChallenge[]>>(() => FieldAccessor<ComputerChallenge, Keypad_ComputerChallenge[]>.Create("computerKeypads"));
		private static readonly System.Lazy<FieldAccessor<ComputerChallenge, Raft_Network>> _network =
				new System.Lazy<FieldAccessor<ComputerChallenge, Raft_Network>>(() => FieldAccessor<ComputerChallenge, Raft_Network>.Create("network"));
		private static readonly System.Lazy<FieldAccessor<ComputerChallenge, float>> _timer =
				new System.Lazy<FieldAccessor<ComputerChallenge, float>>(() => FieldAccessor<ComputerChallenge, float>.Create("timer"));
		private static readonly System.Lazy<FieldAccessor<ComputerChallenge, bool>> _isComplete =
				new System.Lazy<FieldAccessor<ComputerChallenge, bool>>(() => FieldAccessor<ComputerChallenge, bool>.Create("isComplete"));

		public static float GetMaxTimer(this ComputerChallenge __self) => _maxTimer.Value.GetValue(__self);
		public static void SetMaxTimer(this ComputerChallenge __self, float value) => _maxTimer.Value.SetValue(__self, value);
		public static QuestInteractable GetLockedDoor(this ComputerChallenge __self) => _lockedDoor.Value.GetValue(__self);
		public static void SetLockedDoor(this ComputerChallenge __self, QuestInteractable value) => _lockedDoor.Value.SetValue(__self, value);
		public static Keypad_ComputerChallenge[] GetComputerKeypads(this ComputerChallenge __self) => _computerKeypads.Value.GetValue(__self);
		public static void SetComputerKeypads(this ComputerChallenge __self, Keypad_ComputerChallenge[] value) => _computerKeypads.Value.SetValue(__self, value);
		public static Raft_Network GetNetwork(this ComputerChallenge __self) => _network.Value.GetValue(__self);
		public static void SetNetwork(this ComputerChallenge __self, Raft_Network value) => _network.Value.SetValue(__self, value);
		public static float GetTimer(this ComputerChallenge __self) => _timer.Value.GetValue(__self);
		public static void SetTimer(this ComputerChallenge __self, float value) => _timer.Value.SetValue(__self, value);
		public static bool GetIsComplete(this ComputerChallenge __self) => _isComplete.Value.GetValue(__self);
		public static void SetIsComplete(this ComputerChallenge __self, bool value) => _isComplete.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<ComputerChallenge>> _Awake757602046 =
				new System.Lazy<MethodAccessor<ComputerChallenge>>(() => MethodAccessor<ComputerChallenge>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<ComputerChallenge>> _Update757602046 =
				new System.Lazy<MethodAccessor<ComputerChallenge>>(() => MethodAccessor<ComputerChallenge>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<ComputerChallenge>> _OnKeyPadComplete3450268681 =
				new System.Lazy<MethodAccessor<ComputerChallenge>>(() => MethodAccessor<ComputerChallenge>.Create("OnKeyPadComplete", typeof(Keypad_ComputerChallenge)));
		private static readonly System.Lazy<MethodAccessor<ComputerChallenge>> _StartTimer757602046 =
				new System.Lazy<MethodAccessor<ComputerChallenge>>(() => MethodAccessor<ComputerChallenge>.Create("StartTimer"));
		private static readonly System.Lazy<MethodAccessor<ComputerChallenge>> _ResetTimer757602046 =
				new System.Lazy<MethodAccessor<ComputerChallenge>>(() => MethodAccessor<ComputerChallenge>.Create("ResetTimer"));
		private static readonly System.Lazy<MethodAccessor<ComputerChallenge>> _CompleteChallenge757602046 =
				new System.Lazy<MethodAccessor<ComputerChallenge>>(() => MethodAccessor<ComputerChallenge>.Create("CompleteChallenge"));

		public static void Awake(this ComputerChallenge __self) => _Awake757602046.Value.Invoke(__self);
		public static void Update(this ComputerChallenge __self) => _Update757602046.Value.Invoke(__self);
		public static void OnKeyPadComplete(this ComputerChallenge __self, Keypad_ComputerChallenge keypad) => _OnKeyPadComplete3450268681.Value.Invoke(__self, keypad);
		public static void StartTimer(this ComputerChallenge __self) => _StartTimer757602046.Value.Invoke(__self);
		public static void ResetTimer(this ComputerChallenge __self) => _ResetTimer757602046.Value.Invoke(__self);
		public static void CompleteChallenge(this ComputerChallenge __self) => _CompleteChallenge757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_CoolingChallenge
	{

		private static readonly System.Lazy<FieldAccessor<CoolingChallenge, QuestType>> _questToCompleteOnDone =
				new System.Lazy<FieldAccessor<CoolingChallenge, QuestType>>(() => FieldAccessor<CoolingChallenge, QuestType>.Create("questToCompleteOnDone"));
		private static readonly System.Lazy<FieldAccessor<CoolingChallenge, QuestInteractable[]>> _childSlots =
				new System.Lazy<FieldAccessor<CoolingChallenge, QuestInteractable[]>>(() => FieldAccessor<CoolingChallenge, QuestInteractable[]>.Create("childSlots"));
		private static readonly System.Lazy<FieldAccessor<CoolingChallenge, UnityEngine.GameObject[]>> _objectsToDisableAfterChallenge =
				new System.Lazy<FieldAccessor<CoolingChallenge, UnityEngine.GameObject[]>>(() => FieldAccessor<CoolingChallenge, UnityEngine.GameObject[]>.Create("objectsToDisableAfterChallenge"));
		private static readonly System.Lazy<FieldAccessor<CoolingChallenge, UnityEngine.GameObject[]>> _objectsToEnableAfterChallenge =
				new System.Lazy<FieldAccessor<CoolingChallenge, UnityEngine.GameObject[]>>(() => FieldAccessor<CoolingChallenge, UnityEngine.GameObject[]>.Create("objectsToEnableAfterChallenge"));
		private static readonly System.Lazy<FieldAccessor<CoolingChallenge, UnityEngine.Renderer>> _leverRenderer =
				new System.Lazy<FieldAccessor<CoolingChallenge, UnityEngine.Renderer>>(() => FieldAccessor<CoolingChallenge, UnityEngine.Renderer>.Create("leverRenderer"));
		private static readonly System.Lazy<FieldAccessor<CoolingChallenge, TMPro.TextMeshPro>> _screenTextMesh =
				new System.Lazy<FieldAccessor<CoolingChallenge, TMPro.TextMeshPro>>(() => FieldAccessor<CoolingChallenge, TMPro.TextMeshPro>.Create("screenTextMesh"));
		private static readonly System.Lazy<FieldAccessor<CoolingChallenge, string>> _term_insertRods =
				new System.Lazy<FieldAccessor<CoolingChallenge, string>>(() => FieldAccessor<CoolingChallenge, string>.Create("term_insertRods"));
		private static readonly System.Lazy<FieldAccessor<CoolingChallenge, string>> _term_error =
				new System.Lazy<FieldAccessor<CoolingChallenge, string>>(() => FieldAccessor<CoolingChallenge, string>.Create("term_error"));
		private static readonly System.Lazy<FieldAccessor<CoolingChallenge, string>> _term_valvesShut =
				new System.Lazy<FieldAccessor<CoolingChallenge, string>>(() => FieldAccessor<CoolingChallenge, string>.Create("term_valvesShut"));
		private static readonly System.Lazy<FieldAccessor<CoolingChallenge, string>> _term_success =
				new System.Lazy<FieldAccessor<CoolingChallenge, string>>(() => FieldAccessor<CoolingChallenge, string>.Create("term_success"));
		private static readonly System.Lazy<FieldAccessor<CoolingChallenge, UnityEngine.Color32>> _safeColor =
				new System.Lazy<FieldAccessor<CoolingChallenge, UnityEngine.Color32>>(() => FieldAccessor<CoolingChallenge, UnityEngine.Color32>.Create("safeColor"));
		private static readonly System.Lazy<FieldAccessor<CoolingChallenge, UnityEngine.Color32>> _errorColor =
				new System.Lazy<FieldAccessor<CoolingChallenge, UnityEngine.Color32>>(() => FieldAccessor<CoolingChallenge, UnityEngine.Color32>.Create("errorColor"));
		private static readonly System.Lazy<FieldAccessor<CoolingChallenge, FMODUnity.StudioEventEmitter>> _emitter_alarm =
				new System.Lazy<FieldAccessor<CoolingChallenge, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<CoolingChallenge, FMODUnity.StudioEventEmitter>.Create("emitter_alarm"));
		private static readonly System.Lazy<FieldAccessor<CoolingChallenge, TimerEventer>> _alarmTimer =
				new System.Lazy<FieldAccessor<CoolingChallenge, TimerEventer>>(() => FieldAccessor<CoolingChallenge, TimerEventer>.Create("alarmTimer"));
		private static readonly System.Lazy<FieldAccessor<CoolingChallenge, QuestInteractable>> _coolingStationLever =
				new System.Lazy<FieldAccessor<CoolingChallenge, QuestInteractable>>(() => FieldAccessor<CoolingChallenge, QuestInteractable>.Create("coolingStationLever"));
		private static readonly System.Lazy<FieldAccessor<CoolingChallenge, FMODUnity.StudioEventEmitter>> _emitter_error =
				new System.Lazy<FieldAccessor<CoolingChallenge, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<CoolingChallenge, FMODUnity.StudioEventEmitter>.Create("emitter_error"));
		private static readonly System.Lazy<FieldAccessor<CoolingChallenge, bool>> _challengeComplete =
				new System.Lazy<FieldAccessor<CoolingChallenge, bool>>(() => FieldAccessor<CoolingChallenge, bool>.Create("challengeComplete"));
		private static readonly System.Lazy<FieldAccessor<CoolingChallenge, Quest>> _quest_rodsInserted =
				new System.Lazy<FieldAccessor<CoolingChallenge, Quest>>(() => FieldAccessor<CoolingChallenge, Quest>.Create("quest_rodsInserted"));
		private static readonly System.Lazy<FieldAccessor<CoolingChallenge, Quest>> _quest_leverPulled =
				new System.Lazy<FieldAccessor<CoolingChallenge, Quest>>(() => FieldAccessor<CoolingChallenge, Quest>.Create("quest_leverPulled"));
		private static readonly System.Lazy<FieldAccessor<CoolingChallenge, Quest>> _quest_reactorComplete =
				new System.Lazy<FieldAccessor<CoolingChallenge, Quest>>(() => FieldAccessor<CoolingChallenge, Quest>.Create("quest_reactorComplete"));
		private static readonly System.Lazy<FieldAccessor<CoolingChallenge, UnityEngine.MaterialPropertyBlock>> _matPropBlock =
				new System.Lazy<FieldAccessor<CoolingChallenge, UnityEngine.MaterialPropertyBlock>>(() => FieldAccessor<CoolingChallenge, UnityEngine.MaterialPropertyBlock>.Create("matPropBlock"));

		public static QuestType GetQuestToCompleteOnDone(this CoolingChallenge __self) => _questToCompleteOnDone.Value.GetValue(__self);
		public static void SetQuestToCompleteOnDone(this CoolingChallenge __self, QuestType value) => _questToCompleteOnDone.Value.SetValue(__self, value);
		public static QuestInteractable[] GetChildSlots(this CoolingChallenge __self) => _childSlots.Value.GetValue(__self);
		public static void SetChildSlots(this CoolingChallenge __self, QuestInteractable[] value) => _childSlots.Value.SetValue(__self, value);
		public static UnityEngine.GameObject[] GetObjectsToDisableAfterChallenge(this CoolingChallenge __self) => _objectsToDisableAfterChallenge.Value.GetValue(__self);
		public static void SetObjectsToDisableAfterChallenge(this CoolingChallenge __self, UnityEngine.GameObject[] value) => _objectsToDisableAfterChallenge.Value.SetValue(__self, value);
		public static UnityEngine.GameObject[] GetObjectsToEnableAfterChallenge(this CoolingChallenge __self) => _objectsToEnableAfterChallenge.Value.GetValue(__self);
		public static void SetObjectsToEnableAfterChallenge(this CoolingChallenge __self, UnityEngine.GameObject[] value) => _objectsToEnableAfterChallenge.Value.SetValue(__self, value);
		public static UnityEngine.Renderer GetLeverRenderer(this CoolingChallenge __self) => _leverRenderer.Value.GetValue(__self);
		public static void SetLeverRenderer(this CoolingChallenge __self, UnityEngine.Renderer value) => _leverRenderer.Value.SetValue(__self, value);
		public static TMPro.TextMeshPro GetScreenTextMesh(this CoolingChallenge __self) => _screenTextMesh.Value.GetValue(__self);
		public static void SetScreenTextMesh(this CoolingChallenge __self, TMPro.TextMeshPro value) => _screenTextMesh.Value.SetValue(__self, value);
		public static string GetTerm_insertRods(this CoolingChallenge __self) => _term_insertRods.Value.GetValue(__self);
		public static void SetTerm_insertRods(this CoolingChallenge __self, string value) => _term_insertRods.Value.SetValue(__self, value);
		public static string GetTerm_error(this CoolingChallenge __self) => _term_error.Value.GetValue(__self);
		public static void SetTerm_error(this CoolingChallenge __self, string value) => _term_error.Value.SetValue(__self, value);
		public static string GetTerm_valvesShut(this CoolingChallenge __self) => _term_valvesShut.Value.GetValue(__self);
		public static void SetTerm_valvesShut(this CoolingChallenge __self, string value) => _term_valvesShut.Value.SetValue(__self, value);
		public static string GetTerm_success(this CoolingChallenge __self) => _term_success.Value.GetValue(__self);
		public static void SetTerm_success(this CoolingChallenge __self, string value) => _term_success.Value.SetValue(__self, value);
		public static UnityEngine.Color32 GetSafeColor(this CoolingChallenge __self) => _safeColor.Value.GetValue(__self);
		public static void SetSafeColor(this CoolingChallenge __self, UnityEngine.Color32 value) => _safeColor.Value.SetValue(__self, value);
		public static UnityEngine.Color32 GetErrorColor(this CoolingChallenge __self) => _errorColor.Value.GetValue(__self);
		public static void SetErrorColor(this CoolingChallenge __self, UnityEngine.Color32 value) => _errorColor.Value.SetValue(__self, value);
		public static FMODUnity.StudioEventEmitter GetEmitter_alarm(this CoolingChallenge __self) => _emitter_alarm.Value.GetValue(__self);
		public static void SetEmitter_alarm(this CoolingChallenge __self, FMODUnity.StudioEventEmitter value) => _emitter_alarm.Value.SetValue(__self, value);
		public static TimerEventer GetAlarmTimer(this CoolingChallenge __self) => _alarmTimer.Value.GetValue(__self);
		public static void SetAlarmTimer(this CoolingChallenge __self, TimerEventer value) => _alarmTimer.Value.SetValue(__self, value);
		public static QuestInteractable GetCoolingStationLever(this CoolingChallenge __self) => _coolingStationLever.Value.GetValue(__self);
		public static void SetCoolingStationLever(this CoolingChallenge __self, QuestInteractable value) => _coolingStationLever.Value.SetValue(__self, value);
		public static FMODUnity.StudioEventEmitter GetEmitter_error(this CoolingChallenge __self) => _emitter_error.Value.GetValue(__self);
		public static void SetEmitter_error(this CoolingChallenge __self, FMODUnity.StudioEventEmitter value) => _emitter_error.Value.SetValue(__self, value);
		public static bool GetChallengeComplete(this CoolingChallenge __self) => _challengeComplete.Value.GetValue(__self);
		public static void SetChallengeComplete(this CoolingChallenge __self, bool value) => _challengeComplete.Value.SetValue(__self, value);
		public static Quest GetQuest_rodsInserted(this CoolingChallenge __self) => _quest_rodsInserted.Value.GetValue(__self);
		public static void SetQuest_rodsInserted(this CoolingChallenge __self, Quest value) => _quest_rodsInserted.Value.SetValue(__self, value);
		public static Quest GetQuest_leverPulled(this CoolingChallenge __self) => _quest_leverPulled.Value.GetValue(__self);
		public static void SetQuest_leverPulled(this CoolingChallenge __self, Quest value) => _quest_leverPulled.Value.SetValue(__self, value);
		public static Quest GetQuest_reactorComplete(this CoolingChallenge __self) => _quest_reactorComplete.Value.GetValue(__self);
		public static void SetQuest_reactorComplete(this CoolingChallenge __self, Quest value) => _quest_reactorComplete.Value.SetValue(__self, value);
		public static UnityEngine.MaterialPropertyBlock GetMatPropBlock(this CoolingChallenge __self) => _matPropBlock.Value.GetValue(__self);
		public static void SetMatPropBlock(this CoolingChallenge __self, UnityEngine.MaterialPropertyBlock value) => _matPropBlock.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<CoolingChallenge>> _Awake757602046 =
				new System.Lazy<MethodAccessor<CoolingChallenge>>(() => MethodAccessor<CoolingChallenge>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<CoolingChallenge>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<CoolingChallenge>>(() => MethodAccessor<CoolingChallenge>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<CoolingChallenge>> _OnEnable757602046 =
				new System.Lazy<MethodAccessor<CoolingChallenge>>(() => MethodAccessor<CoolingChallenge>.Create("OnEnable"));
		private static readonly System.Lazy<MethodAccessor<CoolingChallenge>> _Update757602046 =
				new System.Lazy<MethodAccessor<CoolingChallenge>>(() => MethodAccessor<CoolingChallenge>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<CoolingChallenge>> _OnChildInteract3171859007 =
				new System.Lazy<MethodAccessor<CoolingChallenge>>(() => MethodAccessor<CoolingChallenge>.Create("OnChildInteract", typeof(int), typeof(bool), typeof(Network_Player), typeof(bool)));
		private static readonly System.Lazy<MethodAccessor<CoolingChallenge>> _SetScreenText3454057852 =
				new System.Lazy<MethodAccessor<CoolingChallenge>>(() => MethodAccessor<CoolingChallenge>.Create("SetScreenText", typeof(string)));
		private static readonly System.Lazy<MethodAccessor<CoolingChallenge>> _SetScreenTextColor3439585999 =
				new System.Lazy<MethodAccessor<CoolingChallenge>>(() => MethodAccessor<CoolingChallenge>.Create("SetScreenTextColor", typeof(UnityEngine.Color32)));
		private static readonly System.Lazy<MethodAccessor<CoolingChallenge>> _SetLeverShimmer3450040886 =
				new System.Lazy<MethodAccessor<CoolingChallenge>>(() => MethodAccessor<CoolingChallenge>.Create("SetLeverShimmer", typeof(bool)));
		private static readonly System.Lazy<MethodAccessor<CoolingChallenge>> _UpdateChallengeState757602046 =
				new System.Lazy<MethodAccessor<CoolingChallenge>>(() => MethodAccessor<CoolingChallenge>.Create("UpdateChallengeState"));
		private static readonly System.Lazy<MethodAccessor<CoolingChallenge>> _RefreshScreenTextDependingOnQuests757602046 =
				new System.Lazy<MethodAccessor<CoolingChallenge>>(() => MethodAccessor<CoolingChallenge>.Create("RefreshScreenTextDependingOnQuests"));
		private static readonly System.Lazy<MethodAccessor<CoolingChallenge>> _AllChildrenAtMaxStateIndex757602046 =
				new System.Lazy<MethodAccessor<CoolingChallenge>>(() => MethodAccessor<CoolingChallenge>.Create("AllChildrenAtMaxStateIndex"));
		private static readonly System.Lazy<MethodAccessor<CoolingChallenge>> _DisableRadiationZones757602046 =
				new System.Lazy<MethodAccessor<CoolingChallenge>>(() => MethodAccessor<CoolingChallenge>.Create("DisableRadiationZones"));
		private static readonly System.Lazy<MethodAccessor<CoolingChallenge>> _DisableRadiation757602046 =
				new System.Lazy<MethodAccessor<CoolingChallenge>>(() => MethodAccessor<CoolingChallenge>.Create("DisableRadiation"));
		private static readonly System.Lazy<MethodAccessor<CoolingChallenge>> _OnLeverInteract3171859007 =
				new System.Lazy<MethodAccessor<CoolingChallenge>>(() => MethodAccessor<CoolingChallenge>.Create("OnLeverInteract", typeof(int), typeof(bool), typeof(Network_Player), typeof(bool)));

		public static void Awake(this CoolingChallenge __self) => _Awake757602046.Value.Invoke(__self);
		public static void OnDestroy(this CoolingChallenge __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void OnEnable(this CoolingChallenge __self) => _OnEnable757602046.Value.Invoke(__self);
		public static void Update(this CoolingChallenge __self) => _Update757602046.Value.Invoke(__self);
		public static void OnChildInteract(this CoolingChallenge __self, int objectStateIndex, bool atStart, Network_Player player, bool success) => _OnChildInteract3171859007.Value.Invoke(__self, objectStateIndex, atStart, player, success);
		public static void SetScreenText(this CoolingChallenge __self, string term) => _SetScreenText3454057852.Value.Invoke(__self, term);
		public static void SetScreenTextColor(this CoolingChallenge __self, UnityEngine.Color32 color) => _SetScreenTextColor3439585999.Value.Invoke(__self, color);
		public static void SetLeverShimmer(this CoolingChallenge __self, bool shimmer) => _SetLeverShimmer3450040886.Value.Invoke(__self, shimmer);
		public static void UpdateChallengeState(this CoolingChallenge __self) => _UpdateChallengeState757602046.Value.Invoke(__self);
		public static void RefreshScreenTextDependingOnQuests(this CoolingChallenge __self) => _RefreshScreenTextDependingOnQuests757602046.Value.Invoke(__self);
		public static bool AllChildrenAtMaxStateIndex(this CoolingChallenge __self) => (bool)_AllChildrenAtMaxStateIndex757602046.Value.Invoke(__self);
		public static void DisableRadiationZones(this CoolingChallenge __self) => _DisableRadiationZones757602046.Value.Invoke(__self);
		public static void DisableRadiation(this CoolingChallenge __self) => _DisableRadiation757602046.Value.Invoke(__self);
		public static void OnLeverInteract(this CoolingChallenge __self, int id, bool atStart, Network_Player player, bool success) => _OnLeverInteract3171859007.Value.Invoke(__self, id, atStart, player, success);

	}

	public static class PrivateAccessor_Electricity_Challenge
	{

		private static readonly System.Lazy<MethodAccessor<Electricity_Challenge>> _Awake757602046 =
				new System.Lazy<MethodAccessor<Electricity_Challenge>>(() => MethodAccessor<Electricity_Challenge>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<Electricity_Challenge>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<Electricity_Challenge>>(() => MethodAccessor<Electricity_Challenge>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<Electricity_Challenge>> _OnDrawGizmos757602046 =
				new System.Lazy<MethodAccessor<Electricity_Challenge>>(() => MethodAccessor<Electricity_Challenge>.Create("OnDrawGizmos"));

		public static void Awake(this Electricity_Challenge __self) => _Awake757602046.Value.Invoke(__self);
		public static void OnDestroy(this Electricity_Challenge __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void OnDrawGizmos(this Electricity_Challenge __self) => _OnDrawGizmos757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Fight_Challenge_Selene
	{

		private static readonly System.Lazy<FieldAccessor<Fight_Challenge_Selene, float>> _holdProgress =
				new System.Lazy<FieldAccessor<Fight_Challenge_Selene, float>>(() => FieldAccessor<Fight_Challenge_Selene, float>.Create("holdProgress"));
		private static readonly System.Lazy<FieldAccessor<Fight_Challenge_Selene, string>> _interactionButton =
				new System.Lazy<FieldAccessor<Fight_Challenge_Selene, string>>(() => FieldAccessor<Fight_Challenge_Selene, string>.Create("interactionButton"));
		private static readonly System.Lazy<FieldAccessor<Fight_Challenge_Selene, float>> _holdDuration =
				new System.Lazy<FieldAccessor<Fight_Challenge_Selene, float>>(() => FieldAccessor<Fight_Challenge_Selene, float>.Create("holdDuration"));
		private static readonly System.Lazy<FieldAccessor<Fight_Challenge_Selene, float>> _durationBetweenSpawn =
				new System.Lazy<FieldAccessor<Fight_Challenge_Selene, float>>(() => FieldAccessor<Fight_Challenge_Selene, float>.Create("durationBetweenSpawn"));
		private static readonly System.Lazy<FieldAccessor<Fight_Challenge_Selene, bool>> _resetHeldDurationOnRelease =
				new System.Lazy<FieldAccessor<Fight_Challenge_Selene, bool>>(() => FieldAccessor<Fight_Challenge_Selene, bool>.Create("resetHeldDurationOnRelease"));
		private static readonly System.Lazy<FieldAccessor<Fight_Challenge_Selene, UnityEngine.Animator>> _doorAnimator =
				new System.Lazy<FieldAccessor<Fight_Challenge_Selene, UnityEngine.Animator>>(() => FieldAccessor<Fight_Challenge_Selene, UnityEngine.Animator>.Create("doorAnimator"));
		private static readonly System.Lazy<FieldAccessor<Fight_Challenge_Selene, UnityEngine.Animator[]>> _doorProgressAnimators =
				new System.Lazy<FieldAccessor<Fight_Challenge_Selene, UnityEngine.Animator[]>>(() => FieldAccessor<Fight_Challenge_Selene, UnityEngine.Animator[]>.Create("doorProgressAnimators"));
		private static readonly System.Lazy<FieldAccessor<Fight_Challenge_Selene, LandmarkEntityCollection>> _spawner =
				new System.Lazy<FieldAccessor<Fight_Challenge_Selene, LandmarkEntityCollection>>(() => FieldAccessor<Fight_Challenge_Selene, LandmarkEntityCollection>.Create("spawner"));
		private static readonly System.Lazy<FieldAccessor<Fight_Challenge_Selene, UnityEngine.GameObject>> _lights =
				new System.Lazy<FieldAccessor<Fight_Challenge_Selene, UnityEngine.GameObject>>(() => FieldAccessor<Fight_Challenge_Selene, UnityEngine.GameObject>.Create("lights"));
		private static readonly System.Lazy<FieldAccessor<Fight_Challenge_Selene, UnityEngine.MeshRenderer[]>> _shimmerRenderers =
				new System.Lazy<FieldAccessor<Fight_Challenge_Selene, UnityEngine.MeshRenderer[]>>(() => FieldAccessor<Fight_Challenge_Selene, UnityEngine.MeshRenderer[]>.Create("shimmerRenderers"));
		private static readonly System.Lazy<FieldAccessor<Fight_Challenge_Selene, FMODUnity.StudioEventEmitter>> _emitter_handleSpin =
				new System.Lazy<FieldAccessor<Fight_Challenge_Selene, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<Fight_Challenge_Selene, FMODUnity.StudioEventEmitter>.Create("emitter_handleSpin"));
		private static readonly System.Lazy<FieldAccessor<Fight_Challenge_Selene, FMODUnity.StudioEventEmitter>> _emitter_doorClose =
				new System.Lazy<FieldAccessor<Fight_Challenge_Selene, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<Fight_Challenge_Selene, FMODUnity.StudioEventEmitter>.Create("emitter_doorClose"));
		private static readonly System.Lazy<FieldAccessor<Fight_Challenge_Selene, FMODUnity.StudioEventEmitter>> _emitter_doorComplete =
				new System.Lazy<FieldAccessor<Fight_Challenge_Selene, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<Fight_Challenge_Selene, FMODUnity.StudioEventEmitter>.Create("emitter_doorComplete"));
		private static readonly System.Lazy<FieldAccessor<Fight_Challenge_Selene, FMODUnity.StudioEventEmitter>> _emitter_doorOpen =
				new System.Lazy<FieldAccessor<Fight_Challenge_Selene, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<Fight_Challenge_Selene, FMODUnity.StudioEventEmitter>.Create("emitter_doorOpen"));
		private static readonly System.Lazy<FieldAccessor<Fight_Challenge_Selene, AnimatorMessageForwarder>> _animatorMessage =
				new System.Lazy<FieldAccessor<Fight_Challenge_Selene, AnimatorMessageForwarder>>(() => FieldAccessor<Fight_Challenge_Selene, AnimatorMessageForwarder>.Create("animatorMessage"));
		private static readonly System.Lazy<FieldAccessor<Fight_Challenge_Selene, bool>> _isHeld =
				new System.Lazy<FieldAccessor<Fight_Challenge_Selene, bool>>(() => FieldAccessor<Fight_Challenge_Selene, bool>.Create("isHeld"));
		private static readonly System.Lazy<FieldAccessor<Fight_Challenge_Selene, Steamworks.CSteamID>> _holdingPlayerID =
				new System.Lazy<FieldAccessor<Fight_Challenge_Selene, Steamworks.CSteamID>>(() => FieldAccessor<Fight_Challenge_Selene, Steamworks.CSteamID>.Create("holdingPlayerID"));
		private static readonly System.Lazy<FieldAccessor<Fight_Challenge_Selene, Raft_Network>> _network =
				new System.Lazy<FieldAccessor<Fight_Challenge_Selene, Raft_Network>>(() => FieldAccessor<Fight_Challenge_Selene, Raft_Network>.Create("network"));
		private static readonly System.Lazy<FieldAccessor<Fight_Challenge_Selene, CanvasHelper>> _canvasHelper =
				new System.Lazy<FieldAccessor<Fight_Challenge_Selene, CanvasHelper>>(() => FieldAccessor<Fight_Challenge_Selene, CanvasHelper>.Create("canvasHelper"));
		private static readonly System.Lazy<FieldAccessor<Fight_Challenge_Selene, UnityEngine.MaterialPropertyBlock>> _matPropBlock =
				new System.Lazy<FieldAccessor<Fight_Challenge_Selene, UnityEngine.MaterialPropertyBlock>>(() => FieldAccessor<Fight_Challenge_Selene, UnityEngine.MaterialPropertyBlock>.Create("matPropBlock"));

		public static float GetHoldProgress(this Fight_Challenge_Selene __self) => _holdProgress.Value.GetValue(__self);
		public static void SetHoldProgress(this Fight_Challenge_Selene __self, float value) => _holdProgress.Value.SetValue(__self, value);
		public static string GetInteractionButton(this Fight_Challenge_Selene __self) => _interactionButton.Value.GetValue(__self);
		public static void SetInteractionButton(this Fight_Challenge_Selene __self, string value) => _interactionButton.Value.SetValue(__self, value);
		public static float GetHoldDuration(this Fight_Challenge_Selene __self) => _holdDuration.Value.GetValue(__self);
		public static void SetHoldDuration(this Fight_Challenge_Selene __self, float value) => _holdDuration.Value.SetValue(__self, value);
		public static float GetDurationBetweenSpawn(this Fight_Challenge_Selene __self) => _durationBetweenSpawn.Value.GetValue(__self);
		public static void SetDurationBetweenSpawn(this Fight_Challenge_Selene __self, float value) => _durationBetweenSpawn.Value.SetValue(__self, value);
		public static bool GetResetHeldDurationOnRelease(this Fight_Challenge_Selene __self) => _resetHeldDurationOnRelease.Value.GetValue(__self);
		public static void SetResetHeldDurationOnRelease(this Fight_Challenge_Selene __self, bool value) => _resetHeldDurationOnRelease.Value.SetValue(__self, value);
		public static UnityEngine.Animator GetDoorAnimator(this Fight_Challenge_Selene __self) => _doorAnimator.Value.GetValue(__self);
		public static void SetDoorAnimator(this Fight_Challenge_Selene __self, UnityEngine.Animator value) => _doorAnimator.Value.SetValue(__self, value);
		public static UnityEngine.Animator[] GetDoorProgressAnimators(this Fight_Challenge_Selene __self) => _doorProgressAnimators.Value.GetValue(__self);
		public static void SetDoorProgressAnimators(this Fight_Challenge_Selene __self, UnityEngine.Animator[] value) => _doorProgressAnimators.Value.SetValue(__self, value);
		public static LandmarkEntityCollection GetSpawner(this Fight_Challenge_Selene __self) => _spawner.Value.GetValue(__self);
		public static void SetSpawner(this Fight_Challenge_Selene __self, LandmarkEntityCollection value) => _spawner.Value.SetValue(__self, value);
		public static UnityEngine.GameObject GetLights(this Fight_Challenge_Selene __self) => _lights.Value.GetValue(__self);
		public static void SetLights(this Fight_Challenge_Selene __self, UnityEngine.GameObject value) => _lights.Value.SetValue(__self, value);
		public static UnityEngine.MeshRenderer[] GetShimmerRenderers(this Fight_Challenge_Selene __self) => _shimmerRenderers.Value.GetValue(__self);
		public static void SetShimmerRenderers(this Fight_Challenge_Selene __self, UnityEngine.MeshRenderer[] value) => _shimmerRenderers.Value.SetValue(__self, value);
		public static FMODUnity.StudioEventEmitter GetEmitter_handleSpin(this Fight_Challenge_Selene __self) => _emitter_handleSpin.Value.GetValue(__self);
		public static void SetEmitter_handleSpin(this Fight_Challenge_Selene __self, FMODUnity.StudioEventEmitter value) => _emitter_handleSpin.Value.SetValue(__self, value);
		public static FMODUnity.StudioEventEmitter GetEmitter_doorClose(this Fight_Challenge_Selene __self) => _emitter_doorClose.Value.GetValue(__self);
		public static void SetEmitter_doorClose(this Fight_Challenge_Selene __self, FMODUnity.StudioEventEmitter value) => _emitter_doorClose.Value.SetValue(__self, value);
		public static FMODUnity.StudioEventEmitter GetEmitter_doorComplete(this Fight_Challenge_Selene __self) => _emitter_doorComplete.Value.GetValue(__self);
		public static void SetEmitter_doorComplete(this Fight_Challenge_Selene __self, FMODUnity.StudioEventEmitter value) => _emitter_doorComplete.Value.SetValue(__self, value);
		public static FMODUnity.StudioEventEmitter GetEmitter_doorOpen(this Fight_Challenge_Selene __self) => _emitter_doorOpen.Value.GetValue(__self);
		public static void SetEmitter_doorOpen(this Fight_Challenge_Selene __self, FMODUnity.StudioEventEmitter value) => _emitter_doorOpen.Value.SetValue(__self, value);
		public static AnimatorMessageForwarder GetAnimatorMessage(this Fight_Challenge_Selene __self) => _animatorMessage.Value.GetValue(__self);
		public static void SetAnimatorMessage(this Fight_Challenge_Selene __self, AnimatorMessageForwarder value) => _animatorMessage.Value.SetValue(__self, value);
		public static bool GetIsHeld(this Fight_Challenge_Selene __self) => _isHeld.Value.GetValue(__self);
		public static void SetIsHeld(this Fight_Challenge_Selene __self, bool value) => _isHeld.Value.SetValue(__self, value);
		public static Steamworks.CSteamID GetHoldingPlayerID(this Fight_Challenge_Selene __self) => _holdingPlayerID.Value.GetValue(__self);
		public static void SetHoldingPlayerID(this Fight_Challenge_Selene __self, Steamworks.CSteamID value) => _holdingPlayerID.Value.SetValue(__self, value);
		public static Raft_Network GetNetwork(this Fight_Challenge_Selene __self) => _network.Value.GetValue(__self);
		public static void SetNetwork(this Fight_Challenge_Selene __self, Raft_Network value) => _network.Value.SetValue(__self, value);
		public static CanvasHelper GetCanvasHelper(this Fight_Challenge_Selene __self) => _canvasHelper.Value.GetValue(__self);
		public static void SetCanvasHelper(this Fight_Challenge_Selene __self, CanvasHelper value) => _canvasHelper.Value.SetValue(__self, value);
		public static UnityEngine.MaterialPropertyBlock GetMatPropBlock(this Fight_Challenge_Selene __self) => _matPropBlock.Value.GetValue(__self);
		public static void SetMatPropBlock(this Fight_Challenge_Selene __self, UnityEngine.MaterialPropertyBlock value) => _matPropBlock.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Fight_Challenge_Selene>> _Start757602046 =
				new System.Lazy<MethodAccessor<Fight_Challenge_Selene>>(() => MethodAccessor<Fight_Challenge_Selene>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<Fight_Challenge_Selene>> _Update757602046 =
				new System.Lazy<MethodAccessor<Fight_Challenge_Selene>>(() => MethodAccessor<Fight_Challenge_Selene>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<Fight_Challenge_Selene>> _OnAnimatorMessage3454057852 =
				new System.Lazy<MethodAccessor<Fight_Challenge_Selene>>(() => MethodAccessor<Fight_Challenge_Selene>.Create("OnAnimatorMessage", typeof(string)));
		private static readonly System.Lazy<MethodAccessor<Fight_Challenge_Selene>> _SetShimmerState3450040886 =
				new System.Lazy<MethodAccessor<Fight_Challenge_Selene>>(() => MethodAccessor<Fight_Challenge_Selene>.Create("SetShimmerState", typeof(bool)));
		private static readonly System.Lazy<MethodAccessor<Fight_Challenge_Selene>> _UpdateUIChannelRing3486905475 =
				new System.Lazy<MethodAccessor<Fight_Challenge_Selene>>(() => MethodAccessor<Fight_Challenge_Selene>.Create("UpdateUIChannelRing", typeof(float)));
		private static readonly System.Lazy<MethodAccessor<Fight_Challenge_Selene>> _Held757602046 =
				new System.Lazy<MethodAccessor<Fight_Challenge_Selene>>(() => MethodAccessor<Fight_Challenge_Selene>.Create("Held"));
		private static readonly System.Lazy<MethodAccessor<Fight_Challenge_Selene>> _NotHeld757602046 =
				new System.Lazy<MethodAccessor<Fight_Challenge_Selene>>(() => MethodAccessor<Fight_Challenge_Selene>.Create("NotHeld"));
		private static readonly System.Lazy<MethodAccessor<Fight_Challenge_Selene>> _FirstInteractionSpawn757602046 =
				new System.Lazy<MethodAccessor<Fight_Challenge_Selene>>(() => MethodAccessor<Fight_Challenge_Selene>.Create("FirstInteractionSpawn"));
		private static readonly System.Lazy<MethodAccessor<Fight_Challenge_Selene>> _HandleDoorProgressAnimators3486905475 =
				new System.Lazy<MethodAccessor<Fight_Challenge_Selene>>(() => MethodAccessor<Fight_Challenge_Selene>.Create("HandleDoorProgressAnimators", typeof(float)));
		private static readonly System.Lazy<MethodAccessor<Fight_Challenge_Selene>> _SetDoorProgressAnimatorsTime3486905475 =
				new System.Lazy<MethodAccessor<Fight_Challenge_Selene>>(() => MethodAccessor<Fight_Challenge_Selene>.Create("SetDoorProgressAnimatorsTime", typeof(float)));

		public static void Start(this Fight_Challenge_Selene __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this Fight_Challenge_Selene __self) => _Update757602046.Value.Invoke(__self);
		public static void OnAnimatorMessage(this Fight_Challenge_Selene __self, string msg) => _OnAnimatorMessage3454057852.Value.Invoke(__self, msg);
		public static void SetShimmerState(this Fight_Challenge_Selene __self, bool shimmer) => _SetShimmerState3450040886.Value.Invoke(__self, shimmer);
		public static void UpdateUIChannelRing(this Fight_Challenge_Selene __self, float normalizedFill) => _UpdateUIChannelRing3486905475.Value.Invoke(__self, normalizedFill);
		public static void Held(this Fight_Challenge_Selene __self) => _Held757602046.Value.Invoke(__self);
		public static void NotHeld(this Fight_Challenge_Selene __self) => _NotHeld757602046.Value.Invoke(__self);
		public static System.Collections.IEnumerator FirstInteractionSpawn(this Fight_Challenge_Selene __self) => (System.Collections.IEnumerator)_FirstInteractionSpawn757602046.Value.Invoke(__self);
		public static void HandleDoorProgressAnimators(this Fight_Challenge_Selene __self, float speed) => _HandleDoorProgressAnimators3486905475.Value.Invoke(__self, speed);
		public static void SetDoorProgressAnimatorsTime(this Fight_Challenge_Selene __self, float normalizedtime) => _SetDoorProgressAnimatorsTime3486905475.Value.Invoke(__self, normalizedtime);

	}

	public static class PrivateAccessor_HazmatSuitLocker
	{

		private static readonly System.Lazy<FieldAccessor<HazmatSuitLocker, UnityEngine.Animator>> _lockerAnimator =
				new System.Lazy<FieldAccessor<HazmatSuitLocker, UnityEngine.Animator>>(() => FieldAccessor<HazmatSuitLocker, UnityEngine.Animator>.Create("lockerAnimator"));
		private static readonly System.Lazy<FieldAccessor<HazmatSuitLocker, float>> _channelTime =
				new System.Lazy<FieldAccessor<HazmatSuitLocker, float>>(() => FieldAccessor<HazmatSuitLocker, float>.Create("channelTime"));
		private static readonly System.Lazy<FieldAccessor<HazmatSuitLocker, AnimatorMessageForwarder>> _animatorMessage =
				new System.Lazy<FieldAccessor<HazmatSuitLocker, AnimatorMessageForwarder>>(() => FieldAccessor<HazmatSuitLocker, AnimatorMessageForwarder>.Create("animatorMessage"));
		private static readonly System.Lazy<FieldAccessor<HazmatSuitLocker, string>> _eventRef_open =
				new System.Lazy<FieldAccessor<HazmatSuitLocker, string>>(() => FieldAccessor<HazmatSuitLocker, string>.Create("eventRef_open"));
		private static readonly System.Lazy<FieldAccessor<HazmatSuitLocker, string>> _eventRef_close =
				new System.Lazy<FieldAccessor<HazmatSuitLocker, string>>(() => FieldAccessor<HazmatSuitLocker, string>.Create("eventRef_close"));
		private static readonly System.Lazy<FieldAccessor<HazmatSuitLocker, float>> _currentChannelProgress =
				new System.Lazy<FieldAccessor<HazmatSuitLocker, float>>(() => FieldAccessor<HazmatSuitLocker, float>.Create("currentChannelProgress"));
		private static readonly System.Lazy<FieldAccessor<HazmatSuitLocker, CanvasHelper>> _canvasHelper =
				new System.Lazy<FieldAccessor<HazmatSuitLocker, CanvasHelper>>(() => FieldAccessor<HazmatSuitLocker, CanvasHelper>.Create("canvasHelper"));
		private static readonly System.Lazy<FieldAccessor<HazmatSuitLocker, bool>> _used =
				new System.Lazy<FieldAccessor<HazmatSuitLocker, bool>>(() => FieldAccessor<HazmatSuitLocker, bool>.Create("used"));

		public static UnityEngine.Animator GetLockerAnimator(this HazmatSuitLocker __self) => _lockerAnimator.Value.GetValue(__self);
		public static void SetLockerAnimator(this HazmatSuitLocker __self, UnityEngine.Animator value) => _lockerAnimator.Value.SetValue(__self, value);
		public static float GetChannelTime(this HazmatSuitLocker __self) => _channelTime.Value.GetValue(__self);
		public static void SetChannelTime(this HazmatSuitLocker __self, float value) => _channelTime.Value.SetValue(__self, value);
		public static AnimatorMessageForwarder GetAnimatorMessage(this HazmatSuitLocker __self) => _animatorMessage.Value.GetValue(__self);
		public static void SetAnimatorMessage(this HazmatSuitLocker __self, AnimatorMessageForwarder value) => _animatorMessage.Value.SetValue(__self, value);
		public static string GetEventRef_open(this HazmatSuitLocker __self) => _eventRef_open.Value.GetValue(__self);
		public static void SetEventRef_open(this HazmatSuitLocker __self, string value) => _eventRef_open.Value.SetValue(__self, value);
		public static string GetEventRef_close(this HazmatSuitLocker __self) => _eventRef_close.Value.GetValue(__self);
		public static void SetEventRef_close(this HazmatSuitLocker __self, string value) => _eventRef_close.Value.SetValue(__self, value);
		public static float GetCurrentChannelProgress(this HazmatSuitLocker __self) => _currentChannelProgress.Value.GetValue(__self);
		public static void SetCurrentChannelProgress(this HazmatSuitLocker __self, float value) => _currentChannelProgress.Value.SetValue(__self, value);
		public static CanvasHelper GetCanvasHelper(this HazmatSuitLocker __self) => _canvasHelper.Value.GetValue(__self);
		public static void SetCanvasHelper(this HazmatSuitLocker __self, CanvasHelper value) => _canvasHelper.Value.SetValue(__self, value);
		public static bool GetUsed(this HazmatSuitLocker __self) => _used.Value.GetValue(__self);
		public static void SetUsed(this HazmatSuitLocker __self, bool value) => _used.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<HazmatSuitLocker>> _Start757602046 =
				new System.Lazy<MethodAccessor<HazmatSuitLocker>>(() => MethodAccessor<HazmatSuitLocker>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<HazmatSuitLocker>> _OnAnimatorMessage3454057852 =
				new System.Lazy<MethodAccessor<HazmatSuitLocker>>(() => MethodAccessor<HazmatSuitLocker>.Create("OnAnimatorMessage", typeof(string)));
		private static readonly System.Lazy<MethodAccessor<HazmatSuitLocker>> _ProgressChannel3486905475 =
				new System.Lazy<MethodAccessor<HazmatSuitLocker>>(() => MethodAccessor<HazmatSuitLocker>.Create("ProgressChannel", typeof(float)));
		private static readonly System.Lazy<MethodAccessor<HazmatSuitLocker>> _CancelChannel757602046 =
				new System.Lazy<MethodAccessor<HazmatSuitLocker>>(() => MethodAccessor<HazmatSuitLocker>.Create("CancelChannel"));
		private static readonly System.Lazy<MethodAccessor<HazmatSuitLocker>> _UpdateUIChannelRing3486905475 =
				new System.Lazy<MethodAccessor<HazmatSuitLocker>>(() => MethodAccessor<HazmatSuitLocker>.Create("UpdateUIChannelRing", typeof(float)));
		private static readonly System.Lazy<MethodAccessor<HazmatSuitLocker>> _ResetUsed757602046 =
				new System.Lazy<MethodAccessor<HazmatSuitLocker>>(() => MethodAccessor<HazmatSuitLocker>.Create("ResetUsed"));

		public static void Start(this HazmatSuitLocker __self) => _Start757602046.Value.Invoke(__self);
		public static void OnAnimatorMessage(this HazmatSuitLocker __self, string msg) => _OnAnimatorMessage3454057852.Value.Invoke(__self, msg);
		public static void ProgressChannel(this HazmatSuitLocker __self, float time) => _ProgressChannel3486905475.Value.Invoke(__self, time);
		public static void CancelChannel(this HazmatSuitLocker __self) => _CancelChannel757602046.Value.Invoke(__self);
		public static void UpdateUIChannelRing(this HazmatSuitLocker __self, float normalizedFill) => _UpdateUIChannelRing3486905475.Value.Invoke(__self, normalizedFill);
		public static void ResetUsed(this HazmatSuitLocker __self) => _ResetUsed757602046.Value.Invoke(__self);

	}

	public static class Private_HazmatSuitLocker
	{

		private static readonly System.Lazy<StaticFieldAccessor<DisplayTextManager>> _displayText =
				new System.Lazy<StaticFieldAccessor<DisplayTextManager>>(() => StaticFieldAccessor<DisplayTextManager>.Create(typeof(HazmatSuitLocker), "displayText"));
		private static readonly System.Lazy<StaticFieldAccessor<Network_Player>> _localPlayer =
				new System.Lazy<StaticFieldAccessor<Network_Player>>(() => StaticFieldAccessor<Network_Player>.Create(typeof(HazmatSuitLocker), "localPlayer"));

		public static DisplayTextManager GetDisplayText() => _displayText.Value.GetValue();
		public static void SetDisplayText(DisplayTextManager value) => _displayText.Value.SetValue(value);
		public static Network_Player GetLocalPlayer() => _localPlayer.Value.GetValue();
		public static void SetLocalPlayer(Network_Player value) => _localPlayer.Value.SetValue(value);

	}

	public static class PrivateAccessor_Keypad_ComputerChallenge
	{

		private static readonly System.Lazy<FieldAccessor<Keypad_ComputerChallenge, bool>> _codeCompleted =
				new System.Lazy<FieldAccessor<Keypad_ComputerChallenge, bool>>(() => FieldAccessor<Keypad_ComputerChallenge, bool>.Create("codeCompleted"));
		private static readonly System.Lazy<FieldAccessor<Keypad_ComputerChallenge, UnityEngine.GameObject>> _lamp_red =
				new System.Lazy<FieldAccessor<Keypad_ComputerChallenge, UnityEngine.GameObject>>(() => FieldAccessor<Keypad_ComputerChallenge, UnityEngine.GameObject>.Create("lamp_red"));
		private static readonly System.Lazy<FieldAccessor<Keypad_ComputerChallenge, UnityEngine.GameObject>> _lamp_green =
				new System.Lazy<FieldAccessor<Keypad_ComputerChallenge, UnityEngine.GameObject>>(() => FieldAccessor<Keypad_ComputerChallenge, UnityEngine.GameObject>.Create("lamp_green"));
		private static readonly System.Lazy<FieldAccessor<Keypad_ComputerChallenge, UnityEngine.GameObject>> _codeUnderline =
				new System.Lazy<FieldAccessor<Keypad_ComputerChallenge, UnityEngine.GameObject>>(() => FieldAccessor<Keypad_ComputerChallenge, UnityEngine.GameObject>.Create("codeUnderline"));
		private static readonly System.Lazy<FieldAccessor<Keypad_ComputerChallenge, TMPro.TextMeshPro>> _timerTextMesh =
				new System.Lazy<FieldAccessor<Keypad_ComputerChallenge, TMPro.TextMeshPro>>(() => FieldAccessor<Keypad_ComputerChallenge, TMPro.TextMeshPro>.Create("timerTextMesh"));

		public static bool GetCodeCompleted(this Keypad_ComputerChallenge __self) => _codeCompleted.Value.GetValue(__self);
		public static void SetCodeCompleted(this Keypad_ComputerChallenge __self, bool value) => _codeCompleted.Value.SetValue(__self, value);
		public static UnityEngine.GameObject GetLamp_red(this Keypad_ComputerChallenge __self) => _lamp_red.Value.GetValue(__self);
		public static void SetLamp_red(this Keypad_ComputerChallenge __self, UnityEngine.GameObject value) => _lamp_red.Value.SetValue(__self, value);
		public static UnityEngine.GameObject GetLamp_green(this Keypad_ComputerChallenge __self) => _lamp_green.Value.GetValue(__self);
		public static void SetLamp_green(this Keypad_ComputerChallenge __self, UnityEngine.GameObject value) => _lamp_green.Value.SetValue(__self, value);
		public static UnityEngine.GameObject GetCodeUnderline(this Keypad_ComputerChallenge __self) => _codeUnderline.Value.GetValue(__self);
		public static void SetCodeUnderline(this Keypad_ComputerChallenge __self, UnityEngine.GameObject value) => _codeUnderline.Value.SetValue(__self, value);
		public static TMPro.TextMeshPro GetTimerTextMesh(this Keypad_ComputerChallenge __self) => _timerTextMesh.Value.GetValue(__self);
		public static void SetTimerTextMesh(this Keypad_ComputerChallenge __self, TMPro.TextMeshPro value) => _timerTextMesh.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Keypad_ComputerChallenge>> _Update757602046 =
				new System.Lazy<MethodAccessor<Keypad_ComputerChallenge>>(() => MethodAccessor<Keypad_ComputerChallenge>.Create("Update"));

		public static void Update(this Keypad_ComputerChallenge __self) => _Update757602046.Value.Invoke(__self);

	}

	public static class Private_Keypad_ComputerChallenge
	{

		private static readonly System.Lazy<StaticFieldAccessor<ComputerChallenge>> _challenge =
				new System.Lazy<StaticFieldAccessor<ComputerChallenge>>(() => StaticFieldAccessor<ComputerChallenge>.Create(typeof(Keypad_ComputerChallenge), "challenge"));

		public static ComputerChallenge GetChallenge() => _challenge.Value.GetValue();
		public static void SetChallenge(ComputerChallenge value) => _challenge.Value.SetValue(value);

	}

	public static class PrivateAccessor_RadiationZone
	{

		private static readonly System.Lazy<FieldAccessor<RadiationZone, FMODUnity.StudioEventEmitter>> _emitter_radiation =
				new System.Lazy<FieldAccessor<RadiationZone, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<RadiationZone, FMODUnity.StudioEventEmitter>.Create("emitter_radiation"));

		public static FMODUnity.StudioEventEmitter GetEmitter_radiation(this RadiationZone __self) => _emitter_radiation.Value.GetValue(__self);
		public static void SetEmitter_radiation(this RadiationZone __self, FMODUnity.StudioEventEmitter value) => _emitter_radiation.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<RadiationZone>> _Update757602046 =
				new System.Lazy<MethodAccessor<RadiationZone>>(() => MethodAccessor<RadiationZone>.Create("Update"));

		public static void Update(this RadiationZone __self) => _Update757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Reactor_Challenge_Selene
	{

		private static readonly System.Lazy<FieldAccessor<Reactor_Challenge_Selene, Fight_Challenge_Selene[]>> _cranks =
				new System.Lazy<FieldAccessor<Reactor_Challenge_Selene, Fight_Challenge_Selene[]>>(() => FieldAccessor<Reactor_Challenge_Selene, Fight_Challenge_Selene[]>.Create("cranks"));
		private static readonly System.Lazy<FieldAccessor<Reactor_Challenge_Selene, QuestType>> _questToCompleteWholeReactor =
				new System.Lazy<FieldAccessor<Reactor_Challenge_Selene, QuestType>>(() => FieldAccessor<Reactor_Challenge_Selene, QuestType>.Create("questToCompleteWholeReactor"));
		private static readonly System.Lazy<FieldAccessor<Reactor_Challenge_Selene, QuestInteractable>> _interactableDoor =
				new System.Lazy<FieldAccessor<Reactor_Challenge_Selene, QuestInteractable>>(() => FieldAccessor<Reactor_Challenge_Selene, QuestInteractable>.Create("interactableDoor"));
		private static readonly System.Lazy<FieldAccessor<Reactor_Challenge_Selene, UnityEngine.ParticleSystem>> _coolingParticle =
				new System.Lazy<FieldAccessor<Reactor_Challenge_Selene, UnityEngine.ParticleSystem>>(() => FieldAccessor<Reactor_Challenge_Selene, UnityEngine.ParticleSystem>.Create("coolingParticle"));
		private static readonly System.Lazy<FieldAccessor<Reactor_Challenge_Selene, UnityEngine.ParticleSystem>> _radiationBubblingParticles =
				new System.Lazy<FieldAccessor<Reactor_Challenge_Selene, UnityEngine.ParticleSystem>>(() => FieldAccessor<Reactor_Challenge_Selene, UnityEngine.ParticleSystem>.Create("radiationBubblingParticles"));
		private static readonly System.Lazy<FieldAccessor<Reactor_Challenge_Selene, EnvironmentLightAffector>> _radiationLightAffector =
				new System.Lazy<FieldAccessor<Reactor_Challenge_Selene, EnvironmentLightAffector>>(() => FieldAccessor<Reactor_Challenge_Selene, EnvironmentLightAffector>.Create("radiationLightAffector"));
		private static readonly System.Lazy<FieldAccessor<Reactor_Challenge_Selene, float>> _fadeWaterTime =
				new System.Lazy<FieldAccessor<Reactor_Challenge_Selene, float>>(() => FieldAccessor<Reactor_Challenge_Selene, float>.Create("fadeWaterTime"));
		private static readonly System.Lazy<FieldAccessor<Reactor_Challenge_Selene, float>> _fadeLightTime =
				new System.Lazy<FieldAccessor<Reactor_Challenge_Selene, float>>(() => FieldAccessor<Reactor_Challenge_Selene, float>.Create("fadeLightTime"));
		private static readonly System.Lazy<FieldAccessor<Reactor_Challenge_Selene, UnityEngine.MeshRenderer>> _radiatedWaterRenderer =
				new System.Lazy<FieldAccessor<Reactor_Challenge_Selene, UnityEngine.MeshRenderer>>(() => FieldAccessor<Reactor_Challenge_Selene, UnityEngine.MeshRenderer>.Create("radiatedWaterRenderer"));
		private static readonly System.Lazy<FieldAccessor<Reactor_Challenge_Selene, UnityEngine.Color>> _radiatedColor =
				new System.Lazy<FieldAccessor<Reactor_Challenge_Selene, UnityEngine.Color>>(() => FieldAccessor<Reactor_Challenge_Selene, UnityEngine.Color>.Create("radiatedColor"));
		private static readonly System.Lazy<FieldAccessor<Reactor_Challenge_Selene, UnityEngine.Color>> _radiatedFresnel =
				new System.Lazy<FieldAccessor<Reactor_Challenge_Selene, UnityEngine.Color>>(() => FieldAccessor<Reactor_Challenge_Selene, UnityEngine.Color>.Create("radiatedFresnel"));
		private static readonly System.Lazy<FieldAccessor<Reactor_Challenge_Selene, UnityEngine.Color>> _radiatedFoam =
				new System.Lazy<FieldAccessor<Reactor_Challenge_Selene, UnityEngine.Color>>(() => FieldAccessor<Reactor_Challenge_Selene, UnityEngine.Color>.Create("radiatedFoam"));
		private static readonly System.Lazy<FieldAccessor<Reactor_Challenge_Selene, UnityEngine.Color>> _radiatedEmission =
				new System.Lazy<FieldAccessor<Reactor_Challenge_Selene, UnityEngine.Color>>(() => FieldAccessor<Reactor_Challenge_Selene, UnityEngine.Color>.Create("radiatedEmission"));
		private static readonly System.Lazy<FieldAccessor<Reactor_Challenge_Selene, UnityEngine.Color>> _cleanColor =
				new System.Lazy<FieldAccessor<Reactor_Challenge_Selene, UnityEngine.Color>>(() => FieldAccessor<Reactor_Challenge_Selene, UnityEngine.Color>.Create("cleanColor"));
		private static readonly System.Lazy<FieldAccessor<Reactor_Challenge_Selene, UnityEngine.Color>> _cleanFresnel =
				new System.Lazy<FieldAccessor<Reactor_Challenge_Selene, UnityEngine.Color>>(() => FieldAccessor<Reactor_Challenge_Selene, UnityEngine.Color>.Create("cleanFresnel"));
		private static readonly System.Lazy<FieldAccessor<Reactor_Challenge_Selene, UnityEngine.Color>> _cleanFoam =
				new System.Lazy<FieldAccessor<Reactor_Challenge_Selene, UnityEngine.Color>>(() => FieldAccessor<Reactor_Challenge_Selene, UnityEngine.Color>.Create("cleanFoam"));
		private static readonly System.Lazy<FieldAccessor<Reactor_Challenge_Selene, UnityEngine.Color>> _cleanEmission =
				new System.Lazy<FieldAccessor<Reactor_Challenge_Selene, UnityEngine.Color>>(() => FieldAccessor<Reactor_Challenge_Selene, UnityEngine.Color>.Create("cleanEmission"));
		private static readonly System.Lazy<FieldAccessor<Reactor_Challenge_Selene, FMODUnity.StudioEventEmitter>> _emitter_reactorBottom =
				new System.Lazy<FieldAccessor<Reactor_Challenge_Selene, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<Reactor_Challenge_Selene, FMODUnity.StudioEventEmitter>.Create("emitter_reactorBottom"));
		private static readonly System.Lazy<FieldAccessor<Reactor_Challenge_Selene, FMODUnity.StudioEventEmitter>> _emitter_reactorTop =
				new System.Lazy<FieldAccessor<Reactor_Challenge_Selene, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<Reactor_Challenge_Selene, FMODUnity.StudioEventEmitter>.Create("emitter_reactorTop"));
		private static readonly System.Lazy<FieldAccessor<Reactor_Challenge_Selene, FMODUnity.StudioEventEmitter>> _emitter_coolDown =
				new System.Lazy<FieldAccessor<Reactor_Challenge_Selene, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<Reactor_Challenge_Selene, FMODUnity.StudioEventEmitter>.Create("emitter_coolDown"));
		private static readonly System.Lazy<FieldAccessor<Reactor_Challenge_Selene, bool>> _isCompleted =
				new System.Lazy<FieldAccessor<Reactor_Challenge_Selene, bool>>(() => FieldAccessor<Reactor_Challenge_Selene, bool>.Create("isCompleted"));
		private static readonly System.Lazy<FieldAccessor<Reactor_Challenge_Selene, UnityEngine.MaterialPropertyBlock>> _matProp =
				new System.Lazy<FieldAccessor<Reactor_Challenge_Selene, UnityEngine.MaterialPropertyBlock>>(() => FieldAccessor<Reactor_Challenge_Selene, UnityEngine.MaterialPropertyBlock>.Create("matProp"));

		public static Fight_Challenge_Selene[] GetCranks(this Reactor_Challenge_Selene __self) => _cranks.Value.GetValue(__self);
		public static void SetCranks(this Reactor_Challenge_Selene __self, Fight_Challenge_Selene[] value) => _cranks.Value.SetValue(__self, value);
		public static QuestType GetQuestToCompleteWholeReactor(this Reactor_Challenge_Selene __self) => _questToCompleteWholeReactor.Value.GetValue(__self);
		public static void SetQuestToCompleteWholeReactor(this Reactor_Challenge_Selene __self, QuestType value) => _questToCompleteWholeReactor.Value.SetValue(__self, value);
		public static QuestInteractable GetInteractableDoor(this Reactor_Challenge_Selene __self) => _interactableDoor.Value.GetValue(__self);
		public static void SetInteractableDoor(this Reactor_Challenge_Selene __self, QuestInteractable value) => _interactableDoor.Value.SetValue(__self, value);
		public static UnityEngine.ParticleSystem GetCoolingParticle(this Reactor_Challenge_Selene __self) => _coolingParticle.Value.GetValue(__self);
		public static void SetCoolingParticle(this Reactor_Challenge_Selene __self, UnityEngine.ParticleSystem value) => _coolingParticle.Value.SetValue(__self, value);
		public static UnityEngine.ParticleSystem GetRadiationBubblingParticles(this Reactor_Challenge_Selene __self) => _radiationBubblingParticles.Value.GetValue(__self);
		public static void SetRadiationBubblingParticles(this Reactor_Challenge_Selene __self, UnityEngine.ParticleSystem value) => _radiationBubblingParticles.Value.SetValue(__self, value);
		public static EnvironmentLightAffector GetRadiationLightAffector(this Reactor_Challenge_Selene __self) => _radiationLightAffector.Value.GetValue(__self);
		public static void SetRadiationLightAffector(this Reactor_Challenge_Selene __self, EnvironmentLightAffector value) => _radiationLightAffector.Value.SetValue(__self, value);
		public static float GetFadeWaterTime(this Reactor_Challenge_Selene __self) => _fadeWaterTime.Value.GetValue(__self);
		public static void SetFadeWaterTime(this Reactor_Challenge_Selene __self, float value) => _fadeWaterTime.Value.SetValue(__self, value);
		public static float GetFadeLightTime(this Reactor_Challenge_Selene __self) => _fadeLightTime.Value.GetValue(__self);
		public static void SetFadeLightTime(this Reactor_Challenge_Selene __self, float value) => _fadeLightTime.Value.SetValue(__self, value);
		public static UnityEngine.MeshRenderer GetRadiatedWaterRenderer(this Reactor_Challenge_Selene __self) => _radiatedWaterRenderer.Value.GetValue(__self);
		public static void SetRadiatedWaterRenderer(this Reactor_Challenge_Selene __self, UnityEngine.MeshRenderer value) => _radiatedWaterRenderer.Value.SetValue(__self, value);
		public static UnityEngine.Color GetRadiatedColor(this Reactor_Challenge_Selene __self) => _radiatedColor.Value.GetValue(__self);
		public static void SetRadiatedColor(this Reactor_Challenge_Selene __self, UnityEngine.Color value) => _radiatedColor.Value.SetValue(__self, value);
		public static UnityEngine.Color GetRadiatedFresnel(this Reactor_Challenge_Selene __self) => _radiatedFresnel.Value.GetValue(__self);
		public static void SetRadiatedFresnel(this Reactor_Challenge_Selene __self, UnityEngine.Color value) => _radiatedFresnel.Value.SetValue(__self, value);
		public static UnityEngine.Color GetRadiatedFoam(this Reactor_Challenge_Selene __self) => _radiatedFoam.Value.GetValue(__self);
		public static void SetRadiatedFoam(this Reactor_Challenge_Selene __self, UnityEngine.Color value) => _radiatedFoam.Value.SetValue(__self, value);
		public static UnityEngine.Color GetRadiatedEmission(this Reactor_Challenge_Selene __self) => _radiatedEmission.Value.GetValue(__self);
		public static void SetRadiatedEmission(this Reactor_Challenge_Selene __self, UnityEngine.Color value) => _radiatedEmission.Value.SetValue(__self, value);
		public static UnityEngine.Color GetCleanColor(this Reactor_Challenge_Selene __self) => _cleanColor.Value.GetValue(__self);
		public static void SetCleanColor(this Reactor_Challenge_Selene __self, UnityEngine.Color value) => _cleanColor.Value.SetValue(__self, value);
		public static UnityEngine.Color GetCleanFresnel(this Reactor_Challenge_Selene __self) => _cleanFresnel.Value.GetValue(__self);
		public static void SetCleanFresnel(this Reactor_Challenge_Selene __self, UnityEngine.Color value) => _cleanFresnel.Value.SetValue(__self, value);
		public static UnityEngine.Color GetCleanFoam(this Reactor_Challenge_Selene __self) => _cleanFoam.Value.GetValue(__self);
		public static void SetCleanFoam(this Reactor_Challenge_Selene __self, UnityEngine.Color value) => _cleanFoam.Value.SetValue(__self, value);
		public static UnityEngine.Color GetCleanEmission(this Reactor_Challenge_Selene __self) => _cleanEmission.Value.GetValue(__self);
		public static void SetCleanEmission(this Reactor_Challenge_Selene __self, UnityEngine.Color value) => _cleanEmission.Value.SetValue(__self, value);
		public static FMODUnity.StudioEventEmitter GetEmitter_reactorBottom(this Reactor_Challenge_Selene __self) => _emitter_reactorBottom.Value.GetValue(__self);
		public static void SetEmitter_reactorBottom(this Reactor_Challenge_Selene __self, FMODUnity.StudioEventEmitter value) => _emitter_reactorBottom.Value.SetValue(__self, value);
		public static FMODUnity.StudioEventEmitter GetEmitter_reactorTop(this Reactor_Challenge_Selene __self) => _emitter_reactorTop.Value.GetValue(__self);
		public static void SetEmitter_reactorTop(this Reactor_Challenge_Selene __self, FMODUnity.StudioEventEmitter value) => _emitter_reactorTop.Value.SetValue(__self, value);
		public static FMODUnity.StudioEventEmitter GetEmitter_coolDown(this Reactor_Challenge_Selene __self) => _emitter_coolDown.Value.GetValue(__self);
		public static void SetEmitter_coolDown(this Reactor_Challenge_Selene __self, FMODUnity.StudioEventEmitter value) => _emitter_coolDown.Value.SetValue(__self, value);
		public static bool GetIsCompleted(this Reactor_Challenge_Selene __self) => _isCompleted.Value.GetValue(__self);
		public static void SetIsCompleted(this Reactor_Challenge_Selene __self, bool value) => _isCompleted.Value.SetValue(__self, value);
		public static UnityEngine.MaterialPropertyBlock GetMatProp(this Reactor_Challenge_Selene __self) => _matProp.Value.GetValue(__self);
		public static void SetMatProp(this Reactor_Challenge_Selene __self, UnityEngine.MaterialPropertyBlock value) => _matProp.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Reactor_Challenge_Selene>> _Awake757602046 =
				new System.Lazy<MethodAccessor<Reactor_Challenge_Selene>>(() => MethodAccessor<Reactor_Challenge_Selene>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<Reactor_Challenge_Selene>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<Reactor_Challenge_Selene>>(() => MethodAccessor<Reactor_Challenge_Selene>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<Reactor_Challenge_Selene>> _OnLoadOrWorldRecieved757602046 =
				new System.Lazy<MethodAccessor<Reactor_Challenge_Selene>>(() => MethodAccessor<Reactor_Challenge_Selene>.Create("OnLoadOrWorldRecieved"));
		private static readonly System.Lazy<MethodAccessor<Reactor_Challenge_Selene>> _UpdateChallengeState757602046 =
				new System.Lazy<MethodAccessor<Reactor_Challenge_Selene>>(() => MethodAccessor<Reactor_Challenge_Selene>.Create("UpdateChallengeState"));
		private static readonly System.Lazy<MethodAccessor<Reactor_Challenge_Selene>> _IsAllCranksCompleted757602046 =
				new System.Lazy<MethodAccessor<Reactor_Challenge_Selene>>(() => MethodAccessor<Reactor_Challenge_Selene>.Create("IsAllCranksCompleted"));
		private static readonly System.Lazy<MethodAccessor<Reactor_Challenge_Selene>> _CompleteReactorChallenge757602046 =
				new System.Lazy<MethodAccessor<Reactor_Challenge_Selene>>(() => MethodAccessor<Reactor_Challenge_Selene>.Create("CompleteReactorChallenge"));
		private static readonly System.Lazy<MethodAccessor<Reactor_Challenge_Selene>> _FadeOutReactorLights757602046 =
				new System.Lazy<MethodAccessor<Reactor_Challenge_Selene>>(() => MethodAccessor<Reactor_Challenge_Selene>.Create("FadeOutReactorLights"));
		private static readonly System.Lazy<MethodAccessor<Reactor_Challenge_Selene>> _FadeWaterToBlue757602046 =
				new System.Lazy<MethodAccessor<Reactor_Challenge_Selene>>(() => MethodAccessor<Reactor_Challenge_Selene>.Create("FadeWaterToBlue"));
		private static readonly System.Lazy<MethodAccessor<Reactor_Challenge_Selene>> _DisableAllRadiationEmission757602046 =
				new System.Lazy<MethodAccessor<Reactor_Challenge_Selene>>(() => MethodAccessor<Reactor_Challenge_Selene>.Create("DisableAllRadiationEmission"));
		private static readonly System.Lazy<MethodAccessor<Reactor_Challenge_Selene>> _DisableRadiationParticleEmission3441461137 =
				new System.Lazy<MethodAccessor<Reactor_Challenge_Selene>>(() => MethodAccessor<Reactor_Challenge_Selene>.Create("DisableRadiationParticleEmission", typeof(UnityEngine.ParticleSystem)));
		private static readonly System.Lazy<MethodAccessor<Reactor_Challenge_Selene>> _DoorOpen757602046 =
				new System.Lazy<MethodAccessor<Reactor_Challenge_Selene>>(() => MethodAccessor<Reactor_Challenge_Selene>.Create("DoorOpen"));

		public static void Awake(this Reactor_Challenge_Selene __self) => _Awake757602046.Value.Invoke(__self);
		public static void OnDestroy(this Reactor_Challenge_Selene __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void OnLoadOrWorldRecieved(this Reactor_Challenge_Selene __self) => _OnLoadOrWorldRecieved757602046.Value.Invoke(__self);
		public static void UpdateChallengeState(this Reactor_Challenge_Selene __self) => _UpdateChallengeState757602046.Value.Invoke(__self);
		public static bool IsAllCranksCompleted(this Reactor_Challenge_Selene __self) => (bool)_IsAllCranksCompleted757602046.Value.Invoke(__self);
		public static void CompleteReactorChallenge(this Reactor_Challenge_Selene __self) => _CompleteReactorChallenge757602046.Value.Invoke(__self);
		public static void FadeOutReactorLights(this Reactor_Challenge_Selene __self) => _FadeOutReactorLights757602046.Value.Invoke(__self);
		public static System.Collections.IEnumerator FadeWaterToBlue(this Reactor_Challenge_Selene __self) => (System.Collections.IEnumerator)_FadeWaterToBlue757602046.Value.Invoke(__self);
		public static void DisableAllRadiationEmission(this Reactor_Challenge_Selene __self) => _DisableAllRadiationEmission757602046.Value.Invoke(__self);
		public static void DisableRadiationParticleEmission(this Reactor_Challenge_Selene __self, UnityEngine.ParticleSystem ps) => _DisableRadiationParticleEmission3441461137.Value.Invoke(__self, ps);
		public static void DoorOpen(this Reactor_Challenge_Selene __self) => _DoorOpen757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Snowmobile
	{

		private static readonly System.Lazy<FieldAccessor<Snowmobile, float>> _resetToShedTimer =
				new System.Lazy<FieldAccessor<Snowmobile, float>>(() => FieldAccessor<Snowmobile, float>.Create("resetToShedTimer"));
		private static readonly System.Lazy<FieldAccessor<Snowmobile, Raft_Network>> __network =
				new System.Lazy<FieldAccessor<Snowmobile, Raft_Network>>(() => FieldAccessor<Snowmobile, Raft_Network>.Create("_network"));
		private static readonly System.Lazy<FieldAccessor<Snowmobile, AttachPlayer[]>> _attachPlayerScripts =
				new System.Lazy<FieldAccessor<Snowmobile, AttachPlayer[]>>(() => FieldAccessor<Snowmobile, AttachPlayer[]>.Create("attachPlayerScripts"));
		private static readonly System.Lazy<FieldAccessor<Snowmobile, UnityEngine.Collider[]>> _colliders =
				new System.Lazy<FieldAccessor<Snowmobile, UnityEngine.Collider[]>>(() => FieldAccessor<Snowmobile, UnityEngine.Collider[]>.Create("colliders"));
		private static readonly System.Lazy<FieldAccessor<Snowmobile, UnityEngine.Rigidbody>> _body =
				new System.Lazy<FieldAccessor<Snowmobile, UnityEngine.Rigidbody>>(() => FieldAccessor<Snowmobile, UnityEngine.Rigidbody>.Create("body"));
		private static readonly System.Lazy<FieldAccessor<Snowmobile, UnityEngine.Renderer>> _snowmobileRenderer =
				new System.Lazy<FieldAccessor<Snowmobile, UnityEngine.Renderer>>(() => FieldAccessor<Snowmobile, UnityEngine.Renderer>.Create("snowmobileRenderer"));
		private static readonly System.Lazy<FieldAccessor<Snowmobile, UnityEngine.Light>> _light =
				new System.Lazy<FieldAccessor<Snowmobile, UnityEngine.Light>>(() => FieldAccessor<Snowmobile, UnityEngine.Light>.Create("light"));
		private static readonly System.Lazy<FieldAccessor<Snowmobile, UnityEngine.Transform>> _groundCheckPoint =
				new System.Lazy<FieldAccessor<Snowmobile, UnityEngine.Transform>>(() => FieldAccessor<Snowmobile, UnityEngine.Transform>.Create("groundCheckPoint"));
		private static readonly System.Lazy<FieldAccessor<Snowmobile, VelocityCalculator>> _velocityCalc =
				new System.Lazy<FieldAccessor<Snowmobile, VelocityCalculator>>(() => FieldAccessor<Snowmobile, VelocityCalculator>.Create("velocityCalc"));
		private static readonly System.Lazy<FieldAccessor<Snowmobile, UnityEngine.AnimationCurve>> _turnVsSpeedCurve =
				new System.Lazy<FieldAccessor<Snowmobile, UnityEngine.AnimationCurve>>(() => FieldAccessor<Snowmobile, UnityEngine.AnimationCurve>.Create("turnVsSpeedCurve"));
		private static readonly System.Lazy<FieldAccessor<Snowmobile, UnityEngine.Animator>> _animator =
				new System.Lazy<FieldAccessor<Snowmobile, UnityEngine.Animator>>(() => FieldAccessor<Snowmobile, UnityEngine.Animator>.Create("animator"));
		private static readonly System.Lazy<FieldAccessor<Snowmobile, TriggerBoxEnterAction>> _triggerBoxEnter =
				new System.Lazy<FieldAccessor<Snowmobile, TriggerBoxEnterAction>>(() => FieldAccessor<Snowmobile, TriggerBoxEnterAction>.Create("triggerBoxEnter"));
		private static readonly System.Lazy<FieldAccessor<Snowmobile, UnityEngine.Vector3>> _cutomCenterOfMass =
				new System.Lazy<FieldAccessor<Snowmobile, UnityEngine.Vector3>>(() => FieldAccessor<Snowmobile, UnityEngine.Vector3>.Create("cutomCenterOfMass"));
		private static readonly System.Lazy<FieldAccessor<Snowmobile, UnityEngine.ParticleSystem>> _particles =
				new System.Lazy<FieldAccessor<Snowmobile, UnityEngine.ParticleSystem>>(() => FieldAccessor<Snowmobile, UnityEngine.ParticleSystem>.Create("particles"));
		private static readonly System.Lazy<FieldAccessor<Snowmobile, Gauge>> _speedGauge =
				new System.Lazy<FieldAccessor<Snowmobile, Gauge>>(() => FieldAccessor<Snowmobile, Gauge>.Create("speedGauge"));
		private static readonly System.Lazy<FieldAccessor<Snowmobile, Gauge>> _tankGauge =
				new System.Lazy<FieldAccessor<Snowmobile, Gauge>>(() => FieldAccessor<Snowmobile, Gauge>.Create("tankGauge"));
		private static readonly System.Lazy<FieldAccessor<Snowmobile, float>> _lightLerpSpeed =
				new System.Lazy<FieldAccessor<Snowmobile, float>>(() => FieldAccessor<Snowmobile, float>.Create("lightLerpSpeed"));
		private static readonly System.Lazy<FieldAccessor<Snowmobile, float>> _acceleration =
				new System.Lazy<FieldAccessor<Snowmobile, float>>(() => FieldAccessor<Snowmobile, float>.Create("acceleration"));
		private static readonly System.Lazy<FieldAccessor<Snowmobile, float>> _airControlSpeed =
				new System.Lazy<FieldAccessor<Snowmobile, float>>(() => FieldAccessor<Snowmobile, float>.Create("airControlSpeed"));
		private static readonly System.Lazy<FieldAccessor<Snowmobile, float>> _maxSpeed =
				new System.Lazy<FieldAccessor<Snowmobile, float>>(() => FieldAccessor<Snowmobile, float>.Create("maxSpeed"));
		private static readonly System.Lazy<FieldAccessor<Snowmobile, float>> _maxReverseSpeed =
				new System.Lazy<FieldAccessor<Snowmobile, float>>(() => FieldAccessor<Snowmobile, float>.Create("maxReverseSpeed"));
		private static readonly System.Lazy<FieldAccessor<Snowmobile, float>> _maxRotationSpeed =
				new System.Lazy<FieldAccessor<Snowmobile, float>>(() => FieldAccessor<Snowmobile, float>.Create("maxRotationSpeed"));
		private static readonly System.Lazy<FieldAccessor<Snowmobile, float>> _groundRayLength =
				new System.Lazy<FieldAccessor<Snowmobile, float>>(() => FieldAccessor<Snowmobile, float>.Create("groundRayLength"));
		private static readonly System.Lazy<FieldAccessor<Snowmobile, float>> _simulatedInputSpeed =
				new System.Lazy<FieldAccessor<Snowmobile, float>>(() => FieldAccessor<Snowmobile, float>.Create("simulatedInputSpeed"));
		private static readonly System.Lazy<FieldAccessor<Snowmobile, float>> _animationSpeed =
				new System.Lazy<FieldAccessor<Snowmobile, float>>(() => FieldAccessor<Snowmobile, float>.Create("animationSpeed"));
		private static readonly System.Lazy<FieldAccessor<Snowmobile, float>> _resetToShedTime =
				new System.Lazy<FieldAccessor<Snowmobile, float>>(() => FieldAccessor<Snowmobile, float>.Create("resetToShedTime"));
		private static readonly System.Lazy<FieldAccessor<Snowmobile, float>> _exitYDistance =
				new System.Lazy<FieldAccessor<Snowmobile, float>>(() => FieldAccessor<Snowmobile, float>.Create("exitYDistance"));
		private static readonly System.Lazy<FieldAccessor<Snowmobile, float>> _impactSoundVelocityThreshold =
				new System.Lazy<FieldAccessor<Snowmobile, float>>(() => FieldAccessor<Snowmobile, float>.Create("impactSoundVelocityThreshold"));
		private static readonly System.Lazy<FieldAccessor<Snowmobile, float>> _impactSoundNotGroundedThreshold =
				new System.Lazy<FieldAccessor<Snowmobile, float>>(() => FieldAccessor<Snowmobile, float>.Create("impactSoundNotGroundedThreshold"));
		private static readonly System.Lazy<FieldAccessor<Snowmobile, float>> _positionLerpSpeed =
				new System.Lazy<FieldAccessor<Snowmobile, float>>(() => FieldAccessor<Snowmobile, float>.Create("positionLerpSpeed"));
		private static readonly System.Lazy<FieldAccessor<Snowmobile, float>> _rotationLerpSpeed =
				new System.Lazy<FieldAccessor<Snowmobile, float>>(() => FieldAccessor<Snowmobile, float>.Create("rotationLerpSpeed"));
		private static readonly System.Lazy<FieldAccessor<Snowmobile, UnityEngine.Vector3>> _networkPosition =
				new System.Lazy<FieldAccessor<Snowmobile, UnityEngine.Vector3>>(() => FieldAccessor<Snowmobile, UnityEngine.Vector3>.Create("networkPosition"));
		private static readonly System.Lazy<FieldAccessor<Snowmobile, UnityEngine.Vector3>> _networkEuler =
				new System.Lazy<FieldAccessor<Snowmobile, UnityEngine.Vector3>>(() => FieldAccessor<Snowmobile, UnityEngine.Vector3>.Create("networkEuler"));
		private static readonly System.Lazy<FieldAccessor<Snowmobile, FMODUnity.StudioEventEmitter>> _emitter_engine =
				new System.Lazy<FieldAccessor<Snowmobile, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<Snowmobile, FMODUnity.StudioEventEmitter>.Create("emitter_engine"));
		private static readonly System.Lazy<FieldAccessor<Snowmobile, FMODUnity.StudioEventEmitter>> _emitter_impact =
				new System.Lazy<FieldAccessor<Snowmobile, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<Snowmobile, FMODUnity.StudioEventEmitter>.Create("emitter_impact"));
		private static readonly System.Lazy<FieldAccessor<Snowmobile, float>> _impactCooldown =
				new System.Lazy<FieldAccessor<Snowmobile, float>>(() => FieldAccessor<Snowmobile, float>.Create("impactCooldown"));
		private static readonly System.Lazy<FieldAccessor<Snowmobile, float>> _impactTimer =
				new System.Lazy<FieldAccessor<Snowmobile, float>>(() => FieldAccessor<Snowmobile, float>.Create("impactTimer"));
		private static readonly System.Lazy<FieldAccessor<Snowmobile, UnityEngine.Vector3>> _simulatedInput =
				new System.Lazy<FieldAccessor<Snowmobile, UnityEngine.Vector3>>(() => FieldAccessor<Snowmobile, UnityEngine.Vector3>.Create("simulatedInput"));
		private static readonly System.Lazy<FieldAccessor<Snowmobile, bool>> _grounded =
				new System.Lazy<FieldAccessor<Snowmobile, bool>>(() => FieldAccessor<Snowmobile, bool>.Create("grounded"));
		private static readonly System.Lazy<FieldAccessor<Snowmobile, bool>> _prevGrounded =
				new System.Lazy<FieldAccessor<Snowmobile, bool>>(() => FieldAccessor<Snowmobile, bool>.Create("prevGrounded"));
		private static readonly System.Lazy<FieldAccessor<Snowmobile, float>> _notGroundedTimer =
				new System.Lazy<FieldAccessor<Snowmobile, float>>(() => FieldAccessor<Snowmobile, float>.Create("notGroundedTimer"));
		private static readonly System.Lazy<FieldAccessor<Snowmobile, bool>> _detroyedByWater =
				new System.Lazy<FieldAccessor<Snowmobile, bool>>(() => FieldAccessor<Snowmobile, bool>.Create("detroyedByWater"));
		private static readonly System.Lazy<FieldAccessor<Snowmobile, Network_Player>> _localPlayer =
				new System.Lazy<FieldAccessor<Snowmobile, Network_Player>>(() => FieldAccessor<Snowmobile, Network_Player>.Create("localPlayer"));
		private static readonly System.Lazy<FieldAccessor<Snowmobile, UnityEngine.MaterialPropertyBlock>> _matPropBlock =
				new System.Lazy<FieldAccessor<Snowmobile, UnityEngine.MaterialPropertyBlock>>(() => FieldAccessor<Snowmobile, UnityEngine.MaterialPropertyBlock>.Create("matPropBlock"));
		private static readonly System.Lazy<FieldAccessor<Snowmobile, bool>> _canLeave =
				new System.Lazy<FieldAccessor<Snowmobile, bool>>(() => FieldAccessor<Snowmobile, bool>.Create("canLeave"));

		public static float GetResetToShedTimer(this Snowmobile __self) => _resetToShedTimer.Value.GetValue(__self);
		public static void SetResetToShedTimer(this Snowmobile __self, float value) => _resetToShedTimer.Value.SetValue(__self, value);
		public static Raft_Network Get_network(this Snowmobile __self) => __network.Value.GetValue(__self);
		public static void Set_network(this Snowmobile __self, Raft_Network value) => __network.Value.SetValue(__self, value);
		public static AttachPlayer[] GetAttachPlayerScripts(this Snowmobile __self) => _attachPlayerScripts.Value.GetValue(__self);
		public static void SetAttachPlayerScripts(this Snowmobile __self, AttachPlayer[] value) => _attachPlayerScripts.Value.SetValue(__self, value);
		public static UnityEngine.Collider[] GetColliders(this Snowmobile __self) => _colliders.Value.GetValue(__self);
		public static void SetColliders(this Snowmobile __self, UnityEngine.Collider[] value) => _colliders.Value.SetValue(__self, value);
		public static UnityEngine.Rigidbody GetBody(this Snowmobile __self) => _body.Value.GetValue(__self);
		public static void SetBody(this Snowmobile __self, UnityEngine.Rigidbody value) => _body.Value.SetValue(__self, value);
		public static UnityEngine.Renderer GetSnowmobileRenderer(this Snowmobile __self) => _snowmobileRenderer.Value.GetValue(__self);
		public static void SetSnowmobileRenderer(this Snowmobile __self, UnityEngine.Renderer value) => _snowmobileRenderer.Value.SetValue(__self, value);
		public static UnityEngine.Light GetLight(this Snowmobile __self) => _light.Value.GetValue(__self);
		public static void SetLight(this Snowmobile __self, UnityEngine.Light value) => _light.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetGroundCheckPoint(this Snowmobile __self) => _groundCheckPoint.Value.GetValue(__self);
		public static void SetGroundCheckPoint(this Snowmobile __self, UnityEngine.Transform value) => _groundCheckPoint.Value.SetValue(__self, value);
		public static VelocityCalculator GetVelocityCalc(this Snowmobile __self) => _velocityCalc.Value.GetValue(__self);
		public static void SetVelocityCalc(this Snowmobile __self, VelocityCalculator value) => _velocityCalc.Value.SetValue(__self, value);
		public static UnityEngine.AnimationCurve GetTurnVsSpeedCurve(this Snowmobile __self) => _turnVsSpeedCurve.Value.GetValue(__self);
		public static void SetTurnVsSpeedCurve(this Snowmobile __self, UnityEngine.AnimationCurve value) => _turnVsSpeedCurve.Value.SetValue(__self, value);
		public static UnityEngine.Animator GetAnimator(this Snowmobile __self) => _animator.Value.GetValue(__self);
		public static void SetAnimator(this Snowmobile __self, UnityEngine.Animator value) => _animator.Value.SetValue(__self, value);
		public static TriggerBoxEnterAction GetTriggerBoxEnter(this Snowmobile __self) => _triggerBoxEnter.Value.GetValue(__self);
		public static void SetTriggerBoxEnter(this Snowmobile __self, TriggerBoxEnterAction value) => _triggerBoxEnter.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetCutomCenterOfMass(this Snowmobile __self) => _cutomCenterOfMass.Value.GetValue(__self);
		public static void SetCutomCenterOfMass(this Snowmobile __self, UnityEngine.Vector3 value) => _cutomCenterOfMass.Value.SetValue(__self, value);
		public static UnityEngine.ParticleSystem GetParticles(this Snowmobile __self) => _particles.Value.GetValue(__self);
		public static void SetParticles(this Snowmobile __self, UnityEngine.ParticleSystem value) => _particles.Value.SetValue(__self, value);
		public static Gauge GetSpeedGauge(this Snowmobile __self) => _speedGauge.Value.GetValue(__self);
		public static void SetSpeedGauge(this Snowmobile __self, Gauge value) => _speedGauge.Value.SetValue(__self, value);
		public static Gauge GetTankGauge(this Snowmobile __self) => _tankGauge.Value.GetValue(__self);
		public static void SetTankGauge(this Snowmobile __self, Gauge value) => _tankGauge.Value.SetValue(__self, value);
		public static float GetLightLerpSpeed(this Snowmobile __self) => _lightLerpSpeed.Value.GetValue(__self);
		public static void SetLightLerpSpeed(this Snowmobile __self, float value) => _lightLerpSpeed.Value.SetValue(__self, value);
		public static float GetAcceleration(this Snowmobile __self) => _acceleration.Value.GetValue(__self);
		public static void SetAcceleration(this Snowmobile __self, float value) => _acceleration.Value.SetValue(__self, value);
		public static float GetAirControlSpeed(this Snowmobile __self) => _airControlSpeed.Value.GetValue(__self);
		public static void SetAirControlSpeed(this Snowmobile __self, float value) => _airControlSpeed.Value.SetValue(__self, value);
		public static float GetMaxSpeed(this Snowmobile __self) => _maxSpeed.Value.GetValue(__self);
		public static void SetMaxSpeed(this Snowmobile __self, float value) => _maxSpeed.Value.SetValue(__self, value);
		public static float GetMaxReverseSpeed(this Snowmobile __self) => _maxReverseSpeed.Value.GetValue(__self);
		public static void SetMaxReverseSpeed(this Snowmobile __self, float value) => _maxReverseSpeed.Value.SetValue(__self, value);
		public static float GetMaxRotationSpeed(this Snowmobile __self) => _maxRotationSpeed.Value.GetValue(__self);
		public static void SetMaxRotationSpeed(this Snowmobile __self, float value) => _maxRotationSpeed.Value.SetValue(__self, value);
		public static float GetGroundRayLength(this Snowmobile __self) => _groundRayLength.Value.GetValue(__self);
		public static void SetGroundRayLength(this Snowmobile __self, float value) => _groundRayLength.Value.SetValue(__self, value);
		public static float GetSimulatedInputSpeed(this Snowmobile __self) => _simulatedInputSpeed.Value.GetValue(__self);
		public static void SetSimulatedInputSpeed(this Snowmobile __self, float value) => _simulatedInputSpeed.Value.SetValue(__self, value);
		public static float GetAnimationSpeed(this Snowmobile __self) => _animationSpeed.Value.GetValue(__self);
		public static void SetAnimationSpeed(this Snowmobile __self, float value) => _animationSpeed.Value.SetValue(__self, value);
		public static float GetResetToShedTime(this Snowmobile __self) => _resetToShedTime.Value.GetValue(__self);
		public static void SetResetToShedTime(this Snowmobile __self, float value) => _resetToShedTime.Value.SetValue(__self, value);
		public static float GetExitYDistance(this Snowmobile __self) => _exitYDistance.Value.GetValue(__self);
		public static void SetExitYDistance(this Snowmobile __self, float value) => _exitYDistance.Value.SetValue(__self, value);
		public static float GetImpactSoundVelocityThreshold(this Snowmobile __self) => _impactSoundVelocityThreshold.Value.GetValue(__self);
		public static void SetImpactSoundVelocityThreshold(this Snowmobile __self, float value) => _impactSoundVelocityThreshold.Value.SetValue(__self, value);
		public static float GetImpactSoundNotGroundedThreshold(this Snowmobile __self) => _impactSoundNotGroundedThreshold.Value.GetValue(__self);
		public static void SetImpactSoundNotGroundedThreshold(this Snowmobile __self, float value) => _impactSoundNotGroundedThreshold.Value.SetValue(__self, value);
		public static float GetPositionLerpSpeed(this Snowmobile __self) => _positionLerpSpeed.Value.GetValue(__self);
		public static void SetPositionLerpSpeed(this Snowmobile __self, float value) => _positionLerpSpeed.Value.SetValue(__self, value);
		public static float GetRotationLerpSpeed(this Snowmobile __self) => _rotationLerpSpeed.Value.GetValue(__self);
		public static void SetRotationLerpSpeed(this Snowmobile __self, float value) => _rotationLerpSpeed.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetNetworkPosition(this Snowmobile __self) => _networkPosition.Value.GetValue(__self);
		public static void SetNetworkPosition(this Snowmobile __self, UnityEngine.Vector3 value) => _networkPosition.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetNetworkEuler(this Snowmobile __self) => _networkEuler.Value.GetValue(__self);
		public static void SetNetworkEuler(this Snowmobile __self, UnityEngine.Vector3 value) => _networkEuler.Value.SetValue(__self, value);
		public static FMODUnity.StudioEventEmitter GetEmitter_engine(this Snowmobile __self) => _emitter_engine.Value.GetValue(__self);
		public static void SetEmitter_engine(this Snowmobile __self, FMODUnity.StudioEventEmitter value) => _emitter_engine.Value.SetValue(__self, value);
		public static FMODUnity.StudioEventEmitter GetEmitter_impact(this Snowmobile __self) => _emitter_impact.Value.GetValue(__self);
		public static void SetEmitter_impact(this Snowmobile __self, FMODUnity.StudioEventEmitter value) => _emitter_impact.Value.SetValue(__self, value);
		public static float GetImpactCooldown(this Snowmobile __self) => _impactCooldown.Value.GetValue(__self);
		public static void SetImpactCooldown(this Snowmobile __self, float value) => _impactCooldown.Value.SetValue(__self, value);
		public static float GetImpactTimer(this Snowmobile __self) => _impactTimer.Value.GetValue(__self);
		public static void SetImpactTimer(this Snowmobile __self, float value) => _impactTimer.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetSimulatedInput(this Snowmobile __self) => _simulatedInput.Value.GetValue(__self);
		public static void SetSimulatedInput(this Snowmobile __self, UnityEngine.Vector3 value) => _simulatedInput.Value.SetValue(__self, value);
		public static bool GetGrounded(this Snowmobile __self) => _grounded.Value.GetValue(__self);
		public static void SetGrounded(this Snowmobile __self, bool value) => _grounded.Value.SetValue(__self, value);
		public static bool GetPrevGrounded(this Snowmobile __self) => _prevGrounded.Value.GetValue(__self);
		public static void SetPrevGrounded(this Snowmobile __self, bool value) => _prevGrounded.Value.SetValue(__self, value);
		public static float GetNotGroundedTimer(this Snowmobile __self) => _notGroundedTimer.Value.GetValue(__self);
		public static void SetNotGroundedTimer(this Snowmobile __self, float value) => _notGroundedTimer.Value.SetValue(__self, value);
		public static bool GetDetroyedByWater(this Snowmobile __self) => _detroyedByWater.Value.GetValue(__self);
		public static void SetDetroyedByWater(this Snowmobile __self, bool value) => _detroyedByWater.Value.SetValue(__self, value);
		public static Network_Player GetLocalPlayer(this Snowmobile __self) => _localPlayer.Value.GetValue(__self);
		public static void SetLocalPlayer(this Snowmobile __self, Network_Player value) => _localPlayer.Value.SetValue(__self, value);
		public static UnityEngine.MaterialPropertyBlock GetMatPropBlock(this Snowmobile __self) => _matPropBlock.Value.GetValue(__self);
		public static void SetMatPropBlock(this Snowmobile __self, UnityEngine.MaterialPropertyBlock value) => _matPropBlock.Value.SetValue(__self, value);
		public static bool GetCanLeave(this Snowmobile __self) => _canLeave.Value.GetValue(__self);
		public static void SetCanLeave(this Snowmobile __self, bool value) => _canLeave.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Snowmobile>> _Start757602046 =
				new System.Lazy<MethodAccessor<Snowmobile>>(() => MethodAccessor<Snowmobile>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<Snowmobile>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<Snowmobile>>(() => MethodAccessor<Snowmobile>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<Snowmobile>> _Update757602046 =
				new System.Lazy<MethodAccessor<Snowmobile>>(() => MethodAccessor<Snowmobile>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<Snowmobile>> _OnDrawGizmosSelected757602046 =
				new System.Lazy<MethodAccessor<Snowmobile>>(() => MethodAccessor<Snowmobile>.Create("OnDrawGizmosSelected"));
		private static readonly System.Lazy<MethodAccessor<Snowmobile>> _OnCollisionEnter3430762572 =
				new System.Lazy<MethodAccessor<Snowmobile>>(() => MethodAccessor<Snowmobile>.Create("OnCollisionEnter", typeof(UnityEngine.Collision)));
		private static readonly System.Lazy<MethodAccessor<Snowmobile>> _OnTriggerBoxEnter3468606003 =
				new System.Lazy<MethodAccessor<Snowmobile>>(() => MethodAccessor<Snowmobile>.Create("OnTriggerBoxEnter", typeof(UnityEngine.Collider)));
		private static readonly System.Lazy<MethodAccessor<Snowmobile>> _SetCustomPivot757602046 =
				new System.Lazy<MethodAccessor<Snowmobile>>(() => MethodAccessor<Snowmobile>.Create("SetCustomPivot"));
		private static readonly System.Lazy<MethodAccessor<Snowmobile>> _SetEmissionAndLights3450040886 =
				new System.Lazy<MethodAccessor<Snowmobile>>(() => MethodAccessor<Snowmobile>.Create("SetEmissionAndLights", typeof(bool)));
		private static readonly System.Lazy<MethodAccessor<Snowmobile>> _HandleDrivingUpdate757602046 =
				new System.Lazy<MethodAccessor<Snowmobile>>(() => MethodAccessor<Snowmobile>.Create("HandleDrivingUpdate"));
		private static readonly System.Lazy<MethodAccessor<Snowmobile>> _HandleAnimation3486905475 =
				new System.Lazy<MethodAccessor<Snowmobile>>(() => MethodAccessor<Snowmobile>.Create("HandleAnimation", typeof(float)));
		private static readonly System.Lazy<MethodAccessor<Snowmobile>> _LeaveSeat3461878659 =
				new System.Lazy<MethodAccessor<Snowmobile>>(() => MethodAccessor<Snowmobile>.Create("LeaveSeat", typeof(Network_Player)));
		private static readonly System.Lazy<MethodAccessor<Snowmobile>> _LeaveSeat3451923620 =
				new System.Lazy<MethodAccessor<Snowmobile>>(() => MethodAccessor<Snowmobile>.Create("LeaveSeat", typeof(AttachPlayer)));
		private static readonly System.Lazy<MethodAccessor<Snowmobile>> _ResetNetworkPropertiesToSnowmobile757602046 =
				new System.Lazy<MethodAccessor<Snowmobile>>(() => MethodAccessor<Snowmobile>.Create("ResetNetworkPropertiesToSnowmobile"));
		private static readonly System.Lazy<MethodAccessor<Snowmobile>> _GetPlayerCountInSeats757602046 =
				new System.Lazy<MethodAccessor<Snowmobile>>(() => MethodAccessor<Snowmobile>.Create("GetPlayerCountInSeats"));

		public static void Start(this Snowmobile __self) => _Start757602046.Value.Invoke(__self);
		public static void OnDestroy(this Snowmobile __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void Update(this Snowmobile __self) => _Update757602046.Value.Invoke(__self);
		public static void OnDrawGizmosSelected(this Snowmobile __self) => _OnDrawGizmosSelected757602046.Value.Invoke(__self);
		public static void OnCollisionEnter(this Snowmobile __self, UnityEngine.Collision collision) => _OnCollisionEnter3430762572.Value.Invoke(__self, collision);
		public static void OnTriggerBoxEnter(this Snowmobile __self, UnityEngine.Collider other) => _OnTriggerBoxEnter3468606003.Value.Invoke(__self, other);
		public static void SetCustomPivot(this Snowmobile __self) => _SetCustomPivot757602046.Value.Invoke(__self);
		public static void SetEmissionAndLights(this Snowmobile __self, bool lightsOn) => _SetEmissionAndLights3450040886.Value.Invoke(__self, lightsOn);
		public static void HandleDrivingUpdate(this Snowmobile __self) => _HandleDrivingUpdate757602046.Value.Invoke(__self);
		public static void HandleAnimation(this Snowmobile __self, float xInput) => _HandleAnimation3486905475.Value.Invoke(__self, xInput);
		public static bool LeaveSeat(this Snowmobile __self, Network_Player player) => (bool)_LeaveSeat3461878659.Value.Invoke(__self, player);
		public static bool LeaveSeat(this Snowmobile __self, AttachPlayer attachScript) => (bool)_LeaveSeat3451923620.Value.Invoke(__self, attachScript);
		public static void ResetNetworkPropertiesToSnowmobile(this Snowmobile __self) => _ResetNetworkPropertiesToSnowmobile757602046.Value.Invoke(__self);
		public static int GetPlayerCountInSeats(this Snowmobile __self) => (int)_GetPlayerCountInSeats757602046.Value.Invoke(__self);

	}

	public static class Private_Snowmobile
	{

		private static readonly System.Lazy<StaticFieldAccessor<CanvasHelper>> _canvas =
				new System.Lazy<StaticFieldAccessor<CanvasHelper>>(() => StaticFieldAccessor<CanvasHelper>.Create(typeof(Snowmobile), "canvas"));

		public static CanvasHelper GetCanvas() => _canvas.Value.GetValue();
		public static void SetCanvas(CanvasHelper value) => _canvas.Value.SetValue(value);

	}

	public static class PrivateAccessor_SnowmobileShed
	{

		private static readonly System.Lazy<FieldAccessor<SnowmobileShed, Raft_Network>> __network =
				new System.Lazy<FieldAccessor<SnowmobileShed, Raft_Network>>(() => FieldAccessor<SnowmobileShed, Raft_Network>.Create("_network"));
		private static readonly System.Lazy<FieldAccessor<SnowmobileShed, Snowmobile>> _snowmobilePrefab =
				new System.Lazy<FieldAccessor<SnowmobileShed, Snowmobile>>(() => FieldAccessor<SnowmobileShed, Snowmobile>.Create("snowmobilePrefab"));
		private static readonly System.Lazy<FieldAccessor<SnowmobileShed, UnityEngine.Transform>> _snowmobileParent =
				new System.Lazy<FieldAccessor<SnowmobileShed, UnityEngine.Transform>>(() => FieldAccessor<SnowmobileShed, UnityEngine.Transform>.Create("snowmobileParent"));
		private static readonly System.Lazy<FieldAccessor<SnowmobileShed, UnityEngine.Transform>> _spawnPoint =
				new System.Lazy<FieldAccessor<SnowmobileShed, UnityEngine.Transform>>(() => FieldAccessor<SnowmobileShed, UnityEngine.Transform>.Create("spawnPoint"));
		private static readonly System.Lazy<FieldAccessor<SnowmobileShed, string>> _eventRef_respawn =
				new System.Lazy<FieldAccessor<SnowmobileShed, string>>(() => FieldAccessor<SnowmobileShed, string>.Create("eventRef_respawn"));

		public static Raft_Network Get_network(this SnowmobileShed __self) => __network.Value.GetValue(__self);
		public static void Set_network(this SnowmobileShed __self, Raft_Network value) => __network.Value.SetValue(__self, value);
		public static Snowmobile GetSnowmobilePrefab(this SnowmobileShed __self) => _snowmobilePrefab.Value.GetValue(__self);
		public static void SetSnowmobilePrefab(this SnowmobileShed __self, Snowmobile value) => _snowmobilePrefab.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetSnowmobileParent(this SnowmobileShed __self) => _snowmobileParent.Value.GetValue(__self);
		public static void SetSnowmobileParent(this SnowmobileShed __self, UnityEngine.Transform value) => _snowmobileParent.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetSpawnPoint(this SnowmobileShed __self) => _spawnPoint.Value.GetValue(__self);
		public static void SetSpawnPoint(this SnowmobileShed __self, UnityEngine.Transform value) => _spawnPoint.Value.SetValue(__self, value);
		public static string GetEventRef_respawn(this SnowmobileShed __self) => _eventRef_respawn.Value.GetValue(__self);
		public static void SetEventRef_respawn(this SnowmobileShed __self, string value) => _eventRef_respawn.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<SnowmobileShed>> _OnSnowmobileReset3434833004 =
				new System.Lazy<MethodAccessor<SnowmobileShed>>(() => MethodAccessor<SnowmobileShed>.Create("OnSnowmobileReset", typeof(Snowmobile), typeof(bool)));
		private static readonly System.Lazy<MethodAccessor<SnowmobileShed>> _CreateSnowmobile614750290 =
				new System.Lazy<MethodAccessor<SnowmobileShed>>(() => MethodAccessor<SnowmobileShed>.Create("CreateSnowmobile", typeof(uint), typeof(uint), typeof(UnityEngine.Vector3), typeof(UnityEngine.Quaternion)));
		private static readonly System.Lazy<MethodAccessor<SnowmobileShed>> _DestroySnowmobile757602046 =
				new System.Lazy<MethodAccessor<SnowmobileShed>>(() => MethodAccessor<SnowmobileShed>.Create("DestroySnowmobile"));
		private static readonly System.Lazy<MethodAccessor<SnowmobileShed>> _ResetSnowmobileToShed3450040886 =
				new System.Lazy<MethodAccessor<SnowmobileShed>>(() => MethodAccessor<SnowmobileShed>.Create("ResetSnowmobileToShed", typeof(bool)));

		public static void OnSnowmobileReset(this SnowmobileShed __self, Snowmobile snowmobile, bool viaWater) => _OnSnowmobileReset3434833004.Value.Invoke(__self, snowmobile, viaWater);
		public static void CreateSnowmobile(this SnowmobileShed __self, uint objectIndex, uint behaviourIndex, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation) => _CreateSnowmobile614750290.Value.Invoke(__self, objectIndex, behaviourIndex, position, rotation);
		public static void DestroySnowmobile(this SnowmobileShed __self) => _DestroySnowmobile757602046.Value.Invoke(__self);
		public static bool ResetSnowmobileToShed(this SnowmobileShed __self, bool viaWater) => (bool)_ResetSnowmobileToShed3450040886.Value.Invoke(__self, viaWater);

	}

	public static class PrivateAccessor_Snowmobile_ExtremeExtras
	{

		private static readonly System.Lazy<FieldAccessor<Snowmobile_ExtremeExtras, Raft_Network>> _network =
				new System.Lazy<FieldAccessor<Snowmobile_ExtremeExtras, Raft_Network>>(() => FieldAccessor<Snowmobile_ExtremeExtras, Raft_Network>.Create("network"));
		private static readonly System.Lazy<FieldAccessor<Snowmobile_ExtremeExtras, bool>> _jumping =
				new System.Lazy<FieldAccessor<Snowmobile_ExtremeExtras, bool>>(() => FieldAccessor<Snowmobile_ExtremeExtras, bool>.Create("jumping"));
		private static readonly System.Lazy<FieldAccessor<Snowmobile_ExtremeExtras, float>> _timeSinceGrounded =
				new System.Lazy<FieldAccessor<Snowmobile_ExtremeExtras, float>>(() => FieldAccessor<Snowmobile_ExtremeExtras, float>.Create("timeSinceGrounded"));
		private static readonly System.Lazy<FieldAccessor<Snowmobile_ExtremeExtras, bool>> _isProtecting =
				new System.Lazy<FieldAccessor<Snowmobile_ExtremeExtras, bool>>(() => FieldAccessor<Snowmobile_ExtremeExtras, bool>.Create("isProtecting"));
		private static readonly System.Lazy<FieldAccessor<Snowmobile_ExtremeExtras, bool>> _saidHello =
				new System.Lazy<FieldAccessor<Snowmobile_ExtremeExtras, bool>>(() => FieldAccessor<Snowmobile_ExtremeExtras, bool>.Create("saidHello"));

		public static Raft_Network GetNetwork(this Snowmobile_ExtremeExtras __self) => _network.Value.GetValue(__self);
		public static void SetNetwork(this Snowmobile_ExtremeExtras __self, Raft_Network value) => _network.Value.SetValue(__self, value);
		public static bool GetJumping(this Snowmobile_ExtremeExtras __self) => _jumping.Value.GetValue(__self);
		public static void SetJumping(this Snowmobile_ExtremeExtras __self, bool value) => _jumping.Value.SetValue(__self, value);
		public static float GetTimeSinceGrounded(this Snowmobile_ExtremeExtras __self) => _timeSinceGrounded.Value.GetValue(__self);
		public static void SetTimeSinceGrounded(this Snowmobile_ExtremeExtras __self, float value) => _timeSinceGrounded.Value.SetValue(__self, value);
		public static bool GetIsProtecting(this Snowmobile_ExtremeExtras __self) => _isProtecting.Value.GetValue(__self);
		public static void SetIsProtecting(this Snowmobile_ExtremeExtras __self, bool value) => _isProtecting.Value.SetValue(__self, value);
		public static bool GetSaidHello(this Snowmobile_ExtremeExtras __self) => _saidHello.Value.GetValue(__self);
		public static void SetSaidHello(this Snowmobile_ExtremeExtras __self, bool value) => _saidHello.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Snowmobile_ExtremeExtras>> _Start757602046 =
				new System.Lazy<MethodAccessor<Snowmobile_ExtremeExtras>>(() => MethodAccessor<Snowmobile_ExtremeExtras>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<Snowmobile_ExtremeExtras>> _Jump757602046 =
				new System.Lazy<MethodAccessor<Snowmobile_ExtremeExtras>>(() => MethodAccessor<Snowmobile_ExtremeExtras>.Create("Jump"));

		public static void Start(this Snowmobile_ExtremeExtras __self) => _Start757602046.Value.Invoke(__self);
		public static void Jump(this Snowmobile_ExtremeExtras __self) => _Jump757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_StarChallenge
	{

		private static readonly System.Lazy<FieldAccessor<StarChallenge, Interval_Int>> _horizontalIndexLimit =
				new System.Lazy<FieldAccessor<StarChallenge, Interval_Int>>(() => FieldAccessor<StarChallenge, Interval_Int>.Create("horizontalIndexLimit"));
		private static readonly System.Lazy<FieldAccessor<StarChallenge, Interval_Int>> _verticalIndexLimit =
				new System.Lazy<FieldAccessor<StarChallenge, Interval_Int>>(() => FieldAccessor<StarChallenge, Interval_Int>.Create("verticalIndexLimit"));
		private static readonly System.Lazy<FieldAccessor<StarChallenge, UnityEngine.Vector2>> _positionIndex =
				new System.Lazy<FieldAccessor<StarChallenge, UnityEngine.Vector2>>(() => FieldAccessor<StarChallenge, UnityEngine.Vector2>.Create("positionIndex"));
		private static readonly System.Lazy<FieldAccessor<StarChallenge, UnityEngine.Transform>> _telescope =
				new System.Lazy<FieldAccessor<StarChallenge, UnityEngine.Transform>>(() => FieldAccessor<StarChallenge, UnityEngine.Transform>.Create("telescope"));
		private static readonly System.Lazy<FieldAccessor<StarChallenge, UnityEngine.Transform>> _dome =
				new System.Lazy<FieldAccessor<StarChallenge, UnityEngine.Transform>>(() => FieldAccessor<StarChallenge, UnityEngine.Transform>.Create("dome"));
		private static readonly System.Lazy<FieldAccessor<StarChallenge, float>> _telescopeRotationAmount =
				new System.Lazy<FieldAccessor<StarChallenge, float>>(() => FieldAccessor<StarChallenge, float>.Create("telescopeRotationAmount"));
		private static readonly System.Lazy<FieldAccessor<StarChallenge, float>> _domeRotationAmount =
				new System.Lazy<FieldAccessor<StarChallenge, float>>(() => FieldAccessor<StarChallenge, float>.Create("domeRotationAmount"));
		private static readonly System.Lazy<FieldAccessor<StarChallenge, float>> _rotateSpeed =
				new System.Lazy<FieldAccessor<StarChallenge, float>>(() => FieldAccessor<StarChallenge, float>.Create("rotateSpeed"));
		private static readonly System.Lazy<FieldAccessor<StarChallenge, UnityEngine.RectTransform>> _ui_background =
				new System.Lazy<FieldAccessor<StarChallenge, UnityEngine.RectTransform>>(() => FieldAccessor<StarChallenge, UnityEngine.RectTransform>.Create("ui_background"));
		private static readonly System.Lazy<FieldAccessor<StarChallenge, UnityEngine.Vector2>> _ui_MoveAmount =
				new System.Lazy<FieldAccessor<StarChallenge, UnityEngine.Vector2>>(() => FieldAccessor<StarChallenge, UnityEngine.Vector2>.Create("ui_MoveAmount"));
		private static readonly System.Lazy<FieldAccessor<StarChallenge, float>> _moveSpeed =
				new System.Lazy<FieldAccessor<StarChallenge, float>>(() => FieldAccessor<StarChallenge, float>.Create("moveSpeed"));
		private static readonly System.Lazy<FieldAccessor<StarChallenge, string>> _eventRef_tilt =
				new System.Lazy<FieldAccessor<StarChallenge, string>>(() => FieldAccessor<StarChallenge, string>.Create("eventRef_tilt"));
		private static readonly System.Lazy<FieldAccessor<StarChallenge, string>> _eventRef_rotate =
				new System.Lazy<FieldAccessor<StarChallenge, string>>(() => FieldAccessor<StarChallenge, string>.Create("eventRef_rotate"));
		private static readonly System.Lazy<FieldAccessor<StarChallenge, InteractableButton_Network_Forwarder>> _buttonForwarder =
				new System.Lazy<FieldAccessor<StarChallenge, InteractableButton_Network_Forwarder>>(() => FieldAccessor<StarChallenge, InteractableButton_Network_Forwarder>.Create("buttonForwarder"));

		public static Interval_Int GetHorizontalIndexLimit(this StarChallenge __self) => _horizontalIndexLimit.Value.GetValue(__self);
		public static void SetHorizontalIndexLimit(this StarChallenge __self, Interval_Int value) => _horizontalIndexLimit.Value.SetValue(__self, value);
		public static Interval_Int GetVerticalIndexLimit(this StarChallenge __self) => _verticalIndexLimit.Value.GetValue(__self);
		public static void SetVerticalIndexLimit(this StarChallenge __self, Interval_Int value) => _verticalIndexLimit.Value.SetValue(__self, value);
		public static UnityEngine.Vector2 GetPositionIndex(this StarChallenge __self) => _positionIndex.Value.GetValue(__self);
		public static void SetPositionIndex(this StarChallenge __self, UnityEngine.Vector2 value) => _positionIndex.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetTelescope(this StarChallenge __self) => _telescope.Value.GetValue(__self);
		public static void SetTelescope(this StarChallenge __self, UnityEngine.Transform value) => _telescope.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetDome(this StarChallenge __self) => _dome.Value.GetValue(__self);
		public static void SetDome(this StarChallenge __self, UnityEngine.Transform value) => _dome.Value.SetValue(__self, value);
		public static float GetTelescopeRotationAmount(this StarChallenge __self) => _telescopeRotationAmount.Value.GetValue(__self);
		public static void SetTelescopeRotationAmount(this StarChallenge __self, float value) => _telescopeRotationAmount.Value.SetValue(__self, value);
		public static float GetDomeRotationAmount(this StarChallenge __self) => _domeRotationAmount.Value.GetValue(__self);
		public static void SetDomeRotationAmount(this StarChallenge __self, float value) => _domeRotationAmount.Value.SetValue(__self, value);
		public static float GetRotateSpeed(this StarChallenge __self) => _rotateSpeed.Value.GetValue(__self);
		public static void SetRotateSpeed(this StarChallenge __self, float value) => _rotateSpeed.Value.SetValue(__self, value);
		public static UnityEngine.RectTransform GetUi_background(this StarChallenge __self) => _ui_background.Value.GetValue(__self);
		public static void SetUi_background(this StarChallenge __self, UnityEngine.RectTransform value) => _ui_background.Value.SetValue(__self, value);
		public static UnityEngine.Vector2 GetUi_MoveAmount(this StarChallenge __self) => _ui_MoveAmount.Value.GetValue(__self);
		public static void SetUi_MoveAmount(this StarChallenge __self, UnityEngine.Vector2 value) => _ui_MoveAmount.Value.SetValue(__self, value);
		public static float GetMoveSpeed(this StarChallenge __self) => _moveSpeed.Value.GetValue(__self);
		public static void SetMoveSpeed(this StarChallenge __self, float value) => _moveSpeed.Value.SetValue(__self, value);
		public static string GetEventRef_tilt(this StarChallenge __self) => _eventRef_tilt.Value.GetValue(__self);
		public static void SetEventRef_tilt(this StarChallenge __self, string value) => _eventRef_tilt.Value.SetValue(__self, value);
		public static string GetEventRef_rotate(this StarChallenge __self) => _eventRef_rotate.Value.GetValue(__self);
		public static void SetEventRef_rotate(this StarChallenge __self, string value) => _eventRef_rotate.Value.SetValue(__self, value);
		public static InteractableButton_Network_Forwarder GetButtonForwarder(this StarChallenge __self) => _buttonForwarder.Value.GetValue(__self);
		public static void SetButtonForwarder(this StarChallenge __self, InteractableButton_Network_Forwarder value) => _buttonForwarder.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<StarChallenge>> _Awake757602046 =
				new System.Lazy<MethodAccessor<StarChallenge>>(() => MethodAccessor<StarChallenge>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<StarChallenge>> _Update757602046 =
				new System.Lazy<MethodAccessor<StarChallenge>>(() => MethodAccessor<StarChallenge>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<StarChallenge>> _ButtonPress3486186818 =
				new System.Lazy<MethodAccessor<StarChallenge>>(() => MethodAccessor<StarChallenge>.Create("ButtonPress", typeof(int)));
		private static readonly System.Lazy<MethodAccessor<StarChallenge>> _Move3486196942 =
				new System.Lazy<MethodAccessor<StarChallenge>>(() => MethodAccessor<StarChallenge>.Create("Move", typeof(UnityEngine.Vector2)));

		public static void Awake(this StarChallenge __self) => _Awake757602046.Value.Invoke(__self);
		public static void Update(this StarChallenge __self) => _Update757602046.Value.Invoke(__self);
		public static bool ButtonPress(this StarChallenge __self, int buttonIndex) => (bool)_ButtonPress3486186818.Value.Invoke(__self, buttonIndex);
		public static bool Move(this StarChallenge __self, UnityEngine.Vector2 direction) => (bool)_Move3486196942.Value.Invoke(__self, direction);

	}

	public static class PrivateAccessor_TradingPost
	{

		private static readonly System.Lazy<FieldAccessor<TradingPost, UnityEngine.Animator>> _animator =
				new System.Lazy<FieldAccessor<TradingPost, UnityEngine.Animator>>(() => FieldAccessor<TradingPost, UnityEngine.Animator>.Create("animator"));
		private static readonly System.Lazy<FieldAccessor<TradingPost, string>> _soundStartTrading =
				new System.Lazy<FieldAccessor<TradingPost, string>>(() => FieldAccessor<TradingPost, string>.Create("soundStartTrading"));
		private static readonly System.Lazy<FieldAccessor<TradingPost, string>> _soundStopTrading =
				new System.Lazy<FieldAccessor<TradingPost, string>>(() => FieldAccessor<TradingPost, string>.Create("soundStopTrading"));
		private static readonly System.Lazy<FieldAccessor<TradingPost, string>> _soundBuyItem =
				new System.Lazy<FieldAccessor<TradingPost, string>>(() => FieldAccessor<TradingPost, string>.Create("soundBuyItem"));
		private static readonly System.Lazy<FieldAccessor<TradingPost, string>> _soundSellItem =
				new System.Lazy<FieldAccessor<TradingPost, string>>(() => FieldAccessor<TradingPost, string>.Create("soundSellItem"));
		private static readonly System.Lazy<FieldAccessor<TradingPost, string>> _soundUnlockTier =
				new System.Lazy<FieldAccessor<TradingPost, string>>(() => FieldAccessor<TradingPost, string>.Create("soundUnlockTier"));

		public static UnityEngine.Animator GetAnimator(this TradingPost __self) => _animator.Value.GetValue(__self);
		public static void SetAnimator(this TradingPost __self, UnityEngine.Animator value) => _animator.Value.SetValue(__self, value);
		public static string GetSoundStartTrading(this TradingPost __self) => _soundStartTrading.Value.GetValue(__self);
		public static void SetSoundStartTrading(this TradingPost __self, string value) => _soundStartTrading.Value.SetValue(__self, value);
		public static string GetSoundStopTrading(this TradingPost __self) => _soundStopTrading.Value.GetValue(__self);
		public static void SetSoundStopTrading(this TradingPost __self, string value) => _soundStopTrading.Value.SetValue(__self, value);
		public static string GetSoundBuyItem(this TradingPost __self) => _soundBuyItem.Value.GetValue(__self);
		public static void SetSoundBuyItem(this TradingPost __self, string value) => _soundBuyItem.Value.SetValue(__self, value);
		public static string GetSoundSellItem(this TradingPost __self) => _soundSellItem.Value.GetValue(__self);
		public static void SetSoundSellItem(this TradingPost __self, string value) => _soundSellItem.Value.SetValue(__self, value);
		public static string GetSoundUnlockTier(this TradingPost __self) => _soundUnlockTier.Value.GetValue(__self);
		public static void SetSoundUnlockTier(this TradingPost __self, string value) => _soundUnlockTier.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<TradingPost>> _Start757602046 =
				new System.Lazy<MethodAccessor<TradingPost>>(() => MethodAccessor<TradingPost>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<TradingPost>> _Update757602046 =
				new System.Lazy<MethodAccessor<TradingPost>>(() => MethodAccessor<TradingPost>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<TradingPost>> _OpenUI757602046 =
				new System.Lazy<MethodAccessor<TradingPost>>(() => MethodAccessor<TradingPost>.Create("OpenUI"));

		public static void Start(this TradingPost __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this TradingPost __self) => _Update757602046.Value.Invoke(__self);
		public static void OpenUI(this TradingPost __self) => _OpenUI757602046.Value.Invoke(__self);

	}

	public static class Private_TradingPost
	{

		private static readonly System.Lazy<StaticFieldAccessor<System.Collections.Generic.List<SO_TradingPost_Buyable>>> _startingStock =
				new System.Lazy<StaticFieldAccessor<System.Collections.Generic.List<SO_TradingPost_Buyable>>>(() => StaticFieldAccessor<System.Collections.Generic.List<SO_TradingPost_Buyable>>.Create(typeof(TradingPost), "startingStock"));
		private static readonly System.Lazy<StaticFieldAccessor<TradingPostUI>> _tradingPostUI =
				new System.Lazy<StaticFieldAccessor<TradingPostUI>>(() => StaticFieldAccessor<TradingPostUI>.Create(typeof(TradingPost), "tradingPostUI"));
		private static readonly System.Lazy<StaticFieldAccessor<CanvasHelper>> _canvasHelper =
				new System.Lazy<StaticFieldAccessor<CanvasHelper>>(() => StaticFieldAccessor<CanvasHelper>.Create(typeof(TradingPost), "canvasHelper"));

		public static System.Collections.Generic.List<SO_TradingPost_Buyable> GetStartingStock() => _startingStock.Value.GetValue();
		public static void SetStartingStock(System.Collections.Generic.List<SO_TradingPost_Buyable> value) => _startingStock.Value.SetValue(value);
		public static TradingPostUI GetTradingPostUI() => _tradingPostUI.Value.GetValue();
		public static void SetTradingPostUI(TradingPostUI value) => _tradingPostUI.Value.SetValue(value);
		public static CanvasHelper GetCanvasHelper() => _canvasHelper.Value.GetValue();
		public static void SetCanvasHelper(CanvasHelper value) => _canvasHelper.Value.SetValue(value);

	}

	public static class PrivateAccessor_TradingPostUI
	{

		private static readonly System.Lazy<FieldAccessor<TradingPostUI, int>> _currentReputation =
				new System.Lazy<FieldAccessor<TradingPostUI, int>>(() => FieldAccessor<TradingPostUI, int>.Create("currentReputation"));
		private static readonly System.Lazy<FieldAccessor<TradingPostUI, UI_Cost_Interactable>> _leftPanelPrefab =
				new System.Lazy<FieldAccessor<TradingPostUI, UI_Cost_Interactable>>(() => FieldAccessor<TradingPostUI, UI_Cost_Interactable>.Create("leftPanelPrefab"));
		private static readonly System.Lazy<FieldAccessor<TradingPostUI, UnityEngine.Transform[]>> _buyContentParent =
				new System.Lazy<FieldAccessor<TradingPostUI, UnityEngine.Transform[]>>(() => FieldAccessor<TradingPostUI, UnityEngine.Transform[]>.Create("buyContentParent"));
		private static readonly System.Lazy<FieldAccessor<TradingPostUI, UnityEngine.Transform>> _sellContentParent =
				new System.Lazy<FieldAccessor<TradingPostUI, UnityEngine.Transform>>(() => FieldAccessor<TradingPostUI, UnityEngine.Transform>.Create("sellContentParent"));
		private static readonly System.Lazy<FieldAccessor<TradingPostUI, UnityEngine.GameObject>> _rightPanel =
				new System.Lazy<FieldAccessor<TradingPostUI, UnityEngine.GameObject>>(() => FieldAccessor<TradingPostUI, UnityEngine.GameObject>.Create("rightPanel"));
		private static readonly System.Lazy<FieldAccessor<TradingPostUI, UI_Cost>> _rightPanelInfoCostUI =
				new System.Lazy<FieldAccessor<TradingPostUI, UI_Cost>>(() => FieldAccessor<TradingPostUI, UI_Cost>.Create("rightPanelInfoCostUI"));
		private static readonly System.Lazy<FieldAccessor<TradingPostUI, TabGroup>> _buyAndSellTabgroup =
				new System.Lazy<FieldAccessor<TradingPostUI, TabGroup>>(() => FieldAccessor<TradingPostUI, TabGroup>.Create("buyAndSellTabgroup"));
		private static readonly System.Lazy<FieldAccessor<TradingPostUI, UnityEngine.UI.Slider>> _reputationSlider =
				new System.Lazy<FieldAccessor<TradingPostUI, UnityEngine.UI.Slider>>(() => FieldAccessor<TradingPostUI, UnityEngine.UI.Slider>.Create("reputationSlider"));
		private static readonly System.Lazy<FieldAccessor<TradingPostUI, UnityEngine.UI.Text>> _reputationSliderText =
				new System.Lazy<FieldAccessor<TradingPostUI, UnityEngine.UI.Text>>(() => FieldAccessor<TradingPostUI, UnityEngine.UI.Text>.Create("reputationSliderText"));
		private static readonly System.Lazy<FieldAccessor<TradingPostUI, UnityEngine.UI.Text>> _reputationSliderTitle =
				new System.Lazy<FieldAccessor<TradingPostUI, UnityEngine.UI.Text>>(() => FieldAccessor<TradingPostUI, UnityEngine.UI.Text>.Create("reputationSliderTitle"));
		private static readonly System.Lazy<FieldAccessor<TradingPostUI, TierUnlock>> _tier2 =
				new System.Lazy<FieldAccessor<TradingPostUI, TierUnlock>>(() => FieldAccessor<TradingPostUI, TierUnlock>.Create("tier2"));
		private static readonly System.Lazy<FieldAccessor<TradingPostUI, TierUnlock>> _tier3 =
				new System.Lazy<FieldAccessor<TradingPostUI, TierUnlock>>(() => FieldAccessor<TradingPostUI, TierUnlock>.Create("tier3"));
		private static readonly System.Lazy<FieldAccessor<TradingPostUI, UnityEngine.GameObject>> _buySection =
				new System.Lazy<FieldAccessor<TradingPostUI, UnityEngine.GameObject>>(() => FieldAccessor<TradingPostUI, UnityEngine.GameObject>.Create("buySection"));
		private static readonly System.Lazy<FieldAccessor<TradingPostUI, UnityEngine.Color>> _color_inStock =
				new System.Lazy<FieldAccessor<TradingPostUI, UnityEngine.Color>>(() => FieldAccessor<TradingPostUI, UnityEngine.Color>.Create("color_inStock"));
		private static readonly System.Lazy<FieldAccessor<TradingPostUI, UnityEngine.Color>> _color_outOfStock =
				new System.Lazy<FieldAccessor<TradingPostUI, UnityEngine.Color>>(() => FieldAccessor<TradingPostUI, UnityEngine.Color>.Create("color_outOfStock"));
		private static readonly System.Lazy<FieldAccessor<TradingPostUI, UnityEngine.UI.Text>> _text_inStock =
				new System.Lazy<FieldAccessor<TradingPostUI, UnityEngine.UI.Text>>(() => FieldAccessor<TradingPostUI, UnityEngine.UI.Text>.Create("text_inStock"));
		private static readonly System.Lazy<FieldAccessor<TradingPostUI, UI_Cost[]>> _rightPanelRequiredCostsUI =
				new System.Lazy<FieldAccessor<TradingPostUI, UI_Cost[]>>(() => FieldAccessor<TradingPostUI, UI_Cost[]>.Create("rightPanelRequiredCostsUI"));
		private static readonly System.Lazy<FieldAccessor<TradingPostUI, UnityEngine.UI.Button>> _button_purchase =
				new System.Lazy<FieldAccessor<TradingPostUI, UnityEngine.UI.Button>>(() => FieldAccessor<TradingPostUI, UnityEngine.UI.Button>.Create("button_purchase"));
		private static readonly System.Lazy<FieldAccessor<TradingPostUI, UnityEngine.GameObject>> _sellSection =
				new System.Lazy<FieldAccessor<TradingPostUI, UnityEngine.GameObject>>(() => FieldAccessor<TradingPostUI, UnityEngine.GameObject>.Create("sellSection"));
		private static readonly System.Lazy<FieldAccessor<TradingPostUI, UI_Cost>> _reputationUICost =
				new System.Lazy<FieldAccessor<TradingPostUI, UI_Cost>>(() => FieldAccessor<TradingPostUI, UI_Cost>.Create("reputationUICost"));
		private static readonly System.Lazy<FieldAccessor<TradingPostUI, UI_Cost>> _sellRewardUICost =
				new System.Lazy<FieldAccessor<TradingPostUI, UI_Cost>>(() => FieldAccessor<TradingPostUI, UI_Cost>.Create("sellRewardUICost"));
		private static readonly System.Lazy<FieldAccessor<TradingPostUI, UnityEngine.UI.Button>> _button_sell =
				new System.Lazy<FieldAccessor<TradingPostUI, UnityEngine.UI.Button>>(() => FieldAccessor<TradingPostUI, UnityEngine.UI.Button>.Create("button_sell"));
		private static readonly System.Lazy<FieldAccessor<TradingPostUI, string>> _uiClickedSound =
				new System.Lazy<FieldAccessor<TradingPostUI, string>>(() => FieldAccessor<TradingPostUI, string>.Create("uiClickedSound"));
		private static readonly System.Lazy<FieldAccessor<TradingPostUI, Network_Player>> _localPlayer =
				new System.Lazy<FieldAccessor<TradingPostUI, Network_Player>>(() => FieldAccessor<TradingPostUI, Network_Player>.Create("localPlayer"));
		private static readonly System.Lazy<FieldAccessor<TradingPostUI, TradingPost>> _currentTradingPost =
				new System.Lazy<FieldAccessor<TradingPostUI, TradingPost>>(() => FieldAccessor<TradingPostUI, TradingPost>.Create("currentTradingPost"));
		private static readonly System.Lazy<FieldAccessor<TradingPostUI, SO_TradingPost_Buyable.Instance>> _selectedBuyableItem =
				new System.Lazy<FieldAccessor<TradingPostUI, SO_TradingPost_Buyable.Instance>>(() => FieldAccessor<TradingPostUI, SO_TradingPost_Buyable.Instance>.Create("selectedBuyableItem"));
		private static readonly System.Lazy<FieldAccessor<TradingPostUI, SO_TradingPost_Sellable>> _selectedSellableItem =
				new System.Lazy<FieldAccessor<TradingPostUI, SO_TradingPost_Sellable>>(() => FieldAccessor<TradingPostUI, SO_TradingPost_Sellable>.Create("selectedSellableItem"));
		private static readonly System.Lazy<FieldAccessor<TradingPostUI, System.Collections.Generic.List<UI_Cost_Interactable>>> _buyableMenuItems =
				new System.Lazy<FieldAccessor<TradingPostUI, System.Collections.Generic.List<UI_Cost_Interactable>>>(() => FieldAccessor<TradingPostUI, System.Collections.Generic.List<UI_Cost_Interactable>>.Create("buyableMenuItems"));
		private static readonly System.Lazy<FieldAccessor<TradingPostUI, Raft_Network>> _network =
				new System.Lazy<FieldAccessor<TradingPostUI, Raft_Network>>(() => FieldAccessor<TradingPostUI, Raft_Network>.Create("network"));
		private static readonly System.Lazy<FieldAccessor<TradingPostUI, TradingPost.Tier>> _currentTier =
				new System.Lazy<FieldAccessor<TradingPostUI, TradingPost.Tier>>(() => FieldAccessor<TradingPostUI, TradingPost.Tier>.Create("currentTier"));

		public static int GetCurrentReputation(this TradingPostUI __self) => _currentReputation.Value.GetValue(__self);
		public static void SetCurrentReputation(this TradingPostUI __self, int value) => _currentReputation.Value.SetValue(__self, value);
		public static UI_Cost_Interactable GetLeftPanelPrefab(this TradingPostUI __self) => _leftPanelPrefab.Value.GetValue(__self);
		public static void SetLeftPanelPrefab(this TradingPostUI __self, UI_Cost_Interactable value) => _leftPanelPrefab.Value.SetValue(__self, value);
		public static UnityEngine.Transform[] GetBuyContentParent(this TradingPostUI __self) => _buyContentParent.Value.GetValue(__self);
		public static void SetBuyContentParent(this TradingPostUI __self, UnityEngine.Transform[] value) => _buyContentParent.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetSellContentParent(this TradingPostUI __self) => _sellContentParent.Value.GetValue(__self);
		public static void SetSellContentParent(this TradingPostUI __self, UnityEngine.Transform value) => _sellContentParent.Value.SetValue(__self, value);
		public static UnityEngine.GameObject GetRightPanel(this TradingPostUI __self) => _rightPanel.Value.GetValue(__self);
		public static void SetRightPanel(this TradingPostUI __self, UnityEngine.GameObject value) => _rightPanel.Value.SetValue(__self, value);
		public static UI_Cost GetRightPanelInfoCostUI(this TradingPostUI __self) => _rightPanelInfoCostUI.Value.GetValue(__self);
		public static void SetRightPanelInfoCostUI(this TradingPostUI __self, UI_Cost value) => _rightPanelInfoCostUI.Value.SetValue(__self, value);
		public static TabGroup GetBuyAndSellTabgroup(this TradingPostUI __self) => _buyAndSellTabgroup.Value.GetValue(__self);
		public static void SetBuyAndSellTabgroup(this TradingPostUI __self, TabGroup value) => _buyAndSellTabgroup.Value.SetValue(__self, value);
		public static UnityEngine.UI.Slider GetReputationSlider(this TradingPostUI __self) => _reputationSlider.Value.GetValue(__self);
		public static void SetReputationSlider(this TradingPostUI __self, UnityEngine.UI.Slider value) => _reputationSlider.Value.SetValue(__self, value);
		public static UnityEngine.UI.Text GetReputationSliderText(this TradingPostUI __self) => _reputationSliderText.Value.GetValue(__self);
		public static void SetReputationSliderText(this TradingPostUI __self, UnityEngine.UI.Text value) => _reputationSliderText.Value.SetValue(__self, value);
		public static UnityEngine.UI.Text GetReputationSliderTitle(this TradingPostUI __self) => _reputationSliderTitle.Value.GetValue(__self);
		public static void SetReputationSliderTitle(this TradingPostUI __self, UnityEngine.UI.Text value) => _reputationSliderTitle.Value.SetValue(__self, value);
		public static TierUnlock GetTier2(this TradingPostUI __self) => _tier2.Value.GetValue(__self);
		public static void SetTier2(this TradingPostUI __self, TierUnlock value) => _tier2.Value.SetValue(__self, value);
		public static TierUnlock GetTier3(this TradingPostUI __self) => _tier3.Value.GetValue(__self);
		public static void SetTier3(this TradingPostUI __self, TierUnlock value) => _tier3.Value.SetValue(__self, value);
		public static UnityEngine.GameObject GetBuySection(this TradingPostUI __self) => _buySection.Value.GetValue(__self);
		public static void SetBuySection(this TradingPostUI __self, UnityEngine.GameObject value) => _buySection.Value.SetValue(__self, value);
		public static UnityEngine.Color GetColor_inStock(this TradingPostUI __self) => _color_inStock.Value.GetValue(__self);
		public static void SetColor_inStock(this TradingPostUI __self, UnityEngine.Color value) => _color_inStock.Value.SetValue(__self, value);
		public static UnityEngine.Color GetColor_outOfStock(this TradingPostUI __self) => _color_outOfStock.Value.GetValue(__self);
		public static void SetColor_outOfStock(this TradingPostUI __self, UnityEngine.Color value) => _color_outOfStock.Value.SetValue(__self, value);
		public static UnityEngine.UI.Text GetText_inStock(this TradingPostUI __self) => _text_inStock.Value.GetValue(__self);
		public static void SetText_inStock(this TradingPostUI __self, UnityEngine.UI.Text value) => _text_inStock.Value.SetValue(__self, value);
		public static UI_Cost[] GetRightPanelRequiredCostsUI(this TradingPostUI __self) => _rightPanelRequiredCostsUI.Value.GetValue(__self);
		public static void SetRightPanelRequiredCostsUI(this TradingPostUI __self, UI_Cost[] value) => _rightPanelRequiredCostsUI.Value.SetValue(__self, value);
		public static UnityEngine.UI.Button GetButton_purchase(this TradingPostUI __self) => _button_purchase.Value.GetValue(__self);
		public static void SetButton_purchase(this TradingPostUI __self, UnityEngine.UI.Button value) => _button_purchase.Value.SetValue(__self, value);
		public static UnityEngine.GameObject GetSellSection(this TradingPostUI __self) => _sellSection.Value.GetValue(__self);
		public static void SetSellSection(this TradingPostUI __self, UnityEngine.GameObject value) => _sellSection.Value.SetValue(__self, value);
		public static UI_Cost GetReputationUICost(this TradingPostUI __self) => _reputationUICost.Value.GetValue(__self);
		public static void SetReputationUICost(this TradingPostUI __self, UI_Cost value) => _reputationUICost.Value.SetValue(__self, value);
		public static UI_Cost GetSellRewardUICost(this TradingPostUI __self) => _sellRewardUICost.Value.GetValue(__self);
		public static void SetSellRewardUICost(this TradingPostUI __self, UI_Cost value) => _sellRewardUICost.Value.SetValue(__self, value);
		public static UnityEngine.UI.Button GetButton_sell(this TradingPostUI __self) => _button_sell.Value.GetValue(__self);
		public static void SetButton_sell(this TradingPostUI __self, UnityEngine.UI.Button value) => _button_sell.Value.SetValue(__self, value);
		public static string GetUiClickedSound(this TradingPostUI __self) => _uiClickedSound.Value.GetValue(__self);
		public static void SetUiClickedSound(this TradingPostUI __self, string value) => _uiClickedSound.Value.SetValue(__self, value);
		public static Network_Player GetLocalPlayer(this TradingPostUI __self) => _localPlayer.Value.GetValue(__self);
		public static void SetLocalPlayer(this TradingPostUI __self, Network_Player value) => _localPlayer.Value.SetValue(__self, value);
		public static TradingPost GetCurrentTradingPost(this TradingPostUI __self) => _currentTradingPost.Value.GetValue(__self);
		public static void SetCurrentTradingPost(this TradingPostUI __self, TradingPost value) => _currentTradingPost.Value.SetValue(__self, value);
		public static SO_TradingPost_Buyable.Instance GetSelectedBuyableItem(this TradingPostUI __self) => _selectedBuyableItem.Value.GetValue(__self);
		public static void SetSelectedBuyableItem(this TradingPostUI __self, SO_TradingPost_Buyable.Instance value) => _selectedBuyableItem.Value.SetValue(__self, value);
		public static SO_TradingPost_Sellable GetSelectedSellableItem(this TradingPostUI __self) => _selectedSellableItem.Value.GetValue(__self);
		public static void SetSelectedSellableItem(this TradingPostUI __self, SO_TradingPost_Sellable value) => _selectedSellableItem.Value.SetValue(__self, value);
		public static System.Collections.Generic.List<UI_Cost_Interactable> GetBuyableMenuItems(this TradingPostUI __self) => _buyableMenuItems.Value.GetValue(__self);
		public static void SetBuyableMenuItems(this TradingPostUI __self, System.Collections.Generic.List<UI_Cost_Interactable> value) => _buyableMenuItems.Value.SetValue(__self, value);
		public static Raft_Network GetNetwork(this TradingPostUI __self) => _network.Value.GetValue(__self);
		public static void SetNetwork(this TradingPostUI __self, Raft_Network value) => _network.Value.SetValue(__self, value);
		public static TradingPost.Tier GetCurrentTier(this TradingPostUI __self) => _currentTier.Value.GetValue(__self);
		public static void SetCurrentTier(this TradingPostUI __self, TradingPost.Tier value) => _currentTier.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<TradingPostUI>> _Awake757602046 =
				new System.Lazy<MethodAccessor<TradingPostUI>>(() => MethodAccessor<TradingPostUI>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<TradingPostUI>> _Start757602046 =
				new System.Lazy<MethodAccessor<TradingPostUI>>(() => MethodAccessor<TradingPostUI>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<TradingPostUI>> _OnNewTabOpen757602046 =
				new System.Lazy<MethodAccessor<TradingPostUI>>(() => MethodAccessor<TradingPostUI>.Create("OnNewTabOpen"));
		private static readonly System.Lazy<MethodAccessor<TradingPostUI>> _PlayClickSound757602046 =
				new System.Lazy<MethodAccessor<TradingPostUI>>(() => MethodAccessor<TradingPostUI>.Create("PlayClickSound"));
		private static readonly System.Lazy<MethodAccessor<TradingPostUI>> _RefreshReputationUI757602046 =
				new System.Lazy<MethodAccessor<TradingPostUI>>(() => MethodAccessor<TradingPostUI>.Create("RefreshReputationUI"));
		private static readonly System.Lazy<MethodAccessor<TradingPostUI>> _ReputationTierUp3452019790 =
				new System.Lazy<MethodAccessor<TradingPostUI>>(() => MethodAccessor<TradingPostUI>.Create("ReputationTierUp", typeof(TradingPost.Tier)));

		public static void Awake(this TradingPostUI __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this TradingPostUI __self) => _Start757602046.Value.Invoke(__self);
		public static void OnNewTabOpen(this TradingPostUI __self) => _OnNewTabOpen757602046.Value.Invoke(__self);
		public static void PlayClickSound(this TradingPostUI __self) => _PlayClickSound757602046.Value.Invoke(__self);
		public static void RefreshReputationUI(this TradingPostUI __self) => _RefreshReputationUI757602046.Value.Invoke(__self);
		public static void ReputationTierUp(this TradingPostUI __self, TradingPost.Tier tier) => _ReputationTierUp3452019790.Value.Invoke(__self, tier);

	}

	public static class PrivateAccessor_AcidPool
	{

		private static readonly System.Lazy<FieldAccessor<AcidPool, FMODUnity.StudioEventEmitter>> _emitter =
				new System.Lazy<FieldAccessor<AcidPool, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<AcidPool, FMODUnity.StudioEventEmitter>.Create("emitter"));
		private static readonly System.Lazy<FieldAccessor<AcidPool, bool>> _stoppedSound =
				new System.Lazy<FieldAccessor<AcidPool, bool>>(() => FieldAccessor<AcidPool, bool>.Create("stoppedSound"));

		public static FMODUnity.StudioEventEmitter GetEmitter(this AcidPool __self) => _emitter.Value.GetValue(__self);
		public static void SetEmitter(this AcidPool __self, FMODUnity.StudioEventEmitter value) => _emitter.Value.SetValue(__self, value);
		public static bool GetStoppedSound(this AcidPool __self) => _stoppedSound.Value.GetValue(__self);
		public static void SetStoppedSound(this AcidPool __self, bool value) => _stoppedSound.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_Boss_OlofPart1
	{

		private static readonly System.Lazy<FieldAccessor<Boss_OlofPart1, Dialogue>> _dialogue =
				new System.Lazy<FieldAccessor<Boss_OlofPart1, Dialogue>>(() => FieldAccessor<Boss_OlofPart1, Dialogue>.Create("dialogue"));
		private static readonly System.Lazy<FieldAccessor<Boss_OlofPart1, LandmarkEntityCollection>> _entityCollection =
				new System.Lazy<FieldAccessor<Boss_OlofPart1, LandmarkEntityCollection>>(() => FieldAccessor<Boss_OlofPart1, LandmarkEntityCollection>.Create("entityCollection"));
		private static readonly System.Lazy<FieldAccessor<Boss_OlofPart1, QuestEventBase>> _olofExitInteractable =
				new System.Lazy<FieldAccessor<Boss_OlofPart1, QuestEventBase>>(() => FieldAccessor<Boss_OlofPart1, QuestEventBase>.Create("olofExitInteractable"));
		private static readonly System.Lazy<FieldAccessor<Boss_OlofPart1, TimerEventer>> _spawnHyenaTimer =
				new System.Lazy<FieldAccessor<Boss_OlofPart1, TimerEventer>>(() => FieldAccessor<Boss_OlofPart1, TimerEventer>.Create("spawnHyenaTimer"));
		private static readonly System.Lazy<FieldAccessor<Boss_OlofPart1, TimerEventer>> _timerCheckForSpawnCondition =
				new System.Lazy<FieldAccessor<Boss_OlofPart1, TimerEventer>>(() => FieldAccessor<Boss_OlofPart1, TimerEventer>.Create("timerCheckForSpawnCondition"));
		private static readonly System.Lazy<FieldAccessor<Boss_OlofPart1, bool>> _canSpawn =
				new System.Lazy<FieldAccessor<Boss_OlofPart1, bool>>(() => FieldAccessor<Boss_OlofPart1, bool>.Create("canSpawn"));
		private static readonly System.Lazy<FieldAccessor<Boss_OlofPart1, System.Collections.Generic.List<LandmarkEntitySpawner>>> _availableSpawners =
				new System.Lazy<FieldAccessor<Boss_OlofPart1, System.Collections.Generic.List<LandmarkEntitySpawner>>>(() => FieldAccessor<Boss_OlofPart1, System.Collections.Generic.List<LandmarkEntitySpawner>>.Create("availableSpawners"));
		private static readonly System.Lazy<FieldAccessor<Boss_OlofPart1, Raft_Network>> _network =
				new System.Lazy<FieldAccessor<Boss_OlofPart1, Raft_Network>>(() => FieldAccessor<Boss_OlofPart1, Raft_Network>.Create("network"));

		public static Dialogue GetDialogue(this Boss_OlofPart1 __self) => _dialogue.Value.GetValue(__self);
		public static void SetDialogue(this Boss_OlofPart1 __self, Dialogue value) => _dialogue.Value.SetValue(__self, value);
		public static LandmarkEntityCollection GetEntityCollection(this Boss_OlofPart1 __self) => _entityCollection.Value.GetValue(__self);
		public static void SetEntityCollection(this Boss_OlofPart1 __self, LandmarkEntityCollection value) => _entityCollection.Value.SetValue(__self, value);
		public static QuestEventBase GetOlofExitInteractable(this Boss_OlofPart1 __self) => _olofExitInteractable.Value.GetValue(__self);
		public static void SetOlofExitInteractable(this Boss_OlofPart1 __self, QuestEventBase value) => _olofExitInteractable.Value.SetValue(__self, value);
		public static TimerEventer GetSpawnHyenaTimer(this Boss_OlofPart1 __self) => _spawnHyenaTimer.Value.GetValue(__self);
		public static void SetSpawnHyenaTimer(this Boss_OlofPart1 __self, TimerEventer value) => _spawnHyenaTimer.Value.SetValue(__self, value);
		public static TimerEventer GetTimerCheckForSpawnCondition(this Boss_OlofPart1 __self) => _timerCheckForSpawnCondition.Value.GetValue(__self);
		public static void SetTimerCheckForSpawnCondition(this Boss_OlofPart1 __self, TimerEventer value) => _timerCheckForSpawnCondition.Value.SetValue(__self, value);
		public static bool GetCanSpawn(this Boss_OlofPart1 __self) => _canSpawn.Value.GetValue(__self);
		public static void SetCanSpawn(this Boss_OlofPart1 __self, bool value) => _canSpawn.Value.SetValue(__self, value);
		public static System.Collections.Generic.List<LandmarkEntitySpawner> GetAvailableSpawners(this Boss_OlofPart1 __self) => _availableSpawners.Value.GetValue(__self);
		public static void SetAvailableSpawners(this Boss_OlofPart1 __self, System.Collections.Generic.List<LandmarkEntitySpawner> value) => _availableSpawners.Value.SetValue(__self, value);
		public static Raft_Network GetNetwork(this Boss_OlofPart1 __self) => _network.Value.GetValue(__self);
		public static void SetNetwork(this Boss_OlofPart1 __self, Raft_Network value) => _network.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Boss_OlofPart1>> _Start757602046 =
				new System.Lazy<MethodAccessor<Boss_OlofPart1>>(() => MethodAccessor<Boss_OlofPart1>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<Boss_OlofPart1>> _Update757602046 =
				new System.Lazy<MethodAccessor<Boss_OlofPart1>>(() => MethodAccessor<Boss_OlofPart1>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<Boss_OlofPart1>> _ActivateRespawn757602046 =
				new System.Lazy<MethodAccessor<Boss_OlofPart1>>(() => MethodAccessor<Boss_OlofPart1>.Create("ActivateRespawn"));
		private static readonly System.Lazy<MethodAccessor<Boss_OlofPart1>> _ActivateSpawn3486082073 =
				new System.Lazy<MethodAccessor<Boss_OlofPart1>>(() => MethodAccessor<Boss_OlofPart1>.Create("ActivateSpawn", typeof(System.Collections.Generic.List<LandmarkEntitySpawner>)));
		private static readonly System.Lazy<MethodAccessor<Boss_OlofPart1>> _CheckSpawnCondition757602046 =
				new System.Lazy<MethodAccessor<Boss_OlofPart1>>(() => MethodAccessor<Boss_OlofPart1>.Create("CheckSpawnCondition"));

		public static void Start(this Boss_OlofPart1 __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this Boss_OlofPart1 __self) => _Update757602046.Value.Invoke(__self);
		public static void ActivateRespawn(this Boss_OlofPart1 __self) => _ActivateRespawn757602046.Value.Invoke(__self);
		public static void ActivateSpawn(this Boss_OlofPart1 __self, System.Collections.Generic.List<LandmarkEntitySpawner> spawners) => _ActivateSpawn3486082073.Value.Invoke(__self, spawners);
		public static void CheckSpawnCondition(this Boss_OlofPart1 __self) => _CheckSpawnCondition757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Boss_OlofPart2
	{

		private static readonly System.Lazy<FieldAccessor<Boss_OlofPart2, AnimatorController>> _animatorController =
				new System.Lazy<FieldAccessor<Boss_OlofPart2, AnimatorController>>(() => FieldAccessor<Boss_OlofPart2, AnimatorController>.Create("animatorController"));
		private static readonly System.Lazy<FieldAccessor<Boss_OlofPart2, float>> _throwHeight =
				new System.Lazy<FieldAccessor<Boss_OlofPart2, float>>(() => FieldAccessor<Boss_OlofPart2, float>.Create("throwHeight"));
		private static readonly System.Lazy<FieldAccessor<Boss_OlofPart2, UnityEngine.Coroutine>> _throwRoutine =
				new System.Lazy<FieldAccessor<Boss_OlofPart2, UnityEngine.Coroutine>>(() => FieldAccessor<Boss_OlofPart2, UnityEngine.Coroutine>.Create("throwRoutine"));
		private static readonly System.Lazy<FieldAccessor<Boss_OlofPart2, bool>> _waitingForThrowEvent =
				new System.Lazy<FieldAccessor<Boss_OlofPart2, bool>>(() => FieldAccessor<Boss_OlofPart2, bool>.Create("waitingForThrowEvent"));
		private static readonly System.Lazy<FieldAccessor<Boss_OlofPart2, Raft_Network>> _network =
				new System.Lazy<FieldAccessor<Boss_OlofPart2, Raft_Network>>(() => FieldAccessor<Boss_OlofPart2, Raft_Network>.Create("network"));

		public static AnimatorController GetAnimatorController(this Boss_OlofPart2 __self) => _animatorController.Value.GetValue(__self);
		public static void SetAnimatorController(this Boss_OlofPart2 __self, AnimatorController value) => _animatorController.Value.SetValue(__self, value);
		public static float GetThrowHeight(this Boss_OlofPart2 __self) => _throwHeight.Value.GetValue(__self);
		public static void SetThrowHeight(this Boss_OlofPart2 __self, float value) => _throwHeight.Value.SetValue(__self, value);
		public static UnityEngine.Coroutine GetThrowRoutine(this Boss_OlofPart2 __self) => _throwRoutine.Value.GetValue(__self);
		public static void SetThrowRoutine(this Boss_OlofPart2 __self, UnityEngine.Coroutine value) => _throwRoutine.Value.SetValue(__self, value);
		public static bool GetWaitingForThrowEvent(this Boss_OlofPart2 __self) => _waitingForThrowEvent.Value.GetValue(__self);
		public static void SetWaitingForThrowEvent(this Boss_OlofPart2 __self, bool value) => _waitingForThrowEvent.Value.SetValue(__self, value);
		public static Raft_Network GetNetwork(this Boss_OlofPart2 __self) => _network.Value.GetValue(__self);
		public static void SetNetwork(this Boss_OlofPart2 __self, Raft_Network value) => _network.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Boss_OlofPart2>> _Start757602046 =
				new System.Lazy<MethodAccessor<Boss_OlofPart2>>(() => MethodAccessor<Boss_OlofPart2>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<Boss_OlofPart2>> _ThrowMeat757602046 =
				new System.Lazy<MethodAccessor<Boss_OlofPart2>>(() => MethodAccessor<Boss_OlofPart2>.Create("ThrowMeat"));

		public static void Start(this Boss_OlofPart2 __self) => _Start757602046.Value.Invoke(__self);
		public static System.Collections.IEnumerator ThrowMeat(this Boss_OlofPart2 __self) => (System.Collections.IEnumerator)_ThrowMeat757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Container
	{

		private static readonly System.Lazy<FieldAccessor<Container, Raft_Network>> __network =
				new System.Lazy<FieldAccessor<Container, Raft_Network>>(() => FieldAccessor<Container, Raft_Network>.Create("_network"));
		private static readonly System.Lazy<FieldAccessor<Container, CarryNetworked>> _objectToSpawn =
				new System.Lazy<FieldAccessor<Container, CarryNetworked>>(() => FieldAccessor<Container, CarryNetworked>.Create("objectToSpawn"));
		private static readonly System.Lazy<FieldAccessor<Container, UnityEngine.Transform>> _spawnLocation =
				new System.Lazy<FieldAccessor<Container, UnityEngine.Transform>>(() => FieldAccessor<Container, UnityEngine.Transform>.Create("spawnLocation"));
		private static readonly System.Lazy<FieldAccessor<Container, int>> _maxItems =
				new System.Lazy<FieldAccessor<Container, int>>(() => FieldAccessor<Container, int>.Create("maxItems"));
		private static readonly System.Lazy<FieldAccessor<Container, string>> _eventRef_takeFromContainer =
				new System.Lazy<FieldAccessor<Container, string>>(() => FieldAccessor<Container, string>.Create("eventRef_takeFromContainer"));
		private static readonly System.Lazy<FieldAccessor<Container, DisplayTextManager>> _displayText =
				new System.Lazy<FieldAccessor<Container, DisplayTextManager>>(() => FieldAccessor<Container, DisplayTextManager>.Create("displayText"));
		private static readonly System.Lazy<FieldAccessor<Container, Network_Player>> _localPlayer =
				new System.Lazy<FieldAccessor<Container, Network_Player>>(() => FieldAccessor<Container, Network_Player>.Create("localPlayer"));

		public static Raft_Network Get_network(this Container __self) => __network.Value.GetValue(__self);
		public static void Set_network(this Container __self, Raft_Network value) => __network.Value.SetValue(__self, value);
		public static CarryNetworked GetObjectToSpawn(this Container __self) => _objectToSpawn.Value.GetValue(__self);
		public static void SetObjectToSpawn(this Container __self, CarryNetworked value) => _objectToSpawn.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetSpawnLocation(this Container __self) => _spawnLocation.Value.GetValue(__self);
		public static void SetSpawnLocation(this Container __self, UnityEngine.Transform value) => _spawnLocation.Value.SetValue(__self, value);
		public static int GetMaxItems(this Container __self) => _maxItems.Value.GetValue(__self);
		public static void SetMaxItems(this Container __self, int value) => _maxItems.Value.SetValue(__self, value);
		public static string GetEventRef_takeFromContainer(this Container __self) => _eventRef_takeFromContainer.Value.GetValue(__self);
		public static void SetEventRef_takeFromContainer(this Container __self, string value) => _eventRef_takeFromContainer.Value.SetValue(__self, value);
		public static DisplayTextManager GetDisplayText(this Container __self) => _displayText.Value.GetValue(__self);
		public static void SetDisplayText(this Container __self, DisplayTextManager value) => _displayText.Value.SetValue(__self, value);
		public static Network_Player GetLocalPlayer(this Container __self) => _localPlayer.Value.GetValue(__self);
		public static void SetLocalPlayer(this Container __self, Network_Player value) => _localPlayer.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Container>> _Awake757602046 =
				new System.Lazy<MethodAccessor<Container>>(() => MethodAccessor<Container>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<Container>> _Start757602046 =
				new System.Lazy<MethodAccessor<Container>>(() => MethodAccessor<Container>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<Container>> _OnEnable757602046 =
				new System.Lazy<MethodAccessor<Container>>(() => MethodAccessor<Container>.Create("OnEnable"));
		private static readonly System.Lazy<MethodAccessor<Container>> _OnDisable757602046 =
				new System.Lazy<MethodAccessor<Container>>(() => MethodAccessor<Container>.Create("OnDisable"));
		private static readonly System.Lazy<MethodAccessor<Container>> _SpawnObjectNetworked3487180896 =
				new System.Lazy<MethodAccessor<Container>>(() => MethodAccessor<Container>.Create("SpawnObjectNetworked", typeof(UnityEngine.GameObject)));
		private static readonly System.Lazy<MethodAccessor<Container>> _DestroyItemNetworked3473662494 =
				new System.Lazy<MethodAccessor<Container>>(() => MethodAccessor<Container>.Create("DestroyItemNetworked", typeof(uint)));

		public static void Awake(this Container __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this Container __self) => _Start757602046.Value.Invoke(__self);
		public static void OnEnable(this Container __self) => _OnEnable757602046.Value.Invoke(__self);
		public static void OnDisable(this Container __self) => _OnDisable757602046.Value.Invoke(__self);
		public static void SpawnObjectNetworked(this Container __self, UnityEngine.GameObject prefab) => _SpawnObjectNetworked3487180896.Value.Invoke(__self, prefab);
		public static void DestroyItemNetworked(this Container __self, uint objectIndex) => _DestroyItemNetworked3473662494.Value.Invoke(__self, objectIndex);

	}

	public static class PrivateAccessor_Container_PreSpawn
	{

		private static readonly System.Lazy<FieldAccessor<Container_PreSpawn, System.Collections.Generic.List<UnityEngine.Transform>>> _spawnPoints =
				new System.Lazy<FieldAccessor<Container_PreSpawn, System.Collections.Generic.List<UnityEngine.Transform>>>(() => FieldAccessor<Container_PreSpawn, System.Collections.Generic.List<UnityEngine.Transform>>.Create("spawnPoints"));

		public static System.Collections.Generic.List<UnityEngine.Transform> GetSpawnPoints(this Container_PreSpawn __self) => _spawnPoints.Value.GetValue(__self);
		public static void SetSpawnPoints(this Container_PreSpawn __self, System.Collections.Generic.List<UnityEngine.Transform> value) => _spawnPoints.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Container_PreSpawn>> _Start757602046 =
				new System.Lazy<MethodAccessor<Container_PreSpawn>>(() => MethodAccessor<Container_PreSpawn>.Create("Start"));

		public static void Start(this Container_PreSpawn __self) => _Start757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Explosive
	{

		private static readonly System.Lazy<FieldAccessor<Explosive, string>> _eventRef_explode =
				new System.Lazy<FieldAccessor<Explosive, string>>(() => FieldAccessor<Explosive, string>.Create("eventRef_explode"));
		private static readonly System.Lazy<FieldAccessor<Explosive, float>> _timer =
				new System.Lazy<FieldAccessor<Explosive, float>>(() => FieldAccessor<Explosive, float>.Create("timer"));
		private static readonly System.Lazy<FieldAccessor<Explosive, bool>> _hasLanded =
				new System.Lazy<FieldAccessor<Explosive, bool>>(() => FieldAccessor<Explosive, bool>.Create("hasLanded"));
		private static readonly System.Lazy<FieldAccessor<Explosive, bool>> _hasExploded =
				new System.Lazy<FieldAccessor<Explosive, bool>>(() => FieldAccessor<Explosive, bool>.Create("hasExploded"));

		public static string GetEventRef_explode(this Explosive __self) => _eventRef_explode.Value.GetValue(__self);
		public static void SetEventRef_explode(this Explosive __self, string value) => _eventRef_explode.Value.SetValue(__self, value);
		public static float GetTimer(this Explosive __self) => _timer.Value.GetValue(__self);
		public static void SetTimer(this Explosive __self, float value) => _timer.Value.SetValue(__self, value);
		public static bool GetHasLanded(this Explosive __self) => _hasLanded.Value.GetValue(__self);
		public static void SetHasLanded(this Explosive __self, bool value) => _hasLanded.Value.SetValue(__self, value);
		public static bool GetHasExploded(this Explosive __self) => _hasExploded.Value.GetValue(__self);
		public static void SetHasExploded(this Explosive __self, bool value) => _hasExploded.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Explosive>> _Update757602046 =
				new System.Lazy<MethodAccessor<Explosive>>(() => MethodAccessor<Explosive>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<Explosive>> _Explode757602046 =
				new System.Lazy<MethodAccessor<Explosive>>(() => MethodAccessor<Explosive>.Create("Explode"));
		private static readonly System.Lazy<MethodAccessor<Explosive>> _RemoveFire757602046 =
				new System.Lazy<MethodAccessor<Explosive>>(() => MethodAccessor<Explosive>.Create("RemoveFire"));

		public static void Update(this Explosive __self) => _Update757602046.Value.Invoke(__self);
		public static void Explode(this Explosive __self) => _Explode757602046.Value.Invoke(__self);
		public static void RemoveFire(this Explosive __self) => _RemoveFire757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_ExplosiveThrower
	{

		private static readonly System.Lazy<FieldAccessor<ExplosiveThrower, Dialogue>> _dialogue =
				new System.Lazy<FieldAccessor<ExplosiveThrower, Dialogue>>(() => FieldAccessor<ExplosiveThrower, Dialogue>.Create("dialogue"));
		private static readonly System.Lazy<FieldAccessor<ExplosiveThrower, UnityEngine.Transform>> _throwablePrefab =
				new System.Lazy<FieldAccessor<ExplosiveThrower, UnityEngine.Transform>>(() => FieldAccessor<ExplosiveThrower, UnityEngine.Transform>.Create("throwablePrefab"));
		private static readonly System.Lazy<FieldAccessor<ExplosiveThrower, UnityEngine.Transform>> _startThrowPoint =
				new System.Lazy<FieldAccessor<ExplosiveThrower, UnityEngine.Transform>>(() => FieldAccessor<ExplosiveThrower, UnityEngine.Transform>.Create("startThrowPoint"));
		private static readonly System.Lazy<FieldAccessor<ExplosiveThrower, Interval_Float>> _startThrowInterval =
				new System.Lazy<FieldAccessor<ExplosiveThrower, Interval_Float>>(() => FieldAccessor<ExplosiveThrower, Interval_Float>.Create("startThrowInterval"));
		private static readonly System.Lazy<FieldAccessor<ExplosiveThrower, Interval_Float>> _throwIntervalInbetween =
				new System.Lazy<FieldAccessor<ExplosiveThrower, Interval_Float>>(() => FieldAccessor<ExplosiveThrower, Interval_Float>.Create("throwIntervalInbetween"));
		private static readonly System.Lazy<FieldAccessor<ExplosiveThrower, Interval_Int>> _randomThrows =
				new System.Lazy<FieldAccessor<ExplosiveThrower, Interval_Int>>(() => FieldAccessor<ExplosiveThrower, Interval_Int>.Create("randomThrows"));
		private static readonly System.Lazy<FieldAccessor<ExplosiveThrower, int>> _maxThrows =
				new System.Lazy<FieldAccessor<ExplosiveThrower, int>>(() => FieldAccessor<ExplosiveThrower, int>.Create("maxThrows"));
		private static readonly System.Lazy<FieldAccessor<ExplosiveThrower, float>> _validPlayerRadius =
				new System.Lazy<FieldAccessor<ExplosiveThrower, float>>(() => FieldAccessor<ExplosiveThrower, float>.Create("validPlayerRadius"));
		private static readonly System.Lazy<FieldAccessor<ExplosiveThrower, float>> _throwTotalTime =
				new System.Lazy<FieldAccessor<ExplosiveThrower, float>>(() => FieldAccessor<ExplosiveThrower, float>.Create("throwTotalTime"));
		private static readonly System.Lazy<FieldAccessor<ExplosiveThrower, float>> _throwHeight =
				new System.Lazy<FieldAccessor<ExplosiveThrower, float>>(() => FieldAccessor<ExplosiveThrower, float>.Create("throwHeight"));
		private static readonly System.Lazy<FieldAccessor<ExplosiveThrower, float>> _validPlayerYDiff =
				new System.Lazy<FieldAccessor<ExplosiveThrower, float>>(() => FieldAccessor<ExplosiveThrower, float>.Create("validPlayerYDiff"));
		private static readonly System.Lazy<FieldAccessor<ExplosiveThrower, float>> _bombOccupationDownTime =
				new System.Lazy<FieldAccessor<ExplosiveThrower, float>>(() => FieldAccessor<ExplosiveThrower, float>.Create("bombOccupationDownTime"));
		private static readonly System.Lazy<FieldAccessor<ExplosiveThrower, System.Collections.Generic.List<UnityEngine.Transform>>> _validPoints =
				new System.Lazy<FieldAccessor<ExplosiveThrower, System.Collections.Generic.List<UnityEngine.Transform>>>(() => FieldAccessor<ExplosiveThrower, System.Collections.Generic.List<UnityEngine.Transform>>.Create("validPoints"));
		private static readonly System.Lazy<FieldAccessor<ExplosiveThrower, AnimatorController>> _throwAnimator =
				new System.Lazy<FieldAccessor<ExplosiveThrower, AnimatorController>>(() => FieldAccessor<ExplosiveThrower, AnimatorController>.Create("throwAnimator"));
		private static readonly System.Lazy<FieldAccessor<ExplosiveThrower, UnityEngine.Transform>> _handParent =
				new System.Lazy<FieldAccessor<ExplosiveThrower, UnityEngine.Transform>>(() => FieldAccessor<ExplosiveThrower, UnityEngine.Transform>.Create("handParent"));
		private static readonly System.Lazy<FieldAccessor<ExplosiveThrower, string>> _eventRef_throw =
				new System.Lazy<FieldAccessor<ExplosiveThrower, string>>(() => FieldAccessor<ExplosiveThrower, string>.Create("eventRef_throw"));
		private static readonly System.Lazy<FieldAccessor<ExplosiveThrower, string>> _eventRef_land =
				new System.Lazy<FieldAccessor<ExplosiveThrower, string>>(() => FieldAccessor<ExplosiveThrower, string>.Create("eventRef_land"));
		private static readonly System.Lazy<FieldAccessor<ExplosiveThrower, float>> _gizmoRadius =
				new System.Lazy<FieldAccessor<ExplosiveThrower, float>>(() => FieldAccessor<ExplosiveThrower, float>.Create("gizmoRadius"));
		private static readonly System.Lazy<FieldAccessor<ExplosiveThrower, Raft_Network>> _network =
				new System.Lazy<FieldAccessor<ExplosiveThrower, Raft_Network>>(() => FieldAccessor<ExplosiveThrower, Raft_Network>.Create("network"));
		private static readonly System.Lazy<FieldAccessor<ExplosiveThrower, bool>> _updateThrowTimer =
				new System.Lazy<FieldAccessor<ExplosiveThrower, bool>>(() => FieldAccessor<ExplosiveThrower, bool>.Create("updateThrowTimer"));
		private static readonly System.Lazy<FieldAccessor<ExplosiveThrower, float>> _throwTimer =
				new System.Lazy<FieldAccessor<ExplosiveThrower, float>>(() => FieldAccessor<ExplosiveThrower, float>.Create("throwTimer"));
		private static readonly System.Lazy<FieldAccessor<ExplosiveThrower, System.Collections.Generic.List<UnityEngine.Transform>>> _occupiedPoints =
				new System.Lazy<FieldAccessor<ExplosiveThrower, System.Collections.Generic.List<UnityEngine.Transform>>>(() => FieldAccessor<ExplosiveThrower, System.Collections.Generic.List<UnityEngine.Transform>>.Create("occupiedPoints"));
		private static readonly System.Lazy<FieldAccessor<ExplosiveThrower, bool>> _waitingForThrowAnimation =
				new System.Lazy<FieldAccessor<ExplosiveThrower, bool>>(() => FieldAccessor<ExplosiveThrower, bool>.Create("waitingForThrowAnimation"));

		public static Dialogue GetDialogue(this ExplosiveThrower __self) => _dialogue.Value.GetValue(__self);
		public static void SetDialogue(this ExplosiveThrower __self, Dialogue value) => _dialogue.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetThrowablePrefab(this ExplosiveThrower __self) => _throwablePrefab.Value.GetValue(__self);
		public static void SetThrowablePrefab(this ExplosiveThrower __self, UnityEngine.Transform value) => _throwablePrefab.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetStartThrowPoint(this ExplosiveThrower __self) => _startThrowPoint.Value.GetValue(__self);
		public static void SetStartThrowPoint(this ExplosiveThrower __self, UnityEngine.Transform value) => _startThrowPoint.Value.SetValue(__self, value);
		public static Interval_Float GetStartThrowInterval(this ExplosiveThrower __self) => _startThrowInterval.Value.GetValue(__self);
		public static void SetStartThrowInterval(this ExplosiveThrower __self, Interval_Float value) => _startThrowInterval.Value.SetValue(__self, value);
		public static Interval_Float GetThrowIntervalInbetween(this ExplosiveThrower __self) => _throwIntervalInbetween.Value.GetValue(__self);
		public static void SetThrowIntervalInbetween(this ExplosiveThrower __self, Interval_Float value) => _throwIntervalInbetween.Value.SetValue(__self, value);
		public static Interval_Int GetRandomThrows(this ExplosiveThrower __self) => _randomThrows.Value.GetValue(__self);
		public static void SetRandomThrows(this ExplosiveThrower __self, Interval_Int value) => _randomThrows.Value.SetValue(__self, value);
		public static int GetMaxThrows(this ExplosiveThrower __self) => _maxThrows.Value.GetValue(__self);
		public static void SetMaxThrows(this ExplosiveThrower __self, int value) => _maxThrows.Value.SetValue(__self, value);
		public static float GetValidPlayerRadius(this ExplosiveThrower __self) => _validPlayerRadius.Value.GetValue(__self);
		public static void SetValidPlayerRadius(this ExplosiveThrower __self, float value) => _validPlayerRadius.Value.SetValue(__self, value);
		public static float GetThrowTotalTime(this ExplosiveThrower __self) => _throwTotalTime.Value.GetValue(__self);
		public static void SetThrowTotalTime(this ExplosiveThrower __self, float value) => _throwTotalTime.Value.SetValue(__self, value);
		public static float GetThrowHeight(this ExplosiveThrower __self) => _throwHeight.Value.GetValue(__self);
		public static void SetThrowHeight(this ExplosiveThrower __self, float value) => _throwHeight.Value.SetValue(__self, value);
		public static float GetValidPlayerYDiff(this ExplosiveThrower __self) => _validPlayerYDiff.Value.GetValue(__self);
		public static void SetValidPlayerYDiff(this ExplosiveThrower __self, float value) => _validPlayerYDiff.Value.SetValue(__self, value);
		public static float GetBombOccupationDownTime(this ExplosiveThrower __self) => _bombOccupationDownTime.Value.GetValue(__self);
		public static void SetBombOccupationDownTime(this ExplosiveThrower __self, float value) => _bombOccupationDownTime.Value.SetValue(__self, value);
		public static System.Collections.Generic.List<UnityEngine.Transform> GetValidPoints(this ExplosiveThrower __self) => _validPoints.Value.GetValue(__self);
		public static void SetValidPoints(this ExplosiveThrower __self, System.Collections.Generic.List<UnityEngine.Transform> value) => _validPoints.Value.SetValue(__self, value);
		public static AnimatorController GetThrowAnimator(this ExplosiveThrower __self) => _throwAnimator.Value.GetValue(__self);
		public static void SetThrowAnimator(this ExplosiveThrower __self, AnimatorController value) => _throwAnimator.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetHandParent(this ExplosiveThrower __self) => _handParent.Value.GetValue(__self);
		public static void SetHandParent(this ExplosiveThrower __self, UnityEngine.Transform value) => _handParent.Value.SetValue(__self, value);
		public static string GetEventRef_throw(this ExplosiveThrower __self) => _eventRef_throw.Value.GetValue(__self);
		public static void SetEventRef_throw(this ExplosiveThrower __self, string value) => _eventRef_throw.Value.SetValue(__self, value);
		public static string GetEventRef_land(this ExplosiveThrower __self) => _eventRef_land.Value.GetValue(__self);
		public static void SetEventRef_land(this ExplosiveThrower __self, string value) => _eventRef_land.Value.SetValue(__self, value);
		public static float GetGizmoRadius(this ExplosiveThrower __self) => _gizmoRadius.Value.GetValue(__self);
		public static void SetGizmoRadius(this ExplosiveThrower __self, float value) => _gizmoRadius.Value.SetValue(__self, value);
		public static Raft_Network GetNetwork(this ExplosiveThrower __self) => _network.Value.GetValue(__self);
		public static void SetNetwork(this ExplosiveThrower __self, Raft_Network value) => _network.Value.SetValue(__self, value);
		public static bool GetUpdateThrowTimer(this ExplosiveThrower __self) => _updateThrowTimer.Value.GetValue(__self);
		public static void SetUpdateThrowTimer(this ExplosiveThrower __self, bool value) => _updateThrowTimer.Value.SetValue(__self, value);
		public static float GetThrowTimer(this ExplosiveThrower __self) => _throwTimer.Value.GetValue(__self);
		public static void SetThrowTimer(this ExplosiveThrower __self, float value) => _throwTimer.Value.SetValue(__self, value);
		public static System.Collections.Generic.List<UnityEngine.Transform> GetOccupiedPoints(this ExplosiveThrower __self) => _occupiedPoints.Value.GetValue(__self);
		public static void SetOccupiedPoints(this ExplosiveThrower __self, System.Collections.Generic.List<UnityEngine.Transform> value) => _occupiedPoints.Value.SetValue(__self, value);
		public static bool GetWaitingForThrowAnimation(this ExplosiveThrower __self) => _waitingForThrowAnimation.Value.GetValue(__self);
		public static void SetWaitingForThrowAnimation(this ExplosiveThrower __self, bool value) => _waitingForThrowAnimation.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<ExplosiveThrower>> _Awake757602046 =
				new System.Lazy<MethodAccessor<ExplosiveThrower>>(() => MethodAccessor<ExplosiveThrower>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<ExplosiveThrower>> _Update757602046 =
				new System.Lazy<MethodAccessor<ExplosiveThrower>>(() => MethodAccessor<ExplosiveThrower>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<ExplosiveThrower>> _OnAnimationEvent3454057852 =
				new System.Lazy<MethodAccessor<ExplosiveThrower>>(() => MethodAccessor<ExplosiveThrower>.Create("OnAnimationEvent", typeof(string)));
		private static readonly System.Lazy<MethodAccessor<ExplosiveThrower>> _ThrowFireworkToPoint3437001883 =
				new System.Lazy<MethodAccessor<ExplosiveThrower>>(() => MethodAccessor<ExplosiveThrower>.Create("ThrowFireworkToPoint", typeof(UnityEngine.Transform)));
		private static readonly System.Lazy<MethodAccessor<ExplosiveThrower>> _ThrowTowardsPlayers757602046 =
				new System.Lazy<MethodAccessor<ExplosiveThrower>>(() => MethodAccessor<ExplosiveThrower>.Create("ThrowTowardsPlayers"));
		private static readonly System.Lazy<MethodAccessor<ExplosiveThrower>> _RemoveOccupation3648264468 =
				new System.Lazy<MethodAccessor<ExplosiveThrower>>(() => MethodAccessor<ExplosiveThrower>.Create("RemoveOccupation", typeof(UnityEngine.Transform), typeof(float)));
		private static readonly System.Lazy<MethodAccessor<ExplosiveThrower>> _MoveThrowable2468181638 =
				new System.Lazy<MethodAccessor<ExplosiveThrower>>(() => MethodAccessor<ExplosiveThrower>.Create("MoveThrowable", typeof(UnityEngine.Transform), typeof(UnityEngine.Transform), typeof(UnityEngine.Transform), typeof(float)));
		private static readonly System.Lazy<MethodAccessor<ExplosiveThrower>> _GetPointIndexFromPoint3437001883 =
				new System.Lazy<MethodAccessor<ExplosiveThrower>>(() => MethodAccessor<ExplosiveThrower>.Create("GetPointIndexFromPoint", typeof(UnityEngine.Transform)));
		private static readonly System.Lazy<MethodAccessor<ExplosiveThrower>> _ResetThrowTimer757602046 =
				new System.Lazy<MethodAccessor<ExplosiveThrower>>(() => MethodAccessor<ExplosiveThrower>.Create("ResetThrowTimer"));

		public static void Awake(this ExplosiveThrower __self) => _Awake757602046.Value.Invoke(__self);
		public static void Update(this ExplosiveThrower __self) => _Update757602046.Value.Invoke(__self);
		public static void OnAnimationEvent(this ExplosiveThrower __self, string eventName) => _OnAnimationEvent3454057852.Value.Invoke(__self, eventName);
		public static System.Collections.IEnumerator ThrowFireworkToPoint(this ExplosiveThrower __self, UnityEngine.Transform point) => (System.Collections.IEnumerator)_ThrowFireworkToPoint3437001883.Value.Invoke(__self, point);
		public static System.Collections.IEnumerator ThrowTowardsPlayers(this ExplosiveThrower __self) => (System.Collections.IEnumerator)_ThrowTowardsPlayers757602046.Value.Invoke(__self);
		public static System.Collections.IEnumerator RemoveOccupation(this ExplosiveThrower __self, UnityEngine.Transform point, float delay) => (System.Collections.IEnumerator)_RemoveOccupation3648264468.Value.Invoke(__self, point, delay);
		public static System.Collections.IEnumerator MoveThrowable(this ExplosiveThrower __self, UnityEngine.Transform throwable, UnityEngine.Transform startPoint, UnityEngine.Transform endPoint, float totalTime) => (System.Collections.IEnumerator)_MoveThrowable2468181638.Value.Invoke(__self, throwable, startPoint, endPoint, totalTime);
		public static int GetPointIndexFromPoint(this ExplosiveThrower __self, UnityEngine.Transform point) => (int)_GetPointIndexFromPoint3437001883.Value.Invoke(__self, point);
		public static void ResetThrowTimer(this ExplosiveThrower __self) => _ResetThrowTimer757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_JusticeScale
	{

		private static readonly System.Lazy<FieldAccessor<JusticeScale, UnityEngine.Transform>> _scale1 =
				new System.Lazy<FieldAccessor<JusticeScale, UnityEngine.Transform>>(() => FieldAccessor<JusticeScale, UnityEngine.Transform>.Create("scale1"));
		private static readonly System.Lazy<FieldAccessor<JusticeScale, UnityEngine.Transform>> _scale2 =
				new System.Lazy<FieldAccessor<JusticeScale, UnityEngine.Transform>>(() => FieldAccessor<JusticeScale, UnityEngine.Transform>.Create("scale2"));
		private static readonly System.Lazy<FieldAccessor<JusticeScale, UnityEngine.Animator>> _animator =
				new System.Lazy<FieldAccessor<JusticeScale, UnityEngine.Animator>>(() => FieldAccessor<JusticeScale, UnityEngine.Animator>.Create("animator"));
		private static readonly System.Lazy<FieldAccessor<JusticeScale, UnityEngine.GameObject>> _cogwheelStack =
				new System.Lazy<FieldAccessor<JusticeScale, UnityEngine.GameObject>>(() => FieldAccessor<JusticeScale, UnityEngine.GameObject>.Create("cogwheelStack"));
		private static readonly System.Lazy<FieldAccessor<JusticeScale, UnityEngine.Transform>> _destroyWeightPoint =
				new System.Lazy<FieldAccessor<JusticeScale, UnityEngine.Transform>>(() => FieldAccessor<JusticeScale, UnityEngine.Transform>.Create("destroyWeightPoint"));
		private static readonly System.Lazy<FieldAccessor<JusticeScale, ScaleWeight>> _weightPrefab =
				new System.Lazy<FieldAccessor<JusticeScale, ScaleWeight>>(() => FieldAccessor<JusticeScale, ScaleWeight>.Create("weightPrefab"));
		private static readonly System.Lazy<FieldAccessor<JusticeScale, UnityEngine.Transform[]>> _weightSlots =
				new System.Lazy<FieldAccessor<JusticeScale, UnityEngine.Transform[]>>(() => FieldAccessor<JusticeScale, UnityEngine.Transform[]>.Create("weightSlots"));
		private static readonly System.Lazy<FieldAccessor<JusticeScale, UnityEngine.Mesh[]>> _weightMeshes =
				new System.Lazy<FieldAccessor<JusticeScale, UnityEngine.Mesh[]>>(() => FieldAccessor<JusticeScale, UnityEngine.Mesh[]>.Create("weightMeshes"));
		private static readonly System.Lazy<FieldAccessor<JusticeScale, int>> _weight1 =
				new System.Lazy<FieldAccessor<JusticeScale, int>>(() => FieldAccessor<JusticeScale, int>.Create("weight1"));
		private static readonly System.Lazy<FieldAccessor<JusticeScale, int>> _weight2 =
				new System.Lazy<FieldAccessor<JusticeScale, int>>(() => FieldAccessor<JusticeScale, int>.Create("weight2"));
		private static readonly System.Lazy<FieldAccessor<JusticeScale, int>> _startWeight2 =
				new System.Lazy<FieldAccessor<JusticeScale, int>>(() => FieldAccessor<JusticeScale, int>.Create("startWeight2"));
		private static readonly System.Lazy<FieldAccessor<JusticeScale, float>> _maxWeight =
				new System.Lazy<FieldAccessor<JusticeScale, float>>(() => FieldAccessor<JusticeScale, float>.Create("maxWeight"));
		private static readonly System.Lazy<FieldAccessor<JusticeScale, float>> _speed =
				new System.Lazy<FieldAccessor<JusticeScale, float>>(() => FieldAccessor<JusticeScale, float>.Create("speed"));
		private static readonly System.Lazy<FieldAccessor<JusticeScale, float>> _floorHeight =
				new System.Lazy<FieldAccessor<JusticeScale, float>>(() => FieldAccessor<JusticeScale, float>.Create("floorHeight"));
		private static readonly System.Lazy<FieldAccessor<JusticeScale, float>> _weightTravelTime =
				new System.Lazy<FieldAccessor<JusticeScale, float>>(() => FieldAccessor<JusticeScale, float>.Create("weightTravelTime"));
		private static readonly System.Lazy<FieldAccessor<JusticeScale, bool>> _isMoving =
				new System.Lazy<FieldAccessor<JusticeScale, bool>>(() => FieldAccessor<JusticeScale, bool>.Create("isMoving"));
		private static readonly System.Lazy<FieldAccessor<JusticeScale, FMODUnity.StudioEventEmitter>> _emitter_lift1 =
				new System.Lazy<FieldAccessor<JusticeScale, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<JusticeScale, FMODUnity.StudioEventEmitter>.Create("emitter_lift1"));
		private static readonly System.Lazy<FieldAccessor<JusticeScale, FMODUnity.StudioEventEmitter>> _emitter_lift2 =
				new System.Lazy<FieldAccessor<JusticeScale, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<JusticeScale, FMODUnity.StudioEventEmitter>.Create("emitter_lift2"));
		private static readonly System.Lazy<FieldAccessor<JusticeScale, SoundPlayer_IntegerConnection>> _soundPlayer =
				new System.Lazy<FieldAccessor<JusticeScale, SoundPlayer_IntegerConnection>>(() => FieldAccessor<JusticeScale, SoundPlayer_IntegerConnection>.Create("soundPlayer"));
		private static readonly System.Lazy<FieldAccessor<JusticeScale, InteractableButton_Network_Forwarder>> _buttonForwarder =
				new System.Lazy<FieldAccessor<JusticeScale, InteractableButton_Network_Forwarder>>(() => FieldAccessor<JusticeScale, InteractableButton_Network_Forwarder>.Create("buttonForwarder"));
		private static readonly System.Lazy<FieldAccessor<JusticeScale, bool>> _changingWeight =
				new System.Lazy<FieldAccessor<JusticeScale, bool>>(() => FieldAccessor<JusticeScale, bool>.Create("changingWeight"));

		public static UnityEngine.Transform GetScale1(this JusticeScale __self) => _scale1.Value.GetValue(__self);
		public static void SetScale1(this JusticeScale __self, UnityEngine.Transform value) => _scale1.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetScale2(this JusticeScale __self) => _scale2.Value.GetValue(__self);
		public static void SetScale2(this JusticeScale __self, UnityEngine.Transform value) => _scale2.Value.SetValue(__self, value);
		public static UnityEngine.Animator GetAnimator(this JusticeScale __self) => _animator.Value.GetValue(__self);
		public static void SetAnimator(this JusticeScale __self, UnityEngine.Animator value) => _animator.Value.SetValue(__self, value);
		public static UnityEngine.GameObject GetCogwheelStack(this JusticeScale __self) => _cogwheelStack.Value.GetValue(__self);
		public static void SetCogwheelStack(this JusticeScale __self, UnityEngine.GameObject value) => _cogwheelStack.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetDestroyWeightPoint(this JusticeScale __self) => _destroyWeightPoint.Value.GetValue(__self);
		public static void SetDestroyWeightPoint(this JusticeScale __self, UnityEngine.Transform value) => _destroyWeightPoint.Value.SetValue(__self, value);
		public static ScaleWeight GetWeightPrefab(this JusticeScale __self) => _weightPrefab.Value.GetValue(__self);
		public static void SetWeightPrefab(this JusticeScale __self, ScaleWeight value) => _weightPrefab.Value.SetValue(__self, value);
		public static UnityEngine.Transform[] GetWeightSlots(this JusticeScale __self) => _weightSlots.Value.GetValue(__self);
		public static void SetWeightSlots(this JusticeScale __self, UnityEngine.Transform[] value) => _weightSlots.Value.SetValue(__self, value);
		public static UnityEngine.Mesh[] GetWeightMeshes(this JusticeScale __self) => _weightMeshes.Value.GetValue(__self);
		public static void SetWeightMeshes(this JusticeScale __self, UnityEngine.Mesh[] value) => _weightMeshes.Value.SetValue(__self, value);
		public static int GetWeight1(this JusticeScale __self) => _weight1.Value.GetValue(__self);
		public static void SetWeight1(this JusticeScale __self, int value) => _weight1.Value.SetValue(__self, value);
		public static int GetWeight2(this JusticeScale __self) => _weight2.Value.GetValue(__self);
		public static void SetWeight2(this JusticeScale __self, int value) => _weight2.Value.SetValue(__self, value);
		public static int GetStartWeight2(this JusticeScale __self) => _startWeight2.Value.GetValue(__self);
		public static void SetStartWeight2(this JusticeScale __self, int value) => _startWeight2.Value.SetValue(__self, value);
		public static float GetMaxWeight(this JusticeScale __self) => _maxWeight.Value.GetValue(__self);
		public static void SetMaxWeight(this JusticeScale __self, float value) => _maxWeight.Value.SetValue(__self, value);
		public static float GetSpeed(this JusticeScale __self) => _speed.Value.GetValue(__self);
		public static void SetSpeed(this JusticeScale __self, float value) => _speed.Value.SetValue(__self, value);
		public static float GetFloorHeight(this JusticeScale __self) => _floorHeight.Value.GetValue(__self);
		public static void SetFloorHeight(this JusticeScale __self, float value) => _floorHeight.Value.SetValue(__self, value);
		public static float GetWeightTravelTime(this JusticeScale __self) => _weightTravelTime.Value.GetValue(__self);
		public static void SetWeightTravelTime(this JusticeScale __self, float value) => _weightTravelTime.Value.SetValue(__self, value);
		public static bool GetIsMoving(this JusticeScale __self) => _isMoving.Value.GetValue(__self);
		public static void SetIsMoving(this JusticeScale __self, bool value) => _isMoving.Value.SetValue(__self, value);
		public static FMODUnity.StudioEventEmitter GetEmitter_lift1(this JusticeScale __self) => _emitter_lift1.Value.GetValue(__self);
		public static void SetEmitter_lift1(this JusticeScale __self, FMODUnity.StudioEventEmitter value) => _emitter_lift1.Value.SetValue(__self, value);
		public static FMODUnity.StudioEventEmitter GetEmitter_lift2(this JusticeScale __self) => _emitter_lift2.Value.GetValue(__self);
		public static void SetEmitter_lift2(this JusticeScale __self, FMODUnity.StudioEventEmitter value) => _emitter_lift2.Value.SetValue(__self, value);
		public static SoundPlayer_IntegerConnection GetSoundPlayer(this JusticeScale __self) => _soundPlayer.Value.GetValue(__self);
		public static void SetSoundPlayer(this JusticeScale __self, SoundPlayer_IntegerConnection value) => _soundPlayer.Value.SetValue(__self, value);
		public static InteractableButton_Network_Forwarder GetButtonForwarder(this JusticeScale __self) => _buttonForwarder.Value.GetValue(__self);
		public static void SetButtonForwarder(this JusticeScale __self, InteractableButton_Network_Forwarder value) => _buttonForwarder.Value.SetValue(__self, value);
		public static bool GetChangingWeight(this JusticeScale __self) => _changingWeight.Value.GetValue(__self);
		public static void SetChangingWeight(this JusticeScale __self, bool value) => _changingWeight.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<JusticeScale>> _Awake757602046 =
				new System.Lazy<MethodAccessor<JusticeScale>>(() => MethodAccessor<JusticeScale>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<JusticeScale>> _Update757602046 =
				new System.Lazy<MethodAccessor<JusticeScale>>(() => MethodAccessor<JusticeScale>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<JusticeScale>> _UpdateButtonMeshes757602046 =
				new System.Lazy<MethodAccessor<JusticeScale>>(() => MethodAccessor<JusticeScale>.Create("UpdateButtonMeshes"));
		private static readonly System.Lazy<MethodAccessor<JusticeScale>> _UpdatePlatformPosition3450040886 =
				new System.Lazy<MethodAccessor<JusticeScale>>(() => MethodAccessor<JusticeScale>.Create("UpdatePlatformPosition", typeof(bool)));
		private static readonly System.Lazy<MethodAccessor<JusticeScale>> _ButtonPress3478488680 =
				new System.Lazy<MethodAccessor<JusticeScale>>(() => MethodAccessor<JusticeScale>.Create("ButtonPress", typeof(InteractableButton_Networked)));
		private static readonly System.Lazy<MethodAccessor<JusticeScale>> _GetButtonFromIndex3486186818 =
				new System.Lazy<MethodAccessor<JusticeScale>>(() => MethodAccessor<JusticeScale>.Create("GetButtonFromIndex", typeof(int)));
		private static readonly System.Lazy<MethodAccessor<JusticeScale>> _AddWeight1432771168 =
				new System.Lazy<MethodAccessor<JusticeScale>>(() => MethodAccessor<JusticeScale>.Create("AddWeight", typeof(UnityEngine.Vector3), typeof(UnityEngine.Transform), typeof(float), typeof(int)));
		private static readonly System.Lazy<MethodAccessor<JusticeScale>> _SetWeightMeshOnFilter1198013557 =
				new System.Lazy<MethodAccessor<JusticeScale>>(() => MethodAccessor<JusticeScale>.Create("SetWeightMeshOnFilter", typeof(UnityEngine.MeshFilter), typeof(int)));
		private static readonly System.Lazy<MethodAccessor<JusticeScale>> _ReApplyBoxCollider3437001883 =
				new System.Lazy<MethodAccessor<JusticeScale>>(() => MethodAccessor<JusticeScale>.Create("ReApplyBoxCollider", typeof(UnityEngine.Transform)));
		private static readonly System.Lazy<MethodAccessor<JusticeScale>> _FindEmptyWeightSlot757602046 =
				new System.Lazy<MethodAccessor<JusticeScale>>(() => MethodAccessor<JusticeScale>.Create("FindEmptyWeightSlot"));

		public static void Awake(this JusticeScale __self) => _Awake757602046.Value.Invoke(__self);
		public static void Update(this JusticeScale __self) => _Update757602046.Value.Invoke(__self);
		public static void UpdateButtonMeshes(this JusticeScale __self) => _UpdateButtonMeshes757602046.Value.Invoke(__self);
		public static bool UpdatePlatformPosition(this JusticeScale __self, bool instant) => (bool)_UpdatePlatformPosition3450040886.Value.Invoke(__self, instant);
		public static bool ButtonPress(this JusticeScale __self, InteractableButton_Networked button) => (bool)_ButtonPress3478488680.Value.Invoke(__self, button);
		public static InteractableButton_Networked GetButtonFromIndex(this JusticeScale __self, int buttonIndex) => (InteractableButton_Networked)_GetButtonFromIndex3486186818.Value.Invoke(__self, buttonIndex);
		public static System.Collections.IEnumerator AddWeight(this JusticeScale __self, UnityEngine.Vector3 localStartPosition, UnityEngine.Transform slot, float travelTime, int weight) => (System.Collections.IEnumerator)_AddWeight1432771168.Value.Invoke(__self, localStartPosition, slot, travelTime, weight);
		public static void SetWeightMeshOnFilter(this JusticeScale __self, UnityEngine.MeshFilter filter, int meshIndex) => _SetWeightMeshOnFilter1198013557.Value.Invoke(__self, filter, meshIndex);
		public static UnityEngine.BoxCollider ReApplyBoxCollider(this JusticeScale __self, UnityEngine.Transform transform) => (UnityEngine.BoxCollider)_ReApplyBoxCollider3437001883.Value.Invoke(__self, transform);
		public static UnityEngine.Transform FindEmptyWeightSlot(this JusticeScale __self) => (UnityEngine.Transform)_FindEmptyWeightSlot757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_KnockbackNormal
	{

		private static readonly System.Lazy<MethodAccessor<KnockbackNormal>> _OnCollisionEnter3430762572 =
				new System.Lazy<MethodAccessor<KnockbackNormal>>(() => MethodAccessor<KnockbackNormal>.Create("OnCollisionEnter", typeof(UnityEngine.Collision)));

		public static void OnCollisionEnter(this KnockbackNormal __self, UnityEngine.Collision collision) => _OnCollisionEnter3430762572.Value.Invoke(__self, collision);

	}

	public static class PrivateAccessor_OlofDuckArrow
	{

		private static readonly System.Lazy<FieldAccessor<OlofDuckArrow, TriggerBoxEnterAction>> _triggerBoxEnter =
				new System.Lazy<FieldAccessor<OlofDuckArrow, TriggerBoxEnterAction>>(() => FieldAccessor<OlofDuckArrow, TriggerBoxEnterAction>.Create("triggerBoxEnter"));
		private static readonly System.Lazy<FieldAccessor<OlofDuckArrow, UnityEngine.Animator>> _animator =
				new System.Lazy<FieldAccessor<OlofDuckArrow, UnityEngine.Animator>>(() => FieldAccessor<OlofDuckArrow, UnityEngine.Animator>.Create("animator"));

		public static TriggerBoxEnterAction GetTriggerBoxEnter(this OlofDuckArrow __self) => _triggerBoxEnter.Value.GetValue(__self);
		public static void SetTriggerBoxEnter(this OlofDuckArrow __self, TriggerBoxEnterAction value) => _triggerBoxEnter.Value.SetValue(__self, value);
		public static UnityEngine.Animator GetAnimator(this OlofDuckArrow __self) => _animator.Value.GetValue(__self);
		public static void SetAnimator(this OlofDuckArrow __self, UnityEngine.Animator value) => _animator.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<OlofDuckArrow>> _Awake757602046 =
				new System.Lazy<MethodAccessor<OlofDuckArrow>>(() => MethodAccessor<OlofDuckArrow>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<OlofDuckArrow>> _OnTriggerAction3468606003 =
				new System.Lazy<MethodAccessor<OlofDuckArrow>>(() => MethodAccessor<OlofDuckArrow>.Create("OnTriggerAction", typeof(UnityEngine.Collider)));

		public static void Awake(this OlofDuckArrow __self) => _Awake757602046.Value.Invoke(__self);
		public static void OnTriggerAction(this OlofDuckArrow __self, UnityEngine.Collider collider) => _OnTriggerAction3468606003.Value.Invoke(__self, collider);

	}

	public static class PrivateAccessor_OlofFinalRoom
	{

		private static readonly System.Lazy<FieldAccessor<OlofFinalRoom, Dialogue>> _dialogue_olofFinal =
				new System.Lazy<FieldAccessor<OlofFinalRoom, Dialogue>>(() => FieldAccessor<OlofFinalRoom, Dialogue>.Create("dialogue_olofFinal"));
		private static readonly System.Lazy<FieldAccessor<OlofFinalRoom, Dialogue>> _dialogue_olofCaught =
				new System.Lazy<FieldAccessor<OlofFinalRoom, Dialogue>>(() => FieldAccessor<OlofFinalRoom, Dialogue>.Create("dialogue_olofCaught"));
		private static readonly System.Lazy<FieldAccessor<OlofFinalRoom, UnityEngine.Transform>> _olofParent =
				new System.Lazy<FieldAccessor<OlofFinalRoom, UnityEngine.Transform>>(() => FieldAccessor<OlofFinalRoom, UnityEngine.Transform>.Create("olofParent"));
		private static readonly System.Lazy<FieldAccessor<OlofFinalRoom, UnityEngine.Renderer[]>> _olofHangingRenderers =
				new System.Lazy<FieldAccessor<OlofFinalRoom, UnityEngine.Renderer[]>>(() => FieldAccessor<OlofFinalRoom, UnityEngine.Renderer[]>.Create("olofHangingRenderers"));
		private static readonly System.Lazy<FieldAccessor<OlofFinalRoom, UnityEngine.Transform>> _olofPointA =
				new System.Lazy<FieldAccessor<OlofFinalRoom, UnityEngine.Transform>>(() => FieldAccessor<OlofFinalRoom, UnityEngine.Transform>.Create("olofPointA"));
		private static readonly System.Lazy<FieldAccessor<OlofFinalRoom, UnityEngine.Transform>> _olofPointB =
				new System.Lazy<FieldAccessor<OlofFinalRoom, UnityEngine.Transform>>(() => FieldAccessor<OlofFinalRoom, UnityEngine.Transform>.Create("olofPointB"));
		private static readonly System.Lazy<FieldAccessor<OlofFinalRoom, UnityEngine.Transform>> _playerStartPoint =
				new System.Lazy<FieldAccessor<OlofFinalRoom, UnityEngine.Transform>>(() => FieldAccessor<OlofFinalRoom, UnityEngine.Transform>.Create("playerStartPoint"));
		private static readonly System.Lazy<FieldAccessor<OlofFinalRoom, AreaZone_PlayerCounter>> _playerCounterZone =
				new System.Lazy<FieldAccessor<OlofFinalRoom, AreaZone_PlayerCounter>>(() => FieldAccessor<OlofFinalRoom, AreaZone_PlayerCounter>.Create("playerCounterZone"));
		private static readonly System.Lazy<FieldAccessor<OlofFinalRoom, float>> _maxPlayerDistance =
				new System.Lazy<FieldAccessor<OlofFinalRoom, float>>(() => FieldAccessor<OlofFinalRoom, float>.Create("maxPlayerDistance"));
		private static readonly System.Lazy<FieldAccessor<OlofFinalRoom, float>> _movementSpeed =
				new System.Lazy<FieldAccessor<OlofFinalRoom, float>>(() => FieldAccessor<OlofFinalRoom, float>.Create("movementSpeed"));
		private static readonly System.Lazy<FieldAccessor<OlofFinalRoom, TimerEventer>> _caughtVoiceLineTimer =
				new System.Lazy<FieldAccessor<OlofFinalRoom, TimerEventer>>(() => FieldAccessor<OlofFinalRoom, TimerEventer>.Create("caughtVoiceLineTimer"));
		private static readonly System.Lazy<FieldAccessor<OlofFinalRoom, UnityEngine.Animator>> _olofAnimator =
				new System.Lazy<FieldAccessor<OlofFinalRoom, UnityEngine.Animator>>(() => FieldAccessor<OlofFinalRoom, UnityEngine.Animator>.Create("olofAnimator"));
		private static readonly System.Lazy<FieldAccessor<OlofFinalRoom, UnityEngine.Renderer>> _rescueKeyRenderer =
				new System.Lazy<FieldAccessor<OlofFinalRoom, UnityEngine.Renderer>>(() => FieldAccessor<OlofFinalRoom, UnityEngine.Renderer>.Create("rescueKeyRenderer"));
		private static readonly System.Lazy<FieldAccessor<OlofFinalRoom, UnityEngine.Collider>> _rescueKeyCollider =
				new System.Lazy<FieldAccessor<OlofFinalRoom, UnityEngine.Collider>>(() => FieldAccessor<OlofFinalRoom, UnityEngine.Collider>.Create("rescueKeyCollider"));
		private static readonly System.Lazy<FieldAccessor<OlofFinalRoom, float>> _fallDelay =
				new System.Lazy<FieldAccessor<OlofFinalRoom, float>>(() => FieldAccessor<OlofFinalRoom, float>.Create("fallDelay"));
		private static readonly System.Lazy<FieldAccessor<OlofFinalRoom, HeadTrackingIK>> _headIK =
				new System.Lazy<FieldAccessor<OlofFinalRoom, HeadTrackingIK>>(() => FieldAccessor<OlofFinalRoom, HeadTrackingIK>.Create("headIK"));
		private static readonly System.Lazy<FieldAccessor<OlofFinalRoom, HeadTrackingIK>> _handingOlofHeadIK =
				new System.Lazy<FieldAccessor<OlofFinalRoom, HeadTrackingIK>>(() => FieldAccessor<OlofFinalRoom, HeadTrackingIK>.Create("handingOlofHeadIK"));
		private static readonly System.Lazy<FieldAccessor<OlofFinalRoom, string>> _eventRef_fall =
				new System.Lazy<FieldAccessor<OlofFinalRoom, string>>(() => FieldAccessor<OlofFinalRoom, string>.Create("eventRef_fall"));
		private static readonly System.Lazy<FieldAccessor<OlofFinalRoom, string>> _programmerSound_scream =
				new System.Lazy<FieldAccessor<OlofFinalRoom, string>>(() => FieldAccessor<OlofFinalRoom, string>.Create("programmerSound_scream"));
		private static readonly System.Lazy<FieldAccessor<OlofFinalRoom, string>> _screamKey =
				new System.Lazy<FieldAccessor<OlofFinalRoom, string>>(() => FieldAccessor<OlofFinalRoom, string>.Create("screamKey"));
		private static readonly System.Lazy<FieldAccessor<OlofFinalRoom, Raft_Network>> _network =
				new System.Lazy<FieldAccessor<OlofFinalRoom, Raft_Network>>(() => FieldAccessor<OlofFinalRoom, Raft_Network>.Create("network"));
		private static readonly System.Lazy<FieldAccessor<OlofFinalRoom, float>> _distanceInterval =
				new System.Lazy<FieldAccessor<OlofFinalRoom, float>>(() => FieldAccessor<OlofFinalRoom, float>.Create("distanceInterval"));
		private static readonly System.Lazy<FieldAccessor<OlofFinalRoom, int>> _furthestDistanceIndex =
				new System.Lazy<FieldAccessor<OlofFinalRoom, int>>(() => FieldAccessor<OlofFinalRoom, int>.Create("furthestDistanceIndex"));
		private static readonly System.Lazy<FieldAccessor<OlofFinalRoom, float>> _furthestNormalizedDistance =
				new System.Lazy<FieldAccessor<OlofFinalRoom, float>>(() => FieldAccessor<OlofFinalRoom, float>.Create("furthestNormalizedDistance"));
		private static readonly System.Lazy<FieldAccessor<OlofFinalRoom, int>> _numberOfVoiceLines =
				new System.Lazy<FieldAccessor<OlofFinalRoom, int>>(() => FieldAccessor<OlofFinalRoom, int>.Create("numberOfVoiceLines"));
		private static readonly System.Lazy<FieldAccessor<OlofFinalRoom, bool>> _hasBeenCompleted =
				new System.Lazy<FieldAccessor<OlofFinalRoom, bool>>(() => FieldAccessor<OlofFinalRoom, bool>.Create("hasBeenCompleted"));

		public static Dialogue GetDialogue_olofFinal(this OlofFinalRoom __self) => _dialogue_olofFinal.Value.GetValue(__self);
		public static void SetDialogue_olofFinal(this OlofFinalRoom __self, Dialogue value) => _dialogue_olofFinal.Value.SetValue(__self, value);
		public static Dialogue GetDialogue_olofCaught(this OlofFinalRoom __self) => _dialogue_olofCaught.Value.GetValue(__self);
		public static void SetDialogue_olofCaught(this OlofFinalRoom __self, Dialogue value) => _dialogue_olofCaught.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetOlofParent(this OlofFinalRoom __self) => _olofParent.Value.GetValue(__self);
		public static void SetOlofParent(this OlofFinalRoom __self, UnityEngine.Transform value) => _olofParent.Value.SetValue(__self, value);
		public static UnityEngine.Renderer[] GetOlofHangingRenderers(this OlofFinalRoom __self) => _olofHangingRenderers.Value.GetValue(__self);
		public static void SetOlofHangingRenderers(this OlofFinalRoom __self, UnityEngine.Renderer[] value) => _olofHangingRenderers.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetOlofPointA(this OlofFinalRoom __self) => _olofPointA.Value.GetValue(__self);
		public static void SetOlofPointA(this OlofFinalRoom __self, UnityEngine.Transform value) => _olofPointA.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetOlofPointB(this OlofFinalRoom __self) => _olofPointB.Value.GetValue(__self);
		public static void SetOlofPointB(this OlofFinalRoom __self, UnityEngine.Transform value) => _olofPointB.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetPlayerStartPoint(this OlofFinalRoom __self) => _playerStartPoint.Value.GetValue(__self);
		public static void SetPlayerStartPoint(this OlofFinalRoom __self, UnityEngine.Transform value) => _playerStartPoint.Value.SetValue(__self, value);
		public static AreaZone_PlayerCounter GetPlayerCounterZone(this OlofFinalRoom __self) => _playerCounterZone.Value.GetValue(__self);
		public static void SetPlayerCounterZone(this OlofFinalRoom __self, AreaZone_PlayerCounter value) => _playerCounterZone.Value.SetValue(__self, value);
		public static float GetMaxPlayerDistance(this OlofFinalRoom __self) => _maxPlayerDistance.Value.GetValue(__self);
		public static void SetMaxPlayerDistance(this OlofFinalRoom __self, float value) => _maxPlayerDistance.Value.SetValue(__self, value);
		public static float GetMovementSpeed(this OlofFinalRoom __self) => _movementSpeed.Value.GetValue(__self);
		public static void SetMovementSpeed(this OlofFinalRoom __self, float value) => _movementSpeed.Value.SetValue(__self, value);
		public static TimerEventer GetCaughtVoiceLineTimer(this OlofFinalRoom __self) => _caughtVoiceLineTimer.Value.GetValue(__self);
		public static void SetCaughtVoiceLineTimer(this OlofFinalRoom __self, TimerEventer value) => _caughtVoiceLineTimer.Value.SetValue(__self, value);
		public static UnityEngine.Animator GetOlofAnimator(this OlofFinalRoom __self) => _olofAnimator.Value.GetValue(__self);
		public static void SetOlofAnimator(this OlofFinalRoom __self, UnityEngine.Animator value) => _olofAnimator.Value.SetValue(__self, value);
		public static UnityEngine.Renderer GetRescueKeyRenderer(this OlofFinalRoom __self) => _rescueKeyRenderer.Value.GetValue(__self);
		public static void SetRescueKeyRenderer(this OlofFinalRoom __self, UnityEngine.Renderer value) => _rescueKeyRenderer.Value.SetValue(__self, value);
		public static UnityEngine.Collider GetRescueKeyCollider(this OlofFinalRoom __self) => _rescueKeyCollider.Value.GetValue(__self);
		public static void SetRescueKeyCollider(this OlofFinalRoom __self, UnityEngine.Collider value) => _rescueKeyCollider.Value.SetValue(__self, value);
		public static float GetFallDelay(this OlofFinalRoom __self) => _fallDelay.Value.GetValue(__self);
		public static void SetFallDelay(this OlofFinalRoom __self, float value) => _fallDelay.Value.SetValue(__self, value);
		public static HeadTrackingIK GetHeadIK(this OlofFinalRoom __self) => _headIK.Value.GetValue(__self);
		public static void SetHeadIK(this OlofFinalRoom __self, HeadTrackingIK value) => _headIK.Value.SetValue(__self, value);
		public static HeadTrackingIK GetHandingOlofHeadIK(this OlofFinalRoom __self) => _handingOlofHeadIK.Value.GetValue(__self);
		public static void SetHandingOlofHeadIK(this OlofFinalRoom __self, HeadTrackingIK value) => _handingOlofHeadIK.Value.SetValue(__self, value);
		public static string GetEventRef_fall(this OlofFinalRoom __self) => _eventRef_fall.Value.GetValue(__self);
		public static void SetEventRef_fall(this OlofFinalRoom __self, string value) => _eventRef_fall.Value.SetValue(__self, value);
		public static string GetProgrammerSound_scream(this OlofFinalRoom __self) => _programmerSound_scream.Value.GetValue(__self);
		public static void SetProgrammerSound_scream(this OlofFinalRoom __self, string value) => _programmerSound_scream.Value.SetValue(__self, value);
		public static string GetScreamKey(this OlofFinalRoom __self) => _screamKey.Value.GetValue(__self);
		public static void SetScreamKey(this OlofFinalRoom __self, string value) => _screamKey.Value.SetValue(__self, value);
		public static Raft_Network GetNetwork(this OlofFinalRoom __self) => _network.Value.GetValue(__self);
		public static void SetNetwork(this OlofFinalRoom __self, Raft_Network value) => _network.Value.SetValue(__self, value);
		public static float GetDistanceInterval(this OlofFinalRoom __self) => _distanceInterval.Value.GetValue(__self);
		public static void SetDistanceInterval(this OlofFinalRoom __self, float value) => _distanceInterval.Value.SetValue(__self, value);
		public static int GetFurthestDistanceIndex(this OlofFinalRoom __self) => _furthestDistanceIndex.Value.GetValue(__self);
		public static void SetFurthestDistanceIndex(this OlofFinalRoom __self, int value) => _furthestDistanceIndex.Value.SetValue(__self, value);
		public static float GetFurthestNormalizedDistance(this OlofFinalRoom __self) => _furthestNormalizedDistance.Value.GetValue(__self);
		public static void SetFurthestNormalizedDistance(this OlofFinalRoom __self, float value) => _furthestNormalizedDistance.Value.SetValue(__self, value);
		public static int GetNumberOfVoiceLines(this OlofFinalRoom __self) => _numberOfVoiceLines.Value.GetValue(__self);
		public static void SetNumberOfVoiceLines(this OlofFinalRoom __self, int value) => _numberOfVoiceLines.Value.SetValue(__self, value);
		public static bool GetHasBeenCompleted(this OlofFinalRoom __self) => _hasBeenCompleted.Value.GetValue(__self);
		public static void SetHasBeenCompleted(this OlofFinalRoom __self, bool value) => _hasBeenCompleted.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<OlofFinalRoom>> _Start757602046 =
				new System.Lazy<MethodAccessor<OlofFinalRoom>>(() => MethodAccessor<OlofFinalRoom>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<OlofFinalRoom>> _OnEnable757602046 =
				new System.Lazy<MethodAccessor<OlofFinalRoom>>(() => MethodAccessor<OlofFinalRoom>.Create("OnEnable"));
		private static readonly System.Lazy<MethodAccessor<OlofFinalRoom>> _Update757602046 =
				new System.Lazy<MethodAccessor<OlofFinalRoom>>(() => MethodAccessor<OlofFinalRoom>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<OlofFinalRoom>> _OnDrawGizmosSelected757602046 =
				new System.Lazy<MethodAccessor<OlofFinalRoom>>(() => MethodAccessor<OlofFinalRoom>.Create("OnDrawGizmosSelected"));
		private static readonly System.Lazy<MethodAccessor<OlofFinalRoom>> _OnFinalRoomCompleteDelayed757602046 =
				new System.Lazy<MethodAccessor<OlofFinalRoom>>(() => MethodAccessor<OlofFinalRoom>.Create("OnFinalRoomCompleteDelayed"));
		private static readonly System.Lazy<MethodAccessor<OlofFinalRoom>> _OnFinalRoomComplete757602046 =
				new System.Lazy<MethodAccessor<OlofFinalRoom>>(() => MethodAccessor<OlofFinalRoom>.Create("OnFinalRoomComplete"));
		private static readonly System.Lazy<MethodAccessor<OlofFinalRoom>> _GetPlayerInFrontOfRoom757602046 =
				new System.Lazy<MethodAccessor<OlofFinalRoom>>(() => MethodAccessor<OlofFinalRoom>.Create("GetPlayerInFrontOfRoom"));
		private static readonly System.Lazy<MethodAccessor<OlofFinalRoom>> _GetNormalizedPlayerDistanceToEndOfRoom3461878659 =
				new System.Lazy<MethodAccessor<OlofFinalRoom>>(() => MethodAccessor<OlofFinalRoom>.Create("GetNormalizedPlayerDistanceToEndOfRoom", typeof(Network_Player)));
		private static readonly System.Lazy<MethodAccessor<OlofFinalRoom>> _DisableSelf757602046 =
				new System.Lazy<MethodAccessor<OlofFinalRoom>>(() => MethodAccessor<OlofFinalRoom>.Create("DisableSelf"));

		public static void Start(this OlofFinalRoom __self) => _Start757602046.Value.Invoke(__self);
		public static void OnEnable(this OlofFinalRoom __self) => _OnEnable757602046.Value.Invoke(__self);
		public static void Update(this OlofFinalRoom __self) => _Update757602046.Value.Invoke(__self);
		public static void OnDrawGizmosSelected(this OlofFinalRoom __self) => _OnDrawGizmosSelected757602046.Value.Invoke(__self);
		public static void OnFinalRoomCompleteDelayed(this OlofFinalRoom __self) => _OnFinalRoomCompleteDelayed757602046.Value.Invoke(__self);
		public static void OnFinalRoomComplete(this OlofFinalRoom __self) => _OnFinalRoomComplete757602046.Value.Invoke(__self);
		public static Network_Player GetPlayerInFrontOfRoom(this OlofFinalRoom __self) => (Network_Player)_GetPlayerInFrontOfRoom757602046.Value.Invoke(__self);
		public static float GetNormalizedPlayerDistanceToEndOfRoom(this OlofFinalRoom __self, Network_Player player) => (float)_GetNormalizedPlayerDistanceToEndOfRoom3461878659.Value.Invoke(__self, player);
		public static void DisableSelf(this OlofFinalRoom __self) => _DisableSelf757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Olof_Cage
	{

		private static readonly System.Lazy<FieldAccessor<Olof_Cage, AnimatorController>> _animatorController =
				new System.Lazy<FieldAccessor<Olof_Cage, AnimatorController>>(() => FieldAccessor<Olof_Cage, AnimatorController>.Create("animatorController"));

		public static AnimatorController GetAnimatorController(this Olof_Cage __self) => _animatorController.Value.GetValue(__self);
		public static void SetAnimatorController(this Olof_Cage __self, AnimatorController value) => _animatorController.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_PickupItem_Networked_DigPile
	{

		private static readonly System.Lazy<FieldAccessor<PickupItem_Networked_DigPile, string>> _eventRef_spawnBug =
				new System.Lazy<FieldAccessor<PickupItem_Networked_DigPile, string>>(() => FieldAccessor<PickupItem_Networked_DigPile, string>.Create("eventRef_spawnBug"));

		public static string GetEventRef_spawnBug(this PickupItem_Networked_DigPile __self) => _eventRef_spawnBug.Value.GetValue(__self);
		public static void SetEventRef_spawnBug(this PickupItem_Networked_DigPile __self, string value) => _eventRef_spawnBug.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_Puzzle_ConnectionPoint
	{

		private static readonly System.Lazy<FieldAccessor<Puzzle_ConnectionPoint, bool>> __isConnected =
				new System.Lazy<FieldAccessor<Puzzle_ConnectionPoint, bool>>(() => FieldAccessor<Puzzle_ConnectionPoint, bool>.Create("_isConnected"));
		private static readonly System.Lazy<FieldAccessor<Puzzle_ConnectionPoint, GizmoBox>> _gizmoBox =
				new System.Lazy<FieldAccessor<Puzzle_ConnectionPoint, GizmoBox>>(() => FieldAccessor<Puzzle_ConnectionPoint, GizmoBox>.Create("gizmoBox"));
		private static readonly System.Lazy<FieldAccessor<Puzzle_ConnectionPoint, UnityEngine.ParticleSystem>> _ps_leaking =
				new System.Lazy<FieldAccessor<Puzzle_ConnectionPoint, UnityEngine.ParticleSystem>>(() => FieldAccessor<Puzzle_ConnectionPoint, UnityEngine.ParticleSystem>.Create("ps_leaking"));
		private static readonly System.Lazy<FieldAccessor<Puzzle_ConnectionPoint, UnityEngine.LayerMask>> _connectionLayer =
				new System.Lazy<FieldAccessor<Puzzle_ConnectionPoint, UnityEngine.LayerMask>>(() => FieldAccessor<Puzzle_ConnectionPoint, UnityEngine.LayerMask>.Create("connectionLayer"));
		private static readonly System.Lazy<FieldAccessor<Puzzle_ConnectionPoint, StudioEventEmitterSustain>> _emitter_waterLeak =
				new System.Lazy<FieldAccessor<Puzzle_ConnectionPoint, StudioEventEmitterSustain>>(() => FieldAccessor<Puzzle_ConnectionPoint, StudioEventEmitterSustain>.Create("emitter_waterLeak"));

		public static bool Get_isConnected(this Puzzle_ConnectionPoint __self) => __isConnected.Value.GetValue(__self);
		public static void Set_isConnected(this Puzzle_ConnectionPoint __self, bool value) => __isConnected.Value.SetValue(__self, value);
		public static GizmoBox GetGizmoBox(this Puzzle_ConnectionPoint __self) => _gizmoBox.Value.GetValue(__self);
		public static void SetGizmoBox(this Puzzle_ConnectionPoint __self, GizmoBox value) => _gizmoBox.Value.SetValue(__self, value);
		public static UnityEngine.ParticleSystem GetPs_leaking(this Puzzle_ConnectionPoint __self) => _ps_leaking.Value.GetValue(__self);
		public static void SetPs_leaking(this Puzzle_ConnectionPoint __self, UnityEngine.ParticleSystem value) => _ps_leaking.Value.SetValue(__self, value);
		public static UnityEngine.LayerMask GetConnectionLayer(this Puzzle_ConnectionPoint __self) => _connectionLayer.Value.GetValue(__self);
		public static void SetConnectionLayer(this Puzzle_ConnectionPoint __self, UnityEngine.LayerMask value) => _connectionLayer.Value.SetValue(__self, value);
		public static StudioEventEmitterSustain GetEmitter_waterLeak(this Puzzle_ConnectionPoint __self) => _emitter_waterLeak.Value.GetValue(__self);
		public static void SetEmitter_waterLeak(this Puzzle_ConnectionPoint __self, StudioEventEmitterSustain value) => _emitter_waterLeak.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_Puzzle_Connector
	{

		private static readonly System.Lazy<FieldAccessor<Puzzle_Connector, Puzzle_Connector.Direction>> __direction =
				new System.Lazy<FieldAccessor<Puzzle_Connector, Puzzle_Connector.Direction>>(() => FieldAccessor<Puzzle_Connector, Puzzle_Connector.Direction>.Create("_direction"));
		private static readonly System.Lazy<FieldAccessor<Puzzle_Connector, bool>> __isConnected =
				new System.Lazy<FieldAccessor<Puzzle_Connector, bool>>(() => FieldAccessor<Puzzle_Connector, bool>.Create("_isConnected"));
		private static readonly System.Lazy<FieldAccessor<Puzzle_Connector, UnityEngine.Renderer>> _renderer =
				new System.Lazy<FieldAccessor<Puzzle_Connector, UnityEngine.Renderer>>(() => FieldAccessor<Puzzle_Connector, UnityEngine.Renderer>.Create("renderer"));
		private static readonly System.Lazy<FieldAccessor<Puzzle_Connector, float>> _vertexOffsetMultiplier =
				new System.Lazy<FieldAccessor<Puzzle_Connector, float>>(() => FieldAccessor<Puzzle_Connector, float>.Create("vertexOffsetMultiplier"));
		private static readonly System.Lazy<FieldAccessor<Puzzle_Connector, bool>> _reverse =
				new System.Lazy<FieldAccessor<Puzzle_Connector, bool>>(() => FieldAccessor<Puzzle_Connector, bool>.Create("reverse"));
		private static readonly System.Lazy<FieldAccessor<Puzzle_Connector, UnityEngine.MaterialPropertyBlock>> _mpb =
				new System.Lazy<FieldAccessor<Puzzle_Connector, UnityEngine.MaterialPropertyBlock>>(() => FieldAccessor<Puzzle_Connector, UnityEngine.MaterialPropertyBlock>.Create("mpb"));

		public static Puzzle_Connector.Direction Get_direction(this Puzzle_Connector __self) => __direction.Value.GetValue(__self);
		public static void Set_direction(this Puzzle_Connector __self, Puzzle_Connector.Direction value) => __direction.Value.SetValue(__self, value);
		public static bool Get_isConnected(this Puzzle_Connector __self) => __isConnected.Value.GetValue(__self);
		public static void Set_isConnected(this Puzzle_Connector __self, bool value) => __isConnected.Value.SetValue(__self, value);
		public static UnityEngine.Renderer GetRenderer(this Puzzle_Connector __self) => _renderer.Value.GetValue(__self);
		public static void SetRenderer(this Puzzle_Connector __self, UnityEngine.Renderer value) => _renderer.Value.SetValue(__self, value);
		public static float GetVertexOffsetMultiplier(this Puzzle_Connector __self) => _vertexOffsetMultiplier.Value.GetValue(__self);
		public static void SetVertexOffsetMultiplier(this Puzzle_Connector __self, float value) => _vertexOffsetMultiplier.Value.SetValue(__self, value);
		public static bool GetReverse(this Puzzle_Connector __self) => _reverse.Value.GetValue(__self);
		public static void SetReverse(this Puzzle_Connector __self, bool value) => _reverse.Value.SetValue(__self, value);
		public static UnityEngine.MaterialPropertyBlock GetMpb(this Puzzle_Connector __self) => _mpb.Value.GetValue(__self);
		public static void SetMpb(this Puzzle_Connector __self, UnityEngine.MaterialPropertyBlock value) => _mpb.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Puzzle_Connector>> _Awake757602046 =
				new System.Lazy<MethodAccessor<Puzzle_Connector>>(() => MethodAccessor<Puzzle_Connector>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<Puzzle_Connector>> _Button_FindFeedbackRenderer757602046 =
				new System.Lazy<MethodAccessor<Puzzle_Connector>>(() => MethodAccessor<Puzzle_Connector>.Create("Button_FindFeedbackRenderer"));
		private static readonly System.Lazy<MethodAccessor<Puzzle_Connector>> _RefreshVisualState757602046 =
				new System.Lazy<MethodAccessor<Puzzle_Connector>>(() => MethodAccessor<Puzzle_Connector>.Create("RefreshVisualState"));

		public static void Awake(this Puzzle_Connector __self) => _Awake757602046.Value.Invoke(__self);
		public static void Button_FindFeedbackRenderer(this Puzzle_Connector __self) => _Button_FindFeedbackRenderer757602046.Value.Invoke(__self);
		public static void RefreshVisualState(this Puzzle_Connector __self) => _RefreshVisualState757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Puzzle_Connector_Auto
	{

		private static readonly System.Lazy<FieldAccessor<Puzzle_Connector_Auto, TimerEventer>> _checkGizmoCollisionTimer =
				new System.Lazy<FieldAccessor<Puzzle_Connector_Auto, TimerEventer>>(() => FieldAccessor<Puzzle_Connector_Auto, TimerEventer>.Create("checkGizmoCollisionTimer"));
		private static readonly System.Lazy<FieldAccessor<Puzzle_Connector_Auto, System.Collections.Generic.List<Puzzle_Connector>>> _surgeLine =
				new System.Lazy<FieldAccessor<Puzzle_Connector_Auto, System.Collections.Generic.List<Puzzle_Connector>>>(() => FieldAccessor<Puzzle_Connector_Auto, System.Collections.Generic.List<Puzzle_Connector>>.Create("surgeLine"));
		private static readonly System.Lazy<FieldAccessor<Puzzle_Connector_Auto, System.Collections.Generic.List<Puzzle_Connector>>> _previousSurgeLine =
				new System.Lazy<FieldAccessor<Puzzle_Connector_Auto, System.Collections.Generic.List<Puzzle_Connector>>>(() => FieldAccessor<Puzzle_Connector_Auto, System.Collections.Generic.List<Puzzle_Connector>>.Create("previousSurgeLine"));

		public static TimerEventer GetCheckGizmoCollisionTimer(this Puzzle_Connector_Auto __self) => _checkGizmoCollisionTimer.Value.GetValue(__self);
		public static void SetCheckGizmoCollisionTimer(this Puzzle_Connector_Auto __self, TimerEventer value) => _checkGizmoCollisionTimer.Value.SetValue(__self, value);
		public static System.Collections.Generic.List<Puzzle_Connector> GetSurgeLine(this Puzzle_Connector_Auto __self) => _surgeLine.Value.GetValue(__self);
		public static void SetSurgeLine(this Puzzle_Connector_Auto __self, System.Collections.Generic.List<Puzzle_Connector> value) => _surgeLine.Value.SetValue(__self, value);
		public static System.Collections.Generic.List<Puzzle_Connector> GetPreviousSurgeLine(this Puzzle_Connector_Auto __self) => _previousSurgeLine.Value.GetValue(__self);
		public static void SetPreviousSurgeLine(this Puzzle_Connector_Auto __self, System.Collections.Generic.List<Puzzle_Connector> value) => _previousSurgeLine.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Puzzle_Connector_Auto>> _Awake757602046 =
				new System.Lazy<MethodAccessor<Puzzle_Connector_Auto>>(() => MethodAccessor<Puzzle_Connector_Auto>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<Puzzle_Connector_Auto>> _Update757602046 =
				new System.Lazy<MethodAccessor<Puzzle_Connector_Auto>>(() => MethodAccessor<Puzzle_Connector_Auto>.Create("Update"));

		public static void Awake(this Puzzle_Connector_Auto __self) => _Awake757602046.Value.Invoke(__self);
		public static void Update(this Puzzle_Connector_Auto __self) => _Update757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_ScaleWeight
	{

		private static readonly System.Lazy<FieldAccessor<ScaleWeight, RaycastInteractable_Redirect>> _redirect =
				new System.Lazy<FieldAccessor<ScaleWeight, RaycastInteractable_Redirect>>(() => FieldAccessor<ScaleWeight, RaycastInteractable_Redirect>.Create("redirect"));
		private static readonly System.Lazy<FieldAccessor<ScaleWeight, int>> _weight =
				new System.Lazy<FieldAccessor<ScaleWeight, int>>(() => FieldAccessor<ScaleWeight, int>.Create("weight"));

		public static RaycastInteractable_Redirect GetRedirect(this ScaleWeight __self) => _redirect.Value.GetValue(__self);
		public static void SetRedirect(this ScaleWeight __self, RaycastInteractable_Redirect value) => _redirect.Value.SetValue(__self, value);
		public static int GetWeight(this ScaleWeight __self) => _weight.Value.GetValue(__self);
		public static void SetWeight(this ScaleWeight __self, int value) => _weight.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_SoundPlayer_IntegerConnection
	{

		private static readonly System.Lazy<FieldAccessor<SoundPlayer_IntegerConnection, System.Collections.Generic.List<string>>> _soundsPlacement =
				new System.Lazy<FieldAccessor<SoundPlayer_IntegerConnection, System.Collections.Generic.List<string>>>(() => FieldAccessor<SoundPlayer_IntegerConnection, System.Collections.Generic.List<string>>.Create("soundsPlacement"));
		private static readonly System.Lazy<FieldAccessor<SoundPlayer_IntegerConnection, System.Collections.Generic.List<string>>> _soundsRetrieval =
				new System.Lazy<FieldAccessor<SoundPlayer_IntegerConnection, System.Collections.Generic.List<string>>>(() => FieldAccessor<SoundPlayer_IntegerConnection, System.Collections.Generic.List<string>>.Create("soundsRetrieval"));

		public static System.Collections.Generic.List<string> GetSoundsPlacement(this SoundPlayer_IntegerConnection __self) => _soundsPlacement.Value.GetValue(__self);
		public static void SetSoundsPlacement(this SoundPlayer_IntegerConnection __self, System.Collections.Generic.List<string> value) => _soundsPlacement.Value.SetValue(__self, value);
		public static System.Collections.Generic.List<string> GetSoundsRetrieval(this SoundPlayer_IntegerConnection __self) => _soundsRetrieval.Value.GetValue(__self);
		public static void SetSoundsRetrieval(this SoundPlayer_IntegerConnection __self, System.Collections.Generic.List<string> value) => _soundsRetrieval.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_WaterChallenge
	{

		private static readonly System.Lazy<FieldAccessor<WaterChallenge, WaterpumpChallenge>> _pump =
				new System.Lazy<FieldAccessor<WaterChallenge, WaterpumpChallenge>>(() => FieldAccessor<WaterChallenge, WaterpumpChallenge>.Create("pump"));
		private static readonly System.Lazy<FieldAccessor<WaterChallenge, Puzzle_Connector_Auto>> _startConnection =
				new System.Lazy<FieldAccessor<WaterChallenge, Puzzle_Connector_Auto>>(() => FieldAccessor<WaterChallenge, Puzzle_Connector_Auto>.Create("startConnection"));
		private static readonly System.Lazy<FieldAccessor<WaterChallenge, Puzzle_Connector>> _endConnection =
				new System.Lazy<FieldAccessor<WaterChallenge, Puzzle_Connector>>(() => FieldAccessor<WaterChallenge, Puzzle_Connector>.Create("endConnection"));
		private static readonly System.Lazy<FieldAccessor<WaterChallenge, FillCounter>> _waterTankFill =
				new System.Lazy<FieldAccessor<WaterChallenge, FillCounter>>(() => FieldAccessor<WaterChallenge, FillCounter>.Create("waterTankFill"));
		private static readonly System.Lazy<FieldAccessor<WaterChallenge, TimerEventer>> _fillTimer =
				new System.Lazy<FieldAccessor<WaterChallenge, TimerEventer>>(() => FieldAccessor<WaterChallenge, TimerEventer>.Create("fillTimer"));
		private static readonly System.Lazy<FieldAccessor<WaterChallenge, float>> _fillAmoount =
				new System.Lazy<FieldAccessor<WaterChallenge, float>>(() => FieldAccessor<WaterChallenge, float>.Create("fillAmoount"));
		private static readonly System.Lazy<FieldAccessor<WaterChallenge, FMODUnity.StudioEventEmitter>> _emitter_waterFlow =
				new System.Lazy<FieldAccessor<WaterChallenge, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<WaterChallenge, FMODUnity.StudioEventEmitter>.Create("emitter_waterFlow"));
		private static readonly System.Lazy<FieldAccessor<WaterChallenge, bool>> _byPassPump =
				new System.Lazy<FieldAccessor<WaterChallenge, bool>>(() => FieldAccessor<WaterChallenge, bool>.Create("byPassPump"));

		public static WaterpumpChallenge GetPump(this WaterChallenge __self) => _pump.Value.GetValue(__self);
		public static void SetPump(this WaterChallenge __self, WaterpumpChallenge value) => _pump.Value.SetValue(__self, value);
		public static Puzzle_Connector_Auto GetStartConnection(this WaterChallenge __self) => _startConnection.Value.GetValue(__self);
		public static void SetStartConnection(this WaterChallenge __self, Puzzle_Connector_Auto value) => _startConnection.Value.SetValue(__self, value);
		public static Puzzle_Connector GetEndConnection(this WaterChallenge __self) => _endConnection.Value.GetValue(__self);
		public static void SetEndConnection(this WaterChallenge __self, Puzzle_Connector value) => _endConnection.Value.SetValue(__self, value);
		public static FillCounter GetWaterTankFill(this WaterChallenge __self) => _waterTankFill.Value.GetValue(__self);
		public static void SetWaterTankFill(this WaterChallenge __self, FillCounter value) => _waterTankFill.Value.SetValue(__self, value);
		public static TimerEventer GetFillTimer(this WaterChallenge __self) => _fillTimer.Value.GetValue(__self);
		public static void SetFillTimer(this WaterChallenge __self, TimerEventer value) => _fillTimer.Value.SetValue(__self, value);
		public static float GetFillAmoount(this WaterChallenge __self) => _fillAmoount.Value.GetValue(__self);
		public static void SetFillAmoount(this WaterChallenge __self, float value) => _fillAmoount.Value.SetValue(__self, value);
		public static FMODUnity.StudioEventEmitter GetEmitter_waterFlow(this WaterChallenge __self) => _emitter_waterFlow.Value.GetValue(__self);
		public static void SetEmitter_waterFlow(this WaterChallenge __self, FMODUnity.StudioEventEmitter value) => _emitter_waterFlow.Value.SetValue(__self, value);
		public static bool GetByPassPump(this WaterChallenge __self) => _byPassPump.Value.GetValue(__self);
		public static void SetByPassPump(this WaterChallenge __self, bool value) => _byPassPump.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<WaterChallenge>> _Update757602046 =
				new System.Lazy<MethodAccessor<WaterChallenge>>(() => MethodAccessor<WaterChallenge>.Create("Update"));

		public static void Update(this WaterChallenge __self) => _Update757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_WaterChallengeWheel
	{

		private static readonly System.Lazy<FieldAccessor<WaterChallengeWheel, Puzzle_Connector>> _onwardsConnection =
				new System.Lazy<FieldAccessor<WaterChallengeWheel, Puzzle_Connector>>(() => FieldAccessor<WaterChallengeWheel, Puzzle_Connector>.Create("onwardsConnection"));
		private static readonly System.Lazy<FieldAccessor<WaterChallengeWheel, FMODUnity.StudioEventEmitter>> _emitter_waterFlow =
				new System.Lazy<FieldAccessor<WaterChallengeWheel, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<WaterChallengeWheel, FMODUnity.StudioEventEmitter>.Create("emitter_waterFlow"));

		public static Puzzle_Connector GetOnwardsConnection(this WaterChallengeWheel __self) => _onwardsConnection.Value.GetValue(__self);
		public static void SetOnwardsConnection(this WaterChallengeWheel __self, Puzzle_Connector value) => _onwardsConnection.Value.SetValue(__self, value);
		public static FMODUnity.StudioEventEmitter GetEmitter_waterFlow(this WaterChallengeWheel __self) => _emitter_waterFlow.Value.GetValue(__self);
		public static void SetEmitter_waterFlow(this WaterChallengeWheel __self, FMODUnity.StudioEventEmitter value) => _emitter_waterFlow.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<WaterChallengeWheel>> _Update757602046 =
				new System.Lazy<MethodAccessor<WaterChallengeWheel>>(() => MethodAccessor<WaterChallengeWheel>.Create("Update"));

		public static void Update(this WaterChallengeWheel __self) => _Update757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_WaterpumpChallenge
	{

		private static readonly System.Lazy<FieldAccessor<WaterpumpChallenge, MeshPathBase_Electricity>> _meshPathElectricity =
				new System.Lazy<FieldAccessor<WaterpumpChallenge, MeshPathBase_Electricity>>(() => FieldAccessor<WaterpumpChallenge, MeshPathBase_Electricity>.Create("meshPathElectricity"));
		private static readonly System.Lazy<FieldAccessor<WaterpumpChallenge, UnityEngine.GameObject>> _pumpedParticleEmitter =
				new System.Lazy<FieldAccessor<WaterpumpChallenge, UnityEngine.GameObject>>(() => FieldAccessor<WaterpumpChallenge, UnityEngine.GameObject>.Create("pumpedParticleEmitter"));
		private static readonly System.Lazy<FieldAccessor<WaterpumpChallenge, UnityEngine.Renderer>> _pumpPipeRenderer =
				new System.Lazy<FieldAccessor<WaterpumpChallenge, UnityEngine.Renderer>>(() => FieldAccessor<WaterpumpChallenge, UnityEngine.Renderer>.Create("pumpPipeRenderer"));
		private static readonly System.Lazy<FieldAccessor<WaterpumpChallenge, float>> _vertexOffsetMultiplier =
				new System.Lazy<FieldAccessor<WaterpumpChallenge, float>>(() => FieldAccessor<WaterpumpChallenge, float>.Create("vertexOffsetMultiplier"));
		private static readonly System.Lazy<FieldAccessor<WaterpumpChallenge, string>> _localizationTerm =
				new System.Lazy<FieldAccessor<WaterpumpChallenge, string>>(() => FieldAccessor<WaterpumpChallenge, string>.Create("localizationTerm"));
		private static readonly System.Lazy<FieldAccessor<WaterpumpChallenge, VFX_Electricity>> _electricityVFX =
				new System.Lazy<FieldAccessor<WaterpumpChallenge, VFX_Electricity>>(() => FieldAccessor<WaterpumpChallenge, VFX_Electricity>.Create("electricityVFX"));
		private static readonly System.Lazy<FieldAccessor<WaterpumpChallenge, UnityEngine.Animator>> _generatorAnimator =
				new System.Lazy<FieldAccessor<WaterpumpChallenge, UnityEngine.Animator>>(() => FieldAccessor<WaterpumpChallenge, UnityEngine.Animator>.Create("generatorAnimator"));
		private static readonly System.Lazy<FieldAccessor<WaterpumpChallenge, FMODUnity.StudioEventEmitter>> _generatorEmitter =
				new System.Lazy<FieldAccessor<WaterpumpChallenge, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<WaterpumpChallenge, FMODUnity.StudioEventEmitter>.Create("generatorEmitter"));
		private static readonly System.Lazy<FieldAccessor<WaterpumpChallenge, System.Collections.Generic.List<UnityEngine.Transform>>> _electricityPathPoints =
				new System.Lazy<FieldAccessor<WaterpumpChallenge, System.Collections.Generic.List<UnityEngine.Transform>>>(() => FieldAccessor<WaterpumpChallenge, System.Collections.Generic.List<UnityEngine.Transform>>.Create("electricityPathPoints"));
		private static readonly System.Lazy<FieldAccessor<WaterpumpChallenge, FMODUnity.StudioEventEmitter>> _eventEmitter_PumpWater =
				new System.Lazy<FieldAccessor<WaterpumpChallenge, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<WaterpumpChallenge, FMODUnity.StudioEventEmitter>.Create("eventEmitter_PumpWater"));
		private static readonly System.Lazy<FieldAccessor<WaterpumpChallenge, DisplayTextManager>> _displayTextManager =
				new System.Lazy<FieldAccessor<WaterpumpChallenge, DisplayTextManager>>(() => FieldAccessor<WaterpumpChallenge, DisplayTextManager>.Create("displayTextManager"));
		private static readonly System.Lazy<FieldAccessor<WaterpumpChallenge, UnityEngine.MaterialPropertyBlock>> _mpb =
				new System.Lazy<FieldAccessor<WaterpumpChallenge, UnityEngine.MaterialPropertyBlock>>(() => FieldAccessor<WaterpumpChallenge, UnityEngine.MaterialPropertyBlock>.Create("mpb"));
		private static readonly System.Lazy<FieldAccessor<WaterpumpChallenge, bool>> _active =
				new System.Lazy<FieldAccessor<WaterpumpChallenge, bool>>(() => FieldAccessor<WaterpumpChallenge, bool>.Create("active"));

		public static MeshPathBase_Electricity GetMeshPathElectricity(this WaterpumpChallenge __self) => _meshPathElectricity.Value.GetValue(__self);
		public static void SetMeshPathElectricity(this WaterpumpChallenge __self, MeshPathBase_Electricity value) => _meshPathElectricity.Value.SetValue(__self, value);
		public static UnityEngine.GameObject GetPumpedParticleEmitter(this WaterpumpChallenge __self) => _pumpedParticleEmitter.Value.GetValue(__self);
		public static void SetPumpedParticleEmitter(this WaterpumpChallenge __self, UnityEngine.GameObject value) => _pumpedParticleEmitter.Value.SetValue(__self, value);
		public static UnityEngine.Renderer GetPumpPipeRenderer(this WaterpumpChallenge __self) => _pumpPipeRenderer.Value.GetValue(__self);
		public static void SetPumpPipeRenderer(this WaterpumpChallenge __self, UnityEngine.Renderer value) => _pumpPipeRenderer.Value.SetValue(__self, value);
		public static float GetVertexOffsetMultiplier(this WaterpumpChallenge __self) => _vertexOffsetMultiplier.Value.GetValue(__self);
		public static void SetVertexOffsetMultiplier(this WaterpumpChallenge __self, float value) => _vertexOffsetMultiplier.Value.SetValue(__self, value);
		public static string GetLocalizationTerm(this WaterpumpChallenge __self) => _localizationTerm.Value.GetValue(__self);
		public static void SetLocalizationTerm(this WaterpumpChallenge __self, string value) => _localizationTerm.Value.SetValue(__self, value);
		public static VFX_Electricity GetElectricityVFX(this WaterpumpChallenge __self) => _electricityVFX.Value.GetValue(__self);
		public static void SetElectricityVFX(this WaterpumpChallenge __self, VFX_Electricity value) => _electricityVFX.Value.SetValue(__self, value);
		public static UnityEngine.Animator GetGeneratorAnimator(this WaterpumpChallenge __self) => _generatorAnimator.Value.GetValue(__self);
		public static void SetGeneratorAnimator(this WaterpumpChallenge __self, UnityEngine.Animator value) => _generatorAnimator.Value.SetValue(__self, value);
		public static FMODUnity.StudioEventEmitter GetGeneratorEmitter(this WaterpumpChallenge __self) => _generatorEmitter.Value.GetValue(__self);
		public static void SetGeneratorEmitter(this WaterpumpChallenge __self, FMODUnity.StudioEventEmitter value) => _generatorEmitter.Value.SetValue(__self, value);
		public static System.Collections.Generic.List<UnityEngine.Transform> GetElectricityPathPoints(this WaterpumpChallenge __self) => _electricityPathPoints.Value.GetValue(__self);
		public static void SetElectricityPathPoints(this WaterpumpChallenge __self, System.Collections.Generic.List<UnityEngine.Transform> value) => _electricityPathPoints.Value.SetValue(__self, value);
		public static FMODUnity.StudioEventEmitter GetEventEmitter_PumpWater(this WaterpumpChallenge __self) => _eventEmitter_PumpWater.Value.GetValue(__self);
		public static void SetEventEmitter_PumpWater(this WaterpumpChallenge __self, FMODUnity.StudioEventEmitter value) => _eventEmitter_PumpWater.Value.SetValue(__self, value);
		public static DisplayTextManager GetDisplayTextManager(this WaterpumpChallenge __self) => _displayTextManager.Value.GetValue(__self);
		public static void SetDisplayTextManager(this WaterpumpChallenge __self, DisplayTextManager value) => _displayTextManager.Value.SetValue(__self, value);
		public static UnityEngine.MaterialPropertyBlock GetMpb(this WaterpumpChallenge __self) => _mpb.Value.GetValue(__self);
		public static void SetMpb(this WaterpumpChallenge __self, UnityEngine.MaterialPropertyBlock value) => _mpb.Value.SetValue(__self, value);
		public static bool GetActive(this WaterpumpChallenge __self) => _active.Value.GetValue(__self);
		public static void SetActive(this WaterpumpChallenge __self, bool value) => _active.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<WaterpumpChallenge>> _Start757602046 =
				new System.Lazy<MethodAccessor<WaterpumpChallenge>>(() => MethodAccessor<WaterpumpChallenge>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<WaterpumpChallenge>> _Update757602046 =
				new System.Lazy<MethodAccessor<WaterpumpChallenge>>(() => MethodAccessor<WaterpumpChallenge>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<WaterpumpChallenge>> _CheckElectricity757602046 =
				new System.Lazy<MethodAccessor<WaterpumpChallenge>>(() => MethodAccessor<WaterpumpChallenge>.Create("CheckElectricity"));
		private static readonly System.Lazy<MethodAccessor<WaterpumpChallenge>> _ToggleMisc3450040886 =
				new System.Lazy<MethodAccessor<WaterpumpChallenge>>(() => MethodAccessor<WaterpumpChallenge>.Create("ToggleMisc", typeof(bool)));

		public static void Start(this WaterpumpChallenge __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this WaterpumpChallenge __self) => _Update757602046.Value.Invoke(__self);
		public static void CheckElectricity(this WaterpumpChallenge __self) => _CheckElectricity757602046.Value.Invoke(__self);
		public static void ToggleMisc(this WaterpumpChallenge __self, bool value) => _ToggleMisc3450040886.Value.Invoke(__self, value);

	}

	public static class PrivateAccessor_Intervaller_GameObjectToggler
	{

		private static readonly System.Lazy<FieldAccessor<Intervaller_GameObjectToggler, UnityEngine.GameObject>> _stateOneParent =
				new System.Lazy<FieldAccessor<Intervaller_GameObjectToggler, UnityEngine.GameObject>>(() => FieldAccessor<Intervaller_GameObjectToggler, UnityEngine.GameObject>.Create("stateOneParent"));
		private static readonly System.Lazy<FieldAccessor<Intervaller_GameObjectToggler, UnityEngine.GameObject>> _stateTwoParent =
				new System.Lazy<FieldAccessor<Intervaller_GameObjectToggler, UnityEngine.GameObject>>(() => FieldAccessor<Intervaller_GameObjectToggler, UnityEngine.GameObject>.Create("stateTwoParent"));
		private static readonly System.Lazy<FieldAccessor<Intervaller_GameObjectToggler, UnityEngine.Transform>> _soundPositionParent =
				new System.Lazy<FieldAccessor<Intervaller_GameObjectToggler, UnityEngine.Transform>>(() => FieldAccessor<Intervaller_GameObjectToggler, UnityEngine.Transform>.Create("soundPositionParent"));
		private static readonly System.Lazy<FieldAccessor<Intervaller_GameObjectToggler, string>> _eventRef_stateOneOn =
				new System.Lazy<FieldAccessor<Intervaller_GameObjectToggler, string>>(() => FieldAccessor<Intervaller_GameObjectToggler, string>.Create("eventRef_stateOneOn"));
		private static readonly System.Lazy<FieldAccessor<Intervaller_GameObjectToggler, string>> _eventRef_stateTwoOn =
				new System.Lazy<FieldAccessor<Intervaller_GameObjectToggler, string>>(() => FieldAccessor<Intervaller_GameObjectToggler, string>.Create("eventRef_stateTwoOn"));
		private static readonly System.Lazy<FieldAccessor<Intervaller_GameObjectToggler, Network_Water>> _water =
				new System.Lazy<FieldAccessor<Intervaller_GameObjectToggler, Network_Water>>(() => FieldAccessor<Intervaller_GameObjectToggler, Network_Water>.Create("water"));

		public static UnityEngine.GameObject GetStateOneParent(this Intervaller_GameObjectToggler __self) => _stateOneParent.Value.GetValue(__self);
		public static void SetStateOneParent(this Intervaller_GameObjectToggler __self, UnityEngine.GameObject value) => _stateOneParent.Value.SetValue(__self, value);
		public static UnityEngine.GameObject GetStateTwoParent(this Intervaller_GameObjectToggler __self) => _stateTwoParent.Value.GetValue(__self);
		public static void SetStateTwoParent(this Intervaller_GameObjectToggler __self, UnityEngine.GameObject value) => _stateTwoParent.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetSoundPositionParent(this Intervaller_GameObjectToggler __self) => _soundPositionParent.Value.GetValue(__self);
		public static void SetSoundPositionParent(this Intervaller_GameObjectToggler __self, UnityEngine.Transform value) => _soundPositionParent.Value.SetValue(__self, value);
		public static string GetEventRef_stateOneOn(this Intervaller_GameObjectToggler __self) => _eventRef_stateOneOn.Value.GetValue(__self);
		public static void SetEventRef_stateOneOn(this Intervaller_GameObjectToggler __self, string value) => _eventRef_stateOneOn.Value.SetValue(__self, value);
		public static string GetEventRef_stateTwoOn(this Intervaller_GameObjectToggler __self) => _eventRef_stateTwoOn.Value.GetValue(__self);
		public static void SetEventRef_stateTwoOn(this Intervaller_GameObjectToggler __self, string value) => _eventRef_stateTwoOn.Value.SetValue(__self, value);
		public static Network_Water GetWater(this Intervaller_GameObjectToggler __self) => _water.Value.GetValue(__self);
		public static void SetWater(this Intervaller_GameObjectToggler __self, Network_Water value) => _water.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Intervaller_GameObjectToggler>> _Start757602046 =
				new System.Lazy<MethodAccessor<Intervaller_GameObjectToggler>>(() => MethodAccessor<Intervaller_GameObjectToggler>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<Intervaller_GameObjectToggler>> _Update757602046 =
				new System.Lazy<MethodAccessor<Intervaller_GameObjectToggler>>(() => MethodAccessor<Intervaller_GameObjectToggler>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<Intervaller_GameObjectToggler>> _ActivateInterval757602046 =
				new System.Lazy<MethodAccessor<Intervaller_GameObjectToggler>>(() => MethodAccessor<Intervaller_GameObjectToggler>.Create("ActivateInterval"));
		private static readonly System.Lazy<MethodAccessor<Intervaller_GameObjectToggler>> _DeActivateInterval757602046 =
				new System.Lazy<MethodAccessor<Intervaller_GameObjectToggler>>(() => MethodAccessor<Intervaller_GameObjectToggler>.Create("DeActivateInterval"));

		public static void Start(this Intervaller_GameObjectToggler __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this Intervaller_GameObjectToggler __self) => _Update757602046.Value.Invoke(__self);
		public static void ActivateInterval(this Intervaller_GameObjectToggler __self) => _ActivateInterval757602046.Value.Invoke(__self);
		public static void DeActivateInterval(this Intervaller_GameObjectToggler __self) => _DeActivateInterval757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_JellyFish
	{

		private static readonly System.Lazy<FieldAccessor<JellyFish, float>> _pointPositionNormalized =
				new System.Lazy<FieldAccessor<JellyFish, float>>(() => FieldAccessor<JellyFish, float>.Create("pointPositionNormalized"));
		private static readonly System.Lazy<FieldAccessor<JellyFish, UnityEngine.Transform>> _pointA =
				new System.Lazy<FieldAccessor<JellyFish, UnityEngine.Transform>>(() => FieldAccessor<JellyFish, UnityEngine.Transform>.Create("pointA"));
		private static readonly System.Lazy<FieldAccessor<JellyFish, UnityEngine.Transform>> _pointB =
				new System.Lazy<FieldAccessor<JellyFish, UnityEngine.Transform>>(() => FieldAccessor<JellyFish, UnityEngine.Transform>.Create("pointB"));
		private static readonly System.Lazy<FieldAccessor<JellyFish, UnityEngine.Transform>> _pointScared =
				new System.Lazy<FieldAccessor<JellyFish, UnityEngine.Transform>>(() => FieldAccessor<JellyFish, UnityEngine.Transform>.Create("pointScared"));
		private static readonly System.Lazy<FieldAccessor<JellyFish, float>> _movementSpeed =
				new System.Lazy<FieldAccessor<JellyFish, float>>(() => FieldAccessor<JellyFish, float>.Create("movementSpeed"));
		private static readonly System.Lazy<FieldAccessor<JellyFish, float>> _pingpongSpeed =
				new System.Lazy<FieldAccessor<JellyFish, float>>(() => FieldAccessor<JellyFish, float>.Create("pingpongSpeed"));
		private static readonly System.Lazy<FieldAccessor<JellyFish, UnityEngine.ParticleSystem>> _particles_Attack =
				new System.Lazy<FieldAccessor<JellyFish, UnityEngine.ParticleSystem>>(() => FieldAccessor<JellyFish, UnityEngine.ParticleSystem>.Create("particles_Attack"));
		private static readonly System.Lazy<FieldAccessor<JellyFish, DamageBox>> _damageBox =
				new System.Lazy<FieldAccessor<JellyFish, DamageBox>>(() => FieldAccessor<JellyFish, DamageBox>.Create("damageBox"));
		private static readonly System.Lazy<FieldAccessor<JellyFish, float>> _randomOffset =
				new System.Lazy<FieldAccessor<JellyFish, float>>(() => FieldAccessor<JellyFish, float>.Create("randomOffset"));

		public static float GetPointPositionNormalized(this JellyFish __self) => _pointPositionNormalized.Value.GetValue(__self);
		public static void SetPointPositionNormalized(this JellyFish __self, float value) => _pointPositionNormalized.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetPointA(this JellyFish __self) => _pointA.Value.GetValue(__self);
		public static void SetPointA(this JellyFish __self, UnityEngine.Transform value) => _pointA.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetPointB(this JellyFish __self) => _pointB.Value.GetValue(__self);
		public static void SetPointB(this JellyFish __self, UnityEngine.Transform value) => _pointB.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetPointScared(this JellyFish __self) => _pointScared.Value.GetValue(__self);
		public static void SetPointScared(this JellyFish __self, UnityEngine.Transform value) => _pointScared.Value.SetValue(__self, value);
		public static float GetMovementSpeed(this JellyFish __self) => _movementSpeed.Value.GetValue(__self);
		public static void SetMovementSpeed(this JellyFish __self, float value) => _movementSpeed.Value.SetValue(__self, value);
		public static float GetPingpongSpeed(this JellyFish __self) => _pingpongSpeed.Value.GetValue(__self);
		public static void SetPingpongSpeed(this JellyFish __self, float value) => _pingpongSpeed.Value.SetValue(__self, value);
		public static UnityEngine.ParticleSystem GetParticles_Attack(this JellyFish __self) => _particles_Attack.Value.GetValue(__self);
		public static void SetParticles_Attack(this JellyFish __self, UnityEngine.ParticleSystem value) => _particles_Attack.Value.SetValue(__self, value);
		public static DamageBox GetDamageBox(this JellyFish __self) => _damageBox.Value.GetValue(__self);
		public static void SetDamageBox(this JellyFish __self, DamageBox value) => _damageBox.Value.SetValue(__self, value);
		public static float GetRandomOffset(this JellyFish __self) => _randomOffset.Value.GetValue(__self);
		public static void SetRandomOffset(this JellyFish __self, float value) => _randomOffset.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<JellyFish>> _Awake757602046 =
				new System.Lazy<MethodAccessor<JellyFish>>(() => MethodAccessor<JellyFish>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<JellyFish>> _Update757602046 =
				new System.Lazy<MethodAccessor<JellyFish>>(() => MethodAccessor<JellyFish>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<JellyFish>> _OnDrawGizmos757602046 =
				new System.Lazy<MethodAccessor<JellyFish>>(() => MethodAccessor<JellyFish>.Create("OnDrawGizmos"));
		private static readonly System.Lazy<MethodAccessor<JellyFish>> _OnDamageBoxDamage3461878659 =
				new System.Lazy<MethodAccessor<JellyFish>>(() => MethodAccessor<JellyFish>.Create("OnDamageBoxDamage", typeof(Network_Player)));

		public static void Awake(this JellyFish __self) => _Awake757602046.Value.Invoke(__self);
		public static void Update(this JellyFish __self) => _Update757602046.Value.Invoke(__self);
		public static void OnDrawGizmos(this JellyFish __self) => _OnDrawGizmos757602046.Value.Invoke(__self);
		public static void OnDamageBoxDamage(this JellyFish __self, Network_Player player) => _OnDamageBoxDamage3461878659.Value.Invoke(__self, player);

	}

	public static class PrivateAccessor_JellyFishScareBox
	{

		private static readonly System.Lazy<FieldAccessor<JellyFishScareBox, System.Collections.Generic.List<JellyFish>>> _jellyFishes =
				new System.Lazy<FieldAccessor<JellyFishScareBox, System.Collections.Generic.List<JellyFish>>>(() => FieldAccessor<JellyFishScareBox, System.Collections.Generic.List<JellyFish>>.Create("jellyFishes"));

		public static System.Collections.Generic.List<JellyFish> GetJellyFishes(this JellyFishScareBox __self) => _jellyFishes.Value.GetValue(__self);
		public static void SetJellyFishes(this JellyFishScareBox __self, System.Collections.Generic.List<JellyFish> value) => _jellyFishes.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<JellyFishScareBox>> _OnEnable757602046 =
				new System.Lazy<MethodAccessor<JellyFishScareBox>>(() => MethodAccessor<JellyFishScareBox>.Create("OnEnable"));
		private static readonly System.Lazy<MethodAccessor<JellyFishScareBox>> _OnDisable757602046 =
				new System.Lazy<MethodAccessor<JellyFishScareBox>>(() => MethodAccessor<JellyFishScareBox>.Create("OnDisable"));
		private static readonly System.Lazy<MethodAccessor<JellyFishScareBox>> _OnDrawGizmos757602046 =
				new System.Lazy<MethodAccessor<JellyFishScareBox>>(() => MethodAccessor<JellyFishScareBox>.Create("OnDrawGizmos"));
		private static readonly System.Lazy<MethodAccessor<JellyFishScareBox>> _SetJellyFishScared3450040886 =
				new System.Lazy<MethodAccessor<JellyFishScareBox>>(() => MethodAccessor<JellyFishScareBox>.Create("SetJellyFishScared", typeof(bool)));

		public static void OnEnable(this JellyFishScareBox __self) => _OnEnable757602046.Value.Invoke(__self);
		public static void OnDisable(this JellyFishScareBox __self) => _OnDisable757602046.Value.Invoke(__self);
		public static void OnDrawGizmos(this JellyFishScareBox __self) => _OnDrawGizmos757602046.Value.Invoke(__self);
		public static void SetJellyFishScared(this JellyFishScareBox __self, bool scared) => _SetJellyFishScared3450040886.Value.Invoke(__self, scared);

	}

	public static class PrivateAccessor_VarunaGlobalShake
	{

		private static readonly System.Lazy<FieldAccessor<VarunaGlobalShake, SO_CameraShaker>> _shakeSettings =
				new System.Lazy<FieldAccessor<VarunaGlobalShake, SO_CameraShaker>>(() => FieldAccessor<VarunaGlobalShake, SO_CameraShaker>.Create("shakeSettings"));
		private static readonly System.Lazy<FieldAccessor<VarunaGlobalShake, AreaZone>> _areaZone =
				new System.Lazy<FieldAccessor<VarunaGlobalShake, AreaZone>>(() => FieldAccessor<VarunaGlobalShake, AreaZone>.Create("areaZone"));
		private static readonly System.Lazy<FieldAccessor<VarunaGlobalShake, float>> _shakeInterval =
				new System.Lazy<FieldAccessor<VarunaGlobalShake, float>>(() => FieldAccessor<VarunaGlobalShake, float>.Create("shakeInterval"));
		private static readonly System.Lazy<FieldAccessor<VarunaGlobalShake, FMODUnity.StudioEventEmitter>> _emitter_rumble =
				new System.Lazy<FieldAccessor<VarunaGlobalShake, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<VarunaGlobalShake, FMODUnity.StudioEventEmitter>.Create("emitter_rumble"));
		private static readonly System.Lazy<FieldAccessor<VarunaGlobalShake, ScreenEffectManager>> _screenEffectManager =
				new System.Lazy<FieldAccessor<VarunaGlobalShake, ScreenEffectManager>>(() => FieldAccessor<VarunaGlobalShake, ScreenEffectManager>.Create("screenEffectManager"));
		private static readonly System.Lazy<FieldAccessor<VarunaGlobalShake, Network_Water>> _networkWater =
				new System.Lazy<FieldAccessor<VarunaGlobalShake, Network_Water>>(() => FieldAccessor<VarunaGlobalShake, Network_Water>.Create("networkWater"));
		private static readonly System.Lazy<FieldAccessor<VarunaGlobalShake, Network_Player>> _localPlayer =
				new System.Lazy<FieldAccessor<VarunaGlobalShake, Network_Player>>(() => FieldAccessor<VarunaGlobalShake, Network_Player>.Create("localPlayer"));
		private static readonly System.Lazy<FieldAccessor<VarunaGlobalShake, Quest>> _gateEnteredQuest =
				new System.Lazy<FieldAccessor<VarunaGlobalShake, Quest>>(() => FieldAccessor<VarunaGlobalShake, Quest>.Create("gateEnteredQuest"));
		private static readonly System.Lazy<FieldAccessor<VarunaGlobalShake, float>> _lastPlayedTime =
				new System.Lazy<FieldAccessor<VarunaGlobalShake, float>>(() => FieldAccessor<VarunaGlobalShake, float>.Create("lastPlayedTime"));
		private static readonly System.Lazy<FieldAccessor<VarunaGlobalShake, Quest>> _bossQuest =
				new System.Lazy<FieldAccessor<VarunaGlobalShake, Quest>>(() => FieldAccessor<VarunaGlobalShake, Quest>.Create("bossQuest"));

		public static SO_CameraShaker GetShakeSettings(this VarunaGlobalShake __self) => _shakeSettings.Value.GetValue(__self);
		public static void SetShakeSettings(this VarunaGlobalShake __self, SO_CameraShaker value) => _shakeSettings.Value.SetValue(__self, value);
		public static AreaZone GetAreaZone(this VarunaGlobalShake __self) => _areaZone.Value.GetValue(__self);
		public static void SetAreaZone(this VarunaGlobalShake __self, AreaZone value) => _areaZone.Value.SetValue(__self, value);
		public static float GetShakeInterval(this VarunaGlobalShake __self) => _shakeInterval.Value.GetValue(__self);
		public static void SetShakeInterval(this VarunaGlobalShake __self, float value) => _shakeInterval.Value.SetValue(__self, value);
		public static FMODUnity.StudioEventEmitter GetEmitter_rumble(this VarunaGlobalShake __self) => _emitter_rumble.Value.GetValue(__self);
		public static void SetEmitter_rumble(this VarunaGlobalShake __self, FMODUnity.StudioEventEmitter value) => _emitter_rumble.Value.SetValue(__self, value);
		public static ScreenEffectManager GetScreenEffectManager(this VarunaGlobalShake __self) => _screenEffectManager.Value.GetValue(__self);
		public static void SetScreenEffectManager(this VarunaGlobalShake __self, ScreenEffectManager value) => _screenEffectManager.Value.SetValue(__self, value);
		public static Network_Water GetNetworkWater(this VarunaGlobalShake __self) => _networkWater.Value.GetValue(__self);
		public static void SetNetworkWater(this VarunaGlobalShake __self, Network_Water value) => _networkWater.Value.SetValue(__self, value);
		public static Network_Player GetLocalPlayer(this VarunaGlobalShake __self) => _localPlayer.Value.GetValue(__self);
		public static void SetLocalPlayer(this VarunaGlobalShake __self, Network_Player value) => _localPlayer.Value.SetValue(__self, value);
		public static Quest GetGateEnteredQuest(this VarunaGlobalShake __self) => _gateEnteredQuest.Value.GetValue(__self);
		public static void SetGateEnteredQuest(this VarunaGlobalShake __self, Quest value) => _gateEnteredQuest.Value.SetValue(__self, value);
		public static float GetLastPlayedTime(this VarunaGlobalShake __self) => _lastPlayedTime.Value.GetValue(__self);
		public static void SetLastPlayedTime(this VarunaGlobalShake __self, float value) => _lastPlayedTime.Value.SetValue(__self, value);
		public static Quest GetBossQuest(this VarunaGlobalShake __self) => _bossQuest.Value.GetValue(__self);
		public static void SetBossQuest(this VarunaGlobalShake __self, Quest value) => _bossQuest.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<VarunaGlobalShake>> _Awake757602046 =
				new System.Lazy<MethodAccessor<VarunaGlobalShake>>(() => MethodAccessor<VarunaGlobalShake>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<VarunaGlobalShake>> _Update757602046 =
				new System.Lazy<MethodAccessor<VarunaGlobalShake>>(() => MethodAccessor<VarunaGlobalShake>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<VarunaGlobalShake>> _Shake757602046 =
				new System.Lazy<MethodAccessor<VarunaGlobalShake>>(() => MethodAccessor<VarunaGlobalShake>.Create("Shake"));

		public static void Awake(this VarunaGlobalShake __self) => _Awake757602046.Value.Invoke(__self);
		public static void Update(this VarunaGlobalShake __self) => _Update757602046.Value.Invoke(__self);
		public static void Shake(this VarunaGlobalShake __self) => _Shake757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_VasagatanBomb
	{

		private static readonly System.Lazy<FieldAccessor<VasagatanBomb, UnityEngine.Vector3>> _explosionOffset =
				new System.Lazy<FieldAccessor<VasagatanBomb, UnityEngine.Vector3>>(() => FieldAccessor<VasagatanBomb, UnityEngine.Vector3>.Create("explosionOffset"));
		private static readonly System.Lazy<FieldAccessor<VasagatanBomb, int>> _explosionDamage =
				new System.Lazy<FieldAccessor<VasagatanBomb, int>>(() => FieldAccessor<VasagatanBomb, int>.Create("explosionDamage"));
		private static readonly System.Lazy<FieldAccessor<VasagatanBomb, float>> _explosionRadius =
				new System.Lazy<FieldAccessor<VasagatanBomb, float>>(() => FieldAccessor<VasagatanBomb, float>.Create("explosionRadius"));
		private static readonly System.Lazy<FieldAccessor<VasagatanBomb, float>> _cameraShakeRadius =
				new System.Lazy<FieldAccessor<VasagatanBomb, float>>(() => FieldAccessor<VasagatanBomb, float>.Create("cameraShakeRadius"));
		private static readonly System.Lazy<FieldAccessor<VasagatanBomb, SO_CameraShaker>> _cameraShakeSettings =
				new System.Lazy<FieldAccessor<VasagatanBomb, SO_CameraShaker>>(() => FieldAccessor<VasagatanBomb, SO_CameraShaker>.Create("cameraShakeSettings"));
		private static readonly System.Lazy<FieldAccessor<VasagatanBomb, ScreenEffectManager>> _screenEffectManager =
				new System.Lazy<FieldAccessor<VasagatanBomb, ScreenEffectManager>>(() => FieldAccessor<VasagatanBomb, ScreenEffectManager>.Create("screenEffectManager"));

		public static UnityEngine.Vector3 GetExplosionOffset(this VasagatanBomb __self) => _explosionOffset.Value.GetValue(__self);
		public static void SetExplosionOffset(this VasagatanBomb __self, UnityEngine.Vector3 value) => _explosionOffset.Value.SetValue(__self, value);
		public static int GetExplosionDamage(this VasagatanBomb __self) => _explosionDamage.Value.GetValue(__self);
		public static void SetExplosionDamage(this VasagatanBomb __self, int value) => _explosionDamage.Value.SetValue(__self, value);
		public static float GetExplosionRadius(this VasagatanBomb __self) => _explosionRadius.Value.GetValue(__self);
		public static void SetExplosionRadius(this VasagatanBomb __self, float value) => _explosionRadius.Value.SetValue(__self, value);
		public static float GetCameraShakeRadius(this VasagatanBomb __self) => _cameraShakeRadius.Value.GetValue(__self);
		public static void SetCameraShakeRadius(this VasagatanBomb __self, float value) => _cameraShakeRadius.Value.SetValue(__self, value);
		public static SO_CameraShaker GetCameraShakeSettings(this VasagatanBomb __self) => _cameraShakeSettings.Value.GetValue(__self);
		public static void SetCameraShakeSettings(this VasagatanBomb __self, SO_CameraShaker value) => _cameraShakeSettings.Value.SetValue(__self, value);
		public static ScreenEffectManager GetScreenEffectManager(this VasagatanBomb __self) => _screenEffectManager.Value.GetValue(__self);
		public static void SetScreenEffectManager(this VasagatanBomb __self, ScreenEffectManager value) => _screenEffectManager.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<VasagatanBomb>> _Awake757602046 =
				new System.Lazy<MethodAccessor<VasagatanBomb>>(() => MethodAccessor<VasagatanBomb>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<VasagatanBomb>> _OnDrawGizmosSelected757602046 =
				new System.Lazy<MethodAccessor<VasagatanBomb>>(() => MethodAccessor<VasagatanBomb>.Create("OnDrawGizmosSelected"));

		public static void Awake(this VasagatanBomb __self) => _Awake757602046.Value.Invoke(__self);
		public static void OnDrawGizmosSelected(this VasagatanBomb __self) => _OnDrawGizmosSelected757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AI_Dialogue
	{

		private static readonly System.Lazy<FieldAccessor<AI_Dialogue, TriggerBoxEnterAction>> _enterZone =
				new System.Lazy<FieldAccessor<AI_Dialogue, TriggerBoxEnterAction>>(() => FieldAccessor<AI_Dialogue, TriggerBoxEnterAction>.Create("enterZone"));
		private static readonly System.Lazy<FieldAccessor<AI_Dialogue, SO_AI_DialogueSettings>> _ai_dialogueSettings =
				new System.Lazy<FieldAccessor<AI_Dialogue, SO_AI_DialogueSettings>>(() => FieldAccessor<AI_Dialogue, SO_AI_DialogueSettings>.Create("ai_dialogueSettings"));

		public static TriggerBoxEnterAction GetEnterZone(this AI_Dialogue __self) => _enterZone.Value.GetValue(__self);
		public static void SetEnterZone(this AI_Dialogue __self, TriggerBoxEnterAction value) => _enterZone.Value.SetValue(__self, value);
		public static SO_AI_DialogueSettings GetAi_dialogueSettings(this AI_Dialogue __self) => _ai_dialogueSettings.Value.GetValue(__self);
		public static void SetAi_dialogueSettings(this AI_Dialogue __self, SO_AI_DialogueSettings value) => _ai_dialogueSettings.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AI_Dialogue>> _PlayerEnteredArea3468606003 =
				new System.Lazy<MethodAccessor<AI_Dialogue>>(() => MethodAccessor<AI_Dialogue>.Create("PlayerEnteredArea", typeof(UnityEngine.Collider)));

		public static void PlayerEnteredArea(this AI_Dialogue __self, UnityEngine.Collider other) => _PlayerEnteredArea3468606003.Value.Invoke(__self, other);

	}

	public static class PrivateAccessor_SO_VoiceData_Instance_VoiceData
	{

		private static readonly System.Lazy<FieldAccessor<SO_VoiceData.Instance_VoiceData, Dialogue>> __attachedDialogue =
				new System.Lazy<FieldAccessor<SO_VoiceData.Instance_VoiceData, Dialogue>>(() => FieldAccessor<SO_VoiceData.Instance_VoiceData, Dialogue>.Create("_attachedDialogue"));
		private static readonly System.Lazy<FieldAccessor<SO_VoiceData.Instance_VoiceData, UnityEngine.Coroutine>> _coroutine_playdialouge =
				new System.Lazy<FieldAccessor<SO_VoiceData.Instance_VoiceData, UnityEngine.Coroutine>>(() => FieldAccessor<SO_VoiceData.Instance_VoiceData, UnityEngine.Coroutine>.Create("coroutine_playdialouge"));
		private static readonly System.Lazy<FieldAccessor<SO_VoiceData.Instance_VoiceData, FMOD.Studio.EventInstance>> _eventInstance =
				new System.Lazy<FieldAccessor<SO_VoiceData.Instance_VoiceData, FMOD.Studio.EventInstance>>(() => FieldAccessor<SO_VoiceData.Instance_VoiceData, FMOD.Studio.EventInstance>.Create("eventInstance"));

		public static Dialogue Get_attachedDialogue(this SO_VoiceData.Instance_VoiceData __self) => __attachedDialogue.Value.GetValue(__self);
		public static void Set_attachedDialogue(this SO_VoiceData.Instance_VoiceData __self, Dialogue value) => __attachedDialogue.Value.SetValue(__self, value);
		public static UnityEngine.Coroutine GetCoroutine_playdialouge(this SO_VoiceData.Instance_VoiceData __self) => _coroutine_playdialouge.Value.GetValue(__self);
		public static void SetCoroutine_playdialouge(this SO_VoiceData.Instance_VoiceData __self, UnityEngine.Coroutine value) => _coroutine_playdialouge.Value.SetValue(__self, value);
		public static FMOD.Studio.EventInstance GetEventInstance(this SO_VoiceData.Instance_VoiceData __self) => _eventInstance.Value.GetValue(__self);
		public static void SetEventInstance(this SO_VoiceData.Instance_VoiceData __self, FMOD.Studio.EventInstance value) => _eventInstance.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<SO_VoiceData.Instance_VoiceData>> _PlayIndex3486186818 =
				new System.Lazy<MethodAccessor<SO_VoiceData.Instance_VoiceData>>(() => MethodAccessor<SO_VoiceData.Instance_VoiceData>.Create("PlayIndex", typeof(int)));
		private static readonly System.Lazy<MethodAccessor<SO_VoiceData.Instance_VoiceData>> _PlayDialogue3486186818 =
				new System.Lazy<MethodAccessor<SO_VoiceData.Instance_VoiceData>>(() => MethodAccessor<SO_VoiceData.Instance_VoiceData>.Create("PlayDialogue", typeof(int)));

		public static float PlayIndex(this SO_VoiceData.Instance_VoiceData __self, int index) => (float)_PlayIndex3486186818.Value.Invoke(__self, index);
		public static System.Collections.IEnumerator PlayDialogue(this SO_VoiceData.Instance_VoiceData __self, int voiceLineIndex) => (System.Collections.IEnumerator)_PlayDialogue3486186818.Value.Invoke(__self, voiceLineIndex);

	}

	public static class PrivateAccessor_SO_VoiceLine
	{

		private static readonly System.Lazy<FieldAccessor<SO_VoiceLine, float>> _endDelay =
				new System.Lazy<FieldAccessor<SO_VoiceLine, float>>(() => FieldAccessor<SO_VoiceLine, float>.Create("endDelay"));
		private static readonly System.Lazy<FieldAccessor<SO_VoiceLine, float>> _duration =
				new System.Lazy<FieldAccessor<SO_VoiceLine, float>>(() => FieldAccessor<SO_VoiceLine, float>.Create("duration"));

		public static float GetEndDelay(this SO_VoiceLine __self) => _endDelay.Value.GetValue(__self);
		public static void SetEndDelay(this SO_VoiceLine __self, float value) => _endDelay.Value.SetValue(__self, value);
		public static float GetDuration(this SO_VoiceLine __self) => _duration.Value.GetValue(__self);
		public static void SetDuration(this SO_VoiceLine __self, float value) => _duration.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<SO_VoiceLine>> _SetDurationFromClipLength757602046 =
				new System.Lazy<MethodAccessor<SO_VoiceLine>>(() => MethodAccessor<SO_VoiceLine>.Create("SetDurationFromClipLength"));
		private static readonly System.Lazy<MethodAccessor<SO_VoiceLine>> _SetDurationFromSubtitleLength757602046 =
				new System.Lazy<MethodAccessor<SO_VoiceLine>>(() => MethodAccessor<SO_VoiceLine>.Create("SetDurationFromSubtitleLength"));

		public static void SetDurationFromClipLength(this SO_VoiceLine __self) => _SetDurationFromClipLength757602046.Value.Invoke(__self);
		public static void SetDurationFromSubtitleLength(this SO_VoiceLine __self) => _SetDurationFromSubtitleLength757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Dialogue
	{

		private static readonly System.Lazy<FieldAccessor<Dialogue, MonoBehaviour_ID_Network>> _networkBehaviourID =
				new System.Lazy<FieldAccessor<Dialogue, MonoBehaviour_ID_Network>>(() => FieldAccessor<Dialogue, MonoBehaviour_ID_Network>.Create("networkBehaviourID"));
		private static readonly System.Lazy<FieldAccessor<Dialogue, bool>> _playRandomVoiceData =
				new System.Lazy<FieldAccessor<Dialogue, bool>>(() => FieldAccessor<Dialogue, bool>.Create("playRandomVoiceData"));
		private static readonly System.Lazy<FieldAccessor<Dialogue, bool>> _lookAtPlayerWhenTalking =
				new System.Lazy<FieldAccessor<Dialogue, bool>>(() => FieldAccessor<Dialogue, bool>.Create("lookAtPlayerWhenTalking"));
		private static readonly System.Lazy<FieldAccessor<Dialogue, UnityEngine.Transform>> _rotateParent =
				new System.Lazy<FieldAccessor<Dialogue, UnityEngine.Transform>>(() => FieldAccessor<Dialogue, UnityEngine.Transform>.Create("rotateParent"));
		private static readonly System.Lazy<FieldAccessor<Dialogue, float>> _rotateSpeed =
				new System.Lazy<FieldAccessor<Dialogue, float>>(() => FieldAccessor<Dialogue, float>.Create("rotateSpeed"));
		private static readonly System.Lazy<FieldAccessor<Dialogue, float>> _subtitleDistance =
				new System.Lazy<FieldAccessor<Dialogue, float>>(() => FieldAccessor<Dialogue, float>.Create("subtitleDistance"));
		private static readonly System.Lazy<FieldAccessor<Dialogue, System.Collections.Generic.List<SO_VoiceData.Instance_VoiceData>>> _voiceDataInstances =
				new System.Lazy<FieldAccessor<Dialogue, System.Collections.Generic.List<SO_VoiceData.Instance_VoiceData>>>(() => FieldAccessor<Dialogue, System.Collections.Generic.List<SO_VoiceData.Instance_VoiceData>>.Create("voiceDataInstances"));
		private static readonly System.Lazy<FieldAccessor<Dialogue, DisplayTextManager>> _displayTextManager =
				new System.Lazy<FieldAccessor<Dialogue, DisplayTextManager>>(() => FieldAccessor<Dialogue, DisplayTextManager>.Create("displayTextManager"));
		private static readonly System.Lazy<FieldAccessor<Dialogue, int>> _nextPlayableDataIndex =
				new System.Lazy<FieldAccessor<Dialogue, int>>(() => FieldAccessor<Dialogue, int>.Create("nextPlayableDataIndex"));

		public static MonoBehaviour_ID_Network GetNetworkBehaviourID(this Dialogue __self) => _networkBehaviourID.Value.GetValue(__self);
		public static void SetNetworkBehaviourID(this Dialogue __self, MonoBehaviour_ID_Network value) => _networkBehaviourID.Value.SetValue(__self, value);
		public static bool GetPlayRandomVoiceData(this Dialogue __self) => _playRandomVoiceData.Value.GetValue(__self);
		public static void SetPlayRandomVoiceData(this Dialogue __self, bool value) => _playRandomVoiceData.Value.SetValue(__self, value);
		public static bool GetLookAtPlayerWhenTalking(this Dialogue __self) => _lookAtPlayerWhenTalking.Value.GetValue(__self);
		public static void SetLookAtPlayerWhenTalking(this Dialogue __self, bool value) => _lookAtPlayerWhenTalking.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetRotateParent(this Dialogue __self) => _rotateParent.Value.GetValue(__self);
		public static void SetRotateParent(this Dialogue __self, UnityEngine.Transform value) => _rotateParent.Value.SetValue(__self, value);
		public static float GetRotateSpeed(this Dialogue __self) => _rotateSpeed.Value.GetValue(__self);
		public static void SetRotateSpeed(this Dialogue __self, float value) => _rotateSpeed.Value.SetValue(__self, value);
		public static float GetSubtitleDistance(this Dialogue __self) => _subtitleDistance.Value.GetValue(__self);
		public static void SetSubtitleDistance(this Dialogue __self, float value) => _subtitleDistance.Value.SetValue(__self, value);
		public static System.Collections.Generic.List<SO_VoiceData.Instance_VoiceData> GetVoiceDataInstances(this Dialogue __self) => _voiceDataInstances.Value.GetValue(__self);
		public static void SetVoiceDataInstances(this Dialogue __self, System.Collections.Generic.List<SO_VoiceData.Instance_VoiceData> value) => _voiceDataInstances.Value.SetValue(__self, value);
		public static DisplayTextManager GetDisplayTextManager(this Dialogue __self) => _displayTextManager.Value.GetValue(__self);
		public static void SetDisplayTextManager(this Dialogue __self, DisplayTextManager value) => _displayTextManager.Value.SetValue(__self, value);
		public static int GetNextPlayableDataIndex(this Dialogue __self) => _nextPlayableDataIndex.Value.GetValue(__self);
		public static void SetNextPlayableDataIndex(this Dialogue __self, int value) => _nextPlayableDataIndex.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Dialogue>> _Odin_PlayVoiceData757602046 =
				new System.Lazy<MethodAccessor<Dialogue>>(() => MethodAccessor<Dialogue>.Create("Odin_PlayVoiceData"));
		private static readonly System.Lazy<MethodAccessor<Dialogue>> _HandleTalkingAnimator757602046 =
				new System.Lazy<MethodAccessor<Dialogue>>(() => MethodAccessor<Dialogue>.Create("HandleTalkingAnimator"));
		private static readonly System.Lazy<MethodAccessor<Dialogue>> _CreateInstanceFromVoiceData3434510113 =
				new System.Lazy<MethodAccessor<Dialogue>>(() => MethodAccessor<Dialogue>.Create("CreateInstanceFromVoiceData", typeof(SO_VoiceData)));
		private static readonly System.Lazy<MethodAccessor<Dialogue>> _GetInstanceFromVoiceData3434510113 =
				new System.Lazy<MethodAccessor<Dialogue>>(() => MethodAccessor<Dialogue>.Create("GetInstanceFromVoiceData", typeof(SO_VoiceData)));
		private static readonly System.Lazy<MethodAccessor<Dialogue>> _GetDataFromIndex3486186818 =
				new System.Lazy<MethodAccessor<Dialogue>>(() => MethodAccessor<Dialogue>.Create("GetDataFromIndex", typeof(int)));
		private static readonly System.Lazy<MethodAccessor<Dialogue>> _GetIndexFromData3434510113 =
				new System.Lazy<MethodAccessor<Dialogue>>(() => MethodAccessor<Dialogue>.Create("GetIndexFromData", typeof(SO_VoiceData)));

		public static void Odin_PlayVoiceData(this Dialogue __self) => _Odin_PlayVoiceData757602046.Value.Invoke(__self);
		public static void HandleTalkingAnimator(this Dialogue __self) => _HandleTalkingAnimator757602046.Value.Invoke(__self);
		public static SO_VoiceData.Instance_VoiceData CreateInstanceFromVoiceData(this Dialogue __self, SO_VoiceData vD) => (SO_VoiceData.Instance_VoiceData)_CreateInstanceFromVoiceData3434510113.Value.Invoke(__self, vD);
		public static SO_VoiceData.Instance_VoiceData GetInstanceFromVoiceData(this Dialogue __self, SO_VoiceData vD) => (SO_VoiceData.Instance_VoiceData)_GetInstanceFromVoiceData3434510113.Value.Invoke(__self, vD);
		public static SO_VoiceData GetDataFromIndex(this Dialogue __self, int index) => (SO_VoiceData)_GetDataFromIndex3486186818.Value.Invoke(__self, index);
		public static int GetIndexFromData(this Dialogue __self, SO_VoiceData data) => (int)_GetIndexFromData3434510113.Value.Invoke(__self, data);

	}

	public static class Private_Dialogue
	{

		private static readonly System.Lazy<StaticFieldAccessor<Network_Player>> _localPlayer =
				new System.Lazy<StaticFieldAccessor<Network_Player>>(() => StaticFieldAccessor<Network_Player>.Create(typeof(Dialogue), "localPlayer"));

		public static Network_Player GetLocalPlayer() => _localPlayer.Value.GetValue();
		public static void SetLocalPlayer(Network_Player value) => _localPlayer.Value.SetValue(value);

	}

	public static class PrivateAccessor_DialogueComponent
	{

		private static readonly System.Lazy<FieldAccessor<DialogueComponent, Dialogue>> _dialogue =
				new System.Lazy<FieldAccessor<DialogueComponent, Dialogue>>(() => FieldAccessor<DialogueComponent, Dialogue>.Create("dialogue"));

		public static Dialogue GetDialogue(this DialogueComponent __self) => _dialogue.Value.GetValue(__self);
		public static void SetDialogue(this DialogueComponent __self, Dialogue value) => _dialogue.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<DialogueComponent>> _Start757602046 =
				new System.Lazy<MethodAccessor<DialogueComponent>>(() => MethodAccessor<DialogueComponent>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<DialogueComponent>> _OnVoiceDataPlayed3485005270 =
				new System.Lazy<MethodAccessor<DialogueComponent>>(() => MethodAccessor<DialogueComponent>.Create("OnVoiceDataPlayed", typeof(SO_VoiceData.Instance_VoiceData)));

		public static void Start(this DialogueComponent __self) => _Start757602046.Value.Invoke(__self);
		public static void OnVoiceDataPlayed(this DialogueComponent __self, SO_VoiceData.Instance_VoiceData voiceDataInstance) => _OnVoiceDataPlayed3485005270.Value.Invoke(__self, voiceDataInstance);

	}

	public static class PrivateAccessor_DialogueComponent_UnlockCharacter
	{

		private static readonly System.Lazy<FieldAccessor<DialogueComponent_UnlockCharacter, SO_Character>> _characterToUnlock =
				new System.Lazy<FieldAccessor<DialogueComponent_UnlockCharacter, SO_Character>>(() => FieldAccessor<DialogueComponent_UnlockCharacter, SO_Character>.Create("characterToUnlock"));

		public static SO_Character GetCharacterToUnlock(this DialogueComponent_UnlockCharacter __self) => _characterToUnlock.Value.GetValue(__self);
		public static void SetCharacterToUnlock(this DialogueComponent_UnlockCharacter __self, SO_Character value) => _characterToUnlock.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<DialogueComponent_UnlockCharacter>> _OnVoiceDataPlayed3485005270 =
				new System.Lazy<MethodAccessor<DialogueComponent_UnlockCharacter>>(() => MethodAccessor<DialogueComponent_UnlockCharacter>.Create("OnVoiceDataPlayed", typeof(SO_VoiceData.Instance_VoiceData)));

		public static void OnVoiceDataPlayed(this DialogueComponent_UnlockCharacter __self, SO_VoiceData.Instance_VoiceData voiceDataInstance) => _OnVoiceDataPlayed3485005270.Value.Invoke(__self, voiceDataInstance);

	}

	public static class PrivateAccessor_DialogueHeadtrackingIKConnection
	{

		private static readonly System.Lazy<MethodAccessor<DialogueHeadtrackingIKConnection>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<DialogueHeadtrackingIKConnection>>(() => MethodAccessor<DialogueHeadtrackingIKConnection>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<DialogueHeadtrackingIKConnection>> _Start757602046 =
				new System.Lazy<MethodAccessor<DialogueHeadtrackingIKConnection>>(() => MethodAccessor<DialogueHeadtrackingIKConnection>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<DialogueHeadtrackingIKConnection>> _StartIK3475062971 =
				new System.Lazy<MethodAccessor<DialogueHeadtrackingIKConnection>>(() => MethodAccessor<DialogueHeadtrackingIKConnection>.Create("StartIK", typeof(SO_VoiceLine)));
		private static readonly System.Lazy<MethodAccessor<DialogueHeadtrackingIKConnection>> _StopIK3485005270 =
				new System.Lazy<MethodAccessor<DialogueHeadtrackingIKConnection>>(() => MethodAccessor<DialogueHeadtrackingIKConnection>.Create("StopIK", typeof(SO_VoiceData.Instance_VoiceData)));

		public static void OnDestroy(this DialogueHeadtrackingIKConnection __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void Start(this DialogueHeadtrackingIKConnection __self) => _Start757602046.Value.Invoke(__self);
		public static void StartIK(this DialogueHeadtrackingIKConnection __self, SO_VoiceLine vl) => _StartIK3475062971.Value.Invoke(__self, vl);
		public static void StopIK(this DialogueHeadtrackingIKConnection __self, SO_VoiceData.Instance_VoiceData vdInstance) => _StopIK3485005270.Value.Invoke(__self, vdInstance);

	}

	public static class PrivateAccessor_DialogueMessageForwarder
	{

		private static readonly System.Lazy<FieldAccessor<DialogueMessageForwarder, Dialogue>> _dialogue =
				new System.Lazy<FieldAccessor<DialogueMessageForwarder, Dialogue>>(() => FieldAccessor<DialogueMessageForwarder, Dialogue>.Create("dialogue"));
		private static readonly System.Lazy<FieldAccessor<DialogueMessageForwarder, Raft_Network>> _network =
				new System.Lazy<FieldAccessor<DialogueMessageForwarder, Raft_Network>>(() => FieldAccessor<DialogueMessageForwarder, Raft_Network>.Create("network"));

		public static Dialogue GetDialogue(this DialogueMessageForwarder __self) => _dialogue.Value.GetValue(__self);
		public static void SetDialogue(this DialogueMessageForwarder __self, Dialogue value) => _dialogue.Value.SetValue(__self, value);
		public static Raft_Network GetNetwork(this DialogueMessageForwarder __self) => _network.Value.GetValue(__self);
		public static void SetNetwork(this DialogueMessageForwarder __self, Raft_Network value) => _network.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_Dialogue_UI
	{

		private static readonly System.Lazy<FieldAccessor<Dialogue_UI, TMPro.TextMeshProUGUI>> _subtitleText =
				new System.Lazy<FieldAccessor<Dialogue_UI, TMPro.TextMeshProUGUI>>(() => FieldAccessor<Dialogue_UI, TMPro.TextMeshProUGUI>.Create("subtitleText"));
		private static readonly System.Lazy<FieldAccessor<Dialogue_UI, DisplayText>> _displayText =
				new System.Lazy<FieldAccessor<Dialogue_UI, DisplayText>>(() => FieldAccessor<Dialogue_UI, DisplayText>.Create("displayText"));
		private static readonly System.Lazy<FieldAccessor<Dialogue_UI, UnityEngine.GameObject>> _backgroundImage =
				new System.Lazy<FieldAccessor<Dialogue_UI, UnityEngine.GameObject>>(() => FieldAccessor<Dialogue_UI, UnityEngine.GameObject>.Create("backgroundImage"));

		public static TMPro.TextMeshProUGUI GetSubtitleText(this Dialogue_UI __self) => _subtitleText.Value.GetValue(__self);
		public static void SetSubtitleText(this Dialogue_UI __self, TMPro.TextMeshProUGUI value) => _subtitleText.Value.SetValue(__self, value);
		public static DisplayText GetDisplayText(this Dialogue_UI __self) => _displayText.Value.GetValue(__self);
		public static void SetDisplayText(this Dialogue_UI __self, DisplayText value) => _displayText.Value.SetValue(__self, value);
		public static UnityEngine.GameObject GetBackgroundImage(this Dialogue_UI __self) => _backgroundImage.Value.GetValue(__self);
		public static void SetBackgroundImage(this Dialogue_UI __self, UnityEngine.GameObject value) => _backgroundImage.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Dialogue_UI>> _Awake757602046 =
				new System.Lazy<MethodAccessor<Dialogue_UI>>(() => MethodAccessor<Dialogue_UI>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<Dialogue_UI>> _Update757602046 =
				new System.Lazy<MethodAccessor<Dialogue_UI>>(() => MethodAccessor<Dialogue_UI>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<Dialogue_UI>> _UpdateSubtitles757602046 =
				new System.Lazy<MethodAccessor<Dialogue_UI>>(() => MethodAccessor<Dialogue_UI>.Create("UpdateSubtitles"));
		private static readonly System.Lazy<MethodAccessor<Dialogue_UI>> _SetUIEnable3450040886 =
				new System.Lazy<MethodAccessor<Dialogue_UI>>(() => MethodAccessor<Dialogue_UI>.Create("SetUIEnable", typeof(bool)));
		private static readonly System.Lazy<MethodAccessor<Dialogue_UI>> _SetDialogueText3485005270 =
				new System.Lazy<MethodAccessor<Dialogue_UI>>(() => MethodAccessor<Dialogue_UI>.Create("SetDialogueText", typeof(SO_VoiceData.Instance_VoiceData)));

		public static void Awake(this Dialogue_UI __self) => _Awake757602046.Value.Invoke(__self);
		public static void Update(this Dialogue_UI __self) => _Update757602046.Value.Invoke(__self);
		public static void UpdateSubtitles(this Dialogue_UI __self) => _UpdateSubtitles757602046.Value.Invoke(__self);
		public static void SetUIEnable(this Dialogue_UI __self, bool value) => _SetUIEnable3450040886.Value.Invoke(__self, value);
		public static void SetDialogueText(this Dialogue_UI __self, SO_VoiceData.Instance_VoiceData voiceDataInstance) => _SetDialogueText3485005270.Value.Invoke(__self, voiceDataInstance);

	}

	public static class PrivateAccessor_LipSync
	{

		private static readonly System.Lazy<FieldAccessor<LipSync, UnityEngine.SkinnedMeshRenderer>> _skinnedMeshRenderer =
				new System.Lazy<FieldAccessor<LipSync, UnityEngine.SkinnedMeshRenderer>>(() => FieldAccessor<LipSync, UnityEngine.SkinnedMeshRenderer>.Create("skinnedMeshRenderer"));
		private static readonly System.Lazy<FieldAccessor<LipSync, BlendShapeForm>> _mouthForm =
				new System.Lazy<FieldAccessor<LipSync, BlendShapeForm>>(() => FieldAccessor<LipSync, BlendShapeForm>.Create("mouthForm"));
		private static readonly System.Lazy<FieldAccessor<LipSync, BlendShapeForm>> _eyebrowForm =
				new System.Lazy<FieldAccessor<LipSync, BlendShapeForm>>(() => FieldAccessor<LipSync, BlendShapeForm>.Create("eyebrowForm"));
		private static readonly System.Lazy<FieldAccessor<LipSync, UnityEngine.Coroutine>> _sync =
				new System.Lazy<FieldAccessor<LipSync, UnityEngine.Coroutine>>(() => FieldAccessor<LipSync, UnityEngine.Coroutine>.Create("sync"));
		private static readonly System.Lazy<FieldAccessor<LipSync, float>> _targetVolume =
				new System.Lazy<FieldAccessor<LipSync, float>>(() => FieldAccessor<LipSync, float>.Create("targetVolume"));
		private static readonly System.Lazy<FieldAccessor<LipSync, float>> _volume =
				new System.Lazy<FieldAccessor<LipSync, float>>(() => FieldAccessor<LipSync, float>.Create("volume"));
		private static readonly System.Lazy<FieldAccessor<LipSync, float>> _volumeLerpSpeed =
				new System.Lazy<FieldAccessor<LipSync, float>>(() => FieldAccessor<LipSync, float>.Create("volumeLerpSpeed"));

		public static UnityEngine.SkinnedMeshRenderer GetSkinnedMeshRenderer(this LipSync __self) => _skinnedMeshRenderer.Value.GetValue(__self);
		public static void SetSkinnedMeshRenderer(this LipSync __self, UnityEngine.SkinnedMeshRenderer value) => _skinnedMeshRenderer.Value.SetValue(__self, value);
		public static BlendShapeForm GetMouthForm(this LipSync __self) => _mouthForm.Value.GetValue(__self);
		public static void SetMouthForm(this LipSync __self, BlendShapeForm value) => _mouthForm.Value.SetValue(__self, value);
		public static BlendShapeForm GetEyebrowForm(this LipSync __self) => _eyebrowForm.Value.GetValue(__self);
		public static void SetEyebrowForm(this LipSync __self, BlendShapeForm value) => _eyebrowForm.Value.SetValue(__self, value);
		public static UnityEngine.Coroutine GetSync(this LipSync __self) => _sync.Value.GetValue(__self);
		public static void SetSync(this LipSync __self, UnityEngine.Coroutine value) => _sync.Value.SetValue(__self, value);
		public static float GetTargetVolume(this LipSync __self) => _targetVolume.Value.GetValue(__self);
		public static void SetTargetVolume(this LipSync __self, float value) => _targetVolume.Value.SetValue(__self, value);
		public static float GetVolume(this LipSync __self) => _volume.Value.GetValue(__self);
		public static void SetVolume(this LipSync __self, float value) => _volume.Value.SetValue(__self, value);
		public static float GetVolumeLerpSpeed(this LipSync __self) => _volumeLerpSpeed.Value.GetValue(__self);
		public static void SetVolumeLerpSpeed(this LipSync __self, float value) => _volumeLerpSpeed.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<LipSync>> _StartSync3475062971 =
				new System.Lazy<MethodAccessor<LipSync>>(() => MethodAccessor<LipSync>.Create("StartSync", typeof(SO_VoiceLine)));
		private static readonly System.Lazy<MethodAccessor<LipSync>> _StopSync3485005270 =
				new System.Lazy<MethodAccessor<LipSync>>(() => MethodAccessor<LipSync>.Create("StopSync", typeof(SO_VoiceData.Instance_VoiceData)));
		private static readonly System.Lazy<MethodAccessor<LipSync>> _PlayAnimation3486905475 =
				new System.Lazy<MethodAccessor<LipSync>>(() => MethodAccessor<LipSync>.Create("PlayAnimation", typeof(float)));
		private static readonly System.Lazy<MethodAccessor<LipSync>> _PingPongBlendShapeRange3694661394 =
				new System.Lazy<MethodAccessor<LipSync>>(() => MethodAccessor<LipSync>.Create("PingPongBlendShapeRange", typeof(BlendShapeForm), typeof(float)));
		private static readonly System.Lazy<MethodAccessor<LipSync>> _PingPongBlendShape3547120100 =
				new System.Lazy<MethodAccessor<LipSync>>(() => MethodAccessor<LipSync>.Create("PingPongBlendShape", typeof(int), typeof(float), typeof(float)));

		public static void StartSync(this LipSync __self, SO_VoiceLine voiceLine) => _StartSync3475062971.Value.Invoke(__self, voiceLine);
		public static void StopSync(this LipSync __self, SO_VoiceData.Instance_VoiceData instance) => _StopSync3485005270.Value.Invoke(__self, instance);
		public static System.Collections.IEnumerator PlayAnimation(this LipSync __self, float time) => (System.Collections.IEnumerator)_PlayAnimation3486905475.Value.Invoke(__self, time);
		public static System.Collections.IEnumerator PingPongBlendShapeRange(this LipSync __self, BlendShapeForm form, float totalTime) => (System.Collections.IEnumerator)_PingPongBlendShapeRange3694661394.Value.Invoke(__self, form, totalTime);
		public static System.Collections.IEnumerator PingPongBlendShape(this LipSync __self, int blendIndex, float newValue, float totalTime) => (System.Collections.IEnumerator)_PingPongBlendShape3547120100.Value.Invoke(__self, blendIndex, newValue, totalTime);

	}

	public static class PrivateAccessor_DropItem
	{

		private static readonly System.Lazy<FieldAccessor<DropItem, UnityEngine.Collider>> _collider =
				new System.Lazy<FieldAccessor<DropItem, UnityEngine.Collider>>(() => FieldAccessor<DropItem, UnityEngine.Collider>.Create("collider"));
		private static readonly System.Lazy<FieldAccessor<DropItem, float>> _despawnTime =
				new System.Lazy<FieldAccessor<DropItem, float>>(() => FieldAccessor<DropItem, float>.Create("despawnTime"));

		public static UnityEngine.Collider GetCollider(this DropItem __self) => _collider.Value.GetValue(__self);
		public static void SetCollider(this DropItem __self, UnityEngine.Collider value) => _collider.Value.SetValue(__self, value);
		public static float GetDespawnTime(this DropItem __self) => _despawnTime.Value.GetValue(__self);
		public static void SetDespawnTime(this DropItem __self, float value) => _despawnTime.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<DropItem>> _Awake757602046 =
				new System.Lazy<MethodAccessor<DropItem>>(() => MethodAccessor<DropItem>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<DropItem>> _OnEnable757602046 =
				new System.Lazy<MethodAccessor<DropItem>>(() => MethodAccessor<DropItem>.Create("OnEnable"));
		private static readonly System.Lazy<MethodAccessor<DropItem>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<DropItem>>(() => MethodAccessor<DropItem>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<DropItem>> _OnCollisionEnter3430762572 =
				new System.Lazy<MethodAccessor<DropItem>>(() => MethodAccessor<DropItem>.Create("OnCollisionEnter", typeof(UnityEngine.Collision)));
		private static readonly System.Lazy<MethodAccessor<DropItem>> _OnWorldShift3429126434 =
				new System.Lazy<MethodAccessor<DropItem>>(() => MethodAccessor<DropItem>.Create("OnWorldShift", typeof(UnityEngine.Vector3)));
		private static readonly System.Lazy<MethodAccessor<DropItem>> _OnHitWater757602046 =
				new System.Lazy<MethodAccessor<DropItem>>(() => MethodAccessor<DropItem>.Create("OnHitWater"));

		public static void Awake(this DropItem __self) => _Awake757602046.Value.Invoke(__self);
		public static void OnEnable(this DropItem __self) => _OnEnable757602046.Value.Invoke(__self);
		public static void OnDestroy(this DropItem __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void OnCollisionEnter(this DropItem __self, UnityEngine.Collision collision) => _OnCollisionEnter3430762572.Value.Invoke(__self, collision);
		public static void OnWorldShift(this DropItem __self, UnityEngine.Vector3 shift) => _OnWorldShift3429126434.Value.Invoke(__self, shift);
		public static void OnHitWater(this DropItem __self) => _OnHitWater757602046.Value.Invoke(__self);

	}

	public static class Private_ColliderExtensions
	{

		private static readonly System.Lazy<StaticMethodAccessor> _RandomDouble757602046 =
				new System.Lazy<StaticMethodAccessor>(() => StaticMethodAccessor.Create(typeof(ColliderExtensions), "RandomDouble"));

		public static double RandomDouble() => (double)_RandomDouble757602046.Value.Invoke();

	}

	public static class PrivateAccessor_ExtrudeMesh
	{

		private static readonly System.Lazy<FieldAccessor<ExtrudeMesh, SO_ExtrudeMeshShape>> _shape =
				new System.Lazy<FieldAccessor<ExtrudeMesh, SO_ExtrudeMeshShape>>(() => FieldAccessor<ExtrudeMesh, SO_ExtrudeMeshShape>.Create("shape"));
		private static readonly System.Lazy<FieldAccessor<ExtrudeMesh, UnityEngine.MeshFilter>> _meshFilter =
				new System.Lazy<FieldAccessor<ExtrudeMesh, UnityEngine.MeshFilter>>(() => FieldAccessor<ExtrudeMesh, UnityEngine.MeshFilter>.Create("meshFilter"));
		private static readonly System.Lazy<FieldAccessor<ExtrudeMesh, bool>> _autoGenerate =
				new System.Lazy<FieldAccessor<ExtrudeMesh, bool>>(() => FieldAccessor<ExtrudeMesh, bool>.Create("autoGenerate"));
		private static readonly System.Lazy<FieldAccessor<ExtrudeMesh, float>> _ringCountPerMeter =
				new System.Lazy<FieldAccessor<ExtrudeMesh, float>>(() => FieldAccessor<ExtrudeMesh, float>.Create("ringCountPerMeter"));
		private static readonly System.Lazy<FieldAccessor<ExtrudeMesh, bool>> _drawGizmos =
				new System.Lazy<FieldAccessor<ExtrudeMesh, bool>>(() => FieldAccessor<ExtrudeMesh, bool>.Create("drawGizmos"));
		private static readonly System.Lazy<FieldAccessor<ExtrudeMesh, float>> _pathLength =
				new System.Lazy<FieldAccessor<ExtrudeMesh, float>>(() => FieldAccessor<ExtrudeMesh, float>.Create("pathLength"));
		private static readonly System.Lazy<FieldAccessor<ExtrudeMesh, int>> _ringCount =
				new System.Lazy<FieldAccessor<ExtrudeMesh, int>>(() => FieldAccessor<ExtrudeMesh, int>.Create("ringCount"));
		private static readonly System.Lazy<FieldAccessor<ExtrudeMesh, UnityEngine.Mesh>> _mesh =
				new System.Lazy<FieldAccessor<ExtrudeMesh, UnityEngine.Mesh>>(() => FieldAccessor<ExtrudeMesh, UnityEngine.Mesh>.Create("mesh"));

		public static SO_ExtrudeMeshShape GetShape(this ExtrudeMesh __self) => _shape.Value.GetValue(__self);
		public static void SetShape(this ExtrudeMesh __self, SO_ExtrudeMeshShape value) => _shape.Value.SetValue(__self, value);
		public static UnityEngine.MeshFilter GetMeshFilter(this ExtrudeMesh __self) => _meshFilter.Value.GetValue(__self);
		public static void SetMeshFilter(this ExtrudeMesh __self, UnityEngine.MeshFilter value) => _meshFilter.Value.SetValue(__self, value);
		public static bool GetAutoGenerate(this ExtrudeMesh __self) => _autoGenerate.Value.GetValue(__self);
		public static void SetAutoGenerate(this ExtrudeMesh __self, bool value) => _autoGenerate.Value.SetValue(__self, value);
		public static float GetRingCountPerMeter(this ExtrudeMesh __self) => _ringCountPerMeter.Value.GetValue(__self);
		public static void SetRingCountPerMeter(this ExtrudeMesh __self, float value) => _ringCountPerMeter.Value.SetValue(__self, value);
		public static bool GetDrawGizmos(this ExtrudeMesh __self) => _drawGizmos.Value.GetValue(__self);
		public static void SetDrawGizmos(this ExtrudeMesh __self, bool value) => _drawGizmos.Value.SetValue(__self, value);
		public static float GetPathLength(this ExtrudeMesh __self) => _pathLength.Value.GetValue(__self);
		public static void SetPathLength(this ExtrudeMesh __self, float value) => _pathLength.Value.SetValue(__self, value);
		public static int GetRingCount(this ExtrudeMesh __self) => _ringCount.Value.GetValue(__self);
		public static void SetRingCount(this ExtrudeMesh __self, int value) => _ringCount.Value.SetValue(__self, value);
		public static UnityEngine.Mesh GetMesh(this ExtrudeMesh __self) => _mesh.Value.GetValue(__self);
		public static void SetMesh(this ExtrudeMesh __self, UnityEngine.Mesh value) => _mesh.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<ExtrudeMesh>> _CanGenerate757602046 =
				new System.Lazy<MethodAccessor<ExtrudeMesh>>(() => MethodAccessor<ExtrudeMesh>.Create("CanGenerate"));
		private static readonly System.Lazy<MethodAccessor<ExtrudeMesh>> _SetPathLength757602046 =
				new System.Lazy<MethodAccessor<ExtrudeMesh>>(() => MethodAccessor<ExtrudeMesh>.Create("SetPathLength"));
		private static readonly System.Lazy<MethodAccessor<ExtrudeMesh>> _Generate757602046 =
				new System.Lazy<MethodAccessor<ExtrudeMesh>>(() => MethodAccessor<ExtrudeMesh>.Create("Generate"));
		private static readonly System.Lazy<MethodAccessor<ExtrudeMesh>> _ClearMesh757602046 =
				new System.Lazy<MethodAccessor<ExtrudeMesh>>(() => MethodAccessor<ExtrudeMesh>.Create("ClearMesh"));
		private static readonly System.Lazy<MethodAccessor<ExtrudeMesh>> _GenerateMesh757602046 =
				new System.Lazy<MethodAccessor<ExtrudeMesh>>(() => MethodAccessor<ExtrudeMesh>.Create("GenerateMesh"));
		private static readonly System.Lazy<MethodAccessor<ExtrudeMesh>> _CallOnGenerateMeshInterfaces757602046 =
				new System.Lazy<MethodAccessor<ExtrudeMesh>>(() => MethodAccessor<ExtrudeMesh>.Create("CallOnGenerateMeshInterfaces"));
		private static readonly System.Lazy<MethodAccessor<ExtrudeMesh>> _CallOnClearMeshInterfaces757602046 =
				new System.Lazy<MethodAccessor<ExtrudeMesh>>(() => MethodAccessor<ExtrudeMesh>.Create("CallOnClearMeshInterfaces"));

		public static bool CanGenerate(this ExtrudeMesh __self) => (bool)_CanGenerate757602046.Value.Invoke(__self);
		public static void SetPathLength(this ExtrudeMesh __self) => _SetPathLength757602046.Value.Invoke(__self);
		public static void Generate(this ExtrudeMesh __self) => _Generate757602046.Value.Invoke(__self);
		public static void ClearMesh(this ExtrudeMesh __self) => _ClearMesh757602046.Value.Invoke(__self);
		public static void GenerateMesh(this ExtrudeMesh __self) => _GenerateMesh757602046.Value.Invoke(__self);
		public static void CallOnGenerateMeshInterfaces(this ExtrudeMesh __self) => _CallOnGenerateMeshInterfaces757602046.Value.Invoke(__self);
		public static void CallOnClearMeshInterfaces(this ExtrudeMesh __self) => _CallOnClearMeshInterfaces757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_ExtrudeMeshComponent
	{

		private static readonly System.Lazy<FieldAccessor<ExtrudeMeshComponent, bool>> _attachToExtrudeMeshScript =
				new System.Lazy<FieldAccessor<ExtrudeMeshComponent, bool>>(() => FieldAccessor<ExtrudeMeshComponent, bool>.Create("attachToExtrudeMeshScript"));
		private static readonly System.Lazy<FieldAccessor<ExtrudeMeshComponent, ExtrudeMesh>> _extrudeMeshScript =
				new System.Lazy<FieldAccessor<ExtrudeMeshComponent, ExtrudeMesh>>(() => FieldAccessor<ExtrudeMeshComponent, ExtrudeMesh>.Create("extrudeMeshScript"));

		public static bool GetAttachToExtrudeMeshScript(this ExtrudeMeshComponent __self) => _attachToExtrudeMeshScript.Value.GetValue(__self);
		public static void SetAttachToExtrudeMeshScript(this ExtrudeMeshComponent __self, bool value) => _attachToExtrudeMeshScript.Value.SetValue(__self, value);
		public static ExtrudeMesh GetExtrudeMeshScript(this ExtrudeMeshComponent __self) => _extrudeMeshScript.Value.GetValue(__self);
		public static void SetExtrudeMeshScript(this ExtrudeMeshComponent __self, ExtrudeMesh value) => _extrudeMeshScript.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<ExtrudeMeshComponent>> _OnValidate757602046 =
				new System.Lazy<MethodAccessor<ExtrudeMeshComponent>>(() => MethodAccessor<ExtrudeMeshComponent>.Create("OnValidate"));
		private static readonly System.Lazy<MethodAccessor<ExtrudeMeshComponent>> _OnExtrudeMeshGenerate757602046 =
				new System.Lazy<MethodAccessor<ExtrudeMeshComponent>>(() => MethodAccessor<ExtrudeMeshComponent>.Create("OnExtrudeMeshGenerate"));
		private static readonly System.Lazy<MethodAccessor<ExtrudeMeshComponent>> _OnExtrudeMeshClear757602046 =
				new System.Lazy<MethodAccessor<ExtrudeMeshComponent>>(() => MethodAccessor<ExtrudeMeshComponent>.Create("OnExtrudeMeshClear"));

		public static void OnValidate(this ExtrudeMeshComponent __self) => _OnValidate757602046.Value.Invoke(__self);
		public static void OnExtrudeMeshGenerate(this ExtrudeMeshComponent __self) => _OnExtrudeMeshGenerate757602046.Value.Invoke(__self);
		public static void OnExtrudeMeshClear(this ExtrudeMeshComponent __self) => _OnExtrudeMeshClear757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_ExtrudeMeshComponent_Caps
	{

		private static readonly System.Lazy<FieldAccessor<ExtrudeMeshComponent_Caps, float>> _scale =
				new System.Lazy<FieldAccessor<ExtrudeMeshComponent_Caps, float>>(() => FieldAccessor<ExtrudeMeshComponent_Caps, float>.Create("scale"));
		private static readonly System.Lazy<FieldAccessor<ExtrudeMeshComponent_Caps, bool>> _inheritsShapeScale =
				new System.Lazy<FieldAccessor<ExtrudeMeshComponent_Caps, bool>>(() => FieldAccessor<ExtrudeMeshComponent_Caps, bool>.Create("inheritsShapeScale"));
		private static readonly System.Lazy<FieldAccessor<ExtrudeMeshComponent_Caps, UnityEngine.GameObject>> _startCapPrefab =
				new System.Lazy<FieldAccessor<ExtrudeMeshComponent_Caps, UnityEngine.GameObject>>(() => FieldAccessor<ExtrudeMeshComponent_Caps, UnityEngine.GameObject>.Create("startCapPrefab"));
		private static readonly System.Lazy<FieldAccessor<ExtrudeMeshComponent_Caps, bool>> _flipStartCap =
				new System.Lazy<FieldAccessor<ExtrudeMeshComponent_Caps, bool>>(() => FieldAccessor<ExtrudeMeshComponent_Caps, bool>.Create("flipStartCap"));
		private static readonly System.Lazy<FieldAccessor<ExtrudeMeshComponent_Caps, UnityEngine.GameObject>> _endCapPrefab =
				new System.Lazy<FieldAccessor<ExtrudeMeshComponent_Caps, UnityEngine.GameObject>>(() => FieldAccessor<ExtrudeMeshComponent_Caps, UnityEngine.GameObject>.Create("endCapPrefab"));
		private static readonly System.Lazy<FieldAccessor<ExtrudeMeshComponent_Caps, bool>> _flipEndCap =
				new System.Lazy<FieldAccessor<ExtrudeMeshComponent_Caps, bool>>(() => FieldAccessor<ExtrudeMeshComponent_Caps, bool>.Create("flipEndCap"));
		private static readonly System.Lazy<FieldAccessor<ExtrudeMeshComponent_Caps, UnityEngine.GameObject>> _startCap =
				new System.Lazy<FieldAccessor<ExtrudeMeshComponent_Caps, UnityEngine.GameObject>>(() => FieldAccessor<ExtrudeMeshComponent_Caps, UnityEngine.GameObject>.Create("startCap"));
		private static readonly System.Lazy<FieldAccessor<ExtrudeMeshComponent_Caps, UnityEngine.GameObject>> _endCap =
				new System.Lazy<FieldAccessor<ExtrudeMeshComponent_Caps, UnityEngine.GameObject>>(() => FieldAccessor<ExtrudeMeshComponent_Caps, UnityEngine.GameObject>.Create("endCap"));

		public static float GetScale(this ExtrudeMeshComponent_Caps __self) => _scale.Value.GetValue(__self);
		public static void SetScale(this ExtrudeMeshComponent_Caps __self, float value) => _scale.Value.SetValue(__self, value);
		public static bool GetInheritsShapeScale(this ExtrudeMeshComponent_Caps __self) => _inheritsShapeScale.Value.GetValue(__self);
		public static void SetInheritsShapeScale(this ExtrudeMeshComponent_Caps __self, bool value) => _inheritsShapeScale.Value.SetValue(__self, value);
		public static UnityEngine.GameObject GetStartCapPrefab(this ExtrudeMeshComponent_Caps __self) => _startCapPrefab.Value.GetValue(__self);
		public static void SetStartCapPrefab(this ExtrudeMeshComponent_Caps __self, UnityEngine.GameObject value) => _startCapPrefab.Value.SetValue(__self, value);
		public static bool GetFlipStartCap(this ExtrudeMeshComponent_Caps __self) => _flipStartCap.Value.GetValue(__self);
		public static void SetFlipStartCap(this ExtrudeMeshComponent_Caps __self, bool value) => _flipStartCap.Value.SetValue(__self, value);
		public static UnityEngine.GameObject GetEndCapPrefab(this ExtrudeMeshComponent_Caps __self) => _endCapPrefab.Value.GetValue(__self);
		public static void SetEndCapPrefab(this ExtrudeMeshComponent_Caps __self, UnityEngine.GameObject value) => _endCapPrefab.Value.SetValue(__self, value);
		public static bool GetFlipEndCap(this ExtrudeMeshComponent_Caps __self) => _flipEndCap.Value.GetValue(__self);
		public static void SetFlipEndCap(this ExtrudeMeshComponent_Caps __self, bool value) => _flipEndCap.Value.SetValue(__self, value);
		public static UnityEngine.GameObject GetStartCap(this ExtrudeMeshComponent_Caps __self) => _startCap.Value.GetValue(__self);
		public static void SetStartCap(this ExtrudeMeshComponent_Caps __self, UnityEngine.GameObject value) => _startCap.Value.SetValue(__self, value);
		public static UnityEngine.GameObject GetEndCap(this ExtrudeMeshComponent_Caps __self) => _endCap.Value.GetValue(__self);
		public static void SetEndCap(this ExtrudeMeshComponent_Caps __self, UnityEngine.GameObject value) => _endCap.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<ExtrudeMeshComponent_Caps>> _OnExtrudeMeshGenerate757602046 =
				new System.Lazy<MethodAccessor<ExtrudeMeshComponent_Caps>>(() => MethodAccessor<ExtrudeMeshComponent_Caps>.Create("OnExtrudeMeshGenerate"));
		private static readonly System.Lazy<MethodAccessor<ExtrudeMeshComponent_Caps>> _OnExtrudeMeshClear757602046 =
				new System.Lazy<MethodAccessor<ExtrudeMeshComponent_Caps>>(() => MethodAccessor<ExtrudeMeshComponent_Caps>.Create("OnExtrudeMeshClear"));
		private static readonly System.Lazy<MethodAccessor<ExtrudeMeshComponent_Caps>> _GenerateCaps757602046 =
				new System.Lazy<MethodAccessor<ExtrudeMeshComponent_Caps>>(() => MethodAccessor<ExtrudeMeshComponent_Caps>.Create("GenerateCaps"));
		private static readonly System.Lazy<MethodAccessor<ExtrudeMeshComponent_Caps>> _ClearCaps757602046 =
				new System.Lazy<MethodAccessor<ExtrudeMeshComponent_Caps>>(() => MethodAccessor<ExtrudeMeshComponent_Caps>.Create("ClearCaps"));
		private static readonly System.Lazy<MethodAccessor<ExtrudeMeshComponent_Caps>> _ClearStartCap757602046 =
				new System.Lazy<MethodAccessor<ExtrudeMeshComponent_Caps>>(() => MethodAccessor<ExtrudeMeshComponent_Caps>.Create("ClearStartCap"));
		private static readonly System.Lazy<MethodAccessor<ExtrudeMeshComponent_Caps>> _ClearEndCap757602046 =
				new System.Lazy<MethodAccessor<ExtrudeMeshComponent_Caps>>(() => MethodAccessor<ExtrudeMeshComponent_Caps>.Create("ClearEndCap"));
		private static readonly System.Lazy<MethodAccessor<ExtrudeMeshComponent_Caps>> _HasCorrectStartCap757602046 =
				new System.Lazy<MethodAccessor<ExtrudeMeshComponent_Caps>>(() => MethodAccessor<ExtrudeMeshComponent_Caps>.Create("HasCorrectStartCap"));
		private static readonly System.Lazy<MethodAccessor<ExtrudeMeshComponent_Caps>> _HasCorrectEndCap757602046 =
				new System.Lazy<MethodAccessor<ExtrudeMeshComponent_Caps>>(() => MethodAccessor<ExtrudeMeshComponent_Caps>.Create("HasCorrectEndCap"));
		private static readonly System.Lazy<MethodAccessor<ExtrudeMeshComponent_Caps>> _FindCap3454057852 =
				new System.Lazy<MethodAccessor<ExtrudeMeshComponent_Caps>>(() => MethodAccessor<ExtrudeMeshComponent_Caps>.Create("FindCap", typeof(string)));

		public static void OnExtrudeMeshGenerate(this ExtrudeMeshComponent_Caps __self) => _OnExtrudeMeshGenerate757602046.Value.Invoke(__self);
		public static void OnExtrudeMeshClear(this ExtrudeMeshComponent_Caps __self) => _OnExtrudeMeshClear757602046.Value.Invoke(__self);
		public static void GenerateCaps(this ExtrudeMeshComponent_Caps __self) => _GenerateCaps757602046.Value.Invoke(__self);
		public static void ClearCaps(this ExtrudeMeshComponent_Caps __self) => _ClearCaps757602046.Value.Invoke(__self);
		public static void ClearStartCap(this ExtrudeMeshComponent_Caps __self) => _ClearStartCap757602046.Value.Invoke(__self);
		public static void ClearEndCap(this ExtrudeMeshComponent_Caps __self) => _ClearEndCap757602046.Value.Invoke(__self);
		public static bool HasCorrectStartCap(this ExtrudeMeshComponent_Caps __self) => (bool)_HasCorrectStartCap757602046.Value.Invoke(__self);
		public static bool HasCorrectEndCap(this ExtrudeMeshComponent_Caps __self) => (bool)_HasCorrectEndCap757602046.Value.Invoke(__self);
		public static UnityEngine.GameObject FindCap(this ExtrudeMeshComponent_Caps __self, string namePrefix) => (UnityEngine.GameObject)_FindCap3454057852.Value.Invoke(__self, namePrefix);

	}

	public static class Private_ExtrudeMeshComponent_Caps
	{

		private static readonly System.Lazy<StaticFieldAccessor<string>> _startCapPrefix =
				new System.Lazy<StaticFieldAccessor<string>>(() => StaticFieldAccessor<string>.Create(typeof(ExtrudeMeshComponent_Caps), "startCapPrefix"));
		private static readonly System.Lazy<StaticFieldAccessor<string>> _endCapPrefix =
				new System.Lazy<StaticFieldAccessor<string>>(() => StaticFieldAccessor<string>.Create(typeof(ExtrudeMeshComponent_Caps), "endCapPrefix"));

		public static string GetStartCapPrefix() => _startCapPrefix.Value.GetValue();
		public static void SetStartCapPrefix(string value) => _startCapPrefix.Value.SetValue(value);
		public static string GetEndCapPrefix() => _endCapPrefix.Value.GetValue();
		public static void SetEndCapPrefix(string value) => _endCapPrefix.Value.SetValue(value);

	}

	public static class PrivateAccessor_ExtrudeMeshComponent_PrefabPlacer
	{

		private static readonly System.Lazy<FieldAccessor<ExtrudeMeshComponent_PrefabPlacer, ExtrudeMeshComponent_PrefabPlacer.GenerationType>> _generationMode =
				new System.Lazy<FieldAccessor<ExtrudeMeshComponent_PrefabPlacer, ExtrudeMeshComponent_PrefabPlacer.GenerationType>>(() => FieldAccessor<ExtrudeMeshComponent_PrefabPlacer, ExtrudeMeshComponent_PrefabPlacer.GenerationType>.Create("generationMode"));
		private static readonly System.Lazy<FieldAccessor<ExtrudeMeshComponent_PrefabPlacer, int>> _amountOfPrefabs =
				new System.Lazy<FieldAccessor<ExtrudeMeshComponent_PrefabPlacer, int>>(() => FieldAccessor<ExtrudeMeshComponent_PrefabPlacer, int>.Create("amountOfPrefabs"));
		private static readonly System.Lazy<FieldAccessor<ExtrudeMeshComponent_PrefabPlacer, float>> _amountPerMeter =
				new System.Lazy<FieldAccessor<ExtrudeMeshComponent_PrefabPlacer, float>>(() => FieldAccessor<ExtrudeMeshComponent_PrefabPlacer, float>.Create("amountPerMeter"));
		private static readonly System.Lazy<FieldAccessor<ExtrudeMeshComponent_PrefabPlacer, float>> _scale =
				new System.Lazy<FieldAccessor<ExtrudeMeshComponent_PrefabPlacer, float>>(() => FieldAccessor<ExtrudeMeshComponent_PrefabPlacer, float>.Create("scale"));
		private static readonly System.Lazy<FieldAccessor<ExtrudeMeshComponent_PrefabPlacer, bool>> _inheritsShapeScale =
				new System.Lazy<FieldAccessor<ExtrudeMeshComponent_PrefabPlacer, bool>>(() => FieldAccessor<ExtrudeMeshComponent_PrefabPlacer, bool>.Create("inheritsShapeScale"));
		private static readonly System.Lazy<FieldAccessor<ExtrudeMeshComponent_PrefabPlacer, ExtrudeMeshComponent_PrefabPlacer.SelectPrefabType>> _prefabMode =
				new System.Lazy<FieldAccessor<ExtrudeMeshComponent_PrefabPlacer, ExtrudeMeshComponent_PrefabPlacer.SelectPrefabType>>(() => FieldAccessor<ExtrudeMeshComponent_PrefabPlacer, ExtrudeMeshComponent_PrefabPlacer.SelectPrefabType>.Create("prefabMode"));
		private static readonly System.Lazy<FieldAccessor<ExtrudeMeshComponent_PrefabPlacer, int>> _seed =
				new System.Lazy<FieldAccessor<ExtrudeMeshComponent_PrefabPlacer, int>>(() => FieldAccessor<ExtrudeMeshComponent_PrefabPlacer, int>.Create("seed"));
		private static readonly System.Lazy<FieldAccessor<ExtrudeMeshComponent_PrefabPlacer, Randomizer>> _prefabs =
				new System.Lazy<FieldAccessor<ExtrudeMeshComponent_PrefabPlacer, Randomizer>>(() => FieldAccessor<ExtrudeMeshComponent_PrefabPlacer, Randomizer>.Create("prefabs"));
		private static readonly System.Lazy<FieldAccessor<ExtrudeMeshComponent_PrefabPlacer, System.Random>> _random =
				new System.Lazy<FieldAccessor<ExtrudeMeshComponent_PrefabPlacer, System.Random>>(() => FieldAccessor<ExtrudeMeshComponent_PrefabPlacer, System.Random>.Create("random"));
		private static readonly System.Lazy<FieldAccessor<ExtrudeMeshComponent_PrefabPlacer, uint>> _lastUsedPrefabIndex =
				new System.Lazy<FieldAccessor<ExtrudeMeshComponent_PrefabPlacer, uint>>(() => FieldAccessor<ExtrudeMeshComponent_PrefabPlacer, uint>.Create("lastUsedPrefabIndex"));

		public static ExtrudeMeshComponent_PrefabPlacer.GenerationType GetGenerationMode(this ExtrudeMeshComponent_PrefabPlacer __self) => _generationMode.Value.GetValue(__self);
		public static void SetGenerationMode(this ExtrudeMeshComponent_PrefabPlacer __self, ExtrudeMeshComponent_PrefabPlacer.GenerationType value) => _generationMode.Value.SetValue(__self, value);
		public static int GetAmountOfPrefabs(this ExtrudeMeshComponent_PrefabPlacer __self) => _amountOfPrefabs.Value.GetValue(__self);
		public static void SetAmountOfPrefabs(this ExtrudeMeshComponent_PrefabPlacer __self, int value) => _amountOfPrefabs.Value.SetValue(__self, value);
		public static float GetAmountPerMeter(this ExtrudeMeshComponent_PrefabPlacer __self) => _amountPerMeter.Value.GetValue(__self);
		public static void SetAmountPerMeter(this ExtrudeMeshComponent_PrefabPlacer __self, float value) => _amountPerMeter.Value.SetValue(__self, value);
		public static float GetScale(this ExtrudeMeshComponent_PrefabPlacer __self) => _scale.Value.GetValue(__self);
		public static void SetScale(this ExtrudeMeshComponent_PrefabPlacer __self, float value) => _scale.Value.SetValue(__self, value);
		public static bool GetInheritsShapeScale(this ExtrudeMeshComponent_PrefabPlacer __self) => _inheritsShapeScale.Value.GetValue(__self);
		public static void SetInheritsShapeScale(this ExtrudeMeshComponent_PrefabPlacer __self, bool value) => _inheritsShapeScale.Value.SetValue(__self, value);
		public static ExtrudeMeshComponent_PrefabPlacer.SelectPrefabType GetPrefabMode(this ExtrudeMeshComponent_PrefabPlacer __self) => _prefabMode.Value.GetValue(__self);
		public static void SetPrefabMode(this ExtrudeMeshComponent_PrefabPlacer __self, ExtrudeMeshComponent_PrefabPlacer.SelectPrefabType value) => _prefabMode.Value.SetValue(__self, value);
		public static int GetSeed(this ExtrudeMeshComponent_PrefabPlacer __self) => _seed.Value.GetValue(__self);
		public static void SetSeed(this ExtrudeMeshComponent_PrefabPlacer __self, int value) => _seed.Value.SetValue(__self, value);
		public static Randomizer GetPrefabs(this ExtrudeMeshComponent_PrefabPlacer __self) => _prefabs.Value.GetValue(__self);
		public static void SetPrefabs(this ExtrudeMeshComponent_PrefabPlacer __self, Randomizer value) => _prefabs.Value.SetValue(__self, value);
		public static System.Random GetRandom(this ExtrudeMeshComponent_PrefabPlacer __self) => _random.Value.GetValue(__self);
		public static void SetRandom(this ExtrudeMeshComponent_PrefabPlacer __self, System.Random value) => _random.Value.SetValue(__self, value);
		public static uint GetLastUsedPrefabIndex(this ExtrudeMeshComponent_PrefabPlacer __self) => _lastUsedPrefabIndex.Value.GetValue(__self);
		public static void SetLastUsedPrefabIndex(this ExtrudeMeshComponent_PrefabPlacer __self, uint value) => _lastUsedPrefabIndex.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<ExtrudeMeshComponent_PrefabPlacer>> _RandomizeSeed757602046 =
				new System.Lazy<MethodAccessor<ExtrudeMeshComponent_PrefabPlacer>>(() => MethodAccessor<ExtrudeMeshComponent_PrefabPlacer>.Create("RandomizeSeed"));
		private static readonly System.Lazy<MethodAccessor<ExtrudeMeshComponent_PrefabPlacer>> _OnExtrudeMeshGenerate757602046 =
				new System.Lazy<MethodAccessor<ExtrudeMeshComponent_PrefabPlacer>>(() => MethodAccessor<ExtrudeMeshComponent_PrefabPlacer>.Create("OnExtrudeMeshGenerate"));
		private static readonly System.Lazy<MethodAccessor<ExtrudeMeshComponent_PrefabPlacer>> _OnExtrudeMeshClear757602046 =
				new System.Lazy<MethodAccessor<ExtrudeMeshComponent_PrefabPlacer>>(() => MethodAccessor<ExtrudeMeshComponent_PrefabPlacer>.Create("OnExtrudeMeshClear"));
		private static readonly System.Lazy<MethodAccessor<ExtrudeMeshComponent_PrefabPlacer>> _GeneratePrefabs757602046 =
				new System.Lazy<MethodAccessor<ExtrudeMeshComponent_PrefabPlacer>>(() => MethodAccessor<ExtrudeMeshComponent_PrefabPlacer>.Create("GeneratePrefabs"));
		private static readonly System.Lazy<MethodAccessor<ExtrudeMeshComponent_PrefabPlacer>> _ClearPrefabs757602046 =
				new System.Lazy<MethodAccessor<ExtrudeMeshComponent_PrefabPlacer>>(() => MethodAccessor<ExtrudeMeshComponent_PrefabPlacer>.Create("ClearPrefabs"));
		private static readonly System.Lazy<MethodAccessor<ExtrudeMeshComponent_PrefabPlacer>> _GenerateSetAmount757602046 =
				new System.Lazy<MethodAccessor<ExtrudeMeshComponent_PrefabPlacer>>(() => MethodAccessor<ExtrudeMeshComponent_PrefabPlacer>.Create("GenerateSetAmount"));
		private static readonly System.Lazy<MethodAccessor<ExtrudeMeshComponent_PrefabPlacer>> _GenerateSetAmountMeter757602046 =
				new System.Lazy<MethodAccessor<ExtrudeMeshComponent_PrefabPlacer>>(() => MethodAccessor<ExtrudeMeshComponent_PrefabPlacer>.Create("GenerateSetAmountMeter"));
		private static readonly System.Lazy<MethodAccessor<ExtrudeMeshComponent_PrefabPlacer>> _GeneratePrefab3426376415 =
				new System.Lazy<MethodAccessor<ExtrudeMeshComponent_PrefabPlacer>>(() => MethodAccessor<ExtrudeMeshComponent_PrefabPlacer>.Create("GeneratePrefab", typeof(ExtrudeMesh.OrientedPoint)));
		private static readonly System.Lazy<MethodAccessor<ExtrudeMeshComponent_PrefabPlacer>> _GetDecorationParent757602046 =
				new System.Lazy<MethodAccessor<ExtrudeMeshComponent_PrefabPlacer>>(() => MethodAccessor<ExtrudeMeshComponent_PrefabPlacer>.Create("GetDecorationParent"));
		private static readonly System.Lazy<MethodAccessor<ExtrudeMeshComponent_PrefabPlacer>> _GetPrefabToSpawn757602046 =
				new System.Lazy<MethodAccessor<ExtrudeMeshComponent_PrefabPlacer>>(() => MethodAccessor<ExtrudeMeshComponent_PrefabPlacer>.Create("GetPrefabToSpawn"));
		private static readonly System.Lazy<MethodAccessor<ExtrudeMeshComponent_PrefabPlacer>> _IsGenerationModeSetAmount757602046 =
				new System.Lazy<MethodAccessor<ExtrudeMeshComponent_PrefabPlacer>>(() => MethodAccessor<ExtrudeMeshComponent_PrefabPlacer>.Create("IsGenerationModeSetAmount"));
		private static readonly System.Lazy<MethodAccessor<ExtrudeMeshComponent_PrefabPlacer>> _IsGenerationModeSetAmountMeter757602046 =
				new System.Lazy<MethodAccessor<ExtrudeMeshComponent_PrefabPlacer>>(() => MethodAccessor<ExtrudeMeshComponent_PrefabPlacer>.Create("IsGenerationModeSetAmountMeter"));
		private static readonly System.Lazy<MethodAccessor<ExtrudeMeshComponent_PrefabPlacer>> _IsRandomPrefabMode757602046 =
				new System.Lazy<MethodAccessor<ExtrudeMeshComponent_PrefabPlacer>>(() => MethodAccessor<ExtrudeMeshComponent_PrefabPlacer>.Create("IsRandomPrefabMode"));

		public static void RandomizeSeed(this ExtrudeMeshComponent_PrefabPlacer __self) => _RandomizeSeed757602046.Value.Invoke(__self);
		public static void OnExtrudeMeshGenerate(this ExtrudeMeshComponent_PrefabPlacer __self) => _OnExtrudeMeshGenerate757602046.Value.Invoke(__self);
		public static void OnExtrudeMeshClear(this ExtrudeMeshComponent_PrefabPlacer __self) => _OnExtrudeMeshClear757602046.Value.Invoke(__self);
		public static void GeneratePrefabs(this ExtrudeMeshComponent_PrefabPlacer __self) => _GeneratePrefabs757602046.Value.Invoke(__self);
		public static void ClearPrefabs(this ExtrudeMeshComponent_PrefabPlacer __self) => _ClearPrefabs757602046.Value.Invoke(__self);
		public static void GenerateSetAmount(this ExtrudeMeshComponent_PrefabPlacer __self) => _GenerateSetAmount757602046.Value.Invoke(__self);
		public static void GenerateSetAmountMeter(this ExtrudeMeshComponent_PrefabPlacer __self) => _GenerateSetAmountMeter757602046.Value.Invoke(__self);
		public static void GeneratePrefab(this ExtrudeMeshComponent_PrefabPlacer __self, ExtrudeMesh.OrientedPoint op) => _GeneratePrefab3426376415.Value.Invoke(__self, op);
		public static UnityEngine.Transform GetDecorationParent(this ExtrudeMeshComponent_PrefabPlacer __self) => (UnityEngine.Transform)_GetDecorationParent757602046.Value.Invoke(__self);
		public static UnityEngine.GameObject GetPrefabToSpawn(this ExtrudeMeshComponent_PrefabPlacer __self) => (UnityEngine.GameObject)_GetPrefabToSpawn757602046.Value.Invoke(__self);
		public static bool IsGenerationModeSetAmount(this ExtrudeMeshComponent_PrefabPlacer __self) => (bool)_IsGenerationModeSetAmount757602046.Value.Invoke(__self);
		public static bool IsGenerationModeSetAmountMeter(this ExtrudeMeshComponent_PrefabPlacer __self) => (bool)_IsGenerationModeSetAmountMeter757602046.Value.Invoke(__self);
		public static bool IsRandomPrefabMode(this ExtrudeMeshComponent_PrefabPlacer __self) => (bool)_IsRandomPrefabMode757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_ExtrudeMesh_PathCreator
	{

		private static readonly System.Lazy<FieldAccessor<ExtrudeMesh_PathCreator, PathCreation.PathCreator>> _pathCreator =
				new System.Lazy<FieldAccessor<ExtrudeMesh_PathCreator, PathCreation.PathCreator>>(() => FieldAccessor<ExtrudeMesh_PathCreator, PathCreation.PathCreator>.Create("pathCreator"));

		public static PathCreation.PathCreator GetPathCreator(this ExtrudeMesh_PathCreator __self) => _pathCreator.Value.GetValue(__self);
		public static void SetPathCreator(this ExtrudeMesh_PathCreator __self, PathCreation.PathCreator value) => _pathCreator.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<ExtrudeMesh_PathCreator>> _OnValidate757602046 =
				new System.Lazy<MethodAccessor<ExtrudeMesh_PathCreator>>(() => MethodAccessor<ExtrudeMesh_PathCreator>.Create("OnValidate"));
		private static readonly System.Lazy<MethodAccessor<ExtrudeMesh_PathCreator>> _SetPathLength757602046 =
				new System.Lazy<MethodAccessor<ExtrudeMesh_PathCreator>>(() => MethodAccessor<ExtrudeMesh_PathCreator>.Create("SetPathLength"));

		public static void OnValidate(this ExtrudeMesh_PathCreator __self) => _OnValidate757602046.Value.Invoke(__self);
		public static void SetPathLength(this ExtrudeMesh_PathCreator __self) => _SetPathLength757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_SO_ExtrudeMeshShape
	{

		private static readonly System.Lazy<MethodAccessor<SO_ExtrudeMeshShape>> _GetVerticesFromMesh757602046 =
				new System.Lazy<MethodAccessor<SO_ExtrudeMeshShape>>(() => MethodAccessor<SO_ExtrudeMeshShape>.Create("GetVerticesFromMesh"));
		private static readonly System.Lazy<MethodAccessor<SO_ExtrudeMeshShape>> _CalculateUV757602046 =
				new System.Lazy<MethodAccessor<SO_ExtrudeMeshShape>>(() => MethodAccessor<SO_ExtrudeMeshShape>.Create("CalculateUV"));

		public static void GetVerticesFromMesh(this SO_ExtrudeMeshShape __self) => _GetVerticesFromMesh757602046.Value.Invoke(__self);
		public static void CalculateUV(this SO_ExtrudeMeshShape __self) => _CalculateUV757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_PlantationSlot
	{

		private static readonly System.Lazy<FieldAccessor<PlantationSlot, UnityEngine.MaterialPropertyBlock>> _materialProp =
				new System.Lazy<FieldAccessor<PlantationSlot, UnityEngine.MaterialPropertyBlock>>(() => FieldAccessor<PlantationSlot, UnityEngine.MaterialPropertyBlock>.Create("materialProp"));

		public static UnityEngine.MaterialPropertyBlock GetMaterialProp(this PlantationSlot __self) => _materialProp.Value.GetValue(__self);
		public static void SetMaterialProp(this PlantationSlot __self, UnityEngine.MaterialPropertyBlock value) => _materialProp.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_Cropplot
	{

		private static readonly System.Lazy<FieldAccessor<Cropplot, UnityEngine.GameObject>> _defaultReplenishItem =
				new System.Lazy<FieldAccessor<Cropplot, UnityEngine.GameObject>>(() => FieldAccessor<Cropplot, UnityEngine.GameObject>.Create("defaultReplenishItem"));
		private static readonly System.Lazy<FieldAccessor<Cropplot, Raft_Network>> _network =
				new System.Lazy<FieldAccessor<Cropplot, Raft_Network>>(() => FieldAccessor<Cropplot, Raft_Network>.Create("network"));
		private static readonly System.Lazy<FieldAccessor<Cropplot, Network_Player>> _localPlayer =
				new System.Lazy<FieldAccessor<Cropplot, Network_Player>>(() => FieldAccessor<Cropplot, Network_Player>.Create("localPlayer"));
		private static readonly System.Lazy<FieldAccessor<Cropplot, CanvasHelper>> _canvas =
				new System.Lazy<FieldAccessor<Cropplot, CanvasHelper>>(() => FieldAccessor<Cropplot, CanvasHelper>.Create("canvas"));
		private static readonly System.Lazy<FieldAccessor<Cropplot, bool>> _showingText =
				new System.Lazy<FieldAccessor<Cropplot, bool>>(() => FieldAccessor<Cropplot, bool>.Create("showingText"));
		private static readonly System.Lazy<FieldAccessor<Cropplot, PlantManager>> _plantManager =
				new System.Lazy<FieldAccessor<Cropplot, PlantManager>>(() => FieldAccessor<Cropplot, PlantManager>.Create("plantManager"));

		public static UnityEngine.GameObject GetDefaultReplenishItem(this Cropplot __self) => _defaultReplenishItem.Value.GetValue(__self);
		public static void SetDefaultReplenishItem(this Cropplot __self, UnityEngine.GameObject value) => _defaultReplenishItem.Value.SetValue(__self, value);
		public static Raft_Network GetNetwork(this Cropplot __self) => _network.Value.GetValue(__self);
		public static void SetNetwork(this Cropplot __self, Raft_Network value) => _network.Value.SetValue(__self, value);
		public static Network_Player GetLocalPlayer(this Cropplot __self) => _localPlayer.Value.GetValue(__self);
		public static void SetLocalPlayer(this Cropplot __self, Network_Player value) => _localPlayer.Value.SetValue(__self, value);
		public static CanvasHelper GetCanvas(this Cropplot __self) => _canvas.Value.GetValue(__self);
		public static void SetCanvas(this Cropplot __self, CanvasHelper value) => _canvas.Value.SetValue(__self, value);
		public static bool GetShowingText(this Cropplot __self) => _showingText.Value.GetValue(__self);
		public static void SetShowingText(this Cropplot __self, bool value) => _showingText.Value.SetValue(__self, value);
		public static PlantManager GetPlantManager(this Cropplot __self) => _plantManager.Value.GetValue(__self);
		public static void SetPlantManager(this Cropplot __self, PlantManager value) => _plantManager.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Cropplot>> _Update757602046 =
				new System.Lazy<MethodAccessor<Cropplot>>(() => MethodAccessor<Cropplot>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<Cropplot>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<Cropplot>>(() => MethodAccessor<Cropplot>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<Cropplot>> _GetSlotFromIndex3486186818 =
				new System.Lazy<MethodAccessor<Cropplot>>(() => MethodAccessor<Cropplot>.Create("GetSlotFromIndex", typeof(int)));
		private static readonly System.Lazy<MethodAccessor<Cropplot>> _GetEmptyPlantationSlot757602046 =
				new System.Lazy<MethodAccessor<Cropplot>>(() => MethodAccessor<Cropplot>.Create("GetEmptyPlantationSlot"));
		private static readonly System.Lazy<MethodAccessor<Cropplot>> _GetBusySlotCount757602046 =
				new System.Lazy<MethodAccessor<Cropplot>>(() => MethodAccessor<Cropplot>.Create("GetBusySlotCount"));

		public static void Update(this Cropplot __self) => _Update757602046.Value.Invoke(__self);
		public static void OnDestroy(this Cropplot __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static PlantationSlot GetSlotFromIndex(this Cropplot __self, int slotIndex) => (PlantationSlot)_GetSlotFromIndex3486186818.Value.Invoke(__self, slotIndex);
		public static PlantationSlot GetEmptyPlantationSlot(this Cropplot __self) => (PlantationSlot)_GetEmptyPlantationSlot757602046.Value.Invoke(__self);
		public static int GetBusySlotCount(this Cropplot __self) => (int)_GetBusySlotCount757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Cropplot_Grass
	{

		private static readonly System.Lazy<FieldAccessor<Cropplot_Grass, BitmaskTile>> _bitmaskTile =
				new System.Lazy<FieldAccessor<Cropplot_Grass, BitmaskTile>>(() => FieldAccessor<Cropplot_Grass, BitmaskTile>.Create("bitmaskTile"));
		private static readonly System.Lazy<FieldAccessor<Cropplot_Grass, UnityEngine.Renderer>> _grassPlotRenderer =
				new System.Lazy<FieldAccessor<Cropplot_Grass, UnityEngine.Renderer>>(() => FieldAccessor<Cropplot_Grass, UnityEngine.Renderer>.Create("grassPlotRenderer"));
		private static readonly System.Lazy<FieldAccessor<Cropplot_Grass, UnityEngine.MaterialPropertyBlock>> _materialProp =
				new System.Lazy<FieldAccessor<Cropplot_Grass, UnityEngine.MaterialPropertyBlock>>(() => FieldAccessor<Cropplot_Grass, UnityEngine.MaterialPropertyBlock>.Create("materialProp"));

		public static BitmaskTile GetBitmaskTile(this Cropplot_Grass __self) => _bitmaskTile.Value.GetValue(__self);
		public static void SetBitmaskTile(this Cropplot_Grass __self, BitmaskTile value) => _bitmaskTile.Value.SetValue(__self, value);
		public static UnityEngine.Renderer GetGrassPlotRenderer(this Cropplot_Grass __self) => _grassPlotRenderer.Value.GetValue(__self);
		public static void SetGrassPlotRenderer(this Cropplot_Grass __self, UnityEngine.Renderer value) => _grassPlotRenderer.Value.SetValue(__self, value);
		public static UnityEngine.MaterialPropertyBlock GetMaterialProp(this Cropplot_Grass __self) => _materialProp.Value.GetValue(__self);
		public static void SetMaterialProp(this Cropplot_Grass __self, UnityEngine.MaterialPropertyBlock value) => _materialProp.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Cropplot_Grass>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<Cropplot_Grass>>(() => MethodAccessor<Cropplot_Grass>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<Cropplot_Grass>> _OnBitmaskTileMeshChange757602046 =
				new System.Lazy<MethodAccessor<Cropplot_Grass>>(() => MethodAccessor<Cropplot_Grass>.Create("OnBitmaskTileMeshChange"));
		private static readonly System.Lazy<MethodAccessor<Cropplot_Grass>> _OnSlotWaterChange3450040886 =
				new System.Lazy<MethodAccessor<Cropplot_Grass>>(() => MethodAccessor<Cropplot_Grass>.Create("OnSlotWaterChange", typeof(bool)));

		public static void OnDestroy(this Cropplot_Grass __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void OnBitmaskTileMeshChange(this Cropplot_Grass __self) => _OnBitmaskTileMeshChange757602046.Value.Invoke(__self);
		public static void OnSlotWaterChange(this Cropplot_Grass __self, bool hasWater) => _OnSlotWaterChange3450040886.Value.Invoke(__self, hasWater);

	}

	public static class PrivateAccessor_HarvestableTree
	{

		private static readonly System.Lazy<FieldAccessor<HarvestableTree, bool>> _hideOnDepleted =
				new System.Lazy<FieldAccessor<HarvestableTree, bool>>(() => FieldAccessor<HarvestableTree, bool>.Create("hideOnDepleted"));
		private static readonly System.Lazy<FieldAccessor<HarvestableTree, string>> _particleSystemName =
				new System.Lazy<FieldAccessor<HarvestableTree, string>>(() => FieldAccessor<HarvestableTree, string>.Create("particleSystemName"));
		private static readonly System.Lazy<FieldAccessor<HarvestableTree, UnityEngine.Transform[]>> _particleSpawnPositions =
				new System.Lazy<FieldAccessor<HarvestableTree, UnityEngine.Transform[]>>(() => FieldAccessor<HarvestableTree, UnityEngine.Transform[]>.Create("particleSpawnPositions"));
		private static readonly System.Lazy<FieldAccessor<HarvestableTree, PickupItem>> _pickupItem =
				new System.Lazy<FieldAccessor<HarvestableTree, PickupItem>>(() => FieldAccessor<HarvestableTree, PickupItem>.Create("pickupItem"));

		public static bool GetHideOnDepleted(this HarvestableTree __self) => _hideOnDepleted.Value.GetValue(__self);
		public static void SetHideOnDepleted(this HarvestableTree __self, bool value) => _hideOnDepleted.Value.SetValue(__self, value);
		public static string GetParticleSystemName(this HarvestableTree __self) => _particleSystemName.Value.GetValue(__self);
		public static void SetParticleSystemName(this HarvestableTree __self, string value) => _particleSystemName.Value.SetValue(__self, value);
		public static UnityEngine.Transform[] GetParticleSpawnPositions(this HarvestableTree __self) => _particleSpawnPositions.Value.GetValue(__self);
		public static void SetParticleSpawnPositions(this HarvestableTree __self, UnityEngine.Transform[] value) => _particleSpawnPositions.Value.SetValue(__self, value);
		public static PickupItem GetPickupItem(this HarvestableTree __self) => _pickupItem.Value.GetValue(__self);
		public static void SetPickupItem(this HarvestableTree __self, PickupItem value) => _pickupItem.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<HarvestableTree>> _CopyYieldFromPickup757602046 =
				new System.Lazy<MethodAccessor<HarvestableTree>>(() => MethodAccessor<HarvestableTree>.Create("CopyYieldFromPickup"));
		private static readonly System.Lazy<MethodAccessor<HarvestableTree>> _Awake757602046 =
				new System.Lazy<MethodAccessor<HarvestableTree>>(() => MethodAccessor<HarvestableTree>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<HarvestableTree>> _OnLandmarkReset757602046 =
				new System.Lazy<MethodAccessor<HarvestableTree>>(() => MethodAccessor<HarvestableTree>.Create("OnLandmarkReset"));

		public static void CopyYieldFromPickup(this HarvestableTree __self) => _CopyYieldFromPickup757602046.Value.Invoke(__self);
		public static void Awake(this HarvestableTree __self) => _Awake757602046.Value.Invoke(__self);
		public static void OnLandmarkReset(this HarvestableTree __self) => _OnLandmarkReset757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_ItemNet
	{

		private static readonly System.Lazy<FieldAccessor<ItemNet, bool>> _displayText =
				new System.Lazy<FieldAccessor<ItemNet, bool>>(() => FieldAccessor<ItemNet, bool>.Create("displayText"));
		private static readonly System.Lazy<FieldAccessor<ItemNet, CanvasHelper>> _canvas =
				new System.Lazy<FieldAccessor<ItemNet, CanvasHelper>>(() => FieldAccessor<ItemNet, CanvasHelper>.Create("canvas"));

		public static bool GetDisplayText(this ItemNet __self) => _displayText.Value.GetValue(__self);
		public static void SetDisplayText(this ItemNet __self, bool value) => _displayText.Value.SetValue(__self, value);
		public static CanvasHelper GetCanvas(this ItemNet __self) => _canvas.Value.GetValue(__self);
		public static void SetCanvas(this ItemNet __self, CanvasHelper value) => _canvas.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<ItemNet>> _Awake757602046 =
				new System.Lazy<MethodAccessor<ItemNet>>(() => MethodAccessor<ItemNet>.Create("Awake"));

		public static void Awake(this ItemNet __self) => _Awake757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Plant
	{

		private static readonly System.Lazy<FieldAccessor<Plant, Plant.OnPlantRemoved>> _onRemovedCallstack =
				new System.Lazy<FieldAccessor<Plant, Plant.OnPlantRemoved>>(() => FieldAccessor<Plant, Plant.OnPlantRemoved>.Create("onRemovedCallstack"));
		private static readonly System.Lazy<FieldAccessor<Plant, float>> _growTimeSec =
				new System.Lazy<FieldAccessor<Plant, float>>(() => FieldAccessor<Plant, float>.Create("growTimeSec"));
		private static readonly System.Lazy<FieldAccessor<Plant, float>> _growTimer =
				new System.Lazy<FieldAccessor<Plant, float>>(() => FieldAccessor<Plant, float>.Create("growTimer"));
		private static readonly System.Lazy<FieldAccessor<Plant, bool>> _fullyGrown =
				new System.Lazy<FieldAccessor<Plant, bool>>(() => FieldAccessor<Plant, bool>.Create("fullyGrown"));

		public static Plant.OnPlantRemoved GetOnRemovedCallstack(this Plant __self) => _onRemovedCallstack.Value.GetValue(__self);
		public static void SetOnRemovedCallstack(this Plant __self, Plant.OnPlantRemoved value) => _onRemovedCallstack.Value.SetValue(__self, value);
		public static float GetGrowTimeSec(this Plant __self) => _growTimeSec.Value.GetValue(__self);
		public static void SetGrowTimeSec(this Plant __self, float value) => _growTimeSec.Value.SetValue(__self, value);
		public static float GetGrowTimer(this Plant __self) => _growTimer.Value.GetValue(__self);
		public static void SetGrowTimer(this Plant __self, float value) => _growTimer.Value.SetValue(__self, value);
		public static bool GetFullyGrown(this Plant __self) => _fullyGrown.Value.GetValue(__self);
		public static void SetFullyGrown(this Plant __self, bool value) => _fullyGrown.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Plant>> _SmallPlant757602046 =
				new System.Lazy<MethodAccessor<Plant>>(() => MethodAccessor<Plant>.Create("SmallPlant"));
		private static readonly System.Lazy<MethodAccessor<Plant>> _BigPlant757602046 =
				new System.Lazy<MethodAccessor<Plant>>(() => MethodAccessor<Plant>.Create("BigPlant"));
		private static readonly System.Lazy<MethodAccessor<Plant>> _ResetStats757602046 =
				new System.Lazy<MethodAccessor<Plant>>(() => MethodAccessor<Plant>.Create("ResetStats"));

		public static void SmallPlant(this Plant __self) => _SmallPlant757602046.Value.Invoke(__self);
		public static void BigPlant(this Plant __self) => _BigPlant757602046.Value.Invoke(__self);
		public static void ResetStats(this Plant __self) => _ResetStats757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Plant_Palm
	{

		private static readonly System.Lazy<FieldAccessor<Plant_Palm, HarvestableTree>> _tree =
				new System.Lazy<FieldAccessor<Plant_Palm, HarvestableTree>>(() => FieldAccessor<Plant_Palm, HarvestableTree>.Create("tree"));

		public static HarvestableTree GetTree(this Plant_Palm __self) => _tree.Value.GetValue(__self);
		public static void SetTree(this Plant_Palm __self, HarvestableTree value) => _tree.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Plant_Palm>> _OnTreeHarvest757602046 =
				new System.Lazy<MethodAccessor<Plant_Palm>>(() => MethodAccessor<Plant_Palm>.Create("OnTreeHarvest"));

		public static void OnTreeHarvest(this Plant_Palm __self) => _OnTreeHarvest757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_FindNullMeshFilter
	{

		private static readonly System.Lazy<FieldAccessor<FindNullMeshFilter, string>> _name =
				new System.Lazy<FieldAccessor<FindNullMeshFilter, string>>(() => FieldAccessor<FindNullMeshFilter, string>.Create("name"));
		private static readonly System.Lazy<FieldAccessor<FindNullMeshFilter, string>> _filterName =
				new System.Lazy<FieldAccessor<FindNullMeshFilter, string>>(() => FieldAccessor<FindNullMeshFilter, string>.Create("filterName"));
		private static readonly System.Lazy<FieldAccessor<FindNullMeshFilter, UnityEngine.Mesh>> _mesh =
				new System.Lazy<FieldAccessor<FindNullMeshFilter, UnityEngine.Mesh>>(() => FieldAccessor<FindNullMeshFilter, UnityEngine.Mesh>.Create("mesh"));
		private static readonly System.Lazy<FieldAccessor<FindNullMeshFilter, UnityEngine.Material>> _material =
				new System.Lazy<FieldAccessor<FindNullMeshFilter, UnityEngine.Material>>(() => FieldAccessor<FindNullMeshFilter, UnityEngine.Material>.Create("material"));

		public static string GetName(this FindNullMeshFilter __self) => _name.Value.GetValue(__self);
		public static void SetName(this FindNullMeshFilter __self, string value) => _name.Value.SetValue(__self, value);
		public static string GetFilterName(this FindNullMeshFilter __self) => _filterName.Value.GetValue(__self);
		public static void SetFilterName(this FindNullMeshFilter __self, string value) => _filterName.Value.SetValue(__self, value);
		public static UnityEngine.Mesh GetMesh(this FindNullMeshFilter __self) => _mesh.Value.GetValue(__self);
		public static void SetMesh(this FindNullMeshFilter __self, UnityEngine.Mesh value) => _mesh.Value.SetValue(__self, value);
		public static UnityEngine.Material GetMaterial(this FindNullMeshFilter __self) => _material.Value.GetValue(__self);
		public static void SetMaterial(this FindNullMeshFilter __self, UnityEngine.Material value) => _material.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<FindNullMeshFilter>> _Find757602046 =
				new System.Lazy<MethodAccessor<FindNullMeshFilter>>(() => MethodAccessor<FindNullMeshFilter>.Create("Find"));
		private static readonly System.Lazy<MethodAccessor<FindNullMeshFilter>> _Replace757602046 =
				new System.Lazy<MethodAccessor<FindNullMeshFilter>>(() => MethodAccessor<FindNullMeshFilter>.Create("Replace"));
		private static readonly System.Lazy<MethodAccessor<FindNullMeshFilter>> _FindAllChildren3653367850 =
				new System.Lazy<MethodAccessor<FindNullMeshFilter>>(() => MethodAccessor<FindNullMeshFilter>.Create("FindAllChildren", typeof(UnityEngine.Transform), typeof(System.Collections.Generic.List<UnityEngine.Transform>)));

		public static void Find(this FindNullMeshFilter __self) => _Find757602046.Value.Invoke(__self);
		public static void Replace(this FindNullMeshFilter __self) => _Replace757602046.Value.Invoke(__self);
		public static void FindAllChildren(this FindNullMeshFilter __self, UnityEngine.Transform transform, System.Collections.Generic.List<UnityEngine.Transform> children) => _FindAllChildren3653367850.Value.Invoke(__self, transform, children);

	}

	public static class PrivateAccessor_FishSchool
	{

		private static readonly System.Lazy<FieldAccessor<FishSchool, UnityEngine.Transform>> _windzone =
				new System.Lazy<FieldAccessor<FishSchool, UnityEngine.Transform>>(() => FieldAccessor<FishSchool, UnityEngine.Transform>.Create("windzone"));
		private static readonly System.Lazy<FieldAccessor<FishSchool, Interval_Float>> _newPositionInterval =
				new System.Lazy<FieldAccessor<FishSchool, Interval_Float>>(() => FieldAccessor<FishSchool, Interval_Float>.Create("newPositionInterval"));
		private static readonly System.Lazy<FieldAccessor<FishSchool, float>> _radius =
				new System.Lazy<FieldAccessor<FishSchool, float>>(() => FieldAccessor<FishSchool, float>.Create("radius"));
		private static readonly System.Lazy<FieldAccessor<FishSchool, float>> _movementSpeed =
				new System.Lazy<FieldAccessor<FishSchool, float>>(() => FieldAccessor<FishSchool, float>.Create("movementSpeed"));
		private static readonly System.Lazy<FieldAccessor<FishSchool, UnityEngine.ParticleSystem>> _particleParent =
				new System.Lazy<FieldAccessor<FishSchool, UnityEngine.ParticleSystem>>(() => FieldAccessor<FishSchool, UnityEngine.ParticleSystem>.Create("particleParent"));
		private static readonly System.Lazy<FieldAccessor<FishSchool, FishSchool.FishCon[]>> _fishCons =
				new System.Lazy<FieldAccessor<FishSchool, FishSchool.FishCon[]>>(() => FieldAccessor<FishSchool, FishSchool.FishCon[]>.Create("fishCons"));
		private static readonly System.Lazy<FieldAccessor<FishSchool, bool>> _clampY =
				new System.Lazy<FieldAccessor<FishSchool, bool>>(() => FieldAccessor<FishSchool, bool>.Create("clampY"));
		private static readonly System.Lazy<FieldAccessor<FishSchool, float>> _clampedYPos =
				new System.Lazy<FieldAccessor<FishSchool, float>>(() => FieldAccessor<FishSchool, float>.Create("clampedYPos"));
		private static readonly System.Lazy<FieldAccessor<FishSchool, UnityEngine.Vector3>> _targetPosition =
				new System.Lazy<FieldAccessor<FishSchool, UnityEngine.Vector3>>(() => FieldAccessor<FishSchool, UnityEngine.Vector3>.Create("targetPosition"));
		private static readonly System.Lazy<FieldAccessor<FishSchool, float>> _timer =
				new System.Lazy<FieldAccessor<FishSchool, float>>(() => FieldAccessor<FishSchool, float>.Create("timer"));
		private static readonly System.Lazy<FieldAccessor<FishSchool, float>> _currentInterval =
				new System.Lazy<FieldAccessor<FishSchool, float>>(() => FieldAccessor<FishSchool, float>.Create("currentInterval"));
		private static readonly System.Lazy<FieldAccessor<FishSchool, bool>> _initialized =
				new System.Lazy<FieldAccessor<FishSchool, bool>>(() => FieldAccessor<FishSchool, bool>.Create("initialized"));

		public static UnityEngine.Transform GetWindzone(this FishSchool __self) => _windzone.Value.GetValue(__self);
		public static void SetWindzone(this FishSchool __self, UnityEngine.Transform value) => _windzone.Value.SetValue(__self, value);
		public static Interval_Float GetNewPositionInterval(this FishSchool __self) => _newPositionInterval.Value.GetValue(__self);
		public static void SetNewPositionInterval(this FishSchool __self, Interval_Float value) => _newPositionInterval.Value.SetValue(__self, value);
		public static float GetRadius(this FishSchool __self) => _radius.Value.GetValue(__self);
		public static void SetRadius(this FishSchool __self, float value) => _radius.Value.SetValue(__self, value);
		public static float GetMovementSpeed(this FishSchool __self) => _movementSpeed.Value.GetValue(__self);
		public static void SetMovementSpeed(this FishSchool __self, float value) => _movementSpeed.Value.SetValue(__self, value);
		public static UnityEngine.ParticleSystem GetParticleParent(this FishSchool __self) => _particleParent.Value.GetValue(__self);
		public static void SetParticleParent(this FishSchool __self, UnityEngine.ParticleSystem value) => _particleParent.Value.SetValue(__self, value);
		public static FishSchool.FishCon[] GetFishCons(this FishSchool __self) => _fishCons.Value.GetValue(__self);
		public static void SetFishCons(this FishSchool __self, FishSchool.FishCon[] value) => _fishCons.Value.SetValue(__self, value);
		public static bool GetClampY(this FishSchool __self) => _clampY.Value.GetValue(__self);
		public static void SetClampY(this FishSchool __self, bool value) => _clampY.Value.SetValue(__self, value);
		public static float GetClampedYPos(this FishSchool __self) => _clampedYPos.Value.GetValue(__self);
		public static void SetClampedYPos(this FishSchool __self, float value) => _clampedYPos.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetTargetPosition(this FishSchool __self) => _targetPosition.Value.GetValue(__self);
		public static void SetTargetPosition(this FishSchool __self, UnityEngine.Vector3 value) => _targetPosition.Value.SetValue(__self, value);
		public static float GetTimer(this FishSchool __self) => _timer.Value.GetValue(__self);
		public static void SetTimer(this FishSchool __self, float value) => _timer.Value.SetValue(__self, value);
		public static float GetCurrentInterval(this FishSchool __self) => _currentInterval.Value.GetValue(__self);
		public static void SetCurrentInterval(this FishSchool __self, float value) => _currentInterval.Value.SetValue(__self, value);
		public static bool GetInitialized(this FishSchool __self) => _initialized.Value.GetValue(__self);
		public static void SetInitialized(this FishSchool __self, bool value) => _initialized.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<FishSchool>> _Awake757602046 =
				new System.Lazy<MethodAccessor<FishSchool>>(() => MethodAccessor<FishSchool>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<FishSchool>> _OnEnable757602046 =
				new System.Lazy<MethodAccessor<FishSchool>>(() => MethodAccessor<FishSchool>.Create("OnEnable"));
		private static readonly System.Lazy<MethodAccessor<FishSchool>> _LateEnable757602046 =
				new System.Lazy<MethodAccessor<FishSchool>>(() => MethodAccessor<FishSchool>.Create("LateEnable"));
		private static readonly System.Lazy<MethodAccessor<FishSchool>> _OnDisable757602046 =
				new System.Lazy<MethodAccessor<FishSchool>>(() => MethodAccessor<FishSchool>.Create("OnDisable"));
		private static readonly System.Lazy<MethodAccessor<FishSchool>> _Update757602046 =
				new System.Lazy<MethodAccessor<FishSchool>>(() => MethodAccessor<FishSchool>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<FishSchool>> _OnDrawGizmosSelected757602046 =
				new System.Lazy<MethodAccessor<FishSchool>>(() => MethodAccessor<FishSchool>.Create("OnDrawGizmosSelected"));
		private static readonly System.Lazy<MethodAccessor<FishSchool>> _GetNewPosition757602046 =
				new System.Lazy<MethodAccessor<FishSchool>>(() => MethodAccessor<FishSchool>.Create("GetNewPosition"));

		public static void Awake(this FishSchool __self) => _Awake757602046.Value.Invoke(__self);
		public static void OnEnable(this FishSchool __self) => _OnEnable757602046.Value.Invoke(__self);
		public static void LateEnable(this FishSchool __self) => _LateEnable757602046.Value.Invoke(__self);
		public static void OnDisable(this FishSchool __self) => _OnDisable757602046.Value.Invoke(__self);
		public static void Update(this FishSchool __self) => _Update757602046.Value.Invoke(__self);
		public static void OnDrawGizmosSelected(this FishSchool __self) => _OnDrawGizmosSelected757602046.Value.Invoke(__self);
		public static UnityEngine.Vector3 GetNewPosition(this FishSchool __self) => (UnityEngine.Vector3)_GetNewPosition757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Fixer
	{

		private static readonly System.Lazy<FieldAccessor<Fixer, System.Collections.Generic.List<Fixer_Component_ABS>>> _all_fixers =
				new System.Lazy<FieldAccessor<Fixer, System.Collections.Generic.List<Fixer_Component_ABS>>>(() => FieldAccessor<Fixer, System.Collections.Generic.List<Fixer_Component_ABS>>.Create("all_fixers"));

		public static System.Collections.Generic.List<Fixer_Component_ABS> GetAll_fixers(this Fixer __self) => _all_fixers.Value.GetValue(__self);
		public static void SetAll_fixers(this Fixer __self, System.Collections.Generic.List<Fixer_Component_ABS> value) => _all_fixers.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Fixer>> _Awake757602046 =
				new System.Lazy<MethodAccessor<Fixer>>(() => MethodAccessor<Fixer>.Create("Awake"));

		public static void Awake(this Fixer __self) => _Awake757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Fixer_Component_LandmarkEntityCollection
	{

		private static readonly System.Lazy<MethodAccessor<Fixer_Component_LandmarkEntityCollection>> _DoesCollectionHaveAllSpawners1756798829 =
				new System.Lazy<MethodAccessor<Fixer_Component_LandmarkEntityCollection>>(() => MethodAccessor<Fixer_Component_LandmarkEntityCollection>.Create("DoesCollectionHaveAllSpawners", typeof(UnityEngine.Transform), typeof(LandmarkEntityCollection)));
		private static readonly System.Lazy<MethodAccessor<Fixer_Component_LandmarkEntityCollection>> _GetChildSpawners3437001883 =
				new System.Lazy<MethodAccessor<Fixer_Component_LandmarkEntityCollection>>(() => MethodAccessor<Fixer_Component_LandmarkEntityCollection>.Create("GetChildSpawners", typeof(UnityEngine.Transform)));

		public static bool DoesCollectionHaveAllSpawners(this Fixer_Component_LandmarkEntityCollection __self, UnityEngine.Transform parentSceneRoot, LandmarkEntityCollection collection) => (bool)_DoesCollectionHaveAllSpawners1756798829.Value.Invoke(__self, parentSceneRoot, collection);
		public static LandmarkEntitySpawner[] GetChildSpawners(this Fixer_Component_LandmarkEntityCollection __self, UnityEngine.Transform target) => (LandmarkEntitySpawner[])_GetChildSpawners3437001883.Value.Invoke(__self, target);

	}

	public static class PrivateAccessor_Fixer_Component_LandmarkIndex
	{

		private static readonly System.Lazy<MethodAccessor<Fixer_Component_LandmarkIndex>> _IsCorrectIndexNavMeshIndexComparedToSceneName3437001883 =
				new System.Lazy<MethodAccessor<Fixer_Component_LandmarkIndex>>(() => MethodAccessor<Fixer_Component_LandmarkIndex>.Create("IsCorrectIndexNavMeshIndexComparedToSceneName", typeof(UnityEngine.Transform)));
		private static readonly System.Lazy<MethodAccessor<Fixer_Component_LandmarkIndex>> _GetSceneIndexFromSceneName3437001883 =
				new System.Lazy<MethodAccessor<Fixer_Component_LandmarkIndex>>(() => MethodAccessor<Fixer_Component_LandmarkIndex>.Create("GetSceneIndexFromSceneName", typeof(UnityEngine.Transform)));
		private static readonly System.Lazy<MethodAccessor<Fixer_Component_LandmarkIndex>> _GetNavmeshObjectNameFromTransformName3449231265 =
				new System.Lazy<MethodAccessor<Fixer_Component_LandmarkIndex>>(() => MethodAccessor<Fixer_Component_LandmarkIndex>.Create("GetNavmeshObjectNameFromTransformName", typeof(UnityEngine.AI.NavMeshSurface)));
		private static readonly System.Lazy<MethodAccessor<Fixer_Component_LandmarkIndex>> _GetStringIntAtEndofString3454057852 =
				new System.Lazy<MethodAccessor<Fixer_Component_LandmarkIndex>>(() => MethodAccessor<Fixer_Component_LandmarkIndex>.Create("GetStringIntAtEndofString", typeof(string)));

		public static bool IsCorrectIndexNavMeshIndexComparedToSceneName(this Fixer_Component_LandmarkIndex __self, UnityEngine.Transform target) => (bool)_IsCorrectIndexNavMeshIndexComparedToSceneName3437001883.Value.Invoke(__self, target);
		public static int GetSceneIndexFromSceneName(this Fixer_Component_LandmarkIndex __self, UnityEngine.Transform target) => (int)_GetSceneIndexFromSceneName3437001883.Value.Invoke(__self, target);
		public static int GetNavmeshObjectNameFromTransformName(this Fixer_Component_LandmarkIndex __self, UnityEngine.AI.NavMeshSurface surf) => (int)_GetNavmeshObjectNameFromTransformName3449231265.Value.Invoke(__self, surf);
		public static string GetStringIntAtEndofString(this Fixer_Component_LandmarkIndex __self, string input) => (string)_GetStringIntAtEndofString3454057852.Value.Invoke(__self, input);

	}

	public static class PrivateAccessor_Fixer_Component_LandmarkRegion
	{

		private static readonly System.Lazy<MethodAccessor<Fixer_Component_LandmarkRegion>> _HasRegion3437001883 =
				new System.Lazy<MethodAccessor<Fixer_Component_LandmarkRegion>>(() => MethodAccessor<Fixer_Component_LandmarkRegion>.Create("HasRegion", typeof(UnityEngine.Transform)));

		public static bool HasRegion(this Fixer_Component_LandmarkRegion __self, UnityEngine.Transform target) => (bool)_HasRegion3437001883.Value.Invoke(__self, target);

	}

	public static class PrivateAccessor_Fixer_Component_OneTimePickup
	{

		private static readonly System.Lazy<MethodAccessor<Fixer_Component_OneTimePickup>> _GetPickupNames3472496420 =
				new System.Lazy<MethodAccessor<Fixer_Component_OneTimePickup>>(() => MethodAccessor<Fixer_Component_OneTimePickup>.Create("GetPickupNames", typeof(System.Collections.Generic.List<LandmarkItem>)));

		public static string GetPickupNames(this Fixer_Component_OneTimePickup __self, System.Collections.Generic.List<LandmarkItem> pickups) => (string)_GetPickupNames3472496420.Value.Invoke(__self, pickups);

	}

	public static class PrivateAccessor_Fixer_Component_TransformByNameExists
	{

		private static readonly System.Lazy<FieldAccessor<Fixer_Component_TransformByNameExists, string>> _name =
				new System.Lazy<FieldAccessor<Fixer_Component_TransformByNameExists, string>>(() => FieldAccessor<Fixer_Component_TransformByNameExists, string>.Create("name"));

		public static string GetName(this Fixer_Component_TransformByNameExists __self) => _name.Value.GetValue(__self);
		public static void SetName(this Fixer_Component_TransformByNameExists __self, string value) => _name.Value.SetValue(__self, value);

	}

	public static class Private_GameModeValueManager
	{

		private static readonly System.Lazy<StaticFieldAccessor<SO_GameModeValue>> _currentDifficulty =
				new System.Lazy<StaticFieldAccessor<SO_GameModeValue>>(() => StaticFieldAccessor<SO_GameModeValue>.Create(typeof(GameModeValueManager), "currentDifficulty"));
		private static readonly System.Lazy<StaticFieldAccessor<bool>> _isSetup =
				new System.Lazy<StaticFieldAccessor<bool>>(() => StaticFieldAccessor<bool>.Create(typeof(GameModeValueManager), "isSetup"));
		private static readonly System.Lazy<StaticFieldAccessor<SO_GameModeValue>> _creative =
				new System.Lazy<StaticFieldAccessor<SO_GameModeValue>>(() => StaticFieldAccessor<SO_GameModeValue>.Create(typeof(GameModeValueManager), "creative"));
		private static readonly System.Lazy<StaticFieldAccessor<SO_GameModeValue>> _peaceful =
				new System.Lazy<StaticFieldAccessor<SO_GameModeValue>>(() => StaticFieldAccessor<SO_GameModeValue>.Create(typeof(GameModeValueManager), "peaceful"));
		private static readonly System.Lazy<StaticFieldAccessor<SO_GameModeValue>> _normal =
				new System.Lazy<StaticFieldAccessor<SO_GameModeValue>>(() => StaticFieldAccessor<SO_GameModeValue>.Create(typeof(GameModeValueManager), "normal"));
		private static readonly System.Lazy<StaticFieldAccessor<SO_GameModeValue>> _hard =
				new System.Lazy<StaticFieldAccessor<SO_GameModeValue>>(() => StaticFieldAccessor<SO_GameModeValue>.Create(typeof(GameModeValueManager), "hard"));
		private static readonly System.Lazy<StaticFieldAccessor<SO_GameModeValue[]>> _gameModeValues =
				new System.Lazy<StaticFieldAccessor<SO_GameModeValue[]>>(() => StaticFieldAccessor<SO_GameModeValue[]>.Create(typeof(GameModeValueManager), "gameModeValues"));

		public static SO_GameModeValue GetCurrentDifficulty() => _currentDifficulty.Value.GetValue();
		public static void SetCurrentDifficulty(SO_GameModeValue value) => _currentDifficulty.Value.SetValue(value);
		public static bool GetIsSetup() => _isSetup.Value.GetValue();
		public static void SetIsSetup(bool value) => _isSetup.Value.SetValue(value);
		public static SO_GameModeValue GetCreative() => _creative.Value.GetValue();
		public static void SetCreative(SO_GameModeValue value) => _creative.Value.SetValue(value);
		public static SO_GameModeValue GetPeaceful() => _peaceful.Value.GetValue();
		public static void SetPeaceful(SO_GameModeValue value) => _peaceful.Value.SetValue(value);
		public static SO_GameModeValue GetNormal() => _normal.Value.GetValue();
		public static void SetNormal(SO_GameModeValue value) => _normal.Value.SetValue(value);
		public static SO_GameModeValue GetHard() => _hard.Value.GetValue();
		public static void SetHard(SO_GameModeValue value) => _hard.Value.SetValue(value);
		public static SO_GameModeValue[] GetGameModeValues() => _gameModeValues.Value.GetValue();
		public static void SetGameModeValues(SO_GameModeValue[] value) => _gameModeValues.Value.SetValue(value);

	}

	public static class Private_AchievementHandler
	{

		private static readonly System.Lazy<StaticFieldAccessor<System.Collections.Generic.Dictionary<AchievementType, Achievement>>> _Achievements =
				new System.Lazy<StaticFieldAccessor<System.Collections.Generic.Dictionary<AchievementType, Achievement>>>(() => StaticFieldAccessor<System.Collections.Generic.Dictionary<AchievementType, Achievement>>.Create(typeof(AchievementHandler), "Achievements"));
		private static readonly System.Lazy<StaticFieldAccessor<int>> _Stat_build_foundationCount =
				new System.Lazy<StaticFieldAccessor<int>>(() => StaticFieldAccessor<int>.Create(typeof(AchievementHandler), "Stat_build_foundationCount"));
		private static readonly System.Lazy<StaticFieldAccessor<int>> _Stat_build_paintCount =
				new System.Lazy<StaticFieldAccessor<int>>(() => StaticFieldAccessor<int>.Create(typeof(AchievementHandler), "Stat_build_paintCount"));
		private static readonly System.Lazy<StaticFieldAccessor<int>> _Stat_build_removeCount =
				new System.Lazy<StaticFieldAccessor<int>>(() => StaticFieldAccessor<int>.Create(typeof(AchievementHandler), "Stat_build_removeCount"));
		private static readonly System.Lazy<StaticFieldAccessor<int>> _Stat_player_sharkKills =
				new System.Lazy<StaticFieldAccessor<int>>(() => StaticFieldAccessor<int>.Create(typeof(AchievementHandler), "Stat_player_sharkKills"));
		private static readonly System.Lazy<StaticFieldAccessor<int>> _Stat_player_birdKills =
				new System.Lazy<StaticFieldAccessor<int>>(() => StaticFieldAccessor<int>.Create(typeof(AchievementHandler), "Stat_player_birdKills"));
		private static readonly System.Lazy<StaticFieldAccessor<int>> _Stat_player_hookCount =
				new System.Lazy<StaticFieldAccessor<int>>(() => StaticFieldAccessor<int>.Create(typeof(AchievementHandler), "Stat_player_hookCount"));
		private static readonly System.Lazy<StaticFieldAccessor<int>> _Stat_player_deaths =
				new System.Lazy<StaticFieldAccessor<int>>(() => StaticFieldAccessor<int>.Create(typeof(AchievementHandler), "Stat_player_deaths"));
		private static readonly System.Lazy<StaticFieldAccessor<int>> _Stat_player_stoneBirdKills =
				new System.Lazy<StaticFieldAccessor<int>>(() => StaticFieldAccessor<int>.Create(typeof(AchievementHandler), "Stat_player_stoneBirdKills"));
		private static readonly System.Lazy<StaticFieldAccessor<int>> _Stat_player_pufferfishKills =
				new System.Lazy<StaticFieldAccessor<int>>(() => StaticFieldAccessor<int>.Create(typeof(AchievementHandler), "Stat_player_pufferfishKills"));
		private static readonly System.Lazy<StaticFieldAccessor<int>> _Stat_player_boarKills =
				new System.Lazy<StaticFieldAccessor<int>>(() => StaticFieldAccessor<int>.Create(typeof(AchievementHandler), "Stat_player_boarKills"));
		private static readonly System.Lazy<StaticFieldAccessor<int>> _Stat_player_capturedAnimals =
				new System.Lazy<StaticFieldAccessor<int>>(() => StaticFieldAccessor<int>.Create(typeof(AchievementHandler), "Stat_player_capturedAnimals"));
		private static readonly System.Lazy<StaticFieldAccessor<int>> _Stat_player_ratKills =
				new System.Lazy<StaticFieldAccessor<int>>(() => StaticFieldAccessor<int>.Create(typeof(AchievementHandler), "Stat_player_ratKills"));
		private static readonly System.Lazy<StaticFieldAccessor<int>> _Stat_player_bearKills =
				new System.Lazy<StaticFieldAccessor<int>>(() => StaticFieldAccessor<int>.Create(typeof(AchievementHandler), "Stat_player_bearKills"));
		private static readonly System.Lazy<StaticFieldAccessor<int>> _Stat_player_anglerFishKills =
				new System.Lazy<StaticFieldAccessor<int>>(() => StaticFieldAccessor<int>.Create(typeof(AchievementHandler), "Stat_player_anglerFishKills"));
		private static readonly System.Lazy<StaticFieldAccessor<int>> _Stat_player_captures_bee =
				new System.Lazy<StaticFieldAccessor<int>>(() => StaticFieldAccessor<int>.Create(typeof(AchievementHandler), "Stat_player_captures_bee"));
		private static readonly System.Lazy<StaticFieldAccessor<int>> _Stat_player_excevations_treasure =
				new System.Lazy<StaticFieldAccessor<int>>(() => StaticFieldAccessor<int>.Create(typeof(AchievementHandler), "Stat_player_excevations_treasure"));
		private static readonly System.Lazy<StaticFieldAccessor<int>> _Stat_player_botKills =
				new System.Lazy<StaticFieldAccessor<int>>(() => StaticFieldAccessor<int>.Create(typeof(AchievementHandler), "Stat_player_botKills"));
		private static readonly System.Lazy<StaticFieldAccessor<int>> _Stat_player_zipline_distance =
				new System.Lazy<StaticFieldAccessor<int>>(() => StaticFieldAccessor<int>.Create(typeof(AchievementHandler), "Stat_player_zipline_distance"));
		private static readonly System.Lazy<StaticFieldAccessor<int>> _Stat_player_zipline_distanceOneGo =
				new System.Lazy<StaticFieldAccessor<int>>(() => StaticFieldAccessor<int>.Create(typeof(AchievementHandler), "Stat_player_zipline_distanceOneGo"));
		private static readonly System.Lazy<StaticFieldAccessor<int>> _Stat_player_token_spend_tangaroa =
				new System.Lazy<StaticFieldAccessor<int>>(() => StaticFieldAccessor<int>.Create(typeof(AchievementHandler), "Stat_player_token_spend_tangaroa"));
		private static readonly System.Lazy<StaticFieldAccessor<int>> _Stat_player_instrumentNotes_played =
				new System.Lazy<StaticFieldAccessor<int>>(() => StaticFieldAccessor<int>.Create(typeof(AchievementHandler), "Stat_player_instrumentNotes_played"));
		private static readonly System.Lazy<StaticFieldAccessor<int>> _Stat_player_fireworks_launched =
				new System.Lazy<StaticFieldAccessor<int>>(() => StaticFieldAccessor<int>.Create(typeof(AchievementHandler), "Stat_player_fireworks_launched"));
		private static readonly System.Lazy<StaticFieldAccessor<bool>> _TempStat_builtSail =
				new System.Lazy<StaticFieldAccessor<bool>>(() => StaticFieldAccessor<bool>.Create(typeof(AchievementHandler), "TempStat_builtSail"));
		private static readonly System.Lazy<StaticFieldAccessor<bool>> _TempStat_builtBigAnchor =
				new System.Lazy<StaticFieldAccessor<bool>>(() => StaticFieldAccessor<bool>.Create(typeof(AchievementHandler), "TempStat_builtBigAnchor"));
		private static readonly System.Lazy<StaticFieldAccessor<bool>> _TempStat_cookedARecipie =
				new System.Lazy<StaticFieldAccessor<bool>>(() => StaticFieldAccessor<bool>.Create(typeof(AchievementHandler), "TempStat_cookedARecipie"));
		private static readonly System.Lazy<StaticFieldAccessor<bool>> _TempStat_allMysteryLootUnlocked =
				new System.Lazy<StaticFieldAccessor<bool>>(() => StaticFieldAccessor<bool>.Create(typeof(AchievementHandler), "TempStat_allMysteryLootUnlocked"));
		private static readonly System.Lazy<StaticFieldAccessor<bool>> _initialized =
				new System.Lazy<StaticFieldAccessor<bool>>(() => StaticFieldAccessor<bool>.Create(typeof(AchievementHandler), "initialized"));
		private static readonly System.Lazy<StaticFieldAccessor<bool>> _storeStats =
				new System.Lazy<StaticFieldAccessor<bool>>(() => StaticFieldAccessor<bool>.Create(typeof(AchievementHandler), "storeStats"));
		private static readonly System.Lazy<StaticFieldAccessor<int>> _TempStat_pipesPlaced =
				new System.Lazy<StaticFieldAccessor<int>>(() => StaticFieldAccessor<int>.Create(typeof(AchievementHandler), "TempStat_pipesPlaced"));
		private static readonly System.Lazy<StaticFieldAccessor<int>> _TempStat_beeHivesPlaced =
				new System.Lazy<StaticFieldAccessor<int>>(() => StaticFieldAccessor<int>.Create(typeof(AchievementHandler), "TempStat_beeHivesPlaced"));
		private static readonly System.Lazy<StaticFieldAccessor<System.Collections.Generic.List<int>>> _uniquePaintingIndexes =
				new System.Lazy<StaticFieldAccessor<System.Collections.Generic.List<int>>>(() => StaticFieldAccessor<System.Collections.Generic.List<int>>.Create(typeof(AchievementHandler), "uniquePaintingIndexes"));

		public static System.Collections.Generic.Dictionary<AchievementType, Achievement> GetAchievements() => _Achievements.Value.GetValue();
		public static void SetAchievements(System.Collections.Generic.Dictionary<AchievementType, Achievement> value) => _Achievements.Value.SetValue(value);
		public static int GetStat_build_foundationCount() => _Stat_build_foundationCount.Value.GetValue();
		public static void SetStat_build_foundationCount(int value) => _Stat_build_foundationCount.Value.SetValue(value);
		public static int GetStat_build_paintCount() => _Stat_build_paintCount.Value.GetValue();
		public static void SetStat_build_paintCount(int value) => _Stat_build_paintCount.Value.SetValue(value);
		public static int GetStat_build_removeCount() => _Stat_build_removeCount.Value.GetValue();
		public static void SetStat_build_removeCount(int value) => _Stat_build_removeCount.Value.SetValue(value);
		public static int GetStat_player_sharkKills() => _Stat_player_sharkKills.Value.GetValue();
		public static void SetStat_player_sharkKills(int value) => _Stat_player_sharkKills.Value.SetValue(value);
		public static int GetStat_player_birdKills() => _Stat_player_birdKills.Value.GetValue();
		public static void SetStat_player_birdKills(int value) => _Stat_player_birdKills.Value.SetValue(value);
		public static int GetStat_player_hookCount() => _Stat_player_hookCount.Value.GetValue();
		public static void SetStat_player_hookCount(int value) => _Stat_player_hookCount.Value.SetValue(value);
		public static int GetStat_player_deaths() => _Stat_player_deaths.Value.GetValue();
		public static void SetStat_player_deaths(int value) => _Stat_player_deaths.Value.SetValue(value);
		public static int GetStat_player_stoneBirdKills() => _Stat_player_stoneBirdKills.Value.GetValue();
		public static void SetStat_player_stoneBirdKills(int value) => _Stat_player_stoneBirdKills.Value.SetValue(value);
		public static int GetStat_player_pufferfishKills() => _Stat_player_pufferfishKills.Value.GetValue();
		public static void SetStat_player_pufferfishKills(int value) => _Stat_player_pufferfishKills.Value.SetValue(value);
		public static int GetStat_player_boarKills() => _Stat_player_boarKills.Value.GetValue();
		public static void SetStat_player_boarKills(int value) => _Stat_player_boarKills.Value.SetValue(value);
		public static int GetStat_player_capturedAnimals() => _Stat_player_capturedAnimals.Value.GetValue();
		public static void SetStat_player_capturedAnimals(int value) => _Stat_player_capturedAnimals.Value.SetValue(value);
		public static int GetStat_player_ratKills() => _Stat_player_ratKills.Value.GetValue();
		public static void SetStat_player_ratKills(int value) => _Stat_player_ratKills.Value.SetValue(value);
		public static int GetStat_player_bearKills() => _Stat_player_bearKills.Value.GetValue();
		public static void SetStat_player_bearKills(int value) => _Stat_player_bearKills.Value.SetValue(value);
		public static int GetStat_player_anglerFishKills() => _Stat_player_anglerFishKills.Value.GetValue();
		public static void SetStat_player_anglerFishKills(int value) => _Stat_player_anglerFishKills.Value.SetValue(value);
		public static int GetStat_player_captures_bee() => _Stat_player_captures_bee.Value.GetValue();
		public static void SetStat_player_captures_bee(int value) => _Stat_player_captures_bee.Value.SetValue(value);
		public static int GetStat_player_excevations_treasure() => _Stat_player_excevations_treasure.Value.GetValue();
		public static void SetStat_player_excevations_treasure(int value) => _Stat_player_excevations_treasure.Value.SetValue(value);
		public static int GetStat_player_botKills() => _Stat_player_botKills.Value.GetValue();
		public static void SetStat_player_botKills(int value) => _Stat_player_botKills.Value.SetValue(value);
		public static int GetStat_player_zipline_distance() => _Stat_player_zipline_distance.Value.GetValue();
		public static void SetStat_player_zipline_distance(int value) => _Stat_player_zipline_distance.Value.SetValue(value);
		public static int GetStat_player_zipline_distanceOneGo() => _Stat_player_zipline_distanceOneGo.Value.GetValue();
		public static void SetStat_player_zipline_distanceOneGo(int value) => _Stat_player_zipline_distanceOneGo.Value.SetValue(value);
		public static int GetStat_player_token_spend_tangaroa() => _Stat_player_token_spend_tangaroa.Value.GetValue();
		public static void SetStat_player_token_spend_tangaroa(int value) => _Stat_player_token_spend_tangaroa.Value.SetValue(value);
		public static int GetStat_player_instrumentNotes_played() => _Stat_player_instrumentNotes_played.Value.GetValue();
		public static void SetStat_player_instrumentNotes_played(int value) => _Stat_player_instrumentNotes_played.Value.SetValue(value);
		public static int GetStat_player_fireworks_launched() => _Stat_player_fireworks_launched.Value.GetValue();
		public static void SetStat_player_fireworks_launched(int value) => _Stat_player_fireworks_launched.Value.SetValue(value);
		public static bool GetTempStat_builtSail() => _TempStat_builtSail.Value.GetValue();
		public static void SetTempStat_builtSail(bool value) => _TempStat_builtSail.Value.SetValue(value);
		public static bool GetTempStat_builtBigAnchor() => _TempStat_builtBigAnchor.Value.GetValue();
		public static void SetTempStat_builtBigAnchor(bool value) => _TempStat_builtBigAnchor.Value.SetValue(value);
		public static bool GetTempStat_cookedARecipie() => _TempStat_cookedARecipie.Value.GetValue();
		public static void SetTempStat_cookedARecipie(bool value) => _TempStat_cookedARecipie.Value.SetValue(value);
		public static bool GetTempStat_allMysteryLootUnlocked() => _TempStat_allMysteryLootUnlocked.Value.GetValue();
		public static void SetTempStat_allMysteryLootUnlocked(bool value) => _TempStat_allMysteryLootUnlocked.Value.SetValue(value);
		public static bool GetInitialized() => _initialized.Value.GetValue();
		public static void SetInitialized(bool value) => _initialized.Value.SetValue(value);
		public static bool GetStoreStats() => _storeStats.Value.GetValue();
		public static void SetStoreStats(bool value) => _storeStats.Value.SetValue(value);
		public static int GetTempStat_pipesPlaced() => _TempStat_pipesPlaced.Value.GetValue();
		public static void SetTempStat_pipesPlaced(int value) => _TempStat_pipesPlaced.Value.SetValue(value);
		public static int GetTempStat_beeHivesPlaced() => _TempStat_beeHivesPlaced.Value.GetValue();
		public static void SetTempStat_beeHivesPlaced(int value) => _TempStat_beeHivesPlaced.Value.SetValue(value);
		public static System.Collections.Generic.List<int> GetUniquePaintingIndexes() => _uniquePaintingIndexes.Value.GetValue();
		public static void SetUniquePaintingIndexes(System.Collections.Generic.List<int> value) => _uniquePaintingIndexes.Value.SetValue(value);

		private static readonly System.Lazy<StaticMethodAccessor> _InitializeStatsAndAchievements757602046 =
				new System.Lazy<StaticMethodAccessor>(() => StaticMethodAccessor.Create(typeof(AchievementHandler), "InitializeStatsAndAchievements"));
		private static readonly System.Lazy<StaticMethodAccessor> _AddAchievement3480556368 =
				new System.Lazy<StaticMethodAccessor>(() => StaticMethodAccessor.Create(typeof(AchievementHandler), "AddAchievement", typeof(AchievementType)));
		private static readonly System.Lazy<StaticMethodAccessor> _EvaluateAchievement3475536844 =
				new System.Lazy<StaticMethodAccessor>(() => StaticMethodAccessor.Create(typeof(AchievementHandler), "EvaluateAchievement", typeof(Achievement)));
		private static readonly System.Lazy<StaticMethodAccessor> _UnlockAchievement3475536844 =
				new System.Lazy<StaticMethodAccessor>(() => StaticMethodAccessor.Create(typeof(AchievementHandler), "UnlockAchievement", typeof(Achievement)));
		private static readonly System.Lazy<StaticMethodAccessor> _OnCreateBlock1546667164 =
				new System.Lazy<StaticMethodAccessor>(() => StaticMethodAccessor.Create(typeof(AchievementHandler), "OnCreateBlock", typeof(Block), typeof(Network_Player), typeof(bool), typeof(int)));
		private static readonly System.Lazy<StaticMethodAccessor> _HasUnlockedAllItems3460401079 =
				new System.Lazy<StaticMethodAccessor>(() => StaticMethodAccessor.Create(typeof(AchievementHandler), "HasUnlockedAllItems", typeof(System.Collections.Generic.List<Item_Base>)));
		private static readonly System.Lazy<StaticMethodAccessor> _OnDayCountChange3486186818 =
				new System.Lazy<StaticMethodAccessor>(() => StaticMethodAccessor.Create(typeof(AchievementHandler), "OnDayCountChange", typeof(int)));

		public static void InitializeStatsAndAchievements() => _InitializeStatsAndAchievements757602046.Value.Invoke();
		public static void AddAchievement(AchievementType type) => _AddAchievement3480556368.Value.Invoke(type);
		public static void EvaluateAchievement(Achievement ach) => _EvaluateAchievement3475536844.Value.Invoke(ach);
		public static void UnlockAchievement(Achievement ach) => _UnlockAchievement3475536844.Value.Invoke(ach);
		public static void OnCreateBlock(Block block, Network_Player player, bool replicating, int hotSlotIndex) => _OnCreateBlock1546667164.Value.Invoke(block, player, replicating, hotSlotIndex);
		public static bool HasUnlockedAllItems(System.Collections.Generic.List<Item_Base> items) => (bool)_HasUnlockedAllItems3460401079.Value.Invoke(items);
		public static void OnDayCountChange(int dayCount) => _OnDayCountChange3486186818.Value.Invoke(dayCount);

	}

	public static class PrivateAccessor_AnimationEventCaller
	{

		private static readonly System.Lazy<FieldAccessor<AnimationEventCaller, System.Collections.Generic.List<AnimationConnection>>> _connections =
				new System.Lazy<FieldAccessor<AnimationEventCaller, System.Collections.Generic.List<AnimationConnection>>>(() => FieldAccessor<AnimationEventCaller, System.Collections.Generic.List<AnimationConnection>>.Create("connections"));
		private static readonly System.Lazy<FieldAccessor<AnimationEventCaller, UnityEngine.Animator>> _anim =
				new System.Lazy<FieldAccessor<AnimationEventCaller, UnityEngine.Animator>>(() => FieldAccessor<AnimationEventCaller, UnityEngine.Animator>.Create("anim"));

		public static System.Collections.Generic.List<AnimationConnection> GetConnections(this AnimationEventCaller __self) => _connections.Value.GetValue(__self);
		public static void SetConnections(this AnimationEventCaller __self, System.Collections.Generic.List<AnimationConnection> value) => _connections.Value.SetValue(__self, value);
		public static UnityEngine.Animator GetAnim(this AnimationEventCaller __self) => _anim.Value.GetValue(__self);
		public static void SetAnim(this AnimationEventCaller __self, UnityEngine.Animator value) => _anim.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AnimationEventCaller>> _Update757602046 =
				new System.Lazy<MethodAccessor<AnimationEventCaller>>(() => MethodAccessor<AnimationEventCaller>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<AnimationEventCaller>> _OnValidate757602046 =
				new System.Lazy<MethodAccessor<AnimationEventCaller>>(() => MethodAccessor<AnimationEventCaller>.Create("OnValidate"));

		public static void Update(this AnimationEventCaller __self) => _Update757602046.Value.Invoke(__self);
		public static void OnValidate(this AnimationEventCaller __self) => _OnValidate757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AnimatorController
	{

		private static readonly System.Lazy<FieldAccessor<AnimatorController, System.Collections.Generic.List<string>>> _triggeredTriggers =
				new System.Lazy<FieldAccessor<AnimatorController, System.Collections.Generic.List<string>>>(() => FieldAccessor<AnimatorController, System.Collections.Generic.List<string>>.Create("triggeredTriggers"));

		public static System.Collections.Generic.List<string> GetTriggeredTriggers(this AnimatorController __self) => _triggeredTriggers.Value.GetValue(__self);
		public static void SetTriggeredTriggers(this AnimatorController __self, System.Collections.Generic.List<string> value) => _triggeredTriggers.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_AnimatorMessageForwarder_Olof
	{

		private static readonly System.Lazy<FieldAccessor<AnimatorMessageForwarder_Olof, FMODUnity.StudioEventEmitter>> _emitter_footstep =
				new System.Lazy<FieldAccessor<AnimatorMessageForwarder_Olof, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<AnimatorMessageForwarder_Olof, FMODUnity.StudioEventEmitter>.Create("emitter_footstep"));

		public static FMODUnity.StudioEventEmitter GetEmitter_footstep(this AnimatorMessageForwarder_Olof __self) => _emitter_footstep.Value.GetValue(__self);
		public static void SetEmitter_footstep(this AnimatorMessageForwarder_Olof __self, FMODUnity.StudioEventEmitter value) => _emitter_footstep.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_AnimatorRandomizeFloat
	{

		private static readonly System.Lazy<FieldAccessor<AnimatorRandomizeFloat, UnityEngine.Animator>> _animator =
				new System.Lazy<FieldAccessor<AnimatorRandomizeFloat, UnityEngine.Animator>>(() => FieldAccessor<AnimatorRandomizeFloat, UnityEngine.Animator>.Create("animator"));
		private static readonly System.Lazy<FieldAccessor<AnimatorRandomizeFloat, string>> _parameter =
				new System.Lazy<FieldAccessor<AnimatorRandomizeFloat, string>>(() => FieldAccessor<AnimatorRandomizeFloat, string>.Create("parameter"));
		private static readonly System.Lazy<FieldAccessor<AnimatorRandomizeFloat, TimerEventer>> _switchTimer =
				new System.Lazy<FieldAccessor<AnimatorRandomizeFloat, TimerEventer>>(() => FieldAccessor<AnimatorRandomizeFloat, TimerEventer>.Create("switchTimer"));
		private static readonly System.Lazy<FieldAccessor<AnimatorRandomizeFloat, Interval_Float>> _interval =
				new System.Lazy<FieldAccessor<AnimatorRandomizeFloat, Interval_Float>>(() => FieldAccessor<AnimatorRandomizeFloat, Interval_Float>.Create("interval"));
		private static readonly System.Lazy<FieldAccessor<AnimatorRandomizeFloat, float>> _lerpSpeed =
				new System.Lazy<FieldAccessor<AnimatorRandomizeFloat, float>>(() => FieldAccessor<AnimatorRandomizeFloat, float>.Create("lerpSpeed"));
		private static readonly System.Lazy<FieldAccessor<AnimatorRandomizeFloat, float>> _target =
				new System.Lazy<FieldAccessor<AnimatorRandomizeFloat, float>>(() => FieldAccessor<AnimatorRandomizeFloat, float>.Create("target"));

		public static UnityEngine.Animator GetAnimator(this AnimatorRandomizeFloat __self) => _animator.Value.GetValue(__self);
		public static void SetAnimator(this AnimatorRandomizeFloat __self, UnityEngine.Animator value) => _animator.Value.SetValue(__self, value);
		public static string GetParameter(this AnimatorRandomizeFloat __self) => _parameter.Value.GetValue(__self);
		public static void SetParameter(this AnimatorRandomizeFloat __self, string value) => _parameter.Value.SetValue(__self, value);
		public static TimerEventer GetSwitchTimer(this AnimatorRandomizeFloat __self) => _switchTimer.Value.GetValue(__self);
		public static void SetSwitchTimer(this AnimatorRandomizeFloat __self, TimerEventer value) => _switchTimer.Value.SetValue(__self, value);
		public static Interval_Float GetInterval(this AnimatorRandomizeFloat __self) => _interval.Value.GetValue(__self);
		public static void SetInterval(this AnimatorRandomizeFloat __self, Interval_Float value) => _interval.Value.SetValue(__self, value);
		public static float GetLerpSpeed(this AnimatorRandomizeFloat __self) => _lerpSpeed.Value.GetValue(__self);
		public static void SetLerpSpeed(this AnimatorRandomizeFloat __self, float value) => _lerpSpeed.Value.SetValue(__self, value);
		public static float GetTarget(this AnimatorRandomizeFloat __self) => _target.Value.GetValue(__self);
		public static void SetTarget(this AnimatorRandomizeFloat __self, float value) => _target.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AnimatorRandomizeFloat>> _Update757602046 =
				new System.Lazy<MethodAccessor<AnimatorRandomizeFloat>>(() => MethodAccessor<AnimatorRandomizeFloat>.Create("Update"));

		public static void Update(this AnimatorRandomizeFloat __self) => _Update757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AssignSplat
	{

		private static readonly System.Lazy<MethodAccessor<AssignSplat>> _OnValidate757602046 =
				new System.Lazy<MethodAccessor<AssignSplat>>(() => MethodAccessor<AssignSplat>.Create("OnValidate"));
		private static readonly System.Lazy<MethodAccessor<AssignSplat>> _IsPaintTextureIndex3486186818 =
				new System.Lazy<MethodAccessor<AssignSplat>>(() => MethodAccessor<AssignSplat>.Create("IsPaintTextureIndex", typeof(int)));

		public static void OnValidate(this AssignSplat __self) => _OnValidate757602046.Value.Invoke(__self);
		public static bool IsPaintTextureIndex(this AssignSplat __self, int textureIndex) => (bool)_IsPaintTextureIndex3486186818.Value.Invoke(__self, textureIndex);

	}

	public static class PrivateAccessor_BillboardObject
	{

		private static readonly System.Lazy<FieldAccessor<BillboardObject, float>> _hideDistanceFromCamera =
				new System.Lazy<FieldAccessor<BillboardObject, float>>(() => FieldAccessor<BillboardObject, float>.Create("hideDistanceFromCamera"));
		private static readonly System.Lazy<FieldAccessor<BillboardObject, UnityEngine.GameObject>> _bilboardObject =
				new System.Lazy<FieldAccessor<BillboardObject, UnityEngine.GameObject>>(() => FieldAccessor<BillboardObject, UnityEngine.GameObject>.Create("bilboardObject"));
		private static readonly System.Lazy<FieldAccessor<BillboardObject, UnityEngine.Transform>> _targetToLookAt =
				new System.Lazy<FieldAccessor<BillboardObject, UnityEngine.Transform>>(() => FieldAccessor<BillboardObject, UnityEngine.Transform>.Create("targetToLookAt"));

		public static float GetHideDistanceFromCamera(this BillboardObject __self) => _hideDistanceFromCamera.Value.GetValue(__self);
		public static void SetHideDistanceFromCamera(this BillboardObject __self, float value) => _hideDistanceFromCamera.Value.SetValue(__self, value);
		public static UnityEngine.GameObject GetBilboardObject(this BillboardObject __self) => _bilboardObject.Value.GetValue(__self);
		public static void SetBilboardObject(this BillboardObject __self, UnityEngine.GameObject value) => _bilboardObject.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetTargetToLookAt(this BillboardObject __self) => _targetToLookAt.Value.GetValue(__self);
		public static void SetTargetToLookAt(this BillboardObject __self, UnityEngine.Transform value) => _targetToLookAt.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<BillboardObject>> _Update757602046 =
				new System.Lazy<MethodAccessor<BillboardObject>>(() => MethodAccessor<BillboardObject>.Create("Update"));

		public static void Update(this BillboardObject __self) => _Update757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_BillboardToCamera
	{

		private static readonly System.Lazy<FieldAccessor<BillboardToCamera, bool>> _lockX =
				new System.Lazy<FieldAccessor<BillboardToCamera, bool>>(() => FieldAccessor<BillboardToCamera, bool>.Create("lockX"));
		private static readonly System.Lazy<FieldAccessor<BillboardToCamera, bool>> _lockY =
				new System.Lazy<FieldAccessor<BillboardToCamera, bool>>(() => FieldAccessor<BillboardToCamera, bool>.Create("lockY"));
		private static readonly System.Lazy<FieldAccessor<BillboardToCamera, bool>> _lockZ =
				new System.Lazy<FieldAccessor<BillboardToCamera, bool>>(() => FieldAccessor<BillboardToCamera, bool>.Create("lockZ"));
		private static readonly System.Lazy<FieldAccessor<BillboardToCamera, UnityEngine.Transform>> _cameraTransform =
				new System.Lazy<FieldAccessor<BillboardToCamera, UnityEngine.Transform>>(() => FieldAccessor<BillboardToCamera, UnityEngine.Transform>.Create("cameraTransform"));
		private static readonly System.Lazy<FieldAccessor<BillboardToCamera, UnityEngine.Vector3>> _localEulerStart =
				new System.Lazy<FieldAccessor<BillboardToCamera, UnityEngine.Vector3>>(() => FieldAccessor<BillboardToCamera, UnityEngine.Vector3>.Create("localEulerStart"));

		public static bool GetLockX(this BillboardToCamera __self) => _lockX.Value.GetValue(__self);
		public static void SetLockX(this BillboardToCamera __self, bool value) => _lockX.Value.SetValue(__self, value);
		public static bool GetLockY(this BillboardToCamera __self) => _lockY.Value.GetValue(__self);
		public static void SetLockY(this BillboardToCamera __self, bool value) => _lockY.Value.SetValue(__self, value);
		public static bool GetLockZ(this BillboardToCamera __self) => _lockZ.Value.GetValue(__self);
		public static void SetLockZ(this BillboardToCamera __self, bool value) => _lockZ.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetCameraTransform(this BillboardToCamera __self) => _cameraTransform.Value.GetValue(__self);
		public static void SetCameraTransform(this BillboardToCamera __self, UnityEngine.Transform value) => _cameraTransform.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetLocalEulerStart(this BillboardToCamera __self) => _localEulerStart.Value.GetValue(__self);
		public static void SetLocalEulerStart(this BillboardToCamera __self, UnityEngine.Vector3 value) => _localEulerStart.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<BillboardToCamera>> _Awake757602046 =
				new System.Lazy<MethodAccessor<BillboardToCamera>>(() => MethodAccessor<BillboardToCamera>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<BillboardToCamera>> _Update757602046 =
				new System.Lazy<MethodAccessor<BillboardToCamera>>(() => MethodAccessor<BillboardToCamera>.Create("Update"));

		public static void Awake(this BillboardToCamera __self) => _Awake757602046.Value.Invoke(__self);
		public static void Update(this BillboardToCamera __self) => _Update757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_GameMenu
	{

		private static readonly System.Lazy<FieldAccessor<GameMenu, bool>> _isOpen =
				new System.Lazy<FieldAccessor<GameMenu, bool>>(() => FieldAccessor<GameMenu, bool>.Create("isOpen"));

		public static bool GetIsOpen(this GameMenu __self) => _isOpen.Value.GetValue(__self);
		public static void SetIsOpen(this GameMenu __self, bool value) => _isOpen.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_CanvasHelper
	{

		private static readonly System.Lazy<FieldAccessor<CanvasHelper, GameMenu[]>> _gameMenus =
				new System.Lazy<FieldAccessor<CanvasHelper, GameMenu[]>>(() => FieldAccessor<CanvasHelper, GameMenu[]>.Create("gameMenus"));
		private static readonly System.Lazy<FieldAccessor<CanvasHelper, UnityEngine.Canvas[]>> _canvases =
				new System.Lazy<FieldAccessor<CanvasHelper, UnityEngine.Canvas[]>>(() => FieldAccessor<CanvasHelper, UnityEngine.Canvas[]>.Create("canvases"));
		private static readonly System.Lazy<FieldAccessor<CanvasHelper, UnityEngine.Material>> _fatigueBackgroundMaterialInst =
				new System.Lazy<FieldAccessor<CanvasHelper, UnityEngine.Material>>(() => FieldAccessor<CanvasHelper, UnityEngine.Material>.Create("fatigueBackgroundMaterialInst"));
		private static readonly System.Lazy<FieldAccessor<CanvasHelper, UnityEngine.Material>> _fatigueMeterMaterialInst =
				new System.Lazy<FieldAccessor<CanvasHelper, UnityEngine.Material>>(() => FieldAccessor<CanvasHelper, UnityEngine.Material>.Create("fatigueMeterMaterialInst"));
		private static readonly System.Lazy<FieldAccessor<CanvasHelper, UnityEngine.Sprite>> _defaultAimSprite =
				new System.Lazy<FieldAccessor<CanvasHelper, UnityEngine.Sprite>>(() => FieldAccessor<CanvasHelper, UnityEngine.Sprite>.Create("defaultAimSprite"));
		private static readonly System.Lazy<FieldAccessor<CanvasHelper, UnityEngine.Sprite>> _gatherHookAimSprite =
				new System.Lazy<FieldAccessor<CanvasHelper, UnityEngine.Sprite>>(() => FieldAccessor<CanvasHelper, UnityEngine.Sprite>.Create("gatherHookAimSprite"));
		private static readonly System.Lazy<FieldAccessor<CanvasHelper, UnityEngine.Sprite>> _gatherShovelAimSprite =
				new System.Lazy<FieldAccessor<CanvasHelper, UnityEngine.Sprite>>(() => FieldAccessor<CanvasHelper, UnityEngine.Sprite>.Create("gatherShovelAimSprite"));
		private static readonly System.Lazy<FieldAccessor<CanvasHelper, UnityEngine.Sprite>> _gatherShearAimSprite =
				new System.Lazy<FieldAccessor<CanvasHelper, UnityEngine.Sprite>>(() => FieldAccessor<CanvasHelper, UnityEngine.Sprite>.Create("gatherShearAimSprite"));
		private static readonly System.Lazy<FieldAccessor<CanvasHelper, UnityEngine.Sprite>> _gatherBucketAimSprite =
				new System.Lazy<FieldAccessor<CanvasHelper, UnityEngine.Sprite>>(() => FieldAccessor<CanvasHelper, UnityEngine.Sprite>.Create("gatherBucketAimSprite"));
		private static readonly System.Lazy<FieldAccessor<CanvasHelper, UnityEngine.Sprite>> _gatherMacheteAimSprite =
				new System.Lazy<FieldAccessor<CanvasHelper, UnityEngine.Sprite>>(() => FieldAccessor<CanvasHelper, UnityEngine.Sprite>.Create("gatherMacheteAimSprite"));
		private static readonly System.Lazy<FieldAccessor<CanvasHelper, UnityEngine.Sprite>> _gatherWoodAimSprite =
				new System.Lazy<FieldAccessor<CanvasHelper, UnityEngine.Sprite>>(() => FieldAccessor<CanvasHelper, UnityEngine.Sprite>.Create("gatherWoodAimSprite"));
		private static readonly System.Lazy<FieldAccessor<CanvasHelper, SoundManager>> _soundManager =
				new System.Lazy<FieldAccessor<CanvasHelper, SoundManager>>(() => FieldAccessor<CanvasHelper, SoundManager>.Create("soundManager"));
		private static readonly System.Lazy<FieldAccessor<CanvasHelper, Network_Player>> _playerNetwork =
				new System.Lazy<FieldAccessor<CanvasHelper, Network_Player>>(() => FieldAccessor<CanvasHelper, Network_Player>.Create("playerNetwork"));
		private static readonly System.Lazy<FieldAccessor<CanvasHelper, bool>> _canOpenMenu =
				new System.Lazy<FieldAccessor<CanvasHelper, bool>>(() => FieldAccessor<CanvasHelper, bool>.Create("canOpenMenu"));
		private static readonly System.Lazy<FieldAccessor<CanvasHelper, bool>> _UIState =
				new System.Lazy<FieldAccessor<CanvasHelper, bool>>(() => FieldAccessor<CanvasHelper, bool>.Create("UIState"));

		public static GameMenu[] GetGameMenus(this CanvasHelper __self) => _gameMenus.Value.GetValue(__self);
		public static void SetGameMenus(this CanvasHelper __self, GameMenu[] value) => _gameMenus.Value.SetValue(__self, value);
		public static UnityEngine.Canvas[] GetCanvases(this CanvasHelper __self) => _canvases.Value.GetValue(__self);
		public static void SetCanvases(this CanvasHelper __self, UnityEngine.Canvas[] value) => _canvases.Value.SetValue(__self, value);
		public static UnityEngine.Material GetFatigueBackgroundMaterialInst(this CanvasHelper __self) => _fatigueBackgroundMaterialInst.Value.GetValue(__self);
		public static void SetFatigueBackgroundMaterialInst(this CanvasHelper __self, UnityEngine.Material value) => _fatigueBackgroundMaterialInst.Value.SetValue(__self, value);
		public static UnityEngine.Material GetFatigueMeterMaterialInst(this CanvasHelper __self) => _fatigueMeterMaterialInst.Value.GetValue(__self);
		public static void SetFatigueMeterMaterialInst(this CanvasHelper __self, UnityEngine.Material value) => _fatigueMeterMaterialInst.Value.SetValue(__self, value);
		public static UnityEngine.Sprite GetDefaultAimSprite(this CanvasHelper __self) => _defaultAimSprite.Value.GetValue(__self);
		public static void SetDefaultAimSprite(this CanvasHelper __self, UnityEngine.Sprite value) => _defaultAimSprite.Value.SetValue(__self, value);
		public static UnityEngine.Sprite GetGatherHookAimSprite(this CanvasHelper __self) => _gatherHookAimSprite.Value.GetValue(__self);
		public static void SetGatherHookAimSprite(this CanvasHelper __self, UnityEngine.Sprite value) => _gatherHookAimSprite.Value.SetValue(__self, value);
		public static UnityEngine.Sprite GetGatherShovelAimSprite(this CanvasHelper __self) => _gatherShovelAimSprite.Value.GetValue(__self);
		public static void SetGatherShovelAimSprite(this CanvasHelper __self, UnityEngine.Sprite value) => _gatherShovelAimSprite.Value.SetValue(__self, value);
		public static UnityEngine.Sprite GetGatherShearAimSprite(this CanvasHelper __self) => _gatherShearAimSprite.Value.GetValue(__self);
		public static void SetGatherShearAimSprite(this CanvasHelper __self, UnityEngine.Sprite value) => _gatherShearAimSprite.Value.SetValue(__self, value);
		public static UnityEngine.Sprite GetGatherBucketAimSprite(this CanvasHelper __self) => _gatherBucketAimSprite.Value.GetValue(__self);
		public static void SetGatherBucketAimSprite(this CanvasHelper __self, UnityEngine.Sprite value) => _gatherBucketAimSprite.Value.SetValue(__self, value);
		public static UnityEngine.Sprite GetGatherMacheteAimSprite(this CanvasHelper __self) => _gatherMacheteAimSprite.Value.GetValue(__self);
		public static void SetGatherMacheteAimSprite(this CanvasHelper __self, UnityEngine.Sprite value) => _gatherMacheteAimSprite.Value.SetValue(__self, value);
		public static UnityEngine.Sprite GetGatherWoodAimSprite(this CanvasHelper __self) => _gatherWoodAimSprite.Value.GetValue(__self);
		public static void SetGatherWoodAimSprite(this CanvasHelper __self, UnityEngine.Sprite value) => _gatherWoodAimSprite.Value.SetValue(__self, value);
		public static SoundManager GetSoundManager(this CanvasHelper __self) => _soundManager.Value.GetValue(__self);
		public static void SetSoundManager(this CanvasHelper __self, SoundManager value) => _soundManager.Value.SetValue(__self, value);
		public static Network_Player GetPlayerNetwork(this CanvasHelper __self) => _playerNetwork.Value.GetValue(__self);
		public static void SetPlayerNetwork(this CanvasHelper __self, Network_Player value) => _playerNetwork.Value.SetValue(__self, value);
		public static bool GetCanOpenMenu(this CanvasHelper __self) => _canOpenMenu.Value.GetValue(__self);
		public static void SetCanOpenMenu(this CanvasHelper __self, bool value) => _canOpenMenu.Value.SetValue(__self, value);
		public static bool GetUIState(this CanvasHelper __self) => _UIState.Value.GetValue(__self);
		public static void SetUIState(this CanvasHelper __self, bool value) => _UIState.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<CanvasHelper>> _Awake757602046 =
				new System.Lazy<MethodAccessor<CanvasHelper>>(() => MethodAccessor<CanvasHelper>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<CanvasHelper>> _Start757602046 =
				new System.Lazy<MethodAccessor<CanvasHelper>>(() => MethodAccessor<CanvasHelper>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<CanvasHelper>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<CanvasHelper>>(() => MethodAccessor<CanvasHelper>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<CanvasHelper>> _OnWorldRecievedLate757602046 =
				new System.Lazy<MethodAccessor<CanvasHelper>>(() => MethodAccessor<CanvasHelper>.Create("OnWorldRecievedLate"));
		private static readonly System.Lazy<MethodAccessor<CanvasHelper>> _Update757602046 =
				new System.Lazy<MethodAccessor<CanvasHelper>>(() => MethodAccessor<CanvasHelper>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<CanvasHelper>> _ResetCanOpen757602046 =
				new System.Lazy<MethodAccessor<CanvasHelper>>(() => MethodAccessor<CanvasHelper>.Create("ResetCanOpen"));
		private static readonly System.Lazy<MethodAccessor<CanvasHelper>> _ShowSaveGameIcon3486905475 =
				new System.Lazy<MethodAccessor<CanvasHelper>>(() => MethodAccessor<CanvasHelper>.Create("ShowSaveGameIcon", typeof(float)));

		public static void Awake(this CanvasHelper __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this CanvasHelper __self) => _Start757602046.Value.Invoke(__self);
		public static void OnDestroy(this CanvasHelper __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void OnWorldRecievedLate(this CanvasHelper __self) => _OnWorldRecievedLate757602046.Value.Invoke(__self);
		public static void Update(this CanvasHelper __self) => _Update757602046.Value.Invoke(__self);
		public static void ResetCanOpen(this CanvasHelper __self) => _ResetCanOpen757602046.Value.Invoke(__self);
		public static System.Collections.IEnumerator ShowSaveGameIcon(this CanvasHelper __self, float timeOnScreen) => (System.Collections.IEnumerator)_ShowSaveGameIcon3486905475.Value.Invoke(__self, timeOnScreen);

	}

	public static class PrivateAccessor_CanvasPrinter
	{

		private static readonly System.Lazy<FieldAccessor<CanvasPrinter, UnityEngine.Camera>> _canvasCamera =
				new System.Lazy<FieldAccessor<CanvasPrinter, UnityEngine.Camera>>(() => FieldAccessor<CanvasPrinter, UnityEngine.Camera>.Create("canvasCamera"));

		public static UnityEngine.Camera GetCanvasCamera(this CanvasPrinter __self) => _canvasCamera.Value.GetValue(__self);
		public static void SetCanvasCamera(this CanvasPrinter __self, UnityEngine.Camera value) => _canvasCamera.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<CanvasPrinter>> _RenderCanvasToMaterialImp3427272519 =
				new System.Lazy<MethodAccessor<CanvasPrinter>>(() => MethodAccessor<CanvasPrinter>.Create("RenderCanvasToMaterialImp", typeof(UnityEngine.Canvas)));

		public static UnityEngine.RenderTexture RenderCanvasToMaterialImp(this CanvasPrinter __self, UnityEngine.Canvas canvas) => (UnityEngine.RenderTexture)_RenderCanvasToMaterialImp3427272519.Value.Invoke(__self, canvas);

	}

	public static class Private_CanvasPrinter
	{

		private static readonly System.Lazy<StaticFieldAccessor<CanvasPrinter>> _instance =
				new System.Lazy<StaticFieldAccessor<CanvasPrinter>>(() => StaticFieldAccessor<CanvasPrinter>.Create(typeof(CanvasPrinter), "instance"));

		public static CanvasPrinter GetInstance() => _instance.Value.GetValue();
		public static void SetInstance(CanvasPrinter value) => _instance.Value.SetValue(value);

	}

	public static class PrivateAccessor_ColliderResizer
	{

		private static readonly System.Lazy<FieldAccessor<ColliderResizer, UnityEngine.Vector3>> _originColliderCenter =
				new System.Lazy<FieldAccessor<ColliderResizer, UnityEngine.Vector3>>(() => FieldAccessor<ColliderResizer, UnityEngine.Vector3>.Create("originColliderCenter"));
		private static readonly System.Lazy<FieldAccessor<ColliderResizer, UnityEngine.Vector3>> _originColliderSize =
				new System.Lazy<FieldAccessor<ColliderResizer, UnityEngine.Vector3>>(() => FieldAccessor<ColliderResizer, UnityEngine.Vector3>.Create("originColliderSize"));

		public static UnityEngine.Vector3 GetOriginColliderCenter(this ColliderResizer __self) => _originColliderCenter.Value.GetValue(__self);
		public static void SetOriginColliderCenter(this ColliderResizer __self, UnityEngine.Vector3 value) => _originColliderCenter.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetOriginColliderSize(this ColliderResizer __self) => _originColliderSize.Value.GetValue(__self);
		public static void SetOriginColliderSize(this ColliderResizer __self, UnityEngine.Vector3 value) => _originColliderSize.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<ColliderResizer>> _OnValidate757602046 =
				new System.Lazy<MethodAccessor<ColliderResizer>>(() => MethodAccessor<ColliderResizer>.Create("OnValidate"));
		private static readonly System.Lazy<MethodAccessor<ColliderResizer>> _Awake757602046 =
				new System.Lazy<MethodAccessor<ColliderResizer>>(() => MethodAccessor<ColliderResizer>.Create("Awake"));

		public static void OnValidate(this ColliderResizer __self) => _OnValidate757602046.Value.Invoke(__self);
		public static void Awake(this ColliderResizer __self) => _Awake757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_DeltaMovementSound
	{

		private static readonly System.Lazy<FieldAccessor<DeltaMovementSound, MovementDeltaTracker>> _deltaTracker =
				new System.Lazy<FieldAccessor<DeltaMovementSound, MovementDeltaTracker>>(() => FieldAccessor<DeltaMovementSound, MovementDeltaTracker>.Create("deltaTracker"));
		private static readonly System.Lazy<FieldAccessor<DeltaMovementSound, FMODUnity.StudioEventEmitter>> _emitter =
				new System.Lazy<FieldAccessor<DeltaMovementSound, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<DeltaMovementSound, FMODUnity.StudioEventEmitter>.Create("emitter"));
		private static readonly System.Lazy<FieldAccessor<DeltaMovementSound, float>> _minReqDeltaMagnitude =
				new System.Lazy<FieldAccessor<DeltaMovementSound, float>>(() => FieldAccessor<DeltaMovementSound, float>.Create("minReqDeltaMagnitude"));
		private static readonly System.Lazy<FieldAccessor<DeltaMovementSound, float>> _currentDeltaMagnitude =
				new System.Lazy<FieldAccessor<DeltaMovementSound, float>>(() => FieldAccessor<DeltaMovementSound, float>.Create("currentDeltaMagnitude"));

		public static MovementDeltaTracker GetDeltaTracker(this DeltaMovementSound __self) => _deltaTracker.Value.GetValue(__self);
		public static void SetDeltaTracker(this DeltaMovementSound __self, MovementDeltaTracker value) => _deltaTracker.Value.SetValue(__self, value);
		public static FMODUnity.StudioEventEmitter GetEmitter(this DeltaMovementSound __self) => _emitter.Value.GetValue(__self);
		public static void SetEmitter(this DeltaMovementSound __self, FMODUnity.StudioEventEmitter value) => _emitter.Value.SetValue(__self, value);
		public static float GetMinReqDeltaMagnitude(this DeltaMovementSound __self) => _minReqDeltaMagnitude.Value.GetValue(__self);
		public static void SetMinReqDeltaMagnitude(this DeltaMovementSound __self, float value) => _minReqDeltaMagnitude.Value.SetValue(__self, value);
		public static float GetCurrentDeltaMagnitude(this DeltaMovementSound __self) => _currentDeltaMagnitude.Value.GetValue(__self);
		public static void SetCurrentDeltaMagnitude(this DeltaMovementSound __self, float value) => _currentDeltaMagnitude.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<DeltaMovementSound>> _Update757602046 =
				new System.Lazy<MethodAccessor<DeltaMovementSound>>(() => MethodAccessor<DeltaMovementSound>.Create("Update"));

		public static void Update(this DeltaMovementSound __self) => _Update757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Destroyer
	{

		private static readonly System.Lazy<FieldAccessor<Destroyer, float>> _timer =
				new System.Lazy<FieldAccessor<Destroyer, float>>(() => FieldAccessor<Destroyer, float>.Create("timer"));

		public static float GetTimer(this Destroyer __self) => _timer.Value.GetValue(__self);
		public static void SetTimer(this Destroyer __self, float value) => _timer.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Destroyer>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<Destroyer>>(() => MethodAccessor<Destroyer>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<Destroyer>> _Update757602046 =
				new System.Lazy<MethodAccessor<Destroyer>>(() => MethodAccessor<Destroyer>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<Destroyer>> _HasBehaviourID757602046 =
				new System.Lazy<MethodAccessor<Destroyer>>(() => MethodAccessor<Destroyer>.Create("HasBehaviourID"));

		public static void OnDestroy(this Destroyer __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void Update(this Destroyer __self) => _Update757602046.Value.Invoke(__self);
		public static bool HasBehaviourID(this Destroyer __self) => (bool)_HasBehaviourID757602046.Value.Invoke(__self);

	}

	public static class Private_DontDestroyOnLoadManager
	{

		private static readonly System.Lazy<StaticFieldAccessor<System.Collections.Generic.List<UnityEngine.GameObject>>> _dontDestroyGameObjs =
				new System.Lazy<StaticFieldAccessor<System.Collections.Generic.List<UnityEngine.GameObject>>>(() => StaticFieldAccessor<System.Collections.Generic.List<UnityEngine.GameObject>>.Create(typeof(DontDestroyOnLoadManager), "dontDestroyGameObjs"));

		public static System.Collections.Generic.List<UnityEngine.GameObject> GetDontDestroyGameObjs() => _dontDestroyGameObjs.Value.GetValue();
		public static void SetDontDestroyGameObjs(System.Collections.Generic.List<UnityEngine.GameObject> value) => _dontDestroyGameObjs.Value.SetValue(value);

	}

	public static class PrivateAccessor_EmitterRoughness
	{

		private static readonly System.Lazy<FieldAccessor<EmitterRoughness, FMODUnity.StudioEventEmitter>> _emitter =
				new System.Lazy<FieldAccessor<EmitterRoughness, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<EmitterRoughness, FMODUnity.StudioEventEmitter>.Create("emitter"));
		private static readonly System.Lazy<FieldAccessor<EmitterRoughness, string>> _parameterName =
				new System.Lazy<FieldAccessor<EmitterRoughness, string>>(() => FieldAccessor<EmitterRoughness, string>.Create("parameterName"));

		public static FMODUnity.StudioEventEmitter GetEmitter(this EmitterRoughness __self) => _emitter.Value.GetValue(__self);
		public static void SetEmitter(this EmitterRoughness __self, FMODUnity.StudioEventEmitter value) => _emitter.Value.SetValue(__self, value);
		public static string GetParameterName(this EmitterRoughness __self) => _parameterName.Value.GetValue(__self);
		public static void SetParameterName(this EmitterRoughness __self, string value) => _parameterName.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<EmitterRoughness>> _Update757602046 =
				new System.Lazy<MethodAccessor<EmitterRoughness>>(() => MethodAccessor<EmitterRoughness>.Create("Update"));

		public static void Update(this EmitterRoughness __self) => _Update757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_ExclamationNotification
	{

		private static readonly System.Lazy<FieldAccessor<ExclamationNotification, float>> _maxSizeDistance =
				new System.Lazy<FieldAccessor<ExclamationNotification, float>>(() => FieldAccessor<ExclamationNotification, float>.Create("maxSizeDistance"));
		private static readonly System.Lazy<FieldAccessor<ExclamationNotification, float>> _minSizeDistance =
				new System.Lazy<FieldAccessor<ExclamationNotification, float>>(() => FieldAccessor<ExclamationNotification, float>.Create("minSizeDistance"));
		private static readonly System.Lazy<FieldAccessor<ExclamationNotification, float>> _lerpSpeed =
				new System.Lazy<FieldAccessor<ExclamationNotification, float>>(() => FieldAccessor<ExclamationNotification, float>.Create("lerpSpeed"));
		private static readonly System.Lazy<FieldAccessor<ExclamationNotification, UnityEngine.Transform>> _cameraTransform =
				new System.Lazy<FieldAccessor<ExclamationNotification, UnityEngine.Transform>>(() => FieldAccessor<ExclamationNotification, UnityEngine.Transform>.Create("cameraTransform"));
		private static readonly System.Lazy<FieldAccessor<ExclamationNotification, UnityEngine.Vector3>> _localScaleStart =
				new System.Lazy<FieldAccessor<ExclamationNotification, UnityEngine.Vector3>>(() => FieldAccessor<ExclamationNotification, UnityEngine.Vector3>.Create("localScaleStart"));

		public static float GetMaxSizeDistance(this ExclamationNotification __self) => _maxSizeDistance.Value.GetValue(__self);
		public static void SetMaxSizeDistance(this ExclamationNotification __self, float value) => _maxSizeDistance.Value.SetValue(__self, value);
		public static float GetMinSizeDistance(this ExclamationNotification __self) => _minSizeDistance.Value.GetValue(__self);
		public static void SetMinSizeDistance(this ExclamationNotification __self, float value) => _minSizeDistance.Value.SetValue(__self, value);
		public static float GetLerpSpeed(this ExclamationNotification __self) => _lerpSpeed.Value.GetValue(__self);
		public static void SetLerpSpeed(this ExclamationNotification __self, float value) => _lerpSpeed.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetCameraTransform(this ExclamationNotification __self) => _cameraTransform.Value.GetValue(__self);
		public static void SetCameraTransform(this ExclamationNotification __self, UnityEngine.Transform value) => _cameraTransform.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetLocalScaleStart(this ExclamationNotification __self) => _localScaleStart.Value.GetValue(__self);
		public static void SetLocalScaleStart(this ExclamationNotification __self, UnityEngine.Vector3 value) => _localScaleStart.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<ExclamationNotification>> _Awake757602046 =
				new System.Lazy<MethodAccessor<ExclamationNotification>>(() => MethodAccessor<ExclamationNotification>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<ExclamationNotification>> _Update757602046 =
				new System.Lazy<MethodAccessor<ExclamationNotification>>(() => MethodAccessor<ExclamationNotification>.Create("Update"));

		public static void Awake(this ExclamationNotification __self) => _Awake757602046.Value.Invoke(__self);
		public static void Update(this ExclamationNotification __self) => _Update757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_FPSCounter
	{

		private static readonly System.Lazy<FieldAccessor<FPSCounter, float>> _updateRate =
				new System.Lazy<FieldAccessor<FPSCounter, float>>(() => FieldAccessor<FPSCounter, float>.Create("updateRate"));
		private static readonly System.Lazy<FieldAccessor<FPSCounter, UnityEngine.UI.Text>> _text_FPS =
				new System.Lazy<FieldAccessor<FPSCounter, UnityEngine.UI.Text>>(() => FieldAccessor<FPSCounter, UnityEngine.UI.Text>.Create("text_FPS"));
		private static readonly System.Lazy<FieldAccessor<FPSCounter, UnityEngine.UI.Text>> _text_Ping =
				new System.Lazy<FieldAccessor<FPSCounter, UnityEngine.UI.Text>>(() => FieldAccessor<FPSCounter, UnityEngine.UI.Text>.Create("text_Ping"));
		private static readonly System.Lazy<FieldAccessor<FPSCounter, UnityEngine.GameObject>> _panel =
				new System.Lazy<FieldAccessor<FPSCounter, UnityEngine.GameObject>>(() => FieldAccessor<FPSCounter, UnityEngine.GameObject>.Create("panel"));
		private static readonly System.Lazy<FieldAccessor<FPSCounter, Raft_Network>> _network =
				new System.Lazy<FieldAccessor<FPSCounter, Raft_Network>>(() => FieldAccessor<FPSCounter, Raft_Network>.Create("network"));
		private static readonly System.Lazy<FieldAccessor<FPSCounter, float>> _deltaTime =
				new System.Lazy<FieldAccessor<FPSCounter, float>>(() => FieldAccessor<FPSCounter, float>.Create("deltaTime"));
		private static readonly System.Lazy<FieldAccessor<FPSCounter, float>> _accumulator =
				new System.Lazy<FieldAccessor<FPSCounter, float>>(() => FieldAccessor<FPSCounter, float>.Create("accumulator"));

		public static float GetUpdateRate(this FPSCounter __self) => _updateRate.Value.GetValue(__self);
		public static void SetUpdateRate(this FPSCounter __self, float value) => _updateRate.Value.SetValue(__self, value);
		public static UnityEngine.UI.Text GetText_FPS(this FPSCounter __self) => _text_FPS.Value.GetValue(__self);
		public static void SetText_FPS(this FPSCounter __self, UnityEngine.UI.Text value) => _text_FPS.Value.SetValue(__self, value);
		public static UnityEngine.UI.Text GetText_Ping(this FPSCounter __self) => _text_Ping.Value.GetValue(__self);
		public static void SetText_Ping(this FPSCounter __self, UnityEngine.UI.Text value) => _text_Ping.Value.SetValue(__self, value);
		public static UnityEngine.GameObject GetPanel(this FPSCounter __self) => _panel.Value.GetValue(__self);
		public static void SetPanel(this FPSCounter __self, UnityEngine.GameObject value) => _panel.Value.SetValue(__self, value);
		public static Raft_Network GetNetwork(this FPSCounter __self) => _network.Value.GetValue(__self);
		public static void SetNetwork(this FPSCounter __self, Raft_Network value) => _network.Value.SetValue(__self, value);
		public static float GetDeltaTime(this FPSCounter __self) => _deltaTime.Value.GetValue(__self);
		public static void SetDeltaTime(this FPSCounter __self, float value) => _deltaTime.Value.SetValue(__self, value);
		public static float GetAccumulator(this FPSCounter __self) => _accumulator.Value.GetValue(__self);
		public static void SetAccumulator(this FPSCounter __self, float value) => _accumulator.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<FPSCounter>> _Start757602046 =
				new System.Lazy<MethodAccessor<FPSCounter>>(() => MethodAccessor<FPSCounter>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<FPSCounter>> _Update757602046 =
				new System.Lazy<MethodAccessor<FPSCounter>>(() => MethodAccessor<FPSCounter>.Create("Update"));

		public static void Start(this FPSCounter __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this FPSCounter __self) => _Update757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_FillCounter
	{

		private static readonly System.Lazy<FieldAccessor<FillCounter, float>> _maxAmount =
				new System.Lazy<FieldAccessor<FillCounter, float>>(() => FieldAccessor<FillCounter, float>.Create("maxAmount"));
		private static readonly System.Lazy<FieldAccessor<FillCounter, float>> _currentAmount =
				new System.Lazy<FieldAccessor<FillCounter, float>>(() => FieldAccessor<FillCounter, float>.Create("currentAmount"));
		private static readonly System.Lazy<FieldAccessor<FillCounter, Raft_Network>> _network =
				new System.Lazy<FieldAccessor<FillCounter, Raft_Network>>(() => FieldAccessor<FillCounter, Raft_Network>.Create("network"));

		public static float GetMaxAmount(this FillCounter __self) => _maxAmount.Value.GetValue(__self);
		public static void SetMaxAmount(this FillCounter __self, float value) => _maxAmount.Value.SetValue(__self, value);
		public static float GetCurrentAmount(this FillCounter __self) => _currentAmount.Value.GetValue(__self);
		public static void SetCurrentAmount(this FillCounter __self, float value) => _currentAmount.Value.SetValue(__self, value);
		public static Raft_Network GetNetwork(this FillCounter __self) => _network.Value.GetValue(__self);
		public static void SetNetwork(this FillCounter __self, Raft_Network value) => _network.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<FillCounter>> _Start757602046 =
				new System.Lazy<MethodAccessor<FillCounter>>(() => MethodAccessor<FillCounter>.Create("Start"));

		public static void Start(this FillCounter __self) => _Start757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_FlightCamera
	{

		private static readonly System.Lazy<FieldAccessor<FlightCamera, Network_Player>> _player =
				new System.Lazy<FieldAccessor<FlightCamera, Network_Player>>(() => FieldAccessor<FlightCamera, Network_Player>.Create("player"));
		private static readonly System.Lazy<FieldAccessor<FlightCamera, UnityEngine.Vector3>> _velocity =
				new System.Lazy<FieldAccessor<FlightCamera, UnityEngine.Vector3>>(() => FieldAccessor<FlightCamera, UnityEngine.Vector3>.Create("velocity"));
		private static readonly System.Lazy<FieldAccessor<FlightCamera, bool>> _record =
				new System.Lazy<FieldAccessor<FlightCamera, bool>>(() => FieldAccessor<FlightCamera, bool>.Create("record"));

		public static Network_Player GetPlayer(this FlightCamera __self) => _player.Value.GetValue(__self);
		public static void SetPlayer(this FlightCamera __self, Network_Player value) => _player.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetVelocity(this FlightCamera __self) => _velocity.Value.GetValue(__self);
		public static void SetVelocity(this FlightCamera __self, UnityEngine.Vector3 value) => _velocity.Value.SetValue(__self, value);
		public static bool GetRecord(this FlightCamera __self) => _record.Value.GetValue(__self);
		public static void SetRecord(this FlightCamera __self, bool value) => _record.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<FlightCamera>> _Awake757602046 =
				new System.Lazy<MethodAccessor<FlightCamera>>(() => MethodAccessor<FlightCamera>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<FlightCamera>> _Update757602046 =
				new System.Lazy<MethodAccessor<FlightCamera>>(() => MethodAccessor<FlightCamera>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<FlightCamera>> _SaveRecordPos757602046 =
				new System.Lazy<MethodAccessor<FlightCamera>>(() => MethodAccessor<FlightCamera>.Create("SaveRecordPos"));
		private static readonly System.Lazy<MethodAccessor<FlightCamera>> _LoadRecordPos757602046 =
				new System.Lazy<MethodAccessor<FlightCamera>>(() => MethodAccessor<FlightCamera>.Create("LoadRecordPos"));
		private static readonly System.Lazy<MethodAccessor<FlightCamera>> _PlaceCameraAtRecordSpot757602046 =
				new System.Lazy<MethodAccessor<FlightCamera>>(() => MethodAccessor<FlightCamera>.Create("PlaceCameraAtRecordSpot"));

		public static void Awake(this FlightCamera __self) => _Awake757602046.Value.Invoke(__self);
		public static void Update(this FlightCamera __self) => _Update757602046.Value.Invoke(__self);
		public static void SaveRecordPos(this FlightCamera __self) => _SaveRecordPos757602046.Value.Invoke(__self);
		public static void LoadRecordPos(this FlightCamera __self) => _LoadRecordPos757602046.Value.Invoke(__self);
		public static void PlaceCameraAtRecordSpot(this FlightCamera __self) => _PlaceCameraAtRecordSpot757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_FollowLocalPlayerXZ
	{

		private static readonly System.Lazy<FieldAccessor<FollowLocalPlayerXZ, AreaZone>> _areaBounds =
				new System.Lazy<FieldAccessor<FollowLocalPlayerXZ, AreaZone>>(() => FieldAccessor<FollowLocalPlayerXZ, AreaZone>.Create("areaBounds"));

		public static AreaZone GetAreaBounds(this FollowLocalPlayerXZ __self) => _areaBounds.Value.GetValue(__self);
		public static void SetAreaBounds(this FollowLocalPlayerXZ __self, AreaZone value) => _areaBounds.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<FollowLocalPlayerXZ>> _Update757602046 =
				new System.Lazy<MethodAccessor<FollowLocalPlayerXZ>>(() => MethodAccessor<FollowLocalPlayerXZ>.Create("Update"));

		public static void Update(this FollowLocalPlayerXZ __self) => _Update757602046.Value.Invoke(__self);

	}

	public static class Private_FollowLocalPlayerXZ
	{

		private static readonly System.Lazy<StaticFieldAccessor<Network_Player>> _localPlayer =
				new System.Lazy<StaticFieldAccessor<Network_Player>>(() => StaticFieldAccessor<Network_Player>.Create(typeof(FollowLocalPlayerXZ), "localPlayer"));

		public static Network_Player GetLocalPlayer() => _localPlayer.Value.GetValue();
		public static void SetLocalPlayer(Network_Player value) => _localPlayer.Value.SetValue(value);

	}

	public static class PrivateAccessor_FollowTransform
	{

		private static readonly System.Lazy<FieldAccessor<FollowTransform, UnityEngine.Transform>> _target =
				new System.Lazy<FieldAccessor<FollowTransform, UnityEngine.Transform>>(() => FieldAccessor<FollowTransform, UnityEngine.Transform>.Create("target"));
		private static readonly System.Lazy<FieldAccessor<FollowTransform, UnityEngine.Vector3>> _offsetFromTarget =
				new System.Lazy<FieldAccessor<FollowTransform, UnityEngine.Vector3>>(() => FieldAccessor<FollowTransform, UnityEngine.Vector3>.Create("offsetFromTarget"));
		private static readonly System.Lazy<FieldAccessor<FollowTransform, bool>> _followPosition =
				new System.Lazy<FieldAccessor<FollowTransform, bool>>(() => FieldAccessor<FollowTransform, bool>.Create("followPosition"));
		private static readonly System.Lazy<FieldAccessor<FollowTransform, bool>> _followPositionY =
				new System.Lazy<FieldAccessor<FollowTransform, bool>>(() => FieldAccessor<FollowTransform, bool>.Create("followPositionY"));
		private static readonly System.Lazy<FieldAccessor<FollowTransform, bool>> _followRotation =
				new System.Lazy<FieldAccessor<FollowTransform, bool>>(() => FieldAccessor<FollowTransform, bool>.Create("followRotation"));

		public static UnityEngine.Transform GetTarget(this FollowTransform __self) => _target.Value.GetValue(__self);
		public static void SetTarget(this FollowTransform __self, UnityEngine.Transform value) => _target.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetOffsetFromTarget(this FollowTransform __self) => _offsetFromTarget.Value.GetValue(__self);
		public static void SetOffsetFromTarget(this FollowTransform __self, UnityEngine.Vector3 value) => _offsetFromTarget.Value.SetValue(__self, value);
		public static bool GetFollowPosition(this FollowTransform __self) => _followPosition.Value.GetValue(__self);
		public static void SetFollowPosition(this FollowTransform __self, bool value) => _followPosition.Value.SetValue(__self, value);
		public static bool GetFollowPositionY(this FollowTransform __self) => _followPositionY.Value.GetValue(__self);
		public static void SetFollowPositionY(this FollowTransform __self, bool value) => _followPositionY.Value.SetValue(__self, value);
		public static bool GetFollowRotation(this FollowTransform __self) => _followRotation.Value.GetValue(__self);
		public static void SetFollowRotation(this FollowTransform __self, bool value) => _followRotation.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<FollowTransform>> _Update757602046 =
				new System.Lazy<MethodAccessor<FollowTransform>>(() => MethodAccessor<FollowTransform>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<FollowTransform>> _SetPosition3429126434 =
				new System.Lazy<MethodAccessor<FollowTransform>>(() => MethodAccessor<FollowTransform>.Create("SetPosition", typeof(UnityEngine.Vector3)));

		public static void Update(this FollowTransform __self) => _Update757602046.Value.Invoke(__self);
		public static void SetPosition(this FollowTransform __self, UnityEngine.Vector3 position) => _SetPosition3429126434.Value.Invoke(__self, position);

	}

	public static class PrivateAccessor_FollowTransform_Raft
	{

		private static readonly System.Lazy<FieldAccessor<FollowTransform_Raft, UnityEngine.Transform>> _raftCenterPivot =
				new System.Lazy<FieldAccessor<FollowTransform_Raft, UnityEngine.Transform>>(() => FieldAccessor<FollowTransform_Raft, UnityEngine.Transform>.Create("raftCenterPivot"));
		private static readonly System.Lazy<FieldAccessor<FollowTransform_Raft, UnityEngine.Transform>> _spawnerParent =
				new System.Lazy<FieldAccessor<FollowTransform_Raft, UnityEngine.Transform>>(() => FieldAccessor<FollowTransform_Raft, UnityEngine.Transform>.Create("spawnerParent"));

		public static UnityEngine.Transform GetRaftCenterPivot(this FollowTransform_Raft __self) => _raftCenterPivot.Value.GetValue(__self);
		public static void SetRaftCenterPivot(this FollowTransform_Raft __self, UnityEngine.Transform value) => _raftCenterPivot.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetSpawnerParent(this FollowTransform_Raft __self) => _spawnerParent.Value.GetValue(__self);
		public static void SetSpawnerParent(this FollowTransform_Raft __self, UnityEngine.Transform value) => _spawnerParent.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<FollowTransform_Raft>> _SetPosition3429126434 =
				new System.Lazy<MethodAccessor<FollowTransform_Raft>>(() => MethodAccessor<FollowTransform_Raft>.Create("SetPosition", typeof(UnityEngine.Vector3)));

		public static void SetPosition(this FollowTransform_Raft __self, UnityEngine.Vector3 position) => _SetPosition3429126434.Value.Invoke(__self, position);

	}

	public static class PrivateAccessor_GiveAchievementIfQuestCompleted
	{

		private static readonly System.Lazy<FieldAccessor<GiveAchievementIfQuestCompleted, QuestType>> _quest =
				new System.Lazy<FieldAccessor<GiveAchievementIfQuestCompleted, QuestType>>(() => FieldAccessor<GiveAchievementIfQuestCompleted, QuestType>.Create("quest"));
		private static readonly System.Lazy<FieldAccessor<GiveAchievementIfQuestCompleted, AchievementType>> _achievementType =
				new System.Lazy<FieldAccessor<GiveAchievementIfQuestCompleted, AchievementType>>(() => FieldAccessor<GiveAchievementIfQuestCompleted, AchievementType>.Create("achievementType"));

		public static QuestType GetQuest(this GiveAchievementIfQuestCompleted __self) => _quest.Value.GetValue(__self);
		public static void SetQuest(this GiveAchievementIfQuestCompleted __self, QuestType value) => _quest.Value.SetValue(__self, value);
		public static AchievementType GetAchievementType(this GiveAchievementIfQuestCompleted __self) => _achievementType.Value.GetValue(__self);
		public static void SetAchievementType(this GiveAchievementIfQuestCompleted __self, AchievementType value) => _achievementType.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<GiveAchievementIfQuestCompleted>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<GiveAchievementIfQuestCompleted>>(() => MethodAccessor<GiveAchievementIfQuestCompleted>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<GiveAchievementIfQuestCompleted>> _TryGiveAchievement757602046 =
				new System.Lazy<MethodAccessor<GiveAchievementIfQuestCompleted>>(() => MethodAccessor<GiveAchievementIfQuestCompleted>.Create("TryGiveAchievement"));

		public static void OnDestroy(this GiveAchievementIfQuestCompleted __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void TryGiveAchievement(this GiveAchievementIfQuestCompleted __self) => _TryGiveAchievement757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Gizmo_LineDrawer
	{

		private static readonly System.Lazy<FieldAccessor<Gizmo_LineDrawer, UnityEngine.Transform>> _target =
				new System.Lazy<FieldAccessor<Gizmo_LineDrawer, UnityEngine.Transform>>(() => FieldAccessor<Gizmo_LineDrawer, UnityEngine.Transform>.Create("target"));
		private static readonly System.Lazy<FieldAccessor<Gizmo_LineDrawer, UnityEngine.Color>> _lineColor =
				new System.Lazy<FieldAccessor<Gizmo_LineDrawer, UnityEngine.Color>>(() => FieldAccessor<Gizmo_LineDrawer, UnityEngine.Color>.Create("lineColor"));

		public static UnityEngine.Transform GetTarget(this Gizmo_LineDrawer __self) => _target.Value.GetValue(__self);
		public static void SetTarget(this Gizmo_LineDrawer __self, UnityEngine.Transform value) => _target.Value.SetValue(__self, value);
		public static UnityEngine.Color GetLineColor(this Gizmo_LineDrawer __self) => _lineColor.Value.GetValue(__self);
		public static void SetLineColor(this Gizmo_LineDrawer __self, UnityEngine.Color value) => _lineColor.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_Gizmo_SphereDrawer
	{

		private static readonly System.Lazy<FieldAccessor<Gizmo_SphereDrawer, UnityEngine.Color>> _color =
				new System.Lazy<FieldAccessor<Gizmo_SphereDrawer, UnityEngine.Color>>(() => FieldAccessor<Gizmo_SphereDrawer, UnityEngine.Color>.Create("color"));
		private static readonly System.Lazy<FieldAccessor<Gizmo_SphereDrawer, float>> _radius =
				new System.Lazy<FieldAccessor<Gizmo_SphereDrawer, float>>(() => FieldAccessor<Gizmo_SphereDrawer, float>.Create("radius"));

		public static UnityEngine.Color GetColor(this Gizmo_SphereDrawer __self) => _color.Value.GetValue(__self);
		public static void SetColor(this Gizmo_SphereDrawer __self, UnityEngine.Color value) => _color.Value.SetValue(__self, value);
		public static float GetRadius(this Gizmo_SphereDrawer __self) => _radius.Value.GetValue(__self);
		public static void SetRadius(this Gizmo_SphereDrawer __self, float value) => _radius.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_GraphyRaftManager
	{

		private static readonly System.Lazy<FieldAccessor<GraphyRaftManager, Raft_Network>> _network =
				new System.Lazy<FieldAccessor<GraphyRaftManager, Raft_Network>>(() => FieldAccessor<GraphyRaftManager, Raft_Network>.Create("network"));
		private static readonly System.Lazy<FieldAccessor<GraphyRaftManager, int>> _panelIndex =
				new System.Lazy<FieldAccessor<GraphyRaftManager, int>>(() => FieldAccessor<GraphyRaftManager, int>.Create("panelIndex"));

		public static Raft_Network GetNetwork(this GraphyRaftManager __self) => _network.Value.GetValue(__self);
		public static void SetNetwork(this GraphyRaftManager __self, Raft_Network value) => _network.Value.SetValue(__self, value);
		public static int GetPanelIndex(this GraphyRaftManager __self) => _panelIndex.Value.GetValue(__self);
		public static void SetPanelIndex(this GraphyRaftManager __self, int value) => _panelIndex.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<GraphyRaftManager>> _Start757602046 =
				new System.Lazy<MethodAccessor<GraphyRaftManager>>(() => MethodAccessor<GraphyRaftManager>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<GraphyRaftManager>> _Update757602046 =
				new System.Lazy<MethodAccessor<GraphyRaftManager>>(() => MethodAccessor<GraphyRaftManager>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<GraphyRaftManager>> _DisablePanels757602046 =
				new System.Lazy<MethodAccessor<GraphyRaftManager>>(() => MethodAccessor<GraphyRaftManager>.Create("DisablePanels"));
		private static readonly System.Lazy<MethodAccessor<GraphyRaftManager>> _TogglePanels757602046 =
				new System.Lazy<MethodAccessor<GraphyRaftManager>>(() => MethodAccessor<GraphyRaftManager>.Create("TogglePanels"));

		public static void Start(this GraphyRaftManager __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this GraphyRaftManager __self) => _Update757602046.Value.Invoke(__self);
		public static void DisablePanels(this GraphyRaftManager __self) => _DisablePanels757602046.Value.Invoke(__self);
		public static void TogglePanels(this GraphyRaftManager __self) => _TogglePanels757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AnimationCurveDisplayer
	{

		private static readonly System.Lazy<MethodAccessor<AnimationCurveDisplayer>> _CheckListCount757602046 =
				new System.Lazy<MethodAccessor<AnimationCurveDisplayer>>(() => MethodAccessor<AnimationCurveDisplayer>.Create("CheckListCount"));

		public static void CheckListCount(this AnimationCurveDisplayer __self) => _CheckListCount757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AnimationTriggerKeyPress
	{

		private static readonly System.Lazy<MethodAccessor<AnimationTriggerKeyPress>> _Update757602046 =
				new System.Lazy<MethodAccessor<AnimationTriggerKeyPress>>(() => MethodAccessor<AnimationTriggerKeyPress>.Create("Update"));

		public static void Update(this AnimationTriggerKeyPress __self) => _Update757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_EarlyAccessBlueprintFixer
	{

		private static readonly System.Lazy<MethodAccessor<EarlyAccessBlueprintFixer>> _Start757602046 =
				new System.Lazy<MethodAccessor<EarlyAccessBlueprintFixer>>(() => MethodAccessor<EarlyAccessBlueprintFixer>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<EarlyAccessBlueprintFixer>> _OnLoadComplete757602046 =
				new System.Lazy<MethodAccessor<EarlyAccessBlueprintFixer>>(() => MethodAccessor<EarlyAccessBlueprintFixer>.Create("OnLoadComplete"));

		public static void Start(this EarlyAccessBlueprintFixer __self) => _Start757602046.Value.Invoke(__self);
		public static void OnLoadComplete(this EarlyAccessBlueprintFixer __self) => _OnLoadComplete757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_EstimatedTimeToReachPoint
	{

		private static readonly System.Lazy<MethodAccessor<EstimatedTimeToReachPoint>> _UpdateDistanceBetween3429126434 =
				new System.Lazy<MethodAccessor<EstimatedTimeToReachPoint>>(() => MethodAccessor<EstimatedTimeToReachPoint>.Create("UpdateDistanceBetween", typeof(UnityEngine.Vector3)));
		private static readonly System.Lazy<MethodAccessor<EstimatedTimeToReachPoint>> _UpdateTimeBetween3486905475 =
				new System.Lazy<MethodAccessor<EstimatedTimeToReachPoint>>(() => MethodAccessor<EstimatedTimeToReachPoint>.Create("UpdateTimeBetween", typeof(float)));

		public static void UpdateDistanceBetween(this EstimatedTimeToReachPoint __self, UnityEngine.Vector3 toTarget) => _UpdateDistanceBetween3429126434.Value.Invoke(__self, toTarget);
		public static void UpdateTimeBetween(this EstimatedTimeToReachPoint __self, float movementSpeed) => _UpdateTimeBetween3486905475.Value.Invoke(__self, movementSpeed);

	}

	public static class Private_Helper
	{

		private static readonly System.Lazy<StaticFieldAccessor<UnityEngine.Transform>> _lockedPivot =
				new System.Lazy<StaticFieldAccessor<UnityEngine.Transform>>(() => StaticFieldAccessor<UnityEngine.Transform>.Create(typeof(Helper), "lockedPivot"));
		private static readonly System.Lazy<StaticFieldAccessor<UnityEngine.CursorLockMode>> _lockMode =
				new System.Lazy<StaticFieldAccessor<UnityEngine.CursorLockMode>>(() => StaticFieldAccessor<UnityEngine.CursorLockMode>.Create(typeof(Helper), "lockMode"));
		private static readonly System.Lazy<StaticFieldAccessor<Network_Player>> _localPlayer =
				new System.Lazy<StaticFieldAccessor<Network_Player>>(() => StaticFieldAccessor<Network_Player>.Create(typeof(Helper), "localPlayer"));
		private static readonly System.Lazy<StaticFieldAccessor<Raft_Network>> _network =
				new System.Lazy<StaticFieldAccessor<Raft_Network>>(() => StaticFieldAccessor<Raft_Network>.Create(typeof(Helper), "network"));
		private static readonly System.Lazy<StaticFieldAccessor<PickupObjectManager>> _pickupObjectManager =
				new System.Lazy<StaticFieldAccessor<PickupObjectManager>>(() => StaticFieldAccessor<PickupObjectManager>.Create(typeof(Helper), "pickupObjectManager"));
		private static readonly System.Lazy<StaticFieldAccessor<UnityEngine.Camera>> _mainCamera =
				new System.Lazy<StaticFieldAccessor<UnityEngine.Camera>>(() => StaticFieldAccessor<UnityEngine.Camera>.Create(typeof(Helper), "mainCamera"));
		private static readonly System.Lazy<StaticFieldAccessor<UnityEngine.Camera>> _localFovCamera =
				new System.Lazy<StaticFieldAccessor<UnityEngine.Camera>>(() => StaticFieldAccessor<UnityEngine.Camera>.Create(typeof(Helper), "localFovCamera"));
		private static readonly System.Lazy<StaticFieldAccessor<CanvasHelper>> _canvas =
				new System.Lazy<StaticFieldAccessor<CanvasHelper>>(() => StaticFieldAccessor<CanvasHelper>.Create(typeof(Helper), "canvas"));

		public static UnityEngine.Transform GetLockedPivot() => _lockedPivot.Value.GetValue();
		public static void SetLockedPivot(UnityEngine.Transform value) => _lockedPivot.Value.SetValue(value);
		public static UnityEngine.CursorLockMode GetLockMode() => _lockMode.Value.GetValue();
		public static void SetLockMode(UnityEngine.CursorLockMode value) => _lockMode.Value.SetValue(value);
		public static Network_Player GetLocalPlayer() => _localPlayer.Value.GetValue();
		public static void SetLocalPlayer(Network_Player value) => _localPlayer.Value.SetValue(value);
		public static Raft_Network GetNetwork() => _network.Value.GetValue();
		public static void SetNetwork(Raft_Network value) => _network.Value.SetValue(value);
		public static PickupObjectManager GetPickupObjectManager() => _pickupObjectManager.Value.GetValue();
		public static void SetPickupObjectManager(PickupObjectManager value) => _pickupObjectManager.Value.SetValue(value);
		public static UnityEngine.Camera GetMainCamera() => _mainCamera.Value.GetValue();
		public static void SetMainCamera(UnityEngine.Camera value) => _mainCamera.Value.SetValue(value);
		public static UnityEngine.Camera GetLocalFovCamera() => _localFovCamera.Value.GetValue();
		public static void SetLocalFovCamera(UnityEngine.Camera value) => _localFovCamera.Value.SetValue(value);
		public static CanvasHelper GetCanvas() => _canvas.Value.GetValue();
		public static void SetCanvas(CanvasHelper value) => _canvas.Value.SetValue(value);

		private static readonly System.Lazy<StaticMethodAccessor> _GetSteamAvatarFromID1158587126 =
				new System.Lazy<StaticMethodAccessor>(() => StaticMethodAccessor.Create(typeof(Helper), "GetSteamAvatarFromID", typeof(Steamworks.CSteamID), typeof(int)));
		private static readonly System.Lazy<StaticMethodAccessor> _IncrementDirection3981832511 =
				new System.Lazy<StaticMethodAccessor>(() => StaticMethodAccessor.Create(typeof(Helper), "IncrementDirection", typeof(UnityEngine.Vector3), typeof(UnityEngine.Vector3), typeof(float)));

		public static UnityEngine.Sprite GetSteamAvatarFromID(Steamworks.CSteamID steamID, int imageID) => (UnityEngine.Sprite)_GetSteamAvatarFromID1158587126.Value.Invoke(steamID, imageID);
		public static UnityEngine.Vector3 IncrementDirection(UnityEngine.Vector3 from, UnityEngine.Vector3 dir, float length) => (UnityEngine.Vector3)_IncrementDirection3981832511.Value.Invoke(from, dir, length);

	}

	public static class PrivateAccessor_MissingQuestItemFixer
	{

		private static readonly System.Lazy<MethodAccessor<MissingQuestItemFixer>> _Start757602046 =
				new System.Lazy<MethodAccessor<MissingQuestItemFixer>>(() => MethodAccessor<MissingQuestItemFixer>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<MissingQuestItemFixer>> _OnWorldRecievedLate757602046 =
				new System.Lazy<MethodAccessor<MissingQuestItemFixer>>(() => MethodAccessor<MissingQuestItemFixer>.Create("OnWorldRecievedLate"));
		private static readonly System.Lazy<MethodAccessor<MissingQuestItemFixer>> _FixLandmarks757602046 =
				new System.Lazy<MethodAccessor<MissingQuestItemFixer>>(() => MethodAccessor<MissingQuestItemFixer>.Create("FixLandmarks"));

		public static void Start(this MissingQuestItemFixer __self) => _Start757602046.Value.Invoke(__self);
		public static void OnWorldRecievedLate(this MissingQuestItemFixer __self) => _OnWorldRecievedLate757602046.Value.Invoke(__self);
		public static void FixLandmarks(this MissingQuestItemFixer __self) => _FixLandmarks757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_MovementDeltaTracker
	{

		private static readonly System.Lazy<FieldAccessor<MovementDeltaTracker, int>> _savedPositionCount =
				new System.Lazy<FieldAccessor<MovementDeltaTracker, int>>(() => FieldAccessor<MovementDeltaTracker, int>.Create("savedPositionCount"));
		private static readonly System.Lazy<FieldAccessor<MovementDeltaTracker, float>> _trackingUpdateRate =
				new System.Lazy<FieldAccessor<MovementDeltaTracker, float>>(() => FieldAccessor<MovementDeltaTracker, float>.Create("trackingUpdateRate"));
		private static readonly System.Lazy<FieldAccessor<MovementDeltaTracker, UnityEngine.Vector3>> _previousPosition =
				new System.Lazy<FieldAccessor<MovementDeltaTracker, UnityEngine.Vector3>>(() => FieldAccessor<MovementDeltaTracker, UnityEngine.Vector3>.Create("previousPosition"));
		private static readonly System.Lazy<FieldAccessor<MovementDeltaTracker, UnityEngine.Vector3>> _previousLocalPosition =
				new System.Lazy<FieldAccessor<MovementDeltaTracker, UnityEngine.Vector3>>(() => FieldAccessor<MovementDeltaTracker, UnityEngine.Vector3>.Create("previousLocalPosition"));
		private static readonly System.Lazy<FieldAccessor<MovementDeltaTracker, float>> _trackingUpdateProgress =
				new System.Lazy<FieldAccessor<MovementDeltaTracker, float>>(() => FieldAccessor<MovementDeltaTracker, float>.Create("trackingUpdateProgress"));
		private static readonly System.Lazy<FieldAccessor<MovementDeltaTracker, System.Collections.Generic.List<UnityEngine.Vector3>>> _previousDeltas =
				new System.Lazy<FieldAccessor<MovementDeltaTracker, System.Collections.Generic.List<UnityEngine.Vector3>>>(() => FieldAccessor<MovementDeltaTracker, System.Collections.Generic.List<UnityEngine.Vector3>>.Create("previousDeltas"));
		private static readonly System.Lazy<FieldAccessor<MovementDeltaTracker, System.Collections.Generic.List<UnityEngine.Vector3>>> _previousLocalDeltas =
				new System.Lazy<FieldAccessor<MovementDeltaTracker, System.Collections.Generic.List<UnityEngine.Vector3>>>(() => FieldAccessor<MovementDeltaTracker, System.Collections.Generic.List<UnityEngine.Vector3>>.Create("previousLocalDeltas"));

		public static int GetSavedPositionCount(this MovementDeltaTracker __self) => _savedPositionCount.Value.GetValue(__self);
		public static void SetSavedPositionCount(this MovementDeltaTracker __self, int value) => _savedPositionCount.Value.SetValue(__self, value);
		public static float GetTrackingUpdateRate(this MovementDeltaTracker __self) => _trackingUpdateRate.Value.GetValue(__self);
		public static void SetTrackingUpdateRate(this MovementDeltaTracker __self, float value) => _trackingUpdateRate.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetPreviousPosition(this MovementDeltaTracker __self) => _previousPosition.Value.GetValue(__self);
		public static void SetPreviousPosition(this MovementDeltaTracker __self, UnityEngine.Vector3 value) => _previousPosition.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetPreviousLocalPosition(this MovementDeltaTracker __self) => _previousLocalPosition.Value.GetValue(__self);
		public static void SetPreviousLocalPosition(this MovementDeltaTracker __self, UnityEngine.Vector3 value) => _previousLocalPosition.Value.SetValue(__self, value);
		public static float GetTrackingUpdateProgress(this MovementDeltaTracker __self) => _trackingUpdateProgress.Value.GetValue(__self);
		public static void SetTrackingUpdateProgress(this MovementDeltaTracker __self, float value) => _trackingUpdateProgress.Value.SetValue(__self, value);
		public static System.Collections.Generic.List<UnityEngine.Vector3> GetPreviousDeltas(this MovementDeltaTracker __self) => _previousDeltas.Value.GetValue(__self);
		public static void SetPreviousDeltas(this MovementDeltaTracker __self, System.Collections.Generic.List<UnityEngine.Vector3> value) => _previousDeltas.Value.SetValue(__self, value);
		public static System.Collections.Generic.List<UnityEngine.Vector3> GetPreviousLocalDeltas(this MovementDeltaTracker __self) => _previousLocalDeltas.Value.GetValue(__self);
		public static void SetPreviousLocalDeltas(this MovementDeltaTracker __self, System.Collections.Generic.List<UnityEngine.Vector3> value) => _previousLocalDeltas.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<MovementDeltaTracker>> _Awake757602046 =
				new System.Lazy<MethodAccessor<MovementDeltaTracker>>(() => MethodAccessor<MovementDeltaTracker>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<MovementDeltaTracker>> _LateUpdate757602046 =
				new System.Lazy<MethodAccessor<MovementDeltaTracker>>(() => MethodAccessor<MovementDeltaTracker>.Create("LateUpdate"));
		private static readonly System.Lazy<MethodAccessor<MovementDeltaTracker>> _HandleDeltaCalculations757602046 =
				new System.Lazy<MethodAccessor<MovementDeltaTracker>>(() => MethodAccessor<MovementDeltaTracker>.Create("HandleDeltaCalculations"));

		public static void Awake(this MovementDeltaTracker __self) => _Awake757602046.Value.Invoke(__self);
		public static void LateUpdate(this MovementDeltaTracker __self) => _LateUpdate757602046.Value.Invoke(__self);
		public static void HandleDeltaCalculations(this MovementDeltaTracker __self) => _HandleDeltaCalculations757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_PlaySoundWithInterval
	{

		private static readonly System.Lazy<FieldAccessor<PlaySoundWithInterval, float>> _soundIntervalProgress =
				new System.Lazy<FieldAccessor<PlaySoundWithInterval, float>>(() => FieldAccessor<PlaySoundWithInterval, float>.Create("soundIntervalProgress"));

		public static float GetSoundIntervalProgress(this PlaySoundWithInterval __self) => _soundIntervalProgress.Value.GetValue(__self);
		public static void SetSoundIntervalProgress(this PlaySoundWithInterval __self, float value) => _soundIntervalProgress.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<PlaySoundWithInterval>> _TriggerSound757602046 =
				new System.Lazy<MethodAccessor<PlaySoundWithInterval>>(() => MethodAccessor<PlaySoundWithInterval>.Create("TriggerSound"));

		public static void TriggerSound(this PlaySoundWithInterval __self) => _TriggerSound757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_ScriptableObjectCreator
	{

		private static readonly System.Lazy<MethodAccessor<ScriptableObjectCreator>> _CreateSOFromItem3429011341 =
				new System.Lazy<MethodAccessor<ScriptableObjectCreator>>(() => MethodAccessor<ScriptableObjectCreator>.Create("CreateSOFromItem", typeof(PickupItem)));

		public static void CreateSOFromItem(this ScriptableObjectCreator __self, PickupItem item) => _CreateSOFromItem3429011341.Value.Invoke(__self, item);

	}

	public static class PrivateAccessor_TransformLerpMover
	{

		private static readonly System.Lazy<MethodAccessor<TransformLerpMover>> _Start757602046 =
				new System.Lazy<MethodAccessor<TransformLerpMover>>(() => MethodAccessor<TransformLerpMover>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<TransformLerpMover>> _LateUpdate757602046 =
				new System.Lazy<MethodAccessor<TransformLerpMover>>(() => MethodAccessor<TransformLerpMover>.Create("LateUpdate"));
		private static readonly System.Lazy<MethodAccessor<TransformLerpMover>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<TransformLerpMover>>(() => MethodAccessor<TransformLerpMover>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<TransformLerpMover>> _CheckToTeleport3486905475 =
				new System.Lazy<MethodAccessor<TransformLerpMover>>(() => MethodAccessor<TransformLerpMover>.Create("CheckToTeleport", typeof(float)));
		private static readonly System.Lazy<MethodAccessor<TransformLerpMover>> _SetPositionTo1670445263 =
				new System.Lazy<MethodAccessor<TransformLerpMover>>(() => MethodAccessor<TransformLerpMover>.Create("SetPositionTo", typeof(UnityEngine.Transform), typeof(UnityEngine.Vector3)));

		public static void Start(this TransformLerpMover __self) => _Start757602046.Value.Invoke(__self);
		public static void LateUpdate(this TransformLerpMover __self) => _LateUpdate757602046.Value.Invoke(__self);
		public static void OnDestroy(this TransformLerpMover __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static bool CheckToTeleport(this TransformLerpMover __self, float maxDistance) => (bool)_CheckToTeleport3486905475.Value.Invoke(__self, maxDistance);
		public static void SetPositionTo(this TransformLerpMover __self, UnityEngine.Transform affected, UnityEngine.Vector3 position) => _SetPositionTo1670445263.Value.Invoke(__self, affected, position);

	}

	public static class PrivateAccessor_HideObjectByPlayerDistance
	{

		private static readonly System.Lazy<FieldAccessor<HideObjectByPlayerDistance, TimerEventer>> _checkPlayerDistanceTimer =
				new System.Lazy<FieldAccessor<HideObjectByPlayerDistance, TimerEventer>>(() => FieldAccessor<HideObjectByPlayerDistance, TimerEventer>.Create("checkPlayerDistanceTimer"));
		private static readonly System.Lazy<FieldAccessor<HideObjectByPlayerDistance, UnityEngine.GameObject>> _objectToHide =
				new System.Lazy<FieldAccessor<HideObjectByPlayerDistance, UnityEngine.GameObject>>(() => FieldAccessor<HideObjectByPlayerDistance, UnityEngine.GameObject>.Create("objectToHide"));
		private static readonly System.Lazy<FieldAccessor<HideObjectByPlayerDistance, float>> _hideDistance =
				new System.Lazy<FieldAccessor<HideObjectByPlayerDistance, float>>(() => FieldAccessor<HideObjectByPlayerDistance, float>.Create("hideDistance"));

		public static TimerEventer GetCheckPlayerDistanceTimer(this HideObjectByPlayerDistance __self) => _checkPlayerDistanceTimer.Value.GetValue(__self);
		public static void SetCheckPlayerDistanceTimer(this HideObjectByPlayerDistance __self, TimerEventer value) => _checkPlayerDistanceTimer.Value.SetValue(__self, value);
		public static UnityEngine.GameObject GetObjectToHide(this HideObjectByPlayerDistance __self) => _objectToHide.Value.GetValue(__self);
		public static void SetObjectToHide(this HideObjectByPlayerDistance __self, UnityEngine.GameObject value) => _objectToHide.Value.SetValue(__self, value);
		public static float GetHideDistance(this HideObjectByPlayerDistance __self) => _hideDistance.Value.GetValue(__self);
		public static void SetHideDistance(this HideObjectByPlayerDistance __self, float value) => _hideDistance.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<HideObjectByPlayerDistance>> _Update757602046 =
				new System.Lazy<MethodAccessor<HideObjectByPlayerDistance>>(() => MethodAccessor<HideObjectByPlayerDistance>.Create("Update"));

		public static void Update(this HideObjectByPlayerDistance __self) => _Update757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Intervaller
	{

		private static readonly System.Lazy<FieldAccessor<Intervaller, float>> _activityDuration =
				new System.Lazy<FieldAccessor<Intervaller, float>>(() => FieldAccessor<Intervaller, float>.Create("activityDuration"));
		private static readonly System.Lazy<FieldAccessor<Intervaller, float>> _downTimeDuration =
				new System.Lazy<FieldAccessor<Intervaller, float>>(() => FieldAccessor<Intervaller, float>.Create("downTimeDuration"));
		private static readonly System.Lazy<FieldAccessor<Intervaller, float>> _currentTime =
				new System.Lazy<FieldAccessor<Intervaller, float>>(() => FieldAccessor<Intervaller, float>.Create("currentTime"));
		private static readonly System.Lazy<FieldAccessor<Intervaller, bool>> _currentlyActive =
				new System.Lazy<FieldAccessor<Intervaller, bool>>(() => FieldAccessor<Intervaller, bool>.Create("currentlyActive"));

		public static float GetActivityDuration(this Intervaller __self) => _activityDuration.Value.GetValue(__self);
		public static void SetActivityDuration(this Intervaller __self, float value) => _activityDuration.Value.SetValue(__self, value);
		public static float GetDownTimeDuration(this Intervaller __self) => _downTimeDuration.Value.GetValue(__self);
		public static void SetDownTimeDuration(this Intervaller __self, float value) => _downTimeDuration.Value.SetValue(__self, value);
		public static float GetCurrentTime(this Intervaller __self) => _currentTime.Value.GetValue(__self);
		public static void SetCurrentTime(this Intervaller __self, float value) => _currentTime.Value.SetValue(__self, value);
		public static bool GetCurrentlyActive(this Intervaller __self) => _currentlyActive.Value.GetValue(__self);
		public static void SetCurrentlyActive(this Intervaller __self, bool value) => _currentlyActive.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Intervaller>> _ActivateInterval757602046 =
				new System.Lazy<MethodAccessor<Intervaller>>(() => MethodAccessor<Intervaller>.Create("ActivateInterval"));
		private static readonly System.Lazy<MethodAccessor<Intervaller>> _DeActivateInterval757602046 =
				new System.Lazy<MethodAccessor<Intervaller>>(() => MethodAccessor<Intervaller>.Create("DeActivateInterval"));
		private static readonly System.Lazy<MethodAccessor<Intervaller>> _IsTimeInActiveIntervall3486905475 =
				new System.Lazy<MethodAccessor<Intervaller>>(() => MethodAccessor<Intervaller>.Create("IsTimeInActiveIntervall", typeof(float)));

		public static void ActivateInterval(this Intervaller __self) => _ActivateInterval757602046.Value.Invoke(__self);
		public static void DeActivateInterval(this Intervaller __self) => _DeActivateInterval757602046.Value.Invoke(__self);
		public static bool IsTimeInActiveIntervall(this Intervaller __self, float time) => (bool)_IsTimeInActiveIntervall3486905475.Value.Invoke(__self, time);

	}

	public static class PrivateAccessor_ItemObjectEnabler
	{

		private static readonly System.Lazy<FieldAccessor<ItemObjectEnabler, ItemModelConnection[]>> _itemConnections =
				new System.Lazy<FieldAccessor<ItemObjectEnabler, ItemModelConnection[]>>(() => FieldAccessor<ItemObjectEnabler, ItemModelConnection[]>.Create("itemConnections"));

		public static ItemModelConnection[] GetItemConnections(this ItemObjectEnabler __self) => _itemConnections.Value.GetValue(__self);
		public static void SetItemConnections(this ItemObjectEnabler __self, ItemModelConnection[] value) => _itemConnections.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_LayerMasks
	{

		private static readonly System.Lazy<MethodAccessor<LayerMasks>> _Awake757602046 =
				new System.Lazy<MethodAccessor<LayerMasks>>(() => MethodAccessor<LayerMasks>.Create("Awake"));

		public static void Awake(this LayerMasks __self) => _Awake757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_LineRenderFollow
	{

		private static readonly System.Lazy<FieldAccessor<LineRenderFollow, UnityEngine.LineRenderer>> _lineRenderer =
				new System.Lazy<FieldAccessor<LineRenderFollow, UnityEngine.LineRenderer>>(() => FieldAccessor<LineRenderFollow, UnityEngine.LineRenderer>.Create("lineRenderer"));
		private static readonly System.Lazy<FieldAccessor<LineRenderFollow, Rope.RopeAutoFollow[]>> _followTargets =
				new System.Lazy<FieldAccessor<LineRenderFollow, Rope.RopeAutoFollow[]>>(() => FieldAccessor<LineRenderFollow, Rope.RopeAutoFollow[]>.Create("followTargets"));

		public static UnityEngine.LineRenderer GetLineRenderer(this LineRenderFollow __self) => _lineRenderer.Value.GetValue(__self);
		public static void SetLineRenderer(this LineRenderFollow __self, UnityEngine.LineRenderer value) => _lineRenderer.Value.SetValue(__self, value);
		public static Rope.RopeAutoFollow[] GetFollowTargets(this LineRenderFollow __self) => _followTargets.Value.GetValue(__self);
		public static void SetFollowTargets(this LineRenderFollow __self, Rope.RopeAutoFollow[] value) => _followTargets.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<LineRenderFollow>> _Button_SetPositions757602046 =
				new System.Lazy<MethodAccessor<LineRenderFollow>>(() => MethodAccessor<LineRenderFollow>.Create("Button_SetPositions"));
		private static readonly System.Lazy<MethodAccessor<LineRenderFollow>> _Start757602046 =
				new System.Lazy<MethodAccessor<LineRenderFollow>>(() => MethodAccessor<LineRenderFollow>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<LineRenderFollow>> _Update757602046 =
				new System.Lazy<MethodAccessor<LineRenderFollow>>(() => MethodAccessor<LineRenderFollow>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<LineRenderFollow>> _SetPositionsToFollowTargets757602046 =
				new System.Lazy<MethodAccessor<LineRenderFollow>>(() => MethodAccessor<LineRenderFollow>.Create("SetPositionsToFollowTargets"));

		public static void Button_SetPositions(this LineRenderFollow __self) => _Button_SetPositions757602046.Value.Invoke(__self);
		public static void Start(this LineRenderFollow __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this LineRenderFollow __self) => _Update757602046.Value.Invoke(__self);
		public static void SetPositionsToFollowTargets(this LineRenderFollow __self) => _SetPositionsToFollowTargets757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_LookAtPlayer
	{

		private static readonly System.Lazy<MethodAccessor<LookAtPlayer>> _Update757602046 =
				new System.Lazy<MethodAccessor<LookAtPlayer>>(() => MethodAccessor<LookAtPlayer>.Create("Update"));

		public static void Update(this LookAtPlayer __self) => _Update757602046.Value.Invoke(__self);

	}

	public static class Private_LookAtPlayer
	{

		private static readonly System.Lazy<StaticFieldAccessor<Network_Player>> _localPlayer =
				new System.Lazy<StaticFieldAccessor<Network_Player>>(() => StaticFieldAccessor<Network_Player>.Create(typeof(LookAtPlayer), "localPlayer"));

		public static Network_Player GetLocalPlayer() => _localPlayer.Value.GetValue();
		public static void SetLocalPlayer(Network_Player value) => _localPlayer.Value.SetValue(value);

	}

	public static class PrivateAccessor_MaterialTiling
	{

		private static readonly System.Lazy<FieldAccessor<MaterialTiling, string>> _tagToSearch =
				new System.Lazy<FieldAccessor<MaterialTiling, string>>(() => FieldAccessor<MaterialTiling, string>.Create("tagToSearch"));
		private static readonly System.Lazy<FieldAccessor<MaterialTiling, UnityEngine.MaterialPropertyBlock>> _matPropBlock =
				new System.Lazy<FieldAccessor<MaterialTiling, UnityEngine.MaterialPropertyBlock>>(() => FieldAccessor<MaterialTiling, UnityEngine.MaterialPropertyBlock>.Create("matPropBlock"));

		public static string GetTagToSearch(this MaterialTiling __self) => _tagToSearch.Value.GetValue(__self);
		public static void SetTagToSearch(this MaterialTiling __self, string value) => _tagToSearch.Value.SetValue(__self, value);
		public static UnityEngine.MaterialPropertyBlock GetMatPropBlock(this MaterialTiling __self) => _matPropBlock.Value.GetValue(__self);
		public static void SetMatPropBlock(this MaterialTiling __self, UnityEngine.MaterialPropertyBlock value) => _matPropBlock.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<MaterialTiling>> _Awake757602046 =
				new System.Lazy<MethodAccessor<MaterialTiling>>(() => MethodAccessor<MaterialTiling>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<MaterialTiling>> _RefreshChildrenMaterials757602046 =
				new System.Lazy<MethodAccessor<MaterialTiling>>(() => MethodAccessor<MaterialTiling>.Create("RefreshChildrenMaterials"));
		private static readonly System.Lazy<MethodAccessor<MaterialTiling>> _RefreshTransform3437001883 =
				new System.Lazy<MethodAccessor<MaterialTiling>>(() => MethodAccessor<MaterialTiling>.Create("RefreshTransform", typeof(UnityEngine.Transform)));

		public static void Awake(this MaterialTiling __self) => _Awake757602046.Value.Invoke(__self);
		public static void RefreshChildrenMaterials(this MaterialTiling __self) => _RefreshChildrenMaterials757602046.Value.Invoke(__self);
		public static void RefreshTransform(this MaterialTiling __self, UnityEngine.Transform transform) => _RefreshTransform3437001883.Value.Invoke(__self, transform);

	}

	public static class PrivateAccessor_MeasureRotationDelta
	{

		private static readonly System.Lazy<FieldAccessor<MeasureRotationDelta, UnityEngine.Vector3>> _normalizedRotationDelta =
				new System.Lazy<FieldAccessor<MeasureRotationDelta, UnityEngine.Vector3>>(() => FieldAccessor<MeasureRotationDelta, UnityEngine.Vector3>.Create("normalizedRotationDelta"));
		private static readonly System.Lazy<FieldAccessor<MeasureRotationDelta, UnityEngine.Vector3>> _rotationDelta =
				new System.Lazy<FieldAccessor<MeasureRotationDelta, UnityEngine.Vector3>>(() => FieldAccessor<MeasureRotationDelta, UnityEngine.Vector3>.Create("rotationDelta"));
		private static readonly System.Lazy<FieldAccessor<MeasureRotationDelta, bool>> _invertX =
				new System.Lazy<FieldAccessor<MeasureRotationDelta, bool>>(() => FieldAccessor<MeasureRotationDelta, bool>.Create("invertX"));
		private static readonly System.Lazy<FieldAccessor<MeasureRotationDelta, bool>> _invertY =
				new System.Lazy<FieldAccessor<MeasureRotationDelta, bool>>(() => FieldAccessor<MeasureRotationDelta, bool>.Create("invertY"));
		private static readonly System.Lazy<FieldAccessor<MeasureRotationDelta, bool>> _invertZ =
				new System.Lazy<FieldAccessor<MeasureRotationDelta, bool>>(() => FieldAccessor<MeasureRotationDelta, bool>.Create("invertZ"));
		private static readonly System.Lazy<FieldAccessor<MeasureRotationDelta, float>> _maxRotationDelta =
				new System.Lazy<FieldAccessor<MeasureRotationDelta, float>>(() => FieldAccessor<MeasureRotationDelta, float>.Create("maxRotationDelta"));
		private static readonly System.Lazy<FieldAccessor<MeasureRotationDelta, float>> _minimumRotationDelta =
				new System.Lazy<FieldAccessor<MeasureRotationDelta, float>>(() => FieldAccessor<MeasureRotationDelta, float>.Create("minimumRotationDelta"));
		private static readonly System.Lazy<FieldAccessor<MeasureRotationDelta, UnityEngine.Transform>> _trackedTransform =
				new System.Lazy<FieldAccessor<MeasureRotationDelta, UnityEngine.Transform>>(() => FieldAccessor<MeasureRotationDelta, UnityEngine.Transform>.Create("trackedTransform"));
		private static readonly System.Lazy<FieldAccessor<MeasureRotationDelta, System.Collections.Generic.List<UnityEngine.Vector3>>> _previousRotations =
				new System.Lazy<FieldAccessor<MeasureRotationDelta, System.Collections.Generic.List<UnityEngine.Vector3>>>(() => FieldAccessor<MeasureRotationDelta, System.Collections.Generic.List<UnityEngine.Vector3>>.Create("previousRotations"));
		private static readonly System.Lazy<FieldAccessor<MeasureRotationDelta, int>> _savedRotationCount =
				new System.Lazy<FieldAccessor<MeasureRotationDelta, int>>(() => FieldAccessor<MeasureRotationDelta, int>.Create("savedRotationCount"));

		public static UnityEngine.Vector3 GetNormalizedRotationDelta(this MeasureRotationDelta __self) => _normalizedRotationDelta.Value.GetValue(__self);
		public static void SetNormalizedRotationDelta(this MeasureRotationDelta __self, UnityEngine.Vector3 value) => _normalizedRotationDelta.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetRotationDelta(this MeasureRotationDelta __self) => _rotationDelta.Value.GetValue(__self);
		public static void SetRotationDelta(this MeasureRotationDelta __self, UnityEngine.Vector3 value) => _rotationDelta.Value.SetValue(__self, value);
		public static bool GetInvertX(this MeasureRotationDelta __self) => _invertX.Value.GetValue(__self);
		public static void SetInvertX(this MeasureRotationDelta __self, bool value) => _invertX.Value.SetValue(__self, value);
		public static bool GetInvertY(this MeasureRotationDelta __self) => _invertY.Value.GetValue(__self);
		public static void SetInvertY(this MeasureRotationDelta __self, bool value) => _invertY.Value.SetValue(__self, value);
		public static bool GetInvertZ(this MeasureRotationDelta __self) => _invertZ.Value.GetValue(__self);
		public static void SetInvertZ(this MeasureRotationDelta __self, bool value) => _invertZ.Value.SetValue(__self, value);
		public static float GetMaxRotationDelta(this MeasureRotationDelta __self) => _maxRotationDelta.Value.GetValue(__self);
		public static void SetMaxRotationDelta(this MeasureRotationDelta __self, float value) => _maxRotationDelta.Value.SetValue(__self, value);
		public static float GetMinimumRotationDelta(this MeasureRotationDelta __self) => _minimumRotationDelta.Value.GetValue(__self);
		public static void SetMinimumRotationDelta(this MeasureRotationDelta __self, float value) => _minimumRotationDelta.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetTrackedTransform(this MeasureRotationDelta __self) => _trackedTransform.Value.GetValue(__self);
		public static void SetTrackedTransform(this MeasureRotationDelta __self, UnityEngine.Transform value) => _trackedTransform.Value.SetValue(__self, value);
		public static System.Collections.Generic.List<UnityEngine.Vector3> GetPreviousRotations(this MeasureRotationDelta __self) => _previousRotations.Value.GetValue(__self);
		public static void SetPreviousRotations(this MeasureRotationDelta __self, System.Collections.Generic.List<UnityEngine.Vector3> value) => _previousRotations.Value.SetValue(__self, value);
		public static int GetSavedRotationCount(this MeasureRotationDelta __self) => _savedRotationCount.Value.GetValue(__self);
		public static void SetSavedRotationCount(this MeasureRotationDelta __self, int value) => _savedRotationCount.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<MeasureRotationDelta>> _GetAverageRotationVector757602046 =
				new System.Lazy<MethodAccessor<MeasureRotationDelta>>(() => MethodAccessor<MeasureRotationDelta>.Create("GetAverageRotationVector"));
		private static readonly System.Lazy<MethodAccessor<MeasureRotationDelta>> _OnValidate757602046 =
				new System.Lazy<MethodAccessor<MeasureRotationDelta>>(() => MethodAccessor<MeasureRotationDelta>.Create("OnValidate"));
		private static readonly System.Lazy<MethodAccessor<MeasureRotationDelta>> _LateUpdate757602046 =
				new System.Lazy<MethodAccessor<MeasureRotationDelta>>(() => MethodAccessor<MeasureRotationDelta>.Create("LateUpdate"));

		public static UnityEngine.Vector3 GetAverageRotationVector(this MeasureRotationDelta __self) => (UnityEngine.Vector3)_GetAverageRotationVector757602046.Value.Invoke(__self);
		public static void OnValidate(this MeasureRotationDelta __self) => _OnValidate757602046.Value.Invoke(__self);
		public static void LateUpdate(this MeasureRotationDelta __self) => _LateUpdate757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_MeasureRotationDelta_Animator
	{

		private static readonly System.Lazy<FieldAccessor<MeasureRotationDelta_Animator, UnityEngine.Animator>> _animator =
				new System.Lazy<FieldAccessor<MeasureRotationDelta_Animator, UnityEngine.Animator>>(() => FieldAccessor<MeasureRotationDelta_Animator, UnityEngine.Animator>.Create("animator"));
		private static readonly System.Lazy<FieldAccessor<MeasureRotationDelta_Animator, float>> _lerpAnimatorSpeed =
				new System.Lazy<FieldAccessor<MeasureRotationDelta_Animator, float>>(() => FieldAccessor<MeasureRotationDelta_Animator, float>.Create("lerpAnimatorSpeed"));
		private static readonly System.Lazy<FieldAccessor<MeasureRotationDelta_Animator, string>> _parameter =
				new System.Lazy<FieldAccessor<MeasureRotationDelta_Animator, string>>(() => FieldAccessor<MeasureRotationDelta_Animator, string>.Create("parameter"));
		private static readonly System.Lazy<FieldAccessor<MeasureRotationDelta_Animator, bool>> _xRotation =
				new System.Lazy<FieldAccessor<MeasureRotationDelta_Animator, bool>>(() => FieldAccessor<MeasureRotationDelta_Animator, bool>.Create("xRotation"));
		private static readonly System.Lazy<FieldAccessor<MeasureRotationDelta_Animator, bool>> _yRotation =
				new System.Lazy<FieldAccessor<MeasureRotationDelta_Animator, bool>>(() => FieldAccessor<MeasureRotationDelta_Animator, bool>.Create("yRotation"));
		private static readonly System.Lazy<FieldAccessor<MeasureRotationDelta_Animator, bool>> _zRotation =
				new System.Lazy<FieldAccessor<MeasureRotationDelta_Animator, bool>>(() => FieldAccessor<MeasureRotationDelta_Animator, bool>.Create("zRotation"));

		public static UnityEngine.Animator GetAnimator(this MeasureRotationDelta_Animator __self) => _animator.Value.GetValue(__self);
		public static void SetAnimator(this MeasureRotationDelta_Animator __self, UnityEngine.Animator value) => _animator.Value.SetValue(__self, value);
		public static float GetLerpAnimatorSpeed(this MeasureRotationDelta_Animator __self) => _lerpAnimatorSpeed.Value.GetValue(__self);
		public static void SetLerpAnimatorSpeed(this MeasureRotationDelta_Animator __self, float value) => _lerpAnimatorSpeed.Value.SetValue(__self, value);
		public static string GetParameter(this MeasureRotationDelta_Animator __self) => _parameter.Value.GetValue(__self);
		public static void SetParameter(this MeasureRotationDelta_Animator __self, string value) => _parameter.Value.SetValue(__self, value);
		public static bool GetXRotation(this MeasureRotationDelta_Animator __self) => _xRotation.Value.GetValue(__self);
		public static void SetXRotation(this MeasureRotationDelta_Animator __self, bool value) => _xRotation.Value.SetValue(__self, value);
		public static bool GetYRotation(this MeasureRotationDelta_Animator __self) => _yRotation.Value.GetValue(__self);
		public static void SetYRotation(this MeasureRotationDelta_Animator __self, bool value) => _yRotation.Value.SetValue(__self, value);
		public static bool GetZRotation(this MeasureRotationDelta_Animator __self) => _zRotation.Value.GetValue(__self);
		public static void SetZRotation(this MeasureRotationDelta_Animator __self, bool value) => _zRotation.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<MeasureRotationDelta_Animator>> _LateUpdate757602046 =
				new System.Lazy<MethodAccessor<MeasureRotationDelta_Animator>>(() => MethodAccessor<MeasureRotationDelta_Animator>.Create("LateUpdate"));

		public static void LateUpdate(this MeasureRotationDelta_Animator __self) => _LateUpdate757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_MeasureRotationDelta_Sound
	{

		private static readonly System.Lazy<FieldAccessor<MeasureRotationDelta_Sound, FMODUnity.StudioEventEmitter>> _emitter_rotate =
				new System.Lazy<FieldAccessor<MeasureRotationDelta_Sound, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<MeasureRotationDelta_Sound, FMODUnity.StudioEventEmitter>.Create("emitter_rotate"));
		private static readonly System.Lazy<FieldAccessor<MeasureRotationDelta_Sound, float>> _minRequiredRotation =
				new System.Lazy<FieldAccessor<MeasureRotationDelta_Sound, float>>(() => FieldAccessor<MeasureRotationDelta_Sound, float>.Create("minRequiredRotation"));
		private static readonly System.Lazy<FieldAccessor<MeasureRotationDelta_Sound, bool>> _xRotation =
				new System.Lazy<FieldAccessor<MeasureRotationDelta_Sound, bool>>(() => FieldAccessor<MeasureRotationDelta_Sound, bool>.Create("xRotation"));
		private static readonly System.Lazy<FieldAccessor<MeasureRotationDelta_Sound, bool>> _yRotation =
				new System.Lazy<FieldAccessor<MeasureRotationDelta_Sound, bool>>(() => FieldAccessor<MeasureRotationDelta_Sound, bool>.Create("yRotation"));
		private static readonly System.Lazy<FieldAccessor<MeasureRotationDelta_Sound, bool>> _zRotation =
				new System.Lazy<FieldAccessor<MeasureRotationDelta_Sound, bool>>(() => FieldAccessor<MeasureRotationDelta_Sound, bool>.Create("zRotation"));
		private static readonly System.Lazy<FieldAccessor<MeasureRotationDelta_Sound, bool>> _stopAutomatically =
				new System.Lazy<FieldAccessor<MeasureRotationDelta_Sound, bool>>(() => FieldAccessor<MeasureRotationDelta_Sound, bool>.Create("stopAutomatically"));
		private static readonly System.Lazy<FieldAccessor<MeasureRotationDelta_Sound, string>> _emitterParameter =
				new System.Lazy<FieldAccessor<MeasureRotationDelta_Sound, string>>(() => FieldAccessor<MeasureRotationDelta_Sound, string>.Create("emitterParameter"));
		private static readonly System.Lazy<FieldAccessor<MeasureRotationDelta_Sound, float>> _emitterLerpSpeed =
				new System.Lazy<FieldAccessor<MeasureRotationDelta_Sound, float>>(() => FieldAccessor<MeasureRotationDelta_Sound, float>.Create("emitterLerpSpeed"));

		public static FMODUnity.StudioEventEmitter GetEmitter_rotate(this MeasureRotationDelta_Sound __self) => _emitter_rotate.Value.GetValue(__self);
		public static void SetEmitter_rotate(this MeasureRotationDelta_Sound __self, FMODUnity.StudioEventEmitter value) => _emitter_rotate.Value.SetValue(__self, value);
		public static float GetMinRequiredRotation(this MeasureRotationDelta_Sound __self) => _minRequiredRotation.Value.GetValue(__self);
		public static void SetMinRequiredRotation(this MeasureRotationDelta_Sound __self, float value) => _minRequiredRotation.Value.SetValue(__self, value);
		public static bool GetXRotation(this MeasureRotationDelta_Sound __self) => _xRotation.Value.GetValue(__self);
		public static void SetXRotation(this MeasureRotationDelta_Sound __self, bool value) => _xRotation.Value.SetValue(__self, value);
		public static bool GetYRotation(this MeasureRotationDelta_Sound __self) => _yRotation.Value.GetValue(__self);
		public static void SetYRotation(this MeasureRotationDelta_Sound __self, bool value) => _yRotation.Value.SetValue(__self, value);
		public static bool GetZRotation(this MeasureRotationDelta_Sound __self) => _zRotation.Value.GetValue(__self);
		public static void SetZRotation(this MeasureRotationDelta_Sound __self, bool value) => _zRotation.Value.SetValue(__self, value);
		public static bool GetStopAutomatically(this MeasureRotationDelta_Sound __self) => _stopAutomatically.Value.GetValue(__self);
		public static void SetStopAutomatically(this MeasureRotationDelta_Sound __self, bool value) => _stopAutomatically.Value.SetValue(__self, value);
		public static string GetEmitterParameter(this MeasureRotationDelta_Sound __self) => _emitterParameter.Value.GetValue(__self);
		public static void SetEmitterParameter(this MeasureRotationDelta_Sound __self, string value) => _emitterParameter.Value.SetValue(__self, value);
		public static float GetEmitterLerpSpeed(this MeasureRotationDelta_Sound __self) => _emitterLerpSpeed.Value.GetValue(__self);
		public static void SetEmitterLerpSpeed(this MeasureRotationDelta_Sound __self, float value) => _emitterLerpSpeed.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<MeasureRotationDelta_Sound>> _LateUpdate757602046 =
				new System.Lazy<MethodAccessor<MeasureRotationDelta_Sound>>(() => MethodAccessor<MeasureRotationDelta_Sound>.Create("LateUpdate"));

		public static void LateUpdate(this MeasureRotationDelta_Sound __self) => _LateUpdate757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_NPC_Model
	{

		private static readonly System.Lazy<MethodAccessor<NPC_Model>> _ApplySkinnedToRenderer757602046 =
				new System.Lazy<MethodAccessor<NPC_Model>>(() => MethodAccessor<NPC_Model>.Create("ApplySkinnedToRenderer"));

		public static void ApplySkinnedToRenderer(this NPC_Model __self) => _ApplySkinnedToRenderer757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_NPC_Model_NPCVisualVariant
	{

		private static readonly System.Lazy<MethodAccessor<NPC_Model.NPCVisualVariant>> _Use757602046 =
				new System.Lazy<MethodAccessor<NPC_Model.NPCVisualVariant>>(() => MethodAccessor<NPC_Model.NPCVisualVariant>.Create("Use"));

		public static void Use(this NPC_Model.NPCVisualVariant __self) => _Use757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_ObjectOffsetConnection
	{

		private static readonly System.Lazy<FieldAccessor<ObjectOffsetConnection, UnityEngine.Vector3>> _localPosition =
				new System.Lazy<FieldAccessor<ObjectOffsetConnection, UnityEngine.Vector3>>(() => FieldAccessor<ObjectOffsetConnection, UnityEngine.Vector3>.Create("localPosition"));
		private static readonly System.Lazy<FieldAccessor<ObjectOffsetConnection, UnityEngine.Vector3>> _localEuler =
				new System.Lazy<FieldAccessor<ObjectOffsetConnection, UnityEngine.Vector3>>(() => FieldAccessor<ObjectOffsetConnection, UnityEngine.Vector3>.Create("localEuler"));
		private static readonly System.Lazy<FieldAccessor<ObjectOffsetConnection, UnityEngine.Transform>> _parent =
				new System.Lazy<FieldAccessor<ObjectOffsetConnection, UnityEngine.Transform>>(() => FieldAccessor<ObjectOffsetConnection, UnityEngine.Transform>.Create("parent"));

		public static UnityEngine.Vector3 GetLocalPosition(this ObjectOffsetConnection __self) => _localPosition.Value.GetValue(__self);
		public static void SetLocalPosition(this ObjectOffsetConnection __self, UnityEngine.Vector3 value) => _localPosition.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetLocalEuler(this ObjectOffsetConnection __self) => _localEuler.Value.GetValue(__self);
		public static void SetLocalEuler(this ObjectOffsetConnection __self, UnityEngine.Vector3 value) => _localEuler.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetParent(this ObjectOffsetConnection __self) => _parent.Value.GetValue(__self);
		public static void SetParent(this ObjectOffsetConnection __self, UnityEngine.Transform value) => _parent.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_ObjectOffsetter
	{

		private static readonly System.Lazy<FieldAccessor<ObjectOffsetter, UnityEngine.Transform>> _target =
				new System.Lazy<FieldAccessor<ObjectOffsetter, UnityEngine.Transform>>(() => FieldAccessor<ObjectOffsetter, UnityEngine.Transform>.Create("target"));
		private static readonly System.Lazy<FieldAccessor<ObjectOffsetter, ObjectOffsetConnection[]>> _offsetConnections =
				new System.Lazy<FieldAccessor<ObjectOffsetter, ObjectOffsetConnection[]>>(() => FieldAccessor<ObjectOffsetter, ObjectOffsetConnection[]>.Create("offsetConnections"));

		public static UnityEngine.Transform GetTarget(this ObjectOffsetter __self) => _target.Value.GetValue(__self);
		public static void SetTarget(this ObjectOffsetter __self, UnityEngine.Transform value) => _target.Value.SetValue(__self, value);
		public static ObjectOffsetConnection[] GetOffsetConnections(this ObjectOffsetter __self) => _offsetConnections.Value.GetValue(__self);
		public static void SetOffsetConnections(this ObjectOffsetter __self, ObjectOffsetConnection[] value) => _offsetConnections.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_ObjectScaler
	{

		private static readonly System.Lazy<FieldAccessor<ObjectScaler, Axis>> _axisToScale =
				new System.Lazy<FieldAccessor<ObjectScaler, Axis>>(() => FieldAccessor<ObjectScaler, Axis>.Create("axisToScale"));
		private static readonly System.Lazy<FieldAccessor<ObjectScaler, UnityEngine.Transform>> _transformToScale =
				new System.Lazy<FieldAccessor<ObjectScaler, UnityEngine.Transform>>(() => FieldAccessor<ObjectScaler, UnityEngine.Transform>.Create("transformToScale"));
		private static readonly System.Lazy<FieldAccessor<ObjectScaler, Interval_Float>> _localAxisValueInterval =
				new System.Lazy<FieldAccessor<ObjectScaler, Interval_Float>>(() => FieldAccessor<ObjectScaler, Interval_Float>.Create("localAxisValueInterval"));
		private static readonly System.Lazy<FieldAccessor<ObjectScaler, float>> _lerpSpeed =
				new System.Lazy<FieldAccessor<ObjectScaler, float>>(() => FieldAccessor<ObjectScaler, float>.Create("lerpSpeed"));
		private static readonly System.Lazy<FieldAccessor<ObjectScaler, float>> _startValue =
				new System.Lazy<FieldAccessor<ObjectScaler, float>>(() => FieldAccessor<ObjectScaler, float>.Create("startValue"));
		private static readonly System.Lazy<FieldAccessor<ObjectScaler, float>> _currentNormalizedValue =
				new System.Lazy<FieldAccessor<ObjectScaler, float>>(() => FieldAccessor<ObjectScaler, float>.Create("currentNormalizedValue"));

		public static Axis GetAxisToScale(this ObjectScaler __self) => _axisToScale.Value.GetValue(__self);
		public static void SetAxisToScale(this ObjectScaler __self, Axis value) => _axisToScale.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetTransformToScale(this ObjectScaler __self) => _transformToScale.Value.GetValue(__self);
		public static void SetTransformToScale(this ObjectScaler __self, UnityEngine.Transform value) => _transformToScale.Value.SetValue(__self, value);
		public static Interval_Float GetLocalAxisValueInterval(this ObjectScaler __self) => _localAxisValueInterval.Value.GetValue(__self);
		public static void SetLocalAxisValueInterval(this ObjectScaler __self, Interval_Float value) => _localAxisValueInterval.Value.SetValue(__self, value);
		public static float GetLerpSpeed(this ObjectScaler __self) => _lerpSpeed.Value.GetValue(__self);
		public static void SetLerpSpeed(this ObjectScaler __self, float value) => _lerpSpeed.Value.SetValue(__self, value);
		public static float GetStartValue(this ObjectScaler __self) => _startValue.Value.GetValue(__self);
		public static void SetStartValue(this ObjectScaler __self, float value) => _startValue.Value.SetValue(__self, value);
		public static float GetCurrentNormalizedValue(this ObjectScaler __self) => _currentNormalizedValue.Value.GetValue(__self);
		public static void SetCurrentNormalizedValue(this ObjectScaler __self, float value) => _currentNormalizedValue.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<ObjectScaler>> _OnEnable757602046 =
				new System.Lazy<MethodAccessor<ObjectScaler>>(() => MethodAccessor<ObjectScaler>.Create("OnEnable"));
		private static readonly System.Lazy<MethodAccessor<ObjectScaler>> _OnValidate757602046 =
				new System.Lazy<MethodAccessor<ObjectScaler>>(() => MethodAccessor<ObjectScaler>.Create("OnValidate"));
		private static readonly System.Lazy<MethodAccessor<ObjectScaler>> _SetYPositionCoroutine3486905475 =
				new System.Lazy<MethodAccessor<ObjectScaler>>(() => MethodAccessor<ObjectScaler>.Create("SetYPositionCoroutine", typeof(float)));
		private static readonly System.Lazy<MethodAccessor<ObjectScaler>> _SetYScale3486905475 =
				new System.Lazy<MethodAccessor<ObjectScaler>>(() => MethodAccessor<ObjectScaler>.Create("SetYScale", typeof(float)));

		public static void OnEnable(this ObjectScaler __self) => _OnEnable757602046.Value.Invoke(__self);
		public static void OnValidate(this ObjectScaler __self) => _OnValidate757602046.Value.Invoke(__self);
		public static System.Collections.IEnumerator SetYPositionCoroutine(this ObjectScaler __self, float normalizedValue) => (System.Collections.IEnumerator)_SetYPositionCoroutine3486905475.Value.Invoke(__self, normalizedValue);
		public static void SetYScale(this ObjectScaler __self, float normalizedValue) => _SetYScale3486905475.Value.Invoke(__self, normalizedValue);

	}

	public static class PrivateAccessor_OnCollisionPlaySound
	{

		private static readonly System.Lazy<FieldAccessor<OnCollisionPlaySound, string>> _eventRef_sound =
				new System.Lazy<FieldAccessor<OnCollisionPlaySound, string>>(() => FieldAccessor<OnCollisionPlaySound, string>.Create("eventRef_sound"));
		private static readonly System.Lazy<FieldAccessor<OnCollisionPlaySound, float>> _cooldownTime =
				new System.Lazy<FieldAccessor<OnCollisionPlaySound, float>>(() => FieldAccessor<OnCollisionPlaySound, float>.Create("cooldownTime"));
		private static readonly System.Lazy<FieldAccessor<OnCollisionPlaySound, bool>> _canPlaySound =
				new System.Lazy<FieldAccessor<OnCollisionPlaySound, bool>>(() => FieldAccessor<OnCollisionPlaySound, bool>.Create("canPlaySound"));

		public static string GetEventRef_sound(this OnCollisionPlaySound __self) => _eventRef_sound.Value.GetValue(__self);
		public static void SetEventRef_sound(this OnCollisionPlaySound __self, string value) => _eventRef_sound.Value.SetValue(__self, value);
		public static float GetCooldownTime(this OnCollisionPlaySound __self) => _cooldownTime.Value.GetValue(__self);
		public static void SetCooldownTime(this OnCollisionPlaySound __self, float value) => _cooldownTime.Value.SetValue(__self, value);
		public static bool GetCanPlaySound(this OnCollisionPlaySound __self) => _canPlaySound.Value.GetValue(__self);
		public static void SetCanPlaySound(this OnCollisionPlaySound __self, bool value) => _canPlaySound.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<OnCollisionPlaySound>> _OnCollisionEnter3430762572 =
				new System.Lazy<MethodAccessor<OnCollisionPlaySound>>(() => MethodAccessor<OnCollisionPlaySound>.Create("OnCollisionEnter", typeof(UnityEngine.Collision)));
		private static readonly System.Lazy<MethodAccessor<OnCollisionPlaySound>> _ResetCooldown757602046 =
				new System.Lazy<MethodAccessor<OnCollisionPlaySound>>(() => MethodAccessor<OnCollisionPlaySound>.Create("ResetCooldown"));

		public static void OnCollisionEnter(this OnCollisionPlaySound __self, UnityEngine.Collision collision) => _OnCollisionEnter3430762572.Value.Invoke(__self, collision);
		public static System.Collections.IEnumerator ResetCooldown(this OnCollisionPlaySound __self) => (System.Collections.IEnumerator)_ResetCooldown757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_ParticleCollisionHandler
	{

		private static readonly System.Lazy<FieldAccessor<ParticleCollisionHandler, string>> _eventref_collide =
				new System.Lazy<FieldAccessor<ParticleCollisionHandler, string>>(() => FieldAccessor<ParticleCollisionHandler, string>.Create("eventref_collide"));

		public static string GetEventref_collide(this ParticleCollisionHandler __self) => _eventref_collide.Value.GetValue(__self);
		public static void SetEventref_collide(this ParticleCollisionHandler __self, string value) => _eventref_collide.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<ParticleCollisionHandler>> _OnParticleCollision3487180896 =
				new System.Lazy<MethodAccessor<ParticleCollisionHandler>>(() => MethodAccessor<ParticleCollisionHandler>.Create("OnParticleCollision", typeof(UnityEngine.GameObject)));

		public static void OnParticleCollision(this ParticleCollisionHandler __self, UnityEngine.GameObject other) => _OnParticleCollision3487180896.Value.Invoke(__self, other);

	}

	public static class PrivateAccessor_ParticleCollisionReciever
	{

		private static readonly System.Lazy<FieldAccessor<ParticleCollisionReciever, string>> _eventRef_emit =
				new System.Lazy<FieldAccessor<ParticleCollisionReciever, string>>(() => FieldAccessor<ParticleCollisionReciever, string>.Create("eventRef_emit"));

		public static string GetEventRef_emit(this ParticleCollisionReciever __self) => _eventRef_emit.Value.GetValue(__self);
		public static void SetEventRef_emit(this ParticleCollisionReciever __self, string value) => _eventRef_emit.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<ParticleCollisionReciever>> _OnDrawGizmos757602046 =
				new System.Lazy<MethodAccessor<ParticleCollisionReciever>>(() => MethodAccessor<ParticleCollisionReciever>.Create("OnDrawGizmos"));
		private static readonly System.Lazy<MethodAccessor<ParticleCollisionReciever>> _EmitParticleFromOutSystem757602046 =
				new System.Lazy<MethodAccessor<ParticleCollisionReciever>>(() => MethodAccessor<ParticleCollisionReciever>.Create("EmitParticleFromOutSystem"));

		public static void OnDrawGizmos(this ParticleCollisionReciever __self) => _OnDrawGizmos757602046.Value.Invoke(__self);
		public static void EmitParticleFromOutSystem(this ParticleCollisionReciever __self) => _EmitParticleFromOutSystem757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_ParticleSystemHider
	{

		private static readonly System.Lazy<FieldAccessor<ParticleSystemHider, UnityEngine.ParticleSystem>> _particles =
				new System.Lazy<FieldAccessor<ParticleSystemHider, UnityEngine.ParticleSystem>>(() => FieldAccessor<ParticleSystemHider, UnityEngine.ParticleSystem>.Create("particles"));

		public static UnityEngine.ParticleSystem GetParticles(this ParticleSystemHider __self) => _particles.Value.GetValue(__self);
		public static void SetParticles(this ParticleSystemHider __self, UnityEngine.ParticleSystem value) => _particles.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<ParticleSystemHider>> _Awake757602046 =
				new System.Lazy<MethodAccessor<ParticleSystemHider>>(() => MethodAccessor<ParticleSystemHider>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<ParticleSystemHider>> _OnEnable757602046 =
				new System.Lazy<MethodAccessor<ParticleSystemHider>>(() => MethodAccessor<ParticleSystemHider>.Create("OnEnable"));
		private static readonly System.Lazy<MethodAccessor<ParticleSystemHider>> _HideSystem3486905475 =
				new System.Lazy<MethodAccessor<ParticleSystemHider>>(() => MethodAccessor<ParticleSystemHider>.Create("HideSystem", typeof(float)));

		public static void Awake(this ParticleSystemHider __self) => _Awake757602046.Value.Invoke(__self);
		public static void OnEnable(this ParticleSystemHider __self) => _OnEnable757602046.Value.Invoke(__self);
		public static System.Collections.IEnumerator HideSystem(this ParticleSystemHider __self, float timeDelay) => (System.Collections.IEnumerator)_HideSystem3486905475.Value.Invoke(__self, timeDelay);

	}

	public static class PrivateAccessor_PlayerCount_Component
	{

		private static readonly System.Lazy<FieldAccessor<PlayerCount_Component, Interval_Int>> _currentRange =
				new System.Lazy<FieldAccessor<PlayerCount_Component, Interval_Int>>(() => FieldAccessor<PlayerCount_Component, Interval_Int>.Create("currentRange"));

		public static Interval_Int GetCurrentRange(this PlayerCount_Component __self) => _currentRange.Value.GetValue(__self);
		public static void SetCurrentRange(this PlayerCount_Component __self, Interval_Int value) => _currentRange.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<PlayerCount_Component>> _Start757602046 =
				new System.Lazy<MethodAccessor<PlayerCount_Component>>(() => MethodAccessor<PlayerCount_Component>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<PlayerCount_Component>> _RangeUpdated3491843694 =
				new System.Lazy<MethodAccessor<PlayerCount_Component>>(() => MethodAccessor<PlayerCount_Component>.Create("RangeUpdated", typeof(Interval_Int)));
		private static readonly System.Lazy<MethodAccessor<PlayerCount_Component>> _UpdateRange757602046 =
				new System.Lazy<MethodAccessor<PlayerCount_Component>>(() => MethodAccessor<PlayerCount_Component>.Create("UpdateRange"));

		public static void Start(this PlayerCount_Component __self) => _Start757602046.Value.Invoke(__self);
		public static void RangeUpdated(this PlayerCount_Component __self, Interval_Int newRange) => _RangeUpdated3491843694.Value.Invoke(__self, newRange);
		public static void UpdateRange(this PlayerCount_Component __self) => _UpdateRange757602046.Value.Invoke(__self);

	}

	public static class Private_PlayerCount_Component
	{

		private static readonly System.Lazy<StaticFieldAccessor<Raft_Network>> _network =
				new System.Lazy<StaticFieldAccessor<Raft_Network>>(() => StaticFieldAccessor<Raft_Network>.Create(typeof(PlayerCount_Component), "network"));

		public static Raft_Network GetNetwork() => _network.Value.GetValue();
		public static void SetNetwork(Raft_Network value) => _network.Value.SetValue(value);

	}

	public static class PrivateAccessor_PlayerCount_Component_Spawner
	{

		private static readonly System.Lazy<MethodAccessor<PlayerCount_Component_Spawner>> _RangeUpdated3491843694 =
				new System.Lazy<MethodAccessor<PlayerCount_Component_Spawner>>(() => MethodAccessor<PlayerCount_Component_Spawner>.Create("RangeUpdated", typeof(Interval_Int)));
		private static readonly System.Lazy<MethodAccessor<PlayerCount_Component_Spawner>> _SetSpawnersCanSpawn3460024625 =
				new System.Lazy<MethodAccessor<PlayerCount_Component_Spawner>>(() => MethodAccessor<PlayerCount_Component_Spawner>.Create("SetSpawnersCanSpawn", typeof(System.Collections.Generic.List<LandmarkEntitySpawner>), typeof(bool)));

		public static void RangeUpdated(this PlayerCount_Component_Spawner __self, Interval_Int newRange) => _RangeUpdated3491843694.Value.Invoke(__self, newRange);
		public static void SetSpawnersCanSpawn(this PlayerCount_Component_Spawner __self, System.Collections.Generic.List<LandmarkEntitySpawner> spawners, bool value) => _SetSpawnersCanSpawn3460024625.Value.Invoke(__self, spawners, value);

	}

	public static class PrivateAccessor_PromoRunner
	{

		private static readonly System.Lazy<MethodAccessor<PromoRunner>> _Start757602046 =
				new System.Lazy<MethodAccessor<PromoRunner>>(() => MethodAccessor<PromoRunner>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<PromoRunner>> _Update757602046 =
				new System.Lazy<MethodAccessor<PromoRunner>>(() => MethodAccessor<PromoRunner>.Create("Update"));

		public static void Start(this PromoRunner __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this PromoRunner __self) => _Update757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_QuestInteractable_Balboa_Bicycle
	{

		private static readonly System.Lazy<FieldAccessor<QuestInteractable_Balboa_Bicycle, Interval_Float>> _plingInterval =
				new System.Lazy<FieldAccessor<QuestInteractable_Balboa_Bicycle, Interval_Float>>(() => FieldAccessor<QuestInteractable_Balboa_Bicycle, Interval_Float>.Create("plingInterval"));
		private static readonly System.Lazy<FieldAccessor<QuestInteractable_Balboa_Bicycle, float>> _currentPingInterval =
				new System.Lazy<FieldAccessor<QuestInteractable_Balboa_Bicycle, float>>(() => FieldAccessor<QuestInteractable_Balboa_Bicycle, float>.Create("currentPingInterval"));
		private static readonly System.Lazy<FieldAccessor<QuestInteractable_Balboa_Bicycle, float>> _currentPlingTimer =
				new System.Lazy<FieldAccessor<QuestInteractable_Balboa_Bicycle, float>>(() => FieldAccessor<QuestInteractable_Balboa_Bicycle, float>.Create("currentPlingTimer"));

		public static Interval_Float GetPlingInterval(this QuestInteractable_Balboa_Bicycle __self) => _plingInterval.Value.GetValue(__self);
		public static void SetPlingInterval(this QuestInteractable_Balboa_Bicycle __self, Interval_Float value) => _plingInterval.Value.SetValue(__self, value);
		public static float GetCurrentPingInterval(this QuestInteractable_Balboa_Bicycle __self) => _currentPingInterval.Value.GetValue(__self);
		public static void SetCurrentPingInterval(this QuestInteractable_Balboa_Bicycle __self, float value) => _currentPingInterval.Value.SetValue(__self, value);
		public static float GetCurrentPlingTimer(this QuestInteractable_Balboa_Bicycle __self) => _currentPlingTimer.Value.GetValue(__self);
		public static void SetCurrentPlingTimer(this QuestInteractable_Balboa_Bicycle __self, float value) => _currentPlingTimer.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<QuestInteractable_Balboa_Bicycle>> _Update757602046 =
				new System.Lazy<MethodAccessor<QuestInteractable_Balboa_Bicycle>>(() => MethodAccessor<QuestInteractable_Balboa_Bicycle>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<QuestInteractable_Balboa_Bicycle>> _Pling757602046 =
				new System.Lazy<MethodAccessor<QuestInteractable_Balboa_Bicycle>>(() => MethodAccessor<QuestInteractable_Balboa_Bicycle>.Create("Pling"));
		private static readonly System.Lazy<MethodAccessor<QuestInteractable_Balboa_Bicycle>> _ResetTimer757602046 =
				new System.Lazy<MethodAccessor<QuestInteractable_Balboa_Bicycle>>(() => MethodAccessor<QuestInteractable_Balboa_Bicycle>.Create("ResetTimer"));

		public static void Update(this QuestInteractable_Balboa_Bicycle __self) => _Update757602046.Value.Invoke(__self);
		public static void Pling(this QuestInteractable_Balboa_Bicycle __self) => _Pling757602046.Value.Invoke(__self);
		public static void ResetTimer(this QuestInteractable_Balboa_Bicycle __self) => _ResetTimer757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_QuestInteractable_Balboa_RelayStationButton
	{

		private static readonly System.Lazy<MethodAccessor<QuestInteractable_Balboa_RelayStationButton>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<QuestInteractable_Balboa_RelayStationButton>>(() => MethodAccessor<QuestInteractable_Balboa_RelayStationButton>.Create("OnDestroy"));

		public static void OnDestroy(this QuestInteractable_Balboa_RelayStationButton __self) => _OnDestroy757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_QuestInteractable_Caravan_WaterPump
	{

		private static readonly System.Lazy<FieldAccessor<QuestInteractable_Caravan_WaterPump, int>> _amountOfParticles =
				new System.Lazy<FieldAccessor<QuestInteractable_Caravan_WaterPump, int>>(() => FieldAccessor<QuestInteractable_Caravan_WaterPump, int>.Create("amountOfParticles"));
		private static readonly System.Lazy<FieldAccessor<QuestInteractable_Caravan_WaterPump, float>> _particleDelay =
				new System.Lazy<FieldAccessor<QuestInteractable_Caravan_WaterPump, float>>(() => FieldAccessor<QuestInteractable_Caravan_WaterPump, float>.Create("particleDelay"));
		private static readonly System.Lazy<FieldAccessor<QuestInteractable_Caravan_WaterPump, UnityEngine.ParticleSystem>> _pumpParticles =
				new System.Lazy<FieldAccessor<QuestInteractable_Caravan_WaterPump, UnityEngine.ParticleSystem>>(() => FieldAccessor<QuestInteractable_Caravan_WaterPump, UnityEngine.ParticleSystem>.Create("pumpParticles"));
		private static readonly System.Lazy<FieldAccessor<QuestInteractable_Caravan_WaterPump, string>> _eventRef_emit =
				new System.Lazy<FieldAccessor<QuestInteractable_Caravan_WaterPump, string>>(() => FieldAccessor<QuestInteractable_Caravan_WaterPump, string>.Create("eventRef_emit"));
		private static readonly System.Lazy<FieldAccessor<QuestInteractable_Caravan_WaterPump, UnityEngine.Coroutine>> _pumpRoutine =
				new System.Lazy<FieldAccessor<QuestInteractable_Caravan_WaterPump, UnityEngine.Coroutine>>(() => FieldAccessor<QuestInteractable_Caravan_WaterPump, UnityEngine.Coroutine>.Create("pumpRoutine"));

		public static int GetAmountOfParticles(this QuestInteractable_Caravan_WaterPump __self) => _amountOfParticles.Value.GetValue(__self);
		public static void SetAmountOfParticles(this QuestInteractable_Caravan_WaterPump __self, int value) => _amountOfParticles.Value.SetValue(__self, value);
		public static float GetParticleDelay(this QuestInteractable_Caravan_WaterPump __self) => _particleDelay.Value.GetValue(__self);
		public static void SetParticleDelay(this QuestInteractable_Caravan_WaterPump __self, float value) => _particleDelay.Value.SetValue(__self, value);
		public static UnityEngine.ParticleSystem GetPumpParticles(this QuestInteractable_Caravan_WaterPump __self) => _pumpParticles.Value.GetValue(__self);
		public static void SetPumpParticles(this QuestInteractable_Caravan_WaterPump __self, UnityEngine.ParticleSystem value) => _pumpParticles.Value.SetValue(__self, value);
		public static string GetEventRef_emit(this QuestInteractable_Caravan_WaterPump __self) => _eventRef_emit.Value.GetValue(__self);
		public static void SetEventRef_emit(this QuestInteractable_Caravan_WaterPump __self, string value) => _eventRef_emit.Value.SetValue(__self, value);
		public static UnityEngine.Coroutine GetPumpRoutine(this QuestInteractable_Caravan_WaterPump __self) => _pumpRoutine.Value.GetValue(__self);
		public static void SetPumpRoutine(this QuestInteractable_Caravan_WaterPump __self, UnityEngine.Coroutine value) => _pumpRoutine.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<QuestInteractable_Caravan_WaterPump>> _OnDisable757602046 =
				new System.Lazy<MethodAccessor<QuestInteractable_Caravan_WaterPump>>(() => MethodAccessor<QuestInteractable_Caravan_WaterPump>.Create("OnDisable"));
		private static readonly System.Lazy<MethodAccessor<QuestInteractable_Caravan_WaterPump>> _StopPumpRoutine757602046 =
				new System.Lazy<MethodAccessor<QuestInteractable_Caravan_WaterPump>>(() => MethodAccessor<QuestInteractable_Caravan_WaterPump>.Create("StopPumpRoutine"));
		private static readonly System.Lazy<MethodAccessor<QuestInteractable_Caravan_WaterPump>> _Pump757602046 =
				new System.Lazy<MethodAccessor<QuestInteractable_Caravan_WaterPump>>(() => MethodAccessor<QuestInteractable_Caravan_WaterPump>.Create("Pump"));

		public static void OnDisable(this QuestInteractable_Caravan_WaterPump __self) => _OnDisable757602046.Value.Invoke(__self);
		public static void StopPumpRoutine(this QuestInteractable_Caravan_WaterPump __self) => _StopPumpRoutine757602046.Value.Invoke(__self);
		public static System.Collections.IEnumerator Pump(this QuestInteractable_Caravan_WaterPump __self) => (System.Collections.IEnumerator)_Pump757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_QuestEventBase
	{

		private static readonly System.Lazy<FieldAccessor<QuestEventBase, Raft_Network>> __network =
				new System.Lazy<FieldAccessor<QuestEventBase, Raft_Network>>(() => FieldAccessor<QuestEventBase, Raft_Network>.Create("_network"));
		private static readonly System.Lazy<FieldAccessor<QuestEventBase, bool>> _turnOfColliderWhenNoInteractionIsAvailable =
				new System.Lazy<FieldAccessor<QuestEventBase, bool>>(() => FieldAccessor<QuestEventBase, bool>.Create("turnOfColliderWhenNoInteractionIsAvailable"));
		private static readonly System.Lazy<FieldAccessor<QuestEventBase, QuestItemManager>> _questItemManager =
				new System.Lazy<FieldAccessor<QuestEventBase, QuestItemManager>>(() => FieldAccessor<QuestEventBase, QuestItemManager>.Create("questItemManager"));

		public static Raft_Network Get_network(this QuestEventBase __self) => __network.Value.GetValue(__self);
		public static void Set_network(this QuestEventBase __self, Raft_Network value) => __network.Value.SetValue(__self, value);
		public static bool GetTurnOfColliderWhenNoInteractionIsAvailable(this QuestEventBase __self) => _turnOfColliderWhenNoInteractionIsAvailable.Value.GetValue(__self);
		public static void SetTurnOfColliderWhenNoInteractionIsAvailable(this QuestEventBase __self, bool value) => _turnOfColliderWhenNoInteractionIsAvailable.Value.SetValue(__self, value);
		public static QuestItemManager GetQuestItemManager(this QuestEventBase __self) => _questItemManager.Value.GetValue(__self);
		public static void SetQuestItemManager(this QuestEventBase __self, QuestItemManager value) => _questItemManager.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<QuestEventBase>> _Start757602046 =
				new System.Lazy<MethodAccessor<QuestEventBase>>(() => MethodAccessor<QuestEventBase>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<QuestEventBase>> _ConsumeRequiredItems3461878659 =
				new System.Lazy<MethodAccessor<QuestEventBase>>(() => MethodAccessor<QuestEventBase>.Create("ConsumeRequiredItems", typeof(Network_Player)));
		private static readonly System.Lazy<MethodAccessor<QuestEventBase>> _RefreshColliderState757602046 =
				new System.Lazy<MethodAccessor<QuestEventBase>>(() => MethodAccessor<QuestEventBase>.Create("RefreshColliderState"));
		private static readonly System.Lazy<MethodAccessor<QuestEventBase>> _OdinButton_InteractPlayer757602046 =
				new System.Lazy<MethodAccessor<QuestEventBase>>(() => MethodAccessor<QuestEventBase>.Create("OdinButton_InteractPlayer"));
		private static readonly System.Lazy<MethodAccessor<QuestEventBase>> _OdinButton_Interact757602046 =
				new System.Lazy<MethodAccessor<QuestEventBase>>(() => MethodAccessor<QuestEventBase>.Create("OdinButton_Interact"));
		private static readonly System.Lazy<MethodAccessor<QuestEventBase>> _OdinButton_InteractSinglePlayer757602046 =
				new System.Lazy<MethodAccessor<QuestEventBase>>(() => MethodAccessor<QuestEventBase>.Create("OdinButton_InteractSinglePlayer"));

		public static void Start(this QuestEventBase __self) => _Start757602046.Value.Invoke(__self);
		public static void ConsumeRequiredItems(this QuestEventBase __self, Network_Player player) => _ConsumeRequiredItems3461878659.Value.Invoke(__self, player);
		public static void RefreshColliderState(this QuestEventBase __self) => _RefreshColliderState757602046.Value.Invoke(__self);
		public static void OdinButton_InteractPlayer(this QuestEventBase __self) => _OdinButton_InteractPlayer757602046.Value.Invoke(__self);
		public static void OdinButton_Interact(this QuestEventBase __self) => _OdinButton_Interact757602046.Value.Invoke(__self);
		public static void OdinButton_InteractSinglePlayer(this QuestEventBase __self) => _OdinButton_InteractSinglePlayer757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_QuestEventColliderTrigger
	{

		private static readonly System.Lazy<FieldAccessor<QuestEventColliderTrigger, bool>> _onlyTriggerOnce =
				new System.Lazy<FieldAccessor<QuestEventColliderTrigger, bool>>(() => FieldAccessor<QuestEventColliderTrigger, bool>.Create("onlyTriggerOnce"));
		private static readonly System.Lazy<FieldAccessor<QuestEventColliderTrigger, bool>> _hasBeenTriggered =
				new System.Lazy<FieldAccessor<QuestEventColliderTrigger, bool>>(() => FieldAccessor<QuestEventColliderTrigger, bool>.Create("hasBeenTriggered"));

		public static bool GetOnlyTriggerOnce(this QuestEventColliderTrigger __self) => _onlyTriggerOnce.Value.GetValue(__self);
		public static void SetOnlyTriggerOnce(this QuestEventColliderTrigger __self, bool value) => _onlyTriggerOnce.Value.SetValue(__self, value);
		public static bool GetHasBeenTriggered(this QuestEventColliderTrigger __self) => _hasBeenTriggered.Value.GetValue(__self);
		public static void SetHasBeenTriggered(this QuestEventColliderTrigger __self, bool value) => _hasBeenTriggered.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<QuestEventColliderTrigger>> _Awake757602046 =
				new System.Lazy<MethodAccessor<QuestEventColliderTrigger>>(() => MethodAccessor<QuestEventColliderTrigger>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<QuestEventColliderTrigger>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<QuestEventColliderTrigger>>(() => MethodAccessor<QuestEventColliderTrigger>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<QuestEventColliderTrigger>> _SendQuestEventTriggerViaCollider3468606003 =
				new System.Lazy<MethodAccessor<QuestEventColliderTrigger>>(() => MethodAccessor<QuestEventColliderTrigger>.Create("SendQuestEventTriggerViaCollider", typeof(UnityEngine.Collider)));

		public static void Awake(this QuestEventColliderTrigger __self) => _Awake757602046.Value.Invoke(__self);
		public static void OnDestroy(this QuestEventColliderTrigger __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void SendQuestEventTriggerViaCollider(this QuestEventColliderTrigger __self, UnityEngine.Collider colli) => _SendQuestEventTriggerViaCollider3468606003.Value.Invoke(__self, colli);

	}

	public static class PrivateAccessor_QuestInteractable
	{

		private static readonly System.Lazy<FieldAccessor<QuestInteractable, DisplayTextManager>> _displayText =
				new System.Lazy<FieldAccessor<QuestInteractable, DisplayTextManager>>(() => FieldAccessor<QuestInteractable, DisplayTextManager>.Create("displayText"));
		private static readonly System.Lazy<FieldAccessor<QuestInteractable, bool>> _allowPlayerRaycastInteract =
				new System.Lazy<FieldAccessor<QuestInteractable, bool>>(() => FieldAccessor<QuestInteractable, bool>.Create("allowPlayerRaycastInteract"));

		public static DisplayTextManager GetDisplayText(this QuestInteractable __self) => _displayText.Value.GetValue(__self);
		public static void SetDisplayText(this QuestInteractable __self, DisplayTextManager value) => _displayText.Value.SetValue(__self, value);
		public static bool GetAllowPlayerRaycastInteract(this QuestInteractable __self) => _allowPlayerRaycastInteract.Value.GetValue(__self);
		public static void SetAllowPlayerRaycastInteract(this QuestInteractable __self, bool value) => _allowPlayerRaycastInteract.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<QuestInteractable>> _Start757602046 =
				new System.Lazy<MethodAccessor<QuestInteractable>>(() => MethodAccessor<QuestInteractable>.Create("Start"));

		public static void Start(this QuestInteractable __self) => _Start757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessorInternal_QuestInteractableComponentBase<T> where T : QuestInteractable_ComponentData
	{

		internal static readonly System.Lazy<FieldAccessor<QuestInteractableComponentBase<T>, bool>> _triggerInteractAtLoad =
				new System.Lazy<FieldAccessor<QuestInteractableComponentBase<T>, bool>>(() => FieldAccessor<QuestInteractableComponentBase<T>, bool>.Create("triggerInteractAtLoad"));
		internal static readonly System.Lazy<FieldAccessor<QuestInteractableComponentBase<T>, QuestEventBase>> _interactable =
				new System.Lazy<FieldAccessor<QuestInteractableComponentBase<T>, QuestEventBase>>(() => FieldAccessor<QuestInteractableComponentBase<T>, QuestEventBase>.Create("interactable"));
		internal static readonly System.Lazy<FieldAccessor<QuestInteractableComponentBase<T>, bool>> _hasSubscribedToSucess =
				new System.Lazy<FieldAccessor<QuestInteractableComponentBase<T>, bool>>(() => FieldAccessor<QuestInteractableComponentBase<T>, bool>.Create("hasSubscribedToSucess"));
		internal static readonly System.Lazy<FieldAccessor<QuestInteractableComponentBase<T>, bool>> _hasSubscribedToFail =
				new System.Lazy<FieldAccessor<QuestInteractableComponentBase<T>, bool>>(() => FieldAccessor<QuestInteractableComponentBase<T>, bool>.Create("hasSubscribedToFail"));

		internal static readonly System.Lazy<MethodAccessor<QuestInteractableComponentBase<T>>> _Awake757602046 =
				new System.Lazy<MethodAccessor<QuestInteractableComponentBase<T>>>(() => MethodAccessor<QuestInteractableComponentBase<T>>.Create("Awake"));
		internal static readonly System.Lazy<MethodAccessor<QuestInteractableComponentBase<T>>> _Start757602046 =
				new System.Lazy<MethodAccessor<QuestInteractableComponentBase<T>>>(() => MethodAccessor<QuestInteractableComponentBase<T>>.Create("Start"));
		internal static readonly System.Lazy<MethodAccessor<QuestInteractableComponentBase<T>>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<QuestInteractableComponentBase<T>>>(() => MethodAccessor<QuestInteractableComponentBase<T>>.Create("OnDestroy"));
		internal static readonly System.Lazy<MethodAccessor<QuestInteractableComponentBase<T>>> _OnInteractEvent3171859007 =
				new System.Lazy<MethodAccessor<QuestInteractableComponentBase<T>>>(() => MethodAccessor<QuestInteractableComponentBase<T>>.Create("OnInteractEvent", typeof(int), typeof(bool), typeof(Network_Player), typeof(bool)));
		internal static readonly System.Lazy<MethodAccessor<QuestInteractableComponentBase<T>>> _OnInteract3171859007 =
				new System.Lazy<MethodAccessor<QuestInteractableComponentBase<T>>>(() => MethodAccessor<QuestInteractableComponentBase<T>>.Create("OnInteract", typeof(int), typeof(bool), typeof(Network_Player), typeof(bool)));
		internal static readonly System.Lazy<MethodAccessor<QuestInteractableComponentBase<T>>> _ListenToEventsWithTriggerSettings757602046 =
				new System.Lazy<MethodAccessor<QuestInteractableComponentBase<T>>>(() => MethodAccessor<QuestInteractableComponentBase<T>>.Create("ListenToEventsWithTriggerSettings"));
		internal static readonly System.Lazy<MethodAccessor<QuestInteractableComponentBase<T>>> _IsComponentOfCorrectTriggerType3408127186 =
				new System.Lazy<MethodAccessor<QuestInteractableComponentBase<T>>>(() => MethodAccessor<QuestInteractableComponentBase<T>>.Create("IsComponentOfCorrectTriggerType", typeof(QuestInteractable_ComponentData), typeof(bool)));
		internal static readonly System.Lazy<MethodAccessor<QuestInteractableComponentBase<T>>> _SubscribeToSuccess757602046 =
				new System.Lazy<MethodAccessor<QuestInteractableComponentBase<T>>>(() => MethodAccessor<QuestInteractableComponentBase<T>>.Create("SubscribeToSuccess"));
		internal static readonly System.Lazy<MethodAccessor<QuestInteractableComponentBase<T>>> _SubscribeToFail757602046 =
				new System.Lazy<MethodAccessor<QuestInteractableComponentBase<T>>>(() => MethodAccessor<QuestInteractableComponentBase<T>>.Create("SubscribeToFail"));
		internal static readonly System.Lazy<MethodAccessor<QuestInteractableComponentBase<T>>> _UnlistenToEventsWithTriggerSettings757602046 =
				new System.Lazy<MethodAccessor<QuestInteractableComponentBase<T>>>(() => MethodAccessor<QuestInteractableComponentBase<T>>.Create("UnlistenToEventsWithTriggerSettings"));

	}

	public static class PrivateAccessor_QuestInteractableComponentBase
	{

		public static bool GetTriggerInteractAtLoad<T>(this QuestInteractableComponentBase<T> __self) where T : QuestInteractable_ComponentData => PrivateAccessorInternal_QuestInteractableComponentBase<T>._triggerInteractAtLoad.Value.GetValue(__self);
		public static void SetTriggerInteractAtLoad<T>(this QuestInteractableComponentBase<T> __self, bool value) where T : QuestInteractable_ComponentData => PrivateAccessorInternal_QuestInteractableComponentBase<T>._triggerInteractAtLoad.Value.SetValue(__self, value);
		public static QuestEventBase GetInteractable<T>(this QuestInteractableComponentBase<T> __self) where T : QuestInteractable_ComponentData => PrivateAccessorInternal_QuestInteractableComponentBase<T>._interactable.Value.GetValue(__self);
		public static void SetInteractable<T>(this QuestInteractableComponentBase<T> __self, QuestEventBase value) where T : QuestInteractable_ComponentData => PrivateAccessorInternal_QuestInteractableComponentBase<T>._interactable.Value.SetValue(__self, value);
		public static bool GetHasSubscribedToSucess<T>(this QuestInteractableComponentBase<T> __self) where T : QuestInteractable_ComponentData => PrivateAccessorInternal_QuestInteractableComponentBase<T>._hasSubscribedToSucess.Value.GetValue(__self);
		public static void SetHasSubscribedToSucess<T>(this QuestInteractableComponentBase<T> __self, bool value) where T : QuestInteractable_ComponentData => PrivateAccessorInternal_QuestInteractableComponentBase<T>._hasSubscribedToSucess.Value.SetValue(__self, value);
		public static bool GetHasSubscribedToFail<T>(this QuestInteractableComponentBase<T> __self) where T : QuestInteractable_ComponentData => PrivateAccessorInternal_QuestInteractableComponentBase<T>._hasSubscribedToFail.Value.GetValue(__self);
		public static void SetHasSubscribedToFail<T>(this QuestInteractableComponentBase<T> __self, bool value) where T : QuestInteractable_ComponentData => PrivateAccessorInternal_QuestInteractableComponentBase<T>._hasSubscribedToFail.Value.SetValue(__self, value);

		public static void Awake<T>(this QuestInteractableComponentBase<T> __self) where T : QuestInteractable_ComponentData => PrivateAccessorInternal_QuestInteractableComponentBase<T>._Awake757602046.Value.Invoke(__self);
		public static void Start<T>(this QuestInteractableComponentBase<T> __self) where T : QuestInteractable_ComponentData => PrivateAccessorInternal_QuestInteractableComponentBase<T>._Start757602046.Value.Invoke(__self);
		public static void OnDestroy<T>(this QuestInteractableComponentBase<T> __self) where T : QuestInteractable_ComponentData => PrivateAccessorInternal_QuestInteractableComponentBase<T>._OnDestroy757602046.Value.Invoke(__self);
		public static void OnInteractEvent<T>(this QuestInteractableComponentBase<T> __self, int objectStateIndex, bool atStart, Network_Player player, bool successfull) where T : QuestInteractable_ComponentData => PrivateAccessorInternal_QuestInteractableComponentBase<T>._OnInteractEvent3171859007.Value.Invoke(__self, objectStateIndex, atStart, player, successfull);
		public static bool OnInteract<T>(this QuestInteractableComponentBase<T> __self, int objectStateIndex, bool atStart, Network_Player player, bool successfull) where T : QuestInteractable_ComponentData => (bool)PrivateAccessorInternal_QuestInteractableComponentBase<T>._OnInteract3171859007.Value.Invoke(__self, objectStateIndex, atStart, player, successfull);
		public static void ListenToEventsWithTriggerSettings<T>(this QuestInteractableComponentBase<T> __self) where T : QuestInteractable_ComponentData => PrivateAccessorInternal_QuestInteractableComponentBase<T>._ListenToEventsWithTriggerSettings757602046.Value.Invoke(__self);
		public static bool IsComponentOfCorrectTriggerType<T>(this QuestInteractableComponentBase<T> __self, QuestInteractable_ComponentData data, bool interactSuccess) where T : QuestInteractable_ComponentData => (bool)PrivateAccessorInternal_QuestInteractableComponentBase<T>._IsComponentOfCorrectTriggerType3408127186.Value.Invoke(__self, data, interactSuccess);
		public static void SubscribeToSuccess<T>(this QuestInteractableComponentBase<T> __self) where T : QuestInteractable_ComponentData => PrivateAccessorInternal_QuestInteractableComponentBase<T>._SubscribeToSuccess757602046.Value.Invoke(__self);
		public static void SubscribeToFail<T>(this QuestInteractableComponentBase<T> __self) where T : QuestInteractable_ComponentData => PrivateAccessorInternal_QuestInteractableComponentBase<T>._SubscribeToFail757602046.Value.Invoke(__self);
		public static void UnlistenToEventsWithTriggerSettings<T>(this QuestInteractableComponentBase<T> __self) where T : QuestInteractable_ComponentData => PrivateAccessorInternal_QuestInteractableComponentBase<T>._UnlistenToEventsWithTriggerSettings757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_QuestInteractableComponent_Animation
	{

		private static readonly System.Lazy<MethodAccessor<QuestInteractableComponent_Animation>> _Awake757602046 =
				new System.Lazy<MethodAccessor<QuestInteractableComponent_Animation>>(() => MethodAccessor<QuestInteractableComponent_Animation>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<QuestInteractableComponent_Animation>> _OnEnable757602046 =
				new System.Lazy<MethodAccessor<QuestInteractableComponent_Animation>>(() => MethodAccessor<QuestInteractableComponent_Animation>.Create("OnEnable"));
		private static readonly System.Lazy<MethodAccessor<QuestInteractableComponent_Animation>> _OnInteract3171859007 =
				new System.Lazy<MethodAccessor<QuestInteractableComponent_Animation>>(() => MethodAccessor<QuestInteractableComponent_Animation>.Create("OnInteract", typeof(int), typeof(bool), typeof(Network_Player), typeof(bool)));
		private static readonly System.Lazy<MethodAccessor<QuestInteractableComponent_Animation>> _FinishInteractionWithData3510863889 =
				new System.Lazy<MethodAccessor<QuestInteractableComponent_Animation>>(() => MethodAccessor<QuestInteractableComponent_Animation>.Create("FinishInteractionWithData", typeof(QuestInteractable_ComponentData_Animation), typeof(Network_Player), typeof(bool), typeof(bool)));
		private static readonly System.Lazy<MethodAccessor<QuestInteractableComponent_Animation>> _ListenToEventsWithTriggerSettings757602046 =
				new System.Lazy<MethodAccessor<QuestInteractableComponent_Animation>>(() => MethodAccessor<QuestInteractableComponent_Animation>.Create("ListenToEventsWithTriggerSettings"));
		private static readonly System.Lazy<MethodAccessor<QuestInteractableComponent_Animation>> _ApplyInteractIndexToAnimator3486186818 =
				new System.Lazy<MethodAccessor<QuestInteractableComponent_Animation>>(() => MethodAccessor<QuestInteractableComponent_Animation>.Create("ApplyInteractIndexToAnimator", typeof(int)));
		private static readonly System.Lazy<MethodAccessor<QuestInteractableComponent_Animation>> _SetAnimationToEnd757602046 =
				new System.Lazy<MethodAccessor<QuestInteractableComponent_Animation>>(() => MethodAccessor<QuestInteractableComponent_Animation>.Create("SetAnimationToEnd"));
		private static readonly System.Lazy<MethodAccessor<QuestInteractableComponent_Animation>> _SetAnimationToEndDelayed757602046 =
				new System.Lazy<MethodAccessor<QuestInteractableComponent_Animation>>(() => MethodAccessor<QuestInteractableComponent_Animation>.Create("SetAnimationToEndDelayed"));

		public static void Awake(this QuestInteractableComponent_Animation __self) => _Awake757602046.Value.Invoke(__self);
		public static void OnEnable(this QuestInteractableComponent_Animation __self) => _OnEnable757602046.Value.Invoke(__self);
		public static bool OnInteract(this QuestInteractableComponent_Animation __self, int objectStateIndex, bool atStart, Network_Player player, bool successfull) => (bool)_OnInteract3171859007.Value.Invoke(__self, objectStateIndex, atStart, player, successfull);
		public static void FinishInteractionWithData(this QuestInteractableComponent_Animation __self, QuestInteractable_ComponentData_Animation data, Network_Player player, bool atStart, bool successfull) => _FinishInteractionWithData3510863889.Value.Invoke(__self, data, player, atStart, successfull);
		public static void ListenToEventsWithTriggerSettings(this QuestInteractableComponent_Animation __self) => _ListenToEventsWithTriggerSettings757602046.Value.Invoke(__self);
		public static void ApplyInteractIndexToAnimator(this QuestInteractableComponent_Animation __self, int objectStateIndex) => _ApplyInteractIndexToAnimator3486186818.Value.Invoke(__self, objectStateIndex);
		public static void SetAnimationToEnd(this QuestInteractableComponent_Animation __self) => _SetAnimationToEnd757602046.Value.Invoke(__self);
		public static void SetAnimationToEndDelayed(this QuestInteractableComponent_Animation __self) => _SetAnimationToEndDelayed757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_QuestInteractableComponent_ChangeInteractIndex
	{

		private static readonly System.Lazy<MethodAccessor<QuestInteractableComponent_ChangeInteractIndex>> _Start757602046 =
				new System.Lazy<MethodAccessor<QuestInteractableComponent_ChangeInteractIndex>>(() => MethodAccessor<QuestInteractableComponent_ChangeInteractIndex>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<QuestInteractableComponent_ChangeInteractIndex>> _FinishInteractionWithData3373243568 =
				new System.Lazy<MethodAccessor<QuestInteractableComponent_ChangeInteractIndex>>(() => MethodAccessor<QuestInteractableComponent_ChangeInteractIndex>.Create("FinishInteractionWithData", typeof(QuestInteractable_ComponentData_ChangeInteractIndex), typeof(Network_Player), typeof(bool), typeof(bool)));

		public static void Start(this QuestInteractableComponent_ChangeInteractIndex __self) => _Start757602046.Value.Invoke(__self);
		public static void FinishInteractionWithData(this QuestInteractableComponent_ChangeInteractIndex __self, QuestInteractable_ComponentData_ChangeInteractIndex data, Network_Player player, bool atStart, bool successfull) => _FinishInteractionWithData3373243568.Value.Invoke(__self, data, player, atStart, successfull);

	}

	public static class PrivateAccessor_QuestInteractableComponent_MaterialShaderProperty
	{

		private static readonly System.Lazy<MethodAccessor<QuestInteractableComponent_MaterialShaderProperty>> _Awake757602046 =
				new System.Lazy<MethodAccessor<QuestInteractableComponent_MaterialShaderProperty>>(() => MethodAccessor<QuestInteractableComponent_MaterialShaderProperty>.Create("Awake"));

		public static void Awake(this QuestInteractableComponent_MaterialShaderProperty __self) => _Awake757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_QuestInteractableComponent_MoveAlongNodes
	{

		private static readonly System.Lazy<FieldAccessor<QuestInteractableComponent_MoveAlongNodes, QuestEventBase>> _questEvent =
				new System.Lazy<FieldAccessor<QuestInteractableComponent_MoveAlongNodes, QuestEventBase>>(() => FieldAccessor<QuestInteractableComponent_MoveAlongNodes, QuestEventBase>.Create("questEvent"));
		private static readonly System.Lazy<FieldAccessor<QuestInteractableComponent_MoveAlongNodes, UnityEngine.Coroutine>> _moveRoutine =
				new System.Lazy<FieldAccessor<QuestInteractableComponent_MoveAlongNodes, UnityEngine.Coroutine>>(() => FieldAccessor<QuestInteractableComponent_MoveAlongNodes, UnityEngine.Coroutine>.Create("moveRoutine"));

		public static QuestEventBase GetQuestEvent(this QuestInteractableComponent_MoveAlongNodes __self) => _questEvent.Value.GetValue(__self);
		public static void SetQuestEvent(this QuestInteractableComponent_MoveAlongNodes __self, QuestEventBase value) => _questEvent.Value.SetValue(__self, value);
		public static UnityEngine.Coroutine GetMoveRoutine(this QuestInteractableComponent_MoveAlongNodes __self) => _moveRoutine.Value.GetValue(__self);
		public static void SetMoveRoutine(this QuestInteractableComponent_MoveAlongNodes __self, UnityEngine.Coroutine value) => _moveRoutine.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<QuestInteractableComponent_MoveAlongNodes>> _OnDrawGizmos757602046 =
				new System.Lazy<MethodAccessor<QuestInteractableComponent_MoveAlongNodes>>(() => MethodAccessor<QuestInteractableComponent_MoveAlongNodes>.Create("OnDrawGizmos"));
		private static readonly System.Lazy<MethodAccessor<QuestInteractableComponent_MoveAlongNodes>> _FinishInteractionWithData2672520963 =
				new System.Lazy<MethodAccessor<QuestInteractableComponent_MoveAlongNodes>>(() => MethodAccessor<QuestInteractableComponent_MoveAlongNodes>.Create("FinishInteractionWithData", typeof(QuestInteractable_ComponentData_Node), typeof(Network_Player), typeof(bool), typeof(bool)));
		private static readonly System.Lazy<MethodAccessor<QuestInteractableComponent_MoveAlongNodes>> _MoveAlongWaypoints3438380438 =
				new System.Lazy<MethodAccessor<QuestInteractableComponent_MoveAlongNodes>>(() => MethodAccessor<QuestInteractableComponent_MoveAlongNodes>.Create("MoveAlongWaypoints", typeof(QuestInteractable_ComponentData_Node), typeof(bool)));

		public static void OnDrawGizmos(this QuestInteractableComponent_MoveAlongNodes __self) => _OnDrawGizmos757602046.Value.Invoke(__self);
		public static void FinishInteractionWithData(this QuestInteractableComponent_MoveAlongNodes __self, QuestInteractable_ComponentData_Node data, Network_Player player, bool atStart, bool successfull) => _FinishInteractionWithData2672520963.Value.Invoke(__self, data, player, atStart, successfull);
		public static System.Collections.IEnumerator MoveAlongWaypoints(this QuestInteractableComponent_MoveAlongNodes __self, QuestInteractable_ComponentData_Node data, bool instant) => (System.Collections.IEnumerator)_MoveAlongWaypoints3438380438.Value.Invoke(__self, data, instant);

	}

	public static class PrivateAccessor_QuestInteractableComponent_ScreenShake
	{

		private static readonly System.Lazy<FieldAccessor<QuestInteractableComponent_ScreenShake, ScreenEffectManager>> _screenEffectManager =
				new System.Lazy<FieldAccessor<QuestInteractableComponent_ScreenShake, ScreenEffectManager>>(() => FieldAccessor<QuestInteractableComponent_ScreenShake, ScreenEffectManager>.Create("screenEffectManager"));

		public static ScreenEffectManager GetScreenEffectManager(this QuestInteractableComponent_ScreenShake __self) => _screenEffectManager.Value.GetValue(__self);
		public static void SetScreenEffectManager(this QuestInteractableComponent_ScreenShake __self, ScreenEffectManager value) => _screenEffectManager.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<QuestInteractableComponent_ScreenShake>> _Start757602046 =
				new System.Lazy<MethodAccessor<QuestInteractableComponent_ScreenShake>>(() => MethodAccessor<QuestInteractableComponent_ScreenShake>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<QuestInteractableComponent_ScreenShake>> _FinishInteractionWithData2747689717 =
				new System.Lazy<MethodAccessor<QuestInteractableComponent_ScreenShake>>(() => MethodAccessor<QuestInteractableComponent_ScreenShake>.Create("FinishInteractionWithData", typeof(ScreenShakeComponentData), typeof(Network_Player), typeof(bool), typeof(bool)));

		public static void Start(this QuestInteractableComponent_ScreenShake __self) => _Start757602046.Value.Invoke(__self);
		public static void FinishInteractionWithData(this QuestInteractableComponent_ScreenShake __self, ScreenShakeComponentData data, Network_Player player, bool atStart, bool successfull) => _FinishInteractionWithData2747689717.Value.Invoke(__self, data, player, atStart, successfull);

	}

	public static class PrivateAccessor_QuestInteractableComponent_Sound
	{

		private static readonly System.Lazy<MethodAccessor<QuestInteractableComponent_Sound>> _FinishInteractionWithData3042093649 =
				new System.Lazy<MethodAccessor<QuestInteractableComponent_Sound>>(() => MethodAccessor<QuestInteractableComponent_Sound>.Create("FinishInteractionWithData", typeof(SoundComponentData), typeof(Network_Player), typeof(bool), typeof(bool)));

		public static void FinishInteractionWithData(this QuestInteractableComponent_Sound __self, SoundComponentData data, Network_Player player, bool atStart, bool successfull) => _FinishInteractionWithData3042093649.Value.Invoke(__self, data, player, atStart, successfull);

	}

	public static class PrivateAccessor_QuestInteractable_ComponentData_VoiceLine
	{

		private static readonly System.Lazy<MethodAccessor<QuestInteractable_ComponentData_VoiceLine>> _StartIK3475062971 =
				new System.Lazy<MethodAccessor<QuestInteractable_ComponentData_VoiceLine>>(() => MethodAccessor<QuestInteractable_ComponentData_VoiceLine>.Create("StartIK", typeof(SO_VoiceLine)));
		private static readonly System.Lazy<MethodAccessor<QuestInteractable_ComponentData_VoiceLine>> _StopIK3485005270 =
				new System.Lazy<MethodAccessor<QuestInteractable_ComponentData_VoiceLine>>(() => MethodAccessor<QuestInteractable_ComponentData_VoiceLine>.Create("StopIK", typeof(SO_VoiceData.Instance_VoiceData)));

		public static void StartIK(this QuestInteractable_ComponentData_VoiceLine __self, SO_VoiceLine vo) => _StartIK3475062971.Value.Invoke(__self, vo);
		public static void StopIK(this QuestInteractable_ComponentData_VoiceLine __self, SO_VoiceData.Instance_VoiceData voInstance) => _StopIK3485005270.Value.Invoke(__self, voInstance);

	}

	public static class PrivateAccessor_QuestInteractable_Cutscene
	{

		private static readonly System.Lazy<FieldAccessor<QuestInteractable_Cutscene, SO_Buff>> _cutsceneInvurnerabilityBuff =
				new System.Lazy<FieldAccessor<QuestInteractable_Cutscene, SO_Buff>>(() => FieldAccessor<QuestInteractable_Cutscene, SO_Buff>.Create("cutsceneInvurnerabilityBuff"));
		private static readonly System.Lazy<FieldAccessor<QuestInteractable_Cutscene, UnityEngine.Transform>> _cutsceneTeleportationTransform =
				new System.Lazy<FieldAccessor<QuestInteractable_Cutscene, UnityEngine.Transform>>(() => FieldAccessor<QuestInteractable_Cutscene, UnityEngine.Transform>.Create("cutsceneTeleportationTransform"));
		private static readonly System.Lazy<FieldAccessor<QuestInteractable_Cutscene, CutsceneType>> _cutsceneType =
				new System.Lazy<FieldAccessor<QuestInteractable_Cutscene, CutsceneType>>(() => FieldAccessor<QuestInteractable_Cutscene, CutsceneType>.Create("cutsceneType"));
		private static readonly System.Lazy<FieldAccessor<QuestInteractable_Cutscene, float>> _interactDelay =
				new System.Lazy<FieldAccessor<QuestInteractable_Cutscene, float>>(() => FieldAccessor<QuestInteractable_Cutscene, float>.Create("interactDelay"));
		private static readonly System.Lazy<FieldAccessor<QuestInteractable_Cutscene, float>> _maxDistanceFromAllPlayersToInteract =
				new System.Lazy<FieldAccessor<QuestInteractable_Cutscene, float>>(() => FieldAccessor<QuestInteractable_Cutscene, float>.Create("maxDistanceFromAllPlayersToInteract"));
		private static readonly System.Lazy<FieldAccessor<QuestInteractable_Cutscene, string>> _localization_allPlayersNearbyRequired =
				new System.Lazy<FieldAccessor<QuestInteractable_Cutscene, string>>(() => FieldAccessor<QuestInteractable_Cutscene, string>.Create("localization_allPlayersNearbyRequired"));
		private static readonly System.Lazy<FieldAccessor<QuestInteractable_Cutscene, bool>> _skipCutscene =
				new System.Lazy<FieldAccessor<QuestInteractable_Cutscene, bool>>(() => FieldAccessor<QuestInteractable_Cutscene, bool>.Create("skipCutscene"));
		private static readonly System.Lazy<FieldAccessor<QuestInteractable_Cutscene, CutsceneManager>> _cutsceneManager =
				new System.Lazy<FieldAccessor<QuestInteractable_Cutscene, CutsceneManager>>(() => FieldAccessor<QuestInteractable_Cutscene, CutsceneManager>.Create("cutsceneManager"));

		public static SO_Buff GetCutsceneInvurnerabilityBuff(this QuestInteractable_Cutscene __self) => _cutsceneInvurnerabilityBuff.Value.GetValue(__self);
		public static void SetCutsceneInvurnerabilityBuff(this QuestInteractable_Cutscene __self, SO_Buff value) => _cutsceneInvurnerabilityBuff.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetCutsceneTeleportationTransform(this QuestInteractable_Cutscene __self) => _cutsceneTeleportationTransform.Value.GetValue(__self);
		public static void SetCutsceneTeleportationTransform(this QuestInteractable_Cutscene __self, UnityEngine.Transform value) => _cutsceneTeleportationTransform.Value.SetValue(__self, value);
		public static CutsceneType GetCutsceneType(this QuestInteractable_Cutscene __self) => _cutsceneType.Value.GetValue(__self);
		public static void SetCutsceneType(this QuestInteractable_Cutscene __self, CutsceneType value) => _cutsceneType.Value.SetValue(__self, value);
		public static float GetInteractDelay(this QuestInteractable_Cutscene __self) => _interactDelay.Value.GetValue(__self);
		public static void SetInteractDelay(this QuestInteractable_Cutscene __self, float value) => _interactDelay.Value.SetValue(__self, value);
		public static float GetMaxDistanceFromAllPlayersToInteract(this QuestInteractable_Cutscene __self) => _maxDistanceFromAllPlayersToInteract.Value.GetValue(__self);
		public static void SetMaxDistanceFromAllPlayersToInteract(this QuestInteractable_Cutscene __self, float value) => _maxDistanceFromAllPlayersToInteract.Value.SetValue(__self, value);
		public static string GetLocalization_allPlayersNearbyRequired(this QuestInteractable_Cutscene __self) => _localization_allPlayersNearbyRequired.Value.GetValue(__self);
		public static void SetLocalization_allPlayersNearbyRequired(this QuestInteractable_Cutscene __self, string value) => _localization_allPlayersNearbyRequired.Value.SetValue(__self, value);
		public static bool GetSkipCutscene(this QuestInteractable_Cutscene __self) => _skipCutscene.Value.GetValue(__self);
		public static void SetSkipCutscene(this QuestInteractable_Cutscene __self, bool value) => _skipCutscene.Value.SetValue(__self, value);
		public static CutsceneManager GetCutsceneManager(this QuestInteractable_Cutscene __self) => _cutsceneManager.Value.GetValue(__self);
		public static void SetCutsceneManager(this QuestInteractable_Cutscene __self, CutsceneManager value) => _cutsceneManager.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<QuestInteractable_Cutscene>> _Start757602046 =
				new System.Lazy<MethodAccessor<QuestInteractable_Cutscene>>(() => MethodAccessor<QuestInteractable_Cutscene>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<QuestInteractable_Cutscene>> _InteractLate757602046 =
				new System.Lazy<MethodAccessor<QuestInteractable_Cutscene>>(() => MethodAccessor<QuestInteractable_Cutscene>.Create("InteractLate"));
		private static readonly System.Lazy<MethodAccessor<QuestInteractable_Cutscene>> _TeleportPlayer757602046 =
				new System.Lazy<MethodAccessor<QuestInteractable_Cutscene>>(() => MethodAccessor<QuestInteractable_Cutscene>.Create("TeleportPlayer"));

		public static void Start(this QuestInteractable_Cutscene __self) => _Start757602046.Value.Invoke(__self);
		public static void InteractLate(this QuestInteractable_Cutscene __self) => _InteractLate757602046.Value.Invoke(__self);
		public static System.Collections.IEnumerator TeleportPlayer(this QuestInteractable_Cutscene __self) => (System.Collections.IEnumerator)_TeleportPlayer757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_QuestInteractable_OneWay
	{

		private static readonly System.Lazy<FieldAccessor<QuestInteractable_OneWay, Axis>> _correctAxis =
				new System.Lazy<FieldAccessor<QuestInteractable_OneWay, Axis>>(() => FieldAccessor<QuestInteractable_OneWay, Axis>.Create("correctAxis"));
		private static readonly System.Lazy<FieldAccessor<QuestInteractable_OneWay, Axis>> _byPassRequirementAxis =
				new System.Lazy<FieldAccessor<QuestInteractable_OneWay, Axis>>(() => FieldAccessor<QuestInteractable_OneWay, Axis>.Create("byPassRequirementAxis"));
		private static readonly System.Lazy<FieldAccessor<QuestInteractable_OneWay, string>> _cantInteractTerm =
				new System.Lazy<FieldAccessor<QuestInteractable_OneWay, string>>(() => FieldAccessor<QuestInteractable_OneWay, string>.Create("cantInteractTerm"));
		private static readonly System.Lazy<FieldAccessor<QuestInteractable_OneWay, string>> _byPassInteractTerm =
				new System.Lazy<FieldAccessor<QuestInteractable_OneWay, string>>(() => FieldAccessor<QuestInteractable_OneWay, string>.Create("byPassInteractTerm"));

		public static Axis GetCorrectAxis(this QuestInteractable_OneWay __self) => _correctAxis.Value.GetValue(__self);
		public static void SetCorrectAxis(this QuestInteractable_OneWay __self, Axis value) => _correctAxis.Value.SetValue(__self, value);
		public static Axis GetByPassRequirementAxis(this QuestInteractable_OneWay __self) => _byPassRequirementAxis.Value.GetValue(__self);
		public static void SetByPassRequirementAxis(this QuestInteractable_OneWay __self, Axis value) => _byPassRequirementAxis.Value.SetValue(__self, value);
		public static string GetCantInteractTerm(this QuestInteractable_OneWay __self) => _cantInteractTerm.Value.GetValue(__self);
		public static void SetCantInteractTerm(this QuestInteractable_OneWay __self, string value) => _cantInteractTerm.Value.SetValue(__self, value);
		public static string GetByPassInteractTerm(this QuestInteractable_OneWay __self) => _byPassInteractTerm.Value.GetValue(__self);
		public static void SetByPassInteractTerm(this QuestInteractable_OneWay __self, string value) => _byPassInteractTerm.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<QuestInteractable_OneWay>> _ConsumeRequiredItems3461878659 =
				new System.Lazy<MethodAccessor<QuestInteractable_OneWay>>(() => MethodAccessor<QuestInteractable_OneWay>.Create("ConsumeRequiredItems", typeof(Network_Player)));
		private static readonly System.Lazy<MethodAccessor<QuestInteractable_OneWay>> _IsOnCorrectSide4165314125 =
				new System.Lazy<MethodAccessor<QuestInteractable_OneWay>>(() => MethodAccessor<QuestInteractable_OneWay>.Create("IsOnCorrectSide", typeof(Network_Player), typeof(Axis)));

		public static void ConsumeRequiredItems(this QuestInteractable_OneWay __self, Network_Player player) => _ConsumeRequiredItems3461878659.Value.Invoke(__self, player);
		public static bool IsOnCorrectSide(this QuestInteractable_OneWay __self, Network_Player player, Axis axis) => (bool)_IsOnCorrectSide4165314125.Value.Invoke(__self, player, axis);

	}

	public static class Private_QuestInteractable_OneWay
	{

		private static readonly System.Lazy<StaticFieldAccessor<Network_Player>> _localPlayer =
				new System.Lazy<StaticFieldAccessor<Network_Player>>(() => StaticFieldAccessor<Network_Player>.Create(typeof(QuestInteractable_OneWay), "localPlayer"));

		public static Network_Player GetLocalPlayer() => _localPlayer.Value.GetValue();
		public static void SetLocalPlayer(Network_Player value) => _localPlayer.Value.SetValue(value);

	}

	public static class PrivateAccessor_QuestInteractable_QuestComplete
	{

		private static readonly System.Lazy<FieldAccessor<QuestInteractable_QuestComplete, QuestType>> _requiredQuest =
				new System.Lazy<FieldAccessor<QuestInteractable_QuestComplete, QuestType>>(() => FieldAccessor<QuestInteractable_QuestComplete, QuestType>.Create("requiredQuest"));

		public static QuestType GetRequiredQuest(this QuestInteractable_QuestComplete __self) => _requiredQuest.Value.GetValue(__self);
		public static void SetRequiredQuest(this QuestInteractable_QuestComplete __self, QuestType value) => _requiredQuest.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<QuestInteractable_QuestComplete>> _Awake757602046 =
				new System.Lazy<MethodAccessor<QuestInteractable_QuestComplete>>(() => MethodAccessor<QuestInteractable_QuestComplete>.Create("Awake"));

		public static void Awake(this QuestInteractable_QuestComplete __self) => _Awake757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_QuestInteractable_Throwable
	{

		private static readonly System.Lazy<MethodAccessor<QuestInteractable_Throwable>> _OnCollisionEnter3430762572 =
				new System.Lazy<MethodAccessor<QuestInteractable_Throwable>>(() => MethodAccessor<QuestInteractable_Throwable>.Create("OnCollisionEnter", typeof(UnityEngine.Collision)));

		public static void OnCollisionEnter(this QuestInteractable_Throwable __self, UnityEngine.Collision collision) => _OnCollisionEnter3430762572.Value.Invoke(__self, collision);

	}

	public static class PrivateAccessor_QuestItemManager
	{

		private static readonly System.Lazy<MethodAccessor<QuestItemManager>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<QuestItemManager>>(() => MethodAccessor<QuestItemManager>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<QuestItemManager>> _OnQuestItemChangeAction4054962320 =
				new System.Lazy<MethodAccessor<QuestItemManager>>(() => MethodAccessor<QuestItemManager>.Create("OnQuestItemChangeAction", typeof(QuestItem), typeof(int), typeof(bool)));

		public static void OnDestroy(this QuestItemManager __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void OnQuestItemChangeAction(this QuestItemManager __self, QuestItem questItem, int amountChanged, bool sendNotification) => _OnQuestItemChangeAction4054962320.Value.Invoke(__self, questItem, amountChanged, sendNotification);

	}

	public static class Private_QuestItemManager
	{

		private static readonly System.Lazy<StaticFieldAccessor<Raft_Network>> _network =
				new System.Lazy<StaticFieldAccessor<Raft_Network>>(() => StaticFieldAccessor<Raft_Network>.Create(typeof(QuestItemManager), "network"));
		private static readonly System.Lazy<StaticFieldAccessor<SO_QuestItem[]>> _SOQuestItems =
				new System.Lazy<StaticFieldAccessor<SO_QuestItem[]>>(() => StaticFieldAccessor<SO_QuestItem[]>.Create(typeof(QuestItemManager), "SOQuestItems"));
		private static readonly System.Lazy<StaticFieldAccessor<NotificationManager>> _notificationManager =
				new System.Lazy<StaticFieldAccessor<NotificationManager>>(() => StaticFieldAccessor<NotificationManager>.Create(typeof(QuestItemManager), "notificationManager"));
		private static readonly System.Lazy<StaticFieldAccessor<SoundManager>> _soundManager =
				new System.Lazy<StaticFieldAccessor<SoundManager>>(() => StaticFieldAccessor<SoundManager>.Create(typeof(QuestItemManager), "soundManager"));

		public static Raft_Network GetNetwork() => _network.Value.GetValue();
		public static void SetNetwork(Raft_Network value) => _network.Value.SetValue(value);
		public static SO_QuestItem[] GetSOQuestItems() => _SOQuestItems.Value.GetValue();
		public static void SetSOQuestItems(SO_QuestItem[] value) => _SOQuestItems.Value.SetValue(value);
		public static NotificationManager GetNotificationManager() => _notificationManager.Value.GetValue();
		public static void SetNotificationManager(NotificationManager value) => _notificationManager.Value.SetValue(value);
		public static SoundManager GetSoundManager() => _soundManager.Value.GetValue();
		public static void SetSoundManager(SoundManager value) => _soundManager.Value.SetValue(value);

	}

	public static class PrivateAccessor_QuestItemPickup
	{

		private static readonly System.Lazy<MethodAccessor<QuestItemPickup>> _OnValidate757602046 =
				new System.Lazy<MethodAccessor<QuestItemPickup>>(() => MethodAccessor<QuestItemPickup>.Create("OnValidate"));

		public static void OnValidate(this QuestItemPickup __self) => _OnValidate757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_QuestInteractable_WaterLoggedHatch
	{

		private static readonly System.Lazy<FieldAccessor<QuestInteractable_WaterLoggedHatch, QuestType>> _questToCompleteOnDone =
				new System.Lazy<FieldAccessor<QuestInteractable_WaterLoggedHatch, QuestType>>(() => FieldAccessor<QuestInteractable_WaterLoggedHatch, QuestType>.Create("questToCompleteOnDone"));

		public static QuestType GetQuestToCompleteOnDone(this QuestInteractable_WaterLoggedHatch __self) => _questToCompleteOnDone.Value.GetValue(__self);
		public static void SetQuestToCompleteOnDone(this QuestInteractable_WaterLoggedHatch __self, QuestType value) => _questToCompleteOnDone.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<QuestInteractable_WaterLoggedHatch>> _Start757602046 =
				new System.Lazy<MethodAccessor<QuestInteractable_WaterLoggedHatch>>(() => MethodAccessor<QuestInteractable_WaterLoggedHatch>.Create("Start"));

		public static void Start(this QuestInteractable_WaterLoggedHatch __self) => _Start757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_QuestInteractable_LaserChallenge_Lever
	{

		private static readonly System.Lazy<MethodAccessor<QuestInteractable_LaserChallenge_Lever>> _Start757602046 =
				new System.Lazy<MethodAccessor<QuestInteractable_LaserChallenge_Lever>>(() => MethodAccessor<QuestInteractable_LaserChallenge_Lever>.Create("Start"));

		public static void Start(this QuestInteractable_LaserChallenge_Lever __self) => _Start757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_QuestInteractable_SeleneGate
	{

		private static readonly System.Lazy<FieldAccessor<QuestInteractable_SeleneGate, string>> _localizationTerm =
				new System.Lazy<FieldAccessor<QuestInteractable_SeleneGate, string>>(() => FieldAccessor<QuestInteractable_SeleneGate, string>.Create("localizationTerm"));
		private static readonly System.Lazy<FieldAccessor<QuestInteractable_SeleneGate, DisplayTextManager>> _displayText =
				new System.Lazy<FieldAccessor<QuestInteractable_SeleneGate, DisplayTextManager>>(() => FieldAccessor<QuestInteractable_SeleneGate, DisplayTextManager>.Create("displayText"));

		public static string GetLocalizationTerm(this QuestInteractable_SeleneGate __self) => _localizationTerm.Value.GetValue(__self);
		public static void SetLocalizationTerm(this QuestInteractable_SeleneGate __self, string value) => _localizationTerm.Value.SetValue(__self, value);
		public static DisplayTextManager GetDisplayText(this QuestInteractable_SeleneGate __self) => _displayText.Value.GetValue(__self);
		public static void SetDisplayText(this QuestInteractable_SeleneGate __self, DisplayTextManager value) => _displayText.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<QuestInteractable_SeleneGate>> _OnInspectorGUILocalizationTerm757602046 =
				new System.Lazy<MethodAccessor<QuestInteractable_SeleneGate>>(() => MethodAccessor<QuestInteractable_SeleneGate>.Create("OnInspectorGUILocalizationTerm"));

		public static void OnInspectorGUILocalizationTerm(this QuestInteractable_SeleneGate __self) => _OnInspectorGUILocalizationTerm757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_QuestInteractable_BrokenElevatorWheel
	{

		private static readonly System.Lazy<FieldAccessor<QuestInteractable_BrokenElevatorWheel, Elevator>> _elevator =
				new System.Lazy<FieldAccessor<QuestInteractable_BrokenElevatorWheel, Elevator>>(() => FieldAccessor<QuestInteractable_BrokenElevatorWheel, Elevator>.Create("elevator"));

		public static Elevator GetElevator(this QuestInteractable_BrokenElevatorWheel __self) => _elevator.Value.GetValue(__self);
		public static void SetElevator(this QuestInteractable_BrokenElevatorWheel __self, Elevator value) => _elevator.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<QuestInteractable_BrokenElevatorWheel>> _Update757602046 =
				new System.Lazy<MethodAccessor<QuestInteractable_BrokenElevatorWheel>>(() => MethodAccessor<QuestInteractable_BrokenElevatorWheel>.Create("Update"));

		public static void Update(this QuestInteractable_BrokenElevatorWheel __self) => _Update757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_QuestInteractable_Lift
	{

		private static readonly System.Lazy<FieldAccessor<QuestInteractable_Lift, UnityEngine.Transform>> _lift =
				new System.Lazy<FieldAccessor<QuestInteractable_Lift, UnityEngine.Transform>>(() => FieldAccessor<QuestInteractable_Lift, UnityEngine.Transform>.Create("lift"));
		private static readonly System.Lazy<FieldAccessor<QuestInteractable_Lift, UnityEngine.Transform>> _pointA =
				new System.Lazy<FieldAccessor<QuestInteractable_Lift, UnityEngine.Transform>>(() => FieldAccessor<QuestInteractable_Lift, UnityEngine.Transform>.Create("pointA"));
		private static readonly System.Lazy<FieldAccessor<QuestInteractable_Lift, UnityEngine.Transform>> _pointB =
				new System.Lazy<FieldAccessor<QuestInteractable_Lift, UnityEngine.Transform>>(() => FieldAccessor<QuestInteractable_Lift, UnityEngine.Transform>.Create("pointB"));
		private static readonly System.Lazy<FieldAccessor<QuestInteractable_Lift, UnityEngine.Animator[]>> _weightAnimators =
				new System.Lazy<FieldAccessor<QuestInteractable_Lift, UnityEngine.Animator[]>>(() => FieldAccessor<QuestInteractable_Lift, UnityEngine.Animator[]>.Create("weightAnimators"));
		private static readonly System.Lazy<FieldAccessor<QuestInteractable_Lift, float>> _speed =
				new System.Lazy<FieldAccessor<QuestInteractable_Lift, float>>(() => FieldAccessor<QuestInteractable_Lift, float>.Create("speed"));
		private static readonly System.Lazy<FieldAccessor<QuestInteractable_Lift, FMODUnity.StudioEventEmitter>> _emitter_Mechanism1 =
				new System.Lazy<FieldAccessor<QuestInteractable_Lift, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<QuestInteractable_Lift, FMODUnity.StudioEventEmitter>.Create("emitter_Mechanism1"));
		private static readonly System.Lazy<FieldAccessor<QuestInteractable_Lift, FMODUnity.StudioEventEmitter>> _emitter_Mechanism2 =
				new System.Lazy<FieldAccessor<QuestInteractable_Lift, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<QuestInteractable_Lift, FMODUnity.StudioEventEmitter>.Create("emitter_Mechanism2"));
		private static readonly System.Lazy<FieldAccessor<QuestInteractable_Lift, float>> _maxDistance =
				new System.Lazy<FieldAccessor<QuestInteractable_Lift, float>>(() => FieldAccessor<QuestInteractable_Lift, float>.Create("maxDistance"));
		private static readonly System.Lazy<FieldAccessor<QuestInteractable_Lift, bool>> _isTravelling =
				new System.Lazy<FieldAccessor<QuestInteractable_Lift, bool>>(() => FieldAccessor<QuestInteractable_Lift, bool>.Create("isTravelling"));
		private static readonly System.Lazy<FieldAccessor<QuestInteractable_Lift, bool>> _wasTravelling =
				new System.Lazy<FieldAccessor<QuestInteractable_Lift, bool>>(() => FieldAccessor<QuestInteractable_Lift, bool>.Create("wasTravelling"));

		public static UnityEngine.Transform GetLift(this QuestInteractable_Lift __self) => _lift.Value.GetValue(__self);
		public static void SetLift(this QuestInteractable_Lift __self, UnityEngine.Transform value) => _lift.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetPointA(this QuestInteractable_Lift __self) => _pointA.Value.GetValue(__self);
		public static void SetPointA(this QuestInteractable_Lift __self, UnityEngine.Transform value) => _pointA.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetPointB(this QuestInteractable_Lift __self) => _pointB.Value.GetValue(__self);
		public static void SetPointB(this QuestInteractable_Lift __self, UnityEngine.Transform value) => _pointB.Value.SetValue(__self, value);
		public static UnityEngine.Animator[] GetWeightAnimators(this QuestInteractable_Lift __self) => _weightAnimators.Value.GetValue(__self);
		public static void SetWeightAnimators(this QuestInteractable_Lift __self, UnityEngine.Animator[] value) => _weightAnimators.Value.SetValue(__self, value);
		public static float GetSpeed(this QuestInteractable_Lift __self) => _speed.Value.GetValue(__self);
		public static void SetSpeed(this QuestInteractable_Lift __self, float value) => _speed.Value.SetValue(__self, value);
		public static FMODUnity.StudioEventEmitter GetEmitter_Mechanism1(this QuestInteractable_Lift __self) => _emitter_Mechanism1.Value.GetValue(__self);
		public static void SetEmitter_Mechanism1(this QuestInteractable_Lift __self, FMODUnity.StudioEventEmitter value) => _emitter_Mechanism1.Value.SetValue(__self, value);
		public static FMODUnity.StudioEventEmitter GetEmitter_Mechanism2(this QuestInteractable_Lift __self) => _emitter_Mechanism2.Value.GetValue(__self);
		public static void SetEmitter_Mechanism2(this QuestInteractable_Lift __self, FMODUnity.StudioEventEmitter value) => _emitter_Mechanism2.Value.SetValue(__self, value);
		public static float GetMaxDistance(this QuestInteractable_Lift __self) => _maxDistance.Value.GetValue(__self);
		public static void SetMaxDistance(this QuestInteractable_Lift __self, float value) => _maxDistance.Value.SetValue(__self, value);
		public static bool GetIsTravelling(this QuestInteractable_Lift __self) => _isTravelling.Value.GetValue(__self);
		public static void SetIsTravelling(this QuestInteractable_Lift __self, bool value) => _isTravelling.Value.SetValue(__self, value);
		public static bool GetWasTravelling(this QuestInteractable_Lift __self) => _wasTravelling.Value.GetValue(__self);
		public static void SetWasTravelling(this QuestInteractable_Lift __self, bool value) => _wasTravelling.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<QuestInteractable_Lift>> _Start757602046 =
				new System.Lazy<MethodAccessor<QuestInteractable_Lift>>(() => MethodAccessor<QuestInteractable_Lift>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<QuestInteractable_Lift>> _Update757602046 =
				new System.Lazy<MethodAccessor<QuestInteractable_Lift>>(() => MethodAccessor<QuestInteractable_Lift>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<QuestInteractable_Lift>> _OnDrawGizmosSelected757602046 =
				new System.Lazy<MethodAccessor<QuestInteractable_Lift>>(() => MethodAccessor<QuestInteractable_Lift>.Create("OnDrawGizmosSelected"));
		private static readonly System.Lazy<MethodAccessor<QuestInteractable_Lift>> _SetToA757602046 =
				new System.Lazy<MethodAccessor<QuestInteractable_Lift>>(() => MethodAccessor<QuestInteractable_Lift>.Create("SetToA"));
		private static readonly System.Lazy<MethodAccessor<QuestInteractable_Lift>> _SetToB757602046 =
				new System.Lazy<MethodAccessor<QuestInteractable_Lift>>(() => MethodAccessor<QuestInteractable_Lift>.Create("SetToB"));
		private static readonly System.Lazy<MethodAccessor<QuestInteractable_Lift>> _SetToCenter757602046 =
				new System.Lazy<MethodAccessor<QuestInteractable_Lift>>(() => MethodAccessor<QuestInteractable_Lift>.Create("SetToCenter"));

		public static void Start(this QuestInteractable_Lift __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this QuestInteractable_Lift __self) => _Update757602046.Value.Invoke(__self);
		public static void OnDrawGizmosSelected(this QuestInteractable_Lift __self) => _OnDrawGizmosSelected757602046.Value.Invoke(__self);
		public static void SetToA(this QuestInteractable_Lift __self) => _SetToA757602046.Value.Invoke(__self);
		public static void SetToB(this QuestInteractable_Lift __self) => _SetToB757602046.Value.Invoke(__self);
		public static void SetToCenter(this QuestInteractable_Lift __self) => _SetToCenter757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_QuestInteractable_ObjectOfInterestSlot
	{

		private static readonly System.Lazy<FieldAccessor<QuestInteractable_ObjectOfInterestSlot, UnityEngine.Transform>> _objectOfInterestTracker =
				new System.Lazy<FieldAccessor<QuestInteractable_ObjectOfInterestSlot, UnityEngine.Transform>>(() => FieldAccessor<QuestInteractable_ObjectOfInterestSlot, UnityEngine.Transform>.Create("objectOfInterestTracker"));

		public static UnityEngine.Transform GetObjectOfInterestTracker(this QuestInteractable_ObjectOfInterestSlot __self) => _objectOfInterestTracker.Value.GetValue(__self);
		public static void SetObjectOfInterestTracker(this QuestInteractable_ObjectOfInterestSlot __self, UnityEngine.Transform value) => _objectOfInterestTracker.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<QuestInteractable_ObjectOfInterestSlot>> _Update757602046 =
				new System.Lazy<MethodAccessor<QuestInteractable_ObjectOfInterestSlot>>(() => MethodAccessor<QuestInteractable_ObjectOfInterestSlot>.Create("Update"));

		public static void Update(this QuestInteractable_ObjectOfInterestSlot __self) => _Update757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_QuestInteractable_VP_CraneLever
	{

		private static readonly System.Lazy<FieldAccessor<QuestInteractable_VP_CraneLever, FMODUnity.StudioEventEmitter>> _emitter_craneMove =
				new System.Lazy<FieldAccessor<QuestInteractable_VP_CraneLever, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<QuestInteractable_VP_CraneLever, FMODUnity.StudioEventEmitter>.Create("emitter_craneMove"));
		private static readonly System.Lazy<FieldAccessor<QuestInteractable_VP_CraneLever, string>> _eventRef_sucess =
				new System.Lazy<FieldAccessor<QuestInteractable_VP_CraneLever, string>>(() => FieldAccessor<QuestInteractable_VP_CraneLever, string>.Create("eventRef_sucess"));
		private static readonly System.Lazy<FieldAccessor<QuestInteractable_VP_CraneLever, string>> _eventRef_fail =
				new System.Lazy<FieldAccessor<QuestInteractable_VP_CraneLever, string>>(() => FieldAccessor<QuestInteractable_VP_CraneLever, string>.Create("eventRef_fail"));

		public static FMODUnity.StudioEventEmitter GetEmitter_craneMove(this QuestInteractable_VP_CraneLever __self) => _emitter_craneMove.Value.GetValue(__self);
		public static void SetEmitter_craneMove(this QuestInteractable_VP_CraneLever __self, FMODUnity.StudioEventEmitter value) => _emitter_craneMove.Value.SetValue(__self, value);
		public static string GetEventRef_sucess(this QuestInteractable_VP_CraneLever __self) => _eventRef_sucess.Value.GetValue(__self);
		public static void SetEventRef_sucess(this QuestInteractable_VP_CraneLever __self, string value) => _eventRef_sucess.Value.SetValue(__self, value);
		public static string GetEventRef_fail(this QuestInteractable_VP_CraneLever __self) => _eventRef_fail.Value.GetValue(__self);
		public static void SetEventRef_fail(this QuestInteractable_VP_CraneLever __self, string value) => _eventRef_fail.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_QuestInteractable_VarunaBoss_Wall
	{

		private static readonly System.Lazy<MethodAccessor<QuestInteractable_VarunaBoss_Wall>> _OnValidate757602046 =
				new System.Lazy<MethodAccessor<QuestInteractable_VarunaBoss_Wall>>(() => MethodAccessor<QuestInteractable_VarunaBoss_Wall>.Create("OnValidate"));

		public static void OnValidate(this QuestInteractable_VarunaBoss_Wall __self) => _OnValidate757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_QuestInteractable_VarunaPillar
	{

		private static readonly System.Lazy<FieldAccessor<QuestInteractable_VarunaPillar, UnityEngine.Transform>> _midPointOfPillar =
				new System.Lazy<FieldAccessor<QuestInteractable_VarunaPillar, UnityEngine.Transform>>(() => FieldAccessor<QuestInteractable_VarunaPillar, UnityEngine.Transform>.Create("midPointOfPillar"));
		private static readonly System.Lazy<FieldAccessor<QuestInteractable_VarunaPillar, float>> _knockbackRadius =
				new System.Lazy<FieldAccessor<QuestInteractable_VarunaPillar, float>>(() => FieldAccessor<QuestInteractable_VarunaPillar, float>.Create("knockbackRadius"));
		private static readonly System.Lazy<FieldAccessor<QuestInteractable_VarunaPillar, float>> _knockbackForce =
				new System.Lazy<FieldAccessor<QuestInteractable_VarunaPillar, float>>(() => FieldAccessor<QuestInteractable_VarunaPillar, float>.Create("knockbackForce"));

		public static UnityEngine.Transform GetMidPointOfPillar(this QuestInteractable_VarunaPillar __self) => _midPointOfPillar.Value.GetValue(__self);
		public static void SetMidPointOfPillar(this QuestInteractable_VarunaPillar __self, UnityEngine.Transform value) => _midPointOfPillar.Value.SetValue(__self, value);
		public static float GetKnockbackRadius(this QuestInteractable_VarunaPillar __self) => _knockbackRadius.Value.GetValue(__self);
		public static void SetKnockbackRadius(this QuestInteractable_VarunaPillar __self, float value) => _knockbackRadius.Value.SetValue(__self, value);
		public static float GetKnockbackForce(this QuestInteractable_VarunaPillar __self) => _knockbackForce.Value.GetValue(__self);
		public static void SetKnockbackForce(this QuestInteractable_VarunaPillar __self, float value) => _knockbackForce.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<QuestInteractable_VarunaPillar>> _OnDrawGizmos757602046 =
				new System.Lazy<MethodAccessor<QuestInteractable_VarunaPillar>>(() => MethodAccessor<QuestInteractable_VarunaPillar>.Create("OnDrawGizmos"));
		private static readonly System.Lazy<MethodAccessor<QuestInteractable_VarunaPillar>> _IsPlayerHoldingBarrel3461878659 =
				new System.Lazy<MethodAccessor<QuestInteractable_VarunaPillar>>(() => MethodAccessor<QuestInteractable_VarunaPillar>.Create("IsPlayerHoldingBarrel", typeof(Network_Player)));

		public static void OnDrawGizmos(this QuestInteractable_VarunaPillar __self) => _OnDrawGizmos757602046.Value.Invoke(__self);
		public static bool IsPlayerHoldingBarrel(this QuestInteractable_VarunaPillar __self, Network_Player player) => (bool)_IsPlayerHoldingBarrel3461878659.Value.Invoke(__self, player);

	}

	public static class PrivateAccessor_QuestListener
	{

		private static readonly System.Lazy<MethodAccessor<QuestListener>> _OnQuestRestore757602046 =
				new System.Lazy<MethodAccessor<QuestListener>>(() => MethodAccessor<QuestListener>.Create("OnQuestRestore"));
		private static readonly System.Lazy<MethodAccessor<QuestListener>> _OnQuestComplete757602046 =
				new System.Lazy<MethodAccessor<QuestListener>>(() => MethodAccessor<QuestListener>.Create("OnQuestComplete"));

		public static void OnQuestRestore(this QuestListener __self) => _OnQuestRestore757602046.Value.Invoke(__self);
		public static void OnQuestComplete(this QuestListener __self) => _OnQuestComplete757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_QuestListener_OnOff
	{

		private static readonly System.Lazy<MethodAccessor<QuestListener_OnOff>> _OnQuestRestore757602046 =
				new System.Lazy<MethodAccessor<QuestListener_OnOff>>(() => MethodAccessor<QuestListener_OnOff>.Create("OnQuestRestore"));
		private static readonly System.Lazy<MethodAccessor<QuestListener_OnOff>> _OnQuestComplete757602046 =
				new System.Lazy<MethodAccessor<QuestListener_OnOff>>(() => MethodAccessor<QuestListener_OnOff>.Create("OnQuestComplete"));

		public static void OnQuestRestore(this QuestListener_OnOff __self) => _OnQuestRestore757602046.Value.Invoke(__self);
		public static void OnQuestComplete(this QuestListener_OnOff __self) => _OnQuestComplete757602046.Value.Invoke(__self);

	}

	public static class Private_QuestProgressTracker
	{

		private static readonly System.Lazy<StaticFieldAccessor<System.Collections.Generic.List<Quest>>> _quests =
				new System.Lazy<StaticFieldAccessor<System.Collections.Generic.List<Quest>>>(() => StaticFieldAccessor<System.Collections.Generic.List<Quest>>.Create(typeof(QuestProgressTracker), "quests"));
		private static readonly System.Lazy<StaticFieldAccessor<QuestData[]>> _questData =
				new System.Lazy<StaticFieldAccessor<QuestData[]>>(() => StaticFieldAccessor<QuestData[]>.Create(typeof(QuestProgressTracker), "questData"));

		public static System.Collections.Generic.List<Quest> GetQuests() => _quests.Value.GetValue();
		public static void SetQuests(System.Collections.Generic.List<Quest> value) => _quests.Value.SetValue(value);
		public static QuestData[] GetQuestData() => _questData.Value.GetValue();
		public static void SetQuestData(QuestData[] value) => _questData.Value.SetValue(value);

		private static readonly System.Lazy<StaticMethodAccessor> _InitializeQuestData757602046 =
				new System.Lazy<StaticMethodAccessor>(() => StaticMethodAccessor.Create(typeof(QuestProgressTracker), "InitializeQuestData"));
		private static readonly System.Lazy<StaticMethodAccessor> _InitializeQuest3446043996 =
				new System.Lazy<StaticMethodAccessor>(() => StaticMethodAccessor.Create(typeof(QuestProgressTracker), "InitializeQuest", typeof(QuestType)));
		private static readonly System.Lazy<StaticMethodAccessor> _InitializeQuest1200464479 =
				new System.Lazy<StaticMethodAccessor>(() => StaticMethodAccessor.Create(typeof(QuestProgressTracker), "InitializeQuest", typeof(QuestType), typeof(QuestData)));
		private static readonly System.Lazy<StaticMethodAccessor> _InitializeQuests3454555111 =
				new System.Lazy<StaticMethodAccessor>(() => StaticMethodAccessor.Create(typeof(QuestProgressTracker), "InitializeQuests", typeof(QuestData[])));

		public static QuestData[] InitializeQuestData() => (QuestData[])_InitializeQuestData757602046.Value.Invoke();
		public static void InitializeQuest(QuestType questType) => _InitializeQuest3446043996.Value.Invoke(questType);
		public static void InitializeQuest(QuestType questType, QuestData questData) => _InitializeQuest1200464479.Value.Invoke(questType, questData);
		public static void InitializeQuests(QuestData[] questData) => _InitializeQuests3454555111.Value.Invoke(questData);

	}

	public static class PrivateAccessor_RGD_Quest
	{

		private static readonly System.Lazy<MethodAccessor<RGD_Quest>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_Quest>>(() => MethodAccessor<RGD_Quest>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_Quest __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RagdollManager
	{

		private static readonly System.Lazy<FieldAccessor<RagdollManager, RagdollPart[]>> _parts =
				new System.Lazy<FieldAccessor<RagdollManager, RagdollPart[]>>(() => FieldAccessor<RagdollManager, RagdollPart[]>.Create("parts"));
		private static readonly System.Lazy<FieldAccessor<RagdollManager, WaterFloatSemih_Rigidbody>> _waterFloat =
				new System.Lazy<FieldAccessor<RagdollManager, WaterFloatSemih_Rigidbody>>(() => FieldAccessor<RagdollManager, WaterFloatSemih_Rigidbody>.Create("waterFloat"));
		private static readonly System.Lazy<FieldAccessor<RagdollManager, UnityEngine.Transform[]>> _children =
				new System.Lazy<FieldAccessor<RagdollManager, UnityEngine.Transform[]>>(() => FieldAccessor<RagdollManager, UnityEngine.Transform[]>.Create("children"));
		private static readonly System.Lazy<FieldAccessor<RagdollManager, UnityEngine.Vector3[]>> __connectedAnchor =
				new System.Lazy<FieldAccessor<RagdollManager, UnityEngine.Vector3[]>>(() => FieldAccessor<RagdollManager, UnityEngine.Vector3[]>.Create("_connectedAnchor"));
		private static readonly System.Lazy<FieldAccessor<RagdollManager, UnityEngine.Vector3[]>> __anchor =
				new System.Lazy<FieldAccessor<RagdollManager, UnityEngine.Vector3[]>>(() => FieldAccessor<RagdollManager, UnityEngine.Vector3[]>.Create("_anchor"));

		public static RagdollPart[] GetParts(this RagdollManager __self) => _parts.Value.GetValue(__self);
		public static void SetParts(this RagdollManager __self, RagdollPart[] value) => _parts.Value.SetValue(__self, value);
		public static WaterFloatSemih_Rigidbody GetWaterFloat(this RagdollManager __self) => _waterFloat.Value.GetValue(__self);
		public static void SetWaterFloat(this RagdollManager __self, WaterFloatSemih_Rigidbody value) => _waterFloat.Value.SetValue(__self, value);
		public static UnityEngine.Transform[] GetChildren(this RagdollManager __self) => _children.Value.GetValue(__self);
		public static void SetChildren(this RagdollManager __self, UnityEngine.Transform[] value) => _children.Value.SetValue(__self, value);
		public static UnityEngine.Vector3[] Get_connectedAnchor(this RagdollManager __self) => __connectedAnchor.Value.GetValue(__self);
		public static void Set_connectedAnchor(this RagdollManager __self, UnityEngine.Vector3[] value) => __connectedAnchor.Value.SetValue(__self, value);
		public static UnityEngine.Vector3[] Get_anchor(this RagdollManager __self) => __anchor.Value.GetValue(__self);
		public static void Set_anchor(this RagdollManager __self, UnityEngine.Vector3[] value) => __anchor.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<RagdollManager>> _Start757602046 =
				new System.Lazy<MethodAccessor<RagdollManager>>(() => MethodAccessor<RagdollManager>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<RagdollManager>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<RagdollManager>>(() => MethodAccessor<RagdollManager>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<RagdollManager>> _OnValidate757602046 =
				new System.Lazy<MethodAccessor<RagdollManager>>(() => MethodAccessor<RagdollManager>.Create("OnValidate"));
		private static readonly System.Lazy<MethodAccessor<RagdollManager>> _Awake757602046 =
				new System.Lazy<MethodAccessor<RagdollManager>>(() => MethodAccessor<RagdollManager>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<RagdollManager>> _OnHitWater757602046 =
				new System.Lazy<MethodAccessor<RagdollManager>>(() => MethodAccessor<RagdollManager>.Create("OnHitWater"));
		private static readonly System.Lazy<MethodAccessor<RagdollManager>> _SetCorrectLayers757602046 =
				new System.Lazy<MethodAccessor<RagdollManager>>(() => MethodAccessor<RagdollManager>.Create("SetCorrectLayers"));
		private static readonly System.Lazy<MethodAccessor<RagdollManager>> _FixAnchors757602046 =
				new System.Lazy<MethodAccessor<RagdollManager>>(() => MethodAccessor<RagdollManager>.Create("FixAnchors"));
		private static readonly System.Lazy<MethodAccessor<RagdollManager>> _Button_FindParts757602046 =
				new System.Lazy<MethodAccessor<RagdollManager>>(() => MethodAccessor<RagdollManager>.Create("Button_FindParts"));
		private static readonly System.Lazy<MethodAccessor<RagdollManager>> _Button_ActivateRagdoll757602046 =
				new System.Lazy<MethodAccessor<RagdollManager>>(() => MethodAccessor<RagdollManager>.Create("Button_ActivateRagdoll"));
		private static readonly System.Lazy<MethodAccessor<RagdollManager>> _Button_DisableRagdoll757602046 =
				new System.Lazy<MethodAccessor<RagdollManager>>(() => MethodAccessor<RagdollManager>.Create("Button_DisableRagdoll"));
		private static readonly System.Lazy<MethodAccessor<RagdollManager>> _Button_GamePlayReady757602046 =
				new System.Lazy<MethodAccessor<RagdollManager>>(() => MethodAccessor<RagdollManager>.Create("Button_GamePlayReady"));

		public static void Start(this RagdollManager __self) => _Start757602046.Value.Invoke(__self);
		public static void OnDestroy(this RagdollManager __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void OnValidate(this RagdollManager __self) => _OnValidate757602046.Value.Invoke(__self);
		public static void Awake(this RagdollManager __self) => _Awake757602046.Value.Invoke(__self);
		public static void OnHitWater(this RagdollManager __self) => _OnHitWater757602046.Value.Invoke(__self);
		public static void SetCorrectLayers(this RagdollManager __self) => _SetCorrectLayers757602046.Value.Invoke(__self);
		public static void FixAnchors(this RagdollManager __self) => _FixAnchors757602046.Value.Invoke(__self);
		public static void Button_FindParts(this RagdollManager __self) => _Button_FindParts757602046.Value.Invoke(__self);
		public static void Button_ActivateRagdoll(this RagdollManager __self) => _Button_ActivateRagdoll757602046.Value.Invoke(__self);
		public static void Button_DisableRagdoll(this RagdollManager __self) => _Button_DisableRagdoll757602046.Value.Invoke(__self);
		public static void Button_GamePlayReady(this RagdollManager __self) => _Button_GamePlayReady757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_RagdollPart
	{

		private static readonly System.Lazy<MethodAccessor<RagdollPart>> _OnEnable757602046 =
				new System.Lazy<MethodAccessor<RagdollPart>>(() => MethodAccessor<RagdollPart>.Create("OnEnable"));

		public static void OnEnable(this RagdollPart __self) => _OnEnable757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_RaycastInteractable
	{

		private static readonly System.Lazy<FieldAccessor<RaycastInteractable, System.Collections.Generic.List<IRaycastable>>> _raycastableObjects =
				new System.Lazy<FieldAccessor<RaycastInteractable, System.Collections.Generic.List<IRaycastable>>>(() => FieldAccessor<RaycastInteractable, System.Collections.Generic.List<IRaycastable>>.Create("raycastableObjects"));
		private static readonly System.Lazy<FieldAccessor<RaycastInteractable, bool>> _initialized =
				new System.Lazy<FieldAccessor<RaycastInteractable, bool>>(() => FieldAccessor<RaycastInteractable, bool>.Create("initialized"));

		public static System.Collections.Generic.List<IRaycastable> GetRaycastableObjects(this RaycastInteractable __self) => _raycastableObjects.Value.GetValue(__self);
		public static void SetRaycastableObjects(this RaycastInteractable __self, System.Collections.Generic.List<IRaycastable> value) => _raycastableObjects.Value.SetValue(__self, value);
		public static bool GetInitialized(this RaycastInteractable __self) => _initialized.Value.GetValue(__self);
		public static void SetInitialized(this RaycastInteractable __self, bool value) => _initialized.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_RaycastInteractable_DisplayText
	{

		private static readonly System.Lazy<FieldAccessor<RaycastInteractable_DisplayText, bool>> _isDisplayingText =
				new System.Lazy<FieldAccessor<RaycastInteractable_DisplayText, bool>>(() => FieldAccessor<RaycastInteractable_DisplayText, bool>.Create("isDisplayingText"));

		public static bool GetIsDisplayingText(this RaycastInteractable_DisplayText __self) => _isDisplayingText.Value.GetValue(__self);
		public static void SetIsDisplayingText(this RaycastInteractable_DisplayText __self, bool value) => _isDisplayingText.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<RaycastInteractable_DisplayText>> _OnInspectorGUILocalizationTerm757602046 =
				new System.Lazy<MethodAccessor<RaycastInteractable_DisplayText>>(() => MethodAccessor<RaycastInteractable_DisplayText>.Create("OnInspectorGUILocalizationTerm"));
		private static readonly System.Lazy<MethodAccessor<RaycastInteractable_DisplayText>> _OnIsRayed757602046 =
				new System.Lazy<MethodAccessor<RaycastInteractable_DisplayText>>(() => MethodAccessor<RaycastInteractable_DisplayText>.Create("OnIsRayed"));
		private static readonly System.Lazy<MethodAccessor<RaycastInteractable_DisplayText>> _OnRayEnter757602046 =
				new System.Lazy<MethodAccessor<RaycastInteractable_DisplayText>>(() => MethodAccessor<RaycastInteractable_DisplayText>.Create("OnRayEnter"));
		private static readonly System.Lazy<MethodAccessor<RaycastInteractable_DisplayText>> _OnRayExit757602046 =
				new System.Lazy<MethodAccessor<RaycastInteractable_DisplayText>>(() => MethodAccessor<RaycastInteractable_DisplayText>.Create("OnRayExit"));
		private static readonly System.Lazy<MethodAccessor<RaycastInteractable_DisplayText>> _HideDisplayText757602046 =
				new System.Lazy<MethodAccessor<RaycastInteractable_DisplayText>>(() => MethodAccessor<RaycastInteractable_DisplayText>.Create("HideDisplayText"));

		public static void OnInspectorGUILocalizationTerm(this RaycastInteractable_DisplayText __self) => _OnInspectorGUILocalizationTerm757602046.Value.Invoke(__self);
		public static void OnIsRayed(this RaycastInteractable_DisplayText __self) => _OnIsRayed757602046.Value.Invoke(__self);
		public static void OnRayEnter(this RaycastInteractable_DisplayText __self) => _OnRayEnter757602046.Value.Invoke(__self);
		public static void OnRayExit(this RaycastInteractable_DisplayText __self) => _OnRayExit757602046.Value.Invoke(__self);
		public static void HideDisplayText(this RaycastInteractable_DisplayText __self) => _HideDisplayText757602046.Value.Invoke(__self);

	}

	public static class Private_RaycastInteractable_DisplayText
	{

		private static readonly System.Lazy<StaticFieldAccessor<DisplayTextManager>> _displayTextManager =
				new System.Lazy<StaticFieldAccessor<DisplayTextManager>>(() => StaticFieldAccessor<DisplayTextManager>.Create(typeof(RaycastInteractable_DisplayText), "displayTextManager"));

		public static DisplayTextManager GetDisplayTextManager() => _displayTextManager.Value.GetValue();
		public static void SetDisplayTextManager(DisplayTextManager value) => _displayTextManager.Value.SetValue(value);

	}

	public static class PrivateAccessor_RaycastInteractable_DisplayText_ChildCount
	{

		private static readonly System.Lazy<FieldAccessor<RaycastInteractable_DisplayText_ChildCount, UnityEngine.Transform>> _parent =
				new System.Lazy<FieldAccessor<RaycastInteractable_DisplayText_ChildCount, UnityEngine.Transform>>(() => FieldAccessor<RaycastInteractable_DisplayText_ChildCount, UnityEngine.Transform>.Create("parent"));
		private static readonly System.Lazy<FieldAccessor<RaycastInteractable_DisplayText_ChildCount, int>> _childCount =
				new System.Lazy<FieldAccessor<RaycastInteractable_DisplayText_ChildCount, int>>(() => FieldAccessor<RaycastInteractable_DisplayText_ChildCount, int>.Create("childCount"));

		public static UnityEngine.Transform GetParent(this RaycastInteractable_DisplayText_ChildCount __self) => _parent.Value.GetValue(__self);
		public static void SetParent(this RaycastInteractable_DisplayText_ChildCount __self, UnityEngine.Transform value) => _parent.Value.SetValue(__self, value);
		public static int GetChildCount(this RaycastInteractable_DisplayText_ChildCount __self) => _childCount.Value.GetValue(__self);
		public static void SetChildCount(this RaycastInteractable_DisplayText_ChildCount __self, int value) => _childCount.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<RaycastInteractable_DisplayText_ChildCount>> _OnIsRayed757602046 =
				new System.Lazy<MethodAccessor<RaycastInteractable_DisplayText_ChildCount>>(() => MethodAccessor<RaycastInteractable_DisplayText_ChildCount>.Create("OnIsRayed"));

		public static void OnIsRayed(this RaycastInteractable_DisplayText_ChildCount __self) => _OnIsRayed757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_RaycastInteractable_DisplayText_QuestInteractable
	{

		private static readonly System.Lazy<FieldAccessor<RaycastInteractable_DisplayText_QuestInteractable, QuestEventBase>> _questEventBase =
				new System.Lazy<FieldAccessor<RaycastInteractable_DisplayText_QuestInteractable, QuestEventBase>>(() => FieldAccessor<RaycastInteractable_DisplayText_QuestInteractable, QuestEventBase>.Create("questEventBase"));
		private static readonly System.Lazy<FieldAccessor<RaycastInteractable_DisplayText_QuestInteractable, System.Collections.Generic.List<int>>> _displayQuestIndexes =
				new System.Lazy<FieldAccessor<RaycastInteractable_DisplayText_QuestInteractable, System.Collections.Generic.List<int>>>(() => FieldAccessor<RaycastInteractable_DisplayText_QuestInteractable, System.Collections.Generic.List<int>>.Create("displayQuestIndexes"));

		public static QuestEventBase GetQuestEventBase(this RaycastInteractable_DisplayText_QuestInteractable __self) => _questEventBase.Value.GetValue(__self);
		public static void SetQuestEventBase(this RaycastInteractable_DisplayText_QuestInteractable __self, QuestEventBase value) => _questEventBase.Value.SetValue(__self, value);
		public static System.Collections.Generic.List<int> GetDisplayQuestIndexes(this RaycastInteractable_DisplayText_QuestInteractable __self) => _displayQuestIndexes.Value.GetValue(__self);
		public static void SetDisplayQuestIndexes(this RaycastInteractable_DisplayText_QuestInteractable __self, System.Collections.Generic.List<int> value) => _displayQuestIndexes.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<RaycastInteractable_DisplayText_QuestInteractable>> _OnIsRayed757602046 =
				new System.Lazy<MethodAccessor<RaycastInteractable_DisplayText_QuestInteractable>>(() => MethodAccessor<RaycastInteractable_DisplayText_QuestInteractable>.Create("OnIsRayed"));

		public static void OnIsRayed(this RaycastInteractable_DisplayText_QuestInteractable __self) => _OnIsRayed757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_RaycastInteractable_Extension
	{

		private static readonly System.Lazy<FieldAccessor<RaycastInteractable_Extension, RaycastInteractable>> _raycastInteractable =
				new System.Lazy<FieldAccessor<RaycastInteractable_Extension, RaycastInteractable>>(() => FieldAccessor<RaycastInteractable_Extension, RaycastInteractable>.Create("raycastInteractable"));

		public static RaycastInteractable GetRaycastInteractable(this RaycastInteractable_Extension __self) => _raycastInteractable.Value.GetValue(__self);
		public static void SetRaycastInteractable(this RaycastInteractable_Extension __self, RaycastInteractable value) => _raycastInteractable.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<RaycastInteractable_Extension>> _Awake757602046 =
				new System.Lazy<MethodAccessor<RaycastInteractable_Extension>>(() => MethodAccessor<RaycastInteractable_Extension>.Create("Awake"));

		public static void Awake(this RaycastInteractable_Extension __self) => _Awake757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_RaycastInteractable_Redirect
	{

		private static readonly System.Lazy<FieldAccessor<RaycastInteractable_Redirect, RaycastInteractable>> _raycastInteractable =
				new System.Lazy<FieldAccessor<RaycastInteractable_Redirect, RaycastInteractable>>(() => FieldAccessor<RaycastInteractable_Redirect, RaycastInteractable>.Create("raycastInteractable"));

		public static RaycastInteractable GetRaycastInteractable(this RaycastInteractable_Redirect __self) => _raycastInteractable.Value.GetValue(__self);
		public static void SetRaycastInteractable(this RaycastInteractable_Redirect __self, RaycastInteractable value) => _raycastInteractable.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_RaycastInteractable_Redirect_JusticeScaleContainer
	{

		private static readonly System.Lazy<FieldAccessor<RaycastInteractable_Redirect_JusticeScaleContainer, float>> _maxPlayerYDiff =
				new System.Lazy<FieldAccessor<RaycastInteractable_Redirect_JusticeScaleContainer, float>>(() => FieldAccessor<RaycastInteractable_Redirect_JusticeScaleContainer, float>.Create("maxPlayerYDiff"));
		private static readonly System.Lazy<FieldAccessor<RaycastInteractable_Redirect_JusticeScaleContainer, JusticeScale>> _scale =
				new System.Lazy<FieldAccessor<RaycastInteractable_Redirect_JusticeScaleContainer, JusticeScale>>(() => FieldAccessor<RaycastInteractable_Redirect_JusticeScaleContainer, JusticeScale>.Create("scale"));
		private static readonly System.Lazy<FieldAccessor<RaycastInteractable_Redirect_JusticeScaleContainer, Network_Player>> _localPlayer =
				new System.Lazy<FieldAccessor<RaycastInteractable_Redirect_JusticeScaleContainer, Network_Player>>(() => FieldAccessor<RaycastInteractable_Redirect_JusticeScaleContainer, Network_Player>.Create("localPlayer"));

		public static float GetMaxPlayerYDiff(this RaycastInteractable_Redirect_JusticeScaleContainer __self) => _maxPlayerYDiff.Value.GetValue(__self);
		public static void SetMaxPlayerYDiff(this RaycastInteractable_Redirect_JusticeScaleContainer __self, float value) => _maxPlayerYDiff.Value.SetValue(__self, value);
		public static JusticeScale GetScale(this RaycastInteractable_Redirect_JusticeScaleContainer __self) => _scale.Value.GetValue(__self);
		public static void SetScale(this RaycastInteractable_Redirect_JusticeScaleContainer __self, JusticeScale value) => _scale.Value.SetValue(__self, value);
		public static Network_Player GetLocalPlayer(this RaycastInteractable_Redirect_JusticeScaleContainer __self) => _localPlayer.Value.GetValue(__self);
		public static void SetLocalPlayer(this RaycastInteractable_Redirect_JusticeScaleContainer __self, Network_Player value) => _localPlayer.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_ReflectionProbeUpdater
	{

		private static readonly System.Lazy<FieldAccessor<ReflectionProbeUpdater, float>> _timerInterval =
				new System.Lazy<FieldAccessor<ReflectionProbeUpdater, float>>(() => FieldAccessor<ReflectionProbeUpdater, float>.Create("timerInterval"));
		private static readonly System.Lazy<FieldAccessor<ReflectionProbeUpdater, float>> _lerpCubeTime =
				new System.Lazy<FieldAccessor<ReflectionProbeUpdater, float>>(() => FieldAccessor<ReflectionProbeUpdater, float>.Create("lerpCubeTime"));
		private static readonly System.Lazy<FieldAccessor<ReflectionProbeUpdater, UnityEngine.Color>> _solidColor =
				new System.Lazy<FieldAccessor<ReflectionProbeUpdater, UnityEngine.Color>>(() => FieldAccessor<ReflectionProbeUpdater, UnityEngine.Color>.Create("solidColor"));
		private static readonly System.Lazy<FieldAccessor<ReflectionProbeUpdater, UnityEngine.Cubemap>> _cubemapSimple =
				new System.Lazy<FieldAccessor<ReflectionProbeUpdater, UnityEngine.Cubemap>>(() => FieldAccessor<ReflectionProbeUpdater, UnityEngine.Cubemap>.Create("cubemapSimple"));
		private static readonly System.Lazy<FieldAccessor<ReflectionProbeUpdater, UnityEngine.Cubemap>> _cubemapCurrent =
				new System.Lazy<FieldAccessor<ReflectionProbeUpdater, UnityEngine.Cubemap>>(() => FieldAccessor<ReflectionProbeUpdater, UnityEngine.Cubemap>.Create("cubemapCurrent"));
		private static readonly System.Lazy<FieldAccessor<ReflectionProbeUpdater, UnityEngine.RenderTexture>> _renderTexture0 =
				new System.Lazy<FieldAccessor<ReflectionProbeUpdater, UnityEngine.RenderTexture>>(() => FieldAccessor<ReflectionProbeUpdater, UnityEngine.RenderTexture>.Create("renderTexture0"));
		private static readonly System.Lazy<FieldAccessor<ReflectionProbeUpdater, UnityEngine.RenderTexture>> _renderTexture1 =
				new System.Lazy<FieldAccessor<ReflectionProbeUpdater, UnityEngine.RenderTexture>>(() => FieldAccessor<ReflectionProbeUpdater, UnityEngine.RenderTexture>.Create("renderTexture1"));
		private static readonly System.Lazy<FieldAccessor<ReflectionProbeUpdater, UnityEngine.RenderTexture>> _renderTextureTMP =
				new System.Lazy<FieldAccessor<ReflectionProbeUpdater, UnityEngine.RenderTexture>>(() => FieldAccessor<ReflectionProbeUpdater, UnityEngine.RenderTexture>.Create("renderTextureTMP"));
		private static readonly System.Lazy<FieldAccessor<ReflectionProbeUpdater, UnityEngine.RenderTexture>> _renderTextureCombined =
				new System.Lazy<FieldAccessor<ReflectionProbeUpdater, UnityEngine.RenderTexture>>(() => FieldAccessor<ReflectionProbeUpdater, UnityEngine.RenderTexture>.Create("renderTextureCombined"));
		private static readonly System.Lazy<FieldAccessor<ReflectionProbeUpdater, UnityEngine.ReflectionProbe>> _probe =
				new System.Lazy<FieldAccessor<ReflectionProbeUpdater, UnityEngine.ReflectionProbe>>(() => FieldAccessor<ReflectionProbeUpdater, UnityEngine.ReflectionProbe>.Create("probe"));
		private static readonly System.Lazy<FieldAccessor<ReflectionProbeUpdater, UnityEngine.Coroutine>> _lerpCoroutine =
				new System.Lazy<FieldAccessor<ReflectionProbeUpdater, UnityEngine.Coroutine>>(() => FieldAccessor<ReflectionProbeUpdater, UnityEngine.Coroutine>.Create("lerpCoroutine"));
		private static readonly System.Lazy<FieldAccessor<ReflectionProbeUpdater, int>> _renderTextureIndex =
				new System.Lazy<FieldAccessor<ReflectionProbeUpdater, int>>(() => FieldAccessor<ReflectionProbeUpdater, int>.Create("renderTextureIndex"));
		private static readonly System.Lazy<FieldAccessor<ReflectionProbeUpdater, int>> _probeRenderID =
				new System.Lazy<FieldAccessor<ReflectionProbeUpdater, int>>(() => FieldAccessor<ReflectionProbeUpdater, int>.Create("probeRenderID"));
		private static readonly System.Lazy<FieldAccessor<ReflectionProbeUpdater, float>> _timer =
				new System.Lazy<FieldAccessor<ReflectionProbeUpdater, float>>(() => FieldAccessor<ReflectionProbeUpdater, float>.Create("timer"));

		public static float GetTimerInterval(this ReflectionProbeUpdater __self) => _timerInterval.Value.GetValue(__self);
		public static void SetTimerInterval(this ReflectionProbeUpdater __self, float value) => _timerInterval.Value.SetValue(__self, value);
		public static float GetLerpCubeTime(this ReflectionProbeUpdater __self) => _lerpCubeTime.Value.GetValue(__self);
		public static void SetLerpCubeTime(this ReflectionProbeUpdater __self, float value) => _lerpCubeTime.Value.SetValue(__self, value);
		public static UnityEngine.Color GetSolidColor(this ReflectionProbeUpdater __self) => _solidColor.Value.GetValue(__self);
		public static void SetSolidColor(this ReflectionProbeUpdater __self, UnityEngine.Color value) => _solidColor.Value.SetValue(__self, value);
		public static UnityEngine.Cubemap GetCubemapSimple(this ReflectionProbeUpdater __self) => _cubemapSimple.Value.GetValue(__self);
		public static void SetCubemapSimple(this ReflectionProbeUpdater __self, UnityEngine.Cubemap value) => _cubemapSimple.Value.SetValue(__self, value);
		public static UnityEngine.Cubemap GetCubemapCurrent(this ReflectionProbeUpdater __self) => _cubemapCurrent.Value.GetValue(__self);
		public static void SetCubemapCurrent(this ReflectionProbeUpdater __self, UnityEngine.Cubemap value) => _cubemapCurrent.Value.SetValue(__self, value);
		public static UnityEngine.RenderTexture GetRenderTexture0(this ReflectionProbeUpdater __self) => _renderTexture0.Value.GetValue(__self);
		public static void SetRenderTexture0(this ReflectionProbeUpdater __self, UnityEngine.RenderTexture value) => _renderTexture0.Value.SetValue(__self, value);
		public static UnityEngine.RenderTexture GetRenderTexture1(this ReflectionProbeUpdater __self) => _renderTexture1.Value.GetValue(__self);
		public static void SetRenderTexture1(this ReflectionProbeUpdater __self, UnityEngine.RenderTexture value) => _renderTexture1.Value.SetValue(__self, value);
		public static UnityEngine.RenderTexture GetRenderTextureTMP(this ReflectionProbeUpdater __self) => _renderTextureTMP.Value.GetValue(__self);
		public static void SetRenderTextureTMP(this ReflectionProbeUpdater __self, UnityEngine.RenderTexture value) => _renderTextureTMP.Value.SetValue(__self, value);
		public static UnityEngine.RenderTexture GetRenderTextureCombined(this ReflectionProbeUpdater __self) => _renderTextureCombined.Value.GetValue(__self);
		public static void SetRenderTextureCombined(this ReflectionProbeUpdater __self, UnityEngine.RenderTexture value) => _renderTextureCombined.Value.SetValue(__self, value);
		public static UnityEngine.ReflectionProbe GetProbe(this ReflectionProbeUpdater __self) => _probe.Value.GetValue(__self);
		public static void SetProbe(this ReflectionProbeUpdater __self, UnityEngine.ReflectionProbe value) => _probe.Value.SetValue(__self, value);
		public static UnityEngine.Coroutine GetLerpCoroutine(this ReflectionProbeUpdater __self) => _lerpCoroutine.Value.GetValue(__self);
		public static void SetLerpCoroutine(this ReflectionProbeUpdater __self, UnityEngine.Coroutine value) => _lerpCoroutine.Value.SetValue(__self, value);
		public static int GetRenderTextureIndex(this ReflectionProbeUpdater __self) => _renderTextureIndex.Value.GetValue(__self);
		public static void SetRenderTextureIndex(this ReflectionProbeUpdater __self, int value) => _renderTextureIndex.Value.SetValue(__self, value);
		public static int GetProbeRenderID(this ReflectionProbeUpdater __self) => _probeRenderID.Value.GetValue(__self);
		public static void SetProbeRenderID(this ReflectionProbeUpdater __self, int value) => _probeRenderID.Value.SetValue(__self, value);
		public static float GetTimer(this ReflectionProbeUpdater __self) => _timer.Value.GetValue(__self);
		public static void SetTimer(this ReflectionProbeUpdater __self, float value) => _timer.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<ReflectionProbeUpdater>> _Awake757602046 =
				new System.Lazy<MethodAccessor<ReflectionProbeUpdater>>(() => MethodAccessor<ReflectionProbeUpdater>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<ReflectionProbeUpdater>> _OnDisable757602046 =
				new System.Lazy<MethodAccessor<ReflectionProbeUpdater>>(() => MethodAccessor<ReflectionProbeUpdater>.Create("OnDisable"));
		private static readonly System.Lazy<MethodAccessor<ReflectionProbeUpdater>> _Update757602046 =
				new System.Lazy<MethodAccessor<ReflectionProbeUpdater>>(() => MethodAccessor<ReflectionProbeUpdater>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<ReflectionProbeUpdater>> _SetResolution3486186818 =
				new System.Lazy<MethodAccessor<ReflectionProbeUpdater>>(() => MethodAccessor<ReflectionProbeUpdater>.Create("SetResolution", typeof(int)));
		private static readonly System.Lazy<MethodAccessor<ReflectionProbeUpdater>> _RenderCubeMap757602046 =
				new System.Lazy<MethodAccessor<ReflectionProbeUpdater>>(() => MethodAccessor<ReflectionProbeUpdater>.Create("RenderCubeMap"));
		private static readonly System.Lazy<MethodAccessor<ReflectionProbeUpdater>> _LerpCubeMap757602046 =
				new System.Lazy<MethodAccessor<ReflectionProbeUpdater>>(() => MethodAccessor<ReflectionProbeUpdater>.Create("LerpCubeMap"));
		private static readonly System.Lazy<MethodAccessor<ReflectionProbeUpdater>> _StopLerpCoroutine757602046 =
				new System.Lazy<MethodAccessor<ReflectionProbeUpdater>>(() => MethodAccessor<ReflectionProbeUpdater>.Create("StopLerpCoroutine"));

		public static void Awake(this ReflectionProbeUpdater __self) => _Awake757602046.Value.Invoke(__self);
		public static void OnDisable(this ReflectionProbeUpdater __self) => _OnDisable757602046.Value.Invoke(__self);
		public static void Update(this ReflectionProbeUpdater __self) => _Update757602046.Value.Invoke(__self);
		public static void SetResolution(this ReflectionProbeUpdater __self, int resolution) => _SetResolution3486186818.Value.Invoke(__self, resolution);
		public static void RenderCubeMap(this ReflectionProbeUpdater __self) => _RenderCubeMap757602046.Value.Invoke(__self);
		public static System.Collections.IEnumerator LerpCubeMap(this ReflectionProbeUpdater __self) => (System.Collections.IEnumerator)_LerpCubeMap757602046.Value.Invoke(__self);
		public static void StopLerpCoroutine(this ReflectionProbeUpdater __self) => _StopLerpCoroutine757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Rope
	{

		private static readonly System.Lazy<FieldAccessor<Rope, bool>> _startOff =
				new System.Lazy<FieldAccessor<Rope, bool>>(() => FieldAccessor<Rope, bool>.Create("startOff"));
		private static readonly System.Lazy<FieldAccessor<Rope, UnityEngine.Renderer>> _ropeMaterial =
				new System.Lazy<FieldAccessor<Rope, UnityEngine.Renderer>>(() => FieldAccessor<Rope, UnityEngine.Renderer>.Create("ropeMaterial"));
		private static readonly System.Lazy<FieldAccessor<Rope, UnityEngine.Vector2>> _bumpTile =
				new System.Lazy<FieldAccessor<Rope, UnityEngine.Vector2>>(() => FieldAccessor<Rope, UnityEngine.Vector2>.Create("bumpTile"));
		private static readonly System.Lazy<FieldAccessor<Rope, UnityEngine.Vector2>> _diffuseTile =
				new System.Lazy<FieldAccessor<Rope, UnityEngine.Vector2>>(() => FieldAccessor<Rope, UnityEngine.Vector2>.Create("diffuseTile"));
		private static readonly System.Lazy<FieldAccessor<Rope, Rope.RopeAutoFollow[]>> _autoFollow =
				new System.Lazy<FieldAccessor<Rope, Rope.RopeAutoFollow[]>>(() => FieldAccessor<Rope, Rope.RopeAutoFollow[]>.Create("autoFollow"));
		private static readonly System.Lazy<FieldAccessor<Rope, UnityEngine.Transform[]>> _ropeParts =
				new System.Lazy<FieldAccessor<Rope, UnityEngine.Transform[]>>(() => FieldAccessor<Rope, UnityEngine.Transform[]>.Create("ropeParts"));
		private static readonly System.Lazy<FieldAccessor<Rope, UnityEngine.MaterialPropertyBlock>> _propertyBlock =
				new System.Lazy<FieldAccessor<Rope, UnityEngine.MaterialPropertyBlock>>(() => FieldAccessor<Rope, UnityEngine.MaterialPropertyBlock>.Create("propertyBlock"));

		public static bool GetStartOff(this Rope __self) => _startOff.Value.GetValue(__self);
		public static void SetStartOff(this Rope __self, bool value) => _startOff.Value.SetValue(__self, value);
		public static UnityEngine.Renderer GetRopeMaterial(this Rope __self) => _ropeMaterial.Value.GetValue(__self);
		public static void SetRopeMaterial(this Rope __self, UnityEngine.Renderer value) => _ropeMaterial.Value.SetValue(__self, value);
		public static UnityEngine.Vector2 GetBumpTile(this Rope __self) => _bumpTile.Value.GetValue(__self);
		public static void SetBumpTile(this Rope __self, UnityEngine.Vector2 value) => _bumpTile.Value.SetValue(__self, value);
		public static UnityEngine.Vector2 GetDiffuseTile(this Rope __self) => _diffuseTile.Value.GetValue(__self);
		public static void SetDiffuseTile(this Rope __self, UnityEngine.Vector2 value) => _diffuseTile.Value.SetValue(__self, value);
		public static Rope.RopeAutoFollow[] GetAutoFollow(this Rope __self) => _autoFollow.Value.GetValue(__self);
		public static void SetAutoFollow(this Rope __self, Rope.RopeAutoFollow[] value) => _autoFollow.Value.SetValue(__self, value);
		public static UnityEngine.Transform[] GetRopeParts(this Rope __self) => _ropeParts.Value.GetValue(__self);
		public static void SetRopeParts(this Rope __self, UnityEngine.Transform[] value) => _ropeParts.Value.SetValue(__self, value);
		public static UnityEngine.MaterialPropertyBlock GetPropertyBlock(this Rope __self) => _propertyBlock.Value.GetValue(__self);
		public static void SetPropertyBlock(this Rope __self, UnityEngine.MaterialPropertyBlock value) => _propertyBlock.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Rope>> _Start757602046 =
				new System.Lazy<MethodAccessor<Rope>>(() => MethodAccessor<Rope>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<Rope>> _Update757602046 =
				new System.Lazy<MethodAccessor<Rope>>(() => MethodAccessor<Rope>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<Rope>> _Refresh757602046 =
				new System.Lazy<MethodAccessor<Rope>>(() => MethodAccessor<Rope>.Create("Refresh"));

		public static void Start(this Rope __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this Rope __self) => _Update757602046.Value.Invoke(__self);
		public static void Refresh(this Rope __self) => _Refresh757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_RotationComponent
	{

		private static readonly System.Lazy<FieldAccessor<RotationComponent, bool>> _forceSetPosition =
				new System.Lazy<FieldAccessor<RotationComponent, bool>>(() => FieldAccessor<RotationComponent, bool>.Create("forceSetPosition"));
		private static readonly System.Lazy<FieldAccessor<RotationComponent, Raft_Network>> _network =
				new System.Lazy<FieldAccessor<RotationComponent, Raft_Network>>(() => FieldAccessor<RotationComponent, Raft_Network>.Create("network"));
		private static readonly System.Lazy<FieldAccessor<RotationComponent, Network_Player>> _localPlayer =
				new System.Lazy<FieldAccessor<RotationComponent, Network_Player>>(() => FieldAccessor<RotationComponent, Network_Player>.Create("localPlayer"));
		private static readonly System.Lazy<FieldAccessor<RotationComponent, UnityEngine.Vector3>> _startPosition =
				new System.Lazy<FieldAccessor<RotationComponent, UnityEngine.Vector3>>(() => FieldAccessor<RotationComponent, UnityEngine.Vector3>.Create("startPosition"));
		private static readonly System.Lazy<FieldAccessor<RotationComponent, CanvasHelper>> _canvas =
				new System.Lazy<FieldAccessor<RotationComponent, CanvasHelper>>(() => FieldAccessor<RotationComponent, CanvasHelper>.Create("canvas"));
		private static readonly System.Lazy<FieldAccessor<RotationComponent, float>> _currentRotation =
				new System.Lazy<FieldAccessor<RotationComponent, float>>(() => FieldAccessor<RotationComponent, float>.Create("currentRotation"));

		public static bool GetForceSetPosition(this RotationComponent __self) => _forceSetPosition.Value.GetValue(__self);
		public static void SetForceSetPosition(this RotationComponent __self, bool value) => _forceSetPosition.Value.SetValue(__self, value);
		public static Raft_Network GetNetwork(this RotationComponent __self) => _network.Value.GetValue(__self);
		public static void SetNetwork(this RotationComponent __self, Raft_Network value) => _network.Value.SetValue(__self, value);
		public static Network_Player GetLocalPlayer(this RotationComponent __self) => _localPlayer.Value.GetValue(__self);
		public static void SetLocalPlayer(this RotationComponent __self, Network_Player value) => _localPlayer.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetStartPosition(this RotationComponent __self) => _startPosition.Value.GetValue(__self);
		public static void SetStartPosition(this RotationComponent __self, UnityEngine.Vector3 value) => _startPosition.Value.SetValue(__self, value);
		public static CanvasHelper GetCanvas(this RotationComponent __self) => _canvas.Value.GetValue(__self);
		public static void SetCanvas(this RotationComponent __self, CanvasHelper value) => _canvas.Value.SetValue(__self, value);
		public static float GetCurrentRotation(this RotationComponent __self) => _currentRotation.Value.GetValue(__self);
		public static void SetCurrentRotation(this RotationComponent __self, float value) => _currentRotation.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<RotationComponent>> _Awake757602046 =
				new System.Lazy<MethodAccessor<RotationComponent>>(() => MethodAccessor<RotationComponent>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<RotationComponent>> _Start757602046 =
				new System.Lazy<MethodAccessor<RotationComponent>>(() => MethodAccessor<RotationComponent>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<RotationComponent>> _ForceResetPosition757602046 =
				new System.Lazy<MethodAccessor<RotationComponent>>(() => MethodAccessor<RotationComponent>.Create("ForceResetPosition"));
		private static readonly System.Lazy<MethodAccessor<RotationComponent>> _RotateNetworked3486905475 =
				new System.Lazy<MethodAccessor<RotationComponent>>(() => MethodAccessor<RotationComponent>.Create("RotateNetworked", typeof(float)));
		private static readonly System.Lazy<MethodAccessor<RotationComponent>> _Rotate3486905475 =
				new System.Lazy<MethodAccessor<RotationComponent>>(() => MethodAccessor<RotationComponent>.Create("Rotate", typeof(float)));
		private static readonly System.Lazy<MethodAccessor<RotationComponent>> _GetRotationFromAxis757602046 =
				new System.Lazy<MethodAccessor<RotationComponent>>(() => MethodAccessor<RotationComponent>.Create("GetRotationFromAxis"));

		public static void Awake(this RotationComponent __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this RotationComponent __self) => _Start757602046.Value.Invoke(__self);
		public static void ForceResetPosition(this RotationComponent __self) => _ForceResetPosition757602046.Value.Invoke(__self);
		public static void RotateNetworked(this RotationComponent __self, float degree) => _RotateNetworked3486905475.Value.Invoke(__self, degree);
		public static void Rotate(this RotationComponent __self, float degree) => _Rotate3486905475.Value.Invoke(__self, degree);
		public static float GetRotationFromAxis(this RotationComponent __self) => (float)_GetRotationFromAxis757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_RotationComponent_Auto
	{

		private static readonly System.Lazy<FieldAccessor<RotationComponent_Auto, float>> _networkSendRateSeconds =
				new System.Lazy<FieldAccessor<RotationComponent_Auto, float>>(() => FieldAccessor<RotationComponent_Auto, float>.Create("networkSendRateSeconds"));
		private static readonly System.Lazy<FieldAccessor<RotationComponent_Auto, float>> _clientSideMinimumPlayerDistanceToSnapToHostRotation =
				new System.Lazy<FieldAccessor<RotationComponent_Auto, float>>(() => FieldAccessor<RotationComponent_Auto, float>.Create("clientSideMinimumPlayerDistanceToSnapToHostRotation"));
		private static readonly System.Lazy<FieldAccessor<RotationComponent_Auto, float>> _lastSendTimeStamp =
				new System.Lazy<FieldAccessor<RotationComponent_Auto, float>>(() => FieldAccessor<RotationComponent_Auto, float>.Create("lastSendTimeStamp"));

		public static float GetNetworkSendRateSeconds(this RotationComponent_Auto __self) => _networkSendRateSeconds.Value.GetValue(__self);
		public static void SetNetworkSendRateSeconds(this RotationComponent_Auto __self, float value) => _networkSendRateSeconds.Value.SetValue(__self, value);
		public static float GetClientSideMinimumPlayerDistanceToSnapToHostRotation(this RotationComponent_Auto __self) => _clientSideMinimumPlayerDistanceToSnapToHostRotation.Value.GetValue(__self);
		public static void SetClientSideMinimumPlayerDistanceToSnapToHostRotation(this RotationComponent_Auto __self, float value) => _clientSideMinimumPlayerDistanceToSnapToHostRotation.Value.SetValue(__self, value);
		public static float GetLastSendTimeStamp(this RotationComponent_Auto __self) => _lastSendTimeStamp.Value.GetValue(__self);
		public static void SetLastSendTimeStamp(this RotationComponent_Auto __self, float value) => _lastSendTimeStamp.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<RotationComponent_Auto>> _Update757602046 =
				new System.Lazy<MethodAccessor<RotationComponent_Auto>>(() => MethodAccessor<RotationComponent_Auto>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<RotationComponent_Auto>> _HandleHostSending757602046 =
				new System.Lazy<MethodAccessor<RotationComponent_Auto>>(() => MethodAccessor<RotationComponent_Auto>.Create("HandleHostSending"));
		private static readonly System.Lazy<MethodAccessor<RotationComponent_Auto>> _GetRotationSpeed757602046 =
				new System.Lazy<MethodAccessor<RotationComponent_Auto>>(() => MethodAccessor<RotationComponent_Auto>.Create("GetRotationSpeed"));
		private static readonly System.Lazy<MethodAccessor<RotationComponent_Auto>> _HandleClientSideRotationRequest3472930089 =
				new System.Lazy<MethodAccessor<RotationComponent_Auto>>(() => MethodAccessor<RotationComponent_Auto>.Create("HandleClientSideRotationRequest", typeof(Message_RotationComponentSetRotation)));

		public static void Update(this RotationComponent_Auto __self) => _Update757602046.Value.Invoke(__self);
		public static void HandleHostSending(this RotationComponent_Auto __self) => _HandleHostSending757602046.Value.Invoke(__self);
		public static float GetRotationSpeed(this RotationComponent_Auto __self) => (float)_GetRotationSpeed757602046.Value.Invoke(__self);
		public static void HandleClientSideRotationRequest(this RotationComponent_Auto __self, Message_RotationComponentSetRotation msg) => _HandleClientSideRotationRequest3472930089.Value.Invoke(__self, msg);

	}

	public static class PrivateAccessor_Rotator
	{

		private static readonly System.Lazy<FieldAccessor<Rotator, float>> _speed =
				new System.Lazy<FieldAccessor<Rotator, float>>(() => FieldAccessor<Rotator, float>.Create("speed"));
		private static readonly System.Lazy<FieldAccessor<Rotator, UnityEngine.Vector3>> _axis =
				new System.Lazy<FieldAccessor<Rotator, UnityEngine.Vector3>>(() => FieldAccessor<Rotator, UnityEngine.Vector3>.Create("axis"));

		public static float GetSpeed(this Rotator __self) => _speed.Value.GetValue(__self);
		public static void SetSpeed(this Rotator __self, float value) => _speed.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetAxis(this Rotator __self) => _axis.Value.GetValue(__self);
		public static void SetAxis(this Rotator __self, UnityEngine.Vector3 value) => _axis.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Rotator>> _Update757602046 =
				new System.Lazy<MethodAccessor<Rotator>>(() => MethodAccessor<Rotator>.Create("Update"));

		public static void Update(this Rotator __self) => _Update757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_ScreenEffectManager
	{

		private static readonly System.Lazy<MethodAccessor<ScreenEffectManager>> _Awake757602046 =
				new System.Lazy<MethodAccessor<ScreenEffectManager>>(() => MethodAccessor<ScreenEffectManager>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<ScreenEffectManager>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<ScreenEffectManager>>(() => MethodAccessor<ScreenEffectManager>.Create("OnDestroy"));

		public static void Awake(this ScreenEffectManager __self) => _Awake757602046.Value.Invoke(__self);
		public static void OnDestroy(this ScreenEffectManager __self) => _OnDestroy757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_ScreenEffect
	{

		private static readonly System.Lazy<FieldAccessor<ScreenEffect, float>> _alpha =
				new System.Lazy<FieldAccessor<ScreenEffect, float>>(() => FieldAccessor<ScreenEffect, float>.Create("alpha"));

		public static float GetAlpha(this ScreenEffect __self) => _alpha.Value.GetValue(__self);
		public static void SetAlpha(this ScreenEffect __self, float value) => _alpha.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<ScreenEffect>> _EnableEffect3473969385 =
				new System.Lazy<MethodAccessor<ScreenEffect>>(() => MethodAccessor<ScreenEffect>.Create("EnableEffect", typeof(SO_ScreenEffect)));
		private static readonly System.Lazy<MethodAccessor<ScreenEffect>> _Tick757602046 =
				new System.Lazy<MethodAccessor<ScreenEffect>>(() => MethodAccessor<ScreenEffect>.Create("Tick"));

		public static System.Collections.IEnumerator EnableEffect(this ScreenEffect __self, SO_ScreenEffect screenEffectAsset) => (System.Collections.IEnumerator)_EnableEffect3473969385.Value.Invoke(__self, screenEffectAsset);
		public static void Tick(this ScreenEffect __self) => _Tick757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_ScreenEffect_Image
	{

		private static readonly System.Lazy<MethodAccessor<ScreenEffect_Image>> _Tick757602046 =
				new System.Lazy<MethodAccessor<ScreenEffect_Image>>(() => MethodAccessor<ScreenEffect_Image>.Create("Tick"));

		public static void Tick(this ScreenEffect_Image __self) => _Tick757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_ScriptToggler
	{

		private static readonly System.Lazy<MethodAccessor<ScriptToggler>> _Update757602046 =
				new System.Lazy<MethodAccessor<ScriptToggler>>(() => MethodAccessor<ScriptToggler>.Create("Update"));

		public static void Update(this ScriptToggler __self) => _Update757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_ShrinkAndDestroy
	{

		private static readonly System.Lazy<FieldAccessor<ShrinkAndDestroy, bool>> _initialized =
				new System.Lazy<FieldAccessor<ShrinkAndDestroy, bool>>(() => FieldAccessor<ShrinkAndDestroy, bool>.Create("initialized"));

		public static bool GetInitialized(this ShrinkAndDestroy __self) => _initialized.Value.GetValue(__self);
		public static void SetInitialized(this ShrinkAndDestroy __self, bool value) => _initialized.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<ShrinkAndDestroy>> _Update757602046 =
				new System.Lazy<MethodAccessor<ShrinkAndDestroy>>(() => MethodAccessor<ShrinkAndDestroy>.Create("Update"));

		public static void Update(this ShrinkAndDestroy __self) => _Update757602046.Value.Invoke(__self);

	}

	public static class Private_SingletonGeneric<T> where T : UnityEngine.MonoBehaviour
	{

		private static readonly System.Lazy<StaticFieldAccessor<T>> _singleton =
				new System.Lazy<StaticFieldAccessor<T>>(() => StaticFieldAccessor<T>.Create(typeof(SingletonGeneric<T>), "singleton"));

		public static T GetSingleton() => _singleton.Value.GetValue();
		public static void SetSingleton(T value) => _singleton.Value.SetValue(value);

	}

	public static class PrivateAccessor_TerrainDataCopySettings
	{

		private static readonly System.Lazy<MethodAccessor<TerrainDataCopySettings>> _DoesDetailExists680279153 =
				new System.Lazy<MethodAccessor<TerrainDataCopySettings>>(() => MethodAccessor<TerrainDataCopySettings>.Create("DoesDetailExists", typeof(UnityEngine.DetailPrototype), typeof(UnityEngine.DetailPrototype[])));
		private static readonly System.Lazy<MethodAccessor<TerrainDataCopySettings>> _GetMatchingDetail680279153 =
				new System.Lazy<MethodAccessor<TerrainDataCopySettings>>(() => MethodAccessor<TerrainDataCopySettings>.Create("GetMatchingDetail", typeof(UnityEngine.DetailPrototype), typeof(UnityEngine.DetailPrototype[])));

		public static bool DoesDetailExists(this TerrainDataCopySettings __self, UnityEngine.DetailPrototype detail, UnityEngine.DetailPrototype[] details) => (bool)_DoesDetailExists680279153.Value.Invoke(__self, detail, details);
		public static UnityEngine.DetailPrototype GetMatchingDetail(this TerrainDataCopySettings __self, UnityEngine.DetailPrototype detail, UnityEngine.DetailPrototype[] details) => (UnityEngine.DetailPrototype)_GetMatchingDetail680279153.Value.Invoke(__self, detail, details);

	}

	public static class PrivateAccessor_TerrainDataSetter
	{

		private static readonly System.Lazy<MethodAccessor<TerrainDataSetter>> _OnEnable757602046 =
				new System.Lazy<MethodAccessor<TerrainDataSetter>>(() => MethodAccessor<TerrainDataSetter>.Create("OnEnable"));

		public static void OnEnable(this TerrainDataSetter __self) => _OnEnable757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_TimerEventer
	{

		private static readonly System.Lazy<FieldAccessor<TimerEventer, float>> _cooldown =
				new System.Lazy<FieldAccessor<TimerEventer, float>>(() => FieldAccessor<TimerEventer, float>.Create("cooldown"));
		private static readonly System.Lazy<FieldAccessor<TimerEventer, float>> _cooldownOffsetMin =
				new System.Lazy<FieldAccessor<TimerEventer, float>>(() => FieldAccessor<TimerEventer, float>.Create("cooldownOffsetMin"));
		private static readonly System.Lazy<FieldAccessor<TimerEventer, float>> _cooldownOffsetMax =
				new System.Lazy<FieldAccessor<TimerEventer, float>>(() => FieldAccessor<TimerEventer, float>.Create("cooldownOffsetMax"));
		private static readonly System.Lazy<FieldAccessor<TimerEventer, float>> _progress =
				new System.Lazy<FieldAccessor<TimerEventer, float>>(() => FieldAccessor<TimerEventer, float>.Create("progress"));
		private static readonly System.Lazy<FieldAccessor<TimerEventer, float>> _originCooldown =
				new System.Lazy<FieldAccessor<TimerEventer, float>>(() => FieldAccessor<TimerEventer, float>.Create("originCooldown"));
		private static readonly System.Lazy<FieldAccessor<TimerEventer, bool>> _initialized =
				new System.Lazy<FieldAccessor<TimerEventer, bool>>(() => FieldAccessor<TimerEventer, bool>.Create("initialized"));

		public static float GetCooldown(this TimerEventer __self) => _cooldown.Value.GetValue(__self);
		public static void SetCooldown(this TimerEventer __self, float value) => _cooldown.Value.SetValue(__self, value);
		public static float GetCooldownOffsetMin(this TimerEventer __self) => _cooldownOffsetMin.Value.GetValue(__self);
		public static void SetCooldownOffsetMin(this TimerEventer __self, float value) => _cooldownOffsetMin.Value.SetValue(__self, value);
		public static float GetCooldownOffsetMax(this TimerEventer __self) => _cooldownOffsetMax.Value.GetValue(__self);
		public static void SetCooldownOffsetMax(this TimerEventer __self, float value) => _cooldownOffsetMax.Value.SetValue(__self, value);
		public static float GetProgress(this TimerEventer __self) => _progress.Value.GetValue(__self);
		public static void SetProgress(this TimerEventer __self, float value) => _progress.Value.SetValue(__self, value);
		public static float GetOriginCooldown(this TimerEventer __self) => _originCooldown.Value.GetValue(__self);
		public static void SetOriginCooldown(this TimerEventer __self, float value) => _originCooldown.Value.SetValue(__self, value);
		public static bool GetInitialized(this TimerEventer __self) => _initialized.Value.GetValue(__self);
		public static void SetInitialized(this TimerEventer __self, bool value) => _initialized.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<TimerEventer>> _SendOnTimerReached757602046 =
				new System.Lazy<MethodAccessor<TimerEventer>>(() => MethodAccessor<TimerEventer>.Create("SendOnTimerReached"));
		private static readonly System.Lazy<MethodAccessor<TimerEventer>> _SendOnTimerReset757602046 =
				new System.Lazy<MethodAccessor<TimerEventer>>(() => MethodAccessor<TimerEventer>.Create("SendOnTimerReset"));

		public static void SendOnTimerReached(this TimerEventer __self) => _SendOnTimerReached757602046.Value.Invoke(__self);
		public static void SendOnTimerReset(this TimerEventer __self) => _SendOnTimerReset757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_TriggerBoxAchievementUnlocker
	{

		private static readonly System.Lazy<FieldAccessor<TriggerBoxAchievementUnlocker, int>> _lastSetBits =
				new System.Lazy<FieldAccessor<TriggerBoxAchievementUnlocker, int>>(() => FieldAccessor<TriggerBoxAchievementUnlocker, int>.Create("lastSetBits"));

		public static int GetLastSetBits(this TriggerBoxAchievementUnlocker __self) => _lastSetBits.Value.GetValue(__self);
		public static void SetLastSetBits(this TriggerBoxAchievementUnlocker __self, int value) => _lastSetBits.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<TriggerBoxAchievementUnlocker>> _Start757602046 =
				new System.Lazy<MethodAccessor<TriggerBoxAchievementUnlocker>>(() => MethodAccessor<TriggerBoxAchievementUnlocker>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<TriggerBoxAchievementUnlocker>> _Update757602046 =
				new System.Lazy<MethodAccessor<TriggerBoxAchievementUnlocker>>(() => MethodAccessor<TriggerBoxAchievementUnlocker>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<TriggerBoxAchievementUnlocker>> _CheckAchievement3486186818 =
				new System.Lazy<MethodAccessor<TriggerBoxAchievementUnlocker>>(() => MethodAccessor<TriggerBoxAchievementUnlocker>.Create("CheckAchievement", typeof(int)));

		public static void Start(this TriggerBoxAchievementUnlocker __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this TriggerBoxAchievementUnlocker __self) => _Update757602046.Value.Invoke(__self);
		public static void CheckAchievement(this TriggerBoxAchievementUnlocker __self, int setBits) => _CheckAchievement3486186818.Value.Invoke(__self, setBits);

	}

	public static class Private_TriggerBoxAchievementUnlocker
	{

		private static readonly System.Lazy<StaticMethodAccessor> _BitIsSet1217664359 =
				new System.Lazy<StaticMethodAccessor>(() => StaticMethodAccessor.Create(typeof(TriggerBoxAchievementUnlocker), "BitIsSet", typeof(ulong), typeof(int)));

		public static bool BitIsSet(ulong flags, int bit) => (bool)_BitIsSet1217664359.Value.Invoke(flags, bit);

	}

	public static class PrivateAccessor_DamageArea
	{

		private static readonly System.Lazy<FieldAccessor<DamageArea, int>> _damage =
				new System.Lazy<FieldAccessor<DamageArea, int>>(() => FieldAccessor<DamageArea, int>.Create("damage"));
		private static readonly System.Lazy<FieldAccessor<DamageArea, SO_Buff>> _debuff =
				new System.Lazy<FieldAccessor<DamageArea, SO_Buff>>(() => FieldAccessor<DamageArea, SO_Buff>.Create("debuff"));
		private static readonly System.Lazy<FieldAccessor<DamageArea, EntityType>> _damageType =
				new System.Lazy<FieldAccessor<DamageArea, EntityType>>(() => FieldAccessor<DamageArea, EntityType>.Create("damageType"));
		private static readonly System.Lazy<FieldAccessor<DamageArea, string>> _eventRef_DamageSound =
				new System.Lazy<FieldAccessor<DamageArea, string>>(() => FieldAccessor<DamageArea, string>.Create("eventRef_DamageSound"));
		private static readonly System.Lazy<FieldAccessor<DamageArea, Network_Host>> _network_Host =
				new System.Lazy<FieldAccessor<DamageArea, Network_Host>>(() => FieldAccessor<DamageArea, Network_Host>.Create("network_Host"));
		private static readonly System.Lazy<FieldAccessor<DamageArea, SoundManager>> _soundManager =
				new System.Lazy<FieldAccessor<DamageArea, SoundManager>>(() => FieldAccessor<DamageArea, SoundManager>.Create("soundManager"));

		public static int GetDamage(this DamageArea __self) => _damage.Value.GetValue(__self);
		public static void SetDamage(this DamageArea __self, int value) => _damage.Value.SetValue(__self, value);
		public static SO_Buff GetDebuff(this DamageArea __self) => _debuff.Value.GetValue(__self);
		public static void SetDebuff(this DamageArea __self, SO_Buff value) => _debuff.Value.SetValue(__self, value);
		public static EntityType GetDamageType(this DamageArea __self) => _damageType.Value.GetValue(__self);
		public static void SetDamageType(this DamageArea __self, EntityType value) => _damageType.Value.SetValue(__self, value);
		public static string GetEventRef_DamageSound(this DamageArea __self) => _eventRef_DamageSound.Value.GetValue(__self);
		public static void SetEventRef_DamageSound(this DamageArea __self, string value) => _eventRef_DamageSound.Value.SetValue(__self, value);
		public static Network_Host GetNetwork_Host(this DamageArea __self) => _network_Host.Value.GetValue(__self);
		public static void SetNetwork_Host(this DamageArea __self, Network_Host value) => _network_Host.Value.SetValue(__self, value);
		public static SoundManager GetSoundManager(this DamageArea __self) => _soundManager.Value.GetValue(__self);
		public static void SetSoundManager(this DamageArea __self, SoundManager value) => _soundManager.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<DamageArea>> _Start757602046 =
				new System.Lazy<MethodAccessor<DamageArea>>(() => MethodAccessor<DamageArea>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<DamageArea>> _DamageEntitiesInArea757602046 =
				new System.Lazy<MethodAccessor<DamageArea>>(() => MethodAccessor<DamageArea>.Create("DamageEntitiesInArea"));
		private static readonly System.Lazy<MethodAccessor<DamageArea>> _DamageEntity3461878659 =
				new System.Lazy<MethodAccessor<DamageArea>>(() => MethodAccessor<DamageArea>.Create("DamageEntity", typeof(Network_Player)));
		private static readonly System.Lazy<MethodAccessor<DamageArea>> _OnAddNewPlayer3461878659 =
				new System.Lazy<MethodAccessor<DamageArea>>(() => MethodAccessor<DamageArea>.Create("OnAddNewPlayer", typeof(Network_Player)));

		public static void Start(this DamageArea __self) => _Start757602046.Value.Invoke(__self);
		public static void DamageEntitiesInArea(this DamageArea __self) => _DamageEntitiesInArea757602046.Value.Invoke(__self);
		public static void DamageEntity(this DamageArea __self, Network_Player player) => _DamageEntity3461878659.Value.Invoke(__self, player);
		public static void OnAddNewPlayer(this DamageArea __self, Network_Player player) => _OnAddNewPlayer3461878659.Value.Invoke(__self, player);

	}

	public static class PrivateAccessor_DamageArea_DamageOnce
	{

		private static readonly System.Lazy<FieldAccessor<DamageArea_DamageOnce, System.Collections.Generic.List<Network_Entity>>> _affectedEntitiesInArea =
				new System.Lazy<FieldAccessor<DamageArea_DamageOnce, System.Collections.Generic.List<Network_Entity>>>(() => FieldAccessor<DamageArea_DamageOnce, System.Collections.Generic.List<Network_Entity>>.Create("affectedEntitiesInArea"));

		public static System.Collections.Generic.List<Network_Entity> GetAffectedEntitiesInArea(this DamageArea_DamageOnce __self) => _affectedEntitiesInArea.Value.GetValue(__self);
		public static void SetAffectedEntitiesInArea(this DamageArea_DamageOnce __self, System.Collections.Generic.List<Network_Entity> value) => _affectedEntitiesInArea.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<DamageArea_DamageOnce>> _DamageEntity3461878659 =
				new System.Lazy<MethodAccessor<DamageArea_DamageOnce>>(() => MethodAccessor<DamageArea_DamageOnce>.Create("DamageEntity", typeof(Network_Player)));

		public static void DamageEntity(this DamageArea_DamageOnce __self, Network_Player player) => _DamageEntity3461878659.Value.Invoke(__self, player);

	}

	public static class PrivateAccessor_DamageArea_OnOff
	{

		private static readonly System.Lazy<MethodAccessor<DamageArea_OnOff>> _Awake757602046 =
				new System.Lazy<MethodAccessor<DamageArea_OnOff>>(() => MethodAccessor<DamageArea_OnOff>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<DamageArea_OnOff>> _Activate757602046 =
				new System.Lazy<MethodAccessor<DamageArea_OnOff>>(() => MethodAccessor<DamageArea_OnOff>.Create("Activate"));
		private static readonly System.Lazy<MethodAccessor<DamageArea_OnOff>> _Disable757602046 =
				new System.Lazy<MethodAccessor<DamageArea_OnOff>>(() => MethodAccessor<DamageArea_OnOff>.Create("Disable"));
		private static readonly System.Lazy<MethodAccessor<DamageArea_OnOff>> _SetAreasActive3450040886 =
				new System.Lazy<MethodAccessor<DamageArea_OnOff>>(() => MethodAccessor<DamageArea_OnOff>.Create("SetAreasActive", typeof(bool)));

		public static void Awake(this DamageArea_OnOff __self) => _Awake757602046.Value.Invoke(__self);
		public static void Activate(this DamageArea_OnOff __self) => _Activate757602046.Value.Invoke(__self);
		public static void Disable(this DamageArea_OnOff __self) => _Disable757602046.Value.Invoke(__self);
		public static void SetAreasActive(this DamageArea_OnOff __self, bool value) => _SetAreasActive3450040886.Value.Invoke(__self, value);

	}

	public static class PrivateAccessor_DamageArea_Tick
	{

		private static readonly System.Lazy<FieldAccessor<DamageArea_Tick, bool>> _damageOnEnter =
				new System.Lazy<FieldAccessor<DamageArea_Tick, bool>>(() => FieldAccessor<DamageArea_Tick, bool>.Create("damageOnEnter"));
		private static readonly System.Lazy<FieldAccessor<DamageArea_Tick, float>> _tickInterval =
				new System.Lazy<FieldAccessor<DamageArea_Tick, float>>(() => FieldAccessor<DamageArea_Tick, float>.Create("tickInterval"));
		private static readonly System.Lazy<FieldAccessor<DamageArea_Tick, float>> _timer =
				new System.Lazy<FieldAccessor<DamageArea_Tick, float>>(() => FieldAccessor<DamageArea_Tick, float>.Create("timer"));

		public static bool GetDamageOnEnter(this DamageArea_Tick __self) => _damageOnEnter.Value.GetValue(__self);
		public static void SetDamageOnEnter(this DamageArea_Tick __self, bool value) => _damageOnEnter.Value.SetValue(__self, value);
		public static float GetTickInterval(this DamageArea_Tick __self) => _tickInterval.Value.GetValue(__self);
		public static void SetTickInterval(this DamageArea_Tick __self, float value) => _tickInterval.Value.SetValue(__self, value);
		public static float GetTimer(this DamageArea_Tick __self) => _timer.Value.GetValue(__self);
		public static void SetTimer(this DamageArea_Tick __self, float value) => _timer.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<DamageArea_Tick>> _Update757602046 =
				new System.Lazy<MethodAccessor<DamageArea_Tick>>(() => MethodAccessor<DamageArea_Tick>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<DamageArea_Tick>> _OnAddNewPlayer3461878659 =
				new System.Lazy<MethodAccessor<DamageArea_Tick>>(() => MethodAccessor<DamageArea_Tick>.Create("OnAddNewPlayer", typeof(Network_Player)));
		private static readonly System.Lazy<MethodAccessor<DamageArea_Tick>> _OnRemovePlayer3461878659 =
				new System.Lazy<MethodAccessor<DamageArea_Tick>>(() => MethodAccessor<DamageArea_Tick>.Create("OnRemovePlayer", typeof(Network_Player)));
		private static readonly System.Lazy<MethodAccessor<DamageArea_Tick>> _Tick757602046 =
				new System.Lazy<MethodAccessor<DamageArea_Tick>>(() => MethodAccessor<DamageArea_Tick>.Create("Tick"));

		public static void Update(this DamageArea_Tick __self) => _Update757602046.Value.Invoke(__self);
		public static void OnAddNewPlayer(this DamageArea_Tick __self, Network_Player player) => _OnAddNewPlayer3461878659.Value.Invoke(__self, player);
		public static void OnRemovePlayer(this DamageArea_Tick __self, Network_Player player) => _OnRemovePlayer3461878659.Value.Invoke(__self, player);
		public static void Tick(this DamageArea_Tick __self) => _Tick757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_DamageBox
	{

		private static readonly System.Lazy<FieldAccessor<DamageBox, bool>> _canDamage =
				new System.Lazy<FieldAccessor<DamageBox, bool>>(() => FieldAccessor<DamageBox, bool>.Create("canDamage"));
		private static readonly System.Lazy<FieldAccessor<DamageBox, UnityEngine.Collider[]>> _colliders =
				new System.Lazy<FieldAccessor<DamageBox, UnityEngine.Collider[]>>(() => FieldAccessor<DamageBox, UnityEngine.Collider[]>.Create("colliders"));
		private static readonly System.Lazy<FieldAccessor<DamageBox, int>> _damage =
				new System.Lazy<FieldAccessor<DamageBox, int>>(() => FieldAccessor<DamageBox, int>.Create("damage"));
		private static readonly System.Lazy<FieldAccessor<DamageBox, int>> _actualDamage =
				new System.Lazy<FieldAccessor<DamageBox, int>>(() => FieldAccessor<DamageBox, int>.Create("actualDamage"));
		private static readonly System.Lazy<FieldAccessor<DamageBox, string>> _entityTag =
				new System.Lazy<FieldAccessor<DamageBox, string>>(() => FieldAccessor<DamageBox, string>.Create("entityTag"));
		private static readonly System.Lazy<FieldAccessor<DamageBox, EntityType>> _entityType =
				new System.Lazy<FieldAccessor<DamageBox, EntityType>>(() => FieldAccessor<DamageBox, EntityType>.Create("entityType"));
		private static readonly System.Lazy<FieldAccessor<DamageBox, bool>> _disableDamageOnDamageDealt =
				new System.Lazy<FieldAccessor<DamageBox, bool>>(() => FieldAccessor<DamageBox, bool>.Create("disableDamageOnDamageDealt"));
		private static readonly System.Lazy<FieldAccessor<DamageBox, bool>> _dealDamageInPeacefull =
				new System.Lazy<FieldAccessor<DamageBox, bool>>(() => FieldAccessor<DamageBox, bool>.Create("dealDamageInPeacefull"));
		private static readonly System.Lazy<FieldAccessor<DamageBox, float>> _resetCanDamageTime =
				new System.Lazy<FieldAccessor<DamageBox, float>>(() => FieldAccessor<DamageBox, float>.Create("resetCanDamageTime"));
		private static readonly System.Lazy<FieldAccessor<DamageBox, UnityEngine.ParticleSystem>> _damageParticles =
				new System.Lazy<FieldAccessor<DamageBox, UnityEngine.ParticleSystem>>(() => FieldAccessor<DamageBox, UnityEngine.ParticleSystem>.Create("damageParticles"));
		private static readonly System.Lazy<FieldAccessor<DamageBox, string>> _eventRef_damage =
				new System.Lazy<FieldAccessor<DamageBox, string>>(() => FieldAccessor<DamageBox, string>.Create("eventRef_damage"));
		private static readonly System.Lazy<FieldAccessor<DamageBox, Raft_Network>> _network =
				new System.Lazy<FieldAccessor<DamageBox, Raft_Network>>(() => FieldAccessor<DamageBox, Raft_Network>.Create("network"));
		private static readonly System.Lazy<FieldAccessor<DamageBox, AI_NetworkBehaviourType>> _aiTypeBase =
				new System.Lazy<FieldAccessor<DamageBox, AI_NetworkBehaviourType>>(() => FieldAccessor<DamageBox, AI_NetworkBehaviourType>.Create("aiTypeBase"));

		public static bool GetCanDamage(this DamageBox __self) => _canDamage.Value.GetValue(__self);
		public static void SetCanDamage(this DamageBox __self, bool value) => _canDamage.Value.SetValue(__self, value);
		public static UnityEngine.Collider[] GetColliders(this DamageBox __self) => _colliders.Value.GetValue(__self);
		public static void SetColliders(this DamageBox __self, UnityEngine.Collider[] value) => _colliders.Value.SetValue(__self, value);
		public static int GetDamage(this DamageBox __self) => _damage.Value.GetValue(__self);
		public static void SetDamage(this DamageBox __self, int value) => _damage.Value.SetValue(__self, value);
		public static int GetActualDamage(this DamageBox __self) => _actualDamage.Value.GetValue(__self);
		public static void SetActualDamage(this DamageBox __self, int value) => _actualDamage.Value.SetValue(__self, value);
		public static string GetEntityTag(this DamageBox __self) => _entityTag.Value.GetValue(__self);
		public static void SetEntityTag(this DamageBox __self, string value) => _entityTag.Value.SetValue(__self, value);
		public static EntityType GetEntityType(this DamageBox __self) => _entityType.Value.GetValue(__self);
		public static void SetEntityType(this DamageBox __self, EntityType value) => _entityType.Value.SetValue(__self, value);
		public static bool GetDisableDamageOnDamageDealt(this DamageBox __self) => _disableDamageOnDamageDealt.Value.GetValue(__self);
		public static void SetDisableDamageOnDamageDealt(this DamageBox __self, bool value) => _disableDamageOnDamageDealt.Value.SetValue(__self, value);
		public static bool GetDealDamageInPeacefull(this DamageBox __self) => _dealDamageInPeacefull.Value.GetValue(__self);
		public static void SetDealDamageInPeacefull(this DamageBox __self, bool value) => _dealDamageInPeacefull.Value.SetValue(__self, value);
		public static float GetResetCanDamageTime(this DamageBox __self) => _resetCanDamageTime.Value.GetValue(__self);
		public static void SetResetCanDamageTime(this DamageBox __self, float value) => _resetCanDamageTime.Value.SetValue(__self, value);
		public static UnityEngine.ParticleSystem GetDamageParticles(this DamageBox __self) => _damageParticles.Value.GetValue(__self);
		public static void SetDamageParticles(this DamageBox __self, UnityEngine.ParticleSystem value) => _damageParticles.Value.SetValue(__self, value);
		public static string GetEventRef_damage(this DamageBox __self) => _eventRef_damage.Value.GetValue(__self);
		public static void SetEventRef_damage(this DamageBox __self, string value) => _eventRef_damage.Value.SetValue(__self, value);
		public static Raft_Network GetNetwork(this DamageBox __self) => _network.Value.GetValue(__self);
		public static void SetNetwork(this DamageBox __self, Raft_Network value) => _network.Value.SetValue(__self, value);
		public static AI_NetworkBehaviourType GetAiTypeBase(this DamageBox __self) => _aiTypeBase.Value.GetValue(__self);
		public static void SetAiTypeBase(this DamageBox __self, AI_NetworkBehaviourType value) => _aiTypeBase.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<DamageBox>> _Start757602046 =
				new System.Lazy<MethodAccessor<DamageBox>>(() => MethodAccessor<DamageBox>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<DamageBox>> _OnTriggerEnter3468606003 =
				new System.Lazy<MethodAccessor<DamageBox>>(() => MethodAccessor<DamageBox>.Create("OnTriggerEnter", typeof(UnityEngine.Collider)));
		private static readonly System.Lazy<MethodAccessor<DamageBox>> _DamageEntity3468606003 =
				new System.Lazy<MethodAccessor<DamageBox>>(() => MethodAccessor<DamageBox>.Create("DamageEntity", typeof(UnityEngine.Collider)));
		private static readonly System.Lazy<MethodAccessor<DamageBox>> _HandleDamagePlayer3461878659 =
				new System.Lazy<MethodAccessor<DamageBox>>(() => MethodAccessor<DamageBox>.Create("HandleDamagePlayer", typeof(Network_Player)));
		private static readonly System.Lazy<MethodAccessor<DamageBox>> _ResetCanDamage757602046 =
				new System.Lazy<MethodAccessor<DamageBox>>(() => MethodAccessor<DamageBox>.Create("ResetCanDamage"));

		public static void Start(this DamageBox __self) => _Start757602046.Value.Invoke(__self);
		public static void OnTriggerEnter(this DamageBox __self, UnityEngine.Collider other) => _OnTriggerEnter3468606003.Value.Invoke(__self, other);
		public static bool DamageEntity(this DamageBox __self, UnityEngine.Collider col) => (bool)_DamageEntity3468606003.Value.Invoke(__self, col);
		public static bool HandleDamagePlayer(this DamageBox __self, Network_Player player) => (bool)_HandleDamagePlayer3461878659.Value.Invoke(__self, player);
		public static void ResetCanDamage(this DamageBox __self) => _ResetCanDamage757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_DamageBoxComponent
	{

		private static readonly System.Lazy<FieldAccessor<DamageBoxComponent, DamageBox>> _damageBox =
				new System.Lazy<FieldAccessor<DamageBoxComponent, DamageBox>>(() => FieldAccessor<DamageBoxComponent, DamageBox>.Create("damageBox"));

		public static DamageBox GetDamageBox(this DamageBoxComponent __self) => _damageBox.Value.GetValue(__self);
		public static void SetDamageBox(this DamageBoxComponent __self, DamageBox value) => _damageBox.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<DamageBoxComponent>> _OnEnable757602046 =
				new System.Lazy<MethodAccessor<DamageBoxComponent>>(() => MethodAccessor<DamageBoxComponent>.Create("OnEnable"));
		private static readonly System.Lazy<MethodAccessor<DamageBoxComponent>> _OnDisable757602046 =
				new System.Lazy<MethodAccessor<DamageBoxComponent>>(() => MethodAccessor<DamageBoxComponent>.Create("OnDisable"));
		private static readonly System.Lazy<MethodAccessor<DamageBoxComponent>> _OnDamageBoxDamagePlayer3461878659 =
				new System.Lazy<MethodAccessor<DamageBoxComponent>>(() => MethodAccessor<DamageBoxComponent>.Create("OnDamageBoxDamagePlayer", typeof(Network_Player)));

		public static void OnEnable(this DamageBoxComponent __self) => _OnEnable757602046.Value.Invoke(__self);
		public static void OnDisable(this DamageBoxComponent __self) => _OnDisable757602046.Value.Invoke(__self);
		public static void OnDamageBoxDamagePlayer(this DamageBoxComponent __self, Network_Player player) => _OnDamageBoxDamagePlayer3461878659.Value.Invoke(__self, player);

	}

	public static class PrivateAccessor_DamageBoxComponent_Knockback
	{

		private static readonly System.Lazy<FieldAccessor<DamageBoxComponent_Knockback, float>> _knockbackMultiplier =
				new System.Lazy<FieldAccessor<DamageBoxComponent_Knockback, float>>(() => FieldAccessor<DamageBoxComponent_Knockback, float>.Create("knockbackMultiplier"));
		private static readonly System.Lazy<FieldAccessor<DamageBoxComponent_Knockback, float>> _resetPlayerGroundedTimer =
				new System.Lazy<FieldAccessor<DamageBoxComponent_Knockback, float>>(() => FieldAccessor<DamageBoxComponent_Knockback, float>.Create("resetPlayerGroundedTimer"));
		private static readonly System.Lazy<FieldAccessor<DamageBoxComponent_Knockback, bool>> _knockbackIsAdditive =
				new System.Lazy<FieldAccessor<DamageBoxComponent_Knockback, bool>>(() => FieldAccessor<DamageBoxComponent_Knockback, bool>.Create("knockbackIsAdditive"));
		private static readonly System.Lazy<FieldAccessor<DamageBoxComponent_Knockback, bool>> _directionIsRelativeToPlayer =
				new System.Lazy<FieldAccessor<DamageBoxComponent_Knockback, bool>>(() => FieldAccessor<DamageBoxComponent_Knockback, bool>.Create("directionIsRelativeToPlayer"));
		private static readonly System.Lazy<FieldAccessor<DamageBoxComponent_Knockback, UnityEngine.Vector3>> _localKnockbackDirection =
				new System.Lazy<FieldAccessor<DamageBoxComponent_Knockback, UnityEngine.Vector3>>(() => FieldAccessor<DamageBoxComponent_Knockback, UnityEngine.Vector3>.Create("localKnockbackDirection"));

		public static float GetKnockbackMultiplier(this DamageBoxComponent_Knockback __self) => _knockbackMultiplier.Value.GetValue(__self);
		public static void SetKnockbackMultiplier(this DamageBoxComponent_Knockback __self, float value) => _knockbackMultiplier.Value.SetValue(__self, value);
		public static float GetResetPlayerGroundedTimer(this DamageBoxComponent_Knockback __self) => _resetPlayerGroundedTimer.Value.GetValue(__self);
		public static void SetResetPlayerGroundedTimer(this DamageBoxComponent_Knockback __self, float value) => _resetPlayerGroundedTimer.Value.SetValue(__self, value);
		public static bool GetKnockbackIsAdditive(this DamageBoxComponent_Knockback __self) => _knockbackIsAdditive.Value.GetValue(__self);
		public static void SetKnockbackIsAdditive(this DamageBoxComponent_Knockback __self, bool value) => _knockbackIsAdditive.Value.SetValue(__self, value);
		public static bool GetDirectionIsRelativeToPlayer(this DamageBoxComponent_Knockback __self) => _directionIsRelativeToPlayer.Value.GetValue(__self);
		public static void SetDirectionIsRelativeToPlayer(this DamageBoxComponent_Knockback __self, bool value) => _directionIsRelativeToPlayer.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetLocalKnockbackDirection(this DamageBoxComponent_Knockback __self) => _localKnockbackDirection.Value.GetValue(__self);
		public static void SetLocalKnockbackDirection(this DamageBoxComponent_Knockback __self, UnityEngine.Vector3 value) => _localKnockbackDirection.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<DamageBoxComponent_Knockback>> _OnDamageBoxDamagePlayer3461878659 =
				new System.Lazy<MethodAccessor<DamageBoxComponent_Knockback>>(() => MethodAccessor<DamageBoxComponent_Knockback>.Create("OnDamageBoxDamagePlayer", typeof(Network_Player)));

		public static void OnDamageBoxDamagePlayer(this DamageBoxComponent_Knockback __self, Network_Player player) => _OnDamageBoxDamagePlayer3461878659.Value.Invoke(__self, player);

	}

	public static class PrivateAccessor_DamageBox_Networked
	{

		private static readonly System.Lazy<MethodAccessor<DamageBox_Networked>> _HandleDamagePlayer3461878659 =
				new System.Lazy<MethodAccessor<DamageBox_Networked>>(() => MethodAccessor<DamageBox_Networked>.Create("HandleDamagePlayer", typeof(Network_Player)));
		private static readonly System.Lazy<MethodAccessor<DamageBox_Networked>> _SendMessageNetworkedHit3461878659 =
				new System.Lazy<MethodAccessor<DamageBox_Networked>>(() => MethodAccessor<DamageBox_Networked>.Create("SendMessageNetworkedHit", typeof(Network_Player)));

		public static bool HandleDamagePlayer(this DamageBox_Networked __self, Network_Player player) => (bool)_HandleDamagePlayer3461878659.Value.Invoke(__self, player);
		public static void SendMessageNetworkedHit(this DamageBox_Networked __self, Network_Player entity) => _SendMessageNetworkedHit3461878659.Value.Invoke(__self, entity);

	}

	public static class PrivateAccessor_DamageBox_Networked_AI
	{

		private static readonly System.Lazy<FieldAccessor<DamageBox_Networked_AI, AI_NetworkBehaviourType>> _aiType =
				new System.Lazy<FieldAccessor<DamageBox_Networked_AI, AI_NetworkBehaviourType>>(() => FieldAccessor<DamageBox_Networked_AI, AI_NetworkBehaviourType>.Create("aiType"));

		public static AI_NetworkBehaviourType GetAiType(this DamageBox_Networked_AI __self) => _aiType.Value.GetValue(__self);
		public static void SetAiType(this DamageBox_Networked_AI __self, AI_NetworkBehaviourType value) => _aiType.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<DamageBox_Networked_AI>> _Start757602046 =
				new System.Lazy<MethodAccessor<DamageBox_Networked_AI>>(() => MethodAccessor<DamageBox_Networked_AI>.Create("Start"));

		public static void Start(this DamageBox_Networked_AI __self) => _Start757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_TriggerBoxAction
	{

		private static readonly System.Lazy<MethodAccessor<TriggerBoxAction>> _SendOnTriggerAction3468606003 =
				new System.Lazy<MethodAccessor<TriggerBoxAction>>(() => MethodAccessor<TriggerBoxAction>.Create("SendOnTriggerAction", typeof(UnityEngine.Collider)));
		private static readonly System.Lazy<MethodAccessor<TriggerBoxAction>> _IsCollisionOnCorrectLayer3468606003 =
				new System.Lazy<MethodAccessor<TriggerBoxAction>>(() => MethodAccessor<TriggerBoxAction>.Create("IsCollisionOnCorrectLayer", typeof(UnityEngine.Collider)));

		public static void SendOnTriggerAction(this TriggerBoxAction __self, UnityEngine.Collider other) => _SendOnTriggerAction3468606003.Value.Invoke(__self, other);
		public static bool IsCollisionOnCorrectLayer(this TriggerBoxAction __self, UnityEngine.Collider collision) => (bool)_IsCollisionOnCorrectLayer3468606003.Value.Invoke(__self, collision);

	}

	public static class PrivateAccessor_VFX_Electricity
	{

		private static readonly System.Lazy<FieldAccessor<VFX_Electricity, bool>> _initialized =
				new System.Lazy<FieldAccessor<VFX_Electricity, bool>>(() => FieldAccessor<VFX_Electricity, bool>.Create("initialized"));
		private static readonly System.Lazy<FieldAccessor<VFX_Electricity, bool>> _isActive =
				new System.Lazy<FieldAccessor<VFX_Electricity, bool>>(() => FieldAccessor<VFX_Electricity, bool>.Create("isActive"));
		private static readonly System.Lazy<FieldAccessor<VFX_Electricity, bool>> _paused =
				new System.Lazy<FieldAccessor<VFX_Electricity, bool>>(() => FieldAccessor<VFX_Electricity, bool>.Create("paused"));
		private static readonly System.Lazy<FieldAccessor<VFX_Electricity, System.Collections.Generic.List<UnityEngine.Vector3>>> _path =
				new System.Lazy<FieldAccessor<VFX_Electricity, System.Collections.Generic.List<UnityEngine.Vector3>>>(() => FieldAccessor<VFX_Electricity, System.Collections.Generic.List<UnityEngine.Vector3>>.Create("path"));
		private static readonly System.Lazy<FieldAccessor<VFX_Electricity, int>> _currentPathIndex =
				new System.Lazy<FieldAccessor<VFX_Electricity, int>>(() => FieldAccessor<VFX_Electricity, int>.Create("currentPathIndex"));
		private static readonly System.Lazy<FieldAccessor<VFX_Electricity, UnityEngine.Coroutine>> _pauseRoutine =
				new System.Lazy<FieldAccessor<VFX_Electricity, UnityEngine.Coroutine>>(() => FieldAccessor<VFX_Electricity, UnityEngine.Coroutine>.Create("pauseRoutine"));

		public static bool GetInitialized(this VFX_Electricity __self) => _initialized.Value.GetValue(__self);
		public static void SetInitialized(this VFX_Electricity __self, bool value) => _initialized.Value.SetValue(__self, value);
		public static bool GetIsActive(this VFX_Electricity __self) => _isActive.Value.GetValue(__self);
		public static void SetIsActive(this VFX_Electricity __self, bool value) => _isActive.Value.SetValue(__self, value);
		public static bool GetPaused(this VFX_Electricity __self) => _paused.Value.GetValue(__self);
		public static void SetPaused(this VFX_Electricity __self, bool value) => _paused.Value.SetValue(__self, value);
		public static System.Collections.Generic.List<UnityEngine.Vector3> GetPath(this VFX_Electricity __self) => _path.Value.GetValue(__self);
		public static void SetPath(this VFX_Electricity __self, System.Collections.Generic.List<UnityEngine.Vector3> value) => _path.Value.SetValue(__self, value);
		public static int GetCurrentPathIndex(this VFX_Electricity __self) => _currentPathIndex.Value.GetValue(__self);
		public static void SetCurrentPathIndex(this VFX_Electricity __self, int value) => _currentPathIndex.Value.SetValue(__self, value);
		public static UnityEngine.Coroutine GetPauseRoutine(this VFX_Electricity __self) => _pauseRoutine.Value.GetValue(__self);
		public static void SetPauseRoutine(this VFX_Electricity __self, UnityEngine.Coroutine value) => _pauseRoutine.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<VFX_Electricity>> _Update757602046 =
				new System.Lazy<MethodAccessor<VFX_Electricity>>(() => MethodAccessor<VFX_Electricity>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<VFX_Electricity>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<VFX_Electricity>>(() => MethodAccessor<VFX_Electricity>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<VFX_Electricity>> _Paus3429126434 =
				new System.Lazy<MethodAccessor<VFX_Electricity>>(() => MethodAccessor<VFX_Electricity>.Create("Paus", typeof(UnityEngine.Vector3)));

		public static void Update(this VFX_Electricity __self) => _Update757602046.Value.Invoke(__self);
		public static void OnDestroy(this VFX_Electricity __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static System.Collections.IEnumerator Paus(this VFX_Electricity __self, UnityEngine.Vector3 afterPausPosition) => (System.Collections.IEnumerator)_Paus3429126434.Value.Invoke(__self, afterPausPosition);

	}

	public static class Private_VFX_Electricity
	{

		private static readonly System.Lazy<StaticFieldAccessor<float>> _distanceToReach =
				new System.Lazy<StaticFieldAccessor<float>>(() => StaticFieldAccessor<float>.Create(typeof(VFX_Electricity), "distanceToReach"));

		public static float GetDistanceToReach() => _distanceToReach.Value.GetValue();
		public static void SetDistanceToReach(float value) => _distanceToReach.Value.SetValue(value);

	}

	public static class PrivateAccessor_VelocityCalculator
	{

		private static readonly System.Lazy<FieldAccessor<VelocityCalculator, float>> _maxMagnitude =
				new System.Lazy<FieldAccessor<VelocityCalculator, float>>(() => FieldAccessor<VelocityCalculator, float>.Create("maxMagnitude"));
		private static readonly System.Lazy<FieldAccessor<VelocityCalculator, UnityEngine.Vector3>> _previousPosition =
				new System.Lazy<FieldAccessor<VelocityCalculator, UnityEngine.Vector3>>(() => FieldAccessor<VelocityCalculator, UnityEngine.Vector3>.Create("previousPosition"));

		public static float GetMaxMagnitude(this VelocityCalculator __self) => _maxMagnitude.Value.GetValue(__self);
		public static void SetMaxMagnitude(this VelocityCalculator __self, float value) => _maxMagnitude.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetPreviousPosition(this VelocityCalculator __self) => _previousPosition.Value.GetValue(__self);
		public static void SetPreviousPosition(this VelocityCalculator __self, UnityEngine.Vector3 value) => _previousPosition.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<VelocityCalculator>> _Update757602046 =
				new System.Lazy<MethodAccessor<VelocityCalculator>>(() => MethodAccessor<VelocityCalculator>.Create("Update"));

		public static void Update(this VelocityCalculator __self) => _Update757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_ZiplineAchievementTracker
	{

		private static readonly System.Lazy<FieldAccessor<ZiplineAchievementTracker, float>> _ziplinedDistance =
				new System.Lazy<FieldAccessor<ZiplineAchievementTracker, float>>(() => FieldAccessor<ZiplineAchievementTracker, float>.Create("ziplinedDistance"));
		private static readonly System.Lazy<FieldAccessor<ZiplineAchievementTracker, int>> _minDistanceToTrack =
				new System.Lazy<FieldAccessor<ZiplineAchievementTracker, int>>(() => FieldAccessor<ZiplineAchievementTracker, int>.Create("minDistanceToTrack"));
		private static readonly System.Lazy<FieldAccessor<ZiplineAchievementTracker, UnityEngine.Vector3>> _calcPoint =
				new System.Lazy<FieldAccessor<ZiplineAchievementTracker, UnityEngine.Vector3>>(() => FieldAccessor<ZiplineAchievementTracker, UnityEngine.Vector3>.Create("calcPoint"));

		public static float GetZiplinedDistance(this ZiplineAchievementTracker __self) => _ziplinedDistance.Value.GetValue(__self);
		public static void SetZiplinedDistance(this ZiplineAchievementTracker __self, float value) => _ziplinedDistance.Value.SetValue(__self, value);
		public static int GetMinDistanceToTrack(this ZiplineAchievementTracker __self) => _minDistanceToTrack.Value.GetValue(__self);
		public static void SetMinDistanceToTrack(this ZiplineAchievementTracker __self, int value) => _minDistanceToTrack.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetCalcPoint(this ZiplineAchievementTracker __self) => _calcPoint.Value.GetValue(__self);
		public static void SetCalcPoint(this ZiplineAchievementTracker __self, UnityEngine.Vector3 value) => _calcPoint.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<ZiplineAchievementTracker>> _Start757602046 =
				new System.Lazy<MethodAccessor<ZiplineAchievementTracker>>(() => MethodAccessor<ZiplineAchievementTracker>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<ZiplineAchievementTracker>> _Update757602046 =
				new System.Lazy<MethodAccessor<ZiplineAchievementTracker>>(() => MethodAccessor<ZiplineAchievementTracker>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<ZiplineAchievementTracker>> _OnZipAttach757602046 =
				new System.Lazy<MethodAccessor<ZiplineAchievementTracker>>(() => MethodAccessor<ZiplineAchievementTracker>.Create("OnZipAttach"));
		private static readonly System.Lazy<MethodAccessor<ZiplineAchievementTracker>> _OnZipDeattach757602046 =
				new System.Lazy<MethodAccessor<ZiplineAchievementTracker>>(() => MethodAccessor<ZiplineAchievementTracker>.Create("OnZipDeattach"));

		public static void Start(this ZiplineAchievementTracker __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this ZiplineAchievementTracker __self) => _Update757602046.Value.Invoke(__self);
		public static void OnZipAttach(this ZiplineAchievementTracker __self) => _OnZipAttach757602046.Value.Invoke(__self);
		public static void OnZipDeattach(this ZiplineAchievementTracker __self) => _OnZipDeattach757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_ChatManager
	{

		private static readonly System.Lazy<MethodAccessor<ChatManager>> _Awake757602046 =
				new System.Lazy<MethodAccessor<ChatManager>>(() => MethodAccessor<ChatManager>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<ChatManager>> _Start757602046 =
				new System.Lazy<MethodAccessor<ChatManager>>(() => MethodAccessor<ChatManager>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<ChatManager>> _SendRecieveChatMessageAction757602046 =
				new System.Lazy<MethodAccessor<ChatManager>>(() => MethodAccessor<ChatManager>.Create("SendRecieveChatMessageAction"));

		public static void Awake(this ChatManager __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this ChatManager __self) => _Start757602046.Value.Invoke(__self);
		public static void SendRecieveChatMessageAction(this ChatManager __self) => _SendRecieveChatMessageAction757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_ChatMessagePanel
	{

		private static readonly System.Lazy<FieldAccessor<ChatMessagePanel, UnityEngine.RectTransform>> _chatRect =
				new System.Lazy<FieldAccessor<ChatMessagePanel, UnityEngine.RectTransform>>(() => FieldAccessor<ChatMessagePanel, UnityEngine.RectTransform>.Create("chatRect"));
		private static readonly System.Lazy<FieldAccessor<ChatMessagePanel, UnityEngine.RectTransform>> _usernameRect =
				new System.Lazy<FieldAccessor<ChatMessagePanel, UnityEngine.RectTransform>>(() => FieldAccessor<ChatMessagePanel, UnityEngine.RectTransform>.Create("usernameRect"));
		private static readonly System.Lazy<FieldAccessor<ChatMessagePanel, UnityEngine.RectTransform>> _imageRect =
				new System.Lazy<FieldAccessor<ChatMessagePanel, UnityEngine.RectTransform>>(() => FieldAccessor<ChatMessagePanel, UnityEngine.RectTransform>.Create("imageRect"));
		private static readonly System.Lazy<FieldAccessor<ChatMessagePanel, UnityEngine.RectTransform>> _rect =
				new System.Lazy<FieldAccessor<ChatMessagePanel, UnityEngine.RectTransform>>(() => FieldAccessor<ChatMessagePanel, UnityEngine.RectTransform>.Create("rect"));

		public static UnityEngine.RectTransform GetChatRect(this ChatMessagePanel __self) => _chatRect.Value.GetValue(__self);
		public static void SetChatRect(this ChatMessagePanel __self, UnityEngine.RectTransform value) => _chatRect.Value.SetValue(__self, value);
		public static UnityEngine.RectTransform GetUsernameRect(this ChatMessagePanel __self) => _usernameRect.Value.GetValue(__self);
		public static void SetUsernameRect(this ChatMessagePanel __self, UnityEngine.RectTransform value) => _usernameRect.Value.SetValue(__self, value);
		public static UnityEngine.RectTransform GetImageRect(this ChatMessagePanel __self) => _imageRect.Value.GetValue(__self);
		public static void SetImageRect(this ChatMessagePanel __self, UnityEngine.RectTransform value) => _imageRect.Value.SetValue(__self, value);
		public static UnityEngine.RectTransform GetRect(this ChatMessagePanel __self) => _rect.Value.GetValue(__self);
		public static void SetRect(this ChatMessagePanel __self, UnityEngine.RectTransform value) => _rect.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<ChatMessagePanel>> _Awake757602046 =
				new System.Lazy<MethodAccessor<ChatMessagePanel>>(() => MethodAccessor<ChatMessagePanel>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<ChatMessagePanel>> _SetHeight757602046 =
				new System.Lazy<MethodAccessor<ChatMessagePanel>>(() => MethodAccessor<ChatMessagePanel>.Create("SetHeight"));

		public static void Awake(this ChatMessagePanel __self) => _Awake757602046.Value.Invoke(__self);
		public static void SetHeight(this ChatMessagePanel __self) => _SetHeight757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_ChatTextFieldController
	{

		private static readonly System.Lazy<FieldAccessor<ChatTextFieldController, UnityEngine.RectTransform>> _chatMessageParent =
				new System.Lazy<FieldAccessor<ChatTextFieldController, UnityEngine.RectTransform>>(() => FieldAccessor<ChatTextFieldController, UnityEngine.RectTransform>.Create("chatMessageParent"));
		private static readonly System.Lazy<FieldAccessor<ChatTextFieldController, bool>> _autoScrollChatToBottomOnMessage =
				new System.Lazy<FieldAccessor<ChatTextFieldController, bool>>(() => FieldAccessor<ChatTextFieldController, bool>.Create("autoScrollChatToBottomOnMessage"));
		private static readonly System.Lazy<FieldAccessor<ChatTextFieldController, int>> _chatMessageLimit =
				new System.Lazy<FieldAccessor<ChatTextFieldController, int>>(() => FieldAccessor<ChatTextFieldController, int>.Create("chatMessageLimit"));
		private static readonly System.Lazy<FieldAccessor<ChatTextFieldController, System.Collections.Generic.List<string>>> _previousMessages =
				new System.Lazy<FieldAccessor<ChatTextFieldController, System.Collections.Generic.List<string>>>(() => FieldAccessor<ChatTextFieldController, System.Collections.Generic.List<string>>.Create("previousMessages"));
		private static readonly System.Lazy<FieldAccessor<ChatTextFieldController, int>> _currentPrevMessageIndex =
				new System.Lazy<FieldAccessor<ChatTextFieldController, int>>(() => FieldAccessor<ChatTextFieldController, int>.Create("currentPrevMessageIndex"));
		private static readonly System.Lazy<FieldAccessor<ChatTextFieldController, string>> _commandDelimeter =
				new System.Lazy<FieldAccessor<ChatTextFieldController, string>>(() => FieldAccessor<ChatTextFieldController, string>.Create("commandDelimeter"));
		private static readonly System.Lazy<FieldAccessor<ChatTextFieldController, string>> _terminalCommandDelimeter =
				new System.Lazy<FieldAccessor<ChatTextFieldController, string>>(() => FieldAccessor<ChatTextFieldController, string>.Create("terminalCommandDelimeter"));
		private static readonly System.Lazy<FieldAccessor<ChatTextFieldController, ObjectPool>> _chatMessagePool =
				new System.Lazy<FieldAccessor<ChatTextFieldController, ObjectPool>>(() => FieldAccessor<ChatTextFieldController, ObjectPool>.Create("chatMessagePool"));
		private static readonly System.Lazy<FieldAccessor<ChatTextFieldController, UnityEngine.Color>> _adminHost =
				new System.Lazy<FieldAccessor<ChatTextFieldController, UnityEngine.Color>>(() => FieldAccessor<ChatTextFieldController, UnityEngine.Color>.Create("adminHost"));
		private static readonly System.Lazy<FieldAccessor<ChatTextFieldController, UnityEngine.Color>> _adminClient =
				new System.Lazy<FieldAccessor<ChatTextFieldController, UnityEngine.Color>>(() => FieldAccessor<ChatTextFieldController, UnityEngine.Color>.Create("adminClient"));
		private static readonly System.Lazy<FieldAccessor<ChatTextFieldController, UnityEngine.Color>> _normalHost =
				new System.Lazy<FieldAccessor<ChatTextFieldController, UnityEngine.Color>>(() => FieldAccessor<ChatTextFieldController, UnityEngine.Color>.Create("normalHost"));
		private static readonly System.Lazy<FieldAccessor<ChatTextFieldController, UnityEngine.Color>> _normalClient =
				new System.Lazy<FieldAccessor<ChatTextFieldController, UnityEngine.Color>>(() => FieldAccessor<ChatTextFieldController, UnityEngine.Color>.Create("normalClient"));
		private static readonly System.Lazy<FieldAccessor<ChatTextFieldController, float>> _currentScrollValue =
				new System.Lazy<FieldAccessor<ChatTextFieldController, float>>(() => FieldAccessor<ChatTextFieldController, float>.Create("currentScrollValue"));
		private static readonly System.Lazy<FieldAccessor<ChatTextFieldController, System.Collections.Generic.List<UnityEngine.RectTransform>>> _chatMessageList =
				new System.Lazy<FieldAccessor<ChatTextFieldController, System.Collections.Generic.List<UnityEngine.RectTransform>>>(() => FieldAccessor<ChatTextFieldController, System.Collections.Generic.List<UnityEngine.RectTransform>>.Create("chatMessageList"));
		private static readonly System.Lazy<FieldAccessor<ChatTextFieldController, Network_Player>> _localPlayer =
				new System.Lazy<FieldAccessor<ChatTextFieldController, Network_Player>>(() => FieldAccessor<ChatTextFieldController, Network_Player>.Create("localPlayer"));
		private static readonly System.Lazy<FieldAccessor<ChatTextFieldController, Raft_Network>> _network =
				new System.Lazy<FieldAccessor<ChatTextFieldController, Raft_Network>>(() => FieldAccessor<ChatTextFieldController, Raft_Network>.Create("network"));
		private static readonly System.Lazy<FieldAccessor<ChatTextFieldController, GameManager>> _gameManager =
				new System.Lazy<FieldAccessor<ChatTextFieldController, GameManager>>(() => FieldAccessor<ChatTextFieldController, GameManager>.Create("gameManager"));
		private static readonly System.Lazy<FieldAccessor<ChatTextFieldController, CanvasHelper>> _canvas =
				new System.Lazy<FieldAccessor<ChatTextFieldController, CanvasHelper>>(() => FieldAccessor<ChatTextFieldController, CanvasHelper>.Create("canvas"));
		private static readonly System.Lazy<FieldAccessor<ChatTextFieldController, int>> _storedMessageLimitCount =
				new System.Lazy<FieldAccessor<ChatTextFieldController, int>>(() => FieldAccessor<ChatTextFieldController, int>.Create("storedMessageLimitCount"));

		public static UnityEngine.RectTransform GetChatMessageParent(this ChatTextFieldController __self) => _chatMessageParent.Value.GetValue(__self);
		public static void SetChatMessageParent(this ChatTextFieldController __self, UnityEngine.RectTransform value) => _chatMessageParent.Value.SetValue(__self, value);
		public static bool GetAutoScrollChatToBottomOnMessage(this ChatTextFieldController __self) => _autoScrollChatToBottomOnMessage.Value.GetValue(__self);
		public static void SetAutoScrollChatToBottomOnMessage(this ChatTextFieldController __self, bool value) => _autoScrollChatToBottomOnMessage.Value.SetValue(__self, value);
		public static int GetChatMessageLimit(this ChatTextFieldController __self) => _chatMessageLimit.Value.GetValue(__self);
		public static void SetChatMessageLimit(this ChatTextFieldController __self, int value) => _chatMessageLimit.Value.SetValue(__self, value);
		public static System.Collections.Generic.List<string> GetPreviousMessages(this ChatTextFieldController __self) => _previousMessages.Value.GetValue(__self);
		public static void SetPreviousMessages(this ChatTextFieldController __self, System.Collections.Generic.List<string> value) => _previousMessages.Value.SetValue(__self, value);
		public static int GetCurrentPrevMessageIndex(this ChatTextFieldController __self) => _currentPrevMessageIndex.Value.GetValue(__self);
		public static void SetCurrentPrevMessageIndex(this ChatTextFieldController __self, int value) => _currentPrevMessageIndex.Value.SetValue(__self, value);
		public static string GetCommandDelimeter(this ChatTextFieldController __self) => _commandDelimeter.Value.GetValue(__self);
		public static void SetCommandDelimeter(this ChatTextFieldController __self, string value) => _commandDelimeter.Value.SetValue(__self, value);
		public static string GetTerminalCommandDelimeter(this ChatTextFieldController __self) => _terminalCommandDelimeter.Value.GetValue(__self);
		public static void SetTerminalCommandDelimeter(this ChatTextFieldController __self, string value) => _terminalCommandDelimeter.Value.SetValue(__self, value);
		public static ObjectPool GetChatMessagePool(this ChatTextFieldController __self) => _chatMessagePool.Value.GetValue(__self);
		public static void SetChatMessagePool(this ChatTextFieldController __self, ObjectPool value) => _chatMessagePool.Value.SetValue(__self, value);
		public static UnityEngine.Color GetAdminHost(this ChatTextFieldController __self) => _adminHost.Value.GetValue(__self);
		public static void SetAdminHost(this ChatTextFieldController __self, UnityEngine.Color value) => _adminHost.Value.SetValue(__self, value);
		public static UnityEngine.Color GetAdminClient(this ChatTextFieldController __self) => _adminClient.Value.GetValue(__self);
		public static void SetAdminClient(this ChatTextFieldController __self, UnityEngine.Color value) => _adminClient.Value.SetValue(__self, value);
		public static UnityEngine.Color GetNormalHost(this ChatTextFieldController __self) => _normalHost.Value.GetValue(__self);
		public static void SetNormalHost(this ChatTextFieldController __self, UnityEngine.Color value) => _normalHost.Value.SetValue(__self, value);
		public static UnityEngine.Color GetNormalClient(this ChatTextFieldController __self) => _normalClient.Value.GetValue(__self);
		public static void SetNormalClient(this ChatTextFieldController __self, UnityEngine.Color value) => _normalClient.Value.SetValue(__self, value);
		public static float GetCurrentScrollValue(this ChatTextFieldController __self) => _currentScrollValue.Value.GetValue(__self);
		public static void SetCurrentScrollValue(this ChatTextFieldController __self, float value) => _currentScrollValue.Value.SetValue(__self, value);
		public static System.Collections.Generic.List<UnityEngine.RectTransform> GetChatMessageList(this ChatTextFieldController __self) => _chatMessageList.Value.GetValue(__self);
		public static void SetChatMessageList(this ChatTextFieldController __self, System.Collections.Generic.List<UnityEngine.RectTransform> value) => _chatMessageList.Value.SetValue(__self, value);
		public static Network_Player GetLocalPlayer(this ChatTextFieldController __self) => _localPlayer.Value.GetValue(__self);
		public static void SetLocalPlayer(this ChatTextFieldController __self, Network_Player value) => _localPlayer.Value.SetValue(__self, value);
		public static Raft_Network GetNetwork(this ChatTextFieldController __self) => _network.Value.GetValue(__self);
		public static void SetNetwork(this ChatTextFieldController __self, Raft_Network value) => _network.Value.SetValue(__self, value);
		public static GameManager GetGameManager(this ChatTextFieldController __self) => _gameManager.Value.GetValue(__self);
		public static void SetGameManager(this ChatTextFieldController __self, GameManager value) => _gameManager.Value.SetValue(__self, value);
		public static CanvasHelper GetCanvas(this ChatTextFieldController __self) => _canvas.Value.GetValue(__self);
		public static void SetCanvas(this ChatTextFieldController __self, CanvasHelper value) => _canvas.Value.SetValue(__self, value);
		public static int GetStoredMessageLimitCount(this ChatTextFieldController __self) => _storedMessageLimitCount.Value.GetValue(__self);
		public static void SetStoredMessageLimitCount(this ChatTextFieldController __self, int value) => _storedMessageLimitCount.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<ChatTextFieldController>> _Awake757602046 =
				new System.Lazy<MethodAccessor<ChatTextFieldController>>(() => MethodAccessor<ChatTextFieldController>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<ChatTextFieldController>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<ChatTextFieldController>>(() => MethodAccessor<ChatTextFieldController>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<ChatTextFieldController>> _Start757602046 =
				new System.Lazy<MethodAccessor<ChatTextFieldController>>(() => MethodAccessor<ChatTextFieldController>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<ChatTextFieldController>> _Update757602046 =
				new System.Lazy<MethodAccessor<ChatTextFieldController>>(() => MethodAccessor<ChatTextFieldController>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<ChatTextFieldController>> _OnWorldRecieved757602046 =
				new System.Lazy<MethodAccessor<ChatTextFieldController>>(() => MethodAccessor<ChatTextFieldController>.Create("OnWorldRecieved"));
		private static readonly System.Lazy<MethodAccessor<ChatTextFieldController>> _CheckIfStringIsACommand3454057852 =
				new System.Lazy<MethodAccessor<ChatTextFieldController>>(() => MethodAccessor<ChatTextFieldController>.Create("CheckIfStringIsACommand", typeof(string)));
		private static readonly System.Lazy<MethodAccessor<ChatTextFieldController>> _CheckIfStringIsTerminalCommand3454057852 =
				new System.Lazy<MethodAccessor<ChatTextFieldController>>(() => MethodAccessor<ChatTextFieldController>.Create("CheckIfStringIsTerminalCommand", typeof(string)));
		private static readonly System.Lazy<MethodAccessor<ChatTextFieldController>> _HandleInput757602046 =
				new System.Lazy<MethodAccessor<ChatTextFieldController>>(() => MethodAccessor<ChatTextFieldController>.Create("HandleInput"));
		private static readonly System.Lazy<MethodAccessor<ChatTextFieldController>> _SetChatFieldVisible3450040886 =
				new System.Lazy<MethodAccessor<ChatTextFieldController>>(() => MethodAccessor<ChatTextFieldController>.Create("SetChatFieldVisible", typeof(bool)));
		private static readonly System.Lazy<MethodAccessor<ChatTextFieldController>> _ScrollChatUpwards757602046 =
				new System.Lazy<MethodAccessor<ChatTextFieldController>>(() => MethodAccessor<ChatTextFieldController>.Create("ScrollChatUpwards"));
		private static readonly System.Lazy<MethodAccessor<ChatTextFieldController>> _ScrollChatDownwards757602046 =
				new System.Lazy<MethodAccessor<ChatTextFieldController>>(() => MethodAccessor<ChatTextFieldController>.Create("ScrollChatDownwards"));
		private static readonly System.Lazy<MethodAccessor<ChatTextFieldController>> _CreateChatMessagePanel757602046 =
				new System.Lazy<MethodAccessor<ChatTextFieldController>>(() => MethodAccessor<ChatTextFieldController>.Create("CreateChatMessagePanel"));
		private static readonly System.Lazy<MethodAccessor<ChatTextFieldController>> _SetChatMessagePanelsUsername296845241 =
				new System.Lazy<MethodAccessor<ChatTextFieldController>>(() => MethodAccessor<ChatTextFieldController>.Create("SetChatMessagePanelsUsername", typeof(UnityEngine.UI.Text), typeof(Steamworks.CSteamID)));
		private static readonly System.Lazy<MethodAccessor<ChatTextFieldController>> _GetPlayerTextColor3429031458 =
				new System.Lazy<MethodAccessor<ChatTextFieldController>>(() => MethodAccessor<ChatTextFieldController>.Create("GetPlayerTextColor", typeof(Steamworks.CSteamID)));
		private static readonly System.Lazy<MethodAccessor<ChatTextFieldController>> _GetProperColorCode3429031458 =
				new System.Lazy<MethodAccessor<ChatTextFieldController>>(() => MethodAccessor<ChatTextFieldController>.Create("GetProperColorCode", typeof(Steamworks.CSteamID)));
		private static readonly System.Lazy<MethodAccessor<ChatTextFieldController>> _SetChatMessagePanelsText2041177807 =
				new System.Lazy<MethodAccessor<ChatTextFieldController>>(() => MethodAccessor<ChatTextFieldController>.Create("SetChatMessagePanelsText", typeof(ChatMessagePanel), typeof(string)));
		private static readonly System.Lazy<MethodAccessor<ChatTextFieldController>> _SetChatMessagePanelsImage323937938 =
				new System.Lazy<MethodAccessor<ChatTextFieldController>>(() => MethodAccessor<ChatTextFieldController>.Create("SetChatMessagePanelsImage", typeof(UnityEngine.UI.Image), typeof(Steamworks.CSteamID)));
		private static readonly System.Lazy<MethodAccessor<ChatTextFieldController>> _GetInputFieldsText757602046 =
				new System.Lazy<MethodAccessor<ChatTextFieldController>>(() => MethodAccessor<ChatTextFieldController>.Create("GetInputFieldsText"));
		private static readonly System.Lazy<MethodAccessor<ChatTextFieldController>> _ScrollContentToBottom757602046 =
				new System.Lazy<MethodAccessor<ChatTextFieldController>>(() => MethodAccessor<ChatTextFieldController>.Create("ScrollContentToBottom"));
		private static readonly System.Lazy<MethodAccessor<ChatTextFieldController>> _SetScrollbarScroll3486905475 =
				new System.Lazy<MethodAccessor<ChatTextFieldController>>(() => MethodAccessor<ChatTextFieldController>.Create("SetScrollbarScroll", typeof(float)));
		private static readonly System.Lazy<MethodAccessor<ChatTextFieldController>> _CheckMessageLimit757602046 =
				new System.Lazy<MethodAccessor<ChatTextFieldController>>(() => MethodAccessor<ChatTextFieldController>.Create("CheckMessageLimit"));
		private static readonly System.Lazy<MethodAccessor<ChatTextFieldController>> _RemoveExcessiveMessages757602046 =
				new System.Lazy<MethodAccessor<ChatTextFieldController>>(() => MethodAccessor<ChatTextFieldController>.Create("RemoveExcessiveMessages"));
		private static readonly System.Lazy<MethodAccessor<ChatTextFieldController>> _StoreMessageToPreviousMessages3454057852 =
				new System.Lazy<MethodAccessor<ChatTextFieldController>>(() => MethodAccessor<ChatTextFieldController>.Create("StoreMessageToPreviousMessages", typeof(string)));
		private static readonly System.Lazy<MethodAccessor<ChatTextFieldController>> _ClearPreviousMessagesStorage757602046 =
				new System.Lazy<MethodAccessor<ChatTextFieldController>>(() => MethodAccessor<ChatTextFieldController>.Create("ClearPreviousMessagesStorage"));
		private static readonly System.Lazy<MethodAccessor<ChatTextFieldController>> _ActivateChatTyping757602046 =
				new System.Lazy<MethodAccessor<ChatTextFieldController>>(() => MethodAccessor<ChatTextFieldController>.Create("ActivateChatTyping"));
		private static readonly System.Lazy<MethodAccessor<ChatTextFieldController>> _HandleOnSendMessageInputField757602046 =
				new System.Lazy<MethodAccessor<ChatTextFieldController>>(() => MethodAccessor<ChatTextFieldController>.Create("HandleOnSendMessageInputField"));

		public static void Awake(this ChatTextFieldController __self) => _Awake757602046.Value.Invoke(__self);
		public static void OnDestroy(this ChatTextFieldController __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void Start(this ChatTextFieldController __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this ChatTextFieldController __self) => _Update757602046.Value.Invoke(__self);
		public static void OnWorldRecieved(this ChatTextFieldController __self) => _OnWorldRecieved757602046.Value.Invoke(__self);
		public static bool CheckIfStringIsACommand(this ChatTextFieldController __self, string p_string) => (bool)_CheckIfStringIsACommand3454057852.Value.Invoke(__self, p_string);
		public static bool CheckIfStringIsTerminalCommand(this ChatTextFieldController __self, string p_string) => (bool)_CheckIfStringIsTerminalCommand3454057852.Value.Invoke(__self, p_string);
		public static void HandleInput(this ChatTextFieldController __self) => _HandleInput757602046.Value.Invoke(__self);
		public static void SetChatFieldVisible(this ChatTextFieldController __self, bool value) => _SetChatFieldVisible3450040886.Value.Invoke(__self, value);
		public static void ScrollChatUpwards(this ChatTextFieldController __self) => _ScrollChatUpwards757602046.Value.Invoke(__self);
		public static void ScrollChatDownwards(this ChatTextFieldController __self) => _ScrollChatDownwards757602046.Value.Invoke(__self);
		public static UnityEngine.GameObject CreateChatMessagePanel(this ChatTextFieldController __self) => (UnityEngine.GameObject)_CreateChatMessagePanel757602046.Value.Invoke(__self);
		public static void SetChatMessagePanelsUsername(this ChatTextFieldController __self, UnityEngine.UI.Text userNameText, Steamworks.CSteamID p_steamID) => _SetChatMessagePanelsUsername296845241.Value.Invoke(__self, userNameText, p_steamID);
		public static UnityEngine.Color GetPlayerTextColor(this ChatTextFieldController __self, Steamworks.CSteamID p_steamID) => (UnityEngine.Color)_GetPlayerTextColor3429031458.Value.Invoke(__self, p_steamID);
		public static string GetProperColorCode(this ChatTextFieldController __self, Steamworks.CSteamID p_steamID) => (string)_GetProperColorCode3429031458.Value.Invoke(__self, p_steamID);
		public static void SetChatMessagePanelsText(this ChatTextFieldController __self, ChatMessagePanel p_panel, string p_newText) => _SetChatMessagePanelsText2041177807.Value.Invoke(__self, p_panel, p_newText);
		public static void SetChatMessagePanelsImage(this ChatTextFieldController __self, UnityEngine.UI.Image p_chatPanelImage, Steamworks.CSteamID p_steamID) => _SetChatMessagePanelsImage323937938.Value.Invoke(__self, p_chatPanelImage, p_steamID);
		public static string GetInputFieldsText(this ChatTextFieldController __self) => (string)_GetInputFieldsText757602046.Value.Invoke(__self);
		public static void ScrollContentToBottom(this ChatTextFieldController __self) => _ScrollContentToBottom757602046.Value.Invoke(__self);
		public static void SetScrollbarScroll(this ChatTextFieldController __self, float p_value) => _SetScrollbarScroll3486905475.Value.Invoke(__self, p_value);
		public static void CheckMessageLimit(this ChatTextFieldController __self) => _CheckMessageLimit757602046.Value.Invoke(__self);
		public static void RemoveExcessiveMessages(this ChatTextFieldController __self) => _RemoveExcessiveMessages757602046.Value.Invoke(__self);
		public static void StoreMessageToPreviousMessages(this ChatTextFieldController __self, string message) => _StoreMessageToPreviousMessages3454057852.Value.Invoke(__self, message);
		public static void ClearPreviousMessagesStorage(this ChatTextFieldController __self) => _ClearPreviousMessagesStorage757602046.Value.Invoke(__self);
		public static void ActivateChatTyping(this ChatTextFieldController __self) => _ActivateChatTyping757602046.Value.Invoke(__self);
		public static void HandleOnSendMessageInputField(this ChatTextFieldController __self) => _HandleOnSendMessageInputField757602046.Value.Invoke(__self);

	}

	public static class Private_ChatTextFieldController
	{

		private static readonly System.Lazy<StaticFieldAccessor<bool>> _isChatWindowSelected =
				new System.Lazy<StaticFieldAccessor<bool>>(() => StaticFieldAccessor<bool>.Create(typeof(ChatTextFieldController), "isChatWindowSelected"));

		public static bool GetIsChatWindowSelected() => _isChatWindowSelected.Value.GetValue();
		public static void SetIsChatWindowSelected(bool value) => _isChatWindowSelected.Value.SetValue(value);

	}

	public static class PrivateAccessor_ChatVisibilityController
	{

		private static readonly System.Lazy<FieldAccessor<ChatVisibilityController, bool>> _isChatVisible =
				new System.Lazy<FieldAccessor<ChatVisibilityController, bool>>(() => FieldAccessor<ChatVisibilityController, bool>.Create("isChatVisible"));
		private static readonly System.Lazy<FieldAccessor<ChatVisibilityController, bool>> _autoHideChat =
				new System.Lazy<FieldAccessor<ChatVisibilityController, bool>>(() => FieldAccessor<ChatVisibilityController, bool>.Create("autoHideChat"));
		private static readonly System.Lazy<FieldAccessor<ChatVisibilityController, float>> _chatAutoHideDelay =
				new System.Lazy<FieldAccessor<ChatVisibilityController, float>>(() => FieldAccessor<ChatVisibilityController, float>.Create("chatAutoHideDelay"));
		private static readonly System.Lazy<FieldAccessor<ChatVisibilityController, float>> _latestRecievedMessageTimestamp =
				new System.Lazy<FieldAccessor<ChatVisibilityController, float>>(() => FieldAccessor<ChatVisibilityController, float>.Create("latestRecievedMessageTimestamp"));
		private static readonly System.Lazy<FieldAccessor<ChatVisibilityController, UnityEngine.Coroutine>> _chatActivity =
				new System.Lazy<FieldAccessor<ChatVisibilityController, UnityEngine.Coroutine>>(() => FieldAccessor<ChatVisibilityController, UnityEngine.Coroutine>.Create("chatActivity"));
		private static readonly System.Lazy<FieldAccessor<ChatVisibilityController, ChatTextFieldController>> _chatTextFieldController =
				new System.Lazy<FieldAccessor<ChatVisibilityController, ChatTextFieldController>>(() => FieldAccessor<ChatVisibilityController, ChatTextFieldController>.Create("chatTextFieldController"));

		public static bool GetIsChatVisible(this ChatVisibilityController __self) => _isChatVisible.Value.GetValue(__self);
		public static void SetIsChatVisible(this ChatVisibilityController __self, bool value) => _isChatVisible.Value.SetValue(__self, value);
		public static bool GetAutoHideChat(this ChatVisibilityController __self) => _autoHideChat.Value.GetValue(__self);
		public static void SetAutoHideChat(this ChatVisibilityController __self, bool value) => _autoHideChat.Value.SetValue(__self, value);
		public static float GetChatAutoHideDelay(this ChatVisibilityController __self) => _chatAutoHideDelay.Value.GetValue(__self);
		public static void SetChatAutoHideDelay(this ChatVisibilityController __self, float value) => _chatAutoHideDelay.Value.SetValue(__self, value);
		public static float GetLatestRecievedMessageTimestamp(this ChatVisibilityController __self) => _latestRecievedMessageTimestamp.Value.GetValue(__self);
		public static void SetLatestRecievedMessageTimestamp(this ChatVisibilityController __self, float value) => _latestRecievedMessageTimestamp.Value.SetValue(__self, value);
		public static UnityEngine.Coroutine GetChatActivity(this ChatVisibilityController __self) => _chatActivity.Value.GetValue(__self);
		public static void SetChatActivity(this ChatVisibilityController __self, UnityEngine.Coroutine value) => _chatActivity.Value.SetValue(__self, value);
		public static ChatTextFieldController GetChatTextFieldController(this ChatVisibilityController __self) => _chatTextFieldController.Value.GetValue(__self);
		public static void SetChatTextFieldController(this ChatVisibilityController __self, ChatTextFieldController value) => _chatTextFieldController.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<ChatVisibilityController>> _OnEnable757602046 =
				new System.Lazy<MethodAccessor<ChatVisibilityController>>(() => MethodAccessor<ChatVisibilityController>.Create("OnEnable"));
		private static readonly System.Lazy<MethodAccessor<ChatVisibilityController>> _OnDisable757602046 =
				new System.Lazy<MethodAccessor<ChatVisibilityController>>(() => MethodAccessor<ChatVisibilityController>.Create("OnDisable"));
		private static readonly System.Lazy<MethodAccessor<ChatVisibilityController>> _Awake757602046 =
				new System.Lazy<MethodAccessor<ChatVisibilityController>>(() => MethodAccessor<ChatVisibilityController>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<ChatVisibilityController>> _Start757602046 =
				new System.Lazy<MethodAccessor<ChatVisibilityController>>(() => MethodAccessor<ChatVisibilityController>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<ChatVisibilityController>> _ShowChat3450040886 =
				new System.Lazy<MethodAccessor<ChatVisibilityController>>(() => MethodAccessor<ChatVisibilityController>.Create("ShowChat", typeof(bool)));
		private static readonly System.Lazy<MethodAccessor<ChatVisibilityController>> _CheckChatActivity757602046 =
				new System.Lazy<MethodAccessor<ChatVisibilityController>>(() => MethodAccessor<ChatVisibilityController>.Create("CheckChatActivity"));
		private static readonly System.Lazy<MethodAccessor<ChatVisibilityController>> _CheckAutoHideChat757602046 =
				new System.Lazy<MethodAccessor<ChatVisibilityController>>(() => MethodAccessor<ChatVisibilityController>.Create("CheckAutoHideChat"));

		public static void OnEnable(this ChatVisibilityController __self) => _OnEnable757602046.Value.Invoke(__self);
		public static void OnDisable(this ChatVisibilityController __self) => _OnDisable757602046.Value.Invoke(__self);
		public static void Awake(this ChatVisibilityController __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this ChatVisibilityController __self) => _Start757602046.Value.Invoke(__self);
		public static void ShowChat(this ChatVisibilityController __self, bool value) => _ShowChat3450040886.Value.Invoke(__self, value);
		public static System.Collections.IEnumerator CheckChatActivity(this ChatVisibilityController __self) => (System.Collections.IEnumerator)_CheckChatActivity757602046.Value.Invoke(__self);
		public static void CheckAutoHideChat(this ChatVisibilityController __self) => _CheckAutoHideChat757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Instrument
	{

		private static readonly System.Lazy<FieldAccessor<Instrument, FOVStyle>> _fovStyle =
				new System.Lazy<FieldAccessor<Instrument, FOVStyle>>(() => FieldAccessor<Instrument, FOVStyle>.Create("fovStyle"));
		private static readonly System.Lazy<FieldAccessor<Instrument, PlayerSeat>> _playerSeat =
				new System.Lazy<FieldAccessor<Instrument, PlayerSeat>>(() => FieldAccessor<Instrument, PlayerSeat>.Create("playerSeat"));
		private static readonly System.Lazy<FieldAccessor<Instrument, Network_Player>> _localPlayer =
				new System.Lazy<FieldAccessor<Instrument, Network_Player>>(() => FieldAccessor<Instrument, Network_Player>.Create("localPlayer"));
		private static readonly System.Lazy<FieldAccessor<Instrument, Network_Player>> _currentUser =
				new System.Lazy<FieldAccessor<Instrument, Network_Player>>(() => FieldAccessor<Instrument, Network_Player>.Create("currentUser"));
		private static readonly System.Lazy<FieldAccessor<Instrument, Raft_Network>> _network =
				new System.Lazy<FieldAccessor<Instrument, Raft_Network>>(() => FieldAccessor<Instrument, Raft_Network>.Create("network"));
		private static readonly System.Lazy<FieldAccessor<Instrument, Instrument_Animator>> _animationLogic =
				new System.Lazy<FieldAccessor<Instrument, Instrument_Animator>>(() => FieldAccessor<Instrument, Instrument_Animator>.Create("animationLogic"));
		private static readonly System.Lazy<FieldAccessor<Instrument, AttachPlayer>> _seat =
				new System.Lazy<FieldAccessor<Instrument, AttachPlayer>>(() => FieldAccessor<Instrument, AttachPlayer>.Create("seat"));

		public static FOVStyle GetFovStyle(this Instrument __self) => _fovStyle.Value.GetValue(__self);
		public static void SetFovStyle(this Instrument __self, FOVStyle value) => _fovStyle.Value.SetValue(__self, value);
		public static PlayerSeat GetPlayerSeat(this Instrument __self) => _playerSeat.Value.GetValue(__self);
		public static void SetPlayerSeat(this Instrument __self, PlayerSeat value) => _playerSeat.Value.SetValue(__self, value);
		public static Network_Player GetLocalPlayer(this Instrument __self) => _localPlayer.Value.GetValue(__self);
		public static void SetLocalPlayer(this Instrument __self, Network_Player value) => _localPlayer.Value.SetValue(__self, value);
		public static Network_Player GetCurrentUser(this Instrument __self) => _currentUser.Value.GetValue(__self);
		public static void SetCurrentUser(this Instrument __self, Network_Player value) => _currentUser.Value.SetValue(__self, value);
		public static Raft_Network GetNetwork(this Instrument __self) => _network.Value.GetValue(__self);
		public static void SetNetwork(this Instrument __self, Raft_Network value) => _network.Value.SetValue(__self, value);
		public static Instrument_Animator GetAnimationLogic(this Instrument __self) => _animationLogic.Value.GetValue(__self);
		public static void SetAnimationLogic(this Instrument __self, Instrument_Animator value) => _animationLogic.Value.SetValue(__self, value);
		public static AttachPlayer GetSeat(this Instrument __self) => _seat.Value.GetValue(__self);
		public static void SetSeat(this Instrument __self, AttachPlayer value) => _seat.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Instrument>> _Update757602046 =
				new System.Lazy<MethodAccessor<Instrument>>(() => MethodAccessor<Instrument>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<Instrument>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<Instrument>>(() => MethodAccessor<Instrument>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<Instrument>> _OnBlockPlaced757602046 =
				new System.Lazy<MethodAccessor<Instrument>>(() => MethodAccessor<Instrument>.Create("OnBlockPlaced"));
		private static readonly System.Lazy<MethodAccessor<Instrument>> _HandleInput757602046 =
				new System.Lazy<MethodAccessor<Instrument>>(() => MethodAccessor<Instrument>.Create("HandleInput"));
		private static readonly System.Lazy<MethodAccessor<Instrument>> _ThirdPersonStateChange3450040886 =
				new System.Lazy<MethodAccessor<Instrument>>(() => MethodAccessor<Instrument>.Create("ThirdPersonStateChange", typeof(bool)));
		private static readonly System.Lazy<MethodAccessor<Instrument>> _UpdateMouseLookScripts3435821211 =
				new System.Lazy<MethodAccessor<Instrument>>(() => MethodAccessor<Instrument>.Create("UpdateMouseLookScripts", typeof(Network_Player), typeof(bool)));
		private static readonly System.Lazy<MethodAccessor<Instrument>> _UpdateFOVStyle3203577220 =
				new System.Lazy<MethodAccessor<Instrument>>(() => MethodAccessor<Instrument>.Create("UpdateFOVStyle", typeof(Network_Player), typeof(FOVStyle)));

		public static void Update(this Instrument __self) => _Update757602046.Value.Invoke(__self);
		public static void OnDestroy(this Instrument __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void OnBlockPlaced(this Instrument __self) => _OnBlockPlaced757602046.Value.Invoke(__self);
		public static void HandleInput(this Instrument __self) => _HandleInput757602046.Value.Invoke(__self);
		public static void ThirdPersonStateChange(this Instrument __self, bool newThirdPersonState) => _ThirdPersonStateChange3450040886.Value.Invoke(__self, newThirdPersonState);
		public static void UpdateMouseLookScripts(this Instrument __self, Network_Player player, bool canLook) => _UpdateMouseLookScripts3435821211.Value.Invoke(__self, player, canLook);
		public static void UpdateFOVStyle(this Instrument __self, Network_Player player, FOVStyle style) => _UpdateFOVStyle3203577220.Value.Invoke(__self, player, style);

	}

	public static class PrivateAccessor_Instrument_Animator
	{

		private static readonly System.Lazy<FieldAccessor<Instrument_Animator, float>> _latestPlayedTimeStamp =
				new System.Lazy<FieldAccessor<Instrument_Animator, float>>(() => FieldAccessor<Instrument_Animator, float>.Create("latestPlayedTimeStamp"));
		private static readonly System.Lazy<FieldAccessor<Instrument_Animator, UnityEngine.Coroutine>> _stopAnimRoutine =
				new System.Lazy<FieldAccessor<Instrument_Animator, UnityEngine.Coroutine>>(() => FieldAccessor<Instrument_Animator, UnityEngine.Coroutine>.Create("stopAnimRoutine"));

		public static float GetLatestPlayedTimeStamp(this Instrument_Animator __self) => _latestPlayedTimeStamp.Value.GetValue(__self);
		public static void SetLatestPlayedTimeStamp(this Instrument_Animator __self, float value) => _latestPlayedTimeStamp.Value.SetValue(__self, value);
		public static UnityEngine.Coroutine GetStopAnimRoutine(this Instrument_Animator __self) => _stopAnimRoutine.Value.GetValue(__self);
		public static void SetStopAnimRoutine(this Instrument_Animator __self, UnityEngine.Coroutine value) => _stopAnimRoutine.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_Hotbar
	{

		private static readonly System.Lazy<FieldAccessor<Hotbar, int>> _slotIndex =
				new System.Lazy<FieldAccessor<Hotbar, int>>(() => FieldAccessor<Hotbar, int>.Create("slotIndex"));
		private static readonly System.Lazy<FieldAccessor<Hotbar, System.String[]>> _hotbarKeys =
				new System.Lazy<FieldAccessor<Hotbar, System.String[]>>(() => FieldAccessor<Hotbar, System.String[]>.Create("hotbarKeys"));
		private static readonly System.Lazy<FieldAccessor<Hotbar, Item_Base>> _previousHotSlotItem =
				new System.Lazy<FieldAccessor<Hotbar, Item_Base>>(() => FieldAccessor<Hotbar, Item_Base>.Create("previousHotSlotItem"));

		public static int GetSlotIndex(this Hotbar __self) => _slotIndex.Value.GetValue(__self);
		public static void SetSlotIndex(this Hotbar __self, int value) => _slotIndex.Value.SetValue(__self, value);
		public static System.String[] GetHotbarKeys(this Hotbar __self) => _hotbarKeys.Value.GetValue(__self);
		public static void SetHotbarKeys(this Hotbar __self, System.String[] value) => _hotbarKeys.Value.SetValue(__self, value);
		public static Item_Base GetPreviousHotSlotItem(this Hotbar __self) => _previousHotSlotItem.Value.GetValue(__self);
		public static void SetPreviousHotSlotItem(this Hotbar __self, Item_Base value) => _previousHotSlotItem.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Hotbar>> _Awake757602046 =
				new System.Lazy<MethodAccessor<Hotbar>>(() => MethodAccessor<Hotbar>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<Hotbar>> _Update757602046 =
				new System.Lazy<MethodAccessor<Hotbar>>(() => MethodAccessor<Hotbar>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<Hotbar>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<Hotbar>>(() => MethodAccessor<Hotbar>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<Hotbar>> _OnPlayerInitialize3461878659 =
				new System.Lazy<MethodAccessor<Hotbar>>(() => MethodAccessor<Hotbar>.Create("OnPlayerInitialize", typeof(Network_Player)));
		private static readonly System.Lazy<MethodAccessor<Hotbar>> _HandleHotbarSelection757602046 =
				new System.Lazy<MethodAccessor<Hotbar>>(() => MethodAccessor<Hotbar>.Create("HandleHotbarSelection"));
		private static readonly System.Lazy<MethodAccessor<Hotbar>> _SelectItem3436837919 =
				new System.Lazy<MethodAccessor<Hotbar>>(() => MethodAccessor<Hotbar>.Create("SelectItem", typeof(Item_Base)));

		public static void Awake(this Hotbar __self) => _Awake757602046.Value.Invoke(__self);
		public static void Update(this Hotbar __self) => _Update757602046.Value.Invoke(__self);
		public static void OnDestroy(this Hotbar __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void OnPlayerInitialize(this Hotbar __self, Network_Player player) => _OnPlayerInitialize3461878659.Value.Invoke(__self, player);
		public static void HandleHotbarSelection(this Hotbar __self) => _HandleHotbarSelection757602046.Value.Invoke(__self);
		public static void SelectItem(this Hotbar __self, Item_Base item) => _SelectItem3436837919.Value.Invoke(__self, item);

	}

	public static class PrivateAccessor_Inventory
	{

		private static readonly System.Lazy<FieldAccessor<Inventory, UnityEngine.RectTransform>> _invRectTransform =
				new System.Lazy<FieldAccessor<Inventory, UnityEngine.RectTransform>>(() => FieldAccessor<Inventory, UnityEngine.RectTransform>.Create("invRectTransform"));
		private static readonly System.Lazy<FieldAccessor<Inventory, SoundManager>> _soundManager =
				new System.Lazy<FieldAccessor<Inventory, SoundManager>>(() => FieldAccessor<Inventory, SoundManager>.Create("soundManager"));
		private static readonly System.Lazy<FieldAccessor<Inventory, CanvasHelper>> _canvas =
				new System.Lazy<FieldAccessor<Inventory, CanvasHelper>>(() => FieldAccessor<Inventory, CanvasHelper>.Create("canvas"));

		public static UnityEngine.RectTransform GetInvRectTransform(this Inventory __self) => _invRectTransform.Value.GetValue(__self);
		public static void SetInvRectTransform(this Inventory __self, UnityEngine.RectTransform value) => _invRectTransform.Value.SetValue(__self, value);
		public static SoundManager GetSoundManager(this Inventory __self) => _soundManager.Value.GetValue(__self);
		public static void SetSoundManager(this Inventory __self, SoundManager value) => _soundManager.Value.SetValue(__self, value);
		public static CanvasHelper GetCanvas(this Inventory __self) => _canvas.Value.GetValue(__self);
		public static void SetCanvas(this Inventory __self, CanvasHelper value) => _canvas.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Inventory>> _Awake757602046 =
				new System.Lazy<MethodAccessor<Inventory>>(() => MethodAccessor<Inventory>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<Inventory>> _Start757602046 =
				new System.Lazy<MethodAccessor<Inventory>>(() => MethodAccessor<Inventory>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<Inventory>> _Update757602046 =
				new System.Lazy<MethodAccessor<Inventory>>(() => MethodAccessor<Inventory>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<Inventory>> _AddItemRepetetivly1166393587 =
				new System.Lazy<MethodAccessor<Inventory>>(() => MethodAccessor<Inventory>.Create("AddItemRepetetivly", typeof(Item_Base), typeof(int)));
		private static readonly System.Lazy<MethodAccessor<Inventory>> _InitializeSlots757602046 =
				new System.Lazy<MethodAccessor<Inventory>>(() => MethodAccessor<Inventory>.Create("InitializeSlots"));
		private static readonly System.Lazy<MethodAccessor<Inventory>> _StackSlots2350494870 =
				new System.Lazy<MethodAccessor<Inventory>>(() => MethodAccessor<Inventory>.Create("StackSlots", typeof(Slot), typeof(Slot), typeof(int)));
		private static readonly System.Lazy<MethodAccessor<Inventory>> _MoveSlotToEmpty2350494870 =
				new System.Lazy<MethodAccessor<Inventory>>(() => MethodAccessor<Inventory>.Create("MoveSlotToEmpty", typeof(Slot), typeof(Slot), typeof(int)));
		private static readonly System.Lazy<MethodAccessor<Inventory>> _SwitchSlots109717226 =
				new System.Lazy<MethodAccessor<Inventory>>(() => MethodAccessor<Inventory>.Create("SwitchSlots", typeof(Slot), typeof(Slot)));
		private static readonly System.Lazy<MethodAccessor<Inventory>> _SetSlotAmountFromUses1158366468 =
				new System.Lazy<MethodAccessor<Inventory>>(() => MethodAccessor<Inventory>.Create("SetSlotAmountFromUses", typeof(Slot), typeof(int)));
		private static readonly System.Lazy<MethodAccessor<Inventory>> _FindFirstEmptySlot757602046 =
				new System.Lazy<MethodAccessor<Inventory>>(() => MethodAccessor<Inventory>.Create("FindFirstEmptySlot"));
		private static readonly System.Lazy<MethodAccessor<Inventory>> _FindFirstStackableSlot3486186818 =
				new System.Lazy<MethodAccessor<Inventory>>(() => MethodAccessor<Inventory>.Create("FindFirstStackableSlot", typeof(int)));
		private static readonly System.Lazy<MethodAccessor<Inventory>> _FindSuitableSlot3436837919 =
				new System.Lazy<MethodAccessor<Inventory>>(() => MethodAccessor<Inventory>.Create("FindSuitableSlot", typeof(Item_Base)));
		private static readonly System.Lazy<MethodAccessor<Inventory>> _ResetQuickEquip757602046 =
				new System.Lazy<MethodAccessor<Inventory>>(() => MethodAccessor<Inventory>.Create("ResetQuickEquip"));
		private static readonly System.Lazy<MethodAccessor<Inventory>> _ContainsSlot3428810800 =
				new System.Lazy<MethodAccessor<Inventory>>(() => MethodAccessor<Inventory>.Create("ContainsSlot", typeof(Slot)));
		private static readonly System.Lazy<MethodAccessor<Inventory>> _OnMenuClose3489701807 =
				new System.Lazy<MethodAccessor<Inventory>>(() => MethodAccessor<Inventory>.Create("OnMenuClose", typeof(MenuType)));

		public static void Awake(this Inventory __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this Inventory __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this Inventory __self) => _Update757602046.Value.Invoke(__self);
		public static int AddItemRepetetivly(this Inventory __self, Item_Base item, int amount) => (int)_AddItemRepetetivly1166393587.Value.Invoke(__self, item, amount);
		public static void InitializeSlots(this Inventory __self) => _InitializeSlots757602046.Value.Invoke(__self);
		public static void StackSlots(this Inventory __self, Slot fromSlot, Slot toSlot, int dragAmount) => _StackSlots2350494870.Value.Invoke(__self, fromSlot, toSlot, dragAmount);
		public static void MoveSlotToEmpty(this Inventory __self, Slot fromSlot, Slot toSlot, int amount) => _MoveSlotToEmpty2350494870.Value.Invoke(__self, fromSlot, toSlot, amount);
		public static void SwitchSlots(this Inventory __self, Slot fromSlot, Slot toSlot) => _SwitchSlots109717226.Value.Invoke(__self, fromSlot, toSlot);
		public static void SetSlotAmountFromUses(this Inventory __self, Slot slot, int totalUses) => _SetSlotAmountFromUses1158366468.Value.Invoke(__self, slot, totalUses);
		public static Slot FindFirstEmptySlot(this Inventory __self) => (Slot)_FindFirstEmptySlot757602046.Value.Invoke(__self);
		public static Slot FindFirstStackableSlot(this Inventory __self, int uniqueItemIndex) => (Slot)_FindFirstStackableSlot3486186818.Value.Invoke(__self, uniqueItemIndex);
		public static Slot FindSuitableSlot(this Inventory __self, Item_Base stackableItem) => (Slot)_FindSuitableSlot3436837919.Value.Invoke(__self, stackableItem);
		public static void ResetQuickEquip(this Inventory __self) => _ResetQuickEquip757602046.Value.Invoke(__self);
		public static bool ContainsSlot(this Inventory __self, Slot slot) => (bool)_ContainsSlot3428810800.Value.Invoke(__self, slot);
		public static void OnMenuClose(this Inventory __self, MenuType menuType) => _OnMenuClose3489701807.Value.Invoke(__self, menuType);

	}

	public static class Private_Inventory
	{

		private static readonly System.Lazy<StaticFieldAccessor<Slot>> _fromSlot =
				new System.Lazy<StaticFieldAccessor<Slot>>(() => StaticFieldAccessor<Slot>.Create(typeof(Inventory), "fromSlot"));
		private static readonly System.Lazy<StaticFieldAccessor<Slot>> _toSlot =
				new System.Lazy<StaticFieldAccessor<Slot>>(() => StaticFieldAccessor<Slot>.Create(typeof(Inventory), "toSlot"));
		private static readonly System.Lazy<StaticFieldAccessor<Slot>> _hoverSlot =
				new System.Lazy<StaticFieldAccessor<Slot>>(() => StaticFieldAccessor<Slot>.Create(typeof(Inventory), "hoverSlot"));
		private static readonly System.Lazy<StaticFieldAccessor<bool>> _dragging =
				new System.Lazy<StaticFieldAccessor<bool>>(() => StaticFieldAccessor<bool>.Create(typeof(Inventory), "dragging"));
		private static readonly System.Lazy<StaticFieldAccessor<bool>> _canQuickEquip =
				new System.Lazy<StaticFieldAccessor<bool>>(() => StaticFieldAccessor<bool>.Create(typeof(Inventory), "canQuickEquip"));
		private static readonly System.Lazy<StaticFieldAccessor<PlayerInventory>> _localPlayerInventory =
				new System.Lazy<StaticFieldAccessor<PlayerInventory>>(() => StaticFieldAccessor<PlayerInventory>.Create(typeof(Inventory), "localPlayerInventory"));
		private static readonly System.Lazy<StaticFieldAccessor<int>> _dragAmount =
				new System.Lazy<StaticFieldAccessor<int>>(() => StaticFieldAccessor<int>.Create(typeof(Inventory), "dragAmount"));

		public static Slot GetFromSlot() => _fromSlot.Value.GetValue();
		public static void SetFromSlot(Slot value) => _fromSlot.Value.SetValue(value);
		public static Slot GetToSlot() => _toSlot.Value.GetValue();
		public static void SetToSlot(Slot value) => _toSlot.Value.SetValue(value);
		public static Slot GetHoverSlot() => _hoverSlot.Value.GetValue();
		public static void SetHoverSlot(Slot value) => _hoverSlot.Value.SetValue(value);
		public static bool GetDragging() => _dragging.Value.GetValue();
		public static void SetDragging(bool value) => _dragging.Value.SetValue(value);
		public static bool GetCanQuickEquip() => _canQuickEquip.Value.GetValue();
		public static void SetCanQuickEquip(bool value) => _canQuickEquip.Value.SetValue(value);
		public static PlayerInventory GetLocalPlayerInventory() => _localPlayerInventory.Value.GetValue();
		public static void SetLocalPlayerInventory(PlayerInventory value) => _localPlayerInventory.Value.SetValue(value);
		public static int GetDragAmount() => _dragAmount.Value.GetValue();
		public static void SetDragAmount(int value) => _dragAmount.Value.SetValue(value);

	}

	public static class PrivateAccessor_InventoryPickup
	{

		private static readonly System.Lazy<FieldAccessor<InventoryPickup, int>> _numberOfItems =
				new System.Lazy<FieldAccessor<InventoryPickup, int>>(() => FieldAccessor<InventoryPickup, int>.Create("numberOfItems"));
		private static readonly System.Lazy<FieldAccessor<InventoryPickup, System.Collections.Generic.List<InventoryPickupMenuItem>>> _items =
				new System.Lazy<FieldAccessor<InventoryPickup, System.Collections.Generic.List<InventoryPickupMenuItem>>>(() => FieldAccessor<InventoryPickup, System.Collections.Generic.List<InventoryPickupMenuItem>>.Create("items"));

		public static int GetNumberOfItems(this InventoryPickup __self) => _numberOfItems.Value.GetValue(__self);
		public static void SetNumberOfItems(this InventoryPickup __self, int value) => _numberOfItems.Value.SetValue(__self, value);
		public static System.Collections.Generic.List<InventoryPickupMenuItem> GetItems(this InventoryPickup __self) => _items.Value.GetValue(__self);
		public static void SetItems(this InventoryPickup __self, System.Collections.Generic.List<InventoryPickupMenuItem> value) => _items.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<InventoryPickup>> _Start757602046 =
				new System.Lazy<MethodAccessor<InventoryPickup>>(() => MethodAccessor<InventoryPickup>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<InventoryPickup>> _GetFirstItem757602046 =
				new System.Lazy<MethodAccessor<InventoryPickup>>(() => MethodAccessor<InventoryPickup>.Create("GetFirstItem"));
		private static readonly System.Lazy<MethodAccessor<InventoryPickup>> _CreateItems757602046 =
				new System.Lazy<MethodAccessor<InventoryPickup>>(() => MethodAccessor<InventoryPickup>.Create("CreateItems"));

		public static void Start(this InventoryPickup __self) => _Start757602046.Value.Invoke(__self);
		public static InventoryPickupMenuItem GetFirstItem(this InventoryPickup __self) => (InventoryPickupMenuItem)_GetFirstItem757602046.Value.Invoke(__self);
		public static void CreateItems(this InventoryPickup __self) => _CreateItems757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_InventoryPickupMenuItem
	{

		private static readonly System.Lazy<FieldAccessor<InventoryPickupMenuItem, UnityEngine.CanvasGroup>> _canvasGroup =
				new System.Lazy<FieldAccessor<InventoryPickupMenuItem, UnityEngine.CanvasGroup>>(() => FieldAccessor<InventoryPickupMenuItem, UnityEngine.CanvasGroup>.Create("canvasGroup"));
		private static readonly System.Lazy<FieldAccessor<InventoryPickupMenuItem, float>> _fadeSpeed =
				new System.Lazy<FieldAccessor<InventoryPickupMenuItem, float>>(() => FieldAccessor<InventoryPickupMenuItem, float>.Create("fadeSpeed"));
		private static readonly System.Lazy<FieldAccessor<InventoryPickupMenuItem, bool>> _fade =
				new System.Lazy<FieldAccessor<InventoryPickupMenuItem, bool>>(() => FieldAccessor<InventoryPickupMenuItem, bool>.Create("fade"));

		public static UnityEngine.CanvasGroup GetCanvasGroup(this InventoryPickupMenuItem __self) => _canvasGroup.Value.GetValue(__self);
		public static void SetCanvasGroup(this InventoryPickupMenuItem __self, UnityEngine.CanvasGroup value) => _canvasGroup.Value.SetValue(__self, value);
		public static float GetFadeSpeed(this InventoryPickupMenuItem __self) => _fadeSpeed.Value.GetValue(__self);
		public static void SetFadeSpeed(this InventoryPickupMenuItem __self, float value) => _fadeSpeed.Value.SetValue(__self, value);
		public static bool GetFade(this InventoryPickupMenuItem __self) => _fade.Value.GetValue(__self);
		public static void SetFade(this InventoryPickupMenuItem __self, bool value) => _fade.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<InventoryPickupMenuItem>> _Awake757602046 =
				new System.Lazy<MethodAccessor<InventoryPickupMenuItem>>(() => MethodAccessor<InventoryPickupMenuItem>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<InventoryPickupMenuItem>> _Update757602046 =
				new System.Lazy<MethodAccessor<InventoryPickupMenuItem>>(() => MethodAccessor<InventoryPickupMenuItem>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<InventoryPickupMenuItem>> _StartFade757602046 =
				new System.Lazy<MethodAccessor<InventoryPickupMenuItem>>(() => MethodAccessor<InventoryPickupMenuItem>.Create("StartFade"));

		public static void Awake(this InventoryPickupMenuItem __self) => _Awake757602046.Value.Invoke(__self);
		public static void Update(this InventoryPickupMenuItem __self) => _Update757602046.Value.Invoke(__self);
		public static void StartFade(this InventoryPickupMenuItem __self) => _StartFade757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Inventory_ResearchTable
	{

		private static readonly System.Lazy<FieldAccessor<Inventory_ResearchTable, ResearchMenuItem>> _menuItemPrefab =
				new System.Lazy<FieldAccessor<Inventory_ResearchTable, ResearchMenuItem>>(() => FieldAccessor<Inventory_ResearchTable, ResearchMenuItem>.Create("menuItemPrefab"));
		private static readonly System.Lazy<FieldAccessor<Inventory_ResearchTable, UnityEngine.RectTransform>> _content =
				new System.Lazy<FieldAccessor<Inventory_ResearchTable, UnityEngine.RectTransform>>(() => FieldAccessor<Inventory_ResearchTable, UnityEngine.RectTransform>.Create("content"));
		private static readonly System.Lazy<FieldAccessor<Inventory_ResearchTable, UnityEngine.RectTransform>> _researchItemContent =
				new System.Lazy<FieldAccessor<Inventory_ResearchTable, UnityEngine.RectTransform>>(() => FieldAccessor<Inventory_ResearchTable, UnityEngine.RectTransform>.Create("researchItemContent"));
		private static readonly System.Lazy<FieldAccessor<Inventory_ResearchTable, UnityEngine.UI.Button>> _researchButton =
				new System.Lazy<FieldAccessor<Inventory_ResearchTable, UnityEngine.UI.Button>>(() => FieldAccessor<Inventory_ResearchTable, UnityEngine.UI.Button>.Create("researchButton"));
		private static readonly System.Lazy<FieldAccessor<Inventory_ResearchTable, UnityEngine.UI.Text>> _researchedText =
				new System.Lazy<FieldAccessor<Inventory_ResearchTable, UnityEngine.UI.Text>>(() => FieldAccessor<Inventory_ResearchTable, UnityEngine.UI.Text>.Create("researchedText"));
		private static readonly System.Lazy<FieldAccessor<Inventory_ResearchTable, float>> _menuItemHeight =
				new System.Lazy<FieldAccessor<Inventory_ResearchTable, float>>(() => FieldAccessor<Inventory_ResearchTable, float>.Create("menuItemHeight"));
		private static readonly System.Lazy<FieldAccessor<Inventory_ResearchTable, AvaialableResearchItem>> _availableItemPrefab =
				new System.Lazy<FieldAccessor<Inventory_ResearchTable, AvaialableResearchItem>>(() => FieldAccessor<Inventory_ResearchTable, AvaialableResearchItem>.Create("availableItemPrefab"));
		private static readonly System.Lazy<FieldAccessor<Inventory_ResearchTable, SO_MysteryPackageLoot>> _mysteryPackageLoot =
				new System.Lazy<FieldAccessor<Inventory_ResearchTable, SO_MysteryPackageLoot>>(() => FieldAccessor<Inventory_ResearchTable, SO_MysteryPackageLoot>.Create("mysteryPackageLoot"));
		private static readonly System.Lazy<FieldAccessor<Inventory_ResearchTable, string>> _eventRef_Research =
				new System.Lazy<FieldAccessor<Inventory_ResearchTable, string>>(() => FieldAccessor<Inventory_ResearchTable, string>.Create("eventRef_Research"));
		private static readonly System.Lazy<FieldAccessor<Inventory_ResearchTable, string>> _eventRef_Learn =
				new System.Lazy<FieldAccessor<Inventory_ResearchTable, string>>(() => FieldAccessor<Inventory_ResearchTable, string>.Create("eventRef_Learn"));
		private static readonly System.Lazy<FieldAccessor<Inventory_ResearchTable, System.Collections.Generic.List<ResearchMenuItem>>> _menuItems =
				new System.Lazy<FieldAccessor<Inventory_ResearchTable, System.Collections.Generic.List<ResearchMenuItem>>>(() => FieldAccessor<Inventory_ResearchTable, System.Collections.Generic.List<ResearchMenuItem>>.Create("menuItems"));
		private static readonly System.Lazy<FieldAccessor<Inventory_ResearchTable, System.Collections.Generic.List<Item_Base>>> _researchedItems =
				new System.Lazy<FieldAccessor<Inventory_ResearchTable, System.Collections.Generic.List<Item_Base>>>(() => FieldAccessor<Inventory_ResearchTable, System.Collections.Generic.List<Item_Base>>.Create("researchedItems"));
		private static readonly System.Lazy<FieldAccessor<Inventory_ResearchTable, System.Collections.Generic.Dictionary<Item_Base, AvaialableResearchItem>>> _availableResearchItems =
				new System.Lazy<FieldAccessor<Inventory_ResearchTable, System.Collections.Generic.Dictionary<Item_Base, AvaialableResearchItem>>>(() => FieldAccessor<Inventory_ResearchTable, System.Collections.Generic.Dictionary<Item_Base, AvaialableResearchItem>>.Create("availableResearchItems"));
		private static readonly System.Lazy<FieldAccessor<Inventory_ResearchTable, NotificationManager>> _notificationManager =
				new System.Lazy<FieldAccessor<Inventory_ResearchTable, NotificationManager>>(() => FieldAccessor<Inventory_ResearchTable, NotificationManager>.Create("notificationManager"));

		public static ResearchMenuItem GetMenuItemPrefab(this Inventory_ResearchTable __self) => _menuItemPrefab.Value.GetValue(__self);
		public static void SetMenuItemPrefab(this Inventory_ResearchTable __self, ResearchMenuItem value) => _menuItemPrefab.Value.SetValue(__self, value);
		public static UnityEngine.RectTransform GetContent(this Inventory_ResearchTable __self) => _content.Value.GetValue(__self);
		public static void SetContent(this Inventory_ResearchTable __self, UnityEngine.RectTransform value) => _content.Value.SetValue(__self, value);
		public static UnityEngine.RectTransform GetResearchItemContent(this Inventory_ResearchTable __self) => _researchItemContent.Value.GetValue(__self);
		public static void SetResearchItemContent(this Inventory_ResearchTable __self, UnityEngine.RectTransform value) => _researchItemContent.Value.SetValue(__self, value);
		public static UnityEngine.UI.Button GetResearchButton(this Inventory_ResearchTable __self) => _researchButton.Value.GetValue(__self);
		public static void SetResearchButton(this Inventory_ResearchTable __self, UnityEngine.UI.Button value) => _researchButton.Value.SetValue(__self, value);
		public static UnityEngine.UI.Text GetResearchedText(this Inventory_ResearchTable __self) => _researchedText.Value.GetValue(__self);
		public static void SetResearchedText(this Inventory_ResearchTable __self, UnityEngine.UI.Text value) => _researchedText.Value.SetValue(__self, value);
		public static float GetMenuItemHeight(this Inventory_ResearchTable __self) => _menuItemHeight.Value.GetValue(__self);
		public static void SetMenuItemHeight(this Inventory_ResearchTable __self, float value) => _menuItemHeight.Value.SetValue(__self, value);
		public static AvaialableResearchItem GetAvailableItemPrefab(this Inventory_ResearchTable __self) => _availableItemPrefab.Value.GetValue(__self);
		public static void SetAvailableItemPrefab(this Inventory_ResearchTable __self, AvaialableResearchItem value) => _availableItemPrefab.Value.SetValue(__self, value);
		public static SO_MysteryPackageLoot GetMysteryPackageLoot(this Inventory_ResearchTable __self) => _mysteryPackageLoot.Value.GetValue(__self);
		public static void SetMysteryPackageLoot(this Inventory_ResearchTable __self, SO_MysteryPackageLoot value) => _mysteryPackageLoot.Value.SetValue(__self, value);
		public static string GetEventRef_Research(this Inventory_ResearchTable __self) => _eventRef_Research.Value.GetValue(__self);
		public static void SetEventRef_Research(this Inventory_ResearchTable __self, string value) => _eventRef_Research.Value.SetValue(__self, value);
		public static string GetEventRef_Learn(this Inventory_ResearchTable __self) => _eventRef_Learn.Value.GetValue(__self);
		public static void SetEventRef_Learn(this Inventory_ResearchTable __self, string value) => _eventRef_Learn.Value.SetValue(__self, value);
		public static System.Collections.Generic.List<ResearchMenuItem> GetMenuItems(this Inventory_ResearchTable __self) => _menuItems.Value.GetValue(__self);
		public static void SetMenuItems(this Inventory_ResearchTable __self, System.Collections.Generic.List<ResearchMenuItem> value) => _menuItems.Value.SetValue(__self, value);
		public static System.Collections.Generic.List<Item_Base> GetResearchedItems(this Inventory_ResearchTable __self) => _researchedItems.Value.GetValue(__self);
		public static void SetResearchedItems(this Inventory_ResearchTable __self, System.Collections.Generic.List<Item_Base> value) => _researchedItems.Value.SetValue(__self, value);
		public static System.Collections.Generic.Dictionary<Item_Base, AvaialableResearchItem> GetAvailableResearchItems(this Inventory_ResearchTable __self) => _availableResearchItems.Value.GetValue(__self);
		public static void SetAvailableResearchItems(this Inventory_ResearchTable __self, System.Collections.Generic.Dictionary<Item_Base, AvaialableResearchItem> value) => _availableResearchItems.Value.SetValue(__self, value);
		public static NotificationManager GetNotificationManager(this Inventory_ResearchTable __self) => _notificationManager.Value.GetValue(__self);
		public static void SetNotificationManager(this Inventory_ResearchTable __self, NotificationManager value) => _notificationManager.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Inventory_ResearchTable>> _Awake757602046 =
				new System.Lazy<MethodAccessor<Inventory_ResearchTable>>(() => MethodAccessor<Inventory_ResearchTable>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<Inventory_ResearchTable>> _Start757602046 =
				new System.Lazy<MethodAccessor<Inventory_ResearchTable>>(() => MethodAccessor<Inventory_ResearchTable>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<Inventory_ResearchTable>> _OnWorldRecievedLate757602046 =
				new System.Lazy<MethodAccessor<Inventory_ResearchTable>>(() => MethodAccessor<Inventory_ResearchTable>.Create("OnWorldRecievedLate"));
		private static readonly System.Lazy<MethodAccessor<Inventory_ResearchTable>> _Update757602046 =
				new System.Lazy<MethodAccessor<Inventory_ResearchTable>>(() => MethodAccessor<Inventory_ResearchTable>.Create("Update"));

		public static void Awake(this Inventory_ResearchTable __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this Inventory_ResearchTable __self) => _Start757602046.Value.Invoke(__self);
		public static void OnWorldRecievedLate(this Inventory_ResearchTable __self) => _OnWorldRecievedLate757602046.Value.Invoke(__self);
		public static void Update(this Inventory_ResearchTable __self) => _Update757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Inventory_Trashcan
	{

		private static readonly System.Lazy<FieldAccessor<Inventory_Trashcan, string>> _eventRef_useTrashCan =
				new System.Lazy<FieldAccessor<Inventory_Trashcan, string>>(() => FieldAccessor<Inventory_Trashcan, string>.Create("eventRef_useTrashCan"));

		public static string GetEventRef_useTrashCan(this Inventory_Trashcan __self) => _eventRef_useTrashCan.Value.GetValue(__self);
		public static void SetEventRef_useTrashCan(this Inventory_Trashcan __self, string value) => _eventRef_useTrashCan.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_PlayerInventory
	{

		private static readonly System.Lazy<FieldAccessor<PlayerInventory, InventoryPickup>> _inventoryPickup =
				new System.Lazy<FieldAccessor<PlayerInventory, InventoryPickup>>(() => FieldAccessor<PlayerInventory, InventoryPickup>.Create("inventoryPickup"));
		private static readonly System.Lazy<FieldAccessor<PlayerInventory, Network_Player>> _playerNetwork =
				new System.Lazy<FieldAccessor<PlayerInventory, Network_Player>>(() => FieldAccessor<PlayerInventory, Network_Player>.Create("playerNetwork"));
		private static readonly System.Lazy<FieldAccessor<PlayerInventory, bool>> _backpackEquipped =
				new System.Lazy<FieldAccessor<PlayerInventory, bool>>(() => FieldAccessor<PlayerInventory, bool>.Create("backpackEquipped"));

		public static InventoryPickup GetInventoryPickup(this PlayerInventory __self) => _inventoryPickup.Value.GetValue(__self);
		public static void SetInventoryPickup(this PlayerInventory __self, InventoryPickup value) => _inventoryPickup.Value.SetValue(__self, value);
		public static Network_Player GetPlayerNetwork(this PlayerInventory __self) => _playerNetwork.Value.GetValue(__self);
		public static void SetPlayerNetwork(this PlayerInventory __self, Network_Player value) => _playerNetwork.Value.SetValue(__self, value);
		public static bool GetBackpackEquipped(this PlayerInventory __self) => _backpackEquipped.Value.GetValue(__self);
		public static void SetBackpackEquipped(this PlayerInventory __self, bool value) => _backpackEquipped.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<PlayerInventory>> _Awake757602046 =
				new System.Lazy<MethodAccessor<PlayerInventory>>(() => MethodAccessor<PlayerInventory>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<PlayerInventory>> _Start757602046 =
				new System.Lazy<MethodAccessor<PlayerInventory>>(() => MethodAccessor<PlayerInventory>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<PlayerInventory>> _InitializeSlots757602046 =
				new System.Lazy<MethodAccessor<PlayerInventory>>(() => MethodAccessor<PlayerInventory>.Create("InitializeSlots"));
		private static readonly System.Lazy<MethodAccessor<PlayerInventory>> _Update757602046 =
				new System.Lazy<MethodAccessor<PlayerInventory>>(() => MethodAccessor<PlayerInventory>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<PlayerInventory>> _MoveSlotToEmpty2350494870 =
				new System.Lazy<MethodAccessor<PlayerInventory>>(() => MethodAccessor<PlayerInventory>.Create("MoveSlotToEmpty", typeof(Slot), typeof(Slot), typeof(int)));
		private static readonly System.Lazy<MethodAccessor<PlayerInventory>> _StackSlots2350494870 =
				new System.Lazy<MethodAccessor<PlayerInventory>>(() => MethodAccessor<PlayerInventory>.Create("StackSlots", typeof(Slot), typeof(Slot), typeof(int)));
		private static readonly System.Lazy<MethodAccessor<PlayerInventory>> _SwitchSlots109717226 =
				new System.Lazy<MethodAccessor<PlayerInventory>>(() => MethodAccessor<PlayerInventory>.Create("SwitchSlots", typeof(Slot), typeof(Slot)));
		private static readonly System.Lazy<MethodAccessor<PlayerInventory>> _ContainsSlot3428810800 =
				new System.Lazy<MethodAccessor<PlayerInventory>>(() => MethodAccessor<PlayerInventory>.Create("ContainsSlot", typeof(Slot)));
		private static readonly System.Lazy<MethodAccessor<PlayerInventory>> _RemoveStacksFromSlot1158366468 =
				new System.Lazy<MethodAccessor<PlayerInventory>>(() => MethodAccessor<PlayerInventory>.Create("RemoveStacksFromSlot", typeof(Slot), typeof(int)));
		private static readonly System.Lazy<MethodAccessor<PlayerInventory>> _RemoveStacksFromHotSlot3486186818 =
				new System.Lazy<MethodAccessor<PlayerInventory>>(() => MethodAccessor<PlayerInventory>.Create("RemoveStacksFromHotSlot", typeof(int)));
		private static readonly System.Lazy<MethodAccessor<PlayerInventory>> _FindSuitableSlot1048900267 =
				new System.Lazy<MethodAccessor<PlayerInventory>>(() => MethodAccessor<PlayerInventory>.Create("FindSuitableSlot", typeof(int), typeof(int), typeof(Item_Base)));

		public static void Awake(this PlayerInventory __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this PlayerInventory __self) => _Start757602046.Value.Invoke(__self);
		public static void InitializeSlots(this PlayerInventory __self) => _InitializeSlots757602046.Value.Invoke(__self);
		public static void Update(this PlayerInventory __self) => _Update757602046.Value.Invoke(__self);
		public static void MoveSlotToEmpty(this PlayerInventory __self, Slot fromSlot, Slot toSlot, int amount) => _MoveSlotToEmpty2350494870.Value.Invoke(__self, fromSlot, toSlot, amount);
		public static void StackSlots(this PlayerInventory __self, Slot fromSlot, Slot toSlot, int dragAmount) => _StackSlots2350494870.Value.Invoke(__self, fromSlot, toSlot, dragAmount);
		public static void SwitchSlots(this PlayerInventory __self, Slot fromSlot, Slot toSlot) => _SwitchSlots109717226.Value.Invoke(__self, fromSlot, toSlot);
		public static bool ContainsSlot(this PlayerInventory __self, Slot slot) => (bool)_ContainsSlot3428810800.Value.Invoke(__self, slot);
		public static bool RemoveStacksFromSlot(this PlayerInventory __self, Slot slot, int stacksToRemove) => (bool)_RemoveStacksFromSlot1158366468.Value.Invoke(__self, slot, stacksToRemove);
		public static bool RemoveStacksFromHotSlot(this PlayerInventory __self, int stacksToRemove) => (bool)_RemoveStacksFromHotSlot3486186818.Value.Invoke(__self, stacksToRemove);
		public static Slot FindSuitableSlot(this PlayerInventory __self, int startSlotIndex, int endSlotIndex, Item_Base stackableItem) => (Slot)_FindSuitableSlot1048900267.Value.Invoke(__self, startSlotIndex, endSlotIndex, stackableItem);

	}

	public static class PrivateAccessor_Slot
	{

		private static readonly System.Lazy<FieldAccessor<Slot, Inventory>> _inventory =
				new System.Lazy<FieldAccessor<Slot, Inventory>>(() => FieldAccessor<Slot, Inventory>.Create("inventory"));

		public static Inventory GetInventory(this Slot __self) => _inventory.Value.GetValue(__self);
		public static void SetInventory(this Slot __self, Inventory value) => _inventory.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Slot>> _Awake757602046 =
				new System.Lazy<MethodAccessor<Slot>>(() => MethodAccessor<Slot>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<Slot>> _Start757602046 =
				new System.Lazy<MethodAccessor<Slot>>(() => MethodAccessor<Slot>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<Slot>> _OnEnable757602046 =
				new System.Lazy<MethodAccessor<Slot>>(() => MethodAccessor<Slot>.Create("OnEnable"));
		private static readonly System.Lazy<MethodAccessor<Slot>> _ValidInstance3432562214 =
				new System.Lazy<MethodAccessor<Slot>>(() => MethodAccessor<Slot>.Create("ValidInstance", typeof(ItemInstance)));

		public static void Awake(this Slot __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this Slot __self) => _Start757602046.Value.Invoke(__self);
		public static void OnEnable(this Slot __self) => _OnEnable757602046.Value.Invoke(__self);
		public static bool ValidInstance(this Slot __self, ItemInstance instance) => (bool)_ValidInstance3432562214.Value.Invoke(__self, instance);

	}

	public static class PrivateAccessor_Slot_Equip
	{

		private static readonly System.Lazy<FieldAccessor<Slot_Equip, PlayerEquipment>> _playerEquipment =
				new System.Lazy<FieldAccessor<Slot_Equip, PlayerEquipment>>(() => FieldAccessor<Slot_Equip, PlayerEquipment>.Create("playerEquipment"));

		public static PlayerEquipment GetPlayerEquipment(this Slot_Equip __self) => _playerEquipment.Value.GetValue(__self);
		public static void SetPlayerEquipment(this Slot_Equip __self, PlayerEquipment value) => _playerEquipment.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Slot_Equip>> _Awake757602046 =
				new System.Lazy<MethodAccessor<Slot_Equip>>(() => MethodAccessor<Slot_Equip>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<Slot_Equip>> _Start757602046 =
				new System.Lazy<MethodAccessor<Slot_Equip>>(() => MethodAccessor<Slot_Equip>.Create("Start"));

		public static void Awake(this Slot_Equip __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this Slot_Equip __self) => _Start757602046.Value.Invoke(__self);

	}

	public static class Private_Slot_Equip
	{

		private static readonly System.Lazy<StaticFieldAccessor<System.Collections.Generic.List<Slot_Equip>>> _allEquipSlots =
				new System.Lazy<StaticFieldAccessor<System.Collections.Generic.List<Slot_Equip>>>(() => StaticFieldAccessor<System.Collections.Generic.List<Slot_Equip>>.Create(typeof(Slot_Equip), "allEquipSlots"));

		public static System.Collections.Generic.List<Slot_Equip> GetAllEquipSlots() => _allEquipSlots.Value.GetValue();
		public static void SetAllEquipSlots(System.Collections.Generic.List<Slot_Equip> value) => _allEquipSlots.Value.SetValue(value);

	}

	public static class PrivateAccessor_LODFixer
	{

		private static readonly System.Lazy<FieldAccessor<LODFixer, UnityEngine.LODGroup>> _lodGroup =
				new System.Lazy<FieldAccessor<LODFixer, UnityEngine.LODGroup>>(() => FieldAccessor<LODFixer, UnityEngine.LODGroup>.Create("lodGroup"));
		private static readonly System.Lazy<FieldAccessor<LODFixer, bool>> _isDirty =
				new System.Lazy<FieldAccessor<LODFixer, bool>>(() => FieldAccessor<LODFixer, bool>.Create("isDirty"));

		public static UnityEngine.LODGroup GetLodGroup(this LODFixer __self) => _lodGroup.Value.GetValue(__self);
		public static void SetLodGroup(this LODFixer __self, UnityEngine.LODGroup value) => _lodGroup.Value.SetValue(__self, value);
		public static bool GetIsDirty(this LODFixer __self) => _isDirty.Value.GetValue(__self);
		public static void SetIsDirty(this LODFixer __self, bool value) => _isDirty.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<LODFixer>> _Awake757602046 =
				new System.Lazy<MethodAccessor<LODFixer>>(() => MethodAccessor<LODFixer>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<LODFixer>> _OnValidate757602046 =
				new System.Lazy<MethodAccessor<LODFixer>>(() => MethodAccessor<LODFixer>.Create("OnValidate"));

		public static void Awake(this LODFixer __self) => _Awake757602046.Value.Invoke(__self);
		public static void OnValidate(this LODFixer __self) => _OnValidate757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Landmark
	{

		private static readonly System.Lazy<FieldAccessor<Landmark, TreasurePointManager>> _treasurePointManager =
				new System.Lazy<FieldAccessor<Landmark, TreasurePointManager>>(() => FieldAccessor<Landmark, TreasurePointManager>.Create("treasurePointManager"));
		private static readonly System.Lazy<FieldAccessor<Landmark, bool>> _initialized =
				new System.Lazy<FieldAccessor<Landmark, bool>>(() => FieldAccessor<Landmark, bool>.Create("initialized"));

		public static TreasurePointManager GetTreasurePointManager(this Landmark __self) => _treasurePointManager.Value.GetValue(__self);
		public static void SetTreasurePointManager(this Landmark __self, TreasurePointManager value) => _treasurePointManager.Value.SetValue(__self, value);
		public static bool GetInitialized(this Landmark __self) => _initialized.Value.GetValue(__self);
		public static void SetInitialized(this Landmark __self, bool value) => _initialized.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Landmark>> _GenerateTreasures757602046 =
				new System.Lazy<MethodAccessor<Landmark>>(() => MethodAccessor<Landmark>.Create("GenerateTreasures"));

		public static void GenerateTreasures(this Landmark __self) => _GenerateTreasures757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_LandmarkAchievement
	{

		private static readonly System.Lazy<FieldAccessor<LandmarkAchievement, bool>> _drawGizmosWhenNotSelected =
				new System.Lazy<FieldAccessor<LandmarkAchievement, bool>>(() => FieldAccessor<LandmarkAchievement, bool>.Create("drawGizmosWhenNotSelected"));
		private static readonly System.Lazy<FieldAccessor<LandmarkAchievement, UnityEngine.Transform>> _checkFrom =
				new System.Lazy<FieldAccessor<LandmarkAchievement, UnityEngine.Transform>>(() => FieldAccessor<LandmarkAchievement, UnityEngine.Transform>.Create("checkFrom"));
		private static readonly System.Lazy<FieldAccessor<LandmarkAchievement, Network_Player>> _localPlayer =
				new System.Lazy<FieldAccessor<LandmarkAchievement, Network_Player>>(() => FieldAccessor<LandmarkAchievement, Network_Player>.Create("localPlayer"));

		public static bool GetDrawGizmosWhenNotSelected(this LandmarkAchievement __self) => _drawGizmosWhenNotSelected.Value.GetValue(__self);
		public static void SetDrawGizmosWhenNotSelected(this LandmarkAchievement __self, bool value) => _drawGizmosWhenNotSelected.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetCheckFrom(this LandmarkAchievement __self) => _checkFrom.Value.GetValue(__self);
		public static void SetCheckFrom(this LandmarkAchievement __self, UnityEngine.Transform value) => _checkFrom.Value.SetValue(__self, value);
		public static Network_Player GetLocalPlayer(this LandmarkAchievement __self) => _localPlayer.Value.GetValue(__self);
		public static void SetLocalPlayer(this LandmarkAchievement __self, Network_Player value) => _localPlayer.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<LandmarkAchievement>> _Start757602046 =
				new System.Lazy<MethodAccessor<LandmarkAchievement>>(() => MethodAccessor<LandmarkAchievement>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<LandmarkAchievement>> _Update757602046 =
				new System.Lazy<MethodAccessor<LandmarkAchievement>>(() => MethodAccessor<LandmarkAchievement>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<LandmarkAchievement>> _OnDrawGizmos757602046 =
				new System.Lazy<MethodAccessor<LandmarkAchievement>>(() => MethodAccessor<LandmarkAchievement>.Create("OnDrawGizmos"));
		private static readonly System.Lazy<MethodAccessor<LandmarkAchievement>> _DrawSphereGizmo757602046 =
				new System.Lazy<MethodAccessor<LandmarkAchievement>>(() => MethodAccessor<LandmarkAchievement>.Create("DrawSphereGizmo"));
		private static readonly System.Lazy<MethodAccessor<LandmarkAchievement>> _UpdateAchivementCheck757602046 =
				new System.Lazy<MethodAccessor<LandmarkAchievement>>(() => MethodAccessor<LandmarkAchievement>.Create("UpdateAchivementCheck"));
		private static readonly System.Lazy<MethodAccessor<LandmarkAchievement>> _CheckIfInDistance757602046 =
				new System.Lazy<MethodAccessor<LandmarkAchievement>>(() => MethodAccessor<LandmarkAchievement>.Create("CheckIfInDistance"));
		private static readonly System.Lazy<MethodAccessor<LandmarkAchievement>> _UnlockLandmarkAchievement757602046 =
				new System.Lazy<MethodAccessor<LandmarkAchievement>>(() => MethodAccessor<LandmarkAchievement>.Create("UnlockLandmarkAchievement"));

		public static void Start(this LandmarkAchievement __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this LandmarkAchievement __self) => _Update757602046.Value.Invoke(__self);
		public static void OnDrawGizmos(this LandmarkAchievement __self) => _OnDrawGizmos757602046.Value.Invoke(__self);
		public static void DrawSphereGizmo(this LandmarkAchievement __self) => _DrawSphereGizmo757602046.Value.Invoke(__self);
		public static void UpdateAchivementCheck(this LandmarkAchievement __self) => _UpdateAchivementCheck757602046.Value.Invoke(__self);
		public static bool CheckIfInDistance(this LandmarkAchievement __self) => (bool)_CheckIfInDistance757602046.Value.Invoke(__self);
		public static void UnlockLandmarkAchievement(this LandmarkAchievement __self) => _UnlockLandmarkAchievement757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_LandmarkCaveEntrance
	{

		private static readonly System.Lazy<FieldAccessor<LandmarkCaveEntrance, UnityEngine.TerrainCollider>> _terrainCollider =
				new System.Lazy<FieldAccessor<LandmarkCaveEntrance, UnityEngine.TerrainCollider>>(() => FieldAccessor<LandmarkCaveEntrance, UnityEngine.TerrainCollider>.Create("terrainCollider"));
		private static readonly System.Lazy<FieldAccessor<LandmarkCaveEntrance, UnityEngine.AI.NavMeshLink>> _navmeshLink =
				new System.Lazy<FieldAccessor<LandmarkCaveEntrance, UnityEngine.AI.NavMeshLink>>(() => FieldAccessor<LandmarkCaveEntrance, UnityEngine.AI.NavMeshLink>.Create("navmeshLink"));
		private static readonly System.Lazy<FieldAccessor<LandmarkCaveEntrance, float>> _canCheckZoneTimer =
				new System.Lazy<FieldAccessor<LandmarkCaveEntrance, float>>(() => FieldAccessor<LandmarkCaveEntrance, float>.Create("canCheckZoneTimer"));

		public static UnityEngine.TerrainCollider GetTerrainCollider(this LandmarkCaveEntrance __self) => _terrainCollider.Value.GetValue(__self);
		public static void SetTerrainCollider(this LandmarkCaveEntrance __self, UnityEngine.TerrainCollider value) => _terrainCollider.Value.SetValue(__self, value);
		public static UnityEngine.AI.NavMeshLink GetNavmeshLink(this LandmarkCaveEntrance __self) => _navmeshLink.Value.GetValue(__self);
		public static void SetNavmeshLink(this LandmarkCaveEntrance __self, UnityEngine.AI.NavMeshLink value) => _navmeshLink.Value.SetValue(__self, value);
		public static float GetCanCheckZoneTimer(this LandmarkCaveEntrance __self) => _canCheckZoneTimer.Value.GetValue(__self);
		public static void SetCanCheckZoneTimer(this LandmarkCaveEntrance __self, float value) => _canCheckZoneTimer.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<LandmarkCaveEntrance>> _OnValidate757602046 =
				new System.Lazy<MethodAccessor<LandmarkCaveEntrance>>(() => MethodAccessor<LandmarkCaveEntrance>.Create("OnValidate"));
		private static readonly System.Lazy<MethodAccessor<LandmarkCaveEntrance>> _Update757602046 =
				new System.Lazy<MethodAccessor<LandmarkCaveEntrance>>(() => MethodAccessor<LandmarkCaveEntrance>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<LandmarkCaveEntrance>> _OnTriggerEnter3468606003 =
				new System.Lazy<MethodAccessor<LandmarkCaveEntrance>>(() => MethodAccessor<LandmarkCaveEntrance>.Create("OnTriggerEnter", typeof(UnityEngine.Collider)));
		private static readonly System.Lazy<MethodAccessor<LandmarkCaveEntrance>> _OnTriggerExit3468606003 =
				new System.Lazy<MethodAccessor<LandmarkCaveEntrance>>(() => MethodAccessor<LandmarkCaveEntrance>.Create("OnTriggerExit", typeof(UnityEngine.Collider)));
		private static readonly System.Lazy<MethodAccessor<LandmarkCaveEntrance>> _OnEnable757602046 =
				new System.Lazy<MethodAccessor<LandmarkCaveEntrance>>(() => MethodAccessor<LandmarkCaveEntrance>.Create("OnEnable"));
		private static readonly System.Lazy<MethodAccessor<LandmarkCaveEntrance>> _FixLink757602046 =
				new System.Lazy<MethodAccessor<LandmarkCaveEntrance>>(() => MethodAccessor<LandmarkCaveEntrance>.Create("FixLink"));
		private static readonly System.Lazy<MethodAccessor<LandmarkCaveEntrance>> _HasNoTerrainCollider757602046 =
				new System.Lazy<MethodAccessor<LandmarkCaveEntrance>>(() => MethodAccessor<LandmarkCaveEntrance>.Create("HasNoTerrainCollider"));

		public static void OnValidate(this LandmarkCaveEntrance __self) => _OnValidate757602046.Value.Invoke(__self);
		public static void Update(this LandmarkCaveEntrance __self) => _Update757602046.Value.Invoke(__self);
		public static void OnTriggerEnter(this LandmarkCaveEntrance __self, UnityEngine.Collider other) => _OnTriggerEnter3468606003.Value.Invoke(__self, other);
		public static void OnTriggerExit(this LandmarkCaveEntrance __self, UnityEngine.Collider other) => _OnTriggerExit3468606003.Value.Invoke(__self, other);
		public static void OnEnable(this LandmarkCaveEntrance __self) => _OnEnable757602046.Value.Invoke(__self);
		public static void FixLink(this LandmarkCaveEntrance __self) => _FixLink757602046.Value.Invoke(__self);
		public static bool HasNoTerrainCollider(this LandmarkCaveEntrance __self) => (bool)_HasNoTerrainCollider757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_LandmarkEntityCollection
	{

		private static readonly System.Lazy<FieldAccessor<LandmarkEntityCollection, int>> _minimumSpawnAmount =
				new System.Lazy<FieldAccessor<LandmarkEntityCollection, int>>(() => FieldAccessor<LandmarkEntityCollection, int>.Create("minimumSpawnAmount"));
		private static readonly System.Lazy<FieldAccessor<LandmarkEntityCollection, bool>> _capSpawnAmount =
				new System.Lazy<FieldAccessor<LandmarkEntityCollection, bool>>(() => FieldAccessor<LandmarkEntityCollection, bool>.Create("capSpawnAmount"));
		private static readonly System.Lazy<FieldAccessor<LandmarkEntityCollection, int>> _maximumSpawnAmount =
				new System.Lazy<FieldAccessor<LandmarkEntityCollection, int>>(() => FieldAccessor<LandmarkEntityCollection, int>.Create("maximumSpawnAmount"));

		public static int GetMinimumSpawnAmount(this LandmarkEntityCollection __self) => _minimumSpawnAmount.Value.GetValue(__self);
		public static void SetMinimumSpawnAmount(this LandmarkEntityCollection __self, int value) => _minimumSpawnAmount.Value.SetValue(__self, value);
		public static bool GetCapSpawnAmount(this LandmarkEntityCollection __self) => _capSpawnAmount.Value.GetValue(__self);
		public static void SetCapSpawnAmount(this LandmarkEntityCollection __self, bool value) => _capSpawnAmount.Value.SetValue(__self, value);
		public static int GetMaximumSpawnAmount(this LandmarkEntityCollection __self) => _maximumSpawnAmount.Value.GetValue(__self);
		public static void SetMaximumSpawnAmount(this LandmarkEntityCollection __self, int value) => _maximumSpawnAmount.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<LandmarkEntityCollection>> _Awake757602046 =
				new System.Lazy<MethodAccessor<LandmarkEntityCollection>>(() => MethodAccessor<LandmarkEntityCollection>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<LandmarkEntityCollection>> _OnEnable757602046 =
				new System.Lazy<MethodAccessor<LandmarkEntityCollection>>(() => MethodAccessor<LandmarkEntityCollection>.Create("OnEnable"));
		private static readonly System.Lazy<MethodAccessor<LandmarkEntityCollection>> _InspectorCode757602046 =
				new System.Lazy<MethodAccessor<LandmarkEntityCollection>>(() => MethodAccessor<LandmarkEntityCollection>.Create("InspectorCode"));
		private static readonly System.Lazy<MethodAccessor<LandmarkEntityCollection>> _CalculateSpawnAmount757602046 =
				new System.Lazy<MethodAccessor<LandmarkEntityCollection>>(() => MethodAccessor<LandmarkEntityCollection>.Create("CalculateSpawnAmount"));
		private static readonly System.Lazy<MethodAccessor<LandmarkEntityCollection>> _InitIfSpawnersShouldSpawn757602046 =
				new System.Lazy<MethodAccessor<LandmarkEntityCollection>>(() => MethodAccessor<LandmarkEntityCollection>.Create("InitIfSpawnersShouldSpawn"));
		private static readonly System.Lazy<MethodAccessor<LandmarkEntityCollection>> _AwakeSpawners757602046 =
				new System.Lazy<MethodAccessor<LandmarkEntityCollection>>(() => MethodAccessor<LandmarkEntityCollection>.Create("AwakeSpawners"));
		private static readonly System.Lazy<MethodAccessor<LandmarkEntityCollection>> _RandomizeSpawnerEntities757602046 =
				new System.Lazy<MethodAccessor<LandmarkEntityCollection>>(() => MethodAccessor<LandmarkEntityCollection>.Create("RandomizeSpawnerEntities"));

		public static void Awake(this LandmarkEntityCollection __self) => _Awake757602046.Value.Invoke(__self);
		public static void OnEnable(this LandmarkEntityCollection __self) => _OnEnable757602046.Value.Invoke(__self);
		public static void InspectorCode(this LandmarkEntityCollection __self) => _InspectorCode757602046.Value.Invoke(__self);
		public static int CalculateSpawnAmount(this LandmarkEntityCollection __self) => (int)_CalculateSpawnAmount757602046.Value.Invoke(__self);
		public static void InitIfSpawnersShouldSpawn(this LandmarkEntityCollection __self) => _InitIfSpawnersShouldSpawn757602046.Value.Invoke(__self);
		public static void AwakeSpawners(this LandmarkEntityCollection __self) => _AwakeSpawners757602046.Value.Invoke(__self);
		public static void RandomizeSpawnerEntities(this LandmarkEntityCollection __self) => _RandomizeSpawnerEntities757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_LandmarkEntitySpawner
	{

		private static readonly System.Lazy<FieldAccessor<LandmarkEntitySpawner, bool>> _spawnOnLandmarkReset =
				new System.Lazy<FieldAccessor<LandmarkEntitySpawner, bool>>(() => FieldAccessor<LandmarkEntitySpawner, bool>.Create("spawnOnLandmarkReset"));
		private static readonly System.Lazy<FieldAccessor<LandmarkEntitySpawner, bool>> _shouldSpawn =
				new System.Lazy<FieldAccessor<LandmarkEntitySpawner, bool>>(() => FieldAccessor<LandmarkEntitySpawner, bool>.Create("shouldSpawn"));
		private static readonly System.Lazy<FieldAccessor<LandmarkEntitySpawner, Network_Host_Entities>> _networkHostEntities =
				new System.Lazy<FieldAccessor<LandmarkEntitySpawner, Network_Host_Entities>>(() => FieldAccessor<LandmarkEntitySpawner, Network_Host_Entities>.Create("networkHostEntities"));

		public static bool GetSpawnOnLandmarkReset(this LandmarkEntitySpawner __self) => _spawnOnLandmarkReset.Value.GetValue(__self);
		public static void SetSpawnOnLandmarkReset(this LandmarkEntitySpawner __self, bool value) => _spawnOnLandmarkReset.Value.SetValue(__self, value);
		public static bool GetShouldSpawn(this LandmarkEntitySpawner __self) => _shouldSpawn.Value.GetValue(__self);
		public static void SetShouldSpawn(this LandmarkEntitySpawner __self, bool value) => _shouldSpawn.Value.SetValue(__self, value);
		public static Network_Host_Entities GetNetworkHostEntities(this LandmarkEntitySpawner __self) => _networkHostEntities.Value.GetValue(__self);
		public static void SetNetworkHostEntities(this LandmarkEntitySpawner __self, Network_Host_Entities value) => _networkHostEntities.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<LandmarkEntitySpawner>> _Start757602046 =
				new System.Lazy<MethodAccessor<LandmarkEntitySpawner>>(() => MethodAccessor<LandmarkEntitySpawner>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<LandmarkEntitySpawner>> _OnDisable757602046 =
				new System.Lazy<MethodAccessor<LandmarkEntitySpawner>>(() => MethodAccessor<LandmarkEntitySpawner>.Create("OnDisable"));
		private static readonly System.Lazy<MethodAccessor<LandmarkEntitySpawner>> _OnEnable757602046 =
				new System.Lazy<MethodAccessor<LandmarkEntitySpawner>>(() => MethodAccessor<LandmarkEntitySpawner>.Create("OnEnable"));
		private static readonly System.Lazy<MethodAccessor<LandmarkEntitySpawner>> _OnDrawGizmos757602046 =
				new System.Lazy<MethodAccessor<LandmarkEntitySpawner>>(() => MethodAccessor<LandmarkEntitySpawner>.Create("OnDrawGizmos"));
		private static readonly System.Lazy<MethodAccessor<LandmarkEntitySpawner>> _OnLandmarkReset757602046 =
				new System.Lazy<MethodAccessor<LandmarkEntitySpawner>>(() => MethodAccessor<LandmarkEntitySpawner>.Create("OnLandmarkReset"));
		private static readonly System.Lazy<MethodAccessor<LandmarkEntitySpawner>> _OnLandmarkRemoved757602046 =
				new System.Lazy<MethodAccessor<LandmarkEntitySpawner>>(() => MethodAccessor<LandmarkEntitySpawner>.Create("OnLandmarkRemoved"));
		private static readonly System.Lazy<MethodAccessor<LandmarkEntitySpawner>> _RestoreLate3490701105 =
				new System.Lazy<MethodAccessor<LandmarkEntitySpawner>>(() => MethodAccessor<LandmarkEntitySpawner>.Create("RestoreLate", typeof(RGD_LandmarkSpawner)));
		private static readonly System.Lazy<MethodAccessor<LandmarkEntitySpawner>> _HasSpawnedEntity757602046 =
				new System.Lazy<MethodAccessor<LandmarkEntitySpawner>>(() => MethodAccessor<LandmarkEntitySpawner>.Create("HasSpawnedEntity"));
		private static readonly System.Lazy<MethodAccessor<LandmarkEntitySpawner>> _SpawnFake757602046 =
				new System.Lazy<MethodAccessor<LandmarkEntitySpawner>>(() => MethodAccessor<LandmarkEntitySpawner>.Create("SpawnFake"));
		private static readonly System.Lazy<MethodAccessor<LandmarkEntitySpawner>> _ShouldEntityBeSpawnedInGamemode2623616953 =
				new System.Lazy<MethodAccessor<LandmarkEntitySpawner>>(() => MethodAccessor<LandmarkEntitySpawner>.Create("ShouldEntityBeSpawnedInGamemode", typeof(SO_GameModeValue), typeof(AI_NetworkBehaviourType)));
		private static readonly System.Lazy<MethodAccessor<LandmarkEntitySpawner>> _CreateEntity3450040886 =
				new System.Lazy<MethodAccessor<LandmarkEntitySpawner>>(() => MethodAccessor<LandmarkEntitySpawner>.Create("CreateEntity", typeof(bool)));
		private static readonly System.Lazy<MethodAccessor<LandmarkEntitySpawner>> _TryToSpawnEntity757602046 =
				new System.Lazy<MethodAccessor<LandmarkEntitySpawner>>(() => MethodAccessor<LandmarkEntitySpawner>.Create("TryToSpawnEntity"));

		public static void Start(this LandmarkEntitySpawner __self) => _Start757602046.Value.Invoke(__self);
		public static void OnDisable(this LandmarkEntitySpawner __self) => _OnDisable757602046.Value.Invoke(__self);
		public static void OnEnable(this LandmarkEntitySpawner __self) => _OnEnable757602046.Value.Invoke(__self);
		public static void OnDrawGizmos(this LandmarkEntitySpawner __self) => _OnDrawGizmos757602046.Value.Invoke(__self);
		public static void OnLandmarkReset(this LandmarkEntitySpawner __self) => _OnLandmarkReset757602046.Value.Invoke(__self);
		public static void OnLandmarkRemoved(this LandmarkEntitySpawner __self) => _OnLandmarkRemoved757602046.Value.Invoke(__self);
		public static System.Collections.IEnumerator RestoreLate(this LandmarkEntitySpawner __self, RGD_LandmarkSpawner rgdSpawner) => (System.Collections.IEnumerator)_RestoreLate3490701105.Value.Invoke(__self, rgdSpawner);
		public static bool HasSpawnedEntity(this LandmarkEntitySpawner __self) => (bool)_HasSpawnedEntity757602046.Value.Invoke(__self);
		public static void SpawnFake(this LandmarkEntitySpawner __self) => _SpawnFake757602046.Value.Invoke(__self);
		public static bool ShouldEntityBeSpawnedInGamemode(this LandmarkEntitySpawner __self, SO_GameModeValue p_gameMode, AI_NetworkBehaviourType p_type) => (bool)_ShouldEntityBeSpawnedInGamemode2623616953.Value.Invoke(__self, p_gameMode, p_type);
		public static AI_NetworkBehaviour CreateEntity(this LandmarkEntitySpawner __self, bool forceShouldSpawn) => (AI_NetworkBehaviour)_CreateEntity3450040886.Value.Invoke(__self, forceShouldSpawn);
		public static void TryToSpawnEntity(this LandmarkEntitySpawner __self) => _TryToSpawnEntity757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_LandmarkEntitySpawner_Animator
	{

		private static readonly System.Lazy<FieldAccessor<LandmarkEntitySpawner_Animator, UnityEngine.Animator>> _animator =
				new System.Lazy<FieldAccessor<LandmarkEntitySpawner_Animator, UnityEngine.Animator>>(() => FieldAccessor<LandmarkEntitySpawner_Animator, UnityEngine.Animator>.Create("animator"));
		private static readonly System.Lazy<FieldAccessor<LandmarkEntitySpawner_Animator, AnimatorPropertySetting_Legit>> _animProperties =
				new System.Lazy<FieldAccessor<LandmarkEntitySpawner_Animator, AnimatorPropertySetting_Legit>>(() => FieldAccessor<LandmarkEntitySpawner_Animator, AnimatorPropertySetting_Legit>.Create("animProperties"));
		private static readonly System.Lazy<FieldAccessor<LandmarkEntitySpawner_Animator, string>> _eventRef_openSpawner =
				new System.Lazy<FieldAccessor<LandmarkEntitySpawner_Animator, string>>(() => FieldAccessor<LandmarkEntitySpawner_Animator, string>.Create("eventRef_openSpawner"));
		private static readonly System.Lazy<FieldAccessor<LandmarkEntitySpawner_Animator, float>> _durationTillClose =
				new System.Lazy<FieldAccessor<LandmarkEntitySpawner_Animator, float>>(() => FieldAccessor<LandmarkEntitySpawner_Animator, float>.Create("durationTillClose"));
		private static readonly System.Lazy<FieldAccessor<LandmarkEntitySpawner_Animator, string>> _eventRef_closeSpawner =
				new System.Lazy<FieldAccessor<LandmarkEntitySpawner_Animator, string>>(() => FieldAccessor<LandmarkEntitySpawner_Animator, string>.Create("eventRef_closeSpawner"));
		private static readonly System.Lazy<FieldAccessor<LandmarkEntitySpawner_Animator, UnityEngine.Coroutine>> _animLerpRoutine =
				new System.Lazy<FieldAccessor<LandmarkEntitySpawner_Animator, UnityEngine.Coroutine>>(() => FieldAccessor<LandmarkEntitySpawner_Animator, UnityEngine.Coroutine>.Create("animLerpRoutine"));

		public static UnityEngine.Animator GetAnimator(this LandmarkEntitySpawner_Animator __self) => _animator.Value.GetValue(__self);
		public static void SetAnimator(this LandmarkEntitySpawner_Animator __self, UnityEngine.Animator value) => _animator.Value.SetValue(__self, value);
		public static AnimatorPropertySetting_Legit GetAnimProperties(this LandmarkEntitySpawner_Animator __self) => _animProperties.Value.GetValue(__self);
		public static void SetAnimProperties(this LandmarkEntitySpawner_Animator __self, AnimatorPropertySetting_Legit value) => _animProperties.Value.SetValue(__self, value);
		public static string GetEventRef_openSpawner(this LandmarkEntitySpawner_Animator __self) => _eventRef_openSpawner.Value.GetValue(__self);
		public static void SetEventRef_openSpawner(this LandmarkEntitySpawner_Animator __self, string value) => _eventRef_openSpawner.Value.SetValue(__self, value);
		public static float GetDurationTillClose(this LandmarkEntitySpawner_Animator __self) => _durationTillClose.Value.GetValue(__self);
		public static void SetDurationTillClose(this LandmarkEntitySpawner_Animator __self, float value) => _durationTillClose.Value.SetValue(__self, value);
		public static string GetEventRef_closeSpawner(this LandmarkEntitySpawner_Animator __self) => _eventRef_closeSpawner.Value.GetValue(__self);
		public static void SetEventRef_closeSpawner(this LandmarkEntitySpawner_Animator __self, string value) => _eventRef_closeSpawner.Value.SetValue(__self, value);
		public static UnityEngine.Coroutine GetAnimLerpRoutine(this LandmarkEntitySpawner_Animator __self) => _animLerpRoutine.Value.GetValue(__self);
		public static void SetAnimLerpRoutine(this LandmarkEntitySpawner_Animator __self, UnityEngine.Coroutine value) => _animLerpRoutine.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<LandmarkEntitySpawner_Animator>> _PlayCloseSound757602046 =
				new System.Lazy<MethodAccessor<LandmarkEntitySpawner_Animator>>(() => MethodAccessor<LandmarkEntitySpawner_Animator>.Create("PlayCloseSound"));

		public static void PlayCloseSound(this LandmarkEntitySpawner_Animator __self) => _PlayCloseSound757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_LandmarkEntitySpawner_Repeating
	{

		private static readonly System.Lazy<FieldAccessor<LandmarkEntitySpawner_Repeating, float>> _trySpawnInterval =
				new System.Lazy<FieldAccessor<LandmarkEntitySpawner_Repeating, float>>(() => FieldAccessor<LandmarkEntitySpawner_Repeating, float>.Create("trySpawnInterval"));
		private static readonly System.Lazy<FieldAccessor<LandmarkEntitySpawner_Repeating, GizmoBox>> _spawnZone =
				new System.Lazy<FieldAccessor<LandmarkEntitySpawner_Repeating, GizmoBox>>(() => FieldAccessor<LandmarkEntitySpawner_Repeating, GizmoBox>.Create("spawnZone"));
		private static readonly System.Lazy<FieldAccessor<LandmarkEntitySpawner_Repeating, float>> _spawnTimer =
				new System.Lazy<FieldAccessor<LandmarkEntitySpawner_Repeating, float>>(() => FieldAccessor<LandmarkEntitySpawner_Repeating, float>.Create("spawnTimer"));

		public static float GetTrySpawnInterval(this LandmarkEntitySpawner_Repeating __self) => _trySpawnInterval.Value.GetValue(__self);
		public static void SetTrySpawnInterval(this LandmarkEntitySpawner_Repeating __self, float value) => _trySpawnInterval.Value.SetValue(__self, value);
		public static GizmoBox GetSpawnZone(this LandmarkEntitySpawner_Repeating __self) => _spawnZone.Value.GetValue(__self);
		public static void SetSpawnZone(this LandmarkEntitySpawner_Repeating __self, GizmoBox value) => _spawnZone.Value.SetValue(__self, value);
		public static float GetSpawnTimer(this LandmarkEntitySpawner_Repeating __self) => _spawnTimer.Value.GetValue(__self);
		public static void SetSpawnTimer(this LandmarkEntitySpawner_Repeating __self, float value) => _spawnTimer.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<LandmarkEntitySpawner_Repeating>> _Start757602046 =
				new System.Lazy<MethodAccessor<LandmarkEntitySpawner_Repeating>>(() => MethodAccessor<LandmarkEntitySpawner_Repeating>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<LandmarkEntitySpawner_Repeating>> _Update757602046 =
				new System.Lazy<MethodAccessor<LandmarkEntitySpawner_Repeating>>(() => MethodAccessor<LandmarkEntitySpawner_Repeating>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<LandmarkEntitySpawner_Repeating>> _TryToSpawnEntity757602046 =
				new System.Lazy<MethodAccessor<LandmarkEntitySpawner_Repeating>>(() => MethodAccessor<LandmarkEntitySpawner_Repeating>.Create("TryToSpawnEntity"));

		public static void Start(this LandmarkEntitySpawner_Repeating __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this LandmarkEntitySpawner_Repeating __self) => _Update757602046.Value.Invoke(__self);
		public static void TryToSpawnEntity(this LandmarkEntitySpawner_Repeating __self) => _TryToSpawnEntity757602046.Value.Invoke(__self);

	}

	public static class Private_LandmarkEntitySpawner_Repeating
	{

		private static readonly System.Lazy<StaticFieldAccessor<Raft_Network>> _network =
				new System.Lazy<StaticFieldAccessor<Raft_Network>>(() => StaticFieldAccessor<Raft_Network>.Create(typeof(LandmarkEntitySpawner_Repeating), "network"));

		public static Raft_Network GetNetwork() => _network.Value.GetValue();
		public static void SetNetwork(Raft_Network value) => _network.Value.SetValue(value);

	}

	public static class PrivateAccessor_LandmarkEntitySpawner_Repeating_QuestRequirement
	{

		private static readonly System.Lazy<FieldAccessor<LandmarkEntitySpawner_Repeating_QuestRequirement, QuestType>> _questRequirement =
				new System.Lazy<FieldAccessor<LandmarkEntitySpawner_Repeating_QuestRequirement, QuestType>>(() => FieldAccessor<LandmarkEntitySpawner_Repeating_QuestRequirement, QuestType>.Create("questRequirement"));
		private static readonly System.Lazy<FieldAccessor<LandmarkEntitySpawner_Repeating_QuestRequirement, LandmarkEntitySpawner_Repeating_QuestRequirement.SpawnWhenSetting>> _spawnWhenSetting =
				new System.Lazy<FieldAccessor<LandmarkEntitySpawner_Repeating_QuestRequirement, LandmarkEntitySpawner_Repeating_QuestRequirement.SpawnWhenSetting>>(() => FieldAccessor<LandmarkEntitySpawner_Repeating_QuestRequirement, LandmarkEntitySpawner_Repeating_QuestRequirement.SpawnWhenSetting>.Create("spawnWhenSetting"));
		private static readonly System.Lazy<FieldAccessor<LandmarkEntitySpawner_Repeating_QuestRequirement, bool>> _killSpawnedOnQuestComplete =
				new System.Lazy<FieldAccessor<LandmarkEntitySpawner_Repeating_QuestRequirement, bool>>(() => FieldAccessor<LandmarkEntitySpawner_Repeating_QuestRequirement, bool>.Create("killSpawnedOnQuestComplete"));
		private static readonly System.Lazy<FieldAccessor<LandmarkEntitySpawner_Repeating_QuestRequirement, Quest>> _quest =
				new System.Lazy<FieldAccessor<LandmarkEntitySpawner_Repeating_QuestRequirement, Quest>>(() => FieldAccessor<LandmarkEntitySpawner_Repeating_QuestRequirement, Quest>.Create("quest"));

		public static QuestType GetQuestRequirement(this LandmarkEntitySpawner_Repeating_QuestRequirement __self) => _questRequirement.Value.GetValue(__self);
		public static void SetQuestRequirement(this LandmarkEntitySpawner_Repeating_QuestRequirement __self, QuestType value) => _questRequirement.Value.SetValue(__self, value);
		public static LandmarkEntitySpawner_Repeating_QuestRequirement.SpawnWhenSetting GetSpawnWhenSetting(this LandmarkEntitySpawner_Repeating_QuestRequirement __self) => _spawnWhenSetting.Value.GetValue(__self);
		public static void SetSpawnWhenSetting(this LandmarkEntitySpawner_Repeating_QuestRequirement __self, LandmarkEntitySpawner_Repeating_QuestRequirement.SpawnWhenSetting value) => _spawnWhenSetting.Value.SetValue(__self, value);
		public static bool GetKillSpawnedOnQuestComplete(this LandmarkEntitySpawner_Repeating_QuestRequirement __self) => _killSpawnedOnQuestComplete.Value.GetValue(__self);
		public static void SetKillSpawnedOnQuestComplete(this LandmarkEntitySpawner_Repeating_QuestRequirement __self, bool value) => _killSpawnedOnQuestComplete.Value.SetValue(__self, value);
		public static Quest GetQuest(this LandmarkEntitySpawner_Repeating_QuestRequirement __self) => _quest.Value.GetValue(__self);
		public static void SetQuest(this LandmarkEntitySpawner_Repeating_QuestRequirement __self, Quest value) => _quest.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<LandmarkEntitySpawner_Repeating_QuestRequirement>> _Start757602046 =
				new System.Lazy<MethodAccessor<LandmarkEntitySpawner_Repeating_QuestRequirement>>(() => MethodAccessor<LandmarkEntitySpawner_Repeating_QuestRequirement>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<LandmarkEntitySpawner_Repeating_QuestRequirement>> _TryToSpawnEntity757602046 =
				new System.Lazy<MethodAccessor<LandmarkEntitySpawner_Repeating_QuestRequirement>>(() => MethodAccessor<LandmarkEntitySpawner_Repeating_QuestRequirement>.Create("TryToSpawnEntity"));
		private static readonly System.Lazy<MethodAccessor<LandmarkEntitySpawner_Repeating_QuestRequirement>> _HandleOnQuestIsDone757602046 =
				new System.Lazy<MethodAccessor<LandmarkEntitySpawner_Repeating_QuestRequirement>>(() => MethodAccessor<LandmarkEntitySpawner_Repeating_QuestRequirement>.Create("HandleOnQuestIsDone"));

		public static void Start(this LandmarkEntitySpawner_Repeating_QuestRequirement __self) => _Start757602046.Value.Invoke(__self);
		public static void TryToSpawnEntity(this LandmarkEntitySpawner_Repeating_QuestRequirement __self) => _TryToSpawnEntity757602046.Value.Invoke(__self);
		public static void HandleOnQuestIsDone(this LandmarkEntitySpawner_Repeating_QuestRequirement __self) => _HandleOnQuestIsDone757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_LandmarkEntitySpawner_Trigger
	{

		private static readonly System.Lazy<MethodAccessor<LandmarkEntitySpawner_Trigger>> _OnTriggerEnter3468606003 =
				new System.Lazy<MethodAccessor<LandmarkEntitySpawner_Trigger>>(() => MethodAccessor<LandmarkEntitySpawner_Trigger>.Create("OnTriggerEnter", typeof(UnityEngine.Collider)));

		public static void OnTriggerEnter(this LandmarkEntitySpawner_Trigger __self, UnityEngine.Collider other) => _OnTriggerEnter3468606003.Value.Invoke(__self, other);

	}

	public static class PrivateAccessor_LandmarkEntitySpawner_UniqueQuest
	{

		private static readonly System.Lazy<FieldAccessor<LandmarkEntitySpawner_UniqueQuest, QuestType>> _questType =
				new System.Lazy<FieldAccessor<LandmarkEntitySpawner_UniqueQuest, QuestType>>(() => FieldAccessor<LandmarkEntitySpawner_UniqueQuest, QuestType>.Create("questType"));

		public static QuestType GetQuestType(this LandmarkEntitySpawner_UniqueQuest __self) => _questType.Value.GetValue(__self);
		public static void SetQuestType(this LandmarkEntitySpawner_UniqueQuest __self, QuestType value) => _questType.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<LandmarkEntitySpawner_UniqueQuest>> _CreateEntity3450040886 =
				new System.Lazy<MethodAccessor<LandmarkEntitySpawner_UniqueQuest>>(() => MethodAccessor<LandmarkEntitySpawner_UniqueQuest>.Create("CreateEntity", typeof(bool)));

		public static AI_NetworkBehaviour CreateEntity(this LandmarkEntitySpawner_UniqueQuest __self, bool forceShouldSpawn) => (AI_NetworkBehaviour)_CreateEntity3450040886.Value.Invoke(__self, forceShouldSpawn);

	}

	public static class PrivateAccessor_LandmarkEntitySpawner_VarunaBoss
	{

		private static readonly System.Lazy<FieldAccessor<LandmarkEntitySpawner_VarunaBoss, float>> _timer =
				new System.Lazy<FieldAccessor<LandmarkEntitySpawner_VarunaBoss, float>>(() => FieldAccessor<LandmarkEntitySpawner_VarunaBoss, float>.Create("timer"));

		public static float GetTimer(this LandmarkEntitySpawner_VarunaBoss __self) => _timer.Value.GetValue(__self);
		public static void SetTimer(this LandmarkEntitySpawner_VarunaBoss __self, float value) => _timer.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<LandmarkEntitySpawner_VarunaBoss>> _OnEnable757602046 =
				new System.Lazy<MethodAccessor<LandmarkEntitySpawner_VarunaBoss>>(() => MethodAccessor<LandmarkEntitySpawner_VarunaBoss>.Create("OnEnable"));
		private static readonly System.Lazy<MethodAccessor<LandmarkEntitySpawner_VarunaBoss>> _Update757602046 =
				new System.Lazy<MethodAccessor<LandmarkEntitySpawner_VarunaBoss>>(() => MethodAccessor<LandmarkEntitySpawner_VarunaBoss>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<LandmarkEntitySpawner_VarunaBoss>> _TryToSpawnEntity757602046 =
				new System.Lazy<MethodAccessor<LandmarkEntitySpawner_VarunaBoss>>(() => MethodAccessor<LandmarkEntitySpawner_VarunaBoss>.Create("TryToSpawnEntity"));

		public static void OnEnable(this LandmarkEntitySpawner_VarunaBoss __self) => _OnEnable757602046.Value.Invoke(__self);
		public static void Update(this LandmarkEntitySpawner_VarunaBoss __self) => _Update757602046.Value.Invoke(__self);
		public static void TryToSpawnEntity(this LandmarkEntitySpawner_VarunaBoss __self) => _TryToSpawnEntity757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_LandmarkItem
	{

		private static readonly System.Lazy<FieldAccessor<LandmarkItem, UnityEngine.Object>> _trackBehaviourIDType =
				new System.Lazy<FieldAccessor<LandmarkItem, UnityEngine.Object>>(() => FieldAccessor<LandmarkItem, UnityEngine.Object>.Create("trackBehaviourIDType"));

		public static UnityEngine.Object GetTrackBehaviourIDType(this LandmarkItem __self) => _trackBehaviourIDType.Value.GetValue(__self);
		public static void SetTrackBehaviourIDType(this LandmarkItem __self, UnityEngine.Object value) => _trackBehaviourIDType.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<LandmarkItem>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<LandmarkItem>>(() => MethodAccessor<LandmarkItem>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<LandmarkItem>> _OnValidate757602046 =
				new System.Lazy<MethodAccessor<LandmarkItem>>(() => MethodAccessor<LandmarkItem>.Create("OnValidate"));
		private static readonly System.Lazy<MethodAccessor<LandmarkItem>> _ResetLandmarkItem757602046 =
				new System.Lazy<MethodAccessor<LandmarkItem>>(() => MethodAccessor<LandmarkItem>.Create("ResetLandmarkItem"));

		public static void OnDestroy(this LandmarkItem __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void OnValidate(this LandmarkItem __self) => _OnValidate757602046.Value.Invoke(__self);
		public static void ResetLandmarkItem(this LandmarkItem __self) => _ResetLandmarkItem757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_LandmarkItem_CarryNetworked
	{

		private static readonly System.Lazy<MethodAccessor<LandmarkItem_CarryNetworked>> _OnEnable757602046 =
				new System.Lazy<MethodAccessor<LandmarkItem_CarryNetworked>>(() => MethodAccessor<LandmarkItem_CarryNetworked>.Create("OnEnable"));
		private static readonly System.Lazy<MethodAccessor<LandmarkItem_CarryNetworked>> _OnDisable757602046 =
				new System.Lazy<MethodAccessor<LandmarkItem_CarryNetworked>>(() => MethodAccessor<LandmarkItem_CarryNetworked>.Create("OnDisable"));

		public static void OnEnable(this LandmarkItem_CarryNetworked __self) => _OnEnable757602046.Value.Invoke(__self);
		public static void OnDisable(this LandmarkItem_CarryNetworked __self) => _OnDisable757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_LandmarkItem_CharacterUnlock
	{

		private static readonly System.Lazy<FieldAccessor<LandmarkItem_CharacterUnlock, CharacterUnlock>> _characterUnlock =
				new System.Lazy<FieldAccessor<LandmarkItem_CharacterUnlock, CharacterUnlock>>(() => FieldAccessor<LandmarkItem_CharacterUnlock, CharacterUnlock>.Create("characterUnlock"));
		private static readonly System.Lazy<FieldAccessor<LandmarkItem_CharacterUnlock, bool>> _unlocked =
				new System.Lazy<FieldAccessor<LandmarkItem_CharacterUnlock, bool>>(() => FieldAccessor<LandmarkItem_CharacterUnlock, bool>.Create("unlocked"));

		public static CharacterUnlock GetCharacterUnlock(this LandmarkItem_CharacterUnlock __self) => _characterUnlock.Value.GetValue(__self);
		public static void SetCharacterUnlock(this LandmarkItem_CharacterUnlock __self, CharacterUnlock value) => _characterUnlock.Value.SetValue(__self, value);
		public static bool GetUnlocked(this LandmarkItem_CharacterUnlock __self) => _unlocked.Value.GetValue(__self);
		public static void SetUnlocked(this LandmarkItem_CharacterUnlock __self, bool value) => _unlocked.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_LandmarkItem_Container
	{

		private static readonly System.Lazy<FieldAccessor<LandmarkItem_Container, Container>> _container =
				new System.Lazy<FieldAccessor<LandmarkItem_Container, Container>>(() => FieldAccessor<LandmarkItem_Container, Container>.Create("container"));

		public static Container GetContainer(this LandmarkItem_Container __self) => _container.Value.GetValue(__self);
		public static void SetContainer(this LandmarkItem_Container __self, Container value) => _container.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_LandmarkItem_FightChallenge
	{

		private static readonly System.Lazy<MethodAccessor<LandmarkItem_FightChallenge>> _ResetLandmarkItem757602046 =
				new System.Lazy<MethodAccessor<LandmarkItem_FightChallenge>>(() => MethodAccessor<LandmarkItem_FightChallenge>.Create("ResetLandmarkItem"));

		public static void ResetLandmarkItem(this LandmarkItem_FightChallenge __self) => _ResetLandmarkItem757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_LandmarkItem_JusticeScale
	{

		private static readonly System.Lazy<FieldAccessor<LandmarkItem_JusticeScale, JusticeScale>> _justiceScale =
				new System.Lazy<FieldAccessor<LandmarkItem_JusticeScale, JusticeScale>>(() => FieldAccessor<LandmarkItem_JusticeScale, JusticeScale>.Create("justiceScale"));

		public static JusticeScale GetJusticeScale(this LandmarkItem_JusticeScale __self) => _justiceScale.Value.GetValue(__self);
		public static void SetJusticeScale(this LandmarkItem_JusticeScale __self, JusticeScale value) => _justiceScale.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_LandmarkItem_Pickup_QuestReset
	{

		private static readonly System.Lazy<FieldAccessor<LandmarkItem_Pickup_QuestReset, QuestType>> _resetQuestType =
				new System.Lazy<FieldAccessor<LandmarkItem_Pickup_QuestReset, QuestType>>(() => FieldAccessor<LandmarkItem_Pickup_QuestReset, QuestType>.Create("resetQuestType"));

		public static QuestType GetResetQuestType(this LandmarkItem_Pickup_QuestReset __self) => _resetQuestType.Value.GetValue(__self);
		public static void SetResetQuestType(this LandmarkItem_Pickup_QuestReset __self, QuestType value) => _resetQuestType.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<LandmarkItem_Pickup_QuestReset>> _OnValidate757602046 =
				new System.Lazy<MethodAccessor<LandmarkItem_Pickup_QuestReset>>(() => MethodAccessor<LandmarkItem_Pickup_QuestReset>.Create("OnValidate"));
		private static readonly System.Lazy<MethodAccessor<LandmarkItem_Pickup_QuestReset>> _ResetLandmarkItem757602046 =
				new System.Lazy<MethodAccessor<LandmarkItem_Pickup_QuestReset>>(() => MethodAccessor<LandmarkItem_Pickup_QuestReset>.Create("ResetLandmarkItem"));

		public static void OnValidate(this LandmarkItem_Pickup_QuestReset __self) => _OnValidate757602046.Value.Invoke(__self);
		public static void ResetLandmarkItem(this LandmarkItem_Pickup_QuestReset __self) => _ResetLandmarkItem757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_LandmarkItem_SnowmobileShed
	{

		private static readonly System.Lazy<FieldAccessor<LandmarkItem_SnowmobileShed, SnowmobileShed>> _shed =
				new System.Lazy<FieldAccessor<LandmarkItem_SnowmobileShed, SnowmobileShed>>(() => FieldAccessor<LandmarkItem_SnowmobileShed, SnowmobileShed>.Create("shed"));

		public static SnowmobileShed GetShed(this LandmarkItem_SnowmobileShed __self) => _shed.Value.GetValue(__self);
		public static void SetShed(this LandmarkItem_SnowmobileShed __self, SnowmobileShed value) => _shed.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_LandmarkItem_TradingPost
	{

		private static readonly System.Lazy<FieldAccessor<LandmarkItem_TradingPost, TradingPost>> _tradingPost =
				new System.Lazy<FieldAccessor<LandmarkItem_TradingPost, TradingPost>>(() => FieldAccessor<LandmarkItem_TradingPost, TradingPost>.Create("tradingPost"));

		public static TradingPost GetTradingPost(this LandmarkItem_TradingPost __self) => _tradingPost.Value.GetValue(__self);
		public static void SetTradingPost(this LandmarkItem_TradingPost __self, TradingPost value) => _tradingPost.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_LandmarkItem_WaterLoggedHatch
	{

		private static readonly System.Lazy<FieldAccessor<LandmarkItem_WaterLoggedHatch, UnityEngine.GameObject>> _waterPlane =
				new System.Lazy<FieldAccessor<LandmarkItem_WaterLoggedHatch, UnityEngine.GameObject>>(() => FieldAccessor<LandmarkItem_WaterLoggedHatch, UnityEngine.GameObject>.Create("waterPlane"));
		private static readonly System.Lazy<FieldAccessor<LandmarkItem_WaterLoggedHatch, UnityEngine.ParticleSystem>> _particles =
				new System.Lazy<FieldAccessor<LandmarkItem_WaterLoggedHatch, UnityEngine.ParticleSystem>>(() => FieldAccessor<LandmarkItem_WaterLoggedHatch, UnityEngine.ParticleSystem>.Create("particles"));
		private static readonly System.Lazy<FieldAccessor<LandmarkItem_WaterLoggedHatch, StudioEventEmitterSustain>> _emitter_Hatch =
				new System.Lazy<FieldAccessor<LandmarkItem_WaterLoggedHatch, StudioEventEmitterSustain>>(() => FieldAccessor<LandmarkItem_WaterLoggedHatch, StudioEventEmitterSustain>.Create("emitter_Hatch"));
		private static readonly System.Lazy<FieldAccessor<LandmarkItem_WaterLoggedHatch, StudioEventEmitterSustain>> _emitter_WaterHitFloor =
				new System.Lazy<FieldAccessor<LandmarkItem_WaterLoggedHatch, StudioEventEmitterSustain>>(() => FieldAccessor<LandmarkItem_WaterLoggedHatch, StudioEventEmitterSustain>.Create("emitter_WaterHitFloor"));

		public static UnityEngine.GameObject GetWaterPlane(this LandmarkItem_WaterLoggedHatch __self) => _waterPlane.Value.GetValue(__self);
		public static void SetWaterPlane(this LandmarkItem_WaterLoggedHatch __self, UnityEngine.GameObject value) => _waterPlane.Value.SetValue(__self, value);
		public static UnityEngine.ParticleSystem GetParticles(this LandmarkItem_WaterLoggedHatch __self) => _particles.Value.GetValue(__self);
		public static void SetParticles(this LandmarkItem_WaterLoggedHatch __self, UnityEngine.ParticleSystem value) => _particles.Value.SetValue(__self, value);
		public static StudioEventEmitterSustain GetEmitter_Hatch(this LandmarkItem_WaterLoggedHatch __self) => _emitter_Hatch.Value.GetValue(__self);
		public static void SetEmitter_Hatch(this LandmarkItem_WaterLoggedHatch __self, StudioEventEmitterSustain value) => _emitter_Hatch.Value.SetValue(__self, value);
		public static StudioEventEmitterSustain GetEmitter_WaterHitFloor(this LandmarkItem_WaterLoggedHatch __self) => _emitter_WaterHitFloor.Value.GetValue(__self);
		public static void SetEmitter_WaterHitFloor(this LandmarkItem_WaterLoggedHatch __self, StudioEventEmitterSustain value) => _emitter_WaterHitFloor.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<LandmarkItem_WaterLoggedHatch>> _Awake757602046 =
				new System.Lazy<MethodAccessor<LandmarkItem_WaterLoggedHatch>>(() => MethodAccessor<LandmarkItem_WaterLoggedHatch>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<LandmarkItem_WaterLoggedHatch>> _Start757602046 =
				new System.Lazy<MethodAccessor<LandmarkItem_WaterLoggedHatch>>(() => MethodAccessor<LandmarkItem_WaterLoggedHatch>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<LandmarkItem_WaterLoggedHatch>> _OnWaterFilled757602046 =
				new System.Lazy<MethodAccessor<LandmarkItem_WaterLoggedHatch>>(() => MethodAccessor<LandmarkItem_WaterLoggedHatch>.Create("OnWaterFilled"));

		public static void Awake(this LandmarkItem_WaterLoggedHatch __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this LandmarkItem_WaterLoggedHatch __self) => _Start757602046.Value.Invoke(__self);
		public static void OnWaterFilled(this LandmarkItem_WaterLoggedHatch __self) => _OnWaterFilled757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Landmark_WaterWell
	{

		private static readonly System.Lazy<FieldAccessor<Landmark_WaterWell, UnityEngine.Collider>> _waterCollisionCollider =
				new System.Lazy<FieldAccessor<Landmark_WaterWell, UnityEngine.Collider>>(() => FieldAccessor<Landmark_WaterWell, UnityEngine.Collider>.Create("waterCollisionCollider"));

		public static UnityEngine.Collider GetWaterCollisionCollider(this Landmark_WaterWell __self) => _waterCollisionCollider.Value.GetValue(__self);
		public static void SetWaterCollisionCollider(this Landmark_WaterWell __self, UnityEngine.Collider value) => _waterCollisionCollider.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Landmark_WaterWell>> _Start757602046 =
				new System.Lazy<MethodAccessor<Landmark_WaterWell>>(() => MethodAccessor<Landmark_WaterWell>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<Landmark_WaterWell>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<Landmark_WaterWell>>(() => MethodAccessor<Landmark_WaterWell>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<Landmark_WaterWell>> _UpdateContainerFill757602046 =
				new System.Lazy<MethodAccessor<Landmark_WaterWell>>(() => MethodAccessor<Landmark_WaterWell>.Create("UpdateContainerFill"));

		public static void Start(this Landmark_WaterWell __self) => _Start757602046.Value.Invoke(__self);
		public static void OnDestroy(this Landmark_WaterWell __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void UpdateContainerFill(this Landmark_WaterWell __self) => _UpdateContainerFill757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_RadarLandmark
	{

		private static readonly System.Lazy<MethodAccessor<RadarLandmark>> _OnTriggerEnter3468606003 =
				new System.Lazy<MethodAccessor<RadarLandmark>>(() => MethodAccessor<RadarLandmark>.Create("OnTriggerEnter", typeof(UnityEngine.Collider)));

		public static void OnTriggerEnter(this RadarLandmark __self, UnityEngine.Collider other) => _OnTriggerEnter3468606003.Value.Invoke(__self, other);

	}

	public static class PrivateAccessor_RaftLandmark
	{

		private static readonly System.Lazy<FieldAccessor<RaftLandmark, WaterFloatSemih2>> _waterFloatScript =
				new System.Lazy<FieldAccessor<RaftLandmark, WaterFloatSemih2>>(() => FieldAccessor<RaftLandmark, WaterFloatSemih2>.Create("waterFloatScript"));
		private static readonly System.Lazy<FieldAccessor<RaftLandmark, float>> _positionLerpSpeed =
				new System.Lazy<FieldAccessor<RaftLandmark, float>>(() => FieldAccessor<RaftLandmark, float>.Create("positionLerpSpeed"));
		private static readonly System.Lazy<FieldAccessor<RaftLandmark, float>> _rotationLerpSpeed =
				new System.Lazy<FieldAccessor<RaftLandmark, float>>(() => FieldAccessor<RaftLandmark, float>.Create("rotationLerpSpeed"));
		private static readonly System.Lazy<FieldAccessor<RaftLandmark, Raft_Network>> _network =
				new System.Lazy<FieldAccessor<RaftLandmark, Raft_Network>>(() => FieldAccessor<RaftLandmark, Raft_Network>.Create("network"));
		private static readonly System.Lazy<FieldAccessor<RaftLandmark, UnityEngine.Vector3>> _networkPosition =
				new System.Lazy<FieldAccessor<RaftLandmark, UnityEngine.Vector3>>(() => FieldAccessor<RaftLandmark, UnityEngine.Vector3>.Create("networkPosition"));
		private static readonly System.Lazy<FieldAccessor<RaftLandmark, UnityEngine.Quaternion>> _networkRotation =
				new System.Lazy<FieldAccessor<RaftLandmark, UnityEngine.Quaternion>>(() => FieldAccessor<RaftLandmark, UnityEngine.Quaternion>.Create("networkRotation"));
		private static readonly System.Lazy<FieldAccessor<RaftLandmark, bool>> _triggedSinking =
				new System.Lazy<FieldAccessor<RaftLandmark, bool>>(() => FieldAccessor<RaftLandmark, bool>.Create("triggedSinking"));

		public static WaterFloatSemih2 GetWaterFloatScript(this RaftLandmark __self) => _waterFloatScript.Value.GetValue(__self);
		public static void SetWaterFloatScript(this RaftLandmark __self, WaterFloatSemih2 value) => _waterFloatScript.Value.SetValue(__self, value);
		public static float GetPositionLerpSpeed(this RaftLandmark __self) => _positionLerpSpeed.Value.GetValue(__self);
		public static void SetPositionLerpSpeed(this RaftLandmark __self, float value) => _positionLerpSpeed.Value.SetValue(__self, value);
		public static float GetRotationLerpSpeed(this RaftLandmark __self) => _rotationLerpSpeed.Value.GetValue(__self);
		public static void SetRotationLerpSpeed(this RaftLandmark __self, float value) => _rotationLerpSpeed.Value.SetValue(__self, value);
		public static Raft_Network GetNetwork(this RaftLandmark __self) => _network.Value.GetValue(__self);
		public static void SetNetwork(this RaftLandmark __self, Raft_Network value) => _network.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetNetworkPosition(this RaftLandmark __self) => _networkPosition.Value.GetValue(__self);
		public static void SetNetworkPosition(this RaftLandmark __self, UnityEngine.Vector3 value) => _networkPosition.Value.SetValue(__self, value);
		public static UnityEngine.Quaternion GetNetworkRotation(this RaftLandmark __self) => _networkRotation.Value.GetValue(__self);
		public static void SetNetworkRotation(this RaftLandmark __self, UnityEngine.Quaternion value) => _networkRotation.Value.SetValue(__self, value);
		public static bool GetTriggedSinking(this RaftLandmark __self) => _triggedSinking.Value.GetValue(__self);
		public static void SetTriggedSinking(this RaftLandmark __self, bool value) => _triggedSinking.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<RaftLandmark>> _OnTriggerEnter3468606003 =
				new System.Lazy<MethodAccessor<RaftLandmark>>(() => MethodAccessor<RaftLandmark>.Create("OnTriggerEnter", typeof(UnityEngine.Collider)));
		private static readonly System.Lazy<MethodAccessor<RaftLandmark>> _Update757602046 =
				new System.Lazy<MethodAccessor<RaftLandmark>>(() => MethodAccessor<RaftLandmark>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<RaftLandmark>> _UpdateRemoteClient757602046 =
				new System.Lazy<MethodAccessor<RaftLandmark>>(() => MethodAccessor<RaftLandmark>.Create("UpdateRemoteClient"));
		private static readonly System.Lazy<MethodAccessor<RaftLandmark>> _UpdateLocalClient757602046 =
				new System.Lazy<MethodAccessor<RaftLandmark>>(() => MethodAccessor<RaftLandmark>.Create("UpdateLocalClient"));

		public static void OnTriggerEnter(this RaftLandmark __self, UnityEngine.Collider other) => _OnTriggerEnter3468606003.Value.Invoke(__self, other);
		public static void Update(this RaftLandmark __self) => _Update757602046.Value.Invoke(__self);
		public static void UpdateRemoteClient(this RaftLandmark __self) => _UpdateRemoteClient757602046.Value.Invoke(__self);
		public static void UpdateLocalClient(this RaftLandmark __self) => _UpdateLocalClient757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Sink
	{

		private static readonly System.Lazy<FieldAccessor<Sink, float>> _sinkSpeed =
				new System.Lazy<FieldAccessor<Sink, float>>(() => FieldAccessor<Sink, float>.Create("sinkSpeed"));
		private static readonly System.Lazy<FieldAccessor<Sink, float>> _rotationSped =
				new System.Lazy<FieldAccessor<Sink, float>>(() => FieldAccessor<Sink, float>.Create("rotationSped"));
		private static readonly System.Lazy<FieldAccessor<Sink, bool>> _sinking =
				new System.Lazy<FieldAccessor<Sink, bool>>(() => FieldAccessor<Sink, bool>.Create("sinking"));
		private static readonly System.Lazy<FieldAccessor<Sink, UnityEngine.Vector3>> _randomRotationValues =
				new System.Lazy<FieldAccessor<Sink, UnityEngine.Vector3>>(() => FieldAccessor<Sink, UnityEngine.Vector3>.Create("randomRotationValues"));

		public static float GetSinkSpeed(this Sink __self) => _sinkSpeed.Value.GetValue(__self);
		public static void SetSinkSpeed(this Sink __self, float value) => _sinkSpeed.Value.SetValue(__self, value);
		public static float GetRotationSped(this Sink __self) => _rotationSped.Value.GetValue(__self);
		public static void SetRotationSped(this Sink __self, float value) => _rotationSped.Value.SetValue(__self, value);
		public static bool GetSinking(this Sink __self) => _sinking.Value.GetValue(__self);
		public static void SetSinking(this Sink __self, bool value) => _sinking.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetRandomRotationValues(this Sink __self) => _randomRotationValues.Value.GetValue(__self);
		public static void SetRandomRotationValues(this Sink __self, UnityEngine.Vector3 value) => _randomRotationValues.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Sink>> _Update757602046 =
				new System.Lazy<MethodAccessor<Sink>>(() => MethodAccessor<Sink>.Create("Update"));

		public static void Update(this Sink __self) => _Update757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_LightAutoIllumination
	{

		private static readonly System.Lazy<MethodAccessor<LightAutoIllumination>> _IsValidForIllumination757602046 =
				new System.Lazy<MethodAccessor<LightAutoIllumination>>(() => MethodAccessor<LightAutoIllumination>.Create("IsValidForIllumination"));

		public static bool IsValidForIllumination(this LightAutoIllumination __self) => (bool)_IsValidForIllumination757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_LightNightNDayToggler
	{

		private static readonly System.Lazy<FieldAccessor<LightNightNDayToggler, UnityEngine.Light>> _lightComponent =
				new System.Lazy<FieldAccessor<LightNightNDayToggler, UnityEngine.Light>>(() => FieldAccessor<LightNightNDayToggler, UnityEngine.Light>.Create("lightComponent"));
		private static readonly System.Lazy<FieldAccessor<LightNightNDayToggler, bool>> _modifyIntesityByDistance =
				new System.Lazy<FieldAccessor<LightNightNDayToggler, bool>>(() => FieldAccessor<LightNightNDayToggler, bool>.Create("modifyIntesityByDistance"));
		private static readonly System.Lazy<FieldAccessor<LightNightNDayToggler, int>> _fullIntensityDistance =
				new System.Lazy<FieldAccessor<LightNightNDayToggler, int>>(() => FieldAccessor<LightNightNDayToggler, int>.Create("fullIntensityDistance"));
		private static readonly System.Lazy<FieldAccessor<LightNightNDayToggler, int>> _zeroIntensityDistance =
				new System.Lazy<FieldAccessor<LightNightNDayToggler, int>>(() => FieldAccessor<LightNightNDayToggler, int>.Create("zeroIntensityDistance"));
		private static readonly System.Lazy<FieldAccessor<LightNightNDayToggler, float>> _lerpSpeed =
				new System.Lazy<FieldAccessor<LightNightNDayToggler, float>>(() => FieldAccessor<LightNightNDayToggler, float>.Create("lerpSpeed"));
		private static readonly System.Lazy<FieldAccessor<LightNightNDayToggler, float>> _originIntensity =
				new System.Lazy<FieldAccessor<LightNightNDayToggler, float>>(() => FieldAccessor<LightNightNDayToggler, float>.Create("originIntensity"));
		private static readonly System.Lazy<FieldAccessor<LightNightNDayToggler, float>> _distanceModifier =
				new System.Lazy<FieldAccessor<LightNightNDayToggler, float>>(() => FieldAccessor<LightNightNDayToggler, float>.Create("distanceModifier"));

		public static UnityEngine.Light GetLightComponent(this LightNightNDayToggler __self) => _lightComponent.Value.GetValue(__self);
		public static void SetLightComponent(this LightNightNDayToggler __self, UnityEngine.Light value) => _lightComponent.Value.SetValue(__self, value);
		public static bool GetModifyIntesityByDistance(this LightNightNDayToggler __self) => _modifyIntesityByDistance.Value.GetValue(__self);
		public static void SetModifyIntesityByDistance(this LightNightNDayToggler __self, bool value) => _modifyIntesityByDistance.Value.SetValue(__self, value);
		public static int GetFullIntensityDistance(this LightNightNDayToggler __self) => _fullIntensityDistance.Value.GetValue(__self);
		public static void SetFullIntensityDistance(this LightNightNDayToggler __self, int value) => _fullIntensityDistance.Value.SetValue(__self, value);
		public static int GetZeroIntensityDistance(this LightNightNDayToggler __self) => _zeroIntensityDistance.Value.GetValue(__self);
		public static void SetZeroIntensityDistance(this LightNightNDayToggler __self, int value) => _zeroIntensityDistance.Value.SetValue(__self, value);
		public static float GetLerpSpeed(this LightNightNDayToggler __self) => _lerpSpeed.Value.GetValue(__self);
		public static void SetLerpSpeed(this LightNightNDayToggler __self, float value) => _lerpSpeed.Value.SetValue(__self, value);
		public static float GetOriginIntensity(this LightNightNDayToggler __self) => _originIntensity.Value.GetValue(__self);
		public static void SetOriginIntensity(this LightNightNDayToggler __self, float value) => _originIntensity.Value.SetValue(__self, value);
		public static float GetDistanceModifier(this LightNightNDayToggler __self) => _distanceModifier.Value.GetValue(__self);
		public static void SetDistanceModifier(this LightNightNDayToggler __self, float value) => _distanceModifier.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<LightNightNDayToggler>> _SetLightIntensity3486905475 =
				new System.Lazy<MethodAccessor<LightNightNDayToggler>>(() => MethodAccessor<LightNightNDayToggler>.Create("SetLightIntensity", typeof(float)));
		private static readonly System.Lazy<MethodAccessor<LightNightNDayToggler>> _IsValidForIllumination757602046 =
				new System.Lazy<MethodAccessor<LightNightNDayToggler>>(() => MethodAccessor<LightNightNDayToggler>.Create("IsValidForIllumination"));

		public static void SetLightIntensity(this LightNightNDayToggler __self, float targetValue) => _SetLightIntensity3486905475.Value.Invoke(__self, targetValue);
		public static bool IsValidForIllumination(this LightNightNDayToggler __self) => (bool)_IsValidForIllumination757602046.Value.Invoke(__self);

	}

	public static class Private_LightNightNDayToggler
	{

		private static readonly System.Lazy<StaticFieldAccessor<float>> _nightTimeStart =
				new System.Lazy<StaticFieldAccessor<float>>(() => StaticFieldAccessor<float>.Create(typeof(LightNightNDayToggler), "nightTimeStart"));
		private static readonly System.Lazy<StaticFieldAccessor<float>> _nightTimeEnd =
				new System.Lazy<StaticFieldAccessor<float>>(() => StaticFieldAccessor<float>.Create(typeof(LightNightNDayToggler), "nightTimeEnd"));
		private static readonly System.Lazy<StaticFieldAccessor<UnityEngine.AzureSky.AzureSkyController>> _skyController =
				new System.Lazy<StaticFieldAccessor<UnityEngine.AzureSky.AzureSkyController>>(() => StaticFieldAccessor<UnityEngine.AzureSky.AzureSkyController>.Create(typeof(LightNightNDayToggler), "skyController"));
		private static readonly System.Lazy<StaticFieldAccessor<UnityEngine.Transform>> _mainCameraTransform =
				new System.Lazy<StaticFieldAccessor<UnityEngine.Transform>>(() => StaticFieldAccessor<UnityEngine.Transform>.Create(typeof(LightNightNDayToggler), "mainCameraTransform"));

		public static float GetNightTimeStart() => _nightTimeStart.Value.GetValue();
		public static void SetNightTimeStart(float value) => _nightTimeStart.Value.SetValue(value);
		public static float GetNightTimeEnd() => _nightTimeEnd.Value.GetValue();
		public static void SetNightTimeEnd(float value) => _nightTimeEnd.Value.SetValue(value);
		public static UnityEngine.AzureSky.AzureSkyController GetSkyController() => _skyController.Value.GetValue();
		public static void SetSkyController(UnityEngine.AzureSky.AzureSkyController value) => _skyController.Value.SetValue(value);
		public static UnityEngine.Transform GetMainCameraTransform() => _mainCameraTransform.Value.GetValue();
		public static void SetMainCameraTransform(UnityEngine.Transform value) => _mainCameraTransform.Value.SetValue(value);

	}

	public static class PrivateAccessor_LightFlickering
	{

		private static readonly System.Lazy<FieldAccessor<LightFlickering, LightSingularity>> _lightSingularity =
				new System.Lazy<FieldAccessor<LightFlickering, LightSingularity>>(() => FieldAccessor<LightFlickering, LightSingularity>.Create("lightSingularity"));
		private static readonly System.Lazy<FieldAccessor<LightFlickering, float>> _baseIntensity =
				new System.Lazy<FieldAccessor<LightFlickering, float>>(() => FieldAccessor<LightFlickering, float>.Create("baseIntensity"));
		private static readonly System.Lazy<FieldAccessor<LightFlickering, float>> _waitTimer =
				new System.Lazy<FieldAccessor<LightFlickering, float>>(() => FieldAccessor<LightFlickering, float>.Create("waitTimer"));
		private static readonly System.Lazy<FieldAccessor<LightFlickering, float>> _intensity =
				new System.Lazy<FieldAccessor<LightFlickering, float>>(() => FieldAccessor<LightFlickering, float>.Create("intensity"));

		public static LightSingularity GetLightSingularity(this LightFlickering __self) => _lightSingularity.Value.GetValue(__self);
		public static void SetLightSingularity(this LightFlickering __self, LightSingularity value) => _lightSingularity.Value.SetValue(__self, value);
		public static float GetBaseIntensity(this LightFlickering __self) => _baseIntensity.Value.GetValue(__self);
		public static void SetBaseIntensity(this LightFlickering __self, float value) => _baseIntensity.Value.SetValue(__self, value);
		public static float GetWaitTimer(this LightFlickering __self) => _waitTimer.Value.GetValue(__self);
		public static void SetWaitTimer(this LightFlickering __self, float value) => _waitTimer.Value.SetValue(__self, value);
		public static float GetIntensity(this LightFlickering __self) => _intensity.Value.GetValue(__self);
		public static void SetIntensity(this LightFlickering __self, float value) => _intensity.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<LightFlickering>> _Update757602046 =
				new System.Lazy<MethodAccessor<LightFlickering>>(() => MethodAccessor<LightFlickering>.Create("Update"));

		public static void Update(this LightFlickering __self) => _Update757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_LightFlickeringNonSingularity
	{

		private static readonly System.Lazy<FieldAccessor<LightFlickeringNonSingularity, float>> _maxReduction =
				new System.Lazy<FieldAccessor<LightFlickeringNonSingularity, float>>(() => FieldAccessor<LightFlickeringNonSingularity, float>.Create("maxReduction"));
		private static readonly System.Lazy<FieldAccessor<LightFlickeringNonSingularity, float>> _maxIncrease =
				new System.Lazy<FieldAccessor<LightFlickeringNonSingularity, float>>(() => FieldAccessor<LightFlickeringNonSingularity, float>.Create("maxIncrease"));
		private static readonly System.Lazy<FieldAccessor<LightFlickeringNonSingularity, Interval_Float>> _rateDamping =
				new System.Lazy<FieldAccessor<LightFlickeringNonSingularity, Interval_Float>>(() => FieldAccessor<LightFlickeringNonSingularity, Interval_Float>.Create("rateDamping"));
		private static readonly System.Lazy<FieldAccessor<LightFlickeringNonSingularity, float>> _strength =
				new System.Lazy<FieldAccessor<LightFlickeringNonSingularity, float>>(() => FieldAccessor<LightFlickeringNonSingularity, float>.Create("strength"));
		private static readonly System.Lazy<FieldAccessor<LightFlickeringNonSingularity, float>> _overallMultiplier =
				new System.Lazy<FieldAccessor<LightFlickeringNonSingularity, float>>(() => FieldAccessor<LightFlickeringNonSingularity, float>.Create("overallMultiplier"));
		private static readonly System.Lazy<FieldAccessor<LightFlickeringNonSingularity, int>> _fullIntensityDistance =
				new System.Lazy<FieldAccessor<LightFlickeringNonSingularity, int>>(() => FieldAccessor<LightFlickeringNonSingularity, int>.Create("fullIntensityDistance"));
		private static readonly System.Lazy<FieldAccessor<LightFlickeringNonSingularity, int>> _zeroIntensityDistance =
				new System.Lazy<FieldAccessor<LightFlickeringNonSingularity, int>>(() => FieldAccessor<LightFlickeringNonSingularity, int>.Create("zeroIntensityDistance"));
		private static readonly System.Lazy<FieldAccessor<LightFlickeringNonSingularity, UnityEngine.Light>> _m_light =
				new System.Lazy<FieldAccessor<LightFlickeringNonSingularity, UnityEngine.Light>>(() => FieldAccessor<LightFlickeringNonSingularity, UnityEngine.Light>.Create("m_light"));
		private static readonly System.Lazy<FieldAccessor<LightFlickeringNonSingularity, float>> _baseIntensity =
				new System.Lazy<FieldAccessor<LightFlickeringNonSingularity, float>>(() => FieldAccessor<LightFlickeringNonSingularity, float>.Create("baseIntensity"));
		private static readonly System.Lazy<FieldAccessor<LightFlickeringNonSingularity, float>> _waitTimer =
				new System.Lazy<FieldAccessor<LightFlickeringNonSingularity, float>>(() => FieldAccessor<LightFlickeringNonSingularity, float>.Create("waitTimer"));
		private static readonly System.Lazy<FieldAccessor<LightFlickeringNonSingularity, float>> _intensity =
				new System.Lazy<FieldAccessor<LightFlickeringNonSingularity, float>>(() => FieldAccessor<LightFlickeringNonSingularity, float>.Create("intensity"));

		public static float GetMaxReduction(this LightFlickeringNonSingularity __self) => _maxReduction.Value.GetValue(__self);
		public static void SetMaxReduction(this LightFlickeringNonSingularity __self, float value) => _maxReduction.Value.SetValue(__self, value);
		public static float GetMaxIncrease(this LightFlickeringNonSingularity __self) => _maxIncrease.Value.GetValue(__self);
		public static void SetMaxIncrease(this LightFlickeringNonSingularity __self, float value) => _maxIncrease.Value.SetValue(__self, value);
		public static Interval_Float GetRateDamping(this LightFlickeringNonSingularity __self) => _rateDamping.Value.GetValue(__self);
		public static void SetRateDamping(this LightFlickeringNonSingularity __self, Interval_Float value) => _rateDamping.Value.SetValue(__self, value);
		public static float GetStrength(this LightFlickeringNonSingularity __self) => _strength.Value.GetValue(__self);
		public static void SetStrength(this LightFlickeringNonSingularity __self, float value) => _strength.Value.SetValue(__self, value);
		public static float GetOverallMultiplier(this LightFlickeringNonSingularity __self) => _overallMultiplier.Value.GetValue(__self);
		public static void SetOverallMultiplier(this LightFlickeringNonSingularity __self, float value) => _overallMultiplier.Value.SetValue(__self, value);
		public static int GetFullIntensityDistance(this LightFlickeringNonSingularity __self) => _fullIntensityDistance.Value.GetValue(__self);
		public static void SetFullIntensityDistance(this LightFlickeringNonSingularity __self, int value) => _fullIntensityDistance.Value.SetValue(__self, value);
		public static int GetZeroIntensityDistance(this LightFlickeringNonSingularity __self) => _zeroIntensityDistance.Value.GetValue(__self);
		public static void SetZeroIntensityDistance(this LightFlickeringNonSingularity __self, int value) => _zeroIntensityDistance.Value.SetValue(__self, value);
		public static UnityEngine.Light GetM_light(this LightFlickeringNonSingularity __self) => _m_light.Value.GetValue(__self);
		public static void SetM_light(this LightFlickeringNonSingularity __self, UnityEngine.Light value) => _m_light.Value.SetValue(__self, value);
		public static float GetBaseIntensity(this LightFlickeringNonSingularity __self) => _baseIntensity.Value.GetValue(__self);
		public static void SetBaseIntensity(this LightFlickeringNonSingularity __self, float value) => _baseIntensity.Value.SetValue(__self, value);
		public static float GetWaitTimer(this LightFlickeringNonSingularity __self) => _waitTimer.Value.GetValue(__self);
		public static void SetWaitTimer(this LightFlickeringNonSingularity __self, float value) => _waitTimer.Value.SetValue(__self, value);
		public static float GetIntensity(this LightFlickeringNonSingularity __self) => _intensity.Value.GetValue(__self);
		public static void SetIntensity(this LightFlickeringNonSingularity __self, float value) => _intensity.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<LightFlickeringNonSingularity>> _Update757602046 =
				new System.Lazy<MethodAccessor<LightFlickeringNonSingularity>>(() => MethodAccessor<LightFlickeringNonSingularity>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<LightFlickeringNonSingularity>> _FindCamera757602046 =
				new System.Lazy<MethodAccessor<LightFlickeringNonSingularity>>(() => MethodAccessor<LightFlickeringNonSingularity>.Create("FindCamera"));

		public static void Update(this LightFlickeringNonSingularity __self) => _Update757602046.Value.Invoke(__self);
		public static bool FindCamera(this LightFlickeringNonSingularity __self) => (bool)_FindCamera757602046.Value.Invoke(__self);

	}

	public static class Private_LightFlickeringNonSingularity
	{

		private static readonly System.Lazy<StaticFieldAccessor<UnityEngine.Transform>> _mainCameraTransform =
				new System.Lazy<StaticFieldAccessor<UnityEngine.Transform>>(() => StaticFieldAccessor<UnityEngine.Transform>.Create(typeof(LightFlickeringNonSingularity), "mainCameraTransform"));

		public static UnityEngine.Transform GetMainCameraTransform() => _mainCameraTransform.Value.GetValue();
		public static void SetMainCameraTransform(UnityEngine.Transform value) => _mainCameraTransform.Value.SetValue(value);

	}

	public static class PrivateAccessor_LightSingularity
	{

		private static readonly System.Lazy<FieldAccessor<LightSingularity, System.Collections.Generic.List<LightSingularityExternal>>> _externals =
				new System.Lazy<FieldAccessor<LightSingularity, System.Collections.Generic.List<LightSingularityExternal>>>(() => FieldAccessor<LightSingularity, System.Collections.Generic.List<LightSingularityExternal>>.Create("externals"));
		private static readonly System.Lazy<FieldAccessor<LightSingularity, LightSingularityManager>> _lightManager =
				new System.Lazy<FieldAccessor<LightSingularity, LightSingularityManager>>(() => FieldAccessor<LightSingularity, LightSingularityManager>.Create("lightManager"));
		private static readonly System.Lazy<FieldAccessor<LightSingularity, LightSingularityExternal>> _currentFurthestExternal =
				new System.Lazy<FieldAccessor<LightSingularity, LightSingularityExternal>>(() => FieldAccessor<LightSingularity, LightSingularityExternal>.Create("currentFurthestExternal"));
		private static readonly System.Lazy<FieldAccessor<LightSingularity, UnityEngine.Light>> _lightComponent =
				new System.Lazy<FieldAccessor<LightSingularity, UnityEngine.Light>>(() => FieldAccessor<LightSingularity, UnityEngine.Light>.Create("lightComponent"));

		public static System.Collections.Generic.List<LightSingularityExternal> GetExternals(this LightSingularity __self) => _externals.Value.GetValue(__self);
		public static void SetExternals(this LightSingularity __self, System.Collections.Generic.List<LightSingularityExternal> value) => _externals.Value.SetValue(__self, value);
		public static LightSingularityManager GetLightManager(this LightSingularity __self) => _lightManager.Value.GetValue(__self);
		public static void SetLightManager(this LightSingularity __self, LightSingularityManager value) => _lightManager.Value.SetValue(__self, value);
		public static LightSingularityExternal GetCurrentFurthestExternal(this LightSingularity __self) => _currentFurthestExternal.Value.GetValue(__self);
		public static void SetCurrentFurthestExternal(this LightSingularity __self, LightSingularityExternal value) => _currentFurthestExternal.Value.SetValue(__self, value);
		public static UnityEngine.Light GetLightComponent(this LightSingularity __self) => _lightComponent.Value.GetValue(__self);
		public static void SetLightComponent(this LightSingularity __self, UnityEngine.Light value) => _lightComponent.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<LightSingularity>> _Awake757602046 =
				new System.Lazy<MethodAccessor<LightSingularity>>(() => MethodAccessor<LightSingularity>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<LightSingularity>> _OnEnable757602046 =
				new System.Lazy<MethodAccessor<LightSingularity>>(() => MethodAccessor<LightSingularity>.Create("OnEnable"));
		private static readonly System.Lazy<MethodAccessor<LightSingularity>> _Start757602046 =
				new System.Lazy<MethodAccessor<LightSingularity>>(() => MethodAccessor<LightSingularity>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<LightSingularity>> _SetLightActive3417358197 =
				new System.Lazy<MethodAccessor<LightSingularity>>(() => MethodAccessor<LightSingularity>.Create("SetLightActive", typeof(UnityEngine.Light), typeof(bool)));
		private static readonly System.Lazy<MethodAccessor<LightSingularity>> _OnDrawGizmos757602046 =
				new System.Lazy<MethodAccessor<LightSingularity>>(() => MethodAccessor<LightSingularity>.Create("OnDrawGizmos"));

		public static void Awake(this LightSingularity __self) => _Awake757602046.Value.Invoke(__self);
		public static void OnEnable(this LightSingularity __self) => _OnEnable757602046.Value.Invoke(__self);
		public static void Start(this LightSingularity __self) => _Start757602046.Value.Invoke(__self);
		public static void SetLightActive(this LightSingularity __self, UnityEngine.Light p_light, bool p_value) => _SetLightActive3417358197.Value.Invoke(__self, p_light, p_value);
		public static void OnDrawGizmos(this LightSingularity __self) => _OnDrawGizmos757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_LightSingularityExternal
	{

		private static readonly System.Lazy<FieldAccessor<LightSingularityExternal, LightSingularityManager>> _lightManager =
				new System.Lazy<FieldAccessor<LightSingularityExternal, LightSingularityManager>>(() => FieldAccessor<LightSingularityExternal, LightSingularityManager>.Create("lightManager"));
		private static readonly System.Lazy<FieldAccessor<LightSingularityExternal, bool>> _isSingularity =
				new System.Lazy<FieldAccessor<LightSingularityExternal, bool>>(() => FieldAccessor<LightSingularityExternal, bool>.Create("isSingularity"));
		private static readonly System.Lazy<FieldAccessor<LightSingularityExternal, LightSingularity>> _morphedLightSingularity =
				new System.Lazy<FieldAccessor<LightSingularityExternal, LightSingularity>>(() => FieldAccessor<LightSingularityExternal, LightSingularity>.Create("morphedLightSingularity"));
		private static readonly System.Lazy<FieldAccessor<LightSingularityExternal, bool>> _hasBeenPlaced =
				new System.Lazy<FieldAccessor<LightSingularityExternal, bool>>(() => FieldAccessor<LightSingularityExternal, bool>.Create("hasBeenPlaced"));

		public static LightSingularityManager GetLightManager(this LightSingularityExternal __self) => _lightManager.Value.GetValue(__self);
		public static void SetLightManager(this LightSingularityExternal __self, LightSingularityManager value) => _lightManager.Value.SetValue(__self, value);
		public static bool GetIsSingularity(this LightSingularityExternal __self) => _isSingularity.Value.GetValue(__self);
		public static void SetIsSingularity(this LightSingularityExternal __self, bool value) => _isSingularity.Value.SetValue(__self, value);
		public static LightSingularity GetMorphedLightSingularity(this LightSingularityExternal __self) => _morphedLightSingularity.Value.GetValue(__self);
		public static void SetMorphedLightSingularity(this LightSingularityExternal __self, LightSingularity value) => _morphedLightSingularity.Value.SetValue(__self, value);
		public static bool GetHasBeenPlaced(this LightSingularityExternal __self) => _hasBeenPlaced.Value.GetValue(__self);
		public static void SetHasBeenPlaced(this LightSingularityExternal __self, bool value) => _hasBeenPlaced.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<LightSingularityExternal>> _CheckConnectivityToMorphedSingularity757602046 =
				new System.Lazy<MethodAccessor<LightSingularityExternal>>(() => MethodAccessor<LightSingularityExternal>.Create("CheckConnectivityToMorphedSingularity"));
		private static readonly System.Lazy<MethodAccessor<LightSingularityExternal>> _DisconnectFromSingularity757602046 =
				new System.Lazy<MethodAccessor<LightSingularityExternal>>(() => MethodAccessor<LightSingularityExternal>.Create("DisconnectFromSingularity"));

		public static bool CheckConnectivityToMorphedSingularity(this LightSingularityExternal __self) => (bool)_CheckConnectivityToMorphedSingularity757602046.Value.Invoke(__self);
		public static void DisconnectFromSingularity(this LightSingularityExternal __self) => _DisconnectFromSingularity757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_LightSingularityManager
	{

		private static readonly System.Lazy<FieldAccessor<LightSingularityManager, System.Collections.Generic.List<LightSingularityExternal>>> _lightSources =
				new System.Lazy<FieldAccessor<LightSingularityManager, System.Collections.Generic.List<LightSingularityExternal>>>(() => FieldAccessor<LightSingularityManager, System.Collections.Generic.List<LightSingularityExternal>>.Create("lightSources"));
		private static readonly System.Lazy<FieldAccessor<LightSingularityManager, System.Collections.Generic.List<LightSingularity>>> _lightSingularites =
				new System.Lazy<FieldAccessor<LightSingularityManager, System.Collections.Generic.List<LightSingularity>>>(() => FieldAccessor<LightSingularityManager, System.Collections.Generic.List<LightSingularity>>.Create("lightSingularites"));
		private static readonly System.Lazy<FieldAccessor<LightSingularityManager, UnityEngine.Transform>> _lockedPivotParent =
				new System.Lazy<FieldAccessor<LightSingularityManager, UnityEngine.Transform>>(() => FieldAccessor<LightSingularityManager, UnityEngine.Transform>.Create("lockedPivotParent"));
		private static readonly System.Lazy<FieldAccessor<LightSingularityManager, System.Collections.IEnumerator>> _singularityNullCheck =
				new System.Lazy<FieldAccessor<LightSingularityManager, System.Collections.IEnumerator>>(() => FieldAccessor<LightSingularityManager, System.Collections.IEnumerator>.Create("singularityNullCheck"));

		public static System.Collections.Generic.List<LightSingularityExternal> GetLightSources(this LightSingularityManager __self) => _lightSources.Value.GetValue(__self);
		public static void SetLightSources(this LightSingularityManager __self, System.Collections.Generic.List<LightSingularityExternal> value) => _lightSources.Value.SetValue(__self, value);
		public static System.Collections.Generic.List<LightSingularity> GetLightSingularites(this LightSingularityManager __self) => _lightSingularites.Value.GetValue(__self);
		public static void SetLightSingularites(this LightSingularityManager __self, System.Collections.Generic.List<LightSingularity> value) => _lightSingularites.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetLockedPivotParent(this LightSingularityManager __self) => _lockedPivotParent.Value.GetValue(__self);
		public static void SetLockedPivotParent(this LightSingularityManager __self, UnityEngine.Transform value) => _lockedPivotParent.Value.SetValue(__self, value);
		public static System.Collections.IEnumerator GetSingularityNullCheck(this LightSingularityManager __self) => _singularityNullCheck.Value.GetValue(__self);
		public static void SetSingularityNullCheck(this LightSingularityManager __self, System.Collections.IEnumerator value) => _singularityNullCheck.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<LightSingularityManager>> _Awake757602046 =
				new System.Lazy<MethodAccessor<LightSingularityManager>>(() => MethodAccessor<LightSingularityManager>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<LightSingularityManager>> _Start757602046 =
				new System.Lazy<MethodAccessor<LightSingularityManager>>(() => MethodAccessor<LightSingularityManager>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<LightSingularityManager>> _OnDisable757602046 =
				new System.Lazy<MethodAccessor<LightSingularityManager>>(() => MethodAccessor<LightSingularityManager>.Create("OnDisable"));
		private static readonly System.Lazy<MethodAccessor<LightSingularityManager>> _OnBlockIsCreated1546667164 =
				new System.Lazy<MethodAccessor<LightSingularityManager>>(() => MethodAccessor<LightSingularityManager>.Create("OnBlockIsCreated", typeof(Block), typeof(Network_Player), typeof(bool), typeof(int)));
		private static readonly System.Lazy<MethodAccessor<LightSingularityManager>> _CreateLightSingularity757602046 =
				new System.Lazy<MethodAccessor<LightSingularityManager>>(() => MethodAccessor<LightSingularityManager>.Create("CreateLightSingularity"));
		private static readonly System.Lazy<MethodAccessor<LightSingularityManager>> _SetLightDefaults3475435637 =
				new System.Lazy<MethodAccessor<LightSingularityManager>>(() => MethodAccessor<LightSingularityManager>.Create("SetLightDefaults", typeof(LightSingularity)));
		private static readonly System.Lazy<MethodAccessor<LightSingularityManager>> _SetExternalsAsPartOfSingularity777236987 =
				new System.Lazy<MethodAccessor<LightSingularityManager>>(() => MethodAccessor<LightSingularityManager>.Create("SetExternalsAsPartOfSingularity", typeof(LightSingularity), typeof(System.Collections.Generic.List<UnityEngine.GameObject>)));
		private static readonly System.Lazy<MethodAccessor<LightSingularityManager>> _ModifySingularitysLight336263679 =
				new System.Lazy<MethodAccessor<LightSingularityManager>>(() => MethodAccessor<LightSingularityManager>.Create("ModifySingularitysLight", typeof(System.Collections.Generic.List<UnityEngine.GameObject>), typeof(LightSingularity)));

		public static void Awake(this LightSingularityManager __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this LightSingularityManager __self) => _Start757602046.Value.Invoke(__self);
		public static void OnDisable(this LightSingularityManager __self) => _OnDisable757602046.Value.Invoke(__self);
		public static void OnBlockIsCreated(this LightSingularityManager __self, Block p_block, Network_Player p_player, bool isReplicating, int hotSlotIndex) => _OnBlockIsCreated1546667164.Value.Invoke(__self, p_block, p_player, isReplicating, hotSlotIndex);
		public static UnityEngine.GameObject CreateLightSingularity(this LightSingularityManager __self) => (UnityEngine.GameObject)_CreateLightSingularity757602046.Value.Invoke(__self);
		public static void SetLightDefaults(this LightSingularityManager __self, LightSingularity singularity) => _SetLightDefaults3475435637.Value.Invoke(__self, singularity);
		public static void SetExternalsAsPartOfSingularity(this LightSingularityManager __self, LightSingularity p_singularity, System.Collections.Generic.List<UnityEngine.GameObject> p_lightGameObjects) => _SetExternalsAsPartOfSingularity777236987.Value.Invoke(__self, p_singularity, p_lightGameObjects);
		public static void ModifySingularitysLight(this LightSingularityManager __self, System.Collections.Generic.List<UnityEngine.GameObject> otherLights, LightSingularity p_singualrityLight) => _ModifySingularitysLight336263679.Value.Invoke(__self, otherLights, p_singualrityLight);

	}

	public static class PrivateAccessor_LockRotation
	{

		private static readonly System.Lazy<MethodAccessor<LockRotation>> _Start757602046 =
				new System.Lazy<MethodAccessor<LockRotation>>(() => MethodAccessor<LockRotation>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<LockRotation>> _Update757602046 =
				new System.Lazy<MethodAccessor<LockRotation>>(() => MethodAccessor<LockRotation>.Create("Update"));

		public static void Start(this LockRotation __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this LockRotation __self) => _Update757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_BedManager
	{

		private static readonly System.Lazy<MethodAccessor<BedManager>> _Awake757602046 =
				new System.Lazy<MethodAccessor<BedManager>>(() => MethodAccessor<BedManager>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<BedManager>> _Start757602046 =
				new System.Lazy<MethodAccessor<BedManager>>(() => MethodAccessor<BedManager>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<BedManager>> _Update757602046 =
				new System.Lazy<MethodAccessor<BedManager>>(() => MethodAccessor<BedManager>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<BedManager>> _OnValidate757602046 =
				new System.Lazy<MethodAccessor<BedManager>>(() => MethodAccessor<BedManager>.Create("OnValidate"));

		public static void Awake(this BedManager __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this BedManager __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this BedManager __self) => _Update757602046.Value.Invoke(__self);
		public static void OnValidate(this BedManager __self) => _OnValidate757602046.Value.Invoke(__self);

	}

	public static class Private_BedManager
	{

		private static readonly System.Lazy<StaticFieldAccessor<System.Collections.Generic.List<Bed>>> _allBeds =
				new System.Lazy<StaticFieldAccessor<System.Collections.Generic.List<Bed>>>(() => StaticFieldAccessor<System.Collections.Generic.List<Bed>>.Create(typeof(BedManager), "allBeds"));
		private static readonly System.Lazy<StaticFieldAccessor<Raft_Network>> _network =
				new System.Lazy<StaticFieldAccessor<Raft_Network>>(() => StaticFieldAccessor<Raft_Network>.Create(typeof(BedManager), "network"));
		private static readonly System.Lazy<StaticFieldAccessor<UnityEngine.AzureSky.AzureSkyController>> _skyController =
				new System.Lazy<StaticFieldAccessor<UnityEngine.AzureSky.AzureSkyController>>(() => StaticFieldAccessor<UnityEngine.AzureSky.AzureSkyController>.Create(typeof(BedManager), "skyController"));
		private static readonly System.Lazy<StaticFieldAccessor<Raft>> _raft =
				new System.Lazy<StaticFieldAccessor<Raft>>(() => StaticFieldAccessor<Raft>.Create(typeof(BedManager), "raft"));
		private static readonly System.Lazy<StaticFieldAccessor<float>> __canSleepAfterTime =
				new System.Lazy<StaticFieldAccessor<float>>(() => StaticFieldAccessor<float>.Create(typeof(BedManager), "_canSleepAfterTime"));
		private static readonly System.Lazy<StaticFieldAccessor<float>> __wakeUpTime =
				new System.Lazy<StaticFieldAccessor<float>>(() => StaticFieldAccessor<float>.Create(typeof(BedManager), "_wakeUpTime"));
		private static readonly System.Lazy<StaticFieldAccessor<bool>> _slumbering =
				new System.Lazy<StaticFieldAccessor<bool>>(() => StaticFieldAccessor<bool>.Create(typeof(BedManager), "slumbering"));

		public static System.Collections.Generic.List<Bed> GetAllBeds() => _allBeds.Value.GetValue();
		public static void SetAllBeds(System.Collections.Generic.List<Bed> value) => _allBeds.Value.SetValue(value);
		public static Raft_Network GetNetwork() => _network.Value.GetValue();
		public static void SetNetwork(Raft_Network value) => _network.Value.SetValue(value);
		public static UnityEngine.AzureSky.AzureSkyController GetSkyController() => _skyController.Value.GetValue();
		public static void SetSkyController(UnityEngine.AzureSky.AzureSkyController value) => _skyController.Value.SetValue(value);
		public static Raft GetRaft() => _raft.Value.GetValue();
		public static void SetRaft(Raft value) => _raft.Value.SetValue(value);
		public static float Get_canSleepAfterTime() => __canSleepAfterTime.Value.GetValue();
		public static void Set_canSleepAfterTime(float value) => __canSleepAfterTime.Value.SetValue(value);
		public static float Get_wakeUpTime() => __wakeUpTime.Value.GetValue();
		public static void Set_wakeUpTime(float value) => __wakeUpTime.Value.SetValue(value);
		public static bool GetSlumbering() => _slumbering.Value.GetValue();
		public static void SetSlumbering(bool value) => _slumbering.Value.SetValue(value);

		private static readonly System.Lazy<StaticMethodAccessor> _Slumber3450040886 =
				new System.Lazy<StaticMethodAccessor>(() => StaticMethodAccessor.Create(typeof(BedManager), "Slumber", typeof(bool)));

		public static System.Collections.IEnumerator Slumber(bool raftIsAnchored) => (System.Collections.IEnumerator)_Slumber3450040886.Value.Invoke(raftIsAnchored);

	}

	public static class PrivateAccessor_CharacterManager
	{

		private static readonly System.Lazy<MethodAccessor<CharacterManager>> _Awake757602046 =
				new System.Lazy<MethodAccessor<CharacterManager>>(() => MethodAccessor<CharacterManager>.Create("Awake"));

		public static void Awake(this CharacterManager __self) => _Awake757602046.Value.Invoke(__self);

	}

	public static class Private_CharacterManager
	{

		private static readonly System.Lazy<StaticMethodAccessor> _SetCharacterStat1215742486 =
				new System.Lazy<StaticMethodAccessor>(() => StaticMethodAccessor.Create(typeof(CharacterManager), "SetCharacterStat", typeof(int), typeof(int)));

		public static bool SetCharacterStat(int characterIndex, int statValue) => (bool)_SetCharacterStat1215742486.Value.Invoke(characterIndex, statValue);

	}

	public static class Private_ComponentManager<T>
	{

		private static readonly System.Lazy<StaticFieldAccessor<T>> _component =
				new System.Lazy<StaticFieldAccessor<T>>(() => StaticFieldAccessor<T>.Create(typeof(ComponentManager<T>), "component"));

		public static T GetComponent() => _component.Value.GetValue();
		public static void SetComponent(T value) => _component.Value.SetValue(value);

	}

	public static class PrivateAccessor_CoroutineManager
	{

		private static readonly System.Lazy<MethodAccessor<CoroutineManager>> _Awake757602046 =
				new System.Lazy<MethodAccessor<CoroutineManager>>(() => MethodAccessor<CoroutineManager>.Create("Awake"));

		public static void Awake(this CoroutineManager __self) => _Awake757602046.Value.Invoke(__self);

	}

	public static class Private_CoroutineManager
	{

		private static readonly System.Lazy<StaticFieldAccessor<CoroutineManager>> _singleton =
				new System.Lazy<StaticFieldAccessor<CoroutineManager>>(() => StaticFieldAccessor<CoroutineManager>.Create(typeof(CoroutineManager), "singleton"));
		private static readonly System.Lazy<StaticFieldAccessor<bool>> _initialized =
				new System.Lazy<StaticFieldAccessor<bool>>(() => StaticFieldAccessor<bool>.Create(typeof(CoroutineManager), "initialized"));

		public static CoroutineManager GetSingleton() => _singleton.Value.GetValue();
		public static void SetSingleton(CoroutineManager value) => _singleton.Value.SetValue(value);
		public static bool GetInitialized() => _initialized.Value.GetValue();
		public static void SetInitialized(bool value) => _initialized.Value.SetValue(value);

	}

	public static class PrivateAccessor_DecalSystemRaft
	{

		private static readonly System.Lazy<FieldAccessor<DecalSystemRaft, bool>> _initialized =
				new System.Lazy<FieldAccessor<DecalSystemRaft, bool>>(() => FieldAccessor<DecalSystemRaft, bool>.Create("initialized"));

		public static bool GetInitialized(this DecalSystemRaft __self) => _initialized.Value.GetValue(__self);
		public static void SetInitialized(this DecalSystemRaft __self, bool value) => _initialized.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<DecalSystemRaft>> _Awake757602046 =
				new System.Lazy<MethodAccessor<DecalSystemRaft>>(() => MethodAccessor<DecalSystemRaft>.Create("Awake"));

		public static void Awake(this DecalSystemRaft __self) => _Awake757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_GameManager
	{

		private static readonly System.Lazy<MethodAccessor<GameManager>> _OnEnable757602046 =
				new System.Lazy<MethodAccessor<GameManager>>(() => MethodAccessor<GameManager>.Create("OnEnable"));
		private static readonly System.Lazy<MethodAccessor<GameManager>> _OnDisable757602046 =
				new System.Lazy<MethodAccessor<GameManager>>(() => MethodAccessor<GameManager>.Create("OnDisable"));
		private static readonly System.Lazy<MethodAccessor<GameManager>> _Awake757602046 =
				new System.Lazy<MethodAccessor<GameManager>>(() => MethodAccessor<GameManager>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<GameManager>> _Start757602046 =
				new System.Lazy<MethodAccessor<GameManager>>(() => MethodAccessor<GameManager>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<GameManager>> _LateStart757602046 =
				new System.Lazy<MethodAccessor<GameManager>>(() => MethodAccessor<GameManager>.Create("LateStart"));
		private static readonly System.Lazy<MethodAccessor<GameManager>> _Update757602046 =
				new System.Lazy<MethodAccessor<GameManager>>(() => MethodAccessor<GameManager>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<GameManager>> _OnApplicationQuit757602046 =
				new System.Lazy<MethodAccessor<GameManager>>(() => MethodAccessor<GameManager>.Create("OnApplicationQuit"));

		public static void OnEnable(this GameManager __self) => _OnEnable757602046.Value.Invoke(__self);
		public static void OnDisable(this GameManager __self) => _OnDisable757602046.Value.Invoke(__self);
		public static void Awake(this GameManager __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this GameManager __self) => _Start757602046.Value.Invoke(__self);
		public static void LateStart(this GameManager __self) => _LateStart757602046.Value.Invoke(__self);
		public static void Update(this GameManager __self) => _Update757602046.Value.Invoke(__self);
		public static void OnApplicationQuit(this GameManager __self) => _OnApplicationQuit757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_NeighbourHood_Manager
	{

		private static readonly System.Lazy<FieldAccessor<NeighbourHood_Manager, System.Collections.Generic.List<TankTracker>>> _tankTrackers =
				new System.Lazy<FieldAccessor<NeighbourHood_Manager, System.Collections.Generic.List<TankTracker>>>(() => FieldAccessor<NeighbourHood_Manager, System.Collections.Generic.List<TankTracker>>.Create("tankTrackers"));

		public static System.Collections.Generic.List<TankTracker> GetTankTrackers(this NeighbourHood_Manager __self) => _tankTrackers.Value.GetValue(__self);
		public static void SetTankTrackers(this NeighbourHood_Manager __self, System.Collections.Generic.List<TankTracker> value) => _tankTrackers.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_TankTracker
	{

		private static readonly System.Lazy<MethodAccessor<TankTracker>> _OnTrackerTrigger757602046 =
				new System.Lazy<MethodAccessor<TankTracker>>(() => MethodAccessor<TankTracker>.Create("OnTrackerTrigger"));

		public static void OnTrackerTrigger(this TankTracker __self) => _OnTrackerTrigger757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessorInternal_ManagerTracker<T>
	{

		internal static readonly System.Lazy<MethodAccessor<ManagerTracker<T>>> _OnTrackerTrigger757602046 =
				new System.Lazy<MethodAccessor<ManagerTracker<T>>>(() => MethodAccessor<ManagerTracker<T>>.Create("OnTrackerTrigger"));

	}

	public static class PrivateAccessor_ManagerTracker
	{

		public static void OnTrackerTrigger<T>(this ManagerTracker<T> __self) => PrivateAccessorInternal_ManagerTracker<T>._OnTrackerTrigger757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_ObjectManager
	{

		private static readonly System.Lazy<MethodAccessor<ObjectManager>> _Awake757602046 =
				new System.Lazy<MethodAccessor<ObjectManager>>(() => MethodAccessor<ObjectManager>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<ObjectManager>> _Start757602046 =
				new System.Lazy<MethodAccessor<ObjectManager>>(() => MethodAccessor<ObjectManager>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<ObjectManager>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<ObjectManager>>(() => MethodAccessor<ObjectManager>.Create("OnDestroy"));

		public static void Awake(this ObjectManager __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this ObjectManager __self) => _Start757602046.Value.Invoke(__self);
		public static void OnDestroy(this ObjectManager __self) => _OnDestroy757602046.Value.Invoke(__self);

	}

	public static class Private_ObjectManager
	{

		private static readonly System.Lazy<StaticFieldAccessor<System.Collections.Generic.Dictionary<ObjectOfInterestType, UnityEngine.Transform>>> _ObjectsOfInterest =
				new System.Lazy<StaticFieldAccessor<System.Collections.Generic.Dictionary<ObjectOfInterestType, UnityEngine.Transform>>>(() => StaticFieldAccessor<System.Collections.Generic.Dictionary<ObjectOfInterestType, UnityEngine.Transform>>.Create(typeof(ObjectManager), "ObjectsOfInterest"));

		public static System.Collections.Generic.Dictionary<ObjectOfInterestType, UnityEngine.Transform> GetObjectsOfInterest() => _ObjectsOfInterest.Value.GetValue();
		public static void SetObjectsOfInterest(System.Collections.Generic.Dictionary<ObjectOfInterestType, UnityEngine.Transform> value) => _ObjectsOfInterest.Value.SetValue(value);

	}

	public static class PrivateAccessor_Object_Chicken
	{

		private static readonly System.Lazy<FieldAccessor<Object_Chicken, PickupItem_Networked>> _chickenEgg =
				new System.Lazy<FieldAccessor<Object_Chicken, PickupItem_Networked>>(() => FieldAccessor<Object_Chicken, PickupItem_Networked>.Create("chickenEgg"));

		public static PickupItem_Networked GetChickenEgg(this Object_Chicken __self) => _chickenEgg.Value.GetValue(__self);
		public static void SetChickenEgg(this Object_Chicken __self, PickupItem_Networked value) => _chickenEgg.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_ObjectOfInterestTracker
	{

		private static readonly System.Lazy<MethodAccessor<ObjectOfInterestTracker>> _Awake757602046 =
				new System.Lazy<MethodAccessor<ObjectOfInterestTracker>>(() => MethodAccessor<ObjectOfInterestTracker>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<ObjectOfInterestTracker>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<ObjectOfInterestTracker>>(() => MethodAccessor<ObjectOfInterestTracker>.Create("OnDestroy"));

		public static void Awake(this ObjectOfInterestTracker __self) => _Awake757602046.Value.Invoke(__self);
		public static void OnDestroy(this ObjectOfInterestTracker __self) => _OnDestroy757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_ParticleManager
	{

		private static readonly System.Lazy<MethodAccessor<ParticleManager>> _Start757602046 =
				new System.Lazy<MethodAccessor<ParticleManager>>(() => MethodAccessor<ParticleManager>.Create("Start"));

		public static void Start(this ParticleManager __self) => _Start757602046.Value.Invoke(__self);

	}

	public static class Private_ParticleManager
	{

		private static readonly System.Lazy<StaticFieldAccessor<PoolManager>> _poolManager =
				new System.Lazy<StaticFieldAccessor<PoolManager>>(() => StaticFieldAccessor<PoolManager>.Create(typeof(ParticleManager), "poolManager"));

		public static PoolManager GetPoolManager() => _poolManager.Value.GetValue();
		public static void SetPoolManager(PoolManager value) => _poolManager.Value.SetValue(value);

	}

	public static class PrivateAccessor_PipeGroup
	{

		private static readonly System.Lazy<FieldAccessor<PipeGroup, System.Collections.Generic.List<Pipe>>> _pipes =
				new System.Lazy<FieldAccessor<PipeGroup, System.Collections.Generic.List<Pipe>>>(() => FieldAccessor<PipeGroup, System.Collections.Generic.List<Pipe>>.Create("pipes"));

		public static System.Collections.Generic.List<Pipe> GetPipes(this PipeGroup __self) => _pipes.Value.GetValue(__self);
		public static void SetPipes(this PipeGroup __self, System.Collections.Generic.List<Pipe> value) => _pipes.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<PipeGroup>> _TryAddPipeSocket3486099433 =
				new System.Lazy<MethodAccessor<PipeGroup>>(() => MethodAccessor<PipeGroup>.Create("TryAddPipeSocket", typeof(Pipe)));
		private static readonly System.Lazy<MethodAccessor<PipeGroup>> _TryRemovePipeSocket3486099433 =
				new System.Lazy<MethodAccessor<PipeGroup>>(() => MethodAccessor<PipeGroup>.Create("TryRemovePipeSocket", typeof(Pipe)));

		public static void TryAddPipeSocket(this PipeGroup __self, Pipe pipeToAdd) => _TryAddPipeSocket3486099433.Value.Invoke(__self, pipeToAdd);
		public static void TryRemovePipeSocket(this PipeGroup __self, Pipe pipeToAdd) => _TryRemovePipeSocket3486099433.Value.Invoke(__self, pipeToAdd);

	}

	public static class PrivateAccessor_PipeGroupManager
	{

		private static readonly System.Lazy<MethodAccessor<PipeGroupManager>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<PipeGroupManager>>(() => MethodAccessor<PipeGroupManager>.Create("OnDestroy"));

		public static void OnDestroy(this PipeGroupManager __self) => _OnDestroy757602046.Value.Invoke(__self);

	}

	public static class Private_PipeGroupManager
	{

		private static readonly System.Lazy<StaticFieldAccessor<System.Collections.Generic.Dictionary<UnityEngine.Vector3, Pipe>>> _allPipes =
				new System.Lazy<StaticFieldAccessor<System.Collections.Generic.Dictionary<UnityEngine.Vector3, Pipe>>>(() => StaticFieldAccessor<System.Collections.Generic.Dictionary<UnityEngine.Vector3, Pipe>>.Create(typeof(PipeGroupManager), "allPipes"));
		private static readonly System.Lazy<StaticFieldAccessor<System.Collections.Generic.List<PipeGroup>>> _pipeGroups =
				new System.Lazy<StaticFieldAccessor<System.Collections.Generic.List<PipeGroup>>>(() => StaticFieldAccessor<System.Collections.Generic.List<PipeGroup>>.Create(typeof(PipeGroupManager), "pipeGroups"));

		public static System.Collections.Generic.Dictionary<UnityEngine.Vector3, Pipe> GetAllPipes() => _allPipes.Value.GetValue();
		public static void SetAllPipes(System.Collections.Generic.Dictionary<UnityEngine.Vector3, Pipe> value) => _allPipes.Value.SetValue(value);
		public static System.Collections.Generic.List<PipeGroup> GetPipeGroups() => _pipeGroups.Value.GetValue();
		public static void SetPipeGroups(System.Collections.Generic.List<PipeGroup> value) => _pipeGroups.Value.SetValue(value);

		private static readonly System.Lazy<StaticMethodAccessor> _AddPipeGroup3486591146 =
				new System.Lazy<StaticMethodAccessor>(() => StaticMethodAccessor.Create(typeof(PipeGroupManager), "AddPipeGroup", typeof(PipeGroup)));
		private static readonly System.Lazy<StaticMethodAccessor> _ResetPipeGroups757602046 =
				new System.Lazy<StaticMethodAccessor>(() => StaticMethodAccessor.Create(typeof(PipeGroupManager), "ResetPipeGroups"));
		private static readonly System.Lazy<StaticMethodAccessor> _KeySafeRounding3429126434 =
				new System.Lazy<StaticMethodAccessor>(() => StaticMethodAccessor.Create(typeof(PipeGroupManager), "KeySafeRounding", typeof(UnityEngine.Vector3)));

		public static bool AddPipeGroup(PipeGroup pipeGroup) => (bool)_AddPipeGroup3486591146.Value.Invoke(pipeGroup);
		public static void ResetPipeGroups() => _ResetPipeGroups757602046.Value.Invoke();
		public static UnityEngine.Vector3 KeySafeRounding(UnityEngine.Vector3 value) => (UnityEngine.Vector3)_KeySafeRounding3429126434.Value.Invoke(value);

	}

	public static class PrivateAccessor_PlayerNetworkManager
	{

		private static readonly System.Lazy<FieldAccessor<PlayerNetworkManager, Network_Player>> _playerNetwork =
				new System.Lazy<FieldAccessor<PlayerNetworkManager, Network_Player>>(() => FieldAccessor<PlayerNetworkManager, Network_Player>.Create("playerNetwork"));

		public static Network_Player GetPlayerNetwork(this PlayerNetworkManager __self) => _playerNetwork.Value.GetValue(__self);
		public static void SetPlayerNetwork(this PlayerNetworkManager __self, Network_Player value) => _playerNetwork.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<PlayerNetworkManager>> _Start757602046 =
				new System.Lazy<MethodAccessor<PlayerNetworkManager>>(() => MethodAccessor<PlayerNetworkManager>.Create("Start"));

		public static void Start(this PlayerNetworkManager __self) => _Start757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_PoolManager
	{

		private static readonly System.Lazy<MethodAccessor<PoolManager>> _Awake757602046 =
				new System.Lazy<MethodAccessor<PoolManager>>(() => MethodAccessor<PoolManager>.Create("Awake"));

		public static void Awake(this PoolManager __self) => _Awake757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_RaftVelocityManager
	{

		private static readonly System.Lazy<FieldAccessor<RaftVelocityManager, UnityEngine.Quaternion>> _prevRotation =
				new System.Lazy<FieldAccessor<RaftVelocityManager, UnityEngine.Quaternion>>(() => FieldAccessor<RaftVelocityManager, UnityEngine.Quaternion>.Create("prevRotation"));

		public static UnityEngine.Quaternion GetPrevRotation(this RaftVelocityManager __self) => _prevRotation.Value.GetValue(__self);
		public static void SetPrevRotation(this RaftVelocityManager __self, UnityEngine.Quaternion value) => _prevRotation.Value.SetValue(__self, value);

	}

	public static class Private_RaftVelocityManager
	{

		private static readonly System.Lazy<StaticFieldAccessor<System.Collections.Generic.List<MotorWheel>>> _motors =
				new System.Lazy<StaticFieldAccessor<System.Collections.Generic.List<MotorWheel>>>(() => StaticFieldAccessor<System.Collections.Generic.List<MotorWheel>>.Create(typeof(RaftVelocityManager), "motors"));
		private static readonly System.Lazy<StaticFieldAccessor<Raft>> _raft =
				new System.Lazy<StaticFieldAccessor<Raft>>(() => StaticFieldAccessor<Raft>.Create(typeof(RaftVelocityManager), "raft"));
		private static readonly System.Lazy<StaticFieldAccessor<UnityEngine.Vector3>> _motorDirection =
				new System.Lazy<StaticFieldAccessor<UnityEngine.Vector3>>(() => StaticFieldAccessor<UnityEngine.Vector3>.Create(typeof(RaftVelocityManager), "motorDirection"));

		public static System.Collections.Generic.List<MotorWheel> GetMotors() => _motors.Value.GetValue();
		public static void SetMotors(System.Collections.Generic.List<MotorWheel> value) => _motors.Value.SetValue(value);
		public static Raft GetRaft() => _raft.Value.GetValue();
		public static void SetRaft(Raft value) => _raft.Value.SetValue(value);
		public static UnityEngine.Vector3 GetMotorDirection() => _motorDirection.Value.GetValue();
		public static void SetMotorDirection(UnityEngine.Vector3 value) => _motorDirection.Value.SetValue(value);

		private static readonly System.Lazy<StaticMethodAccessor> _RecalculateMotors757602046 =
				new System.Lazy<StaticMethodAccessor>(() => StaticMethodAccessor.Create(typeof(RaftVelocityManager), "RecalculateMotors"));

		public static void RecalculateMotors() => _RecalculateMotors757602046.Value.Invoke();

	}

	public static class PrivateAccessor_RaftWeightManager
	{

		private static readonly System.Lazy<MethodAccessor<RaftWeightManager>> _Start757602046 =
				new System.Lazy<MethodAccessor<RaftWeightManager>>(() => MethodAccessor<RaftWeightManager>.Create("Start"));

		public static void Start(this RaftWeightManager __self) => _Start757602046.Value.Invoke(__self);

	}

	public static class Private_RaftWeightManager
	{

		private static readonly System.Lazy<StaticFieldAccessor<RaftBounds>> _raftBounds =
				new System.Lazy<StaticFieldAccessor<RaftBounds>>(() => StaticFieldAccessor<RaftBounds>.Create(typeof(RaftWeightManager), "raftBounds"));

		public static RaftBounds GetRaftBounds() => _raftBounds.Value.GetValue();
		public static void SetRaftBounds(RaftBounds value) => _raftBounds.Value.SetValue(value);

	}

	public static class PrivateAccessor_SkyManager
	{

		private static readonly System.Lazy<FieldAccessor<SkyManager, float>> _lerpAmbientSpeed =
				new System.Lazy<FieldAccessor<SkyManager, float>>(() => FieldAccessor<SkyManager, float>.Create("lerpAmbientSpeed"));
		private static readonly System.Lazy<FieldAccessor<SkyManager, float>> _defaultReflectionIntensity =
				new System.Lazy<FieldAccessor<SkyManager, float>>(() => FieldAccessor<SkyManager, float>.Create("defaultReflectionIntensity"));
		private static readonly System.Lazy<FieldAccessor<SkyManager, float>> _maxNightReflectionIntensity =
				new System.Lazy<FieldAccessor<SkyManager, float>>(() => FieldAccessor<SkyManager, float>.Create("maxNightReflectionIntensity"));
		private static readonly System.Lazy<FieldAccessor<SkyManager, EnvironmentProbe_ColorGroup>> _currentSkyColorGroup =
				new System.Lazy<FieldAccessor<SkyManager, EnvironmentProbe_ColorGroup>>(() => FieldAccessor<SkyManager, EnvironmentProbe_ColorGroup>.Create("currentSkyColorGroup"));
		private static readonly System.Lazy<FieldAccessor<SkyManager, EnvironmentProbe_ColorGroup>> _lastCalculatedEnvironmentColorGroup =
				new System.Lazy<FieldAccessor<SkyManager, EnvironmentProbe_ColorGroup>>(() => FieldAccessor<SkyManager, EnvironmentProbe_ColorGroup>.Create("lastCalculatedEnvironmentColorGroup"));
		private static readonly System.Lazy<FieldAccessor<SkyManager, SubregionComponent_EnvironmentProbe>> _lastCalculatedEnvironmentProbeRegion =
				new System.Lazy<FieldAccessor<SkyManager, SubregionComponent_EnvironmentProbe>>(() => FieldAccessor<SkyManager, SubregionComponent_EnvironmentProbe>.Create("lastCalculatedEnvironmentProbeRegion"));

		public static float GetLerpAmbientSpeed(this SkyManager __self) => _lerpAmbientSpeed.Value.GetValue(__self);
		public static void SetLerpAmbientSpeed(this SkyManager __self, float value) => _lerpAmbientSpeed.Value.SetValue(__self, value);
		public static float GetDefaultReflectionIntensity(this SkyManager __self) => _defaultReflectionIntensity.Value.GetValue(__self);
		public static void SetDefaultReflectionIntensity(this SkyManager __self, float value) => _defaultReflectionIntensity.Value.SetValue(__self, value);
		public static float GetMaxNightReflectionIntensity(this SkyManager __self) => _maxNightReflectionIntensity.Value.GetValue(__self);
		public static void SetMaxNightReflectionIntensity(this SkyManager __self, float value) => _maxNightReflectionIntensity.Value.SetValue(__self, value);
		public static EnvironmentProbe_ColorGroup GetCurrentSkyColorGroup(this SkyManager __self) => _currentSkyColorGroup.Value.GetValue(__self);
		public static void SetCurrentSkyColorGroup(this SkyManager __self, EnvironmentProbe_ColorGroup value) => _currentSkyColorGroup.Value.SetValue(__self, value);
		public static EnvironmentProbe_ColorGroup GetLastCalculatedEnvironmentColorGroup(this SkyManager __self) => _lastCalculatedEnvironmentColorGroup.Value.GetValue(__self);
		public static void SetLastCalculatedEnvironmentColorGroup(this SkyManager __self, EnvironmentProbe_ColorGroup value) => _lastCalculatedEnvironmentColorGroup.Value.SetValue(__self, value);
		public static SubregionComponent_EnvironmentProbe GetLastCalculatedEnvironmentProbeRegion(this SkyManager __self) => _lastCalculatedEnvironmentProbeRegion.Value.GetValue(__self);
		public static void SetLastCalculatedEnvironmentProbeRegion(this SkyManager __self, SubregionComponent_EnvironmentProbe value) => _lastCalculatedEnvironmentProbeRegion.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<SkyManager>> _Awake757602046 =
				new System.Lazy<MethodAccessor<SkyManager>>(() => MethodAccessor<SkyManager>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<SkyManager>> _LateUpdate757602046 =
				new System.Lazy<MethodAccessor<SkyManager>>(() => MethodAccessor<SkyManager>.Create("LateUpdate"));
		private static readonly System.Lazy<MethodAccessor<SkyManager>> _HandleEnvironmentLight757602046 =
				new System.Lazy<MethodAccessor<SkyManager>>(() => MethodAccessor<SkyManager>.Create("HandleEnvironmentLight"));
		private static readonly System.Lazy<MethodAccessor<SkyManager>> _CalculateRegionShaderDarkness757602046 =
				new System.Lazy<MethodAccessor<SkyManager>>(() => MethodAccessor<SkyManager>.Create("CalculateRegionShaderDarkness"));
		private static readonly System.Lazy<MethodAccessor<SkyManager>> _OnRegionUpdate757602046 =
				new System.Lazy<MethodAccessor<SkyManager>>(() => MethodAccessor<SkyManager>.Create("OnRegionUpdate"));
		private static readonly System.Lazy<MethodAccessor<SkyManager>> _CalculateLightFromPosition3405789661 =
				new System.Lazy<MethodAccessor<SkyManager>>(() => MethodAccessor<SkyManager>.Create("CalculateLightFromPosition", typeof(UnityEngine.Vector3), typeof(EnvironmentProbe_ColorGroup), typeof(float)));
		private static readonly System.Lazy<MethodAccessor<SkyManager>> _AverageColorsWeightBased3435348400 =
				new System.Lazy<MethodAccessor<SkyManager>>(() => MethodAccessor<SkyManager>.Create("AverageColorsWeightBased", typeof(EnvironmentProbe_ColorWeight[])));

		public static void Awake(this SkyManager __self) => _Awake757602046.Value.Invoke(__self);
		public static void LateUpdate(this SkyManager __self) => _LateUpdate757602046.Value.Invoke(__self);
		public static void HandleEnvironmentLight(this SkyManager __self) => _HandleEnvironmentLight757602046.Value.Invoke(__self);
		public static void CalculateRegionShaderDarkness(this SkyManager __self) => _CalculateRegionShaderDarkness757602046.Value.Invoke(__self);
		public static void OnRegionUpdate(this SkyManager __self) => _OnRegionUpdate757602046.Value.Invoke(__self);
		public static EnvironmentProbe_ColorGroup CalculateLightFromPosition(this SkyManager __self, UnityEngine.Vector3 position, EnvironmentProbe_ColorGroup defaultColorGroup, float currentTime) => (EnvironmentProbe_ColorGroup)_CalculateLightFromPosition3405789661.Value.Invoke(__self, position, defaultColorGroup, currentTime);
		public static EnvironmentProbe_ColorGroup AverageColorsWeightBased(this SkyManager __self, EnvironmentProbe_ColorWeight[] colorWeights) => (EnvironmentProbe_ColorGroup)_AverageColorsWeightBased3435348400.Value.Invoke(__self, colorWeights);

	}

	public static class Private_SkyManager
	{

		private static readonly System.Lazy<StaticFieldAccessor<System.Int32[]>> _ReflectionResolutions =
				new System.Lazy<StaticFieldAccessor<System.Int32[]>>(() => StaticFieldAccessor<System.Int32[]>.Create(typeof(SkyManager), "ReflectionResolutions"));

		public static System.Int32[] GetReflectionResolutions() => _ReflectionResolutions.Value.GetValue();
		public static void SetReflectionResolutions(System.Int32[] value) => _ReflectionResolutions.Value.SetValue(value);

	}

	public static class PrivateAccessor_SoundManager
	{

		private static readonly System.Lazy<FieldAccessor<SoundManager, string>> _eventRef_Underwater =
				new System.Lazy<FieldAccessor<SoundManager, string>>(() => FieldAccessor<SoundManager, string>.Create("eventRef_Underwater"));
		private static readonly System.Lazy<FieldAccessor<SoundManager, string>> _eventRef_Pause =
				new System.Lazy<FieldAccessor<SoundManager, string>>(() => FieldAccessor<SoundManager, string>.Create("eventRef_Pause"));
		private static readonly System.Lazy<FieldAccessor<SoundManager, string>> _eventRef_BlockBreak =
				new System.Lazy<FieldAccessor<SoundManager, string>>(() => FieldAccessor<SoundManager, string>.Create("eventRef_BlockBreak"));
		private static readonly System.Lazy<FieldAccessor<SoundManager, string>> _eventRef_UI_Click =
				new System.Lazy<FieldAccessor<SoundManager, string>>(() => FieldAccessor<SoundManager, string>.Create("eventRef_UI_Click"));
		private static readonly System.Lazy<FieldAccessor<SoundManager, string>> _eventRef_UI_Click_Fail =
				new System.Lazy<FieldAccessor<SoundManager, string>>(() => FieldAccessor<SoundManager, string>.Create("eventRef_UI_Click_Fail"));
		private static readonly System.Lazy<FieldAccessor<SoundManager, string>> _eventRef_UI_Hightlight =
				new System.Lazy<FieldAccessor<SoundManager, string>>(() => FieldAccessor<SoundManager, string>.Create("eventRef_UI_Hightlight"));
		private static readonly System.Lazy<FieldAccessor<SoundManager, string>> _eventRef_UI_MoveItem =
				new System.Lazy<FieldAccessor<SoundManager, string>>(() => FieldAccessor<SoundManager, string>.Create("eventRef_UI_MoveItem"));
		private static readonly System.Lazy<FieldAccessor<SoundManager, string>> _eventRef_UI_Drop =
				new System.Lazy<FieldAccessor<SoundManager, string>>(() => FieldAccessor<SoundManager, string>.Create("eventRef_UI_Drop"));
		private static readonly System.Lazy<FieldAccessor<SoundManager, string>> _eventRef_UI_OpenMenu =
				new System.Lazy<FieldAccessor<SoundManager, string>>(() => FieldAccessor<SoundManager, string>.Create("eventRef_UI_OpenMenu"));
		private static readonly System.Lazy<FieldAccessor<SoundManager, FMODUnity.StudioEventEmitter>> _eventEmitter_Ocean =
				new System.Lazy<FieldAccessor<SoundManager, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<SoundManager, FMODUnity.StudioEventEmitter>.Create("eventEmitter_Ocean"));
		private static readonly System.Lazy<FieldAccessor<SoundManager, FMODUnity.StudioEventEmitter>> _eventEmitter_PlayerUnderWater =
				new System.Lazy<FieldAccessor<SoundManager, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<SoundManager, FMODUnity.StudioEventEmitter>.Create("eventEmitter_PlayerUnderWater"));
		private static readonly System.Lazy<FieldAccessor<SoundManager, StudioEventEmitterSustain_Ambient[]>> _ambientSounds =
				new System.Lazy<FieldAccessor<SoundManager, StudioEventEmitterSustain_Ambient[]>>(() => FieldAccessor<SoundManager, StudioEventEmitterSustain_Ambient[]>.Create("ambientSounds"));
		private static readonly System.Lazy<FieldAccessor<SoundManager, SoundManagerSnaphshot_Ambient[]>> _ambientSnapshots =
				new System.Lazy<FieldAccessor<SoundManager, SoundManagerSnaphshot_Ambient[]>>(() => FieldAccessor<SoundManager, SoundManagerSnaphshot_Ambient[]>.Create("ambientSnapshots"));
		private static readonly System.Lazy<FieldAccessor<SoundManager, FMOD.Studio.EventInstance>> _eventInstance_snapshot_UnderWater =
				new System.Lazy<FieldAccessor<SoundManager, FMOD.Studio.EventInstance>>(() => FieldAccessor<SoundManager, FMOD.Studio.EventInstance>.Create("eventInstance_snapshot_UnderWater"));
		private static readonly System.Lazy<FieldAccessor<SoundManager, FMOD.Studio.EventInstance>> _eventInstance_snapshot_Pause =
				new System.Lazy<FieldAccessor<SoundManager, FMOD.Studio.EventInstance>>(() => FieldAccessor<SoundManager, FMOD.Studio.EventInstance>.Create("eventInstance_snapshot_Pause"));
		private static readonly System.Lazy<FieldAccessor<SoundManager, bool>> _underwaterFilter =
				new System.Lazy<FieldAccessor<SoundManager, bool>>(() => FieldAccessor<SoundManager, bool>.Create("underwaterFilter"));
		private static readonly System.Lazy<FieldAccessor<SoundManager, Network_Player>> _player =
				new System.Lazy<FieldAccessor<SoundManager, Network_Player>>(() => FieldAccessor<SoundManager, Network_Player>.Create("player"));
		private static readonly System.Lazy<FieldAccessor<SoundManager, Raft_Network>> _network =
				new System.Lazy<FieldAccessor<SoundManager, Raft_Network>>(() => FieldAccessor<SoundManager, Raft_Network>.Create("network"));

		public static string GetEventRef_Underwater(this SoundManager __self) => _eventRef_Underwater.Value.GetValue(__self);
		public static void SetEventRef_Underwater(this SoundManager __self, string value) => _eventRef_Underwater.Value.SetValue(__self, value);
		public static string GetEventRef_Pause(this SoundManager __self) => _eventRef_Pause.Value.GetValue(__self);
		public static void SetEventRef_Pause(this SoundManager __self, string value) => _eventRef_Pause.Value.SetValue(__self, value);
		public static string GetEventRef_BlockBreak(this SoundManager __self) => _eventRef_BlockBreak.Value.GetValue(__self);
		public static void SetEventRef_BlockBreak(this SoundManager __self, string value) => _eventRef_BlockBreak.Value.SetValue(__self, value);
		public static string GetEventRef_UI_Click(this SoundManager __self) => _eventRef_UI_Click.Value.GetValue(__self);
		public static void SetEventRef_UI_Click(this SoundManager __self, string value) => _eventRef_UI_Click.Value.SetValue(__self, value);
		public static string GetEventRef_UI_Click_Fail(this SoundManager __self) => _eventRef_UI_Click_Fail.Value.GetValue(__self);
		public static void SetEventRef_UI_Click_Fail(this SoundManager __self, string value) => _eventRef_UI_Click_Fail.Value.SetValue(__self, value);
		public static string GetEventRef_UI_Hightlight(this SoundManager __self) => _eventRef_UI_Hightlight.Value.GetValue(__self);
		public static void SetEventRef_UI_Hightlight(this SoundManager __self, string value) => _eventRef_UI_Hightlight.Value.SetValue(__self, value);
		public static string GetEventRef_UI_MoveItem(this SoundManager __self) => _eventRef_UI_MoveItem.Value.GetValue(__self);
		public static void SetEventRef_UI_MoveItem(this SoundManager __self, string value) => _eventRef_UI_MoveItem.Value.SetValue(__self, value);
		public static string GetEventRef_UI_Drop(this SoundManager __self) => _eventRef_UI_Drop.Value.GetValue(__self);
		public static void SetEventRef_UI_Drop(this SoundManager __self, string value) => _eventRef_UI_Drop.Value.SetValue(__self, value);
		public static string GetEventRef_UI_OpenMenu(this SoundManager __self) => _eventRef_UI_OpenMenu.Value.GetValue(__self);
		public static void SetEventRef_UI_OpenMenu(this SoundManager __self, string value) => _eventRef_UI_OpenMenu.Value.SetValue(__self, value);
		public static FMODUnity.StudioEventEmitter GetEventEmitter_Ocean(this SoundManager __self) => _eventEmitter_Ocean.Value.GetValue(__self);
		public static void SetEventEmitter_Ocean(this SoundManager __self, FMODUnity.StudioEventEmitter value) => _eventEmitter_Ocean.Value.SetValue(__self, value);
		public static FMODUnity.StudioEventEmitter GetEventEmitter_PlayerUnderWater(this SoundManager __self) => _eventEmitter_PlayerUnderWater.Value.GetValue(__self);
		public static void SetEventEmitter_PlayerUnderWater(this SoundManager __self, FMODUnity.StudioEventEmitter value) => _eventEmitter_PlayerUnderWater.Value.SetValue(__self, value);
		public static StudioEventEmitterSustain_Ambient[] GetAmbientSounds(this SoundManager __self) => _ambientSounds.Value.GetValue(__self);
		public static void SetAmbientSounds(this SoundManager __self, StudioEventEmitterSustain_Ambient[] value) => _ambientSounds.Value.SetValue(__self, value);
		public static SoundManagerSnaphshot_Ambient[] GetAmbientSnapshots(this SoundManager __self) => _ambientSnapshots.Value.GetValue(__self);
		public static void SetAmbientSnapshots(this SoundManager __self, SoundManagerSnaphshot_Ambient[] value) => _ambientSnapshots.Value.SetValue(__self, value);
		public static FMOD.Studio.EventInstance GetEventInstance_snapshot_UnderWater(this SoundManager __self) => _eventInstance_snapshot_UnderWater.Value.GetValue(__self);
		public static void SetEventInstance_snapshot_UnderWater(this SoundManager __self, FMOD.Studio.EventInstance value) => _eventInstance_snapshot_UnderWater.Value.SetValue(__self, value);
		public static FMOD.Studio.EventInstance GetEventInstance_snapshot_Pause(this SoundManager __self) => _eventInstance_snapshot_Pause.Value.GetValue(__self);
		public static void SetEventInstance_snapshot_Pause(this SoundManager __self, FMOD.Studio.EventInstance value) => _eventInstance_snapshot_Pause.Value.SetValue(__self, value);
		public static bool GetUnderwaterFilter(this SoundManager __self) => _underwaterFilter.Value.GetValue(__self);
		public static void SetUnderwaterFilter(this SoundManager __self, bool value) => _underwaterFilter.Value.SetValue(__self, value);
		public static Network_Player GetPlayer(this SoundManager __self) => _player.Value.GetValue(__self);
		public static void SetPlayer(this SoundManager __self, Network_Player value) => _player.Value.SetValue(__self, value);
		public static Raft_Network GetNetwork(this SoundManager __self) => _network.Value.GetValue(__self);
		public static void SetNetwork(this SoundManager __self, Raft_Network value) => _network.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<SoundManager>> _OnRegionChanged757602046 =
				new System.Lazy<MethodAccessor<SoundManager>>(() => MethodAccessor<SoundManager>.Create("OnRegionChanged"));
		private static readonly System.Lazy<MethodAccessor<SoundManager>> _Awake757602046 =
				new System.Lazy<MethodAccessor<SoundManager>>(() => MethodAccessor<SoundManager>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<SoundManager>> _Start757602046 =
				new System.Lazy<MethodAccessor<SoundManager>>(() => MethodAccessor<SoundManager>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<SoundManager>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<SoundManager>>(() => MethodAccessor<SoundManager>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<SoundManager>> _OnMenuOpen3489701807 =
				new System.Lazy<MethodAccessor<SoundManager>>(() => MethodAccessor<SoundManager>.Create("OnMenuOpen", typeof(MenuType)));
		private static readonly System.Lazy<MethodAccessor<SoundManager>> _OnMenuClose3489701807 =
				new System.Lazy<MethodAccessor<SoundManager>>(() => MethodAccessor<SoundManager>.Create("OnMenuClose", typeof(MenuType)));
		private static readonly System.Lazy<MethodAccessor<SoundManager>> _Update757602046 =
				new System.Lazy<MethodAccessor<SoundManager>>(() => MethodAccessor<SoundManager>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<SoundManager>> _HandleUnderWaterFilter757602046 =
				new System.Lazy<MethodAccessor<SoundManager>>(() => MethodAccessor<SoundManager>.Create("HandleUnderWaterFilter"));
		private static readonly System.Lazy<MethodAccessor<SoundManager>> _PlayOneShot1687501232 =
				new System.Lazy<MethodAccessor<SoundManager>>(() => MethodAccessor<SoundManager>.Create("PlayOneShot", typeof(string), typeof(UnityEngine.Vector3)));
		private static readonly System.Lazy<MethodAccessor<SoundManager>> _PlayOneShot3590148631 =
				new System.Lazy<MethodAccessor<SoundManager>>(() => MethodAccessor<SoundManager>.Create("PlayOneShot", typeof(string), typeof(UnityEngine.Vector3), typeof(string), typeof(float)));

		public static void OnRegionChanged(this SoundManager __self) => _OnRegionChanged757602046.Value.Invoke(__self);
		public static void Awake(this SoundManager __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this SoundManager __self) => _Start757602046.Value.Invoke(__self);
		public static void OnDestroy(this SoundManager __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void OnMenuOpen(this SoundManager __self, MenuType menu) => _OnMenuOpen3489701807.Value.Invoke(__self, menu);
		public static void OnMenuClose(this SoundManager __self, MenuType menu) => _OnMenuClose3489701807.Value.Invoke(__self, menu);
		public static void Update(this SoundManager __self) => _Update757602046.Value.Invoke(__self);
		public static void HandleUnderWaterFilter(this SoundManager __self) => _HandleUnderWaterFilter757602046.Value.Invoke(__self);
		public static bool PlayOneShot(this SoundManager __self, string eventRef, UnityEngine.Vector3 position) => (bool)_PlayOneShot1687501232.Value.Invoke(__self, eventRef, position);
		public static bool PlayOneShot(this SoundManager __self, string eventRef, UnityEngine.Vector3 position, string paramName, float paramValue) => (bool)_PlayOneShot3590148631.Value.Invoke(__self, eventRef, position, paramName, paramValue);

	}

	public static class Private_SoundManager
	{

		private static readonly System.Lazy<StaticFieldAccessor<bool>> _initialized =
				new System.Lazy<StaticFieldAccessor<bool>>(() => StaticFieldAccessor<bool>.Create(typeof(SoundManager), "initialized"));
		private static readonly System.Lazy<StaticFieldAccessor<FMOD.Studio.EVENT_CALLBACK>> _dialogueCallback =
				new System.Lazy<StaticFieldAccessor<FMOD.Studio.EVENT_CALLBACK>>(() => StaticFieldAccessor<FMOD.Studio.EVENT_CALLBACK>.Create(typeof(SoundManager), "dialogueCallback"));

		public static bool GetInitialized() => _initialized.Value.GetValue();
		public static void SetInitialized(bool value) => _initialized.Value.SetValue(value);
		public static FMOD.Studio.EVENT_CALLBACK GetDialogueCallback() => _dialogueCallback.Value.GetValue();
		public static void SetDialogueCallback(FMOD.Studio.EVENT_CALLBACK value) => _dialogueCallback.Value.SetValue(value);

		private static readonly System.Lazy<StaticMethodAccessor> _DialogueEventCallback1905016843 =
				new System.Lazy<StaticMethodAccessor>(() => StaticMethodAccessor.Create(typeof(SoundManager), "DialogueEventCallback", typeof(FMOD.Studio.EVENT_CALLBACK_TYPE), typeof(FMOD.Studio.EventInstance), typeof(System.IntPtr)));

		public static FMOD.RESULT DialogueEventCallback(FMOD.Studio.EVENT_CALLBACK_TYPE type, FMOD.Studio.EventInstance instance, System.IntPtr parameterPtr) => (FMOD.RESULT)_DialogueEventCallback1905016843.Value.Invoke(type, instance, parameterPtr);

	}

	public static class PrivateAccessor_Message_SoundManager_PlayOneShot
	{

		private static readonly System.Lazy<FieldAccessor<Message_SoundManager_PlayOneShot, string>> _s =
				new System.Lazy<FieldAccessor<Message_SoundManager_PlayOneShot, string>>(() => FieldAccessor<Message_SoundManager_PlayOneShot, string>.Create("s"));

		public static string GetS(this Message_SoundManager_PlayOneShot __self) => _s.Value.GetValue(__self);
		public static void SetS(this Message_SoundManager_PlayOneShot __self, string value) => _s.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_Message_SoundManager_PlayOneShotParam
	{

		private static readonly System.Lazy<FieldAccessor<Message_SoundManager_PlayOneShotParam, string>> _n =
				new System.Lazy<FieldAccessor<Message_SoundManager_PlayOneShotParam, string>>(() => FieldAccessor<Message_SoundManager_PlayOneShotParam, string>.Create("n"));
		private static readonly System.Lazy<FieldAccessor<Message_SoundManager_PlayOneShotParam, float>> _f =
				new System.Lazy<FieldAccessor<Message_SoundManager_PlayOneShotParam, float>>(() => FieldAccessor<Message_SoundManager_PlayOneShotParam, float>.Create("f"));

		public static string GetN(this Message_SoundManager_PlayOneShotParam __self) => _n.Value.GetValue(__self);
		public static void SetN(this Message_SoundManager_PlayOneShotParam __self, string value) => _n.Value.SetValue(__self, value);
		public static float GetF(this Message_SoundManager_PlayOneShotParam __self) => _f.Value.GetValue(__self);
		public static void SetF(this Message_SoundManager_PlayOneShotParam __self, float value) => _f.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_SoundManagerSnapshot
	{

		private static readonly System.Lazy<FieldAccessor<SoundManagerSnapshot, string>> _eventRef =
				new System.Lazy<FieldAccessor<SoundManagerSnapshot, string>>(() => FieldAccessor<SoundManagerSnapshot, string>.Create("eventRef"));

		public static string GetEventRef(this SoundManagerSnapshot __self) => _eventRef.Value.GetValue(__self);
		public static void SetEventRef(this SoundManagerSnapshot __self, string value) => _eventRef.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_StudioEventEmitterSustain
	{

		private static readonly System.Lazy<FieldAccessor<StudioEventEmitterSustain, UnityEngine.Coroutine>> _stopDelayedCoroutine =
				new System.Lazy<FieldAccessor<StudioEventEmitterSustain, UnityEngine.Coroutine>>(() => FieldAccessor<StudioEventEmitterSustain, UnityEngine.Coroutine>.Create("stopDelayedCoroutine"));

		public static UnityEngine.Coroutine GetStopDelayedCoroutine(this StudioEventEmitterSustain __self) => _stopDelayedCoroutine.Value.GetValue(__self);
		public static void SetStopDelayedCoroutine(this StudioEventEmitterSustain __self, UnityEngine.Coroutine value) => _stopDelayedCoroutine.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<StudioEventEmitterSustain>> _StopDelayed757602046 =
				new System.Lazy<MethodAccessor<StudioEventEmitterSustain>>(() => MethodAccessor<StudioEventEmitterSustain>.Create("StopDelayed"));

		public static System.Collections.IEnumerator StopDelayed(this StudioEventEmitterSustain __self) => (System.Collections.IEnumerator)_StopDelayed757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_WorldManager
	{

		private static readonly System.Lazy<FieldAccessor<WorldManager, Network_Host>> _network_host =
				new System.Lazy<FieldAccessor<WorldManager, Network_Host>>(() => FieldAccessor<WorldManager, Network_Host>.Create("network_host"));
		private static readonly System.Lazy<FieldAccessor<WorldManager, Raft_Network>> _network =
				new System.Lazy<FieldAccessor<WorldManager, Raft_Network>>(() => FieldAccessor<WorldManager, Raft_Network>.Create("network"));
		private static readonly System.Lazy<FieldAccessor<WorldManager, float>> _previousTime =
				new System.Lazy<FieldAccessor<WorldManager, float>>(() => FieldAccessor<WorldManager, float>.Create("previousTime"));

		public static Network_Host GetNetwork_host(this WorldManager __self) => _network_host.Value.GetValue(__self);
		public static void SetNetwork_host(this WorldManager __self, Network_Host value) => _network_host.Value.SetValue(__self, value);
		public static Raft_Network GetNetwork(this WorldManager __self) => _network.Value.GetValue(__self);
		public static void SetNetwork(this WorldManager __self, Raft_Network value) => _network.Value.SetValue(__self, value);
		public static float GetPreviousTime(this WorldManager __self) => _previousTime.Value.GetValue(__self);
		public static void SetPreviousTime(this WorldManager __self, float value) => _previousTime.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<WorldManager>> _Start757602046 =
				new System.Lazy<MethodAccessor<WorldManager>>(() => MethodAccessor<WorldManager>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<WorldManager>> _Update757602046 =
				new System.Lazy<MethodAccessor<WorldManager>>(() => MethodAccessor<WorldManager>.Create("Update"));

		public static void Start(this WorldManager __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this WorldManager __self) => _Update757602046.Value.Invoke(__self);

	}

	public static class Private_WorldManager
	{

		private static readonly System.Lazy<StaticFieldAccessor<int>> _dayCounter =
				new System.Lazy<StaticFieldAccessor<int>>(() => StaticFieldAccessor<int>.Create(typeof(WorldManager), "dayCounter"));

		public static int GetDayCounter() => _dayCounter.Value.GetValue();
		public static void SetDayCounter(int value) => _dayCounter.Value.SetValue(value);

	}

	public static class PrivateAccessor_WorldShiftManager
	{

		private static readonly System.Lazy<FieldAccessor<WorldShiftManager, UnityEngine.Transform>> __raftTransform =
				new System.Lazy<FieldAccessor<WorldShiftManager, UnityEngine.Transform>>(() => FieldAccessor<WorldShiftManager, UnityEngine.Transform>.Create("_raftTransform"));
		private static readonly System.Lazy<FieldAccessor<WorldShiftManager, UnityEngine.Color>> _gizmoColor =
				new System.Lazy<FieldAccessor<WorldShiftManager, UnityEngine.Color>>(() => FieldAccessor<WorldShiftManager, UnityEngine.Color>.Create("gizmoColor"));
		private static readonly System.Lazy<FieldAccessor<WorldShiftManager, Raft_Network>> _network =
				new System.Lazy<FieldAccessor<WorldShiftManager, Raft_Network>>(() => FieldAccessor<WorldShiftManager, Raft_Network>.Create("network"));

		public static UnityEngine.Transform Get_raftTransform(this WorldShiftManager __self) => __raftTransform.Value.GetValue(__self);
		public static void Set_raftTransform(this WorldShiftManager __self, UnityEngine.Transform value) => __raftTransform.Value.SetValue(__self, value);
		public static UnityEngine.Color GetGizmoColor(this WorldShiftManager __self) => _gizmoColor.Value.GetValue(__self);
		public static void SetGizmoColor(this WorldShiftManager __self, UnityEngine.Color value) => _gizmoColor.Value.SetValue(__self, value);
		public static Raft_Network GetNetwork(this WorldShiftManager __self) => _network.Value.GetValue(__self);
		public static void SetNetwork(this WorldShiftManager __self, Raft_Network value) => _network.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<WorldShiftManager>> _Start757602046 =
				new System.Lazy<MethodAccessor<WorldShiftManager>>(() => MethodAccessor<WorldShiftManager>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<WorldShiftManager>> _Update757602046 =
				new System.Lazy<MethodAccessor<WorldShiftManager>>(() => MethodAccessor<WorldShiftManager>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<WorldShiftManager>> _HandleWorldShift757602046 =
				new System.Lazy<MethodAccessor<WorldShiftManager>>(() => MethodAccessor<WorldShiftManager>.Create("HandleWorldShift"));
		private static readonly System.Lazy<MethodAccessor<WorldShiftManager>> _OnDrawGizmos757602046 =
				new System.Lazy<MethodAccessor<WorldShiftManager>>(() => MethodAccessor<WorldShiftManager>.Create("OnDrawGizmos"));

		public static void Start(this WorldShiftManager __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this WorldShiftManager __self) => _Update757602046.Value.Invoke(__self);
		public static void HandleWorldShift(this WorldShiftManager __self) => _HandleWorldShift757602046.Value.Invoke(__self);
		public static void OnDrawGizmos(this WorldShiftManager __self) => _OnDrawGizmos757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_BuffDisplayObject
	{

		private static readonly System.Lazy<FieldAccessor<BuffDisplayObject, UnityEngine.UI.Image>> _maskRadialImage =
				new System.Lazy<FieldAccessor<BuffDisplayObject, UnityEngine.UI.Image>>(() => FieldAccessor<BuffDisplayObject, UnityEngine.UI.Image>.Create("maskRadialImage"));
		private static readonly System.Lazy<FieldAccessor<BuffDisplayObject, UnityEngine.UI.Image>> _radialImage =
				new System.Lazy<FieldAccessor<BuffDisplayObject, UnityEngine.UI.Image>>(() => FieldAccessor<BuffDisplayObject, UnityEngine.UI.Image>.Create("radialImage"));
		private static readonly System.Lazy<FieldAccessor<BuffDisplayObject, UnityEngine.UI.Image>> _centerImage =
				new System.Lazy<FieldAccessor<BuffDisplayObject, UnityEngine.UI.Image>>(() => FieldAccessor<BuffDisplayObject, UnityEngine.UI.Image>.Create("centerImage"));
		private static readonly System.Lazy<FieldAccessor<BuffDisplayObject, float>> _duration =
				new System.Lazy<FieldAccessor<BuffDisplayObject, float>>(() => FieldAccessor<BuffDisplayObject, float>.Create("duration"));
		private static readonly System.Lazy<FieldAccessor<BuffDisplayObject, float>> _progress =
				new System.Lazy<FieldAccessor<BuffDisplayObject, float>>(() => FieldAccessor<BuffDisplayObject, float>.Create("progress"));

		public static UnityEngine.UI.Image GetMaskRadialImage(this BuffDisplayObject __self) => _maskRadialImage.Value.GetValue(__self);
		public static void SetMaskRadialImage(this BuffDisplayObject __self, UnityEngine.UI.Image value) => _maskRadialImage.Value.SetValue(__self, value);
		public static UnityEngine.UI.Image GetRadialImage(this BuffDisplayObject __self) => _radialImage.Value.GetValue(__self);
		public static void SetRadialImage(this BuffDisplayObject __self, UnityEngine.UI.Image value) => _radialImage.Value.SetValue(__self, value);
		public static UnityEngine.UI.Image GetCenterImage(this BuffDisplayObject __self) => _centerImage.Value.GetValue(__self);
		public static void SetCenterImage(this BuffDisplayObject __self, UnityEngine.UI.Image value) => _centerImage.Value.SetValue(__self, value);
		public static float GetDuration(this BuffDisplayObject __self) => _duration.Value.GetValue(__self);
		public static void SetDuration(this BuffDisplayObject __self, float value) => _duration.Value.SetValue(__self, value);
		public static float GetProgress(this BuffDisplayObject __self) => _progress.Value.GetValue(__self);
		public static void SetProgress(this BuffDisplayObject __self, float value) => _progress.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<BuffDisplayObject>> _Update757602046 =
				new System.Lazy<MethodAccessor<BuffDisplayObject>>(() => MethodAccessor<BuffDisplayObject>.Create("Update"));

		public static void Update(this BuffDisplayObject __self) => _Update757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_BuffDisplayer
	{

		private static readonly System.Lazy<FieldAccessor<BuffDisplayer, UnityEngine.Transform>> _timerParent =
				new System.Lazy<FieldAccessor<BuffDisplayer, UnityEngine.Transform>>(() => FieldAccessor<BuffDisplayer, UnityEngine.Transform>.Create("timerParent"));
		private static readonly System.Lazy<FieldAccessor<BuffDisplayer, BuffDisplayObject>> _timerPrefab =
				new System.Lazy<FieldAccessor<BuffDisplayer, BuffDisplayObject>>(() => FieldAccessor<BuffDisplayer, BuffDisplayObject>.Create("timerPrefab"));
		private static readonly System.Lazy<FieldAccessor<BuffDisplayer, UnityEngine.Color>> _goodColor =
				new System.Lazy<FieldAccessor<BuffDisplayer, UnityEngine.Color>>(() => FieldAccessor<BuffDisplayer, UnityEngine.Color>.Create("goodColor"));
		private static readonly System.Lazy<FieldAccessor<BuffDisplayer, UnityEngine.Color>> _badColor =
				new System.Lazy<FieldAccessor<BuffDisplayer, UnityEngine.Color>>(() => FieldAccessor<BuffDisplayer, UnityEngine.Color>.Create("badColor"));
		private static readonly System.Lazy<FieldAccessor<BuffDisplayer, System.Collections.Generic.List<BuffDisplayObject>>> _currentObjects =
				new System.Lazy<FieldAccessor<BuffDisplayer, System.Collections.Generic.List<BuffDisplayObject>>>(() => FieldAccessor<BuffDisplayer, System.Collections.Generic.List<BuffDisplayObject>>.Create("currentObjects"));

		public static UnityEngine.Transform GetTimerParent(this BuffDisplayer __self) => _timerParent.Value.GetValue(__self);
		public static void SetTimerParent(this BuffDisplayer __self, UnityEngine.Transform value) => _timerParent.Value.SetValue(__self, value);
		public static BuffDisplayObject GetTimerPrefab(this BuffDisplayer __self) => _timerPrefab.Value.GetValue(__self);
		public static void SetTimerPrefab(this BuffDisplayer __self, BuffDisplayObject value) => _timerPrefab.Value.SetValue(__self, value);
		public static UnityEngine.Color GetGoodColor(this BuffDisplayer __self) => _goodColor.Value.GetValue(__self);
		public static void SetGoodColor(this BuffDisplayer __self, UnityEngine.Color value) => _goodColor.Value.SetValue(__self, value);
		public static UnityEngine.Color GetBadColor(this BuffDisplayer __self) => _badColor.Value.GetValue(__self);
		public static void SetBadColor(this BuffDisplayer __self, UnityEngine.Color value) => _badColor.Value.SetValue(__self, value);
		public static System.Collections.Generic.List<BuffDisplayObject> GetCurrentObjects(this BuffDisplayer __self) => _currentObjects.Value.GetValue(__self);
		public static void SetCurrentObjects(this BuffDisplayer __self, System.Collections.Generic.List<BuffDisplayObject> value) => _currentObjects.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<BuffDisplayer>> _Awake757602046 =
				new System.Lazy<MethodAccessor<BuffDisplayer>>(() => MethodAccessor<BuffDisplayer>.Create("Awake"));

		public static void Awake(this BuffDisplayer __self) => _Awake757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_CanvasDisabler
	{

		private static readonly System.Lazy<MethodAccessor<CanvasDisabler>> _Start757602046 =
				new System.Lazy<MethodAccessor<CanvasDisabler>>(() => MethodAccessor<CanvasDisabler>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<CanvasDisabler>> _CanvasHelper_MenuOpenEvent3489701807 =
				new System.Lazy<MethodAccessor<CanvasDisabler>>(() => MethodAccessor<CanvasDisabler>.Create("CanvasHelper_MenuOpenEvent", typeof(MenuType)));
		private static readonly System.Lazy<MethodAccessor<CanvasDisabler>> _CanvasHelper_MenuCloseEvent3489701807 =
				new System.Lazy<MethodAccessor<CanvasDisabler>>(() => MethodAccessor<CanvasDisabler>.Create("CanvasHelper_MenuCloseEvent", typeof(MenuType)));

		public static void Start(this CanvasDisabler __self) => _Start757602046.Value.Invoke(__self);
		public static void CanvasHelper_MenuOpenEvent(this CanvasDisabler __self, MenuType menuType) => _CanvasHelper_MenuOpenEvent3489701807.Value.Invoke(__self, menuType);
		public static void CanvasHelper_MenuCloseEvent(this CanvasDisabler __self, MenuType menuType) => _CanvasHelper_MenuCloseEvent3489701807.Value.Invoke(__self, menuType);

	}

	public static class PrivateAccessor_Collider2DRaycastFilter
	{

		private static readonly System.Lazy<FieldAccessor<Collider2DRaycastFilter, UnityEngine.Collider2D>> _myCollider =
				new System.Lazy<FieldAccessor<Collider2DRaycastFilter, UnityEngine.Collider2D>>(() => FieldAccessor<Collider2DRaycastFilter, UnityEngine.Collider2D>.Create("myCollider"));
		private static readonly System.Lazy<FieldAccessor<Collider2DRaycastFilter, UnityEngine.RectTransform>> _rectTransform =
				new System.Lazy<FieldAccessor<Collider2DRaycastFilter, UnityEngine.RectTransform>>(() => FieldAccessor<Collider2DRaycastFilter, UnityEngine.RectTransform>.Create("rectTransform"));

		public static UnityEngine.Collider2D GetMyCollider(this Collider2DRaycastFilter __self) => _myCollider.Value.GetValue(__self);
		public static void SetMyCollider(this Collider2DRaycastFilter __self, UnityEngine.Collider2D value) => _myCollider.Value.SetValue(__self, value);
		public static UnityEngine.RectTransform GetRectTransform(this Collider2DRaycastFilter __self) => _rectTransform.Value.GetValue(__self);
		public static void SetRectTransform(this Collider2DRaycastFilter __self, UnityEngine.RectTransform value) => _rectTransform.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Collider2DRaycastFilter>> _Awake757602046 =
				new System.Lazy<MethodAccessor<Collider2DRaycastFilter>>(() => MethodAccessor<Collider2DRaycastFilter>.Create("Awake"));

		public static void Awake(this Collider2DRaycastFilter __self) => _Awake757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_ColorBar
	{

		private static readonly System.Lazy<FieldAccessor<ColorBar, UnityEngine.UI.Image>> _image =
				new System.Lazy<FieldAccessor<ColorBar, UnityEngine.UI.Image>>(() => FieldAccessor<ColorBar, UnityEngine.UI.Image>.Create("image"));
		private static readonly System.Lazy<FieldAccessor<ColorBar, UnityEngine.UI.Text>> _costText =
				new System.Lazy<FieldAccessor<ColorBar, UnityEngine.UI.Text>>(() => FieldAccessor<ColorBar, UnityEngine.UI.Text>.Create("costText"));
		private static readonly System.Lazy<FieldAccessor<ColorBar, float>> _barHeight =
				new System.Lazy<FieldAccessor<ColorBar, float>>(() => FieldAccessor<ColorBar, float>.Create("barHeight"));

		public static UnityEngine.UI.Image GetImage(this ColorBar __self) => _image.Value.GetValue(__self);
		public static void SetImage(this ColorBar __self, UnityEngine.UI.Image value) => _image.Value.SetValue(__self, value);
		public static UnityEngine.UI.Text GetCostText(this ColorBar __self) => _costText.Value.GetValue(__self);
		public static void SetCostText(this ColorBar __self, UnityEngine.UI.Text value) => _costText.Value.SetValue(__self, value);
		public static float GetBarHeight(this ColorBar __self) => _barHeight.Value.GetValue(__self);
		public static void SetBarHeight(this ColorBar __self, float value) => _barHeight.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<ColorBar>> _FillBar3486905475 =
				new System.Lazy<MethodAccessor<ColorBar>>(() => MethodAccessor<ColorBar>.Create("FillBar", typeof(float)));

		public static System.Collections.IEnumerator FillBar(this ColorBar __self, float value) => (System.Collections.IEnumerator)_FillBar3486905475.Value.Invoke(__self, value);

	}

	public static class PrivateAccessor_ColorButton
	{

		private static readonly System.Lazy<FieldAccessor<ColorButton, UnityEngine.UI.Image>> _invertImage =
				new System.Lazy<FieldAccessor<ColorButton, UnityEngine.UI.Image>>(() => FieldAccessor<ColorButton, UnityEngine.UI.Image>.Create("invertImage"));
		private static readonly System.Lazy<FieldAccessor<ColorButton, UnityEngine.UI.Button>> _button =
				new System.Lazy<FieldAccessor<ColorButton, UnityEngine.UI.Button>>(() => FieldAccessor<ColorButton, UnityEngine.UI.Button>.Create("button"));
		private static readonly System.Lazy<FieldAccessor<ColorButton, ColorPicker>> _colorPicker =
				new System.Lazy<FieldAccessor<ColorButton, ColorPicker>>(() => FieldAccessor<ColorButton, ColorPicker>.Create("colorPicker"));

		public static UnityEngine.UI.Image GetInvertImage(this ColorButton __self) => _invertImage.Value.GetValue(__self);
		public static void SetInvertImage(this ColorButton __self, UnityEngine.UI.Image value) => _invertImage.Value.SetValue(__self, value);
		public static UnityEngine.UI.Button GetButton(this ColorButton __self) => _button.Value.GetValue(__self);
		public static void SetButton(this ColorButton __self, UnityEngine.UI.Button value) => _button.Value.SetValue(__self, value);
		public static ColorPicker GetColorPicker(this ColorButton __self) => _colorPicker.Value.GetValue(__self);
		public static void SetColorPicker(this ColorButton __self, ColorPicker value) => _colorPicker.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<ColorButton>> _OnDisable757602046 =
				new System.Lazy<MethodAccessor<ColorButton>>(() => MethodAccessor<ColorButton>.Create("OnDisable"));

		public static void OnDisable(this ColorButton __self) => _OnDisable757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_ColorMenu
	{

		private static readonly System.Lazy<FieldAccessor<ColorMenu, PatternButton>> _patternButtonPrefab =
				new System.Lazy<FieldAccessor<ColorMenu, PatternButton>>(() => FieldAccessor<ColorMenu, PatternButton>.Create("patternButtonPrefab"));
		private static readonly System.Lazy<FieldAccessor<ColorMenu, UnityEngine.RectTransform>> _patternButtonParent =
				new System.Lazy<FieldAccessor<ColorMenu, UnityEngine.RectTransform>>(() => FieldAccessor<ColorMenu, UnityEngine.RectTransform>.Create("patternButtonParent"));
		private static readonly System.Lazy<FieldAccessor<ColorMenu, UnityEngine.UI.Image>> _secondaryButtonImage =
				new System.Lazy<FieldAccessor<ColorMenu, UnityEngine.UI.Image>>(() => FieldAccessor<ColorMenu, UnityEngine.UI.Image>.Create("secondaryButtonImage"));
		private static readonly System.Lazy<FieldAccessor<ColorMenu, UnityEngine.Sprite>> _greenButton =
				new System.Lazy<FieldAccessor<ColorMenu, UnityEngine.Sprite>>(() => FieldAccessor<ColorMenu, UnityEngine.Sprite>.Create("greenButton"));
		private static readonly System.Lazy<FieldAccessor<ColorMenu, UnityEngine.Sprite>> _redButton =
				new System.Lazy<FieldAccessor<ColorMenu, UnityEngine.Sprite>>(() => FieldAccessor<ColorMenu, UnityEngine.Sprite>.Create("redButton"));
		private static readonly System.Lazy<FieldAccessor<ColorMenu, UnityEngine.CanvasGroup>> _canvasGroupSecondary =
				new System.Lazy<FieldAccessor<ColorMenu, UnityEngine.CanvasGroup>>(() => FieldAccessor<ColorMenu, UnityEngine.CanvasGroup>.Create("canvasGroupSecondary"));
		private static readonly System.Lazy<FieldAccessor<ColorMenu, float>> _disabledAlpha =
				new System.Lazy<FieldAccessor<ColorMenu, float>>(() => FieldAccessor<ColorMenu, float>.Create("disabledAlpha"));
		private static readonly System.Lazy<FieldAccessor<ColorMenu, System.Collections.Generic.List<PrevColorButton>>> _prevColorButtons =
				new System.Lazy<FieldAccessor<ColorMenu, System.Collections.Generic.List<PrevColorButton>>>(() => FieldAccessor<ColorMenu, System.Collections.Generic.List<PrevColorButton>>.Create("prevColorButtons"));
		private static readonly System.Lazy<FieldAccessor<ColorMenu, Item_Base>> _item_redPaint =
				new System.Lazy<FieldAccessor<ColorMenu, Item_Base>>(() => FieldAccessor<ColorMenu, Item_Base>.Create("item_redPaint"));
		private static readonly System.Lazy<FieldAccessor<ColorMenu, Item_Base>> _item_bluePaint =
				new System.Lazy<FieldAccessor<ColorMenu, Item_Base>>(() => FieldAccessor<ColorMenu, Item_Base>.Create("item_bluePaint"));
		private static readonly System.Lazy<FieldAccessor<ColorMenu, Item_Base>> _item_yellowPaint =
				new System.Lazy<FieldAccessor<ColorMenu, Item_Base>>(() => FieldAccessor<ColorMenu, Item_Base>.Create("item_yellowPaint"));
		private static readonly System.Lazy<FieldAccessor<ColorMenu, Item_Base>> _item_whitePaint =
				new System.Lazy<FieldAccessor<ColorMenu, Item_Base>>(() => FieldAccessor<ColorMenu, Item_Base>.Create("item_whitePaint"));
		private static readonly System.Lazy<FieldAccessor<ColorMenu, Item_Base>> _item_blackPaint =
				new System.Lazy<FieldAccessor<ColorMenu, Item_Base>>(() => FieldAccessor<ColorMenu, Item_Base>.Create("item_blackPaint"));
		private static readonly System.Lazy<FieldAccessor<ColorMenu, ColorCounter>> _redCounter =
				new System.Lazy<FieldAccessor<ColorMenu, ColorCounter>>(() => FieldAccessor<ColorMenu, ColorCounter>.Create("redCounter"));
		private static readonly System.Lazy<FieldAccessor<ColorMenu, ColorCounter>> _blueCounter =
				new System.Lazy<FieldAccessor<ColorMenu, ColorCounter>>(() => FieldAccessor<ColorMenu, ColorCounter>.Create("blueCounter"));
		private static readonly System.Lazy<FieldAccessor<ColorMenu, ColorCounter>> _yellowCounter =
				new System.Lazy<FieldAccessor<ColorMenu, ColorCounter>>(() => FieldAccessor<ColorMenu, ColorCounter>.Create("yellowCounter"));
		private static readonly System.Lazy<FieldAccessor<ColorMenu, ColorCounter>> _whiteCounter =
				new System.Lazy<FieldAccessor<ColorMenu, ColorCounter>>(() => FieldAccessor<ColorMenu, ColorCounter>.Create("whiteCounter"));
		private static readonly System.Lazy<FieldAccessor<ColorMenu, ColorCounter>> _blackCounter =
				new System.Lazy<FieldAccessor<ColorMenu, ColorCounter>>(() => FieldAccessor<ColorMenu, ColorCounter>.Create("blackCounter"));
		private static readonly System.Lazy<FieldAccessor<ColorMenu, Network_Player>> _localPlayer =
				new System.Lazy<FieldAccessor<ColorMenu, Network_Player>>(() => FieldAccessor<ColorMenu, Network_Player>.Create("localPlayer"));
		private static readonly System.Lazy<FieldAccessor<ColorMenu, System.Collections.Generic.List<PatternButton>>> _patternButtons =
				new System.Lazy<FieldAccessor<ColorMenu, System.Collections.Generic.List<PatternButton>>>(() => FieldAccessor<ColorMenu, System.Collections.Generic.List<PatternButton>>.Create("patternButtons"));

		public static PatternButton GetPatternButtonPrefab(this ColorMenu __self) => _patternButtonPrefab.Value.GetValue(__self);
		public static void SetPatternButtonPrefab(this ColorMenu __self, PatternButton value) => _patternButtonPrefab.Value.SetValue(__self, value);
		public static UnityEngine.RectTransform GetPatternButtonParent(this ColorMenu __self) => _patternButtonParent.Value.GetValue(__self);
		public static void SetPatternButtonParent(this ColorMenu __self, UnityEngine.RectTransform value) => _patternButtonParent.Value.SetValue(__self, value);
		public static UnityEngine.UI.Image GetSecondaryButtonImage(this ColorMenu __self) => _secondaryButtonImage.Value.GetValue(__self);
		public static void SetSecondaryButtonImage(this ColorMenu __self, UnityEngine.UI.Image value) => _secondaryButtonImage.Value.SetValue(__self, value);
		public static UnityEngine.Sprite GetGreenButton(this ColorMenu __self) => _greenButton.Value.GetValue(__self);
		public static void SetGreenButton(this ColorMenu __self, UnityEngine.Sprite value) => _greenButton.Value.SetValue(__self, value);
		public static UnityEngine.Sprite GetRedButton(this ColorMenu __self) => _redButton.Value.GetValue(__self);
		public static void SetRedButton(this ColorMenu __self, UnityEngine.Sprite value) => _redButton.Value.SetValue(__self, value);
		public static UnityEngine.CanvasGroup GetCanvasGroupSecondary(this ColorMenu __self) => _canvasGroupSecondary.Value.GetValue(__self);
		public static void SetCanvasGroupSecondary(this ColorMenu __self, UnityEngine.CanvasGroup value) => _canvasGroupSecondary.Value.SetValue(__self, value);
		public static float GetDisabledAlpha(this ColorMenu __self) => _disabledAlpha.Value.GetValue(__self);
		public static void SetDisabledAlpha(this ColorMenu __self, float value) => _disabledAlpha.Value.SetValue(__self, value);
		public static System.Collections.Generic.List<PrevColorButton> GetPrevColorButtons(this ColorMenu __self) => _prevColorButtons.Value.GetValue(__self);
		public static void SetPrevColorButtons(this ColorMenu __self, System.Collections.Generic.List<PrevColorButton> value) => _prevColorButtons.Value.SetValue(__self, value);
		public static Item_Base GetItem_redPaint(this ColorMenu __self) => _item_redPaint.Value.GetValue(__self);
		public static void SetItem_redPaint(this ColorMenu __self, Item_Base value) => _item_redPaint.Value.SetValue(__self, value);
		public static Item_Base GetItem_bluePaint(this ColorMenu __self) => _item_bluePaint.Value.GetValue(__self);
		public static void SetItem_bluePaint(this ColorMenu __self, Item_Base value) => _item_bluePaint.Value.SetValue(__self, value);
		public static Item_Base GetItem_yellowPaint(this ColorMenu __self) => _item_yellowPaint.Value.GetValue(__self);
		public static void SetItem_yellowPaint(this ColorMenu __self, Item_Base value) => _item_yellowPaint.Value.SetValue(__self, value);
		public static Item_Base GetItem_whitePaint(this ColorMenu __self) => _item_whitePaint.Value.GetValue(__self);
		public static void SetItem_whitePaint(this ColorMenu __self, Item_Base value) => _item_whitePaint.Value.SetValue(__self, value);
		public static Item_Base GetItem_blackPaint(this ColorMenu __self) => _item_blackPaint.Value.GetValue(__self);
		public static void SetItem_blackPaint(this ColorMenu __self, Item_Base value) => _item_blackPaint.Value.SetValue(__self, value);
		public static ColorCounter GetRedCounter(this ColorMenu __self) => _redCounter.Value.GetValue(__self);
		public static void SetRedCounter(this ColorMenu __self, ColorCounter value) => _redCounter.Value.SetValue(__self, value);
		public static ColorCounter GetBlueCounter(this ColorMenu __self) => _blueCounter.Value.GetValue(__self);
		public static void SetBlueCounter(this ColorMenu __self, ColorCounter value) => _blueCounter.Value.SetValue(__self, value);
		public static ColorCounter GetYellowCounter(this ColorMenu __self) => _yellowCounter.Value.GetValue(__self);
		public static void SetYellowCounter(this ColorMenu __self, ColorCounter value) => _yellowCounter.Value.SetValue(__self, value);
		public static ColorCounter GetWhiteCounter(this ColorMenu __self) => _whiteCounter.Value.GetValue(__self);
		public static void SetWhiteCounter(this ColorMenu __self, ColorCounter value) => _whiteCounter.Value.SetValue(__self, value);
		public static ColorCounter GetBlackCounter(this ColorMenu __self) => _blackCounter.Value.GetValue(__self);
		public static void SetBlackCounter(this ColorMenu __self, ColorCounter value) => _blackCounter.Value.SetValue(__self, value);
		public static Network_Player GetLocalPlayer(this ColorMenu __self) => _localPlayer.Value.GetValue(__self);
		public static void SetLocalPlayer(this ColorMenu __self, Network_Player value) => _localPlayer.Value.SetValue(__self, value);
		public static System.Collections.Generic.List<PatternButton> GetPatternButtons(this ColorMenu __self) => _patternButtons.Value.GetValue(__self);
		public static void SetPatternButtons(this ColorMenu __self, System.Collections.Generic.List<PatternButton> value) => _patternButtons.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<ColorMenu>> _Awake757602046 =
				new System.Lazy<MethodAccessor<ColorMenu>>(() => MethodAccessor<ColorMenu>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<ColorMenu>> _Start757602046 =
				new System.Lazy<MethodAccessor<ColorMenu>>(() => MethodAccessor<ColorMenu>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<ColorMenu>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<ColorMenu>>(() => MethodAccessor<ColorMenu>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<ColorMenu>> _OnMenuOpen3489701807 =
				new System.Lazy<MethodAccessor<ColorMenu>>(() => MethodAccessor<ColorMenu>.Create("OnMenuOpen", typeof(MenuType)));
		private static readonly System.Lazy<MethodAccessor<ColorMenu>> _GetCombinedCost2785666736 =
				new System.Lazy<MethodAccessor<ColorMenu>>(() => MethodAccessor<ColorMenu>.Create("GetCombinedCost", typeof(SO_ColorValue), typeof(SO_ColorValue)));

		public static void Awake(this ColorMenu __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this ColorMenu __self) => _Start757602046.Value.Invoke(__self);
		public static void OnDestroy(this ColorMenu __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void OnMenuOpen(this ColorMenu __self, MenuType type) => _OnMenuOpen3489701807.Value.Invoke(__self, type);
		public static System.Collections.Generic.List<Cost> GetCombinedCost(this ColorMenu __self, SO_ColorValue colorA, SO_ColorValue colorB) => (System.Collections.Generic.List<Cost>)_GetCombinedCost2785666736.Value.Invoke(__self, colorA, colorB);

	}

	public static class Private_ColorMenu
	{

		private static readonly System.Lazy<StaticFieldAccessor<SO_Pattern[]>> _patterns =
				new System.Lazy<StaticFieldAccessor<SO_Pattern[]>>(() => StaticFieldAccessor<SO_Pattern[]>.Create(typeof(ColorMenu), "patterns"));

		public static SO_Pattern[] GetPatterns() => _patterns.Value.GetValue();
		public static void SetPatterns(SO_Pattern[] value) => _patterns.Value.SetValue(value);

	}

	public static class PrivateAccessor_ColorPicker
	{

		private static readonly System.Lazy<FieldAccessor<ColorPicker, ColorButton>> _colorButtonObject =
				new System.Lazy<FieldAccessor<ColorPicker, ColorButton>>(() => FieldAccessor<ColorPicker, ColorButton>.Create("colorButtonObject"));
		private static readonly System.Lazy<FieldAccessor<ColorPicker, UnityEngine.RectTransform[]>> _colorLayerParents =
				new System.Lazy<FieldAccessor<ColorPicker, UnityEngine.RectTransform[]>>(() => FieldAccessor<ColorPicker, UnityEngine.RectTransform[]>.Create("colorLayerParents"));
		private static readonly System.Lazy<FieldAccessor<ColorPicker, int>> _pieSliceCount =
				new System.Lazy<FieldAccessor<ColorPicker, int>>(() => FieldAccessor<ColorPicker, int>.Create("pieSliceCount"));
		private static readonly System.Lazy<FieldAccessor<ColorPicker, System.Collections.Generic.List<ColorCollection>>> _colorCollections =
				new System.Lazy<FieldAccessor<ColorPicker, System.Collections.Generic.List<ColorCollection>>>(() => FieldAccessor<ColorPicker, System.Collections.Generic.List<ColorCollection>>.Create("colorCollections"));
		private static readonly System.Lazy<FieldAccessor<ColorPicker, System.Collections.Generic.List<ColorButton>>> _colorButtons =
				new System.Lazy<FieldAccessor<ColorPicker, System.Collections.Generic.List<ColorButton>>>(() => FieldAccessor<ColorPicker, System.Collections.Generic.List<ColorButton>>.Create("colorButtons"));

		public static ColorButton GetColorButtonObject(this ColorPicker __self) => _colorButtonObject.Value.GetValue(__self);
		public static void SetColorButtonObject(this ColorPicker __self, ColorButton value) => _colorButtonObject.Value.SetValue(__self, value);
		public static UnityEngine.RectTransform[] GetColorLayerParents(this ColorPicker __self) => _colorLayerParents.Value.GetValue(__self);
		public static void SetColorLayerParents(this ColorPicker __self, UnityEngine.RectTransform[] value) => _colorLayerParents.Value.SetValue(__self, value);
		public static int GetPieSliceCount(this ColorPicker __self) => _pieSliceCount.Value.GetValue(__self);
		public static void SetPieSliceCount(this ColorPicker __self, int value) => _pieSliceCount.Value.SetValue(__self, value);
		public static System.Collections.Generic.List<ColorCollection> GetColorCollections(this ColorPicker __self) => _colorCollections.Value.GetValue(__self);
		public static void SetColorCollections(this ColorPicker __self, System.Collections.Generic.List<ColorCollection> value) => _colorCollections.Value.SetValue(__self, value);
		public static System.Collections.Generic.List<ColorButton> GetColorButtons(this ColorPicker __self) => _colorButtons.Value.GetValue(__self);
		public static void SetColorButtons(this ColorPicker __self, System.Collections.Generic.List<ColorButton> value) => _colorButtons.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<ColorPicker>> _Awake757602046 =
				new System.Lazy<MethodAccessor<ColorPicker>>(() => MethodAccessor<ColorPicker>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<ColorPicker>> _OnValidate757602046 =
				new System.Lazy<MethodAccessor<ColorPicker>>(() => MethodAccessor<ColorPicker>.Create("OnValidate"));
		private static readonly System.Lazy<MethodAccessor<ColorPicker>> _Odin_CreateButtons757602046 =
				new System.Lazy<MethodAccessor<ColorPicker>>(() => MethodAccessor<ColorPicker>.Create("Odin_CreateButtons"));
		private static readonly System.Lazy<MethodAccessor<ColorPicker>> _InitializeButtons757602046 =
				new System.Lazy<MethodAccessor<ColorPicker>>(() => MethodAccessor<ColorPicker>.Create("InitializeButtons"));

		public static void Awake(this ColorPicker __self) => _Awake757602046.Value.Invoke(__self);
		public static void OnValidate(this ColorPicker __self) => _OnValidate757602046.Value.Invoke(__self);
		public static void Odin_CreateButtons(this ColorPicker __self) => _Odin_CreateButtons757602046.Value.Invoke(__self);
		public static void InitializeButtons(this ColorPicker __self) => _InitializeButtons757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_PatternButton
	{

		private static readonly System.Lazy<FieldAccessor<PatternButton, UnityEngine.UI.Image>> _patternImage =
				new System.Lazy<FieldAccessor<PatternButton, UnityEngine.UI.Image>>(() => FieldAccessor<PatternButton, UnityEngine.UI.Image>.Create("patternImage"));
		private static readonly System.Lazy<FieldAccessor<PatternButton, UnityEngine.GameObject>> _selectedImage =
				new System.Lazy<FieldAccessor<PatternButton, UnityEngine.GameObject>>(() => FieldAccessor<PatternButton, UnityEngine.GameObject>.Create("selectedImage"));

		public static UnityEngine.UI.Image GetPatternImage(this PatternButton __self) => _patternImage.Value.GetValue(__self);
		public static void SetPatternImage(this PatternButton __self, UnityEngine.UI.Image value) => _patternImage.Value.SetValue(__self, value);
		public static UnityEngine.GameObject GetSelectedImage(this PatternButton __self) => _selectedImage.Value.GetValue(__self);
		public static void SetSelectedImage(this PatternButton __self, UnityEngine.GameObject value) => _selectedImage.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<PatternButton>> _OnDisable757602046 =
				new System.Lazy<MethodAccessor<PatternButton>>(() => MethodAccessor<PatternButton>.Create("OnDisable"));

		public static void OnDisable(this PatternButton __self) => _OnDisable757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_PrevColorButton
	{

		private static readonly System.Lazy<FieldAccessor<PrevColorButton, UnityEngine.GameObject>> _visualParent =
				new System.Lazy<FieldAccessor<PrevColorButton, UnityEngine.GameObject>>(() => FieldAccessor<PrevColorButton, UnityEngine.GameObject>.Create("visualParent"));
		private static readonly System.Lazy<FieldAccessor<PrevColorButton, UnityEngine.UI.Image>> _primaryImage =
				new System.Lazy<FieldAccessor<PrevColorButton, UnityEngine.UI.Image>>(() => FieldAccessor<PrevColorButton, UnityEngine.UI.Image>.Create("primaryImage"));
		private static readonly System.Lazy<FieldAccessor<PrevColorButton, UnityEngine.UI.Image>> _secondaryImage =
				new System.Lazy<FieldAccessor<PrevColorButton, UnityEngine.UI.Image>>(() => FieldAccessor<PrevColorButton, UnityEngine.UI.Image>.Create("secondaryImage"));
		private static readonly System.Lazy<FieldAccessor<PrevColorButton, UnityEngine.UI.Image>> _doubleImage =
				new System.Lazy<FieldAccessor<PrevColorButton, UnityEngine.UI.Image>>(() => FieldAccessor<PrevColorButton, UnityEngine.UI.Image>.Create("doubleImage"));
		private static readonly System.Lazy<FieldAccessor<PrevColorButton, UnityEngine.UI.Image>> _patternImage =
				new System.Lazy<FieldAccessor<PrevColorButton, UnityEngine.UI.Image>>(() => FieldAccessor<PrevColorButton, UnityEngine.UI.Image>.Create("patternImage"));

		public static UnityEngine.GameObject GetVisualParent(this PrevColorButton __self) => _visualParent.Value.GetValue(__self);
		public static void SetVisualParent(this PrevColorButton __self, UnityEngine.GameObject value) => _visualParent.Value.SetValue(__self, value);
		public static UnityEngine.UI.Image GetPrimaryImage(this PrevColorButton __self) => _primaryImage.Value.GetValue(__self);
		public static void SetPrimaryImage(this PrevColorButton __self, UnityEngine.UI.Image value) => _primaryImage.Value.SetValue(__self, value);
		public static UnityEngine.UI.Image GetSecondaryImage(this PrevColorButton __self) => _secondaryImage.Value.GetValue(__self);
		public static void SetSecondaryImage(this PrevColorButton __self, UnityEngine.UI.Image value) => _secondaryImage.Value.SetValue(__self, value);
		public static UnityEngine.UI.Image GetDoubleImage(this PrevColorButton __self) => _doubleImage.Value.GetValue(__self);
		public static void SetDoubleImage(this PrevColorButton __self, UnityEngine.UI.Image value) => _doubleImage.Value.SetValue(__self, value);
		public static UnityEngine.UI.Image GetPatternImage(this PrevColorButton __self) => _patternImage.Value.GetValue(__self);
		public static void SetPatternImage(this PrevColorButton __self, UnityEngine.UI.Image value) => _patternImage.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_CraftingMenu
	{

		private static readonly System.Lazy<FieldAccessor<CraftingMenu, int>> _maxItemShown =
				new System.Lazy<FieldAccessor<CraftingMenu, int>>(() => FieldAccessor<CraftingMenu, int>.Create("maxItemShown"));
		private static readonly System.Lazy<FieldAccessor<CraftingMenu, string>> _eventRef_craftItem =
				new System.Lazy<FieldAccessor<CraftingMenu, string>>(() => FieldAccessor<CraftingMenu, string>.Create("eventRef_craftItem"));
		private static readonly System.Lazy<FieldAccessor<CraftingMenu, CraftingCategory>> _selectedCategory =
				new System.Lazy<FieldAccessor<CraftingMenu, CraftingCategory>>(() => FieldAccessor<CraftingMenu, CraftingCategory>.Create("selectedCategory"));
		private static readonly System.Lazy<FieldAccessor<CraftingMenu, System.Collections.Generic.Dictionary<CraftingCategory, System.Collections.Generic.List<RecipeItem>>>> _allRecipes =
				new System.Lazy<FieldAccessor<CraftingMenu, System.Collections.Generic.Dictionary<CraftingCategory, System.Collections.Generic.List<RecipeItem>>>>(() => FieldAccessor<CraftingMenu, System.Collections.Generic.Dictionary<CraftingCategory, System.Collections.Generic.List<RecipeItem>>>.Create("allRecipes"));
		private static readonly System.Lazy<FieldAccessor<CraftingMenu, Network_Player>> _localPlayer =
				new System.Lazy<FieldAccessor<CraftingMenu, Network_Player>>(() => FieldAccessor<CraftingMenu, Network_Player>.Create("localPlayer"));
		private static readonly System.Lazy<FieldAccessor<CraftingMenu, System.Collections.Generic.List<RecipeMenuItem>>> _recipeMenuItems =
				new System.Lazy<FieldAccessor<CraftingMenu, System.Collections.Generic.List<RecipeMenuItem>>>(() => FieldAccessor<CraftingMenu, System.Collections.Generic.List<RecipeMenuItem>>.Create("recipeMenuItems"));
		private static readonly System.Lazy<FieldAccessor<CraftingMenu, float>> _defaultHeight =
				new System.Lazy<FieldAccessor<CraftingMenu, float>>(() => FieldAccessor<CraftingMenu, float>.Create("defaultHeight"));
		private static readonly System.Lazy<FieldAccessor<CraftingMenu, float>> _spacingHeight =
				new System.Lazy<FieldAccessor<CraftingMenu, float>>(() => FieldAccessor<CraftingMenu, float>.Create("spacingHeight"));
		private static readonly System.Lazy<FieldAccessor<CraftingMenu, float>> _recipeHeight =
				new System.Lazy<FieldAccessor<CraftingMenu, float>>(() => FieldAccessor<CraftingMenu, float>.Create("recipeHeight"));

		public static int GetMaxItemShown(this CraftingMenu __self) => _maxItemShown.Value.GetValue(__self);
		public static void SetMaxItemShown(this CraftingMenu __self, int value) => _maxItemShown.Value.SetValue(__self, value);
		public static string GetEventRef_craftItem(this CraftingMenu __self) => _eventRef_craftItem.Value.GetValue(__self);
		public static void SetEventRef_craftItem(this CraftingMenu __self, string value) => _eventRef_craftItem.Value.SetValue(__self, value);
		public static CraftingCategory GetSelectedCategory(this CraftingMenu __self) => _selectedCategory.Value.GetValue(__self);
		public static void SetSelectedCategory(this CraftingMenu __self, CraftingCategory value) => _selectedCategory.Value.SetValue(__self, value);
		public static System.Collections.Generic.Dictionary<CraftingCategory, System.Collections.Generic.List<RecipeItem>> GetAllRecipes(this CraftingMenu __self) => _allRecipes.Value.GetValue(__self);
		public static void SetAllRecipes(this CraftingMenu __self, System.Collections.Generic.Dictionary<CraftingCategory, System.Collections.Generic.List<RecipeItem>> value) => _allRecipes.Value.SetValue(__self, value);
		public static Network_Player GetLocalPlayer(this CraftingMenu __self) => _localPlayer.Value.GetValue(__self);
		public static void SetLocalPlayer(this CraftingMenu __self, Network_Player value) => _localPlayer.Value.SetValue(__self, value);
		public static System.Collections.Generic.List<RecipeMenuItem> GetRecipeMenuItems(this CraftingMenu __self) => _recipeMenuItems.Value.GetValue(__self);
		public static void SetRecipeMenuItems(this CraftingMenu __self, System.Collections.Generic.List<RecipeMenuItem> value) => _recipeMenuItems.Value.SetValue(__self, value);
		public static float GetDefaultHeight(this CraftingMenu __self) => _defaultHeight.Value.GetValue(__self);
		public static void SetDefaultHeight(this CraftingMenu __self, float value) => _defaultHeight.Value.SetValue(__self, value);
		public static float GetSpacingHeight(this CraftingMenu __self) => _spacingHeight.Value.GetValue(__self);
		public static void SetSpacingHeight(this CraftingMenu __self, float value) => _spacingHeight.Value.SetValue(__self, value);
		public static float GetRecipeHeight(this CraftingMenu __self) => _recipeHeight.Value.GetValue(__self);
		public static void SetRecipeHeight(this CraftingMenu __self, float value) => _recipeHeight.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<CraftingMenu>> _Awake757602046 =
				new System.Lazy<MethodAccessor<CraftingMenu>>(() => MethodAccessor<CraftingMenu>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<CraftingMenu>> _Start757602046 =
				new System.Lazy<MethodAccessor<CraftingMenu>>(() => MethodAccessor<CraftingMenu>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<CraftingMenu>> _OnWorldRecievedLate757602046 =
				new System.Lazy<MethodAccessor<CraftingMenu>>(() => MethodAccessor<CraftingMenu>.Create("OnWorldRecievedLate"));
		private static readonly System.Lazy<MethodAccessor<CraftingMenu>> _OnEnable757602046 =
				new System.Lazy<MethodAccessor<CraftingMenu>>(() => MethodAccessor<CraftingMenu>.Create("OnEnable"));
		private static readonly System.Lazy<MethodAccessor<CraftingMenu>> _InitializeRecipes757602046 =
				new System.Lazy<MethodAccessor<CraftingMenu>>(() => MethodAccessor<CraftingMenu>.Create("InitializeRecipes"));
		private static readonly System.Lazy<MethodAccessor<CraftingMenu>> _InitializeMenuItems757602046 =
				new System.Lazy<MethodAccessor<CraftingMenu>>(() => MethodAccessor<CraftingMenu>.Create("InitializeMenuItems"));

		public static void Awake(this CraftingMenu __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this CraftingMenu __self) => _Start757602046.Value.Invoke(__self);
		public static void OnWorldRecievedLate(this CraftingMenu __self) => _OnWorldRecievedLate757602046.Value.Invoke(__self);
		public static void OnEnable(this CraftingMenu __self) => _OnEnable757602046.Value.Invoke(__self);
		public static void InitializeRecipes(this CraftingMenu __self) => _InitializeRecipes757602046.Value.Invoke(__self);
		public static void InitializeMenuItems(this CraftingMenu __self) => _InitializeMenuItems757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_RecipeMenuItem
	{

		private static readonly System.Lazy<FieldAccessor<RecipeMenuItem, UnityEngine.UI.Button>> _textTransform =
				new System.Lazy<FieldAccessor<RecipeMenuItem, UnityEngine.UI.Button>>(() => FieldAccessor<RecipeMenuItem, UnityEngine.UI.Button>.Create("textTransform"));
		private static readonly System.Lazy<FieldAccessor<RecipeMenuItem, UnityEngine.UI.Text>> _text_subCategory =
				new System.Lazy<FieldAccessor<RecipeMenuItem, UnityEngine.UI.Text>>(() => FieldAccessor<RecipeMenuItem, UnityEngine.UI.Text>.Create("text_subCategory"));
		private static readonly System.Lazy<FieldAccessor<RecipeMenuItem, RecipeMenuSubItem>> _subItemPrefab =
				new System.Lazy<FieldAccessor<RecipeMenuItem, RecipeMenuSubItem>>(() => FieldAccessor<RecipeMenuItem, RecipeMenuSubItem>.Create("subItemPrefab"));
		private static readonly System.Lazy<FieldAccessor<RecipeMenuItem, UnityEngine.RectTransform>> _subItemParent =
				new System.Lazy<FieldAccessor<RecipeMenuItem, UnityEngine.RectTransform>>(() => FieldAccessor<RecipeMenuItem, UnityEngine.RectTransform>.Create("subItemParent"));
		private static readonly System.Lazy<FieldAccessor<RecipeMenuItem, CraftingMenu>> _craftingMenu =
				new System.Lazy<FieldAccessor<RecipeMenuItem, CraftingMenu>>(() => FieldAccessor<RecipeMenuItem, CraftingMenu>.Create("craftingMenu"));
		private static readonly System.Lazy<FieldAccessor<RecipeMenuItem, System.Collections.Generic.List<RecipeMenuSubItem>>> _subItems =
				new System.Lazy<FieldAccessor<RecipeMenuItem, System.Collections.Generic.List<RecipeMenuSubItem>>>(() => FieldAccessor<RecipeMenuItem, System.Collections.Generic.List<RecipeMenuSubItem>>.Create("subItems"));
		private static readonly System.Lazy<FieldAccessor<RecipeMenuItem, float>> _subItemDeltaSize =
				new System.Lazy<FieldAccessor<RecipeMenuItem, float>>(() => FieldAccessor<RecipeMenuItem, float>.Create("subItemDeltaSize"));

		public static UnityEngine.UI.Button GetTextTransform(this RecipeMenuItem __self) => _textTransform.Value.GetValue(__self);
		public static void SetTextTransform(this RecipeMenuItem __self, UnityEngine.UI.Button value) => _textTransform.Value.SetValue(__self, value);
		public static UnityEngine.UI.Text GetText_subCategory(this RecipeMenuItem __self) => _text_subCategory.Value.GetValue(__self);
		public static void SetText_subCategory(this RecipeMenuItem __self, UnityEngine.UI.Text value) => _text_subCategory.Value.SetValue(__self, value);
		public static RecipeMenuSubItem GetSubItemPrefab(this RecipeMenuItem __self) => _subItemPrefab.Value.GetValue(__self);
		public static void SetSubItemPrefab(this RecipeMenuItem __self, RecipeMenuSubItem value) => _subItemPrefab.Value.SetValue(__self, value);
		public static UnityEngine.RectTransform GetSubItemParent(this RecipeMenuItem __self) => _subItemParent.Value.GetValue(__self);
		public static void SetSubItemParent(this RecipeMenuItem __self, UnityEngine.RectTransform value) => _subItemParent.Value.SetValue(__self, value);
		public static CraftingMenu GetCraftingMenu(this RecipeMenuItem __self) => _craftingMenu.Value.GetValue(__self);
		public static void SetCraftingMenu(this RecipeMenuItem __self, CraftingMenu value) => _craftingMenu.Value.SetValue(__self, value);
		public static System.Collections.Generic.List<RecipeMenuSubItem> GetSubItems(this RecipeMenuItem __self) => _subItems.Value.GetValue(__self);
		public static void SetSubItems(this RecipeMenuItem __self, System.Collections.Generic.List<RecipeMenuSubItem> value) => _subItems.Value.SetValue(__self, value);
		public static float GetSubItemDeltaSize(this RecipeMenuItem __self) => _subItemDeltaSize.Value.GetValue(__self);
		public static void SetSubItemDeltaSize(this RecipeMenuItem __self, float value) => _subItemDeltaSize.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<RecipeMenuItem>> _Awake757602046 =
				new System.Lazy<MethodAccessor<RecipeMenuItem>>(() => MethodAccessor<RecipeMenuItem>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<RecipeMenuItem>> _Start757602046 =
				new System.Lazy<MethodAccessor<RecipeMenuItem>>(() => MethodAccessor<RecipeMenuItem>.Create("Start"));

		public static void Awake(this RecipeMenuItem __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this RecipeMenuItem __self) => _Start757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_RecipeMenuSubItem
	{

		private static readonly System.Lazy<FieldAccessor<RecipeMenuSubItem, UnityEngine.UI.Image>> _image_item =
				new System.Lazy<FieldAccessor<RecipeMenuSubItem, UnityEngine.UI.Image>>(() => FieldAccessor<RecipeMenuSubItem, UnityEngine.UI.Image>.Create("image_item"));
		private static readonly System.Lazy<FieldAccessor<RecipeMenuSubItem, CraftingMenu>> _craftingMenu =
				new System.Lazy<FieldAccessor<RecipeMenuSubItem, CraftingMenu>>(() => FieldAccessor<RecipeMenuSubItem, CraftingMenu>.Create("craftingMenu"));

		public static UnityEngine.UI.Image GetImage_item(this RecipeMenuSubItem __self) => _image_item.Value.GetValue(__self);
		public static void SetImage_item(this RecipeMenuSubItem __self, UnityEngine.UI.Image value) => _image_item.Value.SetValue(__self, value);
		public static CraftingMenu GetCraftingMenu(this RecipeMenuSubItem __self) => _craftingMenu.Value.GetValue(__self);
		public static void SetCraftingMenu(this RecipeMenuSubItem __self, CraftingMenu value) => _craftingMenu.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<RecipeMenuSubItem>> _Start757602046 =
				new System.Lazy<MethodAccessor<RecipeMenuSubItem>>(() => MethodAccessor<RecipeMenuSubItem>.Create("Start"));

		public static void Start(this RecipeMenuSubItem __self) => _Start757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_SelectedRecipeBox
	{

		private static readonly System.Lazy<FieldAccessor<SelectedRecipeBox, UnityEngine.RectTransform>> _itemDescriptionRect =
				new System.Lazy<FieldAccessor<SelectedRecipeBox, UnityEngine.RectTransform>>(() => FieldAccessor<SelectedRecipeBox, UnityEngine.RectTransform>.Create("itemDescriptionRect"));
		private static readonly System.Lazy<FieldAccessor<SelectedRecipeBox, UnityEngine.RectTransform>> _costBoxParent =
				new System.Lazy<FieldAccessor<SelectedRecipeBox, UnityEngine.RectTransform>>(() => FieldAccessor<SelectedRecipeBox, UnityEngine.RectTransform>.Create("costBoxParent"));
		private static readonly System.Lazy<FieldAccessor<SelectedRecipeBox, UnityEngine.RectTransform>> _skinMenuParent =
				new System.Lazy<FieldAccessor<SelectedRecipeBox, UnityEngine.RectTransform>>(() => FieldAccessor<SelectedRecipeBox, UnityEngine.RectTransform>.Create("skinMenuParent"));
		private static readonly System.Lazy<FieldAccessor<SelectedRecipeBox, UnityEngine.RectTransform>> _skinMenuItemPrefab =
				new System.Lazy<FieldAccessor<SelectedRecipeBox, UnityEngine.RectTransform>>(() => FieldAccessor<SelectedRecipeBox, UnityEngine.RectTransform>.Create("skinMenuItemPrefab"));
		private static readonly System.Lazy<FieldAccessor<SelectedRecipeBox, CostCollection>> _costCollection =
				new System.Lazy<FieldAccessor<SelectedRecipeBox, CostCollection>>(() => FieldAccessor<SelectedRecipeBox, CostCollection>.Create("costCollection"));
		private static readonly System.Lazy<FieldAccessor<SelectedRecipeBox, UnityEngine.UI.ContentSizeFitter>> _contentSizeFitter =
				new System.Lazy<FieldAccessor<SelectedRecipeBox, UnityEngine.UI.ContentSizeFitter>>(() => FieldAccessor<SelectedRecipeBox, UnityEngine.UI.ContentSizeFitter>.Create("contentSizeFitter"));
		private static readonly System.Lazy<FieldAccessor<SelectedRecipeBox, UnityEngine.RectTransform>> _layoutGroupParent =
				new System.Lazy<FieldAccessor<SelectedRecipeBox, UnityEngine.RectTransform>>(() => FieldAccessor<SelectedRecipeBox, UnityEngine.RectTransform>.Create("layoutGroupParent"));
		private static readonly System.Lazy<FieldAccessor<SelectedRecipeBox, float>> _backgroundOffset =
				new System.Lazy<FieldAccessor<SelectedRecipeBox, float>>(() => FieldAccessor<SelectedRecipeBox, float>.Create("backgroundOffset"));
		private static readonly System.Lazy<FieldAccessor<SelectedRecipeBox, PlayerInventory>> _playerInventory =
				new System.Lazy<FieldAccessor<SelectedRecipeBox, PlayerInventory>>(() => FieldAccessor<SelectedRecipeBox, PlayerInventory>.Create("playerInventory"));
		private static readonly System.Lazy<FieldAccessor<SelectedRecipeBox, UnityEngine.RectTransform>> _rect =
				new System.Lazy<FieldAccessor<SelectedRecipeBox, UnityEngine.RectTransform>>(() => FieldAccessor<SelectedRecipeBox, UnityEngine.RectTransform>.Create("rect"));
		private static readonly System.Lazy<FieldAccessor<SelectedRecipeBox, float>> _startRectHeight =
				new System.Lazy<FieldAccessor<SelectedRecipeBox, float>>(() => FieldAccessor<SelectedRecipeBox, float>.Create("startRectHeight"));
		private static readonly System.Lazy<FieldAccessor<SelectedRecipeBox, float>> _costboxHeight =
				new System.Lazy<FieldAccessor<SelectedRecipeBox, float>>(() => FieldAccessor<SelectedRecipeBox, float>.Create("costboxHeight"));
		private static readonly System.Lazy<FieldAccessor<SelectedRecipeBox, bool>> _initialized =
				new System.Lazy<FieldAccessor<SelectedRecipeBox, bool>>(() => FieldAccessor<SelectedRecipeBox, bool>.Create("initialized"));

		public static UnityEngine.RectTransform GetItemDescriptionRect(this SelectedRecipeBox __self) => _itemDescriptionRect.Value.GetValue(__self);
		public static void SetItemDescriptionRect(this SelectedRecipeBox __self, UnityEngine.RectTransform value) => _itemDescriptionRect.Value.SetValue(__self, value);
		public static UnityEngine.RectTransform GetCostBoxParent(this SelectedRecipeBox __self) => _costBoxParent.Value.GetValue(__self);
		public static void SetCostBoxParent(this SelectedRecipeBox __self, UnityEngine.RectTransform value) => _costBoxParent.Value.SetValue(__self, value);
		public static UnityEngine.RectTransform GetSkinMenuParent(this SelectedRecipeBox __self) => _skinMenuParent.Value.GetValue(__self);
		public static void SetSkinMenuParent(this SelectedRecipeBox __self, UnityEngine.RectTransform value) => _skinMenuParent.Value.SetValue(__self, value);
		public static UnityEngine.RectTransform GetSkinMenuItemPrefab(this SelectedRecipeBox __self) => _skinMenuItemPrefab.Value.GetValue(__self);
		public static void SetSkinMenuItemPrefab(this SelectedRecipeBox __self, UnityEngine.RectTransform value) => _skinMenuItemPrefab.Value.SetValue(__self, value);
		public static CostCollection GetCostCollection(this SelectedRecipeBox __self) => _costCollection.Value.GetValue(__self);
		public static void SetCostCollection(this SelectedRecipeBox __self, CostCollection value) => _costCollection.Value.SetValue(__self, value);
		public static UnityEngine.UI.ContentSizeFitter GetContentSizeFitter(this SelectedRecipeBox __self) => _contentSizeFitter.Value.GetValue(__self);
		public static void SetContentSizeFitter(this SelectedRecipeBox __self, UnityEngine.UI.ContentSizeFitter value) => _contentSizeFitter.Value.SetValue(__self, value);
		public static UnityEngine.RectTransform GetLayoutGroupParent(this SelectedRecipeBox __self) => _layoutGroupParent.Value.GetValue(__self);
		public static void SetLayoutGroupParent(this SelectedRecipeBox __self, UnityEngine.RectTransform value) => _layoutGroupParent.Value.SetValue(__self, value);
		public static float GetBackgroundOffset(this SelectedRecipeBox __self) => _backgroundOffset.Value.GetValue(__self);
		public static void SetBackgroundOffset(this SelectedRecipeBox __self, float value) => _backgroundOffset.Value.SetValue(__self, value);
		public static PlayerInventory GetPlayerInventory(this SelectedRecipeBox __self) => _playerInventory.Value.GetValue(__self);
		public static void SetPlayerInventory(this SelectedRecipeBox __self, PlayerInventory value) => _playerInventory.Value.SetValue(__self, value);
		public static UnityEngine.RectTransform GetRect(this SelectedRecipeBox __self) => _rect.Value.GetValue(__self);
		public static void SetRect(this SelectedRecipeBox __self, UnityEngine.RectTransform value) => _rect.Value.SetValue(__self, value);
		public static float GetStartRectHeight(this SelectedRecipeBox __self) => _startRectHeight.Value.GetValue(__self);
		public static void SetStartRectHeight(this SelectedRecipeBox __self, float value) => _startRectHeight.Value.SetValue(__self, value);
		public static float GetCostboxHeight(this SelectedRecipeBox __self) => _costboxHeight.Value.GetValue(__self);
		public static void SetCostboxHeight(this SelectedRecipeBox __self, float value) => _costboxHeight.Value.SetValue(__self, value);
		public static bool GetInitialized(this SelectedRecipeBox __self) => _initialized.Value.GetValue(__self);
		public static void SetInitialized(this SelectedRecipeBox __self, bool value) => _initialized.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<SelectedRecipeBox>> _Initialize757602046 =
				new System.Lazy<MethodAccessor<SelectedRecipeBox>>(() => MethodAccessor<SelectedRecipeBox>.Create("Initialize"));
		private static readonly System.Lazy<MethodAccessor<SelectedRecipeBox>> _Update757602046 =
				new System.Lazy<MethodAccessor<SelectedRecipeBox>>(() => MethodAccessor<SelectedRecipeBox>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<SelectedRecipeBox>> _OnMenuOpen3489701807 =
				new System.Lazy<MethodAccessor<SelectedRecipeBox>>(() => MethodAccessor<SelectedRecipeBox>.Create("OnMenuOpen", typeof(MenuType)));
		private static readonly System.Lazy<MethodAccessor<SelectedRecipeBox>> _UpdateIconNameDescription3436837919 =
				new System.Lazy<MethodAccessor<SelectedRecipeBox>>(() => MethodAccessor<SelectedRecipeBox>.Create("UpdateIconNameDescription", typeof(Item_Base)));
		private static readonly System.Lazy<MethodAccessor<SelectedRecipeBox>> _UpdateCraftAmountText3436837919 =
				new System.Lazy<MethodAccessor<SelectedRecipeBox>>(() => MethodAccessor<SelectedRecipeBox>.Create("UpdateCraftAmountText", typeof(Item_Base)));
		private static readonly System.Lazy<MethodAccessor<SelectedRecipeBox>> _RefreshLayout3486186818 =
				new System.Lazy<MethodAccessor<SelectedRecipeBox>>(() => MethodAccessor<SelectedRecipeBox>.Create("RefreshLayout", typeof(int)));

		public static void Initialize(this SelectedRecipeBox __self) => _Initialize757602046.Value.Invoke(__self);
		public static void Update(this SelectedRecipeBox __self) => _Update757602046.Value.Invoke(__self);
		public static void OnMenuOpen(this SelectedRecipeBox __self, MenuType menuType) => _OnMenuOpen3489701807.Value.Invoke(__self, menuType);
		public static void UpdateIconNameDescription(this SelectedRecipeBox __self, Item_Base item) => _UpdateIconNameDescription3436837919.Value.Invoke(__self, item);
		public static void UpdateCraftAmountText(this SelectedRecipeBox __self, Item_Base item) => _UpdateCraftAmountText3436837919.Value.Invoke(__self, item);
		public static void RefreshLayout(this SelectedRecipeBox __self, int recipeLength) => _RefreshLayout3486186818.Value.Invoke(__self, recipeLength);

	}

	public static class PrivateAccessor_SkinMenuItem
	{

		private static readonly System.Lazy<FieldAccessor<SkinMenuItem, UnityEngine.UI.Image>> _image_item =
				new System.Lazy<FieldAccessor<SkinMenuItem, UnityEngine.UI.Image>>(() => FieldAccessor<SkinMenuItem, UnityEngine.UI.Image>.Create("image_item"));
		private static readonly System.Lazy<FieldAccessor<SkinMenuItem, UnityEngine.UI.Image>> _image_highlight =
				new System.Lazy<FieldAccessor<SkinMenuItem, UnityEngine.UI.Image>>(() => FieldAccessor<SkinMenuItem, UnityEngine.UI.Image>.Create("image_highlight"));

		public static UnityEngine.UI.Image GetImage_item(this SkinMenuItem __self) => _image_item.Value.GetValue(__self);
		public static void SetImage_item(this SkinMenuItem __self, UnityEngine.UI.Image value) => _image_item.Value.SetValue(__self, value);
		public static UnityEngine.UI.Image GetImage_highlight(this SkinMenuItem __self) => _image_highlight.Value.GetValue(__self);
		public static void SetImage_highlight(this SkinMenuItem __self, UnityEngine.UI.Image value) => _image_highlight.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<SkinMenuItem>> _Awake757602046 =
				new System.Lazy<MethodAccessor<SkinMenuItem>>(() => MethodAccessor<SkinMenuItem>.Create("Awake"));

		public static void Awake(this SkinMenuItem __self) => _Awake757602046.Value.Invoke(__self);

	}

	public static class Private_SkinMenuItem
	{

		private static readonly System.Lazy<StaticFieldAccessor<SelectedRecipeBox>> _selectedRecipeBox =
				new System.Lazy<StaticFieldAccessor<SelectedRecipeBox>>(() => StaticFieldAccessor<SelectedRecipeBox>.Create(typeof(SkinMenuItem), "selectedRecipeBox"));

		public static SelectedRecipeBox GetSelectedRecipeBox() => _selectedRecipeBox.Value.GetValue();
		public static void SetSelectedRecipeBox(SelectedRecipeBox value) => _selectedRecipeBox.Value.SetValue(value);

	}

	public static class PrivateAccessor_CutsceneManager
	{

		private static readonly System.Lazy<FieldAccessor<CutsceneManager, UnityEngine.Animator>> _cutsceneAnimator =
				new System.Lazy<FieldAccessor<CutsceneManager, UnityEngine.Animator>>(() => FieldAccessor<CutsceneManager, UnityEngine.Animator>.Create("cutsceneAnimator"));
		private static readonly System.Lazy<FieldAccessor<CutsceneManager, Dialogue>> _dialogue =
				new System.Lazy<FieldAccessor<CutsceneManager, Dialogue>>(() => FieldAccessor<CutsceneManager, Dialogue>.Create("dialogue"));
		private static readonly System.Lazy<FieldAccessor<CutsceneManager, Helper_PlayCutsceneMusic>> _cutsceneMusic =
				new System.Lazy<FieldAccessor<CutsceneManager, Helper_PlayCutsceneMusic>>(() => FieldAccessor<CutsceneManager, Helper_PlayCutsceneMusic>.Create("cutsceneMusic"));
		private static readonly System.Lazy<FieldAccessor<CutsceneManager, SO_Cutscene[]>> _cutscenes =
				new System.Lazy<FieldAccessor<CutsceneManager, SO_Cutscene[]>>(() => FieldAccessor<CutsceneManager, SO_Cutscene[]>.Create("cutscenes"));
		private static readonly System.Lazy<FieldAccessor<CutsceneManager, UnityEngine.Coroutine>> _slideRoutine =
				new System.Lazy<FieldAccessor<CutsceneManager, UnityEngine.Coroutine>>(() => FieldAccessor<CutsceneManager, UnityEngine.Coroutine>.Create("slideRoutine"));
		private static readonly System.Lazy<FieldAccessor<CutsceneManager, CanvasHelper>> _canvas =
				new System.Lazy<FieldAccessor<CutsceneManager, CanvasHelper>>(() => FieldAccessor<CutsceneManager, CanvasHelper>.Create("canvas"));
		private static readonly System.Lazy<FieldAccessor<CutsceneManager, Network_Player>> _localPlayer =
				new System.Lazy<FieldAccessor<CutsceneManager, Network_Player>>(() => FieldAccessor<CutsceneManager, Network_Player>.Create("localPlayer"));

		public static UnityEngine.Animator GetCutsceneAnimator(this CutsceneManager __self) => _cutsceneAnimator.Value.GetValue(__self);
		public static void SetCutsceneAnimator(this CutsceneManager __self, UnityEngine.Animator value) => _cutsceneAnimator.Value.SetValue(__self, value);
		public static Dialogue GetDialogue(this CutsceneManager __self) => _dialogue.Value.GetValue(__self);
		public static void SetDialogue(this CutsceneManager __self, Dialogue value) => _dialogue.Value.SetValue(__self, value);
		public static Helper_PlayCutsceneMusic GetCutsceneMusic(this CutsceneManager __self) => _cutsceneMusic.Value.GetValue(__self);
		public static void SetCutsceneMusic(this CutsceneManager __self, Helper_PlayCutsceneMusic value) => _cutsceneMusic.Value.SetValue(__self, value);
		public static SO_Cutscene[] GetCutscenes(this CutsceneManager __self) => _cutscenes.Value.GetValue(__self);
		public static void SetCutscenes(this CutsceneManager __self, SO_Cutscene[] value) => _cutscenes.Value.SetValue(__self, value);
		public static UnityEngine.Coroutine GetSlideRoutine(this CutsceneManager __self) => _slideRoutine.Value.GetValue(__self);
		public static void SetSlideRoutine(this CutsceneManager __self, UnityEngine.Coroutine value) => _slideRoutine.Value.SetValue(__self, value);
		public static CanvasHelper GetCanvas(this CutsceneManager __self) => _canvas.Value.GetValue(__self);
		public static void SetCanvas(this CutsceneManager __self, CanvasHelper value) => _canvas.Value.SetValue(__self, value);
		public static Network_Player GetLocalPlayer(this CutsceneManager __self) => _localPlayer.Value.GetValue(__self);
		public static void SetLocalPlayer(this CutsceneManager __self, Network_Player value) => _localPlayer.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<CutsceneManager>> _Awake757602046 =
				new System.Lazy<MethodAccessor<CutsceneManager>>(() => MethodAccessor<CutsceneManager>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<CutsceneManager>> _Start757602046 =
				new System.Lazy<MethodAccessor<CutsceneManager>>(() => MethodAccessor<CutsceneManager>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<CutsceneManager>> _StopSlideShow757602046 =
				new System.Lazy<MethodAccessor<CutsceneManager>>(() => MethodAccessor<CutsceneManager>.Create("StopSlideShow"));
		private static readonly System.Lazy<MethodAccessor<CutsceneManager>> _LockPlayer3435821211 =
				new System.Lazy<MethodAccessor<CutsceneManager>>(() => MethodAccessor<CutsceneManager>.Create("LockPlayer", typeof(Network_Player), typeof(bool)));
		private static readonly System.Lazy<MethodAccessor<CutsceneManager>> _ShowSlides3452280249 =
				new System.Lazy<MethodAccessor<CutsceneManager>>(() => MethodAccessor<CutsceneManager>.Create("ShowSlides", typeof(SO_Cutscene)));
		private static readonly System.Lazy<MethodAccessor<CutsceneManager>> _ForceDayTime757602046 =
				new System.Lazy<MethodAccessor<CutsceneManager>>(() => MethodAccessor<CutsceneManager>.Create("ForceDayTime"));

		public static void Awake(this CutsceneManager __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this CutsceneManager __self) => _Start757602046.Value.Invoke(__self);
		public static void StopSlideShow(this CutsceneManager __self) => _StopSlideShow757602046.Value.Invoke(__self);
		public static void LockPlayer(this CutsceneManager __self, Network_Player player, bool value) => _LockPlayer3435821211.Value.Invoke(__self, player, value);
		public static System.Collections.IEnumerator ShowSlides(this CutsceneManager __self, SO_Cutscene cutscene) => (System.Collections.IEnumerator)_ShowSlides3452280249.Value.Invoke(__self, cutscene);
		public static void ForceDayTime(this CutsceneManager __self) => _ForceDayTime757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_DeathMenu
	{

		private static readonly System.Lazy<FieldAccessor<DeathMenu, FadePanel>> _fadePanel =
				new System.Lazy<FieldAccessor<DeathMenu, FadePanel>>(() => FieldAccessor<DeathMenu, FadePanel>.Create("fadePanel"));
		private static readonly System.Lazy<FieldAccessor<DeathMenu, UnityEngine.GameObject>> _respawnButton =
				new System.Lazy<FieldAccessor<DeathMenu, UnityEngine.GameObject>>(() => FieldAccessor<DeathMenu, UnityEngine.GameObject>.Create("respawnButton"));
		private static readonly System.Lazy<FieldAccessor<DeathMenu, UnityEngine.GameObject>> _yesnopanel =
				new System.Lazy<FieldAccessor<DeathMenu, UnityEngine.GameObject>>(() => FieldAccessor<DeathMenu, UnityEngine.GameObject>.Create("yesnopanel"));
		private static readonly System.Lazy<FieldAccessor<DeathMenu, UnityEngine.GameObject>> _yesnopanelUnstuck =
				new System.Lazy<FieldAccessor<DeathMenu, UnityEngine.GameObject>>(() => FieldAccessor<DeathMenu, UnityEngine.GameObject>.Create("yesnopanelUnstuck"));
		private static readonly System.Lazy<FieldAccessor<DeathMenu, UnityEngine.GameObject>> _unstuckPanel =
				new System.Lazy<FieldAccessor<DeathMenu, UnityEngine.GameObject>>(() => FieldAccessor<DeathMenu, UnityEngine.GameObject>.Create("unstuckPanel"));
		private static readonly System.Lazy<FieldAccessor<DeathMenu, UnityEngine.GameObject>> _loseItemsText =
				new System.Lazy<FieldAccessor<DeathMenu, UnityEngine.GameObject>>(() => FieldAccessor<DeathMenu, UnityEngine.GameObject>.Create("loseItemsText"));
		private static readonly System.Lazy<FieldAccessor<DeathMenu, Raft_Network>> _network =
				new System.Lazy<FieldAccessor<DeathMenu, Raft_Network>>(() => FieldAccessor<DeathMenu, Raft_Network>.Create("network"));
		private static readonly System.Lazy<FieldAccessor<DeathMenu, Network_Player>> _localPlayer =
				new System.Lazy<FieldAccessor<DeathMenu, Network_Player>>(() => FieldAccessor<DeathMenu, Network_Player>.Create("localPlayer"));

		public static FadePanel GetFadePanel(this DeathMenu __self) => _fadePanel.Value.GetValue(__self);
		public static void SetFadePanel(this DeathMenu __self, FadePanel value) => _fadePanel.Value.SetValue(__self, value);
		public static UnityEngine.GameObject GetRespawnButton(this DeathMenu __self) => _respawnButton.Value.GetValue(__self);
		public static void SetRespawnButton(this DeathMenu __self, UnityEngine.GameObject value) => _respawnButton.Value.SetValue(__self, value);
		public static UnityEngine.GameObject GetYesnopanel(this DeathMenu __self) => _yesnopanel.Value.GetValue(__self);
		public static void SetYesnopanel(this DeathMenu __self, UnityEngine.GameObject value) => _yesnopanel.Value.SetValue(__self, value);
		public static UnityEngine.GameObject GetYesnopanelUnstuck(this DeathMenu __self) => _yesnopanelUnstuck.Value.GetValue(__self);
		public static void SetYesnopanelUnstuck(this DeathMenu __self, UnityEngine.GameObject value) => _yesnopanelUnstuck.Value.SetValue(__self, value);
		public static UnityEngine.GameObject GetUnstuckPanel(this DeathMenu __self) => _unstuckPanel.Value.GetValue(__self);
		public static void SetUnstuckPanel(this DeathMenu __self, UnityEngine.GameObject value) => _unstuckPanel.Value.SetValue(__self, value);
		public static UnityEngine.GameObject GetLoseItemsText(this DeathMenu __self) => _loseItemsText.Value.GetValue(__self);
		public static void SetLoseItemsText(this DeathMenu __self, UnityEngine.GameObject value) => _loseItemsText.Value.SetValue(__self, value);
		public static Raft_Network GetNetwork(this DeathMenu __self) => _network.Value.GetValue(__self);
		public static void SetNetwork(this DeathMenu __self, Raft_Network value) => _network.Value.SetValue(__self, value);
		public static Network_Player GetLocalPlayer(this DeathMenu __self) => _localPlayer.Value.GetValue(__self);
		public static void SetLocalPlayer(this DeathMenu __self, Network_Player value) => _localPlayer.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<DeathMenu>> _Start757602046 =
				new System.Lazy<MethodAccessor<DeathMenu>>(() => MethodAccessor<DeathMenu>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<DeathMenu>> _Update757602046 =
				new System.Lazy<MethodAccessor<DeathMenu>>(() => MethodAccessor<DeathMenu>.Create("Update"));

		public static void Start(this DeathMenu __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this DeathMenu __self) => _Update757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_DisplayText
	{

		private static readonly System.Lazy<FieldAccessor<DisplayText, UnityEngine.UI.Text>> _textComponent =
				new System.Lazy<FieldAccessor<DisplayText, UnityEngine.UI.Text>>(() => FieldAccessor<DisplayText, UnityEngine.UI.Text>.Create("textComponent"));
		private static readonly System.Lazy<FieldAccessor<DisplayText, UnityEngine.UI.Text>> _buttonText =
				new System.Lazy<FieldAccessor<DisplayText, UnityEngine.UI.Text>>(() => FieldAccessor<DisplayText, UnityEngine.UI.Text>.Create("buttonText"));
		private static readonly System.Lazy<FieldAccessor<DisplayText, UnityEngine.UI.Image>> _buttonBackground =
				new System.Lazy<FieldAccessor<DisplayText, UnityEngine.UI.Image>>(() => FieldAccessor<DisplayText, UnityEngine.UI.Image>.Create("buttonBackground"));
		private static readonly System.Lazy<FieldAccessor<DisplayText, UnityEngine.Vector2>> _buttonBackgroundMargin =
				new System.Lazy<FieldAccessor<DisplayText, UnityEngine.Vector2>>(() => FieldAccessor<DisplayText, UnityEngine.Vector2>.Create("buttonBackgroundMargin"));
		private static readonly System.Lazy<FieldAccessor<DisplayText, UnityEngine.RectTransform>> _buttonRect =
				new System.Lazy<FieldAccessor<DisplayText, UnityEngine.RectTransform>>(() => FieldAccessor<DisplayText, UnityEngine.RectTransform>.Create("buttonRect"));
		private static readonly System.Lazy<FieldAccessor<DisplayText, UnityEngine.RectTransform>> _buttonTextRect =
				new System.Lazy<FieldAccessor<DisplayText, UnityEngine.RectTransform>>(() => FieldAccessor<DisplayText, UnityEngine.RectTransform>.Create("buttonTextRect"));
		private static readonly System.Lazy<FieldAccessor<DisplayText, int>> _currentPriority =
				new System.Lazy<FieldAccessor<DisplayText, int>>(() => FieldAccessor<DisplayText, int>.Create("currentPriority"));
		private static readonly System.Lazy<FieldAccessor<DisplayText, int>> _defaultPriority =
				new System.Lazy<FieldAccessor<DisplayText, int>>(() => FieldAccessor<DisplayText, int>.Create("defaultPriority"));

		public static UnityEngine.UI.Text GetTextComponent(this DisplayText __self) => _textComponent.Value.GetValue(__self);
		public static void SetTextComponent(this DisplayText __self, UnityEngine.UI.Text value) => _textComponent.Value.SetValue(__self, value);
		public static UnityEngine.UI.Text GetButtonText(this DisplayText __self) => _buttonText.Value.GetValue(__self);
		public static void SetButtonText(this DisplayText __self, UnityEngine.UI.Text value) => _buttonText.Value.SetValue(__self, value);
		public static UnityEngine.UI.Image GetButtonBackground(this DisplayText __self) => _buttonBackground.Value.GetValue(__self);
		public static void SetButtonBackground(this DisplayText __self, UnityEngine.UI.Image value) => _buttonBackground.Value.SetValue(__self, value);
		public static UnityEngine.Vector2 GetButtonBackgroundMargin(this DisplayText __self) => _buttonBackgroundMargin.Value.GetValue(__self);
		public static void SetButtonBackgroundMargin(this DisplayText __self, UnityEngine.Vector2 value) => _buttonBackgroundMargin.Value.SetValue(__self, value);
		public static UnityEngine.RectTransform GetButtonRect(this DisplayText __self) => _buttonRect.Value.GetValue(__self);
		public static void SetButtonRect(this DisplayText __self, UnityEngine.RectTransform value) => _buttonRect.Value.SetValue(__self, value);
		public static UnityEngine.RectTransform GetButtonTextRect(this DisplayText __self) => _buttonTextRect.Value.GetValue(__self);
		public static void SetButtonTextRect(this DisplayText __self, UnityEngine.RectTransform value) => _buttonTextRect.Value.SetValue(__self, value);
		public static int GetCurrentPriority(this DisplayText __self) => _currentPriority.Value.GetValue(__self);
		public static void SetCurrentPriority(this DisplayText __self, int value) => _currentPriority.Value.SetValue(__self, value);
		public static int GetDefaultPriority(this DisplayText __self) => _defaultPriority.Value.GetValue(__self);
		public static void SetDefaultPriority(this DisplayText __self, int value) => _defaultPriority.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<DisplayText>> _FindRectTranforms757602046 =
				new System.Lazy<MethodAccessor<DisplayText>>(() => MethodAccessor<DisplayText>.Create("FindRectTranforms"));

		public static void FindRectTranforms(this DisplayText __self) => _FindRectTranforms757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_DisplayTextManager
	{

		private static readonly System.Lazy<FieldAccessor<DisplayTextManager, DisplayText[]>> _displayTexts =
				new System.Lazy<FieldAccessor<DisplayTextManager, DisplayText[]>>(() => FieldAccessor<DisplayTextManager, DisplayText[]>.Create("displayTexts"));
		private static readonly System.Lazy<FieldAccessor<DisplayTextManager, UnityEngine.GameObject>> _displayTextBottomParent =
				new System.Lazy<FieldAccessor<DisplayTextManager, UnityEngine.GameObject>>(() => FieldAccessor<DisplayTextManager, UnityEngine.GameObject>.Create("displayTextBottomParent"));

		public static DisplayText[] GetDisplayTexts(this DisplayTextManager __self) => _displayTexts.Value.GetValue(__self);
		public static void SetDisplayTexts(this DisplayTextManager __self, DisplayText[] value) => _displayTexts.Value.SetValue(__self, value);
		public static UnityEngine.GameObject GetDisplayTextBottomParent(this DisplayTextManager __self) => _displayTextBottomParent.Value.GetValue(__self);
		public static void SetDisplayTextBottomParent(this DisplayTextManager __self, UnityEngine.GameObject value) => _displayTextBottomParent.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<DisplayTextManager>> _Awake757602046 =
				new System.Lazy<MethodAccessor<DisplayTextManager>>(() => MethodAccessor<DisplayTextManager>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<DisplayTextManager>> _Update757602046 =
				new System.Lazy<MethodAccessor<DisplayTextManager>>(() => MethodAccessor<DisplayTextManager>.Create("Update"));

		public static void Awake(this DisplayTextManager __self) => _Awake757602046.Value.Invoke(__self);
		public static void Update(this DisplayTextManager __self) => _Update757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_UI_Cost_Interactable_FishingBait
	{

		private static readonly System.Lazy<MethodAccessor<UI_Cost_Interactable_FishingBait>> _Awake757602046 =
				new System.Lazy<MethodAccessor<UI_Cost_Interactable_FishingBait>>(() => MethodAccessor<UI_Cost_Interactable_FishingBait>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<UI_Cost_Interactable_FishingBait>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<UI_Cost_Interactable_FishingBait>>(() => MethodAccessor<UI_Cost_Interactable_FishingBait>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<UI_Cost_Interactable_FishingBait>> _OnEnable757602046 =
				new System.Lazy<MethodAccessor<UI_Cost_Interactable_FishingBait>>(() => MethodAccessor<UI_Cost_Interactable_FishingBait>.Create("OnEnable"));
		private static readonly System.Lazy<MethodAccessor<UI_Cost_Interactable_FishingBait>> _Start757602046 =
				new System.Lazy<MethodAccessor<UI_Cost_Interactable_FishingBait>>(() => MethodAccessor<UI_Cost_Interactable_FishingBait>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<UI_Cost_Interactable_FishingBait>> _SetHoverImageInactive757602046 =
				new System.Lazy<MethodAccessor<UI_Cost_Interactable_FishingBait>>(() => MethodAccessor<UI_Cost_Interactable_FishingBait>.Create("SetHoverImageInactive"));
		private static readonly System.Lazy<MethodAccessor<UI_Cost_Interactable_FishingBait>> _ClearAllHighlights757602046 =
				new System.Lazy<MethodAccessor<UI_Cost_Interactable_FishingBait>>(() => MethodAccessor<UI_Cost_Interactable_FishingBait>.Create("ClearAllHighlights"));

		public static void Awake(this UI_Cost_Interactable_FishingBait __self) => _Awake757602046.Value.Invoke(__self);
		public static void OnDestroy(this UI_Cost_Interactable_FishingBait __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void OnEnable(this UI_Cost_Interactable_FishingBait __self) => _OnEnable757602046.Value.Invoke(__self);
		public static void Start(this UI_Cost_Interactable_FishingBait __self) => _Start757602046.Value.Invoke(__self);
		public static void SetHoverImageInactive(this UI_Cost_Interactable_FishingBait __self) => _SetHoverImageInactive757602046.Value.Invoke(__self);
		public static void ClearAllHighlights(this UI_Cost_Interactable_FishingBait __self) => _ClearAllHighlights757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_ItemCostBox
	{

		private static readonly System.Lazy<MethodAccessor<ItemCostBox>> _Start757602046 =
				new System.Lazy<MethodAccessor<ItemCostBox>>(() => MethodAccessor<ItemCostBox>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<ItemCostBox>> _Update757602046 =
				new System.Lazy<MethodAccessor<ItemCostBox>>(() => MethodAccessor<ItemCostBox>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<ItemCostBox>> _RefreshCostAmount757602046 =
				new System.Lazy<MethodAccessor<ItemCostBox>>(() => MethodAccessor<ItemCostBox>.Create("RefreshCostAmount"));

		public static void Start(this ItemCostBox __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this ItemCostBox __self) => _Update757602046.Value.Invoke(__self);
		public static void RefreshCostAmount(this ItemCostBox __self) => _RefreshCostAmount757602046.Value.Invoke(__self);

	}

	public static class Private_ItemCostBox
	{

		private static readonly System.Lazy<StaticFieldAccessor<PlayerInventory>> _playerInventory =
				new System.Lazy<StaticFieldAccessor<PlayerInventory>>(() => StaticFieldAccessor<PlayerInventory>.Create(typeof(ItemCostBox), "playerInventory"));

		public static PlayerInventory GetPlayerInventory() => _playerInventory.Value.GetValue();
		public static void SetPlayerInventory(PlayerInventory value) => _playerInventory.Value.SetValue(value);

	}

	public static class PrivateAccessor_LoadSceneManager
	{

		private static readonly System.Lazy<FieldAccessor<LoadSceneManager, FadePanel>> _fadePanel =
				new System.Lazy<FieldAccessor<LoadSceneManager, FadePanel>>(() => FieldAccessor<LoadSceneManager, FadePanel>.Create("fadePanel"));
		private static readonly System.Lazy<FieldAccessor<LoadSceneManager, UnityEngine.GameObject>> _loadPanel =
				new System.Lazy<FieldAccessor<LoadSceneManager, UnityEngine.GameObject>>(() => FieldAccessor<LoadSceneManager, UnityEngine.GameObject>.Create("loadPanel"));
		private static readonly System.Lazy<FieldAccessor<LoadSceneManager, UnityEngine.GameObject>> _waitPanel =
				new System.Lazy<FieldAccessor<LoadSceneManager, UnityEngine.GameObject>>(() => FieldAccessor<LoadSceneManager, UnityEngine.GameObject>.Create("waitPanel"));
		private static readonly System.Lazy<FieldAccessor<LoadSceneManager, UnityEngine.GameObject>> _leaveOptionPanel =
				new System.Lazy<FieldAccessor<LoadSceneManager, UnityEngine.GameObject>>(() => FieldAccessor<LoadSceneManager, UnityEngine.GameObject>.Create("leaveOptionPanel"));
		private static readonly System.Lazy<FieldAccessor<LoadSceneManager, float>> _loadingTipInterval =
				new System.Lazy<FieldAccessor<LoadSceneManager, float>>(() => FieldAccessor<LoadSceneManager, float>.Create("loadingTipInterval"));
		private static readonly System.Lazy<FieldAccessor<LoadSceneManager, int>> _loadingTipCount =
				new System.Lazy<FieldAccessor<LoadSceneManager, int>>(() => FieldAccessor<LoadSceneManager, int>.Create("loadingTipCount"));
		private static readonly System.Lazy<FieldAccessor<LoadSceneManager, UnityEngine.UI.Text>> _loadingText =
				new System.Lazy<FieldAccessor<LoadSceneManager, UnityEngine.UI.Text>>(() => FieldAccessor<LoadSceneManager, UnityEngine.UI.Text>.Create("loadingText"));
		private static readonly System.Lazy<FieldAccessor<LoadSceneManager, UnityEngine.UI.Text>> _loadingTipText =
				new System.Lazy<FieldAccessor<LoadSceneManager, UnityEngine.UI.Text>>(() => FieldAccessor<LoadSceneManager, UnityEngine.UI.Text>.Create("loadingTipText"));
		private static readonly System.Lazy<FieldAccessor<LoadSceneManager, UnityEngine.UI.Slider>> _loadingbarSlider =
				new System.Lazy<FieldAccessor<LoadSceneManager, UnityEngine.UI.Slider>>(() => FieldAccessor<LoadSceneManager, UnityEngine.UI.Slider>.Create("loadingbarSlider"));
		private static readonly System.Lazy<FieldAccessor<LoadSceneManager, UnityEngine.GameObject>> _loadingCircle =
				new System.Lazy<FieldAccessor<LoadSceneManager, UnityEngine.GameObject>>(() => FieldAccessor<LoadSceneManager, UnityEngine.GameObject>.Create("loadingCircle"));
		private static readonly System.Lazy<FieldAccessor<LoadSceneManager, float>> _tryingToConnectPanelDelay =
				new System.Lazy<FieldAccessor<LoadSceneManager, float>>(() => FieldAccessor<LoadSceneManager, float>.Create("tryingToConnectPanelDelay"));
		private static readonly System.Lazy<FieldAccessor<LoadSceneManager, float>> _leaveButtonDelay =
				new System.Lazy<FieldAccessor<LoadSceneManager, float>>(() => FieldAccessor<LoadSceneManager, float>.Create("leaveButtonDelay"));
		private static readonly System.Lazy<FieldAccessor<LoadSceneManager, UnityEngine.Coroutine>> _coroutineFade =
				new System.Lazy<FieldAccessor<LoadSceneManager, UnityEngine.Coroutine>>(() => FieldAccessor<LoadSceneManager, UnityEngine.Coroutine>.Create("coroutineFade"));
		private static readonly System.Lazy<FieldAccessor<LoadSceneManager, int>> _currentLoadingTipIndex =
				new System.Lazy<FieldAccessor<LoadSceneManager, int>>(() => FieldAccessor<LoadSceneManager, int>.Create("currentLoadingTipIndex"));
		private static readonly System.Lazy<FieldAccessor<LoadSceneManager, float>> _loadingTipTimestamp =
				new System.Lazy<FieldAccessor<LoadSceneManager, float>>(() => FieldAccessor<LoadSceneManager, float>.Create("loadingTipTimestamp"));
		private static readonly System.Lazy<FieldAccessor<LoadSceneManager, float>> _showTryingToConnectPanelTime =
				new System.Lazy<FieldAccessor<LoadSceneManager, float>>(() => FieldAccessor<LoadSceneManager, float>.Create("showTryingToConnectPanelTime"));
		private static readonly System.Lazy<FieldAccessor<LoadSceneManager, float>> _showLeaveButtonTime =
				new System.Lazy<FieldAccessor<LoadSceneManager, float>>(() => FieldAccessor<LoadSceneManager, float>.Create("showLeaveButtonTime"));

		public static FadePanel GetFadePanel(this LoadSceneManager __self) => _fadePanel.Value.GetValue(__self);
		public static void SetFadePanel(this LoadSceneManager __self, FadePanel value) => _fadePanel.Value.SetValue(__self, value);
		public static UnityEngine.GameObject GetLoadPanel(this LoadSceneManager __self) => _loadPanel.Value.GetValue(__self);
		public static void SetLoadPanel(this LoadSceneManager __self, UnityEngine.GameObject value) => _loadPanel.Value.SetValue(__self, value);
		public static UnityEngine.GameObject GetWaitPanel(this LoadSceneManager __self) => _waitPanel.Value.GetValue(__self);
		public static void SetWaitPanel(this LoadSceneManager __self, UnityEngine.GameObject value) => _waitPanel.Value.SetValue(__self, value);
		public static UnityEngine.GameObject GetLeaveOptionPanel(this LoadSceneManager __self) => _leaveOptionPanel.Value.GetValue(__self);
		public static void SetLeaveOptionPanel(this LoadSceneManager __self, UnityEngine.GameObject value) => _leaveOptionPanel.Value.SetValue(__self, value);
		public static float GetLoadingTipInterval(this LoadSceneManager __self) => _loadingTipInterval.Value.GetValue(__self);
		public static void SetLoadingTipInterval(this LoadSceneManager __self, float value) => _loadingTipInterval.Value.SetValue(__self, value);
		public static int GetLoadingTipCount(this LoadSceneManager __self) => _loadingTipCount.Value.GetValue(__self);
		public static void SetLoadingTipCount(this LoadSceneManager __self, int value) => _loadingTipCount.Value.SetValue(__self, value);
		public static UnityEngine.UI.Text GetLoadingText(this LoadSceneManager __self) => _loadingText.Value.GetValue(__self);
		public static void SetLoadingText(this LoadSceneManager __self, UnityEngine.UI.Text value) => _loadingText.Value.SetValue(__self, value);
		public static UnityEngine.UI.Text GetLoadingTipText(this LoadSceneManager __self) => _loadingTipText.Value.GetValue(__self);
		public static void SetLoadingTipText(this LoadSceneManager __self, UnityEngine.UI.Text value) => _loadingTipText.Value.SetValue(__self, value);
		public static UnityEngine.UI.Slider GetLoadingbarSlider(this LoadSceneManager __self) => _loadingbarSlider.Value.GetValue(__self);
		public static void SetLoadingbarSlider(this LoadSceneManager __self, UnityEngine.UI.Slider value) => _loadingbarSlider.Value.SetValue(__self, value);
		public static UnityEngine.GameObject GetLoadingCircle(this LoadSceneManager __self) => _loadingCircle.Value.GetValue(__self);
		public static void SetLoadingCircle(this LoadSceneManager __self, UnityEngine.GameObject value) => _loadingCircle.Value.SetValue(__self, value);
		public static float GetTryingToConnectPanelDelay(this LoadSceneManager __self) => _tryingToConnectPanelDelay.Value.GetValue(__self);
		public static void SetTryingToConnectPanelDelay(this LoadSceneManager __self, float value) => _tryingToConnectPanelDelay.Value.SetValue(__self, value);
		public static float GetLeaveButtonDelay(this LoadSceneManager __self) => _leaveButtonDelay.Value.GetValue(__self);
		public static void SetLeaveButtonDelay(this LoadSceneManager __self, float value) => _leaveButtonDelay.Value.SetValue(__self, value);
		public static UnityEngine.Coroutine GetCoroutineFade(this LoadSceneManager __self) => _coroutineFade.Value.GetValue(__self);
		public static void SetCoroutineFade(this LoadSceneManager __self, UnityEngine.Coroutine value) => _coroutineFade.Value.SetValue(__self, value);
		public static int GetCurrentLoadingTipIndex(this LoadSceneManager __self) => _currentLoadingTipIndex.Value.GetValue(__self);
		public static void SetCurrentLoadingTipIndex(this LoadSceneManager __self, int value) => _currentLoadingTipIndex.Value.SetValue(__self, value);
		public static float GetLoadingTipTimestamp(this LoadSceneManager __self) => _loadingTipTimestamp.Value.GetValue(__self);
		public static void SetLoadingTipTimestamp(this LoadSceneManager __self, float value) => _loadingTipTimestamp.Value.SetValue(__self, value);
		public static float GetShowTryingToConnectPanelTime(this LoadSceneManager __self) => _showTryingToConnectPanelTime.Value.GetValue(__self);
		public static void SetShowTryingToConnectPanelTime(this LoadSceneManager __self, float value) => _showTryingToConnectPanelTime.Value.SetValue(__self, value);
		public static float GetShowLeaveButtonTime(this LoadSceneManager __self) => _showLeaveButtonTime.Value.GetValue(__self);
		public static void SetShowLeaveButtonTime(this LoadSceneManager __self, float value) => _showLeaveButtonTime.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<LoadSceneManager>> _Awake757602046 =
				new System.Lazy<MethodAccessor<LoadSceneManager>>(() => MethodAccessor<LoadSceneManager>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<LoadSceneManager>> _TryToDisplayNewLoadingTip757602046 =
				new System.Lazy<MethodAccessor<LoadSceneManager>>(() => MethodAccessor<LoadSceneManager>.Create("TryToDisplayNewLoadingTip"));
		private static readonly System.Lazy<MethodAccessor<LoadSceneManager>> _GetRandomLoadingTipIndex757602046 =
				new System.Lazy<MethodAccessor<LoadSceneManager>>(() => MethodAccessor<LoadSceneManager>.Create("GetRandomLoadingTipIndex"));
		private static readonly System.Lazy<MethodAccessor<LoadSceneManager>> _Load3428000404 =
				new System.Lazy<MethodAccessor<LoadSceneManager>>(() => MethodAccessor<LoadSceneManager>.Create("Load", typeof(string), typeof(bool)));

		public static void Awake(this LoadSceneManager __self) => _Awake757602046.Value.Invoke(__self);
		public static void TryToDisplayNewLoadingTip(this LoadSceneManager __self) => _TryToDisplayNewLoadingTip757602046.Value.Invoke(__self);
		public static int GetRandomLoadingTipIndex(this LoadSceneManager __self) => (int)_GetRandomLoadingTipIndex757602046.Value.Invoke(__self);
		public static System.Collections.IEnumerator Load(this LoadSceneManager __self, string sceneName, bool loadAdditively) => (System.Collections.IEnumerator)_Load3428000404.Value.Invoke(__self, sceneName, loadAdditively);

	}

	public static class PrivateAccessor_LocalizationParameters
	{

		private static readonly System.Lazy<FieldAccessor<LocalizationParameters, Network_Player>> _localPlayer =
				new System.Lazy<FieldAccessor<LocalizationParameters, Network_Player>>(() => FieldAccessor<LocalizationParameters, Network_Player>.Create("localPlayer"));
		private static readonly System.Lazy<FieldAccessor<LocalizationParameters, PlayerInventory>> _playerInventory =
				new System.Lazy<FieldAccessor<LocalizationParameters, PlayerInventory>>(() => FieldAccessor<LocalizationParameters, PlayerInventory>.Create("playerInventory"));
		private static readonly System.Lazy<FieldAccessor<LocalizationParameters, Raft_Network>> _network =
				new System.Lazy<FieldAccessor<LocalizationParameters, Raft_Network>>(() => FieldAccessor<LocalizationParameters, Raft_Network>.Create("network"));

		public static Network_Player GetLocalPlayer(this LocalizationParameters __self) => _localPlayer.Value.GetValue(__self);
		public static void SetLocalPlayer(this LocalizationParameters __self, Network_Player value) => _localPlayer.Value.SetValue(__self, value);
		public static PlayerInventory GetPlayerInventory(this LocalizationParameters __self) => _playerInventory.Value.GetValue(__self);
		public static void SetPlayerInventory(this LocalizationParameters __self, PlayerInventory value) => _playerInventory.Value.SetValue(__self, value);
		public static Raft_Network GetNetwork(this LocalizationParameters __self) => _network.Value.GetValue(__self);
		public static void SetNetwork(this LocalizationParameters __self, Raft_Network value) => _network.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<LocalizationParameters>> _Start757602046 =
				new System.Lazy<MethodAccessor<LocalizationParameters>>(() => MethodAccessor<LocalizationParameters>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<LocalizationParameters>> _OnEnable757602046 =
				new System.Lazy<MethodAccessor<LocalizationParameters>>(() => MethodAccessor<LocalizationParameters>.Create("OnEnable"));
		private static readonly System.Lazy<MethodAccessor<LocalizationParameters>> _OnDisable757602046 =
				new System.Lazy<MethodAccessor<LocalizationParameters>>(() => MethodAccessor<LocalizationParameters>.Create("OnDisable"));

		public static void Start(this LocalizationParameters __self) => _Start757602046.Value.Invoke(__self);
		public static void OnEnable(this LocalizationParameters __self) => _OnEnable757602046.Value.Invoke(__self);
		public static void OnDisable(this LocalizationParameters __self) => _OnDisable757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_LocalizeDropdownSemih
	{

		private static readonly System.Lazy<FieldAccessor<LocalizeDropdownSemih, UnityEngine.UI.Dropdown>> _dropdown =
				new System.Lazy<FieldAccessor<LocalizeDropdownSemih, UnityEngine.UI.Dropdown>>(() => FieldAccessor<LocalizeDropdownSemih, UnityEngine.UI.Dropdown>.Create("dropdown"));

		public static UnityEngine.UI.Dropdown GetDropdown(this LocalizeDropdownSemih __self) => _dropdown.Value.GetValue(__self);
		public static void SetDropdown(this LocalizeDropdownSemih __self, UnityEngine.UI.Dropdown value) => _dropdown.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<LocalizeDropdownSemih>> _OnEnable757602046 =
				new System.Lazy<MethodAccessor<LocalizeDropdownSemih>>(() => MethodAccessor<LocalizeDropdownSemih>.Create("OnEnable"));

		public static void OnEnable(this LocalizeDropdownSemih __self) => _OnEnable757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_ButtonSound
	{

		private static readonly System.Lazy<FieldAccessor<ButtonSound, bool>> _forceHighlightSound =
				new System.Lazy<FieldAccessor<ButtonSound, bool>>(() => FieldAccessor<ButtonSound, bool>.Create("forceHighlightSound"));
		private static readonly System.Lazy<FieldAccessor<ButtonSound, string>> _eventRef_uniqueClickSound =
				new System.Lazy<FieldAccessor<ButtonSound, string>>(() => FieldAccessor<ButtonSound, string>.Create("eventRef_uniqueClickSound"));
		private static readonly System.Lazy<FieldAccessor<ButtonSound, UnityEngine.UI.Button>> _button =
				new System.Lazy<FieldAccessor<ButtonSound, UnityEngine.UI.Button>>(() => FieldAccessor<ButtonSound, UnityEngine.UI.Button>.Create("button"));

		public static bool GetForceHighlightSound(this ButtonSound __self) => _forceHighlightSound.Value.GetValue(__self);
		public static void SetForceHighlightSound(this ButtonSound __self, bool value) => _forceHighlightSound.Value.SetValue(__self, value);
		public static string GetEventRef_uniqueClickSound(this ButtonSound __self) => _eventRef_uniqueClickSound.Value.GetValue(__self);
		public static void SetEventRef_uniqueClickSound(this ButtonSound __self, string value) => _eventRef_uniqueClickSound.Value.SetValue(__self, value);
		public static UnityEngine.UI.Button GetButton(this ButtonSound __self) => _button.Value.GetValue(__self);
		public static void SetButton(this ButtonSound __self, UnityEngine.UI.Button value) => _button.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<ButtonSound>> _Start757602046 =
				new System.Lazy<MethodAccessor<ButtonSound>>(() => MethodAccessor<ButtonSound>.Create("Start"));

		public static void Start(this ButtonSound __self) => _Start757602046.Value.Invoke(__self);

	}

	public static class Private_ButtonSound
	{

		private static readonly System.Lazy<StaticFieldAccessor<SoundManager>> _soundmanager =
				new System.Lazy<StaticFieldAccessor<SoundManager>>(() => StaticFieldAccessor<SoundManager>.Create(typeof(ButtonSound), "soundmanager"));

		public static SoundManager GetSoundmanager() => _soundmanager.Value.GetValue();
		public static void SetSoundmanager(SoundManager value) => _soundmanager.Value.SetValue(value);

	}

	public static class PrivateAccessor_BuildMenu
	{

		private static readonly System.Lazy<FieldAccessor<BuildMenu, UnityEngine.GameObject>> _buildPanel =
				new System.Lazy<FieldAccessor<BuildMenu, UnityEngine.GameObject>>(() => FieldAccessor<BuildMenu, UnityEngine.GameObject>.Create("buildPanel"));
		private static readonly System.Lazy<FieldAccessor<BuildMenu, UnityEngine.UI.Image>> _selectedBlockImage =
				new System.Lazy<FieldAccessor<BuildMenu, UnityEngine.UI.Image>>(() => FieldAccessor<BuildMenu, UnityEngine.UI.Image>.Create("selectedBlockImage"));
		private static readonly System.Lazy<FieldAccessor<BuildMenu, UnityEngine.UI.Text>> _selectedBlockName =
				new System.Lazy<FieldAccessor<BuildMenu, UnityEngine.UI.Text>>(() => FieldAccessor<BuildMenu, UnityEngine.UI.Text>.Create("selectedBlockName"));
		private static readonly System.Lazy<FieldAccessor<BuildMenu, UnityEngine.UI.Text>> _selectedBlockDescription =
				new System.Lazy<FieldAccessor<BuildMenu, UnityEngine.UI.Text>>(() => FieldAccessor<BuildMenu, UnityEngine.UI.Text>.Create("selectedBlockDescription"));
		private static readonly System.Lazy<FieldAccessor<BuildMenu, CostCollection>> _costColletionPanel =
				new System.Lazy<FieldAccessor<BuildMenu, CostCollection>>(() => FieldAccessor<BuildMenu, CostCollection>.Create("costColletionPanel"));
		private static readonly System.Lazy<FieldAccessor<BuildMenu, CostCollection>> _costColletionCursor =
				new System.Lazy<FieldAccessor<BuildMenu, CostCollection>>(() => FieldAccessor<BuildMenu, CostCollection>.Create("costColletionCursor"));
		private static readonly System.Lazy<FieldAccessor<BuildMenu, UnityEngine.Vector3>> _categoryBackgroundOffset =
				new System.Lazy<FieldAccessor<BuildMenu, UnityEngine.Vector3>>(() => FieldAccessor<BuildMenu, UnityEngine.Vector3>.Create("categoryBackgroundOffset"));
		private static readonly System.Lazy<FieldAccessor<BuildMenu, UnityEngine.GameObject>> _currentSubParent =
				new System.Lazy<FieldAccessor<BuildMenu, UnityEngine.GameObject>>(() => FieldAccessor<BuildMenu, UnityEngine.GameObject>.Create("currentSubParent"));
		private static readonly System.Lazy<FieldAccessor<BuildMenu, BlockCreator>> _blockCreator =
				new System.Lazy<FieldAccessor<BuildMenu, BlockCreator>>(() => FieldAccessor<BuildMenu, BlockCreator>.Create("blockCreator"));
		private static readonly System.Lazy<FieldAccessor<BuildMenu, Item_Base>> _currentBuildable =
				new System.Lazy<FieldAccessor<BuildMenu, Item_Base>>(() => FieldAccessor<BuildMenu, Item_Base>.Create("currentBuildable"));

		public static UnityEngine.GameObject GetBuildPanel(this BuildMenu __self) => _buildPanel.Value.GetValue(__self);
		public static void SetBuildPanel(this BuildMenu __self, UnityEngine.GameObject value) => _buildPanel.Value.SetValue(__self, value);
		public static UnityEngine.UI.Image GetSelectedBlockImage(this BuildMenu __self) => _selectedBlockImage.Value.GetValue(__self);
		public static void SetSelectedBlockImage(this BuildMenu __self, UnityEngine.UI.Image value) => _selectedBlockImage.Value.SetValue(__self, value);
		public static UnityEngine.UI.Text GetSelectedBlockName(this BuildMenu __self) => _selectedBlockName.Value.GetValue(__self);
		public static void SetSelectedBlockName(this BuildMenu __self, UnityEngine.UI.Text value) => _selectedBlockName.Value.SetValue(__self, value);
		public static UnityEngine.UI.Text GetSelectedBlockDescription(this BuildMenu __self) => _selectedBlockDescription.Value.GetValue(__self);
		public static void SetSelectedBlockDescription(this BuildMenu __self, UnityEngine.UI.Text value) => _selectedBlockDescription.Value.SetValue(__self, value);
		public static CostCollection GetCostColletionPanel(this BuildMenu __self) => _costColletionPanel.Value.GetValue(__self);
		public static void SetCostColletionPanel(this BuildMenu __self, CostCollection value) => _costColletionPanel.Value.SetValue(__self, value);
		public static CostCollection GetCostColletionCursor(this BuildMenu __self) => _costColletionCursor.Value.GetValue(__self);
		public static void SetCostColletionCursor(this BuildMenu __self, CostCollection value) => _costColletionCursor.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetCategoryBackgroundOffset(this BuildMenu __self) => _categoryBackgroundOffset.Value.GetValue(__self);
		public static void SetCategoryBackgroundOffset(this BuildMenu __self, UnityEngine.Vector3 value) => _categoryBackgroundOffset.Value.SetValue(__self, value);
		public static UnityEngine.GameObject GetCurrentSubParent(this BuildMenu __self) => _currentSubParent.Value.GetValue(__self);
		public static void SetCurrentSubParent(this BuildMenu __self, UnityEngine.GameObject value) => _currentSubParent.Value.SetValue(__self, value);
		public static BlockCreator GetBlockCreator(this BuildMenu __self) => _blockCreator.Value.GetValue(__self);
		public static void SetBlockCreator(this BuildMenu __self, BlockCreator value) => _blockCreator.Value.SetValue(__self, value);
		public static Item_Base GetCurrentBuildable(this BuildMenu __self) => _currentBuildable.Value.GetValue(__self);
		public static void SetCurrentBuildable(this BuildMenu __self, Item_Base value) => _currentBuildable.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<BuildMenu>> _Awake757602046 =
				new System.Lazy<MethodAccessor<BuildMenu>>(() => MethodAccessor<BuildMenu>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<BuildMenu>> _Start757602046 =
				new System.Lazy<MethodAccessor<BuildMenu>>(() => MethodAccessor<BuildMenu>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<BuildMenu>> _Update757602046 =
				new System.Lazy<MethodAccessor<BuildMenu>>(() => MethodAccessor<BuildMenu>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<BuildMenu>> _DisplayBlockInfo3436837919 =
				new System.Lazy<MethodAccessor<BuildMenu>>(() => MethodAccessor<BuildMenu>.Create("DisplayBlockInfo", typeof(Item_Base)));
		private static readonly System.Lazy<MethodAccessor<BuildMenu>> _OnMenuClose3489701807 =
				new System.Lazy<MethodAccessor<BuildMenu>>(() => MethodAccessor<BuildMenu>.Create("OnMenuClose", typeof(MenuType)));

		public static void Awake(this BuildMenu __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this BuildMenu __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this BuildMenu __self) => _Update757602046.Value.Invoke(__self);
		public static void DisplayBlockInfo(this BuildMenu __self, Item_Base buildableItem) => _DisplayBlockInfo3436837919.Value.Invoke(__self, buildableItem);
		public static void OnMenuClose(this BuildMenu __self, MenuType menuType) => _OnMenuClose3489701807.Value.Invoke(__self, menuType);

	}

	public static class PrivateAccessor_BuildMenuItem_SelectBlock
	{

		private static readonly System.Lazy<FieldAccessor<BuildMenuItem_SelectBlock, Item_Base>> _buildableItem =
				new System.Lazy<FieldAccessor<BuildMenuItem_SelectBlock, Item_Base>>(() => FieldAccessor<BuildMenuItem_SelectBlock, Item_Base>.Create("buildableItem"));
		private static readonly System.Lazy<FieldAccessor<BuildMenuItem_SelectBlock, UnityEngine.UI.Image>> _icon =
				new System.Lazy<FieldAccessor<BuildMenuItem_SelectBlock, UnityEngine.UI.Image>>(() => FieldAccessor<BuildMenuItem_SelectBlock, UnityEngine.UI.Image>.Create("icon"));
		private static readonly System.Lazy<FieldAccessor<BuildMenuItem_SelectBlock, BuildMenuItem_SelectSubCategory>> _subCategory =
				new System.Lazy<FieldAccessor<BuildMenuItem_SelectBlock, BuildMenuItem_SelectSubCategory>>(() => FieldAccessor<BuildMenuItem_SelectBlock, BuildMenuItem_SelectSubCategory>.Create("subCategory"));

		public static Item_Base GetBuildableItem(this BuildMenuItem_SelectBlock __self) => _buildableItem.Value.GetValue(__self);
		public static void SetBuildableItem(this BuildMenuItem_SelectBlock __self, Item_Base value) => _buildableItem.Value.SetValue(__self, value);
		public static UnityEngine.UI.Image GetIcon(this BuildMenuItem_SelectBlock __self) => _icon.Value.GetValue(__self);
		public static void SetIcon(this BuildMenuItem_SelectBlock __self, UnityEngine.UI.Image value) => _icon.Value.SetValue(__self, value);
		public static BuildMenuItem_SelectSubCategory GetSubCategory(this BuildMenuItem_SelectBlock __self) => _subCategory.Value.GetValue(__self);
		public static void SetSubCategory(this BuildMenuItem_SelectBlock __self, BuildMenuItem_SelectSubCategory value) => _subCategory.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<BuildMenuItem_SelectBlock>> _OnValidate757602046 =
				new System.Lazy<MethodAccessor<BuildMenuItem_SelectBlock>>(() => MethodAccessor<BuildMenuItem_SelectBlock>.Create("OnValidate"));
		private static readonly System.Lazy<MethodAccessor<BuildMenuItem_SelectBlock>> _RefreshIcon757602046 =
				new System.Lazy<MethodAccessor<BuildMenuItem_SelectBlock>>(() => MethodAccessor<BuildMenuItem_SelectBlock>.Create("RefreshIcon"));

		public static void OnValidate(this BuildMenuItem_SelectBlock __self) => _OnValidate757602046.Value.Invoke(__self);
		public static void RefreshIcon(this BuildMenuItem_SelectBlock __self) => _RefreshIcon757602046.Value.Invoke(__self);

	}

	public static class Private_BuildMenuItem_SelectBlock
	{

		private static readonly System.Lazy<StaticFieldAccessor<BuildMenu>> _buildMenu =
				new System.Lazy<StaticFieldAccessor<BuildMenu>>(() => StaticFieldAccessor<BuildMenu>.Create(typeof(BuildMenuItem_SelectBlock), "buildMenu"));

		public static BuildMenu GetBuildMenu() => _buildMenu.Value.GetValue();
		public static void SetBuildMenu(BuildMenu value) => _buildMenu.Value.SetValue(value);

	}

	public static class PrivateAccessor_BuildMenuItem_SelectMainCategory
	{

		private static readonly System.Lazy<FieldAccessor<BuildMenuItem_SelectMainCategory, UnityEngine.UI.Image>> _icon =
				new System.Lazy<FieldAccessor<BuildMenuItem_SelectMainCategory, UnityEngine.UI.Image>>(() => FieldAccessor<BuildMenuItem_SelectMainCategory, UnityEngine.UI.Image>.Create("icon"));
		private static readonly System.Lazy<FieldAccessor<BuildMenuItem_SelectMainCategory, UnityEngine.GameObject>> _horizontalParent =
				new System.Lazy<FieldAccessor<BuildMenuItem_SelectMainCategory, UnityEngine.GameObject>>(() => FieldAccessor<BuildMenuItem_SelectMainCategory, UnityEngine.GameObject>.Create("horizontalParent"));
		private static readonly System.Lazy<FieldAccessor<BuildMenuItem_SelectMainCategory, Item_Base>> _buildableItem =
				new System.Lazy<FieldAccessor<BuildMenuItem_SelectMainCategory, Item_Base>>(() => FieldAccessor<BuildMenuItem_SelectMainCategory, Item_Base>.Create("buildableItem"));

		public static UnityEngine.UI.Image GetIcon(this BuildMenuItem_SelectMainCategory __self) => _icon.Value.GetValue(__self);
		public static void SetIcon(this BuildMenuItem_SelectMainCategory __self, UnityEngine.UI.Image value) => _icon.Value.SetValue(__self, value);
		public static UnityEngine.GameObject GetHorizontalParent(this BuildMenuItem_SelectMainCategory __self) => _horizontalParent.Value.GetValue(__self);
		public static void SetHorizontalParent(this BuildMenuItem_SelectMainCategory __self, UnityEngine.GameObject value) => _horizontalParent.Value.SetValue(__self, value);
		public static Item_Base GetBuildableItem(this BuildMenuItem_SelectMainCategory __self) => _buildableItem.Value.GetValue(__self);
		public static void SetBuildableItem(this BuildMenuItem_SelectMainCategory __self, Item_Base value) => _buildableItem.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<BuildMenuItem_SelectMainCategory>> _Start757602046 =
				new System.Lazy<MethodAccessor<BuildMenuItem_SelectMainCategory>>(() => MethodAccessor<BuildMenuItem_SelectMainCategory>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<BuildMenuItem_SelectMainCategory>> _OnValidate757602046 =
				new System.Lazy<MethodAccessor<BuildMenuItem_SelectMainCategory>>(() => MethodAccessor<BuildMenuItem_SelectMainCategory>.Create("OnValidate"));
		private static readonly System.Lazy<MethodAccessor<BuildMenuItem_SelectMainCategory>> _RefreshIcon757602046 =
				new System.Lazy<MethodAccessor<BuildMenuItem_SelectMainCategory>>(() => MethodAccessor<BuildMenuItem_SelectMainCategory>.Create("RefreshIcon"));

		public static void Start(this BuildMenuItem_SelectMainCategory __self) => _Start757602046.Value.Invoke(__self);
		public static void OnValidate(this BuildMenuItem_SelectMainCategory __self) => _OnValidate757602046.Value.Invoke(__self);
		public static void RefreshIcon(this BuildMenuItem_SelectMainCategory __self) => _RefreshIcon757602046.Value.Invoke(__self);

	}

	public static class Private_BuildMenuItem_SelectMainCategory
	{

		private static readonly System.Lazy<StaticFieldAccessor<BuildMenu>> _buildMenu =
				new System.Lazy<StaticFieldAccessor<BuildMenu>>(() => StaticFieldAccessor<BuildMenu>.Create(typeof(BuildMenuItem_SelectMainCategory), "buildMenu"));

		public static BuildMenu GetBuildMenu() => _buildMenu.Value.GetValue();
		public static void SetBuildMenu(BuildMenu value) => _buildMenu.Value.SetValue(value);

	}

	public static class PrivateAccessor_BuildMenuItem_SelectSubCategory
	{

		private static readonly System.Lazy<FieldAccessor<BuildMenuItem_SelectSubCategory, BuildMenuItem_SelectMainCategory>> _mainCategory =
				new System.Lazy<FieldAccessor<BuildMenuItem_SelectSubCategory, BuildMenuItem_SelectMainCategory>>(() => FieldAccessor<BuildMenuItem_SelectSubCategory, BuildMenuItem_SelectMainCategory>.Create("mainCategory"));
		private static readonly System.Lazy<FieldAccessor<BuildMenuItem_SelectSubCategory, Item_Base>> _buildableItem =
				new System.Lazy<FieldAccessor<BuildMenuItem_SelectSubCategory, Item_Base>>(() => FieldAccessor<BuildMenuItem_SelectSubCategory, Item_Base>.Create("buildableItem"));
		private static readonly System.Lazy<FieldAccessor<BuildMenuItem_SelectSubCategory, UnityEngine.UI.Image>> _icon =
				new System.Lazy<FieldAccessor<BuildMenuItem_SelectSubCategory, UnityEngine.UI.Image>>(() => FieldAccessor<BuildMenuItem_SelectSubCategory, UnityEngine.UI.Image>.Create("icon"));
		private static readonly System.Lazy<FieldAccessor<BuildMenuItem_SelectSubCategory, UnityEngine.GameObject>> _verticalParent =
				new System.Lazy<FieldAccessor<BuildMenuItem_SelectSubCategory, UnityEngine.GameObject>>(() => FieldAccessor<BuildMenuItem_SelectSubCategory, UnityEngine.GameObject>.Create("verticalParent"));

		public static BuildMenuItem_SelectMainCategory GetMainCategory(this BuildMenuItem_SelectSubCategory __self) => _mainCategory.Value.GetValue(__self);
		public static void SetMainCategory(this BuildMenuItem_SelectSubCategory __self, BuildMenuItem_SelectMainCategory value) => _mainCategory.Value.SetValue(__self, value);
		public static Item_Base GetBuildableItem(this BuildMenuItem_SelectSubCategory __self) => _buildableItem.Value.GetValue(__self);
		public static void SetBuildableItem(this BuildMenuItem_SelectSubCategory __self, Item_Base value) => _buildableItem.Value.SetValue(__self, value);
		public static UnityEngine.UI.Image GetIcon(this BuildMenuItem_SelectSubCategory __self) => _icon.Value.GetValue(__self);
		public static void SetIcon(this BuildMenuItem_SelectSubCategory __self, UnityEngine.UI.Image value) => _icon.Value.SetValue(__self, value);
		public static UnityEngine.GameObject GetVerticalParent(this BuildMenuItem_SelectSubCategory __self) => _verticalParent.Value.GetValue(__self);
		public static void SetVerticalParent(this BuildMenuItem_SelectSubCategory __self, UnityEngine.GameObject value) => _verticalParent.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<BuildMenuItem_SelectSubCategory>> _OnValidate757602046 =
				new System.Lazy<MethodAccessor<BuildMenuItem_SelectSubCategory>>(() => MethodAccessor<BuildMenuItem_SelectSubCategory>.Create("OnValidate"));
		private static readonly System.Lazy<MethodAccessor<BuildMenuItem_SelectSubCategory>> _Start757602046 =
				new System.Lazy<MethodAccessor<BuildMenuItem_SelectSubCategory>>(() => MethodAccessor<BuildMenuItem_SelectSubCategory>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<BuildMenuItem_SelectSubCategory>> _RefreshIcon757602046 =
				new System.Lazy<MethodAccessor<BuildMenuItem_SelectSubCategory>>(() => MethodAccessor<BuildMenuItem_SelectSubCategory>.Create("RefreshIcon"));

		public static void OnValidate(this BuildMenuItem_SelectSubCategory __self) => _OnValidate757602046.Value.Invoke(__self);
		public static void Start(this BuildMenuItem_SelectSubCategory __self) => _Start757602046.Value.Invoke(__self);
		public static void RefreshIcon(this BuildMenuItem_SelectSubCategory __self) => _RefreshIcon757602046.Value.Invoke(__self);

	}

	public static class Private_BuildMenuItem_SelectSubCategory
	{

		private static readonly System.Lazy<StaticFieldAccessor<BuildMenu>> _buildMenu =
				new System.Lazy<StaticFieldAccessor<BuildMenu>>(() => StaticFieldAccessor<BuildMenu>.Create(typeof(BuildMenuItem_SelectSubCategory), "buildMenu"));

		public static BuildMenu GetBuildMenu() => _buildMenu.Value.GetValue();
		public static void SetBuildMenu(BuildMenu value) => _buildMenu.Value.SetValue(value);

	}

	public static class PrivateAccessor_CharacterBox
	{

		private static readonly System.Lazy<FieldAccessor<CharacterBox, UnityEngine.UI.InputField>> _nameInputfield =
				new System.Lazy<FieldAccessor<CharacterBox, UnityEngine.UI.InputField>>(() => FieldAccessor<CharacterBox, UnityEngine.UI.InputField>.Create("nameInputfield"));
		private static readonly System.Lazy<FieldAccessor<CharacterBox, TabGroup>> _tabGroupColorScheme =
				new System.Lazy<FieldAccessor<CharacterBox, TabGroup>>(() => FieldAccessor<CharacterBox, TabGroup>.Create("tabGroupColorScheme"));
		private static readonly System.Lazy<FieldAccessor<CharacterBox, System.Collections.Generic.List<int>>> _charactersUnlockedFromBeginning =
				new System.Lazy<FieldAccessor<CharacterBox, System.Collections.Generic.List<int>>>(() => FieldAccessor<CharacterBox, System.Collections.Generic.List<int>>.Create("charactersUnlockedFromBeginning"));
		private static readonly System.Lazy<FieldAccessor<CharacterBox, Settings>> _settings =
				new System.Lazy<FieldAccessor<CharacterBox, Settings>>(() => FieldAccessor<CharacterBox, Settings>.Create("settings"));
		private static readonly System.Lazy<FieldAccessor<CharacterBox, string>> _newName =
				new System.Lazy<FieldAccessor<CharacterBox, string>>(() => FieldAccessor<CharacterBox, string>.Create("newName"));
		private static readonly System.Lazy<FieldAccessor<CharacterBox, int>> _modelIndex =
				new System.Lazy<FieldAccessor<CharacterBox, int>>(() => FieldAccessor<CharacterBox, int>.Create("modelIndex"));

		public static UnityEngine.UI.InputField GetNameInputfield(this CharacterBox __self) => _nameInputfield.Value.GetValue(__self);
		public static void SetNameInputfield(this CharacterBox __self, UnityEngine.UI.InputField value) => _nameInputfield.Value.SetValue(__self, value);
		public static TabGroup GetTabGroupColorScheme(this CharacterBox __self) => _tabGroupColorScheme.Value.GetValue(__self);
		public static void SetTabGroupColorScheme(this CharacterBox __self, TabGroup value) => _tabGroupColorScheme.Value.SetValue(__self, value);
		public static System.Collections.Generic.List<int> GetCharactersUnlockedFromBeginning(this CharacterBox __self) => _charactersUnlockedFromBeginning.Value.GetValue(__self);
		public static void SetCharactersUnlockedFromBeginning(this CharacterBox __self, System.Collections.Generic.List<int> value) => _charactersUnlockedFromBeginning.Value.SetValue(__self, value);
		public static Settings GetSettings(this CharacterBox __self) => _settings.Value.GetValue(__self);
		public static void SetSettings(this CharacterBox __self, Settings value) => _settings.Value.SetValue(__self, value);
		public static string GetNewName(this CharacterBox __self) => _newName.Value.GetValue(__self);
		public static void SetNewName(this CharacterBox __self, string value) => _newName.Value.SetValue(__self, value);
		public static int GetModelIndex(this CharacterBox __self) => _modelIndex.Value.GetValue(__self);
		public static void SetModelIndex(this CharacterBox __self, int value) => _modelIndex.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<CharacterBox>> _Start757602046 =
				new System.Lazy<MethodAccessor<CharacterBox>>(() => MethodAccessor<CharacterBox>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<CharacterBox>> _ApplyCurrentColorSchemeToCharacter757602046 =
				new System.Lazy<MethodAccessor<CharacterBox>>(() => MethodAccessor<CharacterBox>.Create("ApplyCurrentColorSchemeToCharacter"));
		private static readonly System.Lazy<MethodAccessor<CharacterBox>> _RefreshOutfitSprites757602046 =
				new System.Lazy<MethodAccessor<CharacterBox>>(() => MethodAccessor<CharacterBox>.Create("RefreshOutfitSprites"));
		private static readonly System.Lazy<MethodAccessor<CharacterBox>> _GetAllUnlockedCharacters757602046 =
				new System.Lazy<MethodAccessor<CharacterBox>>(() => MethodAccessor<CharacterBox>.Create("GetAllUnlockedCharacters"));

		public static void Start(this CharacterBox __self) => _Start757602046.Value.Invoke(__self);
		public static void ApplyCurrentColorSchemeToCharacter(this CharacterBox __self) => _ApplyCurrentColorSchemeToCharacter757602046.Value.Invoke(__self);
		public static void RefreshOutfitSprites(this CharacterBox __self) => _RefreshOutfitSprites757602046.Value.Invoke(__self);
		public static System.Collections.Generic.List<int> GetAllUnlockedCharacters(this CharacterBox __self) => (System.Collections.Generic.List<int>)_GetAllUnlockedCharacters757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_RGD_Settings_Character
	{

		private static readonly System.Lazy<FieldAccessor<RGD_Settings_Character, string>> _name =
				new System.Lazy<FieldAccessor<RGD_Settings_Character, string>>(() => FieldAccessor<RGD_Settings_Character, string>.Create("name"));
		private static readonly System.Lazy<FieldAccessor<RGD_Settings_Character, int>> _modelIndex =
				new System.Lazy<FieldAccessor<RGD_Settings_Character, int>>(() => FieldAccessor<RGD_Settings_Character, int>.Create("modelIndex"));
		private static readonly System.Lazy<FieldAccessor<RGD_Settings_Character, int>> _oi =
				new System.Lazy<FieldAccessor<RGD_Settings_Character, int>>(() => FieldAccessor<RGD_Settings_Character, int>.Create("oi"));

		public static string GetName(this RGD_Settings_Character __self) => _name.Value.GetValue(__self);
		public static void SetName(this RGD_Settings_Character __self, string value) => _name.Value.SetValue(__self, value);
		public static int GetModelIndex(this RGD_Settings_Character __self) => _modelIndex.Value.GetValue(__self);
		public static void SetModelIndex(this RGD_Settings_Character __self, int value) => _modelIndex.Value.SetValue(__self, value);
		public static int GetOi(this RGD_Settings_Character __self) => _oi.Value.GetValue(__self);
		public static void SetOi(this RGD_Settings_Character __self, int value) => _oi.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<RGD_Settings_Character>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_Settings_Character>>(() => MethodAccessor<RGD_Settings_Character>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_Settings_Character __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_ClosedBetaWindow
	{

		private static readonly System.Lazy<MethodAccessor<ClosedBetaWindow>> _Start757602046 =
				new System.Lazy<MethodAccessor<ClosedBetaWindow>>(() => MethodAccessor<ClosedBetaWindow>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<ClosedBetaWindow>> _Update757602046 =
				new System.Lazy<MethodAccessor<ClosedBetaWindow>>(() => MethodAccessor<ClosedBetaWindow>.Create("Update"));

		public static void Start(this ClosedBetaWindow __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this ClosedBetaWindow __self) => _Update757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_ConnectingBox
	{

		private static readonly System.Lazy<FieldAccessor<ConnectingBox, JoinGameBox>> _joinGameBox =
				new System.Lazy<FieldAccessor<ConnectingBox, JoinGameBox>>(() => FieldAccessor<ConnectingBox, JoinGameBox>.Create("joinGameBox"));
		private static readonly System.Lazy<FieldAccessor<ConnectingBox, Raft_Network>> _network =
				new System.Lazy<FieldAccessor<ConnectingBox, Raft_Network>>(() => FieldAccessor<ConnectingBox, Raft_Network>.Create("network"));

		public static JoinGameBox GetJoinGameBox(this ConnectingBox __self) => _joinGameBox.Value.GetValue(__self);
		public static void SetJoinGameBox(this ConnectingBox __self, JoinGameBox value) => _joinGameBox.Value.SetValue(__self, value);
		public static Raft_Network GetNetwork(this ConnectingBox __self) => _network.Value.GetValue(__self);
		public static void SetNetwork(this ConnectingBox __self, Raft_Network value) => _network.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<ConnectingBox>> _OnEnable757602046 =
				new System.Lazy<MethodAccessor<ConnectingBox>>(() => MethodAccessor<ConnectingBox>.Create("OnEnable"));
		private static readonly System.Lazy<MethodAccessor<ConnectingBox>> _Awake757602046 =
				new System.Lazy<MethodAccessor<ConnectingBox>>(() => MethodAccessor<ConnectingBox>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<ConnectingBox>> _Start757602046 =
				new System.Lazy<MethodAccessor<ConnectingBox>>(() => MethodAccessor<ConnectingBox>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<ConnectingBox>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<ConnectingBox>>(() => MethodAccessor<ConnectingBox>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<ConnectingBox>> _StartConnectTimer757602046 =
				new System.Lazy<MethodAccessor<ConnectingBox>>(() => MethodAccessor<ConnectingBox>.Create("StartConnectTimer"));

		public static void OnEnable(this ConnectingBox __self) => _OnEnable757602046.Value.Invoke(__self);
		public static void Awake(this ConnectingBox __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this ConnectingBox __self) => _Start757602046.Value.Invoke(__self);
		public static void OnDestroy(this ConnectingBox __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static System.Collections.IEnumerator StartConnectTimer(this ConnectingBox __self) => (System.Collections.IEnumerator)_StartConnectTimer757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_DeleteGameBox
	{

		private static readonly System.Lazy<FieldAccessor<DeleteGameBox, LoadGameBox>> _loadGameBox =
				new System.Lazy<FieldAccessor<DeleteGameBox, LoadGameBox>>(() => FieldAccessor<DeleteGameBox, LoadGameBox>.Create("loadGameBox"));
		private static readonly System.Lazy<FieldAccessor<DeleteGameBox, UnityEngine.UI.Text>> _text_title =
				new System.Lazy<FieldAccessor<DeleteGameBox, UnityEngine.UI.Text>>(() => FieldAccessor<DeleteGameBox, UnityEngine.UI.Text>.Create("text_title"));

		public static LoadGameBox GetLoadGameBox(this DeleteGameBox __self) => _loadGameBox.Value.GetValue(__self);
		public static void SetLoadGameBox(this DeleteGameBox __self, LoadGameBox value) => _loadGameBox.Value.SetValue(__self, value);
		public static UnityEngine.UI.Text GetText_title(this DeleteGameBox __self) => _text_title.Value.GetValue(__self);
		public static void SetText_title(this DeleteGameBox __self, UnityEngine.UI.Text value) => _text_title.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_DeleteGameVersionBox
	{

		private static readonly System.Lazy<FieldAccessor<DeleteGameVersionBox, LoadGameVersionControlBox>> _loadGameVersionBox =
				new System.Lazy<FieldAccessor<DeleteGameVersionBox, LoadGameVersionControlBox>>(() => FieldAccessor<DeleteGameVersionBox, LoadGameVersionControlBox>.Create("loadGameVersionBox"));
		private static readonly System.Lazy<FieldAccessor<DeleteGameVersionBox, UnityEngine.UI.Text>> _text_title =
				new System.Lazy<FieldAccessor<DeleteGameVersionBox, UnityEngine.UI.Text>>(() => FieldAccessor<DeleteGameVersionBox, UnityEngine.UI.Text>.Create("text_title"));

		public static LoadGameVersionControlBox GetLoadGameVersionBox(this DeleteGameVersionBox __self) => _loadGameVersionBox.Value.GetValue(__self);
		public static void SetLoadGameVersionBox(this DeleteGameVersionBox __self, LoadGameVersionControlBox value) => _loadGameVersionBox.Value.SetValue(__self, value);
		public static UnityEngine.UI.Text GetText_title(this DeleteGameVersionBox __self) => _text_title.Value.GetValue(__self);
		public static void SetText_title(this DeleteGameVersionBox __self, UnityEngine.UI.Text value) => _text_title.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_ExitGameBox
	{

		private static readonly System.Lazy<FieldAccessor<ExitGameBox, StartMenuScreen>> _menuScreen =
				new System.Lazy<FieldAccessor<ExitGameBox, StartMenuScreen>>(() => FieldAccessor<ExitGameBox, StartMenuScreen>.Create("menuScreen"));

		public static StartMenuScreen GetMenuScreen(this ExitGameBox __self) => _menuScreen.Value.GetValue(__self);
		public static void SetMenuScreen(this ExitGameBox __self, StartMenuScreen value) => _menuScreen.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<ExitGameBox>> _Awake757602046 =
				new System.Lazy<MethodAccessor<ExitGameBox>>(() => MethodAccessor<ExitGameBox>.Create("Awake"));

		public static void Awake(this ExitGameBox __self) => _Awake757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_JoinGameBox
	{

		private static readonly System.Lazy<FieldAccessor<JoinGameBox, UnityEngine.UI.ScrollRect>> _scrollRect =
				new System.Lazy<FieldAccessor<JoinGameBox, UnityEngine.UI.ScrollRect>>(() => FieldAccessor<JoinGameBox, UnityEngine.UI.ScrollRect>.Create("scrollRect"));
		private static readonly System.Lazy<FieldAccessor<JoinGameBox, JoinGame_Selection>> _gameSelectionPrefab =
				new System.Lazy<FieldAccessor<JoinGameBox, JoinGame_Selection>>(() => FieldAccessor<JoinGameBox, JoinGame_Selection>.Create("gameSelectionPrefab"));
		private static readonly System.Lazy<FieldAccessor<JoinGameBox, UnityEngine.UI.Button>> _joinGameButton =
				new System.Lazy<FieldAccessor<JoinGameBox, UnityEngine.UI.Button>>(() => FieldAccessor<JoinGameBox, UnityEngine.UI.Button>.Create("joinGameButton"));
		private static readonly System.Lazy<FieldAccessor<JoinGameBox, UnityEngine.GameObject>> _noGamesFoundsText =
				new System.Lazy<FieldAccessor<JoinGameBox, UnityEngine.GameObject>>(() => FieldAccessor<JoinGameBox, UnityEngine.GameObject>.Create("noGamesFoundsText"));
		private static readonly System.Lazy<FieldAccessor<JoinGameBox, UnityEngine.GameObject>> _cheat_joinGameSteamIDBox =
				new System.Lazy<FieldAccessor<JoinGameBox, UnityEngine.GameObject>>(() => FieldAccessor<JoinGameBox, UnityEngine.GameObject>.Create("cheat_joinGameSteamIDBox"));
		private static readonly System.Lazy<FieldAccessor<JoinGameBox, UnityEngine.UI.InputField>> _cheat_joinGameSteamID =
				new System.Lazy<FieldAccessor<JoinGameBox, UnityEngine.UI.InputField>>(() => FieldAccessor<JoinGameBox, UnityEngine.UI.InputField>.Create("cheat_joinGameSteamID"));
		private static readonly System.Lazy<FieldAccessor<JoinGameBox, UnityEngine.UI.InputField>> _cheat_joinGamePassword =
				new System.Lazy<FieldAccessor<JoinGameBox, UnityEngine.UI.InputField>>(() => FieldAccessor<JoinGameBox, UnityEngine.UI.InputField>.Create("cheat_joinGamePassword"));
		private static readonly System.Lazy<FieldAccessor<JoinGameBox, Raft_Network>> _network =
				new System.Lazy<FieldAccessor<JoinGameBox, Raft_Network>>(() => FieldAccessor<JoinGameBox, Raft_Network>.Create("network"));
		private static readonly System.Lazy<FieldAccessor<JoinGameBox, JoinGame_Selection>> _selectedGame =
				new System.Lazy<FieldAccessor<JoinGameBox, JoinGame_Selection>>(() => FieldAccessor<JoinGameBox, JoinGame_Selection>.Create("selectedGame"));
		private static readonly System.Lazy<FieldAccessor<JoinGameBox, System.Collections.Generic.List<JoinGame_Selection>>> _joinGameSelections =
				new System.Lazy<FieldAccessor<JoinGameBox, System.Collections.Generic.List<JoinGame_Selection>>>(() => FieldAccessor<JoinGameBox, System.Collections.Generic.List<JoinGame_Selection>>.Create("joinGameSelections"));

		public static UnityEngine.UI.ScrollRect GetScrollRect(this JoinGameBox __self) => _scrollRect.Value.GetValue(__self);
		public static void SetScrollRect(this JoinGameBox __self, UnityEngine.UI.ScrollRect value) => _scrollRect.Value.SetValue(__self, value);
		public static JoinGame_Selection GetGameSelectionPrefab(this JoinGameBox __self) => _gameSelectionPrefab.Value.GetValue(__self);
		public static void SetGameSelectionPrefab(this JoinGameBox __self, JoinGame_Selection value) => _gameSelectionPrefab.Value.SetValue(__self, value);
		public static UnityEngine.UI.Button GetJoinGameButton(this JoinGameBox __self) => _joinGameButton.Value.GetValue(__self);
		public static void SetJoinGameButton(this JoinGameBox __self, UnityEngine.UI.Button value) => _joinGameButton.Value.SetValue(__self, value);
		public static UnityEngine.GameObject GetNoGamesFoundsText(this JoinGameBox __self) => _noGamesFoundsText.Value.GetValue(__self);
		public static void SetNoGamesFoundsText(this JoinGameBox __self, UnityEngine.GameObject value) => _noGamesFoundsText.Value.SetValue(__self, value);
		public static UnityEngine.GameObject GetCheat_joinGameSteamIDBox(this JoinGameBox __self) => _cheat_joinGameSteamIDBox.Value.GetValue(__self);
		public static void SetCheat_joinGameSteamIDBox(this JoinGameBox __self, UnityEngine.GameObject value) => _cheat_joinGameSteamIDBox.Value.SetValue(__self, value);
		public static UnityEngine.UI.InputField GetCheat_joinGameSteamID(this JoinGameBox __self) => _cheat_joinGameSteamID.Value.GetValue(__self);
		public static void SetCheat_joinGameSteamID(this JoinGameBox __self, UnityEngine.UI.InputField value) => _cheat_joinGameSteamID.Value.SetValue(__self, value);
		public static UnityEngine.UI.InputField GetCheat_joinGamePassword(this JoinGameBox __self) => _cheat_joinGamePassword.Value.GetValue(__self);
		public static void SetCheat_joinGamePassword(this JoinGameBox __self, UnityEngine.UI.InputField value) => _cheat_joinGamePassword.Value.SetValue(__self, value);
		public static Raft_Network GetNetwork(this JoinGameBox __self) => _network.Value.GetValue(__self);
		public static void SetNetwork(this JoinGameBox __self, Raft_Network value) => _network.Value.SetValue(__self, value);
		public static JoinGame_Selection GetSelectedGame(this JoinGameBox __self) => _selectedGame.Value.GetValue(__self);
		public static void SetSelectedGame(this JoinGameBox __self, JoinGame_Selection value) => _selectedGame.Value.SetValue(__self, value);
		public static System.Collections.Generic.List<JoinGame_Selection> GetJoinGameSelections(this JoinGameBox __self) => _joinGameSelections.Value.GetValue(__self);
		public static void SetJoinGameSelections(this JoinGameBox __self, System.Collections.Generic.List<JoinGame_Selection> value) => _joinGameSelections.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<JoinGameBox>> _Start757602046 =
				new System.Lazy<MethodAccessor<JoinGameBox>>(() => MethodAccessor<JoinGameBox>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<JoinGameBox>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<JoinGameBox>>(() => MethodAccessor<JoinGameBox>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<JoinGameBox>> _RefreshGames757602046 =
				new System.Lazy<MethodAccessor<JoinGameBox>>(() => MethodAccessor<JoinGameBox>.Create("RefreshGames"));
		private static readonly System.Lazy<MethodAccessor<JoinGameBox>> _OnFriendInfo3429031458 =
				new System.Lazy<MethodAccessor<JoinGameBox>>(() => MethodAccessor<JoinGameBox>.Create("OnFriendInfo", typeof(Steamworks.CSteamID)));
		private static readonly System.Lazy<MethodAccessor<JoinGameBox>> _HandleFriendInfo2029189080 =
				new System.Lazy<MethodAccessor<JoinGameBox>>(() => MethodAccessor<JoinGameBox>.Create("HandleFriendInfo", typeof(Steamworks.CSteamID), typeof(string)));
		private static readonly System.Lazy<MethodAccessor<JoinGameBox>> _SetIDToSelection1386948526 =
				new System.Lazy<MethodAccessor<JoinGameBox>>(() => MethodAccessor<JoinGameBox>.Create("SetIDToSelection", typeof(Steamworks.CSteamID), typeof(bool), typeof(JoinGame_Selection)));

		public static void Start(this JoinGameBox __self) => _Start757602046.Value.Invoke(__self);
		public static void OnDestroy(this JoinGameBox __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void RefreshGames(this JoinGameBox __self) => _RefreshGames757602046.Value.Invoke(__self);
		public static void OnFriendInfo(this JoinGameBox __self, Steamworks.CSteamID steamID) => _OnFriendInfo3429031458.Value.Invoke(__self, steamID);
		public static void HandleFriendInfo(this JoinGameBox __self, Steamworks.CSteamID steamID, string status) => _HandleFriendInfo2029189080.Value.Invoke(__self, steamID, status);
		public static System.Collections.IEnumerator SetIDToSelection(this JoinGameBox __self, Steamworks.CSteamID steamID, bool passwordProtected, JoinGame_Selection selection) => (System.Collections.IEnumerator)_SetIDToSelection1386948526.Value.Invoke(__self, steamID, passwordProtected, selection);

	}

	public static class PrivateAccessor_JoinGame_Selection
	{

		private static readonly System.Lazy<FieldAccessor<JoinGame_Selection, UnityEngine.UI.Text>> _text_GameName =
				new System.Lazy<FieldAccessor<JoinGame_Selection, UnityEngine.UI.Text>>(() => FieldAccessor<JoinGame_Selection, UnityEngine.UI.Text>.Create("text_GameName"));
		private static readonly System.Lazy<FieldAccessor<JoinGame_Selection, UnityEngine.UI.Image>> _image_Avatar =
				new System.Lazy<FieldAccessor<JoinGame_Selection, UnityEngine.UI.Image>>(() => FieldAccessor<JoinGame_Selection, UnityEngine.UI.Image>.Create("image_Avatar"));
		private static readonly System.Lazy<FieldAccessor<JoinGame_Selection, UnityEngine.UI.Image>> _image_passwordLock =
				new System.Lazy<FieldAccessor<JoinGame_Selection, UnityEngine.UI.Image>>(() => FieldAccessor<JoinGame_Selection, UnityEngine.UI.Image>.Create("image_passwordLock"));

		public static UnityEngine.UI.Text GetText_GameName(this JoinGame_Selection __self) => _text_GameName.Value.GetValue(__self);
		public static void SetText_GameName(this JoinGame_Selection __self, UnityEngine.UI.Text value) => _text_GameName.Value.SetValue(__self, value);
		public static UnityEngine.UI.Image GetImage_Avatar(this JoinGame_Selection __self) => _image_Avatar.Value.GetValue(__self);
		public static void SetImage_Avatar(this JoinGame_Selection __self, UnityEngine.UI.Image value) => _image_Avatar.Value.SetValue(__self, value);
		public static UnityEngine.UI.Image GetImage_passwordLock(this JoinGame_Selection __self) => _image_passwordLock.Value.GetValue(__self);
		public static void SetImage_passwordLock(this JoinGame_Selection __self, UnityEngine.UI.Image value) => _image_passwordLock.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<JoinGame_Selection>> _Awake757602046 =
				new System.Lazy<MethodAccessor<JoinGame_Selection>>(() => MethodAccessor<JoinGame_Selection>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<JoinGame_Selection>> _SetAvatar323937938 =
				new System.Lazy<MethodAccessor<JoinGame_Selection>>(() => MethodAccessor<JoinGame_Selection>.Create("SetAvatar", typeof(UnityEngine.UI.Image), typeof(Steamworks.CSteamID)));

		public static void Awake(this JoinGame_Selection __self) => _Awake757602046.Value.Invoke(__self);
		public static System.Collections.IEnumerator SetAvatar(this JoinGame_Selection __self, UnityEngine.UI.Image target, Steamworks.CSteamID steamid) => (System.Collections.IEnumerator)_SetAvatar323937938.Value.Invoke(__self, target, steamid);

	}

	public static class Private_JoinGame_Selection
	{

		private static readonly System.Lazy<StaticFieldAccessor<JoinGame_Selection>> _selectedSelection =
				new System.Lazy<StaticFieldAccessor<JoinGame_Selection>>(() => StaticFieldAccessor<JoinGame_Selection>.Create(typeof(JoinGame_Selection), "selectedSelection"));
		private static readonly System.Lazy<StaticFieldAccessor<JoinGameBox>> _joinGameBox =
				new System.Lazy<StaticFieldAccessor<JoinGameBox>>(() => StaticFieldAccessor<JoinGameBox>.Create(typeof(JoinGame_Selection), "joinGameBox"));

		public static JoinGame_Selection GetSelectedSelection() => _selectedSelection.Value.GetValue();
		public static void SetSelectedSelection(JoinGame_Selection value) => _selectedSelection.Value.SetValue(value);
		public static JoinGameBox GetJoinGameBox() => _joinGameBox.Value.GetValue();
		public static void SetJoinGameBox(JoinGameBox value) => _joinGameBox.Value.SetValue(value);

	}

	public static class PrivateAccessor_JoinPasswordBox
	{

		private static readonly System.Lazy<FieldAccessor<JoinPasswordBox, ConnectingBox>> _connectingBox =
				new System.Lazy<FieldAccessor<JoinPasswordBox, ConnectingBox>>(() => FieldAccessor<JoinPasswordBox, ConnectingBox>.Create("connectingBox"));
		private static readonly System.Lazy<FieldAccessor<JoinPasswordBox, JoinGameBox>> _joinGameBox =
				new System.Lazy<FieldAccessor<JoinPasswordBox, JoinGameBox>>(() => FieldAccessor<JoinPasswordBox, JoinGameBox>.Create("joinGameBox"));
		private static readonly System.Lazy<FieldAccessor<JoinPasswordBox, UnityEngine.UI.InputField>> _inputfield_Password =
				new System.Lazy<FieldAccessor<JoinPasswordBox, UnityEngine.UI.InputField>>(() => FieldAccessor<JoinPasswordBox, UnityEngine.UI.InputField>.Create("inputfield_Password"));

		public static ConnectingBox GetConnectingBox(this JoinPasswordBox __self) => _connectingBox.Value.GetValue(__self);
		public static void SetConnectingBox(this JoinPasswordBox __self, ConnectingBox value) => _connectingBox.Value.SetValue(__self, value);
		public static JoinGameBox GetJoinGameBox(this JoinPasswordBox __self) => _joinGameBox.Value.GetValue(__self);
		public static void SetJoinGameBox(this JoinPasswordBox __self, JoinGameBox value) => _joinGameBox.Value.SetValue(__self, value);
		public static UnityEngine.UI.InputField GetInputfield_Password(this JoinPasswordBox __self) => _inputfield_Password.Value.GetValue(__self);
		public static void SetInputfield_Password(this JoinPasswordBox __self, UnityEngine.UI.InputField value) => _inputfield_Password.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_LoadGameBox
	{

		private static readonly System.Lazy<FieldAccessor<LoadGameBox, UnityEngine.UI.Dropdown>> _authSettingDropdown =
				new System.Lazy<FieldAccessor<LoadGameBox, UnityEngine.UI.Dropdown>>(() => FieldAccessor<LoadGameBox, UnityEngine.UI.Dropdown>.Create("authSettingDropdown"));
		private static readonly System.Lazy<FieldAccessor<LoadGameBox, UnityEngine.UI.Toggle>> _allowFriendlyFireToggle =
				new System.Lazy<FieldAccessor<LoadGameBox, UnityEngine.UI.Toggle>>(() => FieldAccessor<LoadGameBox, UnityEngine.UI.Toggle>.Create("allowFriendlyFireToggle"));
		private static readonly System.Lazy<FieldAccessor<LoadGameBox, LoadGame_Selection>> _loadGameSelectionPrefab =
				new System.Lazy<FieldAccessor<LoadGameBox, LoadGame_Selection>>(() => FieldAccessor<LoadGameBox, LoadGame_Selection>.Create("loadGameSelectionPrefab"));
		private static readonly System.Lazy<FieldAccessor<LoadGameBox, UnityEngine.UI.ScrollRect>> _scrollRect =
				new System.Lazy<FieldAccessor<LoadGameBox, UnityEngine.UI.ScrollRect>>(() => FieldAccessor<LoadGameBox, UnityEngine.UI.ScrollRect>.Create("scrollRect"));
		private static readonly System.Lazy<FieldAccessor<LoadGameBox, UnityEngine.UI.Button>> _deleteButton =
				new System.Lazy<FieldAccessor<LoadGameBox, UnityEngine.UI.Button>>(() => FieldAccessor<LoadGameBox, UnityEngine.UI.Button>.Create("deleteButton"));
		private static readonly System.Lazy<FieldAccessor<LoadGameBox, UnityEngine.UI.Button>> _loadButton =
				new System.Lazy<FieldAccessor<LoadGameBox, UnityEngine.UI.Button>>(() => FieldAccessor<LoadGameBox, UnityEngine.UI.Button>.Create("loadButton"));
		private static readonly System.Lazy<FieldAccessor<LoadGameBox, UnityEngine.UI.Button>> _versionControlButton =
				new System.Lazy<FieldAccessor<LoadGameBox, UnityEngine.UI.Button>>(() => FieldAccessor<LoadGameBox, UnityEngine.UI.Button>.Create("versionControlButton"));
		private static readonly System.Lazy<FieldAccessor<LoadGameBox, DeleteGameBox>> _deleteGameBox =
				new System.Lazy<FieldAccessor<LoadGameBox, DeleteGameBox>>(() => FieldAccessor<LoadGameBox, DeleteGameBox>.Create("deleteGameBox"));
		private static readonly System.Lazy<FieldAccessor<LoadGameBox, UnityEngine.UI.InputField>> _inputfield_Password =
				new System.Lazy<FieldAccessor<LoadGameBox, UnityEngine.UI.InputField>>(() => FieldAccessor<LoadGameBox, UnityEngine.UI.InputField>.Create("inputfield_Password"));
		private static readonly System.Lazy<FieldAccessor<LoadGameBox, UnityEngine.UI.Text>> _saveFileVersioningText =
				new System.Lazy<FieldAccessor<LoadGameBox, UnityEngine.UI.Text>>(() => FieldAccessor<LoadGameBox, UnityEngine.UI.Text>.Create("saveFileVersioningText"));
		private static readonly System.Lazy<FieldAccessor<LoadGameBox, LoadGameVersionControlBox>> _versionControlBox =
				new System.Lazy<FieldAccessor<LoadGameBox, LoadGameVersionControlBox>>(() => FieldAccessor<LoadGameBox, LoadGameVersionControlBox>.Create("versionControlBox"));
		private static readonly System.Lazy<FieldAccessor<LoadGameBox, Raft_Network>> _network =
				new System.Lazy<FieldAccessor<LoadGameBox, Raft_Network>>(() => FieldAccessor<LoadGameBox, Raft_Network>.Create("network"));
		private static readonly System.Lazy<FieldAccessor<LoadGameBox, System.Collections.Generic.List<LoadGame_Selection>>> _loadGameSelections =
				new System.Lazy<FieldAccessor<LoadGameBox, System.Collections.Generic.List<LoadGame_Selection>>>(() => FieldAccessor<LoadGameBox, System.Collections.Generic.List<LoadGame_Selection>>.Create("loadGameSelections"));

		public static UnityEngine.UI.Dropdown GetAuthSettingDropdown(this LoadGameBox __self) => _authSettingDropdown.Value.GetValue(__self);
		public static void SetAuthSettingDropdown(this LoadGameBox __self, UnityEngine.UI.Dropdown value) => _authSettingDropdown.Value.SetValue(__self, value);
		public static UnityEngine.UI.Toggle GetAllowFriendlyFireToggle(this LoadGameBox __self) => _allowFriendlyFireToggle.Value.GetValue(__self);
		public static void SetAllowFriendlyFireToggle(this LoadGameBox __self, UnityEngine.UI.Toggle value) => _allowFriendlyFireToggle.Value.SetValue(__self, value);
		public static LoadGame_Selection GetLoadGameSelectionPrefab(this LoadGameBox __self) => _loadGameSelectionPrefab.Value.GetValue(__self);
		public static void SetLoadGameSelectionPrefab(this LoadGameBox __self, LoadGame_Selection value) => _loadGameSelectionPrefab.Value.SetValue(__self, value);
		public static UnityEngine.UI.ScrollRect GetScrollRect(this LoadGameBox __self) => _scrollRect.Value.GetValue(__self);
		public static void SetScrollRect(this LoadGameBox __self, UnityEngine.UI.ScrollRect value) => _scrollRect.Value.SetValue(__self, value);
		public static UnityEngine.UI.Button GetDeleteButton(this LoadGameBox __self) => _deleteButton.Value.GetValue(__self);
		public static void SetDeleteButton(this LoadGameBox __self, UnityEngine.UI.Button value) => _deleteButton.Value.SetValue(__self, value);
		public static UnityEngine.UI.Button GetLoadButton(this LoadGameBox __self) => _loadButton.Value.GetValue(__self);
		public static void SetLoadButton(this LoadGameBox __self, UnityEngine.UI.Button value) => _loadButton.Value.SetValue(__self, value);
		public static UnityEngine.UI.Button GetVersionControlButton(this LoadGameBox __self) => _versionControlButton.Value.GetValue(__self);
		public static void SetVersionControlButton(this LoadGameBox __self, UnityEngine.UI.Button value) => _versionControlButton.Value.SetValue(__self, value);
		public static DeleteGameBox GetDeleteGameBox(this LoadGameBox __self) => _deleteGameBox.Value.GetValue(__self);
		public static void SetDeleteGameBox(this LoadGameBox __self, DeleteGameBox value) => _deleteGameBox.Value.SetValue(__self, value);
		public static UnityEngine.UI.InputField GetInputfield_Password(this LoadGameBox __self) => _inputfield_Password.Value.GetValue(__self);
		public static void SetInputfield_Password(this LoadGameBox __self, UnityEngine.UI.InputField value) => _inputfield_Password.Value.SetValue(__self, value);
		public static UnityEngine.UI.Text GetSaveFileVersioningText(this LoadGameBox __self) => _saveFileVersioningText.Value.GetValue(__self);
		public static void SetSaveFileVersioningText(this LoadGameBox __self, UnityEngine.UI.Text value) => _saveFileVersioningText.Value.SetValue(__self, value);
		public static LoadGameVersionControlBox GetVersionControlBox(this LoadGameBox __self) => _versionControlBox.Value.GetValue(__self);
		public static void SetVersionControlBox(this LoadGameBox __self, LoadGameVersionControlBox value) => _versionControlBox.Value.SetValue(__self, value);
		public static Raft_Network GetNetwork(this LoadGameBox __self) => _network.Value.GetValue(__self);
		public static void SetNetwork(this LoadGameBox __self, Raft_Network value) => _network.Value.SetValue(__self, value);
		public static System.Collections.Generic.List<LoadGame_Selection> GetLoadGameSelections(this LoadGameBox __self) => _loadGameSelections.Value.GetValue(__self);
		public static void SetLoadGameSelections(this LoadGameBox __self, System.Collections.Generic.List<LoadGame_Selection> value) => _loadGameSelections.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<LoadGameBox>> _Start757602046 =
				new System.Lazy<MethodAccessor<LoadGameBox>>(() => MethodAccessor<LoadGameBox>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<LoadGameBox>> _ClearLoadGameSelections757602046 =
				new System.Lazy<MethodAccessor<LoadGameBox>>(() => MethodAccessor<LoadGameBox>.Create("ClearLoadGameSelections"));

		public static void Start(this LoadGameBox __self) => _Start757602046.Value.Invoke(__self);
		public static void ClearLoadGameSelections(this LoadGameBox __self) => _ClearLoadGameSelections757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_LoadGameVersionControlBox
	{

		private static readonly System.Lazy<FieldAccessor<LoadGameVersionControlBox, UnityEngine.UI.Text>> _text_saveName =
				new System.Lazy<FieldAccessor<LoadGameVersionControlBox, UnityEngine.UI.Text>>(() => FieldAccessor<LoadGameVersionControlBox, UnityEngine.UI.Text>.Create("text_saveName"));
		private static readonly System.Lazy<FieldAccessor<LoadGameVersionControlBox, UnityEngine.UI.Button>> _button_loadgame =
				new System.Lazy<FieldAccessor<LoadGameVersionControlBox, UnityEngine.UI.Button>>(() => FieldAccessor<LoadGameVersionControlBox, UnityEngine.UI.Button>.Create("button_loadgame"));
		private static readonly System.Lazy<FieldAccessor<LoadGameVersionControlBox, UnityEngine.UI.Button>> _button_deleteVersion =
				new System.Lazy<FieldAccessor<LoadGameVersionControlBox, UnityEngine.UI.Button>>(() => FieldAccessor<LoadGameVersionControlBox, UnityEngine.UI.Button>.Create("button_deleteVersion"));
		private static readonly System.Lazy<FieldAccessor<LoadGameVersionControlBox, DeleteGameVersionBox>> _deleteGameVersionBox =
				new System.Lazy<FieldAccessor<LoadGameVersionControlBox, DeleteGameVersionBox>>(() => FieldAccessor<LoadGameVersionControlBox, DeleteGameVersionBox>.Create("deleteGameVersionBox"));
		private static readonly System.Lazy<FieldAccessor<LoadGameVersionControlBox, LoadGameBox>> _loadGameBox =
				new System.Lazy<FieldAccessor<LoadGameVersionControlBox, LoadGameBox>>(() => FieldAccessor<LoadGameVersionControlBox, LoadGameBox>.Create("loadGameBox"));
		private static readonly System.Lazy<FieldAccessor<LoadGameVersionControlBox, LoadGame_VersionSelection[]>> _versionSelectionPrefabs =
				new System.Lazy<FieldAccessor<LoadGameVersionControlBox, LoadGame_VersionSelection[]>>(() => FieldAccessor<LoadGameVersionControlBox, LoadGame_VersionSelection[]>.Create("versionSelectionPrefabs"));
		private static readonly System.Lazy<FieldAccessor<LoadGameVersionControlBox, System.Collections.Generic.List<GameToFolderConnection>>> _backupRGDGames =
				new System.Lazy<FieldAccessor<LoadGameVersionControlBox, System.Collections.Generic.List<GameToFolderConnection>>>(() => FieldAccessor<LoadGameVersionControlBox, System.Collections.Generic.List<GameToFolderConnection>>.Create("backupRGDGames"));

		public static UnityEngine.UI.Text GetText_saveName(this LoadGameVersionControlBox __self) => _text_saveName.Value.GetValue(__self);
		public static void SetText_saveName(this LoadGameVersionControlBox __self, UnityEngine.UI.Text value) => _text_saveName.Value.SetValue(__self, value);
		public static UnityEngine.UI.Button GetButton_loadgame(this LoadGameVersionControlBox __self) => _button_loadgame.Value.GetValue(__self);
		public static void SetButton_loadgame(this LoadGameVersionControlBox __self, UnityEngine.UI.Button value) => _button_loadgame.Value.SetValue(__self, value);
		public static UnityEngine.UI.Button GetButton_deleteVersion(this LoadGameVersionControlBox __self) => _button_deleteVersion.Value.GetValue(__self);
		public static void SetButton_deleteVersion(this LoadGameVersionControlBox __self, UnityEngine.UI.Button value) => _button_deleteVersion.Value.SetValue(__self, value);
		public static DeleteGameVersionBox GetDeleteGameVersionBox(this LoadGameVersionControlBox __self) => _deleteGameVersionBox.Value.GetValue(__self);
		public static void SetDeleteGameVersionBox(this LoadGameVersionControlBox __self, DeleteGameVersionBox value) => _deleteGameVersionBox.Value.SetValue(__self, value);
		public static LoadGameBox GetLoadGameBox(this LoadGameVersionControlBox __self) => _loadGameBox.Value.GetValue(__self);
		public static void SetLoadGameBox(this LoadGameVersionControlBox __self, LoadGameBox value) => _loadGameBox.Value.SetValue(__self, value);
		public static LoadGame_VersionSelection[] GetVersionSelectionPrefabs(this LoadGameVersionControlBox __self) => _versionSelectionPrefabs.Value.GetValue(__self);
		public static void SetVersionSelectionPrefabs(this LoadGameVersionControlBox __self, LoadGame_VersionSelection[] value) => _versionSelectionPrefabs.Value.SetValue(__self, value);
		public static System.Collections.Generic.List<GameToFolderConnection> GetBackupRGDGames(this LoadGameVersionControlBox __self) => _backupRGDGames.Value.GetValue(__self);
		public static void SetBackupRGDGames(this LoadGameVersionControlBox __self, System.Collections.Generic.List<GameToFolderConnection> value) => _backupRGDGames.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_LoadGame_Selection
	{

		private static readonly System.Lazy<FieldAccessor<LoadGame_Selection, UnityEngine.UI.Text>> _text_LastPlayed =
				new System.Lazy<FieldAccessor<LoadGame_Selection, UnityEngine.UI.Text>>(() => FieldAccessor<LoadGame_Selection, UnityEngine.UI.Text>.Create("text_LastPlayed"));
		private static readonly System.Lazy<FieldAccessor<LoadGame_Selection, UnityEngine.UI.Text>> _text_GameMode =
				new System.Lazy<FieldAccessor<LoadGame_Selection, UnityEngine.UI.Text>>(() => FieldAccessor<LoadGame_Selection, UnityEngine.UI.Text>.Create("text_GameMode"));
		private static readonly System.Lazy<FieldAccessor<LoadGame_Selection, LoadGame_Selection.SaveFileComparedToAppStatus>> _saveFileComparedToAppStatus =
				new System.Lazy<FieldAccessor<LoadGame_Selection, LoadGame_Selection.SaveFileComparedToAppStatus>>(() => FieldAccessor<LoadGame_Selection, LoadGame_Selection.SaveFileComparedToAppStatus>.Create("saveFileComparedToAppStatus"));

		public static UnityEngine.UI.Text GetText_LastPlayed(this LoadGame_Selection __self) => _text_LastPlayed.Value.GetValue(__self);
		public static void SetText_LastPlayed(this LoadGame_Selection __self, UnityEngine.UI.Text value) => _text_LastPlayed.Value.SetValue(__self, value);
		public static UnityEngine.UI.Text GetText_GameMode(this LoadGame_Selection __self) => _text_GameMode.Value.GetValue(__self);
		public static void SetText_GameMode(this LoadGame_Selection __self, UnityEngine.UI.Text value) => _text_GameMode.Value.SetValue(__self, value);
		public static LoadGame_Selection.SaveFileComparedToAppStatus GetSaveFileComparedToAppStatus(this LoadGame_Selection __self) => _saveFileComparedToAppStatus.Value.GetValue(__self);
		public static void SetSaveFileComparedToAppStatus(this LoadGame_Selection __self, LoadGame_Selection.SaveFileComparedToAppStatus value) => _saveFileComparedToAppStatus.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<LoadGame_Selection>> _Awake757602046 =
				new System.Lazy<MethodAccessor<LoadGame_Selection>>(() => MethodAccessor<LoadGame_Selection>.Create("Awake"));

		public static void Awake(this LoadGame_Selection __self) => _Awake757602046.Value.Invoke(__self);

	}

	public static class Private_LoadGame_Selection
	{

		private static readonly System.Lazy<StaticFieldAccessor<LoadGame_Selection>> _selectedLoadGame =
				new System.Lazy<StaticFieldAccessor<LoadGame_Selection>>(() => StaticFieldAccessor<LoadGame_Selection>.Create(typeof(LoadGame_Selection), "selectedLoadGame"));
		private static readonly System.Lazy<StaticFieldAccessor<LoadGameBox>> _loadGameBox =
				new System.Lazy<StaticFieldAccessor<LoadGameBox>>(() => StaticFieldAccessor<LoadGameBox>.Create(typeof(LoadGame_Selection), "loadGameBox"));

		public static LoadGame_Selection GetSelectedLoadGame() => _selectedLoadGame.Value.GetValue();
		public static void SetSelectedLoadGame(LoadGame_Selection value) => _selectedLoadGame.Value.SetValue(value);
		public static LoadGameBox GetLoadGameBox() => _loadGameBox.Value.GetValue();
		public static void SetLoadGameBox(LoadGameBox value) => _loadGameBox.Value.SetValue(value);

	}

	public static class PrivateAccessor_MainMenu_PaintBlock
	{

		private static readonly System.Lazy<FieldAccessor<MainMenu_PaintBlock, SO_ColorValue>> _colorA =
				new System.Lazy<FieldAccessor<MainMenu_PaintBlock, SO_ColorValue>>(() => FieldAccessor<MainMenu_PaintBlock, SO_ColorValue>.Create("colorA"));
		private static readonly System.Lazy<FieldAccessor<MainMenu_PaintBlock, SO_ColorValue>> _colorB =
				new System.Lazy<FieldAccessor<MainMenu_PaintBlock, SO_ColorValue>>(() => FieldAccessor<MainMenu_PaintBlock, SO_ColorValue>.Create("colorB"));
		private static readonly System.Lazy<FieldAccessor<MainMenu_PaintBlock, SO_ColorValue>> _patternColorA =
				new System.Lazy<FieldAccessor<MainMenu_PaintBlock, SO_ColorValue>>(() => FieldAccessor<MainMenu_PaintBlock, SO_ColorValue>.Create("patternColorA"));
		private static readonly System.Lazy<FieldAccessor<MainMenu_PaintBlock, SO_ColorValue>> _patternColorB =
				new System.Lazy<FieldAccessor<MainMenu_PaintBlock, SO_ColorValue>>(() => FieldAccessor<MainMenu_PaintBlock, SO_ColorValue>.Create("patternColorB"));
		private static readonly System.Lazy<FieldAccessor<MainMenu_PaintBlock, SO_Pattern>> _pattern1 =
				new System.Lazy<FieldAccessor<MainMenu_PaintBlock, SO_Pattern>>(() => FieldAccessor<MainMenu_PaintBlock, SO_Pattern>.Create("pattern1"));
		private static readonly System.Lazy<FieldAccessor<MainMenu_PaintBlock, SO_Pattern>> _pattern2 =
				new System.Lazy<FieldAccessor<MainMenu_PaintBlock, SO_Pattern>>(() => FieldAccessor<MainMenu_PaintBlock, SO_Pattern>.Create("pattern2"));

		public static SO_ColorValue GetColorA(this MainMenu_PaintBlock __self) => _colorA.Value.GetValue(__self);
		public static void SetColorA(this MainMenu_PaintBlock __self, SO_ColorValue value) => _colorA.Value.SetValue(__self, value);
		public static SO_ColorValue GetColorB(this MainMenu_PaintBlock __self) => _colorB.Value.GetValue(__self);
		public static void SetColorB(this MainMenu_PaintBlock __self, SO_ColorValue value) => _colorB.Value.SetValue(__self, value);
		public static SO_ColorValue GetPatternColorA(this MainMenu_PaintBlock __self) => _patternColorA.Value.GetValue(__self);
		public static void SetPatternColorA(this MainMenu_PaintBlock __self, SO_ColorValue value) => _patternColorA.Value.SetValue(__self, value);
		public static SO_ColorValue GetPatternColorB(this MainMenu_PaintBlock __self) => _patternColorB.Value.GetValue(__self);
		public static void SetPatternColorB(this MainMenu_PaintBlock __self, SO_ColorValue value) => _patternColorB.Value.SetValue(__self, value);
		public static SO_Pattern GetPattern1(this MainMenu_PaintBlock __self) => _pattern1.Value.GetValue(__self);
		public static void SetPattern1(this MainMenu_PaintBlock __self, SO_Pattern value) => _pattern1.Value.SetValue(__self, value);
		public static SO_Pattern GetPattern2(this MainMenu_PaintBlock __self) => _pattern2.Value.GetValue(__self);
		public static void SetPattern2(this MainMenu_PaintBlock __self, SO_Pattern value) => _pattern2.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<MainMenu_PaintBlock>> _Start757602046 =
				new System.Lazy<MethodAccessor<MainMenu_PaintBlock>>(() => MethodAccessor<MainMenu_PaintBlock>.Create("Start"));

		public static void Start(this MainMenu_PaintBlock __self) => _Start757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_NewGameBox
	{

		private static readonly System.Lazy<FieldAccessor<NewGameBox, UnityEngine.UI.InputField>> _inputfield_GameName =
				new System.Lazy<FieldAccessor<NewGameBox, UnityEngine.UI.InputField>>(() => FieldAccessor<NewGameBox, UnityEngine.UI.InputField>.Create("inputfield_GameName"));
		private static readonly System.Lazy<FieldAccessor<NewGameBox, UnityEngine.UI.Dropdown>> _authSettingDropdown =
				new System.Lazy<FieldAccessor<NewGameBox, UnityEngine.UI.Dropdown>>(() => FieldAccessor<NewGameBox, UnityEngine.UI.Dropdown>.Create("authSettingDropdown"));
		private static readonly System.Lazy<FieldAccessor<NewGameBox, UnityEngine.UI.Toggle>> _toggle_FriendlyFire =
				new System.Lazy<FieldAccessor<NewGameBox, UnityEngine.UI.Toggle>>(() => FieldAccessor<NewGameBox, UnityEngine.UI.Toggle>.Create("toggle_FriendlyFire"));
		private static readonly System.Lazy<FieldAccessor<NewGameBox, UnityEngine.UI.Button>> _createGameButton =
				new System.Lazy<FieldAccessor<NewGameBox, UnityEngine.UI.Button>>(() => FieldAccessor<NewGameBox, UnityEngine.UI.Button>.Create("createGameButton"));
		private static readonly System.Lazy<FieldAccessor<NewGameBox, UnityEngine.UI.Text>> _text_nameFeedback =
				new System.Lazy<FieldAccessor<NewGameBox, UnityEngine.UI.Text>>(() => FieldAccessor<NewGameBox, UnityEngine.UI.Text>.Create("text_nameFeedback"));
		private static readonly System.Lazy<FieldAccessor<NewGameBox, UnityEngine.UI.InputField>> _inputfield_Password =
				new System.Lazy<FieldAccessor<NewGameBox, UnityEngine.UI.InputField>>(() => FieldAccessor<NewGameBox, UnityEngine.UI.InputField>.Create("inputfield_Password"));
		private static readonly System.Lazy<FieldAccessor<NewGameBox, TabGroup>> _tabGroup =
				new System.Lazy<FieldAccessor<NewGameBox, TabGroup>>(() => FieldAccessor<NewGameBox, TabGroup>.Create("tabGroup"));
		private static readonly System.Lazy<FieldAccessor<NewGameBox, Raft_Network>> _network =
				new System.Lazy<FieldAccessor<NewGameBox, Raft_Network>>(() => FieldAccessor<NewGameBox, Raft_Network>.Create("network"));

		public static UnityEngine.UI.InputField GetInputfield_GameName(this NewGameBox __self) => _inputfield_GameName.Value.GetValue(__self);
		public static void SetInputfield_GameName(this NewGameBox __self, UnityEngine.UI.InputField value) => _inputfield_GameName.Value.SetValue(__self, value);
		public static UnityEngine.UI.Dropdown GetAuthSettingDropdown(this NewGameBox __self) => _authSettingDropdown.Value.GetValue(__self);
		public static void SetAuthSettingDropdown(this NewGameBox __self, UnityEngine.UI.Dropdown value) => _authSettingDropdown.Value.SetValue(__self, value);
		public static UnityEngine.UI.Toggle GetToggle_FriendlyFire(this NewGameBox __self) => _toggle_FriendlyFire.Value.GetValue(__self);
		public static void SetToggle_FriendlyFire(this NewGameBox __self, UnityEngine.UI.Toggle value) => _toggle_FriendlyFire.Value.SetValue(__self, value);
		public static UnityEngine.UI.Button GetCreateGameButton(this NewGameBox __self) => _createGameButton.Value.GetValue(__self);
		public static void SetCreateGameButton(this NewGameBox __self, UnityEngine.UI.Button value) => _createGameButton.Value.SetValue(__self, value);
		public static UnityEngine.UI.Text GetText_nameFeedback(this NewGameBox __self) => _text_nameFeedback.Value.GetValue(__self);
		public static void SetText_nameFeedback(this NewGameBox __self, UnityEngine.UI.Text value) => _text_nameFeedback.Value.SetValue(__self, value);
		public static UnityEngine.UI.InputField GetInputfield_Password(this NewGameBox __self) => _inputfield_Password.Value.GetValue(__self);
		public static void SetInputfield_Password(this NewGameBox __self, UnityEngine.UI.InputField value) => _inputfield_Password.Value.SetValue(__self, value);
		public static TabGroup GetTabGroup(this NewGameBox __self) => _tabGroup.Value.GetValue(__self);
		public static void SetTabGroup(this NewGameBox __self, TabGroup value) => _tabGroup.Value.SetValue(__self, value);
		public static Raft_Network GetNetwork(this NewGameBox __self) => _network.Value.GetValue(__self);
		public static void SetNetwork(this NewGameBox __self, Raft_Network value) => _network.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<NewGameBox>> _Start757602046 =
				new System.Lazy<MethodAccessor<NewGameBox>>(() => MethodAccessor<NewGameBox>.Create("Start"));

		public static void Start(this NewGameBox __self) => _Start757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_OfflineModePopup
	{

		private static readonly System.Lazy<MethodAccessor<OfflineModePopup>> _Start757602046 =
				new System.Lazy<MethodAccessor<OfflineModePopup>>(() => MethodAccessor<OfflineModePopup>.Create("Start"));

		public static void Start(this OfflineModePopup __self) => _Start757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_OptionsMenuBox
	{

		private static readonly System.Lazy<FieldAccessor<OptionsMenuBox, Settings>> _settings =
				new System.Lazy<FieldAccessor<OptionsMenuBox, Settings>>(() => FieldAccessor<OptionsMenuBox, Settings>.Create("settings"));

		public static Settings GetSettings(this OptionsMenuBox __self) => _settings.Value.GetValue(__self);
		public static void SetSettings(this OptionsMenuBox __self, Settings value) => _settings.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_RandomizeMainMenuRaft
	{

		private static readonly System.Lazy<FieldAccessor<RandomizeMainMenuRaft, bool>> _forceASpecificRaft =
				new System.Lazy<FieldAccessor<RandomizeMainMenuRaft, bool>>(() => FieldAccessor<RandomizeMainMenuRaft, bool>.Create("forceASpecificRaft"));
		private static readonly System.Lazy<FieldAccessor<RandomizeMainMenuRaft, string>> _specificRaftCreator =
				new System.Lazy<FieldAccessor<RandomizeMainMenuRaft, string>>(() => FieldAccessor<RandomizeMainMenuRaft, string>.Create("specificRaftCreator"));
		private static readonly System.Lazy<FieldAccessor<RandomizeMainMenuRaft, UnityEngine.UI.Text>> _builtByText =
				new System.Lazy<FieldAccessor<RandomizeMainMenuRaft, UnityEngine.UI.Text>>(() => FieldAccessor<RandomizeMainMenuRaft, UnityEngine.UI.Text>.Create("builtByText"));
		private static readonly System.Lazy<FieldAccessor<RandomizeMainMenuRaft, RaftBounds>> _bounds =
				new System.Lazy<FieldAccessor<RandomizeMainMenuRaft, RaftBounds>>(() => FieldAccessor<RandomizeMainMenuRaft, RaftBounds>.Create("bounds"));
		private static readonly System.Lazy<FieldAccessor<RandomizeMainMenuRaft, UnityEngine.Transform>> _chair =
				new System.Lazy<FieldAccessor<RandomizeMainMenuRaft, UnityEngine.Transform>>(() => FieldAccessor<RandomizeMainMenuRaft, UnityEngine.Transform>.Create("chair"));
		private static readonly System.Lazy<FieldAccessor<RandomizeMainMenuRaft, MainMenuRaft>> _originalRaft =
				new System.Lazy<FieldAccessor<RandomizeMainMenuRaft, MainMenuRaft>>(() => FieldAccessor<RandomizeMainMenuRaft, MainMenuRaft>.Create("originalRaft"));
		private static readonly System.Lazy<FieldAccessor<RandomizeMainMenuRaft, MainMenuRaft[]>> _additionalRafts =
				new System.Lazy<FieldAccessor<RandomizeMainMenuRaft, MainMenuRaft[]>>(() => FieldAccessor<RandomizeMainMenuRaft, MainMenuRaft[]>.Create("additionalRafts"));

		public static bool GetForceASpecificRaft(this RandomizeMainMenuRaft __self) => _forceASpecificRaft.Value.GetValue(__self);
		public static void SetForceASpecificRaft(this RandomizeMainMenuRaft __self, bool value) => _forceASpecificRaft.Value.SetValue(__self, value);
		public static string GetSpecificRaftCreator(this RandomizeMainMenuRaft __self) => _specificRaftCreator.Value.GetValue(__self);
		public static void SetSpecificRaftCreator(this RandomizeMainMenuRaft __self, string value) => _specificRaftCreator.Value.SetValue(__self, value);
		public static UnityEngine.UI.Text GetBuiltByText(this RandomizeMainMenuRaft __self) => _builtByText.Value.GetValue(__self);
		public static void SetBuiltByText(this RandomizeMainMenuRaft __self, UnityEngine.UI.Text value) => _builtByText.Value.SetValue(__self, value);
		public static RaftBounds GetBounds(this RandomizeMainMenuRaft __self) => _bounds.Value.GetValue(__self);
		public static void SetBounds(this RandomizeMainMenuRaft __self, RaftBounds value) => _bounds.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetChair(this RandomizeMainMenuRaft __self) => _chair.Value.GetValue(__self);
		public static void SetChair(this RandomizeMainMenuRaft __self, UnityEngine.Transform value) => _chair.Value.SetValue(__self, value);
		public static MainMenuRaft GetOriginalRaft(this RandomizeMainMenuRaft __self) => _originalRaft.Value.GetValue(__self);
		public static void SetOriginalRaft(this RandomizeMainMenuRaft __self, MainMenuRaft value) => _originalRaft.Value.SetValue(__self, value);
		public static MainMenuRaft[] GetAdditionalRafts(this RandomizeMainMenuRaft __self) => _additionalRafts.Value.GetValue(__self);
		public static void SetAdditionalRafts(this RandomizeMainMenuRaft __self, MainMenuRaft[] value) => _additionalRafts.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<RandomizeMainMenuRaft>> _Start757602046 =
				new System.Lazy<MethodAccessor<RandomizeMainMenuRaft>>(() => MethodAccessor<RandomizeMainMenuRaft>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<RandomizeMainMenuRaft>> _GetMainMenuRaftFromCreatorName3454057852 =
				new System.Lazy<MethodAccessor<RandomizeMainMenuRaft>>(() => MethodAccessor<RandomizeMainMenuRaft>.Create("GetMainMenuRaftFromCreatorName", typeof(string)));
		private static readonly System.Lazy<MethodAccessor<RandomizeMainMenuRaft>> _RandomizeMenuRaft757602046 =
				new System.Lazy<MethodAccessor<RandomizeMainMenuRaft>>(() => MethodAccessor<RandomizeMainMenuRaft>.Create("RandomizeMenuRaft"));
		private static readonly System.Lazy<MethodAccessor<RandomizeMainMenuRaft>> _ApplyMenuRaft3425115414 =
				new System.Lazy<MethodAccessor<RandomizeMainMenuRaft>>(() => MethodAccessor<RandomizeMainMenuRaft>.Create("ApplyMenuRaft", typeof(MainMenuRaft)));
		private static readonly System.Lazy<MethodAccessor<RandomizeMainMenuRaft>> _UpdateBounds3425115414 =
				new System.Lazy<MethodAccessor<RandomizeMainMenuRaft>>(() => MethodAccessor<RandomizeMainMenuRaft>.Create("UpdateBounds", typeof(MainMenuRaft)));
		private static readonly System.Lazy<MethodAccessor<RandomizeMainMenuRaft>> _TurnOfAllRafts757602046 =
				new System.Lazy<MethodAccessor<RandomizeMainMenuRaft>>(() => MethodAccessor<RandomizeMainMenuRaft>.Create("TurnOfAllRafts"));

		public static void Start(this RandomizeMainMenuRaft __self) => _Start757602046.Value.Invoke(__self);
		public static MainMenuRaft GetMainMenuRaftFromCreatorName(this RandomizeMainMenuRaft __self, string creatorName) => (MainMenuRaft)_GetMainMenuRaftFromCreatorName3454057852.Value.Invoke(__self, creatorName);
		public static void RandomizeMenuRaft(this RandomizeMainMenuRaft __self) => _RandomizeMenuRaft757602046.Value.Invoke(__self);
		public static bool ApplyMenuRaft(this RandomizeMainMenuRaft __self, MainMenuRaft raft) => (bool)_ApplyMenuRaft3425115414.Value.Invoke(__self, raft);
		public static void UpdateBounds(this RandomizeMainMenuRaft __self, MainMenuRaft raft) => _UpdateBounds3425115414.Value.Invoke(__self, raft);
		public static void TurnOfAllRafts(this RandomizeMainMenuRaft __self) => _TurnOfAllRafts757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_StartMenuScreen
	{

		private static readonly System.Lazy<FieldAccessor<StartMenuScreen, CharacterBox>> _characterBox =
				new System.Lazy<FieldAccessor<StartMenuScreen, CharacterBox>>(() => FieldAccessor<StartMenuScreen, CharacterBox>.Create("characterBox"));
		private static readonly System.Lazy<FieldAccessor<StartMenuScreen, UnityEngine.UI.Text>> _versionText =
				new System.Lazy<FieldAccessor<StartMenuScreen, UnityEngine.UI.Text>>(() => FieldAccessor<StartMenuScreen, UnityEngine.UI.Text>.Create("versionText"));
		private static readonly System.Lazy<FieldAccessor<StartMenuScreen, UnityEngine.Transform>> _rotationTransform =
				new System.Lazy<FieldAccessor<StartMenuScreen, UnityEngine.Transform>>(() => FieldAccessor<StartMenuScreen, UnityEngine.Transform>.Create("rotationTransform"));
		private static readonly System.Lazy<FieldAccessor<StartMenuScreen, MenuBox[]>> _menuBoxes =
				new System.Lazy<FieldAccessor<StartMenuScreen, MenuBox[]>>(() => FieldAccessor<StartMenuScreen, MenuBox[]>.Create("menuBoxes"));
		private static readonly System.Lazy<FieldAccessor<StartMenuScreen, Settings>> _settings =
				new System.Lazy<FieldAccessor<StartMenuScreen, Settings>>(() => FieldAccessor<StartMenuScreen, Settings>.Create("settings"));
		private static readonly System.Lazy<FieldAccessor<StartMenuScreen, UnityEngine.UI.GraphicRaycaster>> _graphicRaycaster =
				new System.Lazy<FieldAccessor<StartMenuScreen, UnityEngine.UI.GraphicRaycaster>>(() => FieldAccessor<StartMenuScreen, UnityEngine.UI.GraphicRaycaster>.Create("graphicRaycaster"));

		public static CharacterBox GetCharacterBox(this StartMenuScreen __self) => _characterBox.Value.GetValue(__self);
		public static void SetCharacterBox(this StartMenuScreen __self, CharacterBox value) => _characterBox.Value.SetValue(__self, value);
		public static UnityEngine.UI.Text GetVersionText(this StartMenuScreen __self) => _versionText.Value.GetValue(__self);
		public static void SetVersionText(this StartMenuScreen __self, UnityEngine.UI.Text value) => _versionText.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetRotationTransform(this StartMenuScreen __self) => _rotationTransform.Value.GetValue(__self);
		public static void SetRotationTransform(this StartMenuScreen __self, UnityEngine.Transform value) => _rotationTransform.Value.SetValue(__self, value);
		public static MenuBox[] GetMenuBoxes(this StartMenuScreen __self) => _menuBoxes.Value.GetValue(__self);
		public static void SetMenuBoxes(this StartMenuScreen __self, MenuBox[] value) => _menuBoxes.Value.SetValue(__self, value);
		public static Settings GetSettings(this StartMenuScreen __self) => _settings.Value.GetValue(__self);
		public static void SetSettings(this StartMenuScreen __self, Settings value) => _settings.Value.SetValue(__self, value);
		public static UnityEngine.UI.GraphicRaycaster GetGraphicRaycaster(this StartMenuScreen __self) => _graphicRaycaster.Value.GetValue(__self);
		public static void SetGraphicRaycaster(this StartMenuScreen __self, UnityEngine.UI.GraphicRaycaster value) => _graphicRaycaster.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<StartMenuScreen>> _Start757602046 =
				new System.Lazy<MethodAccessor<StartMenuScreen>>(() => MethodAccessor<StartMenuScreen>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<StartMenuScreen>> _LateStart757602046 =
				new System.Lazy<MethodAccessor<StartMenuScreen>>(() => MethodAccessor<StartMenuScreen>.Create("LateStart"));
		private static readonly System.Lazy<MethodAccessor<StartMenuScreen>> _Update757602046 =
				new System.Lazy<MethodAccessor<StartMenuScreen>>(() => MethodAccessor<StartMenuScreen>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<StartMenuScreen>> _HideAllBoxes757602046 =
				new System.Lazy<MethodAccessor<StartMenuScreen>>(() => MethodAccessor<StartMenuScreen>.Create("HideAllBoxes"));

		public static void Start(this StartMenuScreen __self) => _Start757602046.Value.Invoke(__self);
		public static void LateStart(this StartMenuScreen __self) => _LateStart757602046.Value.Invoke(__self);
		public static void Update(this StartMenuScreen __self) => _Update757602046.Value.Invoke(__self);
		public static void HideAllBoxes(this StartMenuScreen __self) => _HideAllBoxes757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_NotificationManager
	{

		private static readonly System.Lazy<FieldAccessor<NotificationManager, System.Collections.Generic.List<Notification>>> _notifications =
				new System.Lazy<FieldAccessor<NotificationManager, System.Collections.Generic.List<Notification>>>(() => FieldAccessor<NotificationManager, System.Collections.Generic.List<Notification>>.Create("notifications"));
		private static readonly System.Lazy<FieldAccessor<NotificationManager, System.Collections.Generic.Queue<Notification>>> _notificationQue =
				new System.Lazy<FieldAccessor<NotificationManager, System.Collections.Generic.Queue<Notification>>>(() => FieldAccessor<NotificationManager, System.Collections.Generic.Queue<Notification>>.Create("notificationQue"));
		private static readonly System.Lazy<FieldAccessor<NotificationManager, Notification>> _currentNotification =
				new System.Lazy<FieldAccessor<NotificationManager, Notification>>(() => FieldAccessor<NotificationManager, Notification>.Create("currentNotification"));

		public static System.Collections.Generic.List<Notification> GetNotifications(this NotificationManager __self) => _notifications.Value.GetValue(__self);
		public static void SetNotifications(this NotificationManager __self, System.Collections.Generic.List<Notification> value) => _notifications.Value.SetValue(__self, value);
		public static System.Collections.Generic.Queue<Notification> GetNotificationQue(this NotificationManager __self) => _notificationQue.Value.GetValue(__self);
		public static void SetNotificationQue(this NotificationManager __self, System.Collections.Generic.Queue<Notification> value) => _notificationQue.Value.SetValue(__self, value);
		public static Notification GetCurrentNotification(this NotificationManager __self) => _currentNotification.Value.GetValue(__self);
		public static void SetCurrentNotification(this NotificationManager __self, Notification value) => _currentNotification.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<NotificationManager>> _Awake757602046 =
				new System.Lazy<MethodAccessor<NotificationManager>>(() => MethodAccessor<NotificationManager>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<NotificationManager>> _Update757602046 =
				new System.Lazy<MethodAccessor<NotificationManager>>(() => MethodAccessor<NotificationManager>.Create("Update"));

		public static void Awake(this NotificationManager __self) => _Awake757602046.Value.Invoke(__self);
		public static void Update(this NotificationManager __self) => _Update757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Notification_Animated
	{

		private static readonly System.Lazy<FieldAccessor<Notification_Animated, UnityEngine.Animator>> _animator =
				new System.Lazy<FieldAccessor<Notification_Animated, UnityEngine.Animator>>(() => FieldAccessor<Notification_Animated, UnityEngine.Animator>.Create("animator"));
		private static readonly System.Lazy<FieldAccessor<Notification_Animated, float>> _timeOnScreen =
				new System.Lazy<FieldAccessor<Notification_Animated, float>>(() => FieldAccessor<Notification_Animated, float>.Create("timeOnScreen"));

		public static UnityEngine.Animator GetAnimator(this Notification_Animated __self) => _animator.Value.GetValue(__self);
		public static void SetAnimator(this Notification_Animated __self, UnityEngine.Animator value) => _animator.Value.SetValue(__self, value);
		public static float GetTimeOnScreen(this Notification_Animated __self) => _timeOnScreen.Value.GetValue(__self);
		public static void SetTimeOnScreen(this Notification_Animated __self, float value) => _timeOnScreen.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_Notification_CharacterUnlock
	{

		private static readonly System.Lazy<FieldAccessor<Notification_CharacterUnlock, UnityEngine.UI.Text>> _text_characterName =
				new System.Lazy<FieldAccessor<Notification_CharacterUnlock, UnityEngine.UI.Text>>(() => FieldAccessor<Notification_CharacterUnlock, UnityEngine.UI.Text>.Create("text_characterName"));
		private static readonly System.Lazy<FieldAccessor<Notification_CharacterUnlock, UnityEngine.UI.Image>> _image_characterImage =
				new System.Lazy<FieldAccessor<Notification_CharacterUnlock, UnityEngine.UI.Image>>(() => FieldAccessor<Notification_CharacterUnlock, UnityEngine.UI.Image>.Create("image_characterImage"));

		public static UnityEngine.UI.Text GetText_characterName(this Notification_CharacterUnlock __self) => _text_characterName.Value.GetValue(__self);
		public static void SetText_characterName(this Notification_CharacterUnlock __self, UnityEngine.UI.Text value) => _text_characterName.Value.SetValue(__self, value);
		public static UnityEngine.UI.Image GetImage_characterImage(this Notification_CharacterUnlock __self) => _image_characterImage.Value.GetValue(__self);
		public static void SetImage_characterImage(this Notification_CharacterUnlock __self, UnityEngine.UI.Image value) => _image_characterImage.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_Notification_QuestItem
	{

		private static readonly System.Lazy<FieldAccessor<Notification_QuestItem, UnityEngine.UI.Text>> _text_itemName =
				new System.Lazy<FieldAccessor<Notification_QuestItem, UnityEngine.UI.Text>>(() => FieldAccessor<Notification_QuestItem, UnityEngine.UI.Text>.Create("text_itemName"));
		private static readonly System.Lazy<FieldAccessor<Notification_QuestItem, UnityEngine.UI.Image>> _image_itemImage =
				new System.Lazy<FieldAccessor<Notification_QuestItem, UnityEngine.UI.Image>>(() => FieldAccessor<Notification_QuestItem, UnityEngine.UI.Image>.Create("image_itemImage"));

		public static UnityEngine.UI.Text GetText_itemName(this Notification_QuestItem __self) => _text_itemName.Value.GetValue(__self);
		public static void SetText_itemName(this Notification_QuestItem __self, UnityEngine.UI.Text value) => _text_itemName.Value.SetValue(__self, value);
		public static UnityEngine.UI.Image GetImage_itemImage(this Notification_QuestItem __self) => _image_itemImage.Value.GetValue(__self);
		public static void SetImage_itemImage(this Notification_QuestItem __self, UnityEngine.UI.Image value) => _image_itemImage.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_Notification_Research
	{

		private static readonly System.Lazy<FieldAccessor<Notification_Research, UnityEngine.UI.Text>> _text_learnedItem =
				new System.Lazy<FieldAccessor<Notification_Research, UnityEngine.UI.Text>>(() => FieldAccessor<Notification_Research, UnityEngine.UI.Text>.Create("text_learnedItem"));
		private static readonly System.Lazy<FieldAccessor<Notification_Research, UnityEngine.UI.Text>> _text_researchedBy =
				new System.Lazy<FieldAccessor<Notification_Research, UnityEngine.UI.Text>>(() => FieldAccessor<Notification_Research, UnityEngine.UI.Text>.Create("text_researchedBy"));
		private static readonly System.Lazy<FieldAccessor<Notification_Research, UnityEngine.UI.Image>> _image_item =
				new System.Lazy<FieldAccessor<Notification_Research, UnityEngine.UI.Image>>(() => FieldAccessor<Notification_Research, UnityEngine.UI.Image>.Create("image_item"));

		public static UnityEngine.UI.Text GetText_learnedItem(this Notification_Research __self) => _text_learnedItem.Value.GetValue(__self);
		public static void SetText_learnedItem(this Notification_Research __self, UnityEngine.UI.Text value) => _text_learnedItem.Value.SetValue(__self, value);
		public static UnityEngine.UI.Text GetText_researchedBy(this Notification_Research __self) => _text_researchedBy.Value.GetValue(__self);
		public static void SetText_researchedBy(this Notification_Research __self, UnityEngine.UI.Text value) => _text_researchedBy.Value.SetValue(__self, value);
		public static UnityEngine.UI.Image GetImage_item(this Notification_Research __self) => _image_item.Value.GetValue(__self);
		public static void SetImage_item(this Notification_Research __self, UnityEngine.UI.Image value) => _image_item.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_Notification_ResearchBlueprint
	{

		private static readonly System.Lazy<FieldAccessor<Notification_ResearchBlueprint, UnityEngine.UI.Text>> _text_itemName =
				new System.Lazy<FieldAccessor<Notification_ResearchBlueprint, UnityEngine.UI.Text>>(() => FieldAccessor<Notification_ResearchBlueprint, UnityEngine.UI.Text>.Create("text_itemName"));
		private static readonly System.Lazy<FieldAccessor<Notification_ResearchBlueprint, UnityEngine.UI.Image>> _image_itemImage =
				new System.Lazy<FieldAccessor<Notification_ResearchBlueprint, UnityEngine.UI.Image>>(() => FieldAccessor<Notification_ResearchBlueprint, UnityEngine.UI.Image>.Create("image_itemImage"));

		public static UnityEngine.UI.Text GetText_itemName(this Notification_ResearchBlueprint __self) => _text_itemName.Value.GetValue(__self);
		public static void SetText_itemName(this Notification_ResearchBlueprint __self, UnityEngine.UI.Text value) => _text_itemName.Value.SetValue(__self, value);
		public static UnityEngine.UI.Image GetImage_itemImage(this Notification_ResearchBlueprint __self) => _image_itemImage.Value.GetValue(__self);
		public static void SetImage_itemImage(this Notification_ResearchBlueprint __self, UnityEngine.UI.Image value) => _image_itemImage.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_AudioSettingsBox
	{

		private static readonly System.Lazy<FieldAccessor<AudioSettingsBox, UISlider>> _masterVolumeSlider =
				new System.Lazy<FieldAccessor<AudioSettingsBox, UISlider>>(() => FieldAccessor<AudioSettingsBox, UISlider>.Create("masterVolumeSlider"));
		private static readonly System.Lazy<FieldAccessor<AudioSettingsBox, UISlider>> _musicVolumeSlider =
				new System.Lazy<FieldAccessor<AudioSettingsBox, UISlider>>(() => FieldAccessor<AudioSettingsBox, UISlider>.Create("musicVolumeSlider"));
		private static readonly System.Lazy<FieldAccessor<AudioSettingsBox, UISlider>> _ambienceVolumeSlider =
				new System.Lazy<FieldAccessor<AudioSettingsBox, UISlider>>(() => FieldAccessor<AudioSettingsBox, UISlider>.Create("ambienceVolumeSlider"));
		private static readonly System.Lazy<FieldAccessor<AudioSettingsBox, UISlider>> _sfxVolumeSlider =
				new System.Lazy<FieldAccessor<AudioSettingsBox, UISlider>>(() => FieldAccessor<AudioSettingsBox, UISlider>.Create("sfxVolumeSlider"));
		private static readonly System.Lazy<FieldAccessor<AudioSettingsBox, UISlider>> _uiVolumeSlider =
				new System.Lazy<FieldAccessor<AudioSettingsBox, UISlider>>(() => FieldAccessor<AudioSettingsBox, UISlider>.Create("uiVolumeSlider"));
		private static readonly System.Lazy<FieldAccessor<AudioSettingsBox, UISlider>> _notebookVolumeSlider =
				new System.Lazy<FieldAccessor<AudioSettingsBox, UISlider>>(() => FieldAccessor<AudioSettingsBox, UISlider>.Create("notebookVolumeSlider"));
		private static readonly System.Lazy<FieldAccessor<AudioSettingsBox, UnityEngine.UI.Dropdown>> _musicRateDropdown =
				new System.Lazy<FieldAccessor<AudioSettingsBox, UnityEngine.UI.Dropdown>>(() => FieldAccessor<AudioSettingsBox, UnityEngine.UI.Dropdown>.Create("musicRateDropdown"));
		private static readonly System.Lazy<FieldAccessor<AudioSettingsBox, FMOD.Studio.VCA>> _VCA_Master =
				new System.Lazy<FieldAccessor<AudioSettingsBox, FMOD.Studio.VCA>>(() => FieldAccessor<AudioSettingsBox, FMOD.Studio.VCA>.Create("VCA_Master"));
		private static readonly System.Lazy<FieldAccessor<AudioSettingsBox, FMOD.Studio.VCA>> _VCA_Music =
				new System.Lazy<FieldAccessor<AudioSettingsBox, FMOD.Studio.VCA>>(() => FieldAccessor<AudioSettingsBox, FMOD.Studio.VCA>.Create("VCA_Music"));
		private static readonly System.Lazy<FieldAccessor<AudioSettingsBox, FMOD.Studio.VCA>> _VCA_Ambience =
				new System.Lazy<FieldAccessor<AudioSettingsBox, FMOD.Studio.VCA>>(() => FieldAccessor<AudioSettingsBox, FMOD.Studio.VCA>.Create("VCA_Ambience"));
		private static readonly System.Lazy<FieldAccessor<AudioSettingsBox, FMOD.Studio.VCA>> _VCA_SFX =
				new System.Lazy<FieldAccessor<AudioSettingsBox, FMOD.Studio.VCA>>(() => FieldAccessor<AudioSettingsBox, FMOD.Studio.VCA>.Create("VCA_SFX"));
		private static readonly System.Lazy<FieldAccessor<AudioSettingsBox, FMOD.Studio.VCA>> _VCA_UI =
				new System.Lazy<FieldAccessor<AudioSettingsBox, FMOD.Studio.VCA>>(() => FieldAccessor<AudioSettingsBox, FMOD.Studio.VCA>.Create("VCA_UI"));
		private static readonly System.Lazy<FieldAccessor<AudioSettingsBox, FMOD.Studio.VCA>> _VCA_Notebook =
				new System.Lazy<FieldAccessor<AudioSettingsBox, FMOD.Studio.VCA>>(() => FieldAccessor<AudioSettingsBox, FMOD.Studio.VCA>.Create("VCA_Notebook"));
		private static readonly System.Lazy<FieldAccessor<AudioSettingsBox, bool>> _firstTime =
				new System.Lazy<FieldAccessor<AudioSettingsBox, bool>>(() => FieldAccessor<AudioSettingsBox, bool>.Create("firstTime"));

		public static UISlider GetMasterVolumeSlider(this AudioSettingsBox __self) => _masterVolumeSlider.Value.GetValue(__self);
		public static void SetMasterVolumeSlider(this AudioSettingsBox __self, UISlider value) => _masterVolumeSlider.Value.SetValue(__self, value);
		public static UISlider GetMusicVolumeSlider(this AudioSettingsBox __self) => _musicVolumeSlider.Value.GetValue(__self);
		public static void SetMusicVolumeSlider(this AudioSettingsBox __self, UISlider value) => _musicVolumeSlider.Value.SetValue(__self, value);
		public static UISlider GetAmbienceVolumeSlider(this AudioSettingsBox __self) => _ambienceVolumeSlider.Value.GetValue(__self);
		public static void SetAmbienceVolumeSlider(this AudioSettingsBox __self, UISlider value) => _ambienceVolumeSlider.Value.SetValue(__self, value);
		public static UISlider GetSfxVolumeSlider(this AudioSettingsBox __self) => _sfxVolumeSlider.Value.GetValue(__self);
		public static void SetSfxVolumeSlider(this AudioSettingsBox __self, UISlider value) => _sfxVolumeSlider.Value.SetValue(__self, value);
		public static UISlider GetUiVolumeSlider(this AudioSettingsBox __self) => _uiVolumeSlider.Value.GetValue(__self);
		public static void SetUiVolumeSlider(this AudioSettingsBox __self, UISlider value) => _uiVolumeSlider.Value.SetValue(__self, value);
		public static UISlider GetNotebookVolumeSlider(this AudioSettingsBox __self) => _notebookVolumeSlider.Value.GetValue(__self);
		public static void SetNotebookVolumeSlider(this AudioSettingsBox __self, UISlider value) => _notebookVolumeSlider.Value.SetValue(__self, value);
		public static UnityEngine.UI.Dropdown GetMusicRateDropdown(this AudioSettingsBox __self) => _musicRateDropdown.Value.GetValue(__self);
		public static void SetMusicRateDropdown(this AudioSettingsBox __self, UnityEngine.UI.Dropdown value) => _musicRateDropdown.Value.SetValue(__self, value);
		public static FMOD.Studio.VCA GetVCA_Master(this AudioSettingsBox __self) => _VCA_Master.Value.GetValue(__self);
		public static void SetVCA_Master(this AudioSettingsBox __self, FMOD.Studio.VCA value) => _VCA_Master.Value.SetValue(__self, value);
		public static FMOD.Studio.VCA GetVCA_Music(this AudioSettingsBox __self) => _VCA_Music.Value.GetValue(__self);
		public static void SetVCA_Music(this AudioSettingsBox __self, FMOD.Studio.VCA value) => _VCA_Music.Value.SetValue(__self, value);
		public static FMOD.Studio.VCA GetVCA_Ambience(this AudioSettingsBox __self) => _VCA_Ambience.Value.GetValue(__self);
		public static void SetVCA_Ambience(this AudioSettingsBox __self, FMOD.Studio.VCA value) => _VCA_Ambience.Value.SetValue(__self, value);
		public static FMOD.Studio.VCA GetVCA_SFX(this AudioSettingsBox __self) => _VCA_SFX.Value.GetValue(__self);
		public static void SetVCA_SFX(this AudioSettingsBox __self, FMOD.Studio.VCA value) => _VCA_SFX.Value.SetValue(__self, value);
		public static FMOD.Studio.VCA GetVCA_UI(this AudioSettingsBox __self) => _VCA_UI.Value.GetValue(__self);
		public static void SetVCA_UI(this AudioSettingsBox __self, FMOD.Studio.VCA value) => _VCA_UI.Value.SetValue(__self, value);
		public static FMOD.Studio.VCA GetVCA_Notebook(this AudioSettingsBox __self) => _VCA_Notebook.Value.GetValue(__self);
		public static void SetVCA_Notebook(this AudioSettingsBox __self, FMOD.Studio.VCA value) => _VCA_Notebook.Value.SetValue(__self, value);
		public static bool GetFirstTime(this AudioSettingsBox __self) => _firstTime.Value.GetValue(__self);
		public static void SetFirstTime(this AudioSettingsBox __self, bool value) => _firstTime.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AudioSettingsBox>> _LateLoad757602046 =
				new System.Lazy<MethodAccessor<AudioSettingsBox>>(() => MethodAccessor<AudioSettingsBox>.Create("LateLoad"));
		private static readonly System.Lazy<MethodAccessor<AudioSettingsBox>> _InitializeDropdowns757602046 =
				new System.Lazy<MethodAccessor<AudioSettingsBox>>(() => MethodAccessor<AudioSettingsBox>.Create("InitializeDropdowns"));
		private static readonly System.Lazy<MethodAccessor<AudioSettingsBox>> _ApplyVolumeToMixer757602046 =
				new System.Lazy<MethodAccessor<AudioSettingsBox>>(() => MethodAccessor<AudioSettingsBox>.Create("ApplyVolumeToMixer"));
		private static readonly System.Lazy<MethodAccessor<AudioSettingsBox>> _OnSliderValueChanged757602046 =
				new System.Lazy<MethodAccessor<AudioSettingsBox>>(() => MethodAccessor<AudioSettingsBox>.Create("OnSliderValueChanged"));

		public static void LateLoad(this AudioSettingsBox __self) => _LateLoad757602046.Value.Invoke(__self);
		public static void InitializeDropdowns(this AudioSettingsBox __self) => _InitializeDropdowns757602046.Value.Invoke(__self);
		public static void ApplyVolumeToMixer(this AudioSettingsBox __self) => _ApplyVolumeToMixer757602046.Value.Invoke(__self);
		public static void OnSliderValueChanged(this AudioSettingsBox __self) => _OnSliderValueChanged757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_RGD_Settings_Audio
	{

		private static readonly System.Lazy<MethodAccessor<RGD_Settings_Audio>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_Settings_Audio>>(() => MethodAccessor<RGD_Settings_Audio>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_Settings_Audio __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_ControlsSettingsBox
	{

		private static readonly System.Lazy<FieldAccessor<ControlsSettingsBox, UnityEngine.UI.Slider>> _sensitivitySlider =
				new System.Lazy<FieldAccessor<ControlsSettingsBox, UnityEngine.UI.Slider>>(() => FieldAccessor<ControlsSettingsBox, UnityEngine.UI.Slider>.Create("sensitivitySlider"));
		private static readonly System.Lazy<FieldAccessor<ControlsSettingsBox, UnityEngine.UI.Text>> _sensitivityText =
				new System.Lazy<FieldAccessor<ControlsSettingsBox, UnityEngine.UI.Text>>(() => FieldAccessor<ControlsSettingsBox, UnityEngine.UI.Text>.Create("sensitivityText"));
		private static readonly System.Lazy<FieldAccessor<ControlsSettingsBox, UnityEngine.UI.Toggle>> _mouseInvertYToggle =
				new System.Lazy<FieldAccessor<ControlsSettingsBox, UnityEngine.UI.Toggle>>(() => FieldAccessor<ControlsSettingsBox, UnityEngine.UI.Toggle>.Create("mouseInvertYToggle"));
		private static readonly System.Lazy<FieldAccessor<ControlsSettingsBox, UnityEngine.UI.Toggle>> _toggleRunToggle =
				new System.Lazy<FieldAccessor<ControlsSettingsBox, UnityEngine.UI.Toggle>>(() => FieldAccessor<ControlsSettingsBox, UnityEngine.UI.Toggle>.Create("toggleRunToggle"));
		private static readonly System.Lazy<FieldAccessor<ControlsSettingsBox, UnityEngine.UI.ColorBlock>> _colorblock =
				new System.Lazy<FieldAccessor<ControlsSettingsBox, UnityEngine.UI.ColorBlock>>(() => FieldAccessor<ControlsSettingsBox, UnityEngine.UI.ColorBlock>.Create("colorblock"));
		private static readonly System.Lazy<FieldAccessor<ControlsSettingsBox, KeybindInterface[]>> _keybindInterfaces =
				new System.Lazy<FieldAccessor<ControlsSettingsBox, KeybindInterface[]>>(() => FieldAccessor<ControlsSettingsBox, KeybindInterface[]>.Create("keybindInterfaces"));

		public static UnityEngine.UI.Slider GetSensitivitySlider(this ControlsSettingsBox __self) => _sensitivitySlider.Value.GetValue(__self);
		public static void SetSensitivitySlider(this ControlsSettingsBox __self, UnityEngine.UI.Slider value) => _sensitivitySlider.Value.SetValue(__self, value);
		public static UnityEngine.UI.Text GetSensitivityText(this ControlsSettingsBox __self) => _sensitivityText.Value.GetValue(__self);
		public static void SetSensitivityText(this ControlsSettingsBox __self, UnityEngine.UI.Text value) => _sensitivityText.Value.SetValue(__self, value);
		public static UnityEngine.UI.Toggle GetMouseInvertYToggle(this ControlsSettingsBox __self) => _mouseInvertYToggle.Value.GetValue(__self);
		public static void SetMouseInvertYToggle(this ControlsSettingsBox __self, UnityEngine.UI.Toggle value) => _mouseInvertYToggle.Value.SetValue(__self, value);
		public static UnityEngine.UI.Toggle GetToggleRunToggle(this ControlsSettingsBox __self) => _toggleRunToggle.Value.GetValue(__self);
		public static void SetToggleRunToggle(this ControlsSettingsBox __self, UnityEngine.UI.Toggle value) => _toggleRunToggle.Value.SetValue(__self, value);
		public static UnityEngine.UI.ColorBlock GetColorblock(this ControlsSettingsBox __self) => _colorblock.Value.GetValue(__self);
		public static void SetColorblock(this ControlsSettingsBox __self, UnityEngine.UI.ColorBlock value) => _colorblock.Value.SetValue(__self, value);
		public static KeybindInterface[] GetKeybindInterfaces(this ControlsSettingsBox __self) => _keybindInterfaces.Value.GetValue(__self);
		public static void SetKeybindInterfaces(this ControlsSettingsBox __self, KeybindInterface[] value) => _keybindInterfaces.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<ControlsSettingsBox>> _Start757602046 =
				new System.Lazy<MethodAccessor<ControlsSettingsBox>>(() => MethodAccessor<ControlsSettingsBox>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<ControlsSettingsBox>> _InitializeKeybindInterfaces757602046 =
				new System.Lazy<MethodAccessor<ControlsSettingsBox>>(() => MethodAccessor<ControlsSettingsBox>.Create("InitializeKeybindInterfaces"));

		public static void Start(this ControlsSettingsBox __self) => _Start757602046.Value.Invoke(__self);
		public static void InitializeKeybindInterfaces(this ControlsSettingsBox __self) => _InitializeKeybindInterfaces757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_RGD_Settings_Controls
	{

		private static readonly System.Lazy<MethodAccessor<RGD_Settings_Controls>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_Settings_Controls>>(() => MethodAccessor<RGD_Settings_Controls>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_Settings_Controls __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_GeneralSettingsBox
	{

		private static readonly System.Lazy<FieldAccessor<GeneralSettingsBox, UnityEngine.Texture2D>> _invertedCursorTexture =
				new System.Lazy<FieldAccessor<GeneralSettingsBox, UnityEngine.Texture2D>>(() => FieldAccessor<GeneralSettingsBox, UnityEngine.Texture2D>.Create("invertedCursorTexture"));
		private static readonly System.Lazy<FieldAccessor<GeneralSettingsBox, UnityEngine.UI.Toggle>> _toggle_QuickBuild =
				new System.Lazy<FieldAccessor<GeneralSettingsBox, UnityEngine.UI.Toggle>>(() => FieldAccessor<GeneralSettingsBox, UnityEngine.UI.Toggle>.Create("toggle_QuickBuild"));
		private static readonly System.Lazy<FieldAccessor<GeneralSettingsBox, UnityEngine.UI.Toggle>> _toggle_ShowNameTag =
				new System.Lazy<FieldAccessor<GeneralSettingsBox, UnityEngine.UI.Toggle>>(() => FieldAccessor<GeneralSettingsBox, UnityEngine.UI.Toggle>.Create("toggle_ShowNameTag"));
		private static readonly System.Lazy<FieldAccessor<GeneralSettingsBox, UnityEngine.UI.Toggle>> _toggle_AutoSave =
				new System.Lazy<FieldAccessor<GeneralSettingsBox, UnityEngine.UI.Toggle>>(() => FieldAccessor<GeneralSettingsBox, UnityEngine.UI.Toggle>.Create("toggle_AutoSave"));
		private static readonly System.Lazy<FieldAccessor<GeneralSettingsBox, UnityEngine.UI.Toggle>> _toggle_MotionSickness =
				new System.Lazy<FieldAccessor<GeneralSettingsBox, UnityEngine.UI.Toggle>>(() => FieldAccessor<GeneralSettingsBox, UnityEngine.UI.Toggle>.Create("toggle_MotionSickness"));
		private static readonly System.Lazy<FieldAccessor<GeneralSettingsBox, UnityEngine.UI.Toggle>> _toggle_ChatVisibility =
				new System.Lazy<FieldAccessor<GeneralSettingsBox, UnityEngine.UI.Toggle>>(() => FieldAccessor<GeneralSettingsBox, UnityEngine.UI.Toggle>.Create("toggle_ChatVisibility"));
		private static readonly System.Lazy<FieldAccessor<GeneralSettingsBox, UnityEngine.UI.Toggle>> _toggle_HelpfulUI =
				new System.Lazy<FieldAccessor<GeneralSettingsBox, UnityEngine.UI.Toggle>>(() => FieldAccessor<GeneralSettingsBox, UnityEngine.UI.Toggle>.Create("toggle_HelpfulUI"));
		private static readonly System.Lazy<FieldAccessor<GeneralSettingsBox, UnityEngine.UI.Toggle>> _toggle_CursorInvert =
				new System.Lazy<FieldAccessor<GeneralSettingsBox, UnityEngine.UI.Toggle>>(() => FieldAccessor<GeneralSettingsBox, UnityEngine.UI.Toggle>.Create("toggle_CursorInvert"));
		private static readonly System.Lazy<FieldAccessor<GeneralSettingsBox, UnityEngine.UI.Toggle>> _toggle_AutoPlayNotes =
				new System.Lazy<FieldAccessor<GeneralSettingsBox, UnityEngine.UI.Toggle>>(() => FieldAccessor<GeneralSettingsBox, UnityEngine.UI.Toggle>.Create("toggle_AutoPlayNotes"));

		public static UnityEngine.Texture2D GetInvertedCursorTexture(this GeneralSettingsBox __self) => _invertedCursorTexture.Value.GetValue(__self);
		public static void SetInvertedCursorTexture(this GeneralSettingsBox __self, UnityEngine.Texture2D value) => _invertedCursorTexture.Value.SetValue(__self, value);
		public static UnityEngine.UI.Toggle GetToggle_QuickBuild(this GeneralSettingsBox __self) => _toggle_QuickBuild.Value.GetValue(__self);
		public static void SetToggle_QuickBuild(this GeneralSettingsBox __self, UnityEngine.UI.Toggle value) => _toggle_QuickBuild.Value.SetValue(__self, value);
		public static UnityEngine.UI.Toggle GetToggle_ShowNameTag(this GeneralSettingsBox __self) => _toggle_ShowNameTag.Value.GetValue(__self);
		public static void SetToggle_ShowNameTag(this GeneralSettingsBox __self, UnityEngine.UI.Toggle value) => _toggle_ShowNameTag.Value.SetValue(__self, value);
		public static UnityEngine.UI.Toggle GetToggle_AutoSave(this GeneralSettingsBox __self) => _toggle_AutoSave.Value.GetValue(__self);
		public static void SetToggle_AutoSave(this GeneralSettingsBox __self, UnityEngine.UI.Toggle value) => _toggle_AutoSave.Value.SetValue(__self, value);
		public static UnityEngine.UI.Toggle GetToggle_MotionSickness(this GeneralSettingsBox __self) => _toggle_MotionSickness.Value.GetValue(__self);
		public static void SetToggle_MotionSickness(this GeneralSettingsBox __self, UnityEngine.UI.Toggle value) => _toggle_MotionSickness.Value.SetValue(__self, value);
		public static UnityEngine.UI.Toggle GetToggle_ChatVisibility(this GeneralSettingsBox __self) => _toggle_ChatVisibility.Value.GetValue(__self);
		public static void SetToggle_ChatVisibility(this GeneralSettingsBox __self, UnityEngine.UI.Toggle value) => _toggle_ChatVisibility.Value.SetValue(__self, value);
		public static UnityEngine.UI.Toggle GetToggle_HelpfulUI(this GeneralSettingsBox __self) => _toggle_HelpfulUI.Value.GetValue(__self);
		public static void SetToggle_HelpfulUI(this GeneralSettingsBox __self, UnityEngine.UI.Toggle value) => _toggle_HelpfulUI.Value.SetValue(__self, value);
		public static UnityEngine.UI.Toggle GetToggle_CursorInvert(this GeneralSettingsBox __self) => _toggle_CursorInvert.Value.GetValue(__self);
		public static void SetToggle_CursorInvert(this GeneralSettingsBox __self, UnityEngine.UI.Toggle value) => _toggle_CursorInvert.Value.SetValue(__self, value);
		public static UnityEngine.UI.Toggle GetToggle_AutoPlayNotes(this GeneralSettingsBox __self) => _toggle_AutoPlayNotes.Value.GetValue(__self);
		public static void SetToggle_AutoPlayNotes(this GeneralSettingsBox __self, UnityEngine.UI.Toggle value) => _toggle_AutoPlayNotes.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<GeneralSettingsBox>> _Awake757602046 =
				new System.Lazy<MethodAccessor<GeneralSettingsBox>>(() => MethodAccessor<GeneralSettingsBox>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<GeneralSettingsBox>> _QuickBuildChanged757602046 =
				new System.Lazy<MethodAccessor<GeneralSettingsBox>>(() => MethodAccessor<GeneralSettingsBox>.Create("QuickBuildChanged"));
		private static readonly System.Lazy<MethodAccessor<GeneralSettingsBox>> _ShowNameTagChanged757602046 =
				new System.Lazy<MethodAccessor<GeneralSettingsBox>>(() => MethodAccessor<GeneralSettingsBox>.Create("ShowNameTagChanged"));
		private static readonly System.Lazy<MethodAccessor<GeneralSettingsBox>> _AutoSaveChanged757602046 =
				new System.Lazy<MethodAccessor<GeneralSettingsBox>>(() => MethodAccessor<GeneralSettingsBox>.Create("AutoSaveChanged"));
		private static readonly System.Lazy<MethodAccessor<GeneralSettingsBox>> _MotionSicknessChanged757602046 =
				new System.Lazy<MethodAccessor<GeneralSettingsBox>>(() => MethodAccessor<GeneralSettingsBox>.Create("MotionSicknessChanged"));
		private static readonly System.Lazy<MethodAccessor<GeneralSettingsBox>> _ChatVisiblityChanged757602046 =
				new System.Lazy<MethodAccessor<GeneralSettingsBox>>(() => MethodAccessor<GeneralSettingsBox>.Create("ChatVisiblityChanged"));
		private static readonly System.Lazy<MethodAccessor<GeneralSettingsBox>> _HelpfulUIVisiblityChanged757602046 =
				new System.Lazy<MethodAccessor<GeneralSettingsBox>>(() => MethodAccessor<GeneralSettingsBox>.Create("HelpfulUIVisiblityChanged"));
		private static readonly System.Lazy<MethodAccessor<GeneralSettingsBox>> _CursorInvertChanged757602046 =
				new System.Lazy<MethodAccessor<GeneralSettingsBox>>(() => MethodAccessor<GeneralSettingsBox>.Create("CursorInvertChanged"));
		private static readonly System.Lazy<MethodAccessor<GeneralSettingsBox>> _AutoPlayNotesChanged757602046 =
				new System.Lazy<MethodAccessor<GeneralSettingsBox>>(() => MethodAccessor<GeneralSettingsBox>.Create("AutoPlayNotesChanged"));
		private static readonly System.Lazy<MethodAccessor<GeneralSettingsBox>> _ApplyNameTagSettingToGame757602046 =
				new System.Lazy<MethodAccessor<GeneralSettingsBox>>(() => MethodAccessor<GeneralSettingsBox>.Create("ApplyNameTagSettingToGame"));
		private static readonly System.Lazy<MethodAccessor<GeneralSettingsBox>> _RefreshCursorInvert757602046 =
				new System.Lazy<MethodAccessor<GeneralSettingsBox>>(() => MethodAccessor<GeneralSettingsBox>.Create("RefreshCursorInvert"));

		public static void Awake(this GeneralSettingsBox __self) => _Awake757602046.Value.Invoke(__self);
		public static void QuickBuildChanged(this GeneralSettingsBox __self) => _QuickBuildChanged757602046.Value.Invoke(__self);
		public static void ShowNameTagChanged(this GeneralSettingsBox __self) => _ShowNameTagChanged757602046.Value.Invoke(__self);
		public static void AutoSaveChanged(this GeneralSettingsBox __self) => _AutoSaveChanged757602046.Value.Invoke(__self);
		public static void MotionSicknessChanged(this GeneralSettingsBox __self) => _MotionSicknessChanged757602046.Value.Invoke(__self);
		public static void ChatVisiblityChanged(this GeneralSettingsBox __self) => _ChatVisiblityChanged757602046.Value.Invoke(__self);
		public static void HelpfulUIVisiblityChanged(this GeneralSettingsBox __self) => _HelpfulUIVisiblityChanged757602046.Value.Invoke(__self);
		public static void CursorInvertChanged(this GeneralSettingsBox __self) => _CursorInvertChanged757602046.Value.Invoke(__self);
		public static void AutoPlayNotesChanged(this GeneralSettingsBox __self) => _AutoPlayNotesChanged757602046.Value.Invoke(__self);
		public static void ApplyNameTagSettingToGame(this GeneralSettingsBox __self) => _ApplyNameTagSettingToGame757602046.Value.Invoke(__self);
		public static void RefreshCursorInvert(this GeneralSettingsBox __self) => _RefreshCursorInvert757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_RGD_Settings_General
	{

		private static readonly System.Lazy<MethodAccessor<RGD_Settings_General>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_Settings_General>>(() => MethodAccessor<RGD_Settings_General>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_Settings_General __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_GraphicsSettingsBox
	{

		private static readonly System.Lazy<FieldAccessor<GraphicsSettingsBox, UnityEngine.UI.Dropdown>> _resolutionDropdown =
				new System.Lazy<FieldAccessor<GraphicsSettingsBox, UnityEngine.UI.Dropdown>>(() => FieldAccessor<GraphicsSettingsBox, UnityEngine.UI.Dropdown>.Create("resolutionDropdown"));
		private static readonly System.Lazy<FieldAccessor<GraphicsSettingsBox, UnityEngine.UI.Dropdown>> _waterQualityDropdown =
				new System.Lazy<FieldAccessor<GraphicsSettingsBox, UnityEngine.UI.Dropdown>>(() => FieldAccessor<GraphicsSettingsBox, UnityEngine.UI.Dropdown>.Create("waterQualityDropdown"));
		private static readonly System.Lazy<FieldAccessor<GraphicsSettingsBox, UnityEngine.UI.Dropdown>> _qualitySettingsDropdown =
				new System.Lazy<FieldAccessor<GraphicsSettingsBox, UnityEngine.UI.Dropdown>>(() => FieldAccessor<GraphicsSettingsBox, UnityEngine.UI.Dropdown>.Create("qualitySettingsDropdown"));
		private static readonly System.Lazy<FieldAccessor<GraphicsSettingsBox, UnityEngine.UI.Dropdown>> _textureQualityDropdown =
				new System.Lazy<FieldAccessor<GraphicsSettingsBox, UnityEngine.UI.Dropdown>>(() => FieldAccessor<GraphicsSettingsBox, UnityEngine.UI.Dropdown>.Create("textureQualityDropdown"));
		private static readonly System.Lazy<FieldAccessor<GraphicsSettingsBox, UnityEngine.UI.Dropdown>> _shadowTypeDropdown =
				new System.Lazy<FieldAccessor<GraphicsSettingsBox, UnityEngine.UI.Dropdown>>(() => FieldAccessor<GraphicsSettingsBox, UnityEngine.UI.Dropdown>.Create("shadowTypeDropdown"));
		private static readonly System.Lazy<FieldAccessor<GraphicsSettingsBox, UnityEngine.UI.Dropdown>> _shadowCascadeDropdown =
				new System.Lazy<FieldAccessor<GraphicsSettingsBox, UnityEngine.UI.Dropdown>>(() => FieldAccessor<GraphicsSettingsBox, UnityEngine.UI.Dropdown>.Create("shadowCascadeDropdown"));
		private static readonly System.Lazy<FieldAccessor<GraphicsSettingsBox, UnityEngine.UI.Dropdown>> _shadowResolutionDropdown =
				new System.Lazy<FieldAccessor<GraphicsSettingsBox, UnityEngine.UI.Dropdown>>(() => FieldAccessor<GraphicsSettingsBox, UnityEngine.UI.Dropdown>.Create("shadowResolutionDropdown"));
		private static readonly System.Lazy<FieldAccessor<GraphicsSettingsBox, UnityEngine.UI.Dropdown>> _reflectionsDropdown =
				new System.Lazy<FieldAccessor<GraphicsSettingsBox, UnityEngine.UI.Dropdown>>(() => FieldAccessor<GraphicsSettingsBox, UnityEngine.UI.Dropdown>.Create("reflectionsDropdown"));
		private static readonly System.Lazy<FieldAccessor<GraphicsSettingsBox, UnityEngine.UI.Dropdown>> _fpsCapDropdown =
				new System.Lazy<FieldAccessor<GraphicsSettingsBox, UnityEngine.UI.Dropdown>>(() => FieldAccessor<GraphicsSettingsBox, UnityEngine.UI.Dropdown>.Create("fpsCapDropdown"));
		private static readonly System.Lazy<FieldAccessor<GraphicsSettingsBox, UnityEngine.UI.Dropdown>> _fullscreenModeDropdown =
				new System.Lazy<FieldAccessor<GraphicsSettingsBox, UnityEngine.UI.Dropdown>>(() => FieldAccessor<GraphicsSettingsBox, UnityEngine.UI.Dropdown>.Create("fullscreenModeDropdown"));
		private static readonly System.Lazy<FieldAccessor<GraphicsSettingsBox, UnityEngine.UI.Toggle>> _vsyncToggle =
				new System.Lazy<FieldAccessor<GraphicsSettingsBox, UnityEngine.UI.Toggle>>(() => FieldAccessor<GraphicsSettingsBox, UnityEngine.UI.Toggle>.Create("vsyncToggle"));
		private static readonly System.Lazy<FieldAccessor<GraphicsSettingsBox, UnityEngine.UI.Toggle>> _aoToggle =
				new System.Lazy<FieldAccessor<GraphicsSettingsBox, UnityEngine.UI.Toggle>>(() => FieldAccessor<GraphicsSettingsBox, UnityEngine.UI.Toggle>.Create("aoToggle"));
		private static readonly System.Lazy<FieldAccessor<GraphicsSettingsBox, UnityEngine.UI.Toggle>> _aaToggle =
				new System.Lazy<FieldAccessor<GraphicsSettingsBox, UnityEngine.UI.Toggle>>(() => FieldAccessor<GraphicsSettingsBox, UnityEngine.UI.Toggle>.Create("aaToggle"));
		private static readonly System.Lazy<FieldAccessor<GraphicsSettingsBox, UnityEngine.UI.Slider>> _shadowDistanceSlider =
				new System.Lazy<FieldAccessor<GraphicsSettingsBox, UnityEngine.UI.Slider>>(() => FieldAccessor<GraphicsSettingsBox, UnityEngine.UI.Slider>.Create("shadowDistanceSlider"));
		private static readonly System.Lazy<FieldAccessor<GraphicsSettingsBox, UnityEngine.PostProcessing.ChromaticAberrationModel.Settings>> _aberationSettings =
				new System.Lazy<FieldAccessor<GraphicsSettingsBox, UnityEngine.PostProcessing.ChromaticAberrationModel.Settings>>(() => FieldAccessor<GraphicsSettingsBox, UnityEngine.PostProcessing.ChromaticAberrationModel.Settings>.Create("aberationSettings"));
		private static readonly System.Lazy<FieldAccessor<GraphicsSettingsBox, UnityEngine.PostProcessing.VignetteModel.Settings>> _vignetteSettings =
				new System.Lazy<FieldAccessor<GraphicsSettingsBox, UnityEngine.PostProcessing.VignetteModel.Settings>>(() => FieldAccessor<GraphicsSettingsBox, UnityEngine.PostProcessing.VignetteModel.Settings>.Create("vignetteSettings"));
		private static readonly System.Lazy<FieldAccessor<GraphicsSettingsBox, UnityEngine.PostProcessing.ColorGradingModel.Settings>> _colorGradingSettings =
				new System.Lazy<FieldAccessor<GraphicsSettingsBox, UnityEngine.PostProcessing.ColorGradingModel.Settings>>(() => FieldAccessor<GraphicsSettingsBox, UnityEngine.PostProcessing.ColorGradingModel.Settings>.Create("colorGradingSettings"));
		private static readonly System.Lazy<FieldAccessor<GraphicsSettingsBox, UnityEngine.AzureSky.AzureSkyFogScattering>> _skyFog =
				new System.Lazy<FieldAccessor<GraphicsSettingsBox, UnityEngine.AzureSky.AzureSkyFogScattering>>(() => FieldAccessor<GraphicsSettingsBox, UnityEngine.AzureSky.AzureSkyFogScattering>.Create("skyFog"));
		private static readonly System.Lazy<FieldAccessor<GraphicsSettingsBox, UltimateWater.Water>> _water =
				new System.Lazy<FieldAccessor<GraphicsSettingsBox, UltimateWater.Water>>(() => FieldAccessor<GraphicsSettingsBox, UltimateWater.Water>.Create("water"));
		private static readonly System.Lazy<FieldAccessor<GraphicsSettingsBox, Network_Player>> _localPlayer =
				new System.Lazy<FieldAccessor<GraphicsSettingsBox, Network_Player>>(() => FieldAccessor<GraphicsSettingsBox, Network_Player>.Create("localPlayer"));
		private static readonly System.Lazy<FieldAccessor<GraphicsSettingsBox, RGD_Settings>> _lastLoadedSetting =
				new System.Lazy<FieldAccessor<GraphicsSettingsBox, RGD_Settings>>(() => FieldAccessor<GraphicsSettingsBox, RGD_Settings>.Create("lastLoadedSetting"));
		private static readonly System.Lazy<FieldAccessor<GraphicsSettingsBox, VolumetricLightRenderer>> _volumetricLightRenderer =
				new System.Lazy<FieldAccessor<GraphicsSettingsBox, VolumetricLightRenderer>>(() => FieldAccessor<GraphicsSettingsBox, VolumetricLightRenderer>.Create("volumetricLightRenderer"));

		public static UnityEngine.UI.Dropdown GetResolutionDropdown(this GraphicsSettingsBox __self) => _resolutionDropdown.Value.GetValue(__self);
		public static void SetResolutionDropdown(this GraphicsSettingsBox __self, UnityEngine.UI.Dropdown value) => _resolutionDropdown.Value.SetValue(__self, value);
		public static UnityEngine.UI.Dropdown GetWaterQualityDropdown(this GraphicsSettingsBox __self) => _waterQualityDropdown.Value.GetValue(__self);
		public static void SetWaterQualityDropdown(this GraphicsSettingsBox __self, UnityEngine.UI.Dropdown value) => _waterQualityDropdown.Value.SetValue(__self, value);
		public static UnityEngine.UI.Dropdown GetQualitySettingsDropdown(this GraphicsSettingsBox __self) => _qualitySettingsDropdown.Value.GetValue(__self);
		public static void SetQualitySettingsDropdown(this GraphicsSettingsBox __self, UnityEngine.UI.Dropdown value) => _qualitySettingsDropdown.Value.SetValue(__self, value);
		public static UnityEngine.UI.Dropdown GetTextureQualityDropdown(this GraphicsSettingsBox __self) => _textureQualityDropdown.Value.GetValue(__self);
		public static void SetTextureQualityDropdown(this GraphicsSettingsBox __self, UnityEngine.UI.Dropdown value) => _textureQualityDropdown.Value.SetValue(__self, value);
		public static UnityEngine.UI.Dropdown GetShadowTypeDropdown(this GraphicsSettingsBox __self) => _shadowTypeDropdown.Value.GetValue(__self);
		public static void SetShadowTypeDropdown(this GraphicsSettingsBox __self, UnityEngine.UI.Dropdown value) => _shadowTypeDropdown.Value.SetValue(__self, value);
		public static UnityEngine.UI.Dropdown GetShadowCascadeDropdown(this GraphicsSettingsBox __self) => _shadowCascadeDropdown.Value.GetValue(__self);
		public static void SetShadowCascadeDropdown(this GraphicsSettingsBox __self, UnityEngine.UI.Dropdown value) => _shadowCascadeDropdown.Value.SetValue(__self, value);
		public static UnityEngine.UI.Dropdown GetShadowResolutionDropdown(this GraphicsSettingsBox __self) => _shadowResolutionDropdown.Value.GetValue(__self);
		public static void SetShadowResolutionDropdown(this GraphicsSettingsBox __self, UnityEngine.UI.Dropdown value) => _shadowResolutionDropdown.Value.SetValue(__self, value);
		public static UnityEngine.UI.Dropdown GetReflectionsDropdown(this GraphicsSettingsBox __self) => _reflectionsDropdown.Value.GetValue(__self);
		public static void SetReflectionsDropdown(this GraphicsSettingsBox __self, UnityEngine.UI.Dropdown value) => _reflectionsDropdown.Value.SetValue(__self, value);
		public static UnityEngine.UI.Dropdown GetFpsCapDropdown(this GraphicsSettingsBox __self) => _fpsCapDropdown.Value.GetValue(__self);
		public static void SetFpsCapDropdown(this GraphicsSettingsBox __self, UnityEngine.UI.Dropdown value) => _fpsCapDropdown.Value.SetValue(__self, value);
		public static UnityEngine.UI.Dropdown GetFullscreenModeDropdown(this GraphicsSettingsBox __self) => _fullscreenModeDropdown.Value.GetValue(__self);
		public static void SetFullscreenModeDropdown(this GraphicsSettingsBox __self, UnityEngine.UI.Dropdown value) => _fullscreenModeDropdown.Value.SetValue(__self, value);
		public static UnityEngine.UI.Toggle GetVsyncToggle(this GraphicsSettingsBox __self) => _vsyncToggle.Value.GetValue(__self);
		public static void SetVsyncToggle(this GraphicsSettingsBox __self, UnityEngine.UI.Toggle value) => _vsyncToggle.Value.SetValue(__self, value);
		public static UnityEngine.UI.Toggle GetAoToggle(this GraphicsSettingsBox __self) => _aoToggle.Value.GetValue(__self);
		public static void SetAoToggle(this GraphicsSettingsBox __self, UnityEngine.UI.Toggle value) => _aoToggle.Value.SetValue(__self, value);
		public static UnityEngine.UI.Toggle GetAaToggle(this GraphicsSettingsBox __self) => _aaToggle.Value.GetValue(__self);
		public static void SetAaToggle(this GraphicsSettingsBox __self, UnityEngine.UI.Toggle value) => _aaToggle.Value.SetValue(__self, value);
		public static UnityEngine.UI.Slider GetShadowDistanceSlider(this GraphicsSettingsBox __self) => _shadowDistanceSlider.Value.GetValue(__self);
		public static void SetShadowDistanceSlider(this GraphicsSettingsBox __self, UnityEngine.UI.Slider value) => _shadowDistanceSlider.Value.SetValue(__self, value);
		public static UnityEngine.PostProcessing.ChromaticAberrationModel.Settings GetAberationSettings(this GraphicsSettingsBox __self) => _aberationSettings.Value.GetValue(__self);
		public static void SetAberationSettings(this GraphicsSettingsBox __self, UnityEngine.PostProcessing.ChromaticAberrationModel.Settings value) => _aberationSettings.Value.SetValue(__self, value);
		public static UnityEngine.PostProcessing.VignetteModel.Settings GetVignetteSettings(this GraphicsSettingsBox __self) => _vignetteSettings.Value.GetValue(__self);
		public static void SetVignetteSettings(this GraphicsSettingsBox __self, UnityEngine.PostProcessing.VignetteModel.Settings value) => _vignetteSettings.Value.SetValue(__self, value);
		public static UnityEngine.PostProcessing.ColorGradingModel.Settings GetColorGradingSettings(this GraphicsSettingsBox __self) => _colorGradingSettings.Value.GetValue(__self);
		public static void SetColorGradingSettings(this GraphicsSettingsBox __self, UnityEngine.PostProcessing.ColorGradingModel.Settings value) => _colorGradingSettings.Value.SetValue(__self, value);
		public static UnityEngine.AzureSky.AzureSkyFogScattering GetSkyFog(this GraphicsSettingsBox __self) => _skyFog.Value.GetValue(__self);
		public static void SetSkyFog(this GraphicsSettingsBox __self, UnityEngine.AzureSky.AzureSkyFogScattering value) => _skyFog.Value.SetValue(__self, value);
		public static UltimateWater.Water GetWater(this GraphicsSettingsBox __self) => _water.Value.GetValue(__self);
		public static void SetWater(this GraphicsSettingsBox __self, UltimateWater.Water value) => _water.Value.SetValue(__self, value);
		public static Network_Player GetLocalPlayer(this GraphicsSettingsBox __self) => _localPlayer.Value.GetValue(__self);
		public static void SetLocalPlayer(this GraphicsSettingsBox __self, Network_Player value) => _localPlayer.Value.SetValue(__self, value);
		public static RGD_Settings GetLastLoadedSetting(this GraphicsSettingsBox __self) => _lastLoadedSetting.Value.GetValue(__self);
		public static void SetLastLoadedSetting(this GraphicsSettingsBox __self, RGD_Settings value) => _lastLoadedSetting.Value.SetValue(__self, value);
		public static VolumetricLightRenderer GetVolumetricLightRenderer(this GraphicsSettingsBox __self) => _volumetricLightRenderer.Value.GetValue(__self);
		public static void SetVolumetricLightRenderer(this GraphicsSettingsBox __self, VolumetricLightRenderer value) => _volumetricLightRenderer.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<GraphicsSettingsBox>> _SceneManager_sceneLoaded1466693196 =
				new System.Lazy<MethodAccessor<GraphicsSettingsBox>>(() => MethodAccessor<GraphicsSettingsBox>.Create("SceneManager_sceneLoaded", typeof(UnityEngine.SceneManagement.Scene), typeof(UnityEngine.SceneManagement.LoadSceneMode)));
		private static readonly System.Lazy<MethodAccessor<GraphicsSettingsBox>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<GraphicsSettingsBox>>(() => MethodAccessor<GraphicsSettingsBox>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<GraphicsSettingsBox>> _Initialize757602046 =
				new System.Lazy<MethodAccessor<GraphicsSettingsBox>>(() => MethodAccessor<GraphicsSettingsBox>.Create("Initialize"));
		private static readonly System.Lazy<MethodAccessor<GraphicsSettingsBox>> _InitializeDropdowns757602046 =
				new System.Lazy<MethodAccessor<GraphicsSettingsBox>>(() => MethodAccessor<GraphicsSettingsBox>.Create("InitializeDropdowns"));
		private static readonly System.Lazy<MethodAccessor<GraphicsSettingsBox>> _InitializeResolutions757602046 =
				new System.Lazy<MethodAccessor<GraphicsSettingsBox>>(() => MethodAccessor<GraphicsSettingsBox>.Create("InitializeResolutions"));
		private static readonly System.Lazy<MethodAccessor<GraphicsSettingsBox>> _LoadResolutionAndFullscreenModeLate757602046 =
				new System.Lazy<MethodAccessor<GraphicsSettingsBox>>(() => MethodAccessor<GraphicsSettingsBox>.Create("LoadResolutionAndFullscreenModeLate"));
		private static readonly System.Lazy<MethodAccessor<GraphicsSettingsBox>> _LoadResolutionAndFullscreenMode3481899809 =
				new System.Lazy<MethodAccessor<GraphicsSettingsBox>>(() => MethodAccessor<GraphicsSettingsBox>.Create("LoadResolutionAndFullscreenMode", typeof(RGD_Settings)));
		private static readonly System.Lazy<MethodAccessor<GraphicsSettingsBox>> _SavePostEffectSettings757602046 =
				new System.Lazy<MethodAccessor<GraphicsSettingsBox>>(() => MethodAccessor<GraphicsSettingsBox>.Create("SavePostEffectSettings"));
		private static readonly System.Lazy<MethodAccessor<GraphicsSettingsBox>> _LoadPostEffectSettings757602046 =
				new System.Lazy<MethodAccessor<GraphicsSettingsBox>>(() => MethodAccessor<GraphicsSettingsBox>.Create("LoadPostEffectSettings"));
		private static readonly System.Lazy<MethodAccessor<GraphicsSettingsBox>> _ApplyCustomProperties757602046 =
				new System.Lazy<MethodAccessor<GraphicsSettingsBox>>(() => MethodAccessor<GraphicsSettingsBox>.Create("ApplyCustomProperties"));
		private static readonly System.Lazy<MethodAccessor<GraphicsSettingsBox>> _ApplyVolumetricLightingProperties3486186818 =
				new System.Lazy<MethodAccessor<GraphicsSettingsBox>>(() => MethodAccessor<GraphicsSettingsBox>.Create("ApplyVolumetricLightingProperties", typeof(int)));
		private static readonly System.Lazy<MethodAccessor<GraphicsSettingsBox>> _VolumetricLightingEnabled3486186818 =
				new System.Lazy<MethodAccessor<GraphicsSettingsBox>>(() => MethodAccessor<GraphicsSettingsBox>.Create("VolumetricLightingEnabled", typeof(int)));
		private static readonly System.Lazy<MethodAccessor<GraphicsSettingsBox>> _DropDownToCascade3486186818 =
				new System.Lazy<MethodAccessor<GraphicsSettingsBox>>(() => MethodAccessor<GraphicsSettingsBox>.Create("DropDownToCascade", typeof(int)));
		private static readonly System.Lazy<MethodAccessor<GraphicsSettingsBox>> _GetResolutionFromCurrentSettings757602046 =
				new System.Lazy<MethodAccessor<GraphicsSettingsBox>>(() => MethodAccessor<GraphicsSettingsBox>.Create("GetResolutionFromCurrentSettings"));
		private static readonly System.Lazy<MethodAccessor<GraphicsSettingsBox>> _GetFullscreenModeFromCurrentSettings757602046 =
				new System.Lazy<MethodAccessor<GraphicsSettingsBox>>(() => MethodAccessor<GraphicsSettingsBox>.Create("GetFullscreenModeFromCurrentSettings"));

		public static void SceneManager_sceneLoaded(this GraphicsSettingsBox __self, UnityEngine.SceneManagement.Scene scene, UnityEngine.SceneManagement.LoadSceneMode mode) => _SceneManager_sceneLoaded1466693196.Value.Invoke(__self, scene, mode);
		public static void OnDestroy(this GraphicsSettingsBox __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void Initialize(this GraphicsSettingsBox __self) => _Initialize757602046.Value.Invoke(__self);
		public static void InitializeDropdowns(this GraphicsSettingsBox __self) => _InitializeDropdowns757602046.Value.Invoke(__self);
		public static void InitializeResolutions(this GraphicsSettingsBox __self) => _InitializeResolutions757602046.Value.Invoke(__self);
		public static void LoadResolutionAndFullscreenModeLate(this GraphicsSettingsBox __self) => _LoadResolutionAndFullscreenModeLate757602046.Value.Invoke(__self);
		public static void LoadResolutionAndFullscreenMode(this GraphicsSettingsBox __self, RGD_Settings settings) => _LoadResolutionAndFullscreenMode3481899809.Value.Invoke(__self, settings);
		public static void SavePostEffectSettings(this GraphicsSettingsBox __self) => _SavePostEffectSettings757602046.Value.Invoke(__self);
		public static void LoadPostEffectSettings(this GraphicsSettingsBox __self) => _LoadPostEffectSettings757602046.Value.Invoke(__self);
		public static void ApplyCustomProperties(this GraphicsSettingsBox __self) => _ApplyCustomProperties757602046.Value.Invoke(__self);
		public static void ApplyVolumetricLightingProperties(this GraphicsSettingsBox __self, int qualitySettingsValue) => _ApplyVolumetricLightingProperties3486186818.Value.Invoke(__self, qualitySettingsValue);
		public static bool VolumetricLightingEnabled(this GraphicsSettingsBox __self, int qualitySettingsValue) => (bool)_VolumetricLightingEnabled3486186818.Value.Invoke(__self, qualitySettingsValue);
		public static int DropDownToCascade(this GraphicsSettingsBox __self, int dropDownValue) => (int)_DropDownToCascade3486186818.Value.Invoke(__self, dropDownValue);
		public static UnityEngine.Resolution GetResolutionFromCurrentSettings(this GraphicsSettingsBox __self) => (UnityEngine.Resolution)_GetResolutionFromCurrentSettings757602046.Value.Invoke(__self);
		public static UnityEngine.FullScreenMode GetFullscreenModeFromCurrentSettings(this GraphicsSettingsBox __self) => (UnityEngine.FullScreenMode)_GetFullscreenModeFromCurrentSettings757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_RGD_Settings_Graphics
	{

		private static readonly System.Lazy<MethodAccessor<RGD_Settings_Graphics>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_Settings_Graphics>>(() => MethodAccessor<RGD_Settings_Graphics>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_Settings_Graphics __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_KeybindInterface
	{

		private static readonly System.Lazy<FieldAccessor<KeybindInterface, string>> _identifier =
				new System.Lazy<FieldAccessor<KeybindInterface, string>>(() => FieldAccessor<KeybindInterface, string>.Create("identifier"));
		private static readonly System.Lazy<FieldAccessor<KeybindInterface, UnityEngine.KeyCode>> _mainKeyDefault =
				new System.Lazy<FieldAccessor<KeybindInterface, UnityEngine.KeyCode>>(() => FieldAccessor<KeybindInterface, UnityEngine.KeyCode>.Create("mainKeyDefault"));
		private static readonly System.Lazy<FieldAccessor<KeybindInterface, UnityEngine.KeyCode>> _altKeyDefault =
				new System.Lazy<FieldAccessor<KeybindInterface, UnityEngine.KeyCode>>(() => FieldAccessor<KeybindInterface, UnityEngine.KeyCode>.Create("altKeyDefault"));
		private static readonly System.Lazy<FieldAccessor<KeybindInterface, bool>> _allowMouseKeybinds =
				new System.Lazy<FieldAccessor<KeybindInterface, bool>>(() => FieldAccessor<KeybindInterface, bool>.Create("allowMouseKeybinds"));
		private static readonly System.Lazy<FieldAccessor<KeybindInterface, KeyConnection>> _mainKey =
				new System.Lazy<FieldAccessor<KeybindInterface, KeyConnection>>(() => FieldAccessor<KeybindInterface, KeyConnection>.Create("mainKey"));
		private static readonly System.Lazy<FieldAccessor<KeybindInterface, KeyConnection>> _altKey =
				new System.Lazy<FieldAccessor<KeybindInterface, KeyConnection>>(() => FieldAccessor<KeybindInterface, KeyConnection>.Create("altKey"));
		private static readonly System.Lazy<FieldAccessor<KeybindInterface, Keybind>> _keybind =
				new System.Lazy<FieldAccessor<KeybindInterface, Keybind>>(() => FieldAccessor<KeybindInterface, Keybind>.Create("keybind"));
		private static readonly System.Lazy<FieldAccessor<KeybindInterface, UnityEngine.UI.ColorBlock>> _colorblock =
				new System.Lazy<FieldAccessor<KeybindInterface, UnityEngine.UI.ColorBlock>>(() => FieldAccessor<KeybindInterface, UnityEngine.UI.ColorBlock>.Create("colorblock"));

		public static string GetIdentifier(this KeybindInterface __self) => _identifier.Value.GetValue(__self);
		public static void SetIdentifier(this KeybindInterface __self, string value) => _identifier.Value.SetValue(__self, value);
		public static UnityEngine.KeyCode GetMainKeyDefault(this KeybindInterface __self) => _mainKeyDefault.Value.GetValue(__self);
		public static void SetMainKeyDefault(this KeybindInterface __self, UnityEngine.KeyCode value) => _mainKeyDefault.Value.SetValue(__self, value);
		public static UnityEngine.KeyCode GetAltKeyDefault(this KeybindInterface __self) => _altKeyDefault.Value.GetValue(__self);
		public static void SetAltKeyDefault(this KeybindInterface __self, UnityEngine.KeyCode value) => _altKeyDefault.Value.SetValue(__self, value);
		public static bool GetAllowMouseKeybinds(this KeybindInterface __self) => _allowMouseKeybinds.Value.GetValue(__self);
		public static void SetAllowMouseKeybinds(this KeybindInterface __self, bool value) => _allowMouseKeybinds.Value.SetValue(__self, value);
		public static KeyConnection GetMainKey(this KeybindInterface __self) => _mainKey.Value.GetValue(__self);
		public static void SetMainKey(this KeybindInterface __self, KeyConnection value) => _mainKey.Value.SetValue(__self, value);
		public static KeyConnection GetAltKey(this KeybindInterface __self) => _altKey.Value.GetValue(__self);
		public static void SetAltKey(this KeybindInterface __self, KeyConnection value) => _altKey.Value.SetValue(__self, value);
		public static Keybind GetKeybind(this KeybindInterface __self) => _keybind.Value.GetValue(__self);
		public static void SetKeybind(this KeybindInterface __self, Keybind value) => _keybind.Value.SetValue(__self, value);
		public static UnityEngine.UI.ColorBlock GetColorblock(this KeybindInterface __self) => _colorblock.Value.GetValue(__self);
		public static void SetColorblock(this KeybindInterface __self, UnityEngine.UI.ColorBlock value) => _colorblock.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<KeybindInterface>> _AssignKey3448831654 =
				new System.Lazy<MethodAccessor<KeybindInterface>>(() => MethodAccessor<KeybindInterface>.Create("AssignKey", typeof(KeybindKey)));
		private static readonly System.Lazy<MethodAccessor<KeybindInterface>> _Refresh757602046 =
				new System.Lazy<MethodAccessor<KeybindInterface>>(() => MethodAccessor<KeybindInterface>.Create("Refresh"));

		public static System.Collections.IEnumerator AssignKey(this KeybindInterface __self, KeybindKey key) => (System.Collections.IEnumerator)_AssignKey3448831654.Value.Invoke(__self, key);
		public static void Refresh(this KeybindInterface __self) => _Refresh757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Keybind
	{

		private static readonly System.Lazy<FieldAccessor<Keybind, string>> _identifier =
				new System.Lazy<FieldAccessor<Keybind, string>>(() => FieldAccessor<Keybind, string>.Create("identifier"));
		private static readonly System.Lazy<FieldAccessor<Keybind, UnityEngine.KeyCode>> _mainKey =
				new System.Lazy<FieldAccessor<Keybind, UnityEngine.KeyCode>>(() => FieldAccessor<Keybind, UnityEngine.KeyCode>.Create("mainKey"));
		private static readonly System.Lazy<FieldAccessor<Keybind, UnityEngine.KeyCode>> _altKey =
				new System.Lazy<FieldAccessor<Keybind, UnityEngine.KeyCode>>(() => FieldAccessor<Keybind, UnityEngine.KeyCode>.Create("altKey"));

		public static string GetIdentifier(this Keybind __self) => _identifier.Value.GetValue(__self);
		public static void SetIdentifier(this Keybind __self, string value) => _identifier.Value.SetValue(__self, value);
		public static UnityEngine.KeyCode GetMainKey(this Keybind __self) => _mainKey.Value.GetValue(__self);
		public static void SetMainKey(this Keybind __self, UnityEngine.KeyCode value) => _mainKey.Value.SetValue(__self, value);
		public static UnityEngine.KeyCode GetAltKey(this Keybind __self) => _altKey.Value.GetValue(__self);
		public static void SetAltKey(this Keybind __self, UnityEngine.KeyCode value) => _altKey.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Keybind>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<Keybind>>(() => MethodAccessor<Keybind>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this Keybind __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class Private_MyInput
	{

		private static readonly System.Lazy<StaticMethodAccessor> _IdentifierToKeybind3454057852 =
				new System.Lazy<StaticMethodAccessor>(() => StaticMethodAccessor.Create(typeof(MyInput), "IdentifierToKeybind", typeof(string)));

		public static Keybind IdentifierToKeybind(string identifier) => (Keybind)_IdentifierToKeybind3454057852.Value.Invoke(identifier);

	}

	public static class PrivateAccessor_Settings
	{

		private static readonly System.Lazy<FieldAccessor<Settings, bool>> _helperLogToEditor =
				new System.Lazy<FieldAccessor<Settings, bool>>(() => FieldAccessor<Settings, bool>.Create("helperLogToEditor"));
		private static readonly System.Lazy<FieldAccessor<Settings, UnityEngine.GameObject>> _optionsCanvas =
				new System.Lazy<FieldAccessor<Settings, UnityEngine.GameObject>>(() => FieldAccessor<Settings, UnityEngine.GameObject>.Create("optionsCanvas"));
		private static readonly System.Lazy<FieldAccessor<Settings, UnityEngine.RectTransform>> _panel =
				new System.Lazy<FieldAccessor<Settings, UnityEngine.RectTransform>>(() => FieldAccessor<Settings, UnityEngine.RectTransform>.Create("panel"));
		private static readonly System.Lazy<FieldAccessor<Settings, UnityEngine.RectTransform>> _mainMenuPos =
				new System.Lazy<FieldAccessor<Settings, UnityEngine.RectTransform>>(() => FieldAccessor<Settings, UnityEngine.RectTransform>.Create("mainMenuPos"));
		private static readonly System.Lazy<FieldAccessor<Settings, UnityEngine.RectTransform>> _inGamePos =
				new System.Lazy<FieldAccessor<Settings, UnityEngine.RectTransform>>(() => FieldAccessor<Settings, UnityEngine.RectTransform>.Create("inGamePos"));
		private static readonly System.Lazy<FieldAccessor<Settings, OptionsMenuBox[]>> _optionMenuboxes =
				new System.Lazy<FieldAccessor<Settings, OptionsMenuBox[]>>(() => FieldAccessor<Settings, OptionsMenuBox[]>.Create("optionMenuboxes"));
		private static readonly System.Lazy<FieldAccessor<Settings, string>> _path =
				new System.Lazy<FieldAccessor<Settings, string>>(() => FieldAccessor<Settings, string>.Create("path"));
		private static readonly System.Lazy<FieldAccessor<Settings, RGD_Settings>> _settings =
				new System.Lazy<FieldAccessor<Settings, RGD_Settings>>(() => FieldAccessor<Settings, RGD_Settings>.Create("settings"));

		public static bool GetHelperLogToEditor(this Settings __self) => _helperLogToEditor.Value.GetValue(__self);
		public static void SetHelperLogToEditor(this Settings __self, bool value) => _helperLogToEditor.Value.SetValue(__self, value);
		public static UnityEngine.GameObject GetOptionsCanvas(this Settings __self) => _optionsCanvas.Value.GetValue(__self);
		public static void SetOptionsCanvas(this Settings __self, UnityEngine.GameObject value) => _optionsCanvas.Value.SetValue(__self, value);
		public static UnityEngine.RectTransform GetPanel(this Settings __self) => _panel.Value.GetValue(__self);
		public static void SetPanel(this Settings __self, UnityEngine.RectTransform value) => _panel.Value.SetValue(__self, value);
		public static UnityEngine.RectTransform GetMainMenuPos(this Settings __self) => _mainMenuPos.Value.GetValue(__self);
		public static void SetMainMenuPos(this Settings __self, UnityEngine.RectTransform value) => _mainMenuPos.Value.SetValue(__self, value);
		public static UnityEngine.RectTransform GetInGamePos(this Settings __self) => _inGamePos.Value.GetValue(__self);
		public static void SetInGamePos(this Settings __self, UnityEngine.RectTransform value) => _inGamePos.Value.SetValue(__self, value);
		public static OptionsMenuBox[] GetOptionMenuboxes(this Settings __self) => _optionMenuboxes.Value.GetValue(__self);
		public static void SetOptionMenuboxes(this Settings __self, OptionsMenuBox[] value) => _optionMenuboxes.Value.SetValue(__self, value);
		public static string GetPath(this Settings __self) => _path.Value.GetValue(__self);
		public static void SetPath(this Settings __self, string value) => _path.Value.SetValue(__self, value);
		public static RGD_Settings GetSettings(this Settings __self) => _settings.Value.GetValue(__self);
		public static void SetSettings(this Settings __self, RGD_Settings value) => _settings.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Settings>> _Awake757602046 =
				new System.Lazy<MethodAccessor<Settings>>(() => MethodAccessor<Settings>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<Settings>> _Start757602046 =
				new System.Lazy<MethodAccessor<Settings>>(() => MethodAccessor<Settings>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<Settings>> _CheckCommandLine757602046 =
				new System.Lazy<MethodAccessor<Settings>>(() => MethodAccessor<Settings>.Create("CheckCommandLine"));
		private static readonly System.Lazy<MethodAccessor<Settings>> _OnLocalize757602046 =
				new System.Lazy<MethodAccessor<Settings>>(() => MethodAccessor<Settings>.Create("OnLocalize"));
		private static readonly System.Lazy<MethodAccessor<Settings>> _StartBoxes757602046 =
				new System.Lazy<MethodAccessor<Settings>>(() => MethodAccessor<Settings>.Create("StartBoxes"));
		private static readonly System.Lazy<MethodAccessor<Settings>> _SetCorrectPosition757602046 =
				new System.Lazy<MethodAccessor<Settings>>(() => MethodAccessor<Settings>.Create("SetCorrectPosition"));
		private static readonly System.Lazy<MethodAccessor<Settings>> _SaveAll757602046 =
				new System.Lazy<MethodAccessor<Settings>>(() => MethodAccessor<Settings>.Create("SaveAll"));
		private static readonly System.Lazy<MethodAccessor<Settings>> _LoadAllBoxes757602046 =
				new System.Lazy<MethodAccessor<Settings>>(() => MethodAccessor<Settings>.Create("LoadAllBoxes"));

		public static void Awake(this Settings __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this Settings __self) => _Start757602046.Value.Invoke(__self);
		public static void CheckCommandLine(this Settings __self) => _CheckCommandLine757602046.Value.Invoke(__self);
		public static void OnLocalize(this Settings __self) => _OnLocalize757602046.Value.Invoke(__self);
		public static void StartBoxes(this Settings __self) => _StartBoxes757602046.Value.Invoke(__self);
		public static void SetCorrectPosition(this Settings __self) => _SetCorrectPosition757602046.Value.Invoke(__self);
		public static void SaveAll(this Settings __self) => _SaveAll757602046.Value.Invoke(__self);
		public static void LoadAllBoxes(this Settings __self) => _LoadAllBoxes757602046.Value.Invoke(__self);

	}

	public static class Private_Settings
	{

		private static readonly System.Lazy<StaticFieldAccessor<bool>> _initialized =
				new System.Lazy<StaticFieldAccessor<bool>>(() => StaticFieldAccessor<bool>.Create(typeof(Settings), "initialized"));

		public static bool GetInitialized() => _initialized.Value.GetValue();
		public static void SetInitialized(bool value) => _initialized.Value.SetValue(value);

	}

	public static class PrivateAccessor_RGD_Settings
	{

		private static readonly System.Lazy<MethodAccessor<RGD_Settings>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_Settings>>(() => MethodAccessor<RGD_Settings>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_Settings __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_PauseMenu
	{

		private static readonly System.Lazy<FieldAccessor<PauseMenu, UnityEngine.UI.Button>> _button_save =
				new System.Lazy<FieldAccessor<PauseMenu, UnityEngine.UI.Button>>(() => FieldAccessor<PauseMenu, UnityEngine.UI.Button>.Create("button_save"));
		private static readonly System.Lazy<FieldAccessor<PauseMenu, UnityEngine.UI.Text>> _text_save =
				new System.Lazy<FieldAccessor<PauseMenu, UnityEngine.UI.Text>>(() => FieldAccessor<PauseMenu, UnityEngine.UI.Text>.Create("text_save"));
		private static readonly System.Lazy<FieldAccessor<PauseMenu, UnityEngine.UI.Text>> _text_gamemode =
				new System.Lazy<FieldAccessor<PauseMenu, UnityEngine.UI.Text>>(() => FieldAccessor<PauseMenu, UnityEngine.UI.Text>.Create("text_gamemode"));
		private static readonly System.Lazy<FieldAccessor<PauseMenu, UnityEngine.UI.Text>> _text_host =
				new System.Lazy<FieldAccessor<PauseMenu, UnityEngine.UI.Text>>(() => FieldAccessor<PauseMenu, UnityEngine.UI.Text>.Create("text_host"));
		private static readonly System.Lazy<FieldAccessor<PauseMenu, UnityEngine.UI.Button>> _button_save_diconnected =
				new System.Lazy<FieldAccessor<PauseMenu, UnityEngine.UI.Button>>(() => FieldAccessor<PauseMenu, UnityEngine.UI.Button>.Create("button_save_diconnected"));
		private static readonly System.Lazy<FieldAccessor<PauseMenu, UnityEngine.UI.Text>> _text_save_diconnected =
				new System.Lazy<FieldAccessor<PauseMenu, UnityEngine.UI.Text>>(() => FieldAccessor<PauseMenu, UnityEngine.UI.Text>.Create("text_save_diconnected"));
		private static readonly System.Lazy<FieldAccessor<PauseMenu, Raft_Network>> _network =
				new System.Lazy<FieldAccessor<PauseMenu, Raft_Network>>(() => FieldAccessor<PauseMenu, Raft_Network>.Create("network"));
		private static readonly System.Lazy<FieldAccessor<PauseMenu, CanvasHelper>> _canvas =
				new System.Lazy<FieldAccessor<PauseMenu, CanvasHelper>>(() => FieldAccessor<PauseMenu, CanvasHelper>.Create("canvas"));
		private static readonly System.Lazy<FieldAccessor<PauseMenu, Settings>> _settings =
				new System.Lazy<FieldAccessor<PauseMenu, Settings>>(() => FieldAccessor<PauseMenu, Settings>.Create("settings"));
		private static readonly System.Lazy<FieldAccessor<PauseMenu, SaveAndLoad>> _saveandload =
				new System.Lazy<FieldAccessor<PauseMenu, SaveAndLoad>>(() => FieldAccessor<PauseMenu, SaveAndLoad>.Create("saveandload"));
		private static readonly System.Lazy<FieldAccessor<PauseMenu, SceneName>> _exitScene =
				new System.Lazy<FieldAccessor<PauseMenu, SceneName>>(() => FieldAccessor<PauseMenu, SceneName>.Create("exitScene"));

		public static UnityEngine.UI.Button GetButton_save(this PauseMenu __self) => _button_save.Value.GetValue(__self);
		public static void SetButton_save(this PauseMenu __self, UnityEngine.UI.Button value) => _button_save.Value.SetValue(__self, value);
		public static UnityEngine.UI.Text GetText_save(this PauseMenu __self) => _text_save.Value.GetValue(__self);
		public static void SetText_save(this PauseMenu __self, UnityEngine.UI.Text value) => _text_save.Value.SetValue(__self, value);
		public static UnityEngine.UI.Text GetText_gamemode(this PauseMenu __self) => _text_gamemode.Value.GetValue(__self);
		public static void SetText_gamemode(this PauseMenu __self, UnityEngine.UI.Text value) => _text_gamemode.Value.SetValue(__self, value);
		public static UnityEngine.UI.Text GetText_host(this PauseMenu __self) => _text_host.Value.GetValue(__self);
		public static void SetText_host(this PauseMenu __self, UnityEngine.UI.Text value) => _text_host.Value.SetValue(__self, value);
		public static UnityEngine.UI.Button GetButton_save_diconnected(this PauseMenu __self) => _button_save_diconnected.Value.GetValue(__self);
		public static void SetButton_save_diconnected(this PauseMenu __self, UnityEngine.UI.Button value) => _button_save_diconnected.Value.SetValue(__self, value);
		public static UnityEngine.UI.Text GetText_save_diconnected(this PauseMenu __self) => _text_save_diconnected.Value.GetValue(__self);
		public static void SetText_save_diconnected(this PauseMenu __self, UnityEngine.UI.Text value) => _text_save_diconnected.Value.SetValue(__self, value);
		public static Raft_Network GetNetwork(this PauseMenu __self) => _network.Value.GetValue(__self);
		public static void SetNetwork(this PauseMenu __self, Raft_Network value) => _network.Value.SetValue(__self, value);
		public static CanvasHelper GetCanvas(this PauseMenu __self) => _canvas.Value.GetValue(__self);
		public static void SetCanvas(this PauseMenu __self, CanvasHelper value) => _canvas.Value.SetValue(__self, value);
		public static Settings GetSettings(this PauseMenu __self) => _settings.Value.GetValue(__self);
		public static void SetSettings(this PauseMenu __self, Settings value) => _settings.Value.SetValue(__self, value);
		public static SaveAndLoad GetSaveandload(this PauseMenu __self) => _saveandload.Value.GetValue(__self);
		public static void SetSaveandload(this PauseMenu __self, SaveAndLoad value) => _saveandload.Value.SetValue(__self, value);
		public static SceneName GetExitScene(this PauseMenu __self) => _exitScene.Value.GetValue(__self);
		public static void SetExitScene(this PauseMenu __self, SceneName value) => _exitScene.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<PauseMenu>> _Awake757602046 =
				new System.Lazy<MethodAccessor<PauseMenu>>(() => MethodAccessor<PauseMenu>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<PauseMenu>> _Start757602046 =
				new System.Lazy<MethodAccessor<PauseMenu>>(() => MethodAccessor<PauseMenu>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<PauseMenu>> _Update757602046 =
				new System.Lazy<MethodAccessor<PauseMenu>>(() => MethodAccessor<PauseMenu>.Create("Update"));

		public static void Awake(this PauseMenu __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this PauseMenu __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this PauseMenu __self) => _Update757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_PieMenu
	{

		private static readonly System.Lazy<FieldAccessor<PieMenu, System.Collections.Generic.List<PieSlice>>> _slices =
				new System.Lazy<FieldAccessor<PieMenu, System.Collections.Generic.List<PieSlice>>>(() => FieldAccessor<PieMenu, System.Collections.Generic.List<PieSlice>>.Create("slices"));
		private static readonly System.Lazy<FieldAccessor<PieMenu, float>> _anglePerButton =
				new System.Lazy<FieldAccessor<PieMenu, float>>(() => FieldAccessor<PieMenu, float>.Create("anglePerButton"));
		private static readonly System.Lazy<FieldAccessor<PieMenu, UnityEngine.Vector2>> _fakeBoxPos =
				new System.Lazy<FieldAccessor<PieMenu, UnityEngine.Vector2>>(() => FieldAccessor<PieMenu, UnityEngine.Vector2>.Create("fakeBoxPos"));
		private static readonly System.Lazy<FieldAccessor<PieMenu, UnityEngine.Vector2>> _prevMousepos =
				new System.Lazy<FieldAccessor<PieMenu, UnityEngine.Vector2>>(() => FieldAccessor<PieMenu, UnityEngine.Vector2>.Create("prevMousepos"));
		private static readonly System.Lazy<FieldAccessor<PieMenu, int>> _selectedIndex =
				new System.Lazy<FieldAccessor<PieMenu, int>>(() => FieldAccessor<PieMenu, int>.Create("selectedIndex"));
		private static readonly System.Lazy<FieldAccessor<PieMenu, int>> _previousIndex =
				new System.Lazy<FieldAccessor<PieMenu, int>>(() => FieldAccessor<PieMenu, int>.Create("previousIndex"));

		public static System.Collections.Generic.List<PieSlice> GetSlices(this PieMenu __self) => _slices.Value.GetValue(__self);
		public static void SetSlices(this PieMenu __self, System.Collections.Generic.List<PieSlice> value) => _slices.Value.SetValue(__self, value);
		public static float GetAnglePerButton(this PieMenu __self) => _anglePerButton.Value.GetValue(__self);
		public static void SetAnglePerButton(this PieMenu __self, float value) => _anglePerButton.Value.SetValue(__self, value);
		public static UnityEngine.Vector2 GetFakeBoxPos(this PieMenu __self) => _fakeBoxPos.Value.GetValue(__self);
		public static void SetFakeBoxPos(this PieMenu __self, UnityEngine.Vector2 value) => _fakeBoxPos.Value.SetValue(__self, value);
		public static UnityEngine.Vector2 GetPrevMousepos(this PieMenu __self) => _prevMousepos.Value.GetValue(__self);
		public static void SetPrevMousepos(this PieMenu __self, UnityEngine.Vector2 value) => _prevMousepos.Value.SetValue(__self, value);
		public static int GetSelectedIndex(this PieMenu __self) => _selectedIndex.Value.GetValue(__self);
		public static void SetSelectedIndex(this PieMenu __self, int value) => _selectedIndex.Value.SetValue(__self, value);
		public static int GetPreviousIndex(this PieMenu __self) => _previousIndex.Value.GetValue(__self);
		public static void SetPreviousIndex(this PieMenu __self, int value) => _previousIndex.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<PieMenu>> _Update757602046 =
				new System.Lazy<MethodAccessor<PieMenu>>(() => MethodAccessor<PieMenu>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<PieMenu>> _GetItemInMenu757602046 =
				new System.Lazy<MethodAccessor<PieMenu>>(() => MethodAccessor<PieMenu>.Create("GetItemInMenu"));

		public static void Update(this PieMenu __self) => _Update757602046.Value.Invoke(__self);
		public static void GetItemInMenu(this PieMenu __self) => _GetItemInMenu757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_PieSlice
	{

		private static readonly System.Lazy<MethodAccessor<PieSlice>> _OnValidate757602046 =
				new System.Lazy<MethodAccessor<PieSlice>>(() => MethodAccessor<PieSlice>.Create("OnValidate"));
		private static readonly System.Lazy<MethodAccessor<PieSlice>> _SetImageAtCenterOfSlice757602046 =
				new System.Lazy<MethodAccessor<PieSlice>>(() => MethodAccessor<PieSlice>.Create("SetImageAtCenterOfSlice"));

		public static void OnValidate(this PieSlice __self) => _OnValidate757602046.Value.Invoke(__self);
		public static void SetImageAtCenterOfSlice(this PieSlice __self) => _SetImageAtCenterOfSlice757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AntennaPanel
	{

		private static readonly System.Lazy<FieldAccessor<AntennaPanel, UnityEngine.GameObject>> _error_CloseToReciever =
				new System.Lazy<FieldAccessor<AntennaPanel, UnityEngine.GameObject>>(() => FieldAccessor<AntennaPanel, UnityEngine.GameObject>.Create("error_CloseToReciever"));
		private static readonly System.Lazy<FieldAccessor<AntennaPanel, UnityEngine.GameObject>> _error_FarAwayFromReciever =
				new System.Lazy<FieldAccessor<AntennaPanel, UnityEngine.GameObject>>(() => FieldAccessor<AntennaPanel, UnityEngine.GameObject>.Create("error_FarAwayFromReciever"));
		private static readonly System.Lazy<FieldAccessor<AntennaPanel, UnityEngine.GameObject>> _error_CloseToOtherAntenna =
				new System.Lazy<FieldAccessor<AntennaPanel, UnityEngine.GameObject>>(() => FieldAccessor<AntennaPanel, UnityEngine.GameObject>.Create("error_CloseToOtherAntenna"));
		private static readonly System.Lazy<FieldAccessor<AntennaPanel, UnityEngine.GameObject>> _error_WrongAltitude =
				new System.Lazy<FieldAccessor<AntennaPanel, UnityEngine.GameObject>>(() => FieldAccessor<AntennaPanel, UnityEngine.GameObject>.Create("error_WrongAltitude"));
		private static readonly System.Lazy<FieldAccessor<AntennaPanel, UnityEngine.GameObject>> _error_notConnected =
				new System.Lazy<FieldAccessor<AntennaPanel, UnityEngine.GameObject>>(() => FieldAccessor<AntennaPanel, UnityEngine.GameObject>.Create("error_notConnected"));
		private static readonly System.Lazy<FieldAccessor<AntennaPanel, UnityEngine.GameObject>> _errorImage =
				new System.Lazy<FieldAccessor<AntennaPanel, UnityEngine.GameObject>>(() => FieldAccessor<AntennaPanel, UnityEngine.GameObject>.Create("errorImage"));
		private static readonly System.Lazy<FieldAccessor<AntennaPanel, UnityEngine.GameObject>> _checkboxImage =
				new System.Lazy<FieldAccessor<AntennaPanel, UnityEngine.GameObject>>(() => FieldAccessor<AntennaPanel, UnityEngine.GameObject>.Create("checkboxImage"));

		public static UnityEngine.GameObject GetError_CloseToReciever(this AntennaPanel __self) => _error_CloseToReciever.Value.GetValue(__self);
		public static void SetError_CloseToReciever(this AntennaPanel __self, UnityEngine.GameObject value) => _error_CloseToReciever.Value.SetValue(__self, value);
		public static UnityEngine.GameObject GetError_FarAwayFromReciever(this AntennaPanel __self) => _error_FarAwayFromReciever.Value.GetValue(__self);
		public static void SetError_FarAwayFromReciever(this AntennaPanel __self, UnityEngine.GameObject value) => _error_FarAwayFromReciever.Value.SetValue(__self, value);
		public static UnityEngine.GameObject GetError_CloseToOtherAntenna(this AntennaPanel __self) => _error_CloseToOtherAntenna.Value.GetValue(__self);
		public static void SetError_CloseToOtherAntenna(this AntennaPanel __self, UnityEngine.GameObject value) => _error_CloseToOtherAntenna.Value.SetValue(__self, value);
		public static UnityEngine.GameObject GetError_WrongAltitude(this AntennaPanel __self) => _error_WrongAltitude.Value.GetValue(__self);
		public static void SetError_WrongAltitude(this AntennaPanel __self, UnityEngine.GameObject value) => _error_WrongAltitude.Value.SetValue(__self, value);
		public static UnityEngine.GameObject GetError_notConnected(this AntennaPanel __self) => _error_notConnected.Value.GetValue(__self);
		public static void SetError_notConnected(this AntennaPanel __self, UnityEngine.GameObject value) => _error_notConnected.Value.SetValue(__self, value);
		public static UnityEngine.GameObject GetErrorImage(this AntennaPanel __self) => _errorImage.Value.GetValue(__self);
		public static void SetErrorImage(this AntennaPanel __self, UnityEngine.GameObject value) => _errorImage.Value.SetValue(__self, value);
		public static UnityEngine.GameObject GetCheckboxImage(this AntennaPanel __self) => _checkboxImage.Value.GetValue(__self);
		public static void SetCheckboxImage(this AntennaPanel __self, UnityEngine.GameObject value) => _checkboxImage.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AntennaPanel>> _HideStandardErrors757602046 =
				new System.Lazy<MethodAccessor<AntennaPanel>>(() => MethodAccessor<AntennaPanel>.Create("HideStandardErrors"));

		public static void HideStandardErrors(this AntennaPanel __self) => _HideStandardErrors757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AvaialableResearchItem
	{

		private static readonly System.Lazy<FieldAccessor<AvaialableResearchItem, UnityEngine.UI.Image>> _image =
				new System.Lazy<FieldAccessor<AvaialableResearchItem, UnityEngine.UI.Image>>(() => FieldAccessor<AvaialableResearchItem, UnityEngine.UI.Image>.Create("image"));
		private static readonly System.Lazy<FieldAccessor<AvaialableResearchItem, UnityEngine.CanvasGroup>> _canvasGroup =
				new System.Lazy<FieldAccessor<AvaialableResearchItem, UnityEngine.CanvasGroup>>(() => FieldAccessor<AvaialableResearchItem, UnityEngine.CanvasGroup>.Create("canvasGroup"));
		private static readonly System.Lazy<FieldAccessor<AvaialableResearchItem, Item_Base>> _item =
				new System.Lazy<FieldAccessor<AvaialableResearchItem, Item_Base>>(() => FieldAccessor<AvaialableResearchItem, Item_Base>.Create("item"));
		private static readonly System.Lazy<FieldAccessor<AvaialableResearchItem, bool>> _researched =
				new System.Lazy<FieldAccessor<AvaialableResearchItem, bool>>(() => FieldAccessor<AvaialableResearchItem, bool>.Create("researched"));
		private static readonly System.Lazy<FieldAccessor<AvaialableResearchItem, PlayerInventory>> _playerInventory =
				new System.Lazy<FieldAccessor<AvaialableResearchItem, PlayerInventory>>(() => FieldAccessor<AvaialableResearchItem, PlayerInventory>.Create("playerInventory"));

		public static UnityEngine.UI.Image GetImage(this AvaialableResearchItem __self) => _image.Value.GetValue(__self);
		public static void SetImage(this AvaialableResearchItem __self, UnityEngine.UI.Image value) => _image.Value.SetValue(__self, value);
		public static UnityEngine.CanvasGroup GetCanvasGroup(this AvaialableResearchItem __self) => _canvasGroup.Value.GetValue(__self);
		public static void SetCanvasGroup(this AvaialableResearchItem __self, UnityEngine.CanvasGroup value) => _canvasGroup.Value.SetValue(__self, value);
		public static Item_Base GetItem(this AvaialableResearchItem __self) => _item.Value.GetValue(__self);
		public static void SetItem(this AvaialableResearchItem __self, Item_Base value) => _item.Value.SetValue(__self, value);
		public static bool GetResearched(this AvaialableResearchItem __self) => _researched.Value.GetValue(__self);
		public static void SetResearched(this AvaialableResearchItem __self, bool value) => _researched.Value.SetValue(__self, value);
		public static PlayerInventory GetPlayerInventory(this AvaialableResearchItem __self) => _playerInventory.Value.GetValue(__self);
		public static void SetPlayerInventory(this AvaialableResearchItem __self, PlayerInventory value) => _playerInventory.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_BingoMenuItem
	{

		private static readonly System.Lazy<FieldAccessor<BingoMenuItem, UnityEngine.UI.Image>> _itemImage =
				new System.Lazy<FieldAccessor<BingoMenuItem, UnityEngine.UI.Image>>(() => FieldAccessor<BingoMenuItem, UnityEngine.UI.Image>.Create("itemImage"));
		private static readonly System.Lazy<FieldAccessor<BingoMenuItem, UnityEngine.GameObject>> _researchCheckbox =
				new System.Lazy<FieldAccessor<BingoMenuItem, UnityEngine.GameObject>>(() => FieldAccessor<BingoMenuItem, UnityEngine.GameObject>.Create("researchCheckbox"));
		private static readonly System.Lazy<FieldAccessor<BingoMenuItem, bool>> _bingoState =
				new System.Lazy<FieldAccessor<BingoMenuItem, bool>>(() => FieldAccessor<BingoMenuItem, bool>.Create("bingoState"));
		private static readonly System.Lazy<FieldAccessor<BingoMenuItem, Item_Base>> _bingoItem =
				new System.Lazy<FieldAccessor<BingoMenuItem, Item_Base>>(() => FieldAccessor<BingoMenuItem, Item_Base>.Create("bingoItem"));

		public static UnityEngine.UI.Image GetItemImage(this BingoMenuItem __self) => _itemImage.Value.GetValue(__self);
		public static void SetItemImage(this BingoMenuItem __self, UnityEngine.UI.Image value) => _itemImage.Value.SetValue(__self, value);
		public static UnityEngine.GameObject GetResearchCheckbox(this BingoMenuItem __self) => _researchCheckbox.Value.GetValue(__self);
		public static void SetResearchCheckbox(this BingoMenuItem __self, UnityEngine.GameObject value) => _researchCheckbox.Value.SetValue(__self, value);
		public static bool GetBingoState(this BingoMenuItem __self) => _bingoState.Value.GetValue(__self);
		public static void SetBingoState(this BingoMenuItem __self, bool value) => _bingoState.Value.SetValue(__self, value);
		public static Item_Base GetBingoItem(this BingoMenuItem __self) => _bingoItem.Value.GetValue(__self);
		public static void SetBingoItem(this BingoMenuItem __self, Item_Base value) => _bingoItem.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_ResearchMenuItem
	{

		private static readonly System.Lazy<FieldAccessor<ResearchMenuItem, UnityEngine.UI.Image>> _itemImage =
				new System.Lazy<FieldAccessor<ResearchMenuItem, UnityEngine.UI.Image>>(() => FieldAccessor<ResearchMenuItem, UnityEngine.UI.Image>.Create("itemImage"));
		private static readonly System.Lazy<FieldAccessor<ResearchMenuItem, UnityEngine.UI.Image>> _backgroundImage =
				new System.Lazy<FieldAccessor<ResearchMenuItem, UnityEngine.UI.Image>>(() => FieldAccessor<ResearchMenuItem, UnityEngine.UI.Image>.Create("backgroundImage"));
		private static readonly System.Lazy<FieldAccessor<ResearchMenuItem, BingoMenuItem>> _bingoItemPrefab =
				new System.Lazy<FieldAccessor<ResearchMenuItem, BingoMenuItem>>(() => FieldAccessor<ResearchMenuItem, BingoMenuItem>.Create("bingoItemPrefab"));
		private static readonly System.Lazy<FieldAccessor<ResearchMenuItem, UnityEngine.RectTransform>> _bingoParent =
				new System.Lazy<FieldAccessor<ResearchMenuItem, UnityEngine.RectTransform>>(() => FieldAccessor<ResearchMenuItem, UnityEngine.RectTransform>.Create("bingoParent"));
		private static readonly System.Lazy<FieldAccessor<ResearchMenuItem, UnityEngine.UI.Button>> _learnButton =
				new System.Lazy<FieldAccessor<ResearchMenuItem, UnityEngine.UI.Button>>(() => FieldAccessor<ResearchMenuItem, UnityEngine.UI.Button>.Create("learnButton"));
		private static readonly System.Lazy<FieldAccessor<ResearchMenuItem, UnityEngine.UI.Text>> _learnedText =
				new System.Lazy<FieldAccessor<ResearchMenuItem, UnityEngine.UI.Text>>(() => FieldAccessor<ResearchMenuItem, UnityEngine.UI.Text>.Create("learnedText"));
		private static readonly System.Lazy<FieldAccessor<ResearchMenuItem, UnityEngine.CanvasGroup>> _canvasgroup =
				new System.Lazy<FieldAccessor<ResearchMenuItem, UnityEngine.CanvasGroup>>(() => FieldAccessor<ResearchMenuItem, UnityEngine.CanvasGroup>.Create("canvasgroup"));
		private static readonly System.Lazy<FieldAccessor<ResearchMenuItem, CraftingMenu>> _craftingMenu =
				new System.Lazy<FieldAccessor<ResearchMenuItem, CraftingMenu>>(() => FieldAccessor<ResearchMenuItem, CraftingMenu>.Create("craftingMenu"));
		private static readonly System.Lazy<FieldAccessor<ResearchMenuItem, Item_Base>> _item =
				new System.Lazy<FieldAccessor<ResearchMenuItem, Item_Base>>(() => FieldAccessor<ResearchMenuItem, Item_Base>.Create("item"));
		private static readonly System.Lazy<FieldAccessor<ResearchMenuItem, System.Collections.Generic.List<BingoMenuItem>>> _bingoMenuItems =
				new System.Lazy<FieldAccessor<ResearchMenuItem, System.Collections.Generic.List<BingoMenuItem>>>(() => FieldAccessor<ResearchMenuItem, System.Collections.Generic.List<BingoMenuItem>>.Create("bingoMenuItems"));
		private static readonly System.Lazy<FieldAccessor<ResearchMenuItem, bool>> _learned =
				new System.Lazy<FieldAccessor<ResearchMenuItem, bool>>(() => FieldAccessor<ResearchMenuItem, bool>.Create("learned"));
		private static readonly System.Lazy<FieldAccessor<ResearchMenuItem, Inventory_ResearchTable>> _inventoryRef =
				new System.Lazy<FieldAccessor<ResearchMenuItem, Inventory_ResearchTable>>(() => FieldAccessor<ResearchMenuItem, Inventory_ResearchTable>.Create("inventoryRef"));

		public static UnityEngine.UI.Image GetItemImage(this ResearchMenuItem __self) => _itemImage.Value.GetValue(__self);
		public static void SetItemImage(this ResearchMenuItem __self, UnityEngine.UI.Image value) => _itemImage.Value.SetValue(__self, value);
		public static UnityEngine.UI.Image GetBackgroundImage(this ResearchMenuItem __self) => _backgroundImage.Value.GetValue(__self);
		public static void SetBackgroundImage(this ResearchMenuItem __self, UnityEngine.UI.Image value) => _backgroundImage.Value.SetValue(__self, value);
		public static BingoMenuItem GetBingoItemPrefab(this ResearchMenuItem __self) => _bingoItemPrefab.Value.GetValue(__self);
		public static void SetBingoItemPrefab(this ResearchMenuItem __self, BingoMenuItem value) => _bingoItemPrefab.Value.SetValue(__self, value);
		public static UnityEngine.RectTransform GetBingoParent(this ResearchMenuItem __self) => _bingoParent.Value.GetValue(__self);
		public static void SetBingoParent(this ResearchMenuItem __self, UnityEngine.RectTransform value) => _bingoParent.Value.SetValue(__self, value);
		public static UnityEngine.UI.Button GetLearnButton(this ResearchMenuItem __self) => _learnButton.Value.GetValue(__self);
		public static void SetLearnButton(this ResearchMenuItem __self, UnityEngine.UI.Button value) => _learnButton.Value.SetValue(__self, value);
		public static UnityEngine.UI.Text GetLearnedText(this ResearchMenuItem __self) => _learnedText.Value.GetValue(__self);
		public static void SetLearnedText(this ResearchMenuItem __self, UnityEngine.UI.Text value) => _learnedText.Value.SetValue(__self, value);
		public static UnityEngine.CanvasGroup GetCanvasgroup(this ResearchMenuItem __self) => _canvasgroup.Value.GetValue(__self);
		public static void SetCanvasgroup(this ResearchMenuItem __self, UnityEngine.CanvasGroup value) => _canvasgroup.Value.SetValue(__self, value);
		public static CraftingMenu GetCraftingMenu(this ResearchMenuItem __self) => _craftingMenu.Value.GetValue(__self);
		public static void SetCraftingMenu(this ResearchMenuItem __self, CraftingMenu value) => _craftingMenu.Value.SetValue(__self, value);
		public static Item_Base GetItem(this ResearchMenuItem __self) => _item.Value.GetValue(__self);
		public static void SetItem(this ResearchMenuItem __self, Item_Base value) => _item.Value.SetValue(__self, value);
		public static System.Collections.Generic.List<BingoMenuItem> GetBingoMenuItems(this ResearchMenuItem __self) => _bingoMenuItems.Value.GetValue(__self);
		public static void SetBingoMenuItems(this ResearchMenuItem __self, System.Collections.Generic.List<BingoMenuItem> value) => _bingoMenuItems.Value.SetValue(__self, value);
		public static bool GetLearned(this ResearchMenuItem __self) => _learned.Value.GetValue(__self);
		public static void SetLearned(this ResearchMenuItem __self, bool value) => _learned.Value.SetValue(__self, value);
		public static Inventory_ResearchTable GetInventoryRef(this ResearchMenuItem __self) => _inventoryRef.Value.GetValue(__self);
		public static void SetInventoryRef(this ResearchMenuItem __self, Inventory_ResearchTable value) => _inventoryRef.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<ResearchMenuItem>> _Start757602046 =
				new System.Lazy<MethodAccessor<ResearchMenuItem>>(() => MethodAccessor<ResearchMenuItem>.Create("Start"));

		public static void Start(this ResearchMenuItem __self) => _Start757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_SliderFillHelper
	{

		private static readonly System.Lazy<MethodAccessor<SliderFillHelper>> _Awake757602046 =
				new System.Lazy<MethodAccessor<SliderFillHelper>>(() => MethodAccessor<SliderFillHelper>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<SliderFillHelper>> _UpdateSlider3470665460 =
				new System.Lazy<MethodAccessor<SliderFillHelper>>(() => MethodAccessor<SliderFillHelper>.Create("UpdateSlider", typeof(UnityEngine.UI.Slider)));

		public static void Awake(this SliderFillHelper __self) => _Awake757602046.Value.Invoke(__self);
		public static void UpdateSlider(this SliderFillHelper __self, UnityEngine.UI.Slider slider) => _UpdateSlider3470665460.Value.Invoke(__self, slider);

	}

	public static class PrivateAccessor_TabButton
	{

		private static readonly System.Lazy<FieldAccessor<TabButton, UnityEngine.Color>> _buttonHighlightColor =
				new System.Lazy<FieldAccessor<TabButton, UnityEngine.Color>>(() => FieldAccessor<TabButton, UnityEngine.Color>.Create("buttonHighlightColor"));
		private static readonly System.Lazy<FieldAccessor<TabButton, UnityEngine.Color>> _buttonNormalColor =
				new System.Lazy<FieldAccessor<TabButton, UnityEngine.Color>>(() => FieldAccessor<TabButton, UnityEngine.Color>.Create("buttonNormalColor"));
		private static readonly System.Lazy<FieldAccessor<TabButton, UnityEngine.UI.Image>> _highlight =
				new System.Lazy<FieldAccessor<TabButton, UnityEngine.UI.Image>>(() => FieldAccessor<TabButton, UnityEngine.UI.Image>.Create("highlight"));
		private static readonly System.Lazy<FieldAccessor<TabButton, UnityEngine.UI.Image[]>> _extraImages =
				new System.Lazy<FieldAccessor<TabButton, UnityEngine.UI.Image[]>>(() => FieldAccessor<TabButton, UnityEngine.UI.Image[]>.Create("extraImages"));
		private static readonly System.Lazy<FieldAccessor<TabButton, UnityEngine.Color>> _textHighlightColor =
				new System.Lazy<FieldAccessor<TabButton, UnityEngine.Color>>(() => FieldAccessor<TabButton, UnityEngine.Color>.Create("textHighlightColor"));
		private static readonly System.Lazy<FieldAccessor<TabButton, UnityEngine.Color>> _textNormalColor =
				new System.Lazy<FieldAccessor<TabButton, UnityEngine.Color>>(() => FieldAccessor<TabButton, UnityEngine.Color>.Create("textNormalColor"));
		private static readonly System.Lazy<FieldAccessor<TabButton, UnityEngine.GameObject>> _tab =
				new System.Lazy<FieldAccessor<TabButton, UnityEngine.GameObject>>(() => FieldAccessor<TabButton, UnityEngine.GameObject>.Create("tab"));
		private static readonly System.Lazy<FieldAccessor<TabButton, TabGroup>> _tabGroup =
				new System.Lazy<FieldAccessor<TabButton, TabGroup>>(() => FieldAccessor<TabButton, TabGroup>.Create("tabGroup"));
		private static readonly System.Lazy<FieldAccessor<TabButton, bool>> _isInteractable =
				new System.Lazy<FieldAccessor<TabButton, bool>>(() => FieldAccessor<TabButton, bool>.Create("isInteractable"));

		public static UnityEngine.Color GetButtonHighlightColor(this TabButton __self) => _buttonHighlightColor.Value.GetValue(__self);
		public static void SetButtonHighlightColor(this TabButton __self, UnityEngine.Color value) => _buttonHighlightColor.Value.SetValue(__self, value);
		public static UnityEngine.Color GetButtonNormalColor(this TabButton __self) => _buttonNormalColor.Value.GetValue(__self);
		public static void SetButtonNormalColor(this TabButton __self, UnityEngine.Color value) => _buttonNormalColor.Value.SetValue(__self, value);
		public static UnityEngine.UI.Image GetHighlight(this TabButton __self) => _highlight.Value.GetValue(__self);
		public static void SetHighlight(this TabButton __self, UnityEngine.UI.Image value) => _highlight.Value.SetValue(__self, value);
		public static UnityEngine.UI.Image[] GetExtraImages(this TabButton __self) => _extraImages.Value.GetValue(__self);
		public static void SetExtraImages(this TabButton __self, UnityEngine.UI.Image[] value) => _extraImages.Value.SetValue(__self, value);
		public static UnityEngine.Color GetTextHighlightColor(this TabButton __self) => _textHighlightColor.Value.GetValue(__self);
		public static void SetTextHighlightColor(this TabButton __self, UnityEngine.Color value) => _textHighlightColor.Value.SetValue(__self, value);
		public static UnityEngine.Color GetTextNormalColor(this TabButton __self) => _textNormalColor.Value.GetValue(__self);
		public static void SetTextNormalColor(this TabButton __self, UnityEngine.Color value) => _textNormalColor.Value.SetValue(__self, value);
		public static UnityEngine.GameObject GetTab(this TabButton __self) => _tab.Value.GetValue(__self);
		public static void SetTab(this TabButton __self, UnityEngine.GameObject value) => _tab.Value.SetValue(__self, value);
		public static TabGroup GetTabGroup(this TabButton __self) => _tabGroup.Value.GetValue(__self);
		public static void SetTabGroup(this TabButton __self, TabGroup value) => _tabGroup.Value.SetValue(__self, value);
		public static bool GetIsInteractable(this TabButton __self) => _isInteractable.Value.GetValue(__self);
		public static void SetIsInteractable(this TabButton __self, bool value) => _isInteractable.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<TabButton>> _Start757602046 =
				new System.Lazy<MethodAccessor<TabButton>>(() => MethodAccessor<TabButton>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<TabButton>> _SetColorToImages2147806663 =
				new System.Lazy<MethodAccessor<TabButton>>(() => MethodAccessor<TabButton>.Create("SetColorToImages", typeof(UnityEngine.UI.Image[]), typeof(UnityEngine.Color)));

		public static void Start(this TabButton __self) => _Start757602046.Value.Invoke(__self);
		public static void SetColorToImages(this TabButton __self, UnityEngine.UI.Image[] images, UnityEngine.Color color) => _SetColorToImages2147806663.Value.Invoke(__self, images, color);

	}

	public static class PrivateAccessor_TabButtonGameMode
	{

		private static readonly System.Lazy<FieldAccessor<TabButtonGameMode, GameMode>> _tabGameMode =
				new System.Lazy<FieldAccessor<TabButtonGameMode, GameMode>>(() => FieldAccessor<TabButtonGameMode, GameMode>.Create("tabGameMode"));

		public static GameMode GetTabGameMode(this TabButtonGameMode __self) => _tabGameMode.Value.GetValue(__self);
		public static void SetTabGameMode(this TabButtonGameMode __self, GameMode value) => _tabGameMode.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_TabButton_Character
	{

		private static readonly System.Lazy<FieldAccessor<TabButton_Character, UnityEngine.UI.Image>> _lockedImage =
				new System.Lazy<FieldAccessor<TabButton_Character, UnityEngine.UI.Image>>(() => FieldAccessor<TabButton_Character, UnityEngine.UI.Image>.Create("lockedImage"));
		private static readonly System.Lazy<FieldAccessor<TabButton_Character, UnityEngine.Color>> _lockHighlightColor =
				new System.Lazy<FieldAccessor<TabButton_Character, UnityEngine.Color>>(() => FieldAccessor<TabButton_Character, UnityEngine.Color>.Create("lockHighlightColor"));
		private static readonly System.Lazy<FieldAccessor<TabButton_Character, UnityEngine.Color>> _lockNormalColor =
				new System.Lazy<FieldAccessor<TabButton_Character, UnityEngine.Color>>(() => FieldAccessor<TabButton_Character, UnityEngine.Color>.Create("lockNormalColor"));
		private static readonly System.Lazy<FieldAccessor<TabButton_Character, UnityEngine.Material>> _lockedMaterial =
				new System.Lazy<FieldAccessor<TabButton_Character, UnityEngine.Material>>(() => FieldAccessor<TabButton_Character, UnityEngine.Material>.Create("lockedMaterial"));
		private static readonly System.Lazy<FieldAccessor<TabButton_Character, UnityEngine.Renderer[]>> _renderers =
				new System.Lazy<FieldAccessor<TabButton_Character, UnityEngine.Renderer[]>>(() => FieldAccessor<TabButton_Character, UnityEngine.Renderer[]>.Create("renderers"));
		private static readonly System.Lazy<FieldAccessor<TabButton_Character, MaterialRendConnection[]>> _materialConnections =
				new System.Lazy<FieldAccessor<TabButton_Character, MaterialRendConnection[]>>(() => FieldAccessor<TabButton_Character, MaterialRendConnection[]>.Create("materialConnections"));
		private static readonly System.Lazy<FieldAccessor<TabButton_Character, bool>> _hasInitializedRenderers =
				new System.Lazy<FieldAccessor<TabButton_Character, bool>>(() => FieldAccessor<TabButton_Character, bool>.Create("hasInitializedRenderers"));

		public static UnityEngine.UI.Image GetLockedImage(this TabButton_Character __self) => _lockedImage.Value.GetValue(__self);
		public static void SetLockedImage(this TabButton_Character __self, UnityEngine.UI.Image value) => _lockedImage.Value.SetValue(__self, value);
		public static UnityEngine.Color GetLockHighlightColor(this TabButton_Character __self) => _lockHighlightColor.Value.GetValue(__self);
		public static void SetLockHighlightColor(this TabButton_Character __self, UnityEngine.Color value) => _lockHighlightColor.Value.SetValue(__self, value);
		public static UnityEngine.Color GetLockNormalColor(this TabButton_Character __self) => _lockNormalColor.Value.GetValue(__self);
		public static void SetLockNormalColor(this TabButton_Character __self, UnityEngine.Color value) => _lockNormalColor.Value.SetValue(__self, value);
		public static UnityEngine.Material GetLockedMaterial(this TabButton_Character __self) => _lockedMaterial.Value.GetValue(__self);
		public static void SetLockedMaterial(this TabButton_Character __self, UnityEngine.Material value) => _lockedMaterial.Value.SetValue(__self, value);
		public static UnityEngine.Renderer[] GetRenderers(this TabButton_Character __self) => _renderers.Value.GetValue(__self);
		public static void SetRenderers(this TabButton_Character __self, UnityEngine.Renderer[] value) => _renderers.Value.SetValue(__self, value);
		public static MaterialRendConnection[] GetMaterialConnections(this TabButton_Character __self) => _materialConnections.Value.GetValue(__self);
		public static void SetMaterialConnections(this TabButton_Character __self, MaterialRendConnection[] value) => _materialConnections.Value.SetValue(__self, value);
		public static bool GetHasInitializedRenderers(this TabButton_Character __self) => _hasInitializedRenderers.Value.GetValue(__self);
		public static void SetHasInitializedRenderers(this TabButton_Character __self, bool value) => _hasInitializedRenderers.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<TabButton_Character>> _InitializeRenderers757602046 =
				new System.Lazy<MethodAccessor<TabButton_Character>>(() => MethodAccessor<TabButton_Character>.Create("InitializeRenderers"));

		public static void InitializeRenderers(this TabButton_Character __self) => _InitializeRenderers757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_TabButton_ColorScheme
	{

		private static readonly System.Lazy<FieldAccessor<TabButton_ColorScheme, CharacterBox>> _characterBox =
				new System.Lazy<FieldAccessor<TabButton_ColorScheme, CharacterBox>>(() => FieldAccessor<TabButton_ColorScheme, CharacterBox>.Create("characterBox"));

		public static CharacterBox GetCharacterBox(this TabButton_ColorScheme __self) => _characterBox.Value.GetValue(__self);
		public static void SetCharacterBox(this TabButton_ColorScheme __self, CharacterBox value) => _characterBox.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_TabGroup
	{

		private static readonly System.Lazy<FieldAccessor<TabGroup, bool>> _setTabAtStart =
				new System.Lazy<FieldAccessor<TabGroup, bool>>(() => FieldAccessor<TabGroup, bool>.Create("setTabAtStart"));
		private static readonly System.Lazy<FieldAccessor<TabGroup, int>> _startingTabIndex =
				new System.Lazy<FieldAccessor<TabGroup, int>>(() => FieldAccessor<TabGroup, int>.Create("startingTabIndex"));
		private static readonly System.Lazy<FieldAccessor<TabGroup, TabButton>> _selectedTabButton =
				new System.Lazy<FieldAccessor<TabGroup, TabButton>>(() => FieldAccessor<TabGroup, TabButton>.Create("selectedTabButton"));

		public static bool GetSetTabAtStart(this TabGroup __self) => _setTabAtStart.Value.GetValue(__self);
		public static void SetSetTabAtStart(this TabGroup __self, bool value) => _setTabAtStart.Value.SetValue(__self, value);
		public static int GetStartingTabIndex(this TabGroup __self) => _startingTabIndex.Value.GetValue(__self);
		public static void SetStartingTabIndex(this TabGroup __self, int value) => _startingTabIndex.Value.SetValue(__self, value);
		public static TabButton GetSelectedTabButton(this TabGroup __self) => _selectedTabButton.Value.GetValue(__self);
		public static void SetSelectedTabButton(this TabGroup __self, TabButton value) => _selectedTabButton.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<TabGroup>> _Awake757602046 =
				new System.Lazy<MethodAccessor<TabGroup>>(() => MethodAccessor<TabGroup>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<TabGroup>> _OnEnable757602046 =
				new System.Lazy<MethodAccessor<TabGroup>>(() => MethodAccessor<TabGroup>.Create("OnEnable"));

		public static void Awake(this TabGroup __self) => _Awake757602046.Value.Invoke(__self);
		public static void OnEnable(this TabGroup __self) => _OnEnable757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_TabGroup_Characters
	{

		private static readonly System.Lazy<MethodAccessor<TabGroup_Characters>> _Start757602046 =
				new System.Lazy<MethodAccessor<TabGroup_Characters>>(() => MethodAccessor<TabGroup_Characters>.Create("Start"));

		public static void Start(this TabGroup_Characters __self) => _Start757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_TextWriterManager
	{

		private static readonly System.Lazy<FieldAccessor<TextWriterManager, UnityEngine.UI.InputField>> _inputField =
				new System.Lazy<FieldAccessor<TextWriterManager, UnityEngine.UI.InputField>>(() => FieldAccessor<TextWriterManager, UnityEngine.UI.InputField>.Create("inputField"));
		private static readonly System.Lazy<FieldAccessor<TextWriterManager, TextWriterObject>> _currentTextWriterObj =
				new System.Lazy<FieldAccessor<TextWriterManager, TextWriterObject>>(() => FieldAccessor<TextWriterManager, TextWriterObject>.Create("currentTextWriterObj"));
		private static readonly System.Lazy<FieldAccessor<TextWriterManager, CanvasHelper>> _canvas =
				new System.Lazy<FieldAccessor<TextWriterManager, CanvasHelper>>(() => FieldAccessor<TextWriterManager, CanvasHelper>.Create("canvas"));
		private static readonly System.Lazy<FieldAccessor<TextWriterManager, Network_Player>> _localPlayer =
				new System.Lazy<FieldAccessor<TextWriterManager, Network_Player>>(() => FieldAccessor<TextWriterManager, Network_Player>.Create("localPlayer"));

		public static UnityEngine.UI.InputField GetInputField(this TextWriterManager __self) => _inputField.Value.GetValue(__self);
		public static void SetInputField(this TextWriterManager __self, UnityEngine.UI.InputField value) => _inputField.Value.SetValue(__self, value);
		public static TextWriterObject GetCurrentTextWriterObj(this TextWriterManager __self) => _currentTextWriterObj.Value.GetValue(__self);
		public static void SetCurrentTextWriterObj(this TextWriterManager __self, TextWriterObject value) => _currentTextWriterObj.Value.SetValue(__self, value);
		public static CanvasHelper GetCanvas(this TextWriterManager __self) => _canvas.Value.GetValue(__self);
		public static void SetCanvas(this TextWriterManager __self, CanvasHelper value) => _canvas.Value.SetValue(__self, value);
		public static Network_Player GetLocalPlayer(this TextWriterManager __self) => _localPlayer.Value.GetValue(__self);
		public static void SetLocalPlayer(this TextWriterManager __self, Network_Player value) => _localPlayer.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<TextWriterManager>> _Awake757602046 =
				new System.Lazy<MethodAccessor<TextWriterManager>>(() => MethodAccessor<TextWriterManager>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<TextWriterManager>> _Start757602046 =
				new System.Lazy<MethodAccessor<TextWriterManager>>(() => MethodAccessor<TextWriterManager>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<TextWriterManager>> _Update757602046 =
				new System.Lazy<MethodAccessor<TextWriterManager>>(() => MethodAccessor<TextWriterManager>.Create("Update"));

		public static void Awake(this TextWriterManager __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this TextWriterManager __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this TextWriterManager __self) => _Update757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_UISlider
	{

		private static readonly System.Lazy<FieldAccessor<UISlider, bool>> _updateText =
				new System.Lazy<FieldAccessor<UISlider, bool>>(() => FieldAccessor<UISlider, bool>.Create("updateText"));
		private static readonly System.Lazy<FieldAccessor<UISlider, bool>> _showPercent =
				new System.Lazy<FieldAccessor<UISlider, bool>>(() => FieldAccessor<UISlider, bool>.Create("showPercent"));
		private static readonly System.Lazy<FieldAccessor<UISlider, int>> _decimalCount =
				new System.Lazy<FieldAccessor<UISlider, int>>(() => FieldAccessor<UISlider, int>.Create("decimalCount"));
		private static readonly System.Lazy<FieldAccessor<UISlider, UnityEngine.UI.Slider>> _sliderComponent =
				new System.Lazy<FieldAccessor<UISlider, UnityEngine.UI.Slider>>(() => FieldAccessor<UISlider, UnityEngine.UI.Slider>.Create("sliderComponent"));
		private static readonly System.Lazy<FieldAccessor<UISlider, UnityEngine.UI.Text>> _sliderTextComponent =
				new System.Lazy<FieldAccessor<UISlider, UnityEngine.UI.Text>>(() => FieldAccessor<UISlider, UnityEngine.UI.Text>.Create("sliderTextComponent"));
		private static readonly System.Lazy<FieldAccessor<UISlider, string>> _format =
				new System.Lazy<FieldAccessor<UISlider, string>>(() => FieldAccessor<UISlider, string>.Create("format"));

		public static bool GetUpdateText(this UISlider __self) => _updateText.Value.GetValue(__self);
		public static void SetUpdateText(this UISlider __self, bool value) => _updateText.Value.SetValue(__self, value);
		public static bool GetShowPercent(this UISlider __self) => _showPercent.Value.GetValue(__self);
		public static void SetShowPercent(this UISlider __self, bool value) => _showPercent.Value.SetValue(__self, value);
		public static int GetDecimalCount(this UISlider __self) => _decimalCount.Value.GetValue(__self);
		public static void SetDecimalCount(this UISlider __self, int value) => _decimalCount.Value.SetValue(__self, value);
		public static UnityEngine.UI.Slider GetSliderComponent(this UISlider __self) => _sliderComponent.Value.GetValue(__self);
		public static void SetSliderComponent(this UISlider __self, UnityEngine.UI.Slider value) => _sliderComponent.Value.SetValue(__self, value);
		public static UnityEngine.UI.Text GetSliderTextComponent(this UISlider __self) => _sliderTextComponent.Value.GetValue(__self);
		public static void SetSliderTextComponent(this UISlider __self, UnityEngine.UI.Text value) => _sliderTextComponent.Value.SetValue(__self, value);
		public static string GetFormat(this UISlider __self) => _format.Value.GetValue(__self);
		public static void SetFormat(this UISlider __self, string value) => _format.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<UISlider>> _Awake757602046 =
				new System.Lazy<MethodAccessor<UISlider>>(() => MethodAccessor<UISlider>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<UISlider>> _OnEnable757602046 =
				new System.Lazy<MethodAccessor<UISlider>>(() => MethodAccessor<UISlider>.Create("OnEnable"));
		private static readonly System.Lazy<MethodAccessor<UISlider>> _Update757602046 =
				new System.Lazy<MethodAccessor<UISlider>>(() => MethodAccessor<UISlider>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<UISlider>> _SetSliderValue4152727662 =
				new System.Lazy<MethodAccessor<UISlider>>(() => MethodAccessor<UISlider>.Create("SetSliderValue", typeof(UnityEngine.UI.Slider), typeof(float), typeof(UnityEngine.UI.Text), typeof(string)));
		private static readonly System.Lazy<MethodAccessor<UISlider>> _SetText2039512123 =
				new System.Lazy<MethodAccessor<UISlider>>(() => MethodAccessor<UISlider>.Create("SetText", typeof(UnityEngine.UI.Text), typeof(string)));

		public static void Awake(this UISlider __self) => _Awake757602046.Value.Invoke(__self);
		public static void OnEnable(this UISlider __self) => _OnEnable757602046.Value.Invoke(__self);
		public static void Update(this UISlider __self) => _Update757602046.Value.Invoke(__self);
		public static void SetSliderValue(this UISlider __self, UnityEngine.UI.Slider sliderComponent, float sliderValue, UnityEngine.UI.Text textComponent, string sliderText) => _SetSliderValue4152727662.Value.Invoke(__self, sliderComponent, sliderValue, textComponent, sliderText);
		public static void SetText(this UISlider __self, UnityEngine.UI.Text textComponent, string text) => _SetText2039512123.Value.Invoke(__self, textComponent, text);

	}

	public static class PrivateAccessor_UISlider_Stat
	{

		private static readonly System.Lazy<FieldAccessor<UISlider_Stat, UnityEngine.UI.Image>> _blinkImage =
				new System.Lazy<FieldAccessor<UISlider_Stat, UnityEngine.UI.Image>>(() => FieldAccessor<UISlider_Stat, UnityEngine.UI.Image>.Create("blinkImage"));
		private static readonly System.Lazy<FieldAccessor<UISlider_Stat, UnityEngine.UI.Image>> _sliderFill =
				new System.Lazy<FieldAccessor<UISlider_Stat, UnityEngine.UI.Image>>(() => FieldAccessor<UISlider_Stat, UnityEngine.UI.Image>.Create("sliderFill"));
		private static readonly System.Lazy<FieldAccessor<UISlider_Stat, UnityEngine.UI.Image>> _targetSliderFill =
				new System.Lazy<FieldAccessor<UISlider_Stat, UnityEngine.UI.Image>>(() => FieldAccessor<UISlider_Stat, UnityEngine.UI.Image>.Create("targetSliderFill"));
		private static readonly System.Lazy<FieldAccessor<UISlider_Stat, float>> _sineHeight =
				new System.Lazy<FieldAccessor<UISlider_Stat, float>>(() => FieldAccessor<UISlider_Stat, float>.Create("sineHeight"));
		private static readonly System.Lazy<FieldAccessor<UISlider_Stat, float>> _sineFrequency =
				new System.Lazy<FieldAccessor<UISlider_Stat, float>>(() => FieldAccessor<UISlider_Stat, float>.Create("sineFrequency"));
		private static readonly System.Lazy<FieldAccessor<UISlider_Stat, float>> _blinkFadeSpeed =
				new System.Lazy<FieldAccessor<UISlider_Stat, float>>(() => FieldAccessor<UISlider_Stat, float>.Create("blinkFadeSpeed"));
		private static readonly System.Lazy<FieldAccessor<UISlider_Stat, UnityEngine.MaterialPropertyBlock>> _blinkMaterialBlock =
				new System.Lazy<FieldAccessor<UISlider_Stat, UnityEngine.MaterialPropertyBlock>>(() => FieldAccessor<UISlider_Stat, UnityEngine.MaterialPropertyBlock>.Create("blinkMaterialBlock"));
		private static readonly System.Lazy<FieldAccessor<UISlider_Stat, float>> _blinkAmount =
				new System.Lazy<FieldAccessor<UISlider_Stat, float>>(() => FieldAccessor<UISlider_Stat, float>.Create("blinkAmount"));

		public static UnityEngine.UI.Image GetBlinkImage(this UISlider_Stat __self) => _blinkImage.Value.GetValue(__self);
		public static void SetBlinkImage(this UISlider_Stat __self, UnityEngine.UI.Image value) => _blinkImage.Value.SetValue(__self, value);
		public static UnityEngine.UI.Image GetSliderFill(this UISlider_Stat __self) => _sliderFill.Value.GetValue(__self);
		public static void SetSliderFill(this UISlider_Stat __self, UnityEngine.UI.Image value) => _sliderFill.Value.SetValue(__self, value);
		public static UnityEngine.UI.Image GetTargetSliderFill(this UISlider_Stat __self) => _targetSliderFill.Value.GetValue(__self);
		public static void SetTargetSliderFill(this UISlider_Stat __self, UnityEngine.UI.Image value) => _targetSliderFill.Value.SetValue(__self, value);
		public static float GetSineHeight(this UISlider_Stat __self) => _sineHeight.Value.GetValue(__self);
		public static void SetSineHeight(this UISlider_Stat __self, float value) => _sineHeight.Value.SetValue(__self, value);
		public static float GetSineFrequency(this UISlider_Stat __self) => _sineFrequency.Value.GetValue(__self);
		public static void SetSineFrequency(this UISlider_Stat __self, float value) => _sineFrequency.Value.SetValue(__self, value);
		public static float GetBlinkFadeSpeed(this UISlider_Stat __self) => _blinkFadeSpeed.Value.GetValue(__self);
		public static void SetBlinkFadeSpeed(this UISlider_Stat __self, float value) => _blinkFadeSpeed.Value.SetValue(__self, value);
		public static UnityEngine.MaterialPropertyBlock GetBlinkMaterialBlock(this UISlider_Stat __self) => _blinkMaterialBlock.Value.GetValue(__self);
		public static void SetBlinkMaterialBlock(this UISlider_Stat __self, UnityEngine.MaterialPropertyBlock value) => _blinkMaterialBlock.Value.SetValue(__self, value);
		public static float GetBlinkAmount(this UISlider_Stat __self) => _blinkAmount.Value.GetValue(__self);
		public static void SetBlinkAmount(this UISlider_Stat __self, float value) => _blinkAmount.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<UISlider_Stat>> _Awake757602046 =
				new System.Lazy<MethodAccessor<UISlider_Stat>>(() => MethodAccessor<UISlider_Stat>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<UISlider_Stat>> _Update757602046 =
				new System.Lazy<MethodAccessor<UISlider_Stat>>(() => MethodAccessor<UISlider_Stat>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<UISlider_Stat>> _HandleBlinking757602046 =
				new System.Lazy<MethodAccessor<UISlider_Stat>>(() => MethodAccessor<UISlider_Stat>.Create("HandleBlinking"));
		private static readonly System.Lazy<MethodAccessor<UISlider_Stat>> _SetAlpha3486905475 =
				new System.Lazy<MethodAccessor<UISlider_Stat>>(() => MethodAccessor<UISlider_Stat>.Create("SetAlpha", typeof(float)));
		private static readonly System.Lazy<MethodAccessor<UISlider_Stat>> _SetSliderAlpha3486905475 =
				new System.Lazy<MethodAccessor<UISlider_Stat>>(() => MethodAccessor<UISlider_Stat>.Create("SetSliderAlpha", typeof(float)));

		public static void Awake(this UISlider_Stat __self) => _Awake757602046.Value.Invoke(__self);
		public static void Update(this UISlider_Stat __self) => _Update757602046.Value.Invoke(__self);
		public static void HandleBlinking(this UISlider_Stat __self) => _HandleBlinking757602046.Value.Invoke(__self);
		public static void SetAlpha(this UISlider_Stat __self, float alpha) => _SetAlpha3486905475.Value.Invoke(__self, alpha);
		public static void SetSliderAlpha(this UISlider_Stat __self, float alpha) => _SetSliderAlpha3486905475.Value.Invoke(__self, alpha);

	}

	public static class PrivateAccessor_UISlider_Target
	{

		private static readonly System.Lazy<FieldAccessor<UISlider_Target, UnityEngine.UI.Slider>> _targetSliderComponent =
				new System.Lazy<FieldAccessor<UISlider_Target, UnityEngine.UI.Slider>>(() => FieldAccessor<UISlider_Target, UnityEngine.UI.Slider>.Create("targetSliderComponent"));

		public static UnityEngine.UI.Slider GetTargetSliderComponent(this UISlider_Target __self) => _targetSliderComponent.Value.GetValue(__self);
		public static void SetTargetSliderComponent(this UISlider_Target __self, UnityEngine.UI.Slider value) => _targetSliderComponent.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_UI_Cost
	{

		private static readonly System.Lazy<FieldAccessor<UI_Cost, bool>> _showXBeforeAmount =
				new System.Lazy<FieldAccessor<UI_Cost, bool>>(() => FieldAccessor<UI_Cost, bool>.Create("showXBeforeAmount"));
		private static readonly System.Lazy<FieldAccessor<UI_Cost, UnityEngine.CanvasGroup>> _imageAlphaGroup =
				new System.Lazy<FieldAccessor<UI_Cost, UnityEngine.CanvasGroup>>(() => FieldAccessor<UI_Cost, UnityEngine.CanvasGroup>.Create("imageAlphaGroup"));
		private static readonly System.Lazy<FieldAccessor<UI_Cost, bool>> _isValidForInteract =
				new System.Lazy<FieldAccessor<UI_Cost, bool>>(() => FieldAccessor<UI_Cost, bool>.Create("isValidForInteract"));

		public static bool GetShowXBeforeAmount(this UI_Cost __self) => _showXBeforeAmount.Value.GetValue(__self);
		public static void SetShowXBeforeAmount(this UI_Cost __self, bool value) => _showXBeforeAmount.Value.SetValue(__self, value);
		public static UnityEngine.CanvasGroup GetImageAlphaGroup(this UI_Cost __self) => _imageAlphaGroup.Value.GetValue(__self);
		public static void SetImageAlphaGroup(this UI_Cost __self, UnityEngine.CanvasGroup value) => _imageAlphaGroup.Value.SetValue(__self, value);
		public static bool GetIsValidForInteract(this UI_Cost __self) => _isValidForInteract.Value.GetValue(__self);
		public static void SetIsValidForInteract(this UI_Cost __self, bool value) => _isValidForInteract.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_UI_Cost_Interactable
	{

		private static readonly System.Lazy<FieldAccessor<UI_Cost_Interactable, UnityEngine.GameObject>> _hoverImage =
				new System.Lazy<FieldAccessor<UI_Cost_Interactable, UnityEngine.GameObject>>(() => FieldAccessor<UI_Cost_Interactable, UnityEngine.GameObject>.Create("hoverImage"));

		public static UnityEngine.GameObject GetHoverImage(this UI_Cost_Interactable __self) => _hoverImage.Value.GetValue(__self);
		public static void SetHoverImage(this UI_Cost_Interactable __self, UnityEngine.GameObject value) => _hoverImage.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<UI_Cost_Interactable>> _SetHoverImageActive757602046 =
				new System.Lazy<MethodAccessor<UI_Cost_Interactable>>(() => MethodAccessor<UI_Cost_Interactable>.Create("SetHoverImageActive"));
		private static readonly System.Lazy<MethodAccessor<UI_Cost_Interactable>> _SetHoverImageInactive757602046 =
				new System.Lazy<MethodAccessor<UI_Cost_Interactable>>(() => MethodAccessor<UI_Cost_Interactable>.Create("SetHoverImageInactive"));

		public static void SetHoverImageActive(this UI_Cost_Interactable __self) => _SetHoverImageActive757602046.Value.Invoke(__self);
		public static void SetHoverImageInactive(this UI_Cost_Interactable __self) => _SetHoverImageInactive757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_WardrobeMenu
	{

		private static readonly System.Lazy<FieldAccessor<WardrobeMenu, UnityEngine.RectTransform>> _selectedHighlight =
				new System.Lazy<FieldAccessor<WardrobeMenu, UnityEngine.RectTransform>>(() => FieldAccessor<WardrobeMenu, UnityEngine.RectTransform>.Create("selectedHighlight"));
		private static readonly System.Lazy<FieldAccessor<WardrobeMenu, UnityEngine.UI.Image>> _wholeOutfitImage =
				new System.Lazy<FieldAccessor<WardrobeMenu, UnityEngine.UI.Image>>(() => FieldAccessor<WardrobeMenu, UnityEngine.UI.Image>.Create("wholeOutfitImage"));
		private static readonly System.Lazy<FieldAccessor<WardrobeMenu, UnityEngine.UI.Button[]>> _outfitButtons =
				new System.Lazy<FieldAccessor<WardrobeMenu, UnityEngine.UI.Button[]>>(() => FieldAccessor<WardrobeMenu, UnityEngine.UI.Button[]>.Create("outfitButtons"));
		private static readonly System.Lazy<FieldAccessor<WardrobeMenu, string>> _eventRef_click =
				new System.Lazy<FieldAccessor<WardrobeMenu, string>>(() => FieldAccessor<WardrobeMenu, string>.Create("eventRef_click"));
		private static readonly System.Lazy<FieldAccessor<WardrobeMenu, Network_Player>> _localPlayer =
				new System.Lazy<FieldAccessor<WardrobeMenu, Network_Player>>(() => FieldAccessor<WardrobeMenu, Network_Player>.Create("localPlayer"));
		private static readonly System.Lazy<FieldAccessor<WardrobeMenu, CanvasHelper>> _canvas =
				new System.Lazy<FieldAccessor<WardrobeMenu, CanvasHelper>>(() => FieldAccessor<WardrobeMenu, CanvasHelper>.Create("canvas"));

		public static UnityEngine.RectTransform GetSelectedHighlight(this WardrobeMenu __self) => _selectedHighlight.Value.GetValue(__self);
		public static void SetSelectedHighlight(this WardrobeMenu __self, UnityEngine.RectTransform value) => _selectedHighlight.Value.SetValue(__self, value);
		public static UnityEngine.UI.Image GetWholeOutfitImage(this WardrobeMenu __self) => _wholeOutfitImage.Value.GetValue(__self);
		public static void SetWholeOutfitImage(this WardrobeMenu __self, UnityEngine.UI.Image value) => _wholeOutfitImage.Value.SetValue(__self, value);
		public static UnityEngine.UI.Button[] GetOutfitButtons(this WardrobeMenu __self) => _outfitButtons.Value.GetValue(__self);
		public static void SetOutfitButtons(this WardrobeMenu __self, UnityEngine.UI.Button[] value) => _outfitButtons.Value.SetValue(__self, value);
		public static string GetEventRef_click(this WardrobeMenu __self) => _eventRef_click.Value.GetValue(__self);
		public static void SetEventRef_click(this WardrobeMenu __self, string value) => _eventRef_click.Value.SetValue(__self, value);
		public static Network_Player GetLocalPlayer(this WardrobeMenu __self) => _localPlayer.Value.GetValue(__self);
		public static void SetLocalPlayer(this WardrobeMenu __self, Network_Player value) => _localPlayer.Value.SetValue(__self, value);
		public static CanvasHelper GetCanvas(this WardrobeMenu __self) => _canvas.Value.GetValue(__self);
		public static void SetCanvas(this WardrobeMenu __self, CanvasHelper value) => _canvas.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<WardrobeMenu>> _Start757602046 =
				new System.Lazy<MethodAccessor<WardrobeMenu>>(() => MethodAccessor<WardrobeMenu>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<WardrobeMenu>> _OnDisable757602046 =
				new System.Lazy<MethodAccessor<WardrobeMenu>>(() => MethodAccessor<WardrobeMenu>.Create("OnDisable"));
		private static readonly System.Lazy<MethodAccessor<WardrobeMenu>> _MenuOpenLate757602046 =
				new System.Lazy<MethodAccessor<WardrobeMenu>>(() => MethodAccessor<WardrobeMenu>.Create("MenuOpenLate"));
		private static readonly System.Lazy<MethodAccessor<WardrobeMenu>> _SelectOutfitUI3486186818 =
				new System.Lazy<MethodAccessor<WardrobeMenu>>(() => MethodAccessor<WardrobeMenu>.Create("SelectOutfitUI", typeof(int)));
		private static readonly System.Lazy<MethodAccessor<WardrobeMenu>> _Update757602046 =
				new System.Lazy<MethodAccessor<WardrobeMenu>>(() => MethodAccessor<WardrobeMenu>.Create("Update"));

		public static void Start(this WardrobeMenu __self) => _Start757602046.Value.Invoke(__self);
		public static void OnDisable(this WardrobeMenu __self) => _OnDisable757602046.Value.Invoke(__self);
		public static void MenuOpenLate(this WardrobeMenu __self) => _MenuOpenLate757602046.Value.Invoke(__self);
		public static void SelectOutfitUI(this WardrobeMenu __self, int outfitIndex) => _SelectOutfitUI3486186818.Value.Invoke(__self, outfitIndex);
		public static void Update(this WardrobeMenu __self) => _Update757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_MonoBehaviour_ID_Network
	{

		private static readonly System.Lazy<FieldAccessor<MonoBehaviour_ID_Network, System.Collections.Generic.List<Message>>> _messages =
				new System.Lazy<FieldAccessor<MonoBehaviour_ID_Network, System.Collections.Generic.List<Message>>>(() => FieldAccessor<MonoBehaviour_ID_Network, System.Collections.Generic.List<Message>>.Create("messages"));

		public static System.Collections.Generic.List<Message> GetMessages(this MonoBehaviour_ID_Network __self) => _messages.Value.GetValue(__self);
		public static void SetMessages(this MonoBehaviour_ID_Network __self, System.Collections.Generic.List<Message> value) => _messages.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<MonoBehaviour_ID_Network>> _AddMessage3458292753 =
				new System.Lazy<MethodAccessor<MonoBehaviour_ID_Network>>(() => MethodAccessor<MonoBehaviour_ID_Network>.Create("AddMessage", typeof(Message_NetworkBehaviour)));
		private static readonly System.Lazy<MethodAccessor<MonoBehaviour_ID_Network>> _AddMessage3467762185 =
				new System.Lazy<MethodAccessor<MonoBehaviour_ID_Network>>(() => MethodAccessor<MonoBehaviour_ID_Network>.Create("AddMessage", typeof(System.Collections.Generic.List<Message_NetworkBehaviour>)));

		public static void AddMessage(this MonoBehaviour_ID_Network __self, Message_NetworkBehaviour msg) => _AddMessage3458292753.Value.Invoke(__self, msg);
		public static void AddMessage(this MonoBehaviour_ID_Network __self, System.Collections.Generic.List<Message_NetworkBehaviour> msgs) => _AddMessage3467762185.Value.Invoke(__self, msgs);

	}

	public static class PrivateAccessor_MonoBehaviour_Network
	{

		private static readonly System.Lazy<FieldAccessor<MonoBehaviour_Network, uint>> _behaviourIndex =
				new System.Lazy<FieldAccessor<MonoBehaviour_Network, uint>>(() => FieldAccessor<MonoBehaviour_Network, uint>.Create("behaviourIndex"));
		private static readonly System.Lazy<FieldAccessor<MonoBehaviour_Network, uint>> _currentSendIndex =
				new System.Lazy<FieldAccessor<MonoBehaviour_Network, uint>>(() => FieldAccessor<MonoBehaviour_Network, uint>.Create("currentSendIndex"));
		private static readonly System.Lazy<FieldAccessor<MonoBehaviour_Network, uint>> _lastSentIndex =
				new System.Lazy<FieldAccessor<MonoBehaviour_Network, uint>>(() => FieldAccessor<MonoBehaviour_Network, uint>.Create("lastSentIndex"));
		private static readonly System.Lazy<FieldAccessor<MonoBehaviour_Network, bool>> _dead =
				new System.Lazy<FieldAccessor<MonoBehaviour_Network, bool>>(() => FieldAccessor<MonoBehaviour_Network, bool>.Create("dead"));

		public static uint GetBehaviourIndex(this MonoBehaviour_Network __self) => _behaviourIndex.Value.GetValue(__self);
		public static void SetBehaviourIndex(this MonoBehaviour_Network __self, uint value) => _behaviourIndex.Value.SetValue(__self, value);
		public static uint GetCurrentSendIndex(this MonoBehaviour_Network __self) => _currentSendIndex.Value.GetValue(__self);
		public static void SetCurrentSendIndex(this MonoBehaviour_Network __self, uint value) => _currentSendIndex.Value.SetValue(__self, value);
		public static uint GetLastSentIndex(this MonoBehaviour_Network __self) => _lastSentIndex.Value.GetValue(__self);
		public static void SetLastSentIndex(this MonoBehaviour_Network __self, uint value) => _lastSentIndex.Value.SetValue(__self, value);
		public static bool GetDead(this MonoBehaviour_Network __self) => _dead.Value.GetValue(__self);
		public static void SetDead(this MonoBehaviour_Network __self, bool value) => _dead.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_MonoBehaviour_NetworkTick
	{

		private static readonly System.Lazy<FieldAccessor<MonoBehaviour_NetworkTick, float>> _tickTimer =
				new System.Lazy<FieldAccessor<MonoBehaviour_NetworkTick, float>>(() => FieldAccessor<MonoBehaviour_NetworkTick, float>.Create("tickTimer"));

		public static float GetTickTimer(this MonoBehaviour_NetworkTick __self) => _tickTimer.Value.GetValue(__self);
		public static void SetTickTimer(this MonoBehaviour_NetworkTick __self, float value) => _tickTimer.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_NetworkIDManager
	{

		private static readonly System.Lazy<FieldAccessor<NetworkIDManager, System.Collections.Generic.List<Message>>> _dirtyTickMessages =
				new System.Lazy<FieldAccessor<NetworkIDManager, System.Collections.Generic.List<Message>>>(() => FieldAccessor<NetworkIDManager, System.Collections.Generic.List<Message>>.Create("dirtyTickMessages"));

		public static System.Collections.Generic.List<Message> GetDirtyTickMessages(this NetworkIDManager __self) => _dirtyTickMessages.Value.GetValue(__self);
		public static void SetDirtyTickMessages(this NetworkIDManager __self, System.Collections.Generic.List<Message> value) => _dirtyTickMessages.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<NetworkIDManager>> _Awake757602046 =
				new System.Lazy<MethodAccessor<NetworkIDManager>>(() => MethodAccessor<NetworkIDManager>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<NetworkIDManager>> _Start757602046 =
				new System.Lazy<MethodAccessor<NetworkIDManager>>(() => MethodAccessor<NetworkIDManager>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<NetworkIDManager>> _LateUpdate757602046 =
				new System.Lazy<MethodAccessor<NetworkIDManager>>(() => MethodAccessor<NetworkIDManager>.Create("LateUpdate"));

		public static void Awake(this NetworkIDManager __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this NetworkIDManager __self) => _Start757602046.Value.Invoke(__self);
		public static void LateUpdate(this NetworkIDManager __self) => _LateUpdate757602046.Value.Invoke(__self);

	}

	public static class Private_NetworkIDManager
	{

		private static readonly System.Lazy<StaticFieldAccessor<System.Collections.Generic.Dictionary<System.Type, System.Collections.Generic.Dictionary<NetworkIDTag, System.Collections.Generic.HashSet<MonoBehaviour_ID_Network>>>>> _networkIDs =
				new System.Lazy<StaticFieldAccessor<System.Collections.Generic.Dictionary<System.Type, System.Collections.Generic.Dictionary<NetworkIDTag, System.Collections.Generic.HashSet<MonoBehaviour_ID_Network>>>>>(() => StaticFieldAccessor<System.Collections.Generic.Dictionary<System.Type, System.Collections.Generic.Dictionary<NetworkIDTag, System.Collections.Generic.HashSet<MonoBehaviour_ID_Network>>>>.Create(typeof(NetworkIDManager), "networkIDs"));
		private static readonly System.Lazy<StaticFieldAccessor<System.Collections.Generic.HashSet<MonoBehaviour_NetworkTick>>> _networkTickIDs =
				new System.Lazy<StaticFieldAccessor<System.Collections.Generic.HashSet<MonoBehaviour_NetworkTick>>>(() => StaticFieldAccessor<System.Collections.Generic.HashSet<MonoBehaviour_NetworkTick>>.Create(typeof(NetworkIDManager), "networkTickIDs"));
		private static readonly System.Lazy<StaticFieldAccessor<Raft_Network>> _network =
				new System.Lazy<StaticFieldAccessor<Raft_Network>>(() => StaticFieldAccessor<Raft_Network>.Create(typeof(NetworkIDManager), "network"));

		public static System.Collections.Generic.Dictionary<System.Type, System.Collections.Generic.Dictionary<NetworkIDTag, System.Collections.Generic.HashSet<MonoBehaviour_ID_Network>>> GetNetworkIDs() => _networkIDs.Value.GetValue();
		public static void SetNetworkIDs(System.Collections.Generic.Dictionary<System.Type, System.Collections.Generic.Dictionary<NetworkIDTag, System.Collections.Generic.HashSet<MonoBehaviour_ID_Network>>> value) => _networkIDs.Value.SetValue(value);
		public static System.Collections.Generic.HashSet<MonoBehaviour_NetworkTick> GetNetworkTickIDs() => _networkTickIDs.Value.GetValue();
		public static void SetNetworkTickIDs(System.Collections.Generic.HashSet<MonoBehaviour_NetworkTick> value) => _networkTickIDs.Value.SetValue(value);
		public static Raft_Network GetNetwork() => _network.Value.GetValue();
		public static void SetNetwork(Raft_Network value) => _network.Value.SetValue(value);

	}

	public static class PrivateAccessor_Message_Teleport
	{

		private static readonly System.Lazy<FieldAccessor<Message_Teleport, float>> _posX =
				new System.Lazy<FieldAccessor<Message_Teleport, float>>(() => FieldAccessor<Message_Teleport, float>.Create("posX"));
		private static readonly System.Lazy<FieldAccessor<Message_Teleport, float>> _posY =
				new System.Lazy<FieldAccessor<Message_Teleport, float>>(() => FieldAccessor<Message_Teleport, float>.Create("posY"));
		private static readonly System.Lazy<FieldAccessor<Message_Teleport, float>> _posZ =
				new System.Lazy<FieldAccessor<Message_Teleport, float>>(() => FieldAccessor<Message_Teleport, float>.Create("posZ"));

		public static float GetPosX(this Message_Teleport __self) => _posX.Value.GetValue(__self);
		public static void SetPosX(this Message_Teleport __self, float value) => _posX.Value.SetValue(__self, value);
		public static float GetPosY(this Message_Teleport __self) => _posY.Value.GetValue(__self);
		public static void SetPosY(this Message_Teleport __self, float value) => _posY.Value.SetValue(__self, value);
		public static float GetPosZ(this Message_Teleport __self) => _posZ.Value.GetValue(__self);
		public static void SetPosZ(this Message_Teleport __self, float value) => _posZ.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_NetworkUpdateManager
	{

		private static readonly System.Lazy<MethodAccessor<NetworkUpdateManager>> _Start757602046 =
				new System.Lazy<MethodAccessor<NetworkUpdateManager>>(() => MethodAccessor<NetworkUpdateManager>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<NetworkUpdateManager>> _LateUpdate757602046 =
				new System.Lazy<MethodAccessor<NetworkUpdateManager>>(() => MethodAccessor<NetworkUpdateManager>.Create("LateUpdate"));

		public static void Start(this NetworkUpdateManager __self) => _Start757602046.Value.Invoke(__self);
		public static void LateUpdate(this NetworkUpdateManager __self) => _LateUpdate757602046.Value.Invoke(__self);

	}

	public static class Private_NetworkUpdateManager
	{

		private static readonly System.Lazy<StaticFieldAccessor<Raft_Network>> _network =
				new System.Lazy<StaticFieldAccessor<Raft_Network>>(() => StaticFieldAccessor<Raft_Network>.Create(typeof(NetworkUpdateManager), "network"));
		private static readonly System.Lazy<StaticFieldAccessor<uint>> _globalBehaviourIndex =
				new System.Lazy<StaticFieldAccessor<uint>>(() => StaticFieldAccessor<uint>.Create(typeof(NetworkUpdateManager), "globalBehaviourIndex"));
		private static readonly System.Lazy<StaticFieldAccessor<System.Collections.Generic.List<MonoBehaviour_Network>>> _NetworkedBehaviours2 =
				new System.Lazy<StaticFieldAccessor<System.Collections.Generic.List<MonoBehaviour_Network>>>(() => StaticFieldAccessor<System.Collections.Generic.List<MonoBehaviour_Network>>.Create(typeof(NetworkUpdateManager), "NetworkedBehaviours2"));

		public static Raft_Network GetNetwork() => _network.Value.GetValue();
		public static void SetNetwork(Raft_Network value) => _network.Value.SetValue(value);
		public static uint GetGlobalBehaviourIndex() => _globalBehaviourIndex.Value.GetValue();
		public static void SetGlobalBehaviourIndex(uint value) => _globalBehaviourIndex.Value.SetValue(value);
		public static System.Collections.Generic.List<MonoBehaviour_Network> GetNetworkedBehaviours2() => _NetworkedBehaviours2.Value.GetValue();
		public static void SetNetworkedBehaviours2(System.Collections.Generic.List<MonoBehaviour_Network> value) => _NetworkedBehaviours2.Value.SetValue(value);

	}

	public static class PrivateAccessor_Network_Host
	{

		private static readonly System.Lazy<FieldAccessor<Network_Host, float>> _lerpSkySpeed =
				new System.Lazy<FieldAccessor<Network_Host, float>>(() => FieldAccessor<Network_Host, float>.Create("lerpSkySpeed"));
		private static readonly System.Lazy<FieldAccessor<Network_Host, Raft_Network>> _network =
				new System.Lazy<FieldAccessor<Network_Host, Raft_Network>>(() => FieldAccessor<Network_Host, Raft_Network>.Create("network"));
		private static readonly System.Lazy<FieldAccessor<Network_Host, Network_Host_Entities>> _hostEntities =
				new System.Lazy<FieldAccessor<Network_Host, Network_Host_Entities>>(() => FieldAccessor<Network_Host, Network_Host_Entities>.Create("hostEntities"));

		public static float GetLerpSkySpeed(this Network_Host __self) => _lerpSkySpeed.Value.GetValue(__self);
		public static void SetLerpSkySpeed(this Network_Host __self, float value) => _lerpSkySpeed.Value.SetValue(__self, value);
		public static Raft_Network GetNetwork(this Network_Host __self) => _network.Value.GetValue(__self);
		public static void SetNetwork(this Network_Host __self, Raft_Network value) => _network.Value.SetValue(__self, value);
		public static Network_Host_Entities GetHostEntities(this Network_Host __self) => _hostEntities.Value.GetValue(__self);
		public static void SetHostEntities(this Network_Host __self, Network_Host_Entities value) => _hostEntities.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Network_Host>> _Awake757602046 =
				new System.Lazy<MethodAccessor<Network_Host>>(() => MethodAccessor<Network_Host>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<Network_Host>> _Start757602046 =
				new System.Lazy<MethodAccessor<Network_Host>>(() => MethodAccessor<Network_Host>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<Network_Host>> _Update757602046 =
				new System.Lazy<MethodAccessor<Network_Host>>(() => MethodAccessor<Network_Host>.Create("Update"));

		public static void Awake(this Network_Host __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this Network_Host __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this Network_Host __self) => _Update757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Message_NetworkEntity_Damage
	{

		private static readonly System.Lazy<FieldAccessor<Message_NetworkEntity_Damage, float>> _posX =
				new System.Lazy<FieldAccessor<Message_NetworkEntity_Damage, float>>(() => FieldAccessor<Message_NetworkEntity_Damage, float>.Create("posX"));
		private static readonly System.Lazy<FieldAccessor<Message_NetworkEntity_Damage, float>> _posY =
				new System.Lazy<FieldAccessor<Message_NetworkEntity_Damage, float>>(() => FieldAccessor<Message_NetworkEntity_Damage, float>.Create("posY"));
		private static readonly System.Lazy<FieldAccessor<Message_NetworkEntity_Damage, float>> _posZ =
				new System.Lazy<FieldAccessor<Message_NetworkEntity_Damage, float>>(() => FieldAccessor<Message_NetworkEntity_Damage, float>.Create("posZ"));
		private static readonly System.Lazy<FieldAccessor<Message_NetworkEntity_Damage, float>> _hitNormalX =
				new System.Lazy<FieldAccessor<Message_NetworkEntity_Damage, float>>(() => FieldAccessor<Message_NetworkEntity_Damage, float>.Create("hitNormalX"));
		private static readonly System.Lazy<FieldAccessor<Message_NetworkEntity_Damage, float>> _hitNormalY =
				new System.Lazy<FieldAccessor<Message_NetworkEntity_Damage, float>>(() => FieldAccessor<Message_NetworkEntity_Damage, float>.Create("hitNormalY"));
		private static readonly System.Lazy<FieldAccessor<Message_NetworkEntity_Damage, float>> _hitNormalZ =
				new System.Lazy<FieldAccessor<Message_NetworkEntity_Damage, float>>(() => FieldAccessor<Message_NetworkEntity_Damage, float>.Create("hitNormalZ"));

		public static float GetPosX(this Message_NetworkEntity_Damage __self) => _posX.Value.GetValue(__self);
		public static void SetPosX(this Message_NetworkEntity_Damage __self, float value) => _posX.Value.SetValue(__self, value);
		public static float GetPosY(this Message_NetworkEntity_Damage __self) => _posY.Value.GetValue(__self);
		public static void SetPosY(this Message_NetworkEntity_Damage __self, float value) => _posY.Value.SetValue(__self, value);
		public static float GetPosZ(this Message_NetworkEntity_Damage __self) => _posZ.Value.GetValue(__self);
		public static void SetPosZ(this Message_NetworkEntity_Damage __self, float value) => _posZ.Value.SetValue(__self, value);
		public static float GetHitNormalX(this Message_NetworkEntity_Damage __self) => _hitNormalX.Value.GetValue(__self);
		public static void SetHitNormalX(this Message_NetworkEntity_Damage __self, float value) => _hitNormalX.Value.SetValue(__self, value);
		public static float GetHitNormalY(this Message_NetworkEntity_Damage __self) => _hitNormalY.Value.GetValue(__self);
		public static void SetHitNormalY(this Message_NetworkEntity_Damage __self, float value) => _hitNormalY.Value.SetValue(__self, value);
		public static float GetHitNormalZ(this Message_NetworkEntity_Damage __self) => _hitNormalZ.Value.GetValue(__self);
		public static void SetHitNormalZ(this Message_NetworkEntity_Damage __self, float value) => _hitNormalZ.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_Network_Host_Entities
	{

		private static readonly System.Lazy<FieldAccessor<Network_Host_Entities, AI_NetworkBehaviour[]>> _AINetworkBehaviourPrefabs =
				new System.Lazy<FieldAccessor<Network_Host_Entities, AI_NetworkBehaviour[]>>(() => FieldAccessor<Network_Host_Entities, AI_NetworkBehaviour[]>.Create("AINetworkBehaviourPrefabs"));
		private static readonly System.Lazy<FieldAccessor<Network_Host_Entities, Seagull>> _seagullPrefab =
				new System.Lazy<FieldAccessor<Network_Host_Entities, Seagull>>(() => FieldAccessor<Network_Host_Entities, Seagull>.Create("seagullPrefab"));
		private static readonly System.Lazy<FieldAccessor<Network_Host_Entities, bool>> _spawnShark =
				new System.Lazy<FieldAccessor<Network_Host_Entities, bool>>(() => FieldAccessor<Network_Host_Entities, bool>.Create("spawnShark"));
		private static readonly System.Lazy<FieldAccessor<Network_Host_Entities, int>> _seagullMaxCount =
				new System.Lazy<FieldAccessor<Network_Host_Entities, int>>(() => FieldAccessor<Network_Host_Entities, int>.Create("seagullMaxCount"));
		private static readonly System.Lazy<FieldAccessor<Network_Host_Entities, Raft_Network>> _network =
				new System.Lazy<FieldAccessor<Network_Host_Entities, Raft_Network>>(() => FieldAccessor<Network_Host_Entities, Raft_Network>.Create("network"));
		private static readonly System.Lazy<FieldAccessor<Network_Host_Entities, int>> _sharkCount =
				new System.Lazy<FieldAccessor<Network_Host_Entities, int>>(() => FieldAccessor<Network_Host_Entities, int>.Create("sharkCount"));
		private static readonly System.Lazy<FieldAccessor<Network_Host_Entities, int>> _seagullCount =
				new System.Lazy<FieldAccessor<Network_Host_Entities, int>>(() => FieldAccessor<Network_Host_Entities, int>.Create("seagullCount"));

		public static AI_NetworkBehaviour[] GetAINetworkBehaviourPrefabs(this Network_Host_Entities __self) => _AINetworkBehaviourPrefabs.Value.GetValue(__self);
		public static void SetAINetworkBehaviourPrefabs(this Network_Host_Entities __self, AI_NetworkBehaviour[] value) => _AINetworkBehaviourPrefabs.Value.SetValue(__self, value);
		public static Seagull GetSeagullPrefab(this Network_Host_Entities __self) => _seagullPrefab.Value.GetValue(__self);
		public static void SetSeagullPrefab(this Network_Host_Entities __self, Seagull value) => _seagullPrefab.Value.SetValue(__self, value);
		public static bool GetSpawnShark(this Network_Host_Entities __self) => _spawnShark.Value.GetValue(__self);
		public static void SetSpawnShark(this Network_Host_Entities __self, bool value) => _spawnShark.Value.SetValue(__self, value);
		public static int GetSeagullMaxCount(this Network_Host_Entities __self) => _seagullMaxCount.Value.GetValue(__self);
		public static void SetSeagullMaxCount(this Network_Host_Entities __self, int value) => _seagullMaxCount.Value.SetValue(__self, value);
		public static Raft_Network GetNetwork(this Network_Host_Entities __self) => _network.Value.GetValue(__self);
		public static void SetNetwork(this Network_Host_Entities __self, Raft_Network value) => _network.Value.SetValue(__self, value);
		public static int GetSharkCount(this Network_Host_Entities __self) => _sharkCount.Value.GetValue(__self);
		public static void SetSharkCount(this Network_Host_Entities __self, int value) => _sharkCount.Value.SetValue(__self, value);
		public static int GetSeagullCount(this Network_Host_Entities __self) => _seagullCount.Value.GetValue(__self);
		public static void SetSeagullCount(this Network_Host_Entities __self, int value) => _seagullCount.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Network_Host_Entities>> _Awake757602046 =
				new System.Lazy<MethodAccessor<Network_Host_Entities>>(() => MethodAccessor<Network_Host_Entities>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<Network_Host_Entities>> _Start757602046 =
				new System.Lazy<MethodAccessor<Network_Host_Entities>>(() => MethodAccessor<Network_Host_Entities>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<Network_Host_Entities>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<Network_Host_Entities>>(() => MethodAccessor<Network_Host_Entities>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<Network_Host_Entities>> _OnLoadRGDAINetworkBehaviors757602046 =
				new System.Lazy<MethodAccessor<Network_Host_Entities>>(() => MethodAccessor<Network_Host_Entities>.Create("OnLoadRGDAINetworkBehaviors"));
		private static readonly System.Lazy<MethodAccessor<Network_Host_Entities>> _LoadRGDAINetworkBehaviorsLate757602046 =
				new System.Lazy<MethodAccessor<Network_Host_Entities>>(() => MethodAccessor<Network_Host_Entities>.Create("LoadRGDAINetworkBehaviorsLate"));
		private static readonly System.Lazy<MethodAccessor<Network_Host_Entities>> _CheckSharkRespawnLateStarter757602046 =
				new System.Lazy<MethodAccessor<Network_Host_Entities>>(() => MethodAccessor<Network_Host_Entities>.Create("CheckSharkRespawnLateStarter"));
		private static readonly System.Lazy<MethodAccessor<Network_Host_Entities>> _CheckSharkRespawnLate3486905475 =
				new System.Lazy<MethodAccessor<Network_Host_Entities>>(() => MethodAccessor<Network_Host_Entities>.Create("CheckSharkRespawnLate", typeof(float)));
		private static readonly System.Lazy<MethodAccessor<Network_Host_Entities>> _CheckSharkRespawn757602046 =
				new System.Lazy<MethodAccessor<Network_Host_Entities>>(() => MethodAccessor<Network_Host_Entities>.Create("CheckSharkRespawn"));
		private static readonly System.Lazy<MethodAccessor<Network_Host_Entities>> _GetNetworkBehaviourPrefabFromType3432952261 =
				new System.Lazy<MethodAccessor<Network_Host_Entities>>(() => MethodAccessor<Network_Host_Entities>.Create("GetNetworkBehaviourPrefabFromType", typeof(AI_NetworkBehaviourType)));
		private static readonly System.Lazy<MethodAccessor<Network_Host_Entities>> _GetSpawnerFromMessage3455480012 =
				new System.Lazy<MethodAccessor<Network_Host_Entities>>(() => MethodAccessor<Network_Host_Entities>.Create("GetSpawnerFromMessage", typeof(Message_CreateAINetworkBehaviour)));

		public static void Awake(this Network_Host_Entities __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this Network_Host_Entities __self) => _Start757602046.Value.Invoke(__self);
		public static void OnDestroy(this Network_Host_Entities __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void OnLoadRGDAINetworkBehaviors(this Network_Host_Entities __self) => _OnLoadRGDAINetworkBehaviors757602046.Value.Invoke(__self);
		public static System.Collections.IEnumerator LoadRGDAINetworkBehaviorsLate(this Network_Host_Entities __self) => (System.Collections.IEnumerator)_LoadRGDAINetworkBehaviorsLate757602046.Value.Invoke(__self);
		public static void CheckSharkRespawnLateStarter(this Network_Host_Entities __self) => _CheckSharkRespawnLateStarter757602046.Value.Invoke(__self);
		public static System.Collections.IEnumerator CheckSharkRespawnLate(this Network_Host_Entities __self, float delay) => (System.Collections.IEnumerator)_CheckSharkRespawnLate3486905475.Value.Invoke(__self, delay);
		public static void CheckSharkRespawn(this Network_Host_Entities __self) => _CheckSharkRespawn757602046.Value.Invoke(__self);
		public static AI_NetworkBehaviour GetNetworkBehaviourPrefabFromType(this Network_Host_Entities __self, AI_NetworkBehaviourType behaviourType) => (AI_NetworkBehaviour)_GetNetworkBehaviourPrefabFromType3432952261.Value.Invoke(__self, behaviourType);
		public static LandmarkEntitySpawner GetSpawnerFromMessage(this Network_Host_Entities __self, Message_CreateAINetworkBehaviour msg) => (LandmarkEntitySpawner)_GetSpawnerFromMessage3455480012.Value.Invoke(__self, msg);

	}

	public static class PrivateAccessor_Network_Player
	{

		private static readonly System.Lazy<FieldAccessor<Network_Player, bool>> _isLocalPlayer =
				new System.Lazy<FieldAccessor<Network_Player, bool>>(() => FieldAccessor<Network_Player, bool>.Create("isLocalPlayer"));
		private static readonly System.Lazy<FieldAccessor<Network_Player, Raft_Network>> _network =
				new System.Lazy<FieldAccessor<Network_Player, Raft_Network>>(() => FieldAccessor<Network_Player, Raft_Network>.Create("network"));
		private static readonly System.Lazy<FieldAccessor<Network_Player, BillboardObject>> _nameBillboard =
				new System.Lazy<FieldAccessor<Network_Player, BillboardObject>>(() => FieldAccessor<Network_Player, BillboardObject>.Create("nameBillboard"));
		private static readonly System.Lazy<FieldAccessor<Network_Player, UnityEngine.Sprite>> _smallSteamProfile =
				new System.Lazy<FieldAccessor<Network_Player, UnityEngine.Sprite>>(() => FieldAccessor<Network_Player, UnityEngine.Sprite>.Create("smallSteamProfile"));
		private static readonly System.Lazy<FieldAccessor<Network_Player, UnityEngine.Camera>> _camera =
				new System.Lazy<FieldAccessor<Network_Player, UnityEngine.Camera>>(() => FieldAccessor<Network_Player, UnityEngine.Camera>.Create("camera"));
		private static readonly System.Lazy<FieldAccessor<Network_Player, UnityEngine.Camera>> _handCamera =
				new System.Lazy<FieldAccessor<Network_Player, UnityEngine.Camera>>(() => FieldAccessor<Network_Player, UnityEngine.Camera>.Create("handCamera"));
		private static readonly System.Lazy<FieldAccessor<Network_Player, UnityEngine.Transform>> _cameraTransform =
				new System.Lazy<FieldAccessor<Network_Player, UnityEngine.Transform>>(() => FieldAccessor<Network_Player, UnityEngine.Transform>.Create("cameraTransform"));
		private static readonly System.Lazy<FieldAccessor<Network_Player, PersonController>> _controller =
				new System.Lazy<FieldAccessor<Network_Player, PersonController>>(() => FieldAccessor<Network_Player, PersonController>.Create("controller"));
		private static readonly System.Lazy<FieldAccessor<Network_Player, PlayerAnimator>> _animator =
				new System.Lazy<FieldAccessor<Network_Player, PlayerAnimator>>(() => FieldAccessor<Network_Player, PlayerAnimator>.Create("animator"));
		private static readonly System.Lazy<FieldAccessor<Network_Player, PlayerItemManager>> _playerItemManager =
				new System.Lazy<FieldAccessor<Network_Player, PlayerItemManager>>(() => FieldAccessor<Network_Player, PlayerItemManager>.Create("playerItemManager"));
		private static readonly System.Lazy<FieldAccessor<Network_Player, BlockCreator>> _blockCreator =
				new System.Lazy<FieldAccessor<Network_Player, BlockCreator>>(() => FieldAccessor<Network_Player, BlockCreator>.Create("blockCreator"));
		private static readonly System.Lazy<FieldAccessor<Network_Player, ZiplinePlayer>> _ziplinePlayer =
				new System.Lazy<FieldAccessor<Network_Player, ZiplinePlayer>>(() => FieldAccessor<Network_Player, ZiplinePlayer>.Create("ziplinePlayer"));
		private static readonly System.Lazy<FieldAccessor<Network_Player, PlayerNetworkManager>> _playerNetworkManager =
				new System.Lazy<FieldAccessor<Network_Player, PlayerNetworkManager>>(() => FieldAccessor<Network_Player, PlayerNetworkManager>.Create("playerNetworkManager"));
		private static readonly System.Lazy<FieldAccessor<Network_Player, Player>> _playerScript =
				new System.Lazy<FieldAccessor<Network_Player, Player>>(() => FieldAccessor<Network_Player, Player>.Create("playerScript"));
		private static readonly System.Lazy<FieldAccessor<Network_Player, BedComponent>> _bedComponent =
				new System.Lazy<FieldAccessor<Network_Player, BedComponent>>(() => FieldAccessor<Network_Player, BedComponent>.Create("bedComponent"));
		private static readonly System.Lazy<FieldAccessor<Network_Player, PlayerStats>> _stats =
				new System.Lazy<FieldAccessor<Network_Player, PlayerStats>>(() => FieldAccessor<Network_Player, PlayerStats>.Create("stats"));
		private static readonly System.Lazy<FieldAccessor<Network_Player, PlantManager>> _plantManager =
				new System.Lazy<FieldAccessor<Network_Player, PlantManager>>(() => FieldAccessor<Network_Player, PlantManager>.Create("plantManager"));
		private static readonly System.Lazy<FieldAccessor<Network_Player, StorageManager>> _storageManager =
				new System.Lazy<FieldAccessor<Network_Player, StorageManager>>(() => FieldAccessor<Network_Player, StorageManager>.Create("storageManager"));
		private static readonly System.Lazy<FieldAccessor<Network_Player, RessurectComponent>> _ressurectComponent =
				new System.Lazy<FieldAccessor<Network_Player, RessurectComponent>>(() => FieldAccessor<Network_Player, RessurectComponent>.Create("ressurectComponent"));
		private static readonly System.Lazy<FieldAccessor<Network_Player, BlueprintComponent>> _blueprintComponent =
				new System.Lazy<FieldAccessor<Network_Player, BlueprintComponent>>(() => FieldAccessor<Network_Player, BlueprintComponent>.Create("blueprintComponent"));
		private static readonly System.Lazy<FieldAccessor<Network_Player, CarryingComponent>> _carryingComponent =
				new System.Lazy<FieldAccessor<Network_Player, CarryingComponent>>(() => FieldAccessor<Network_Player, CarryingComponent>.Create("carryingComponent"));
		private static readonly System.Lazy<FieldAccessor<Network_Player, PlayerInventory>> _inventory =
				new System.Lazy<FieldAccessor<Network_Player, PlayerInventory>>(() => FieldAccessor<Network_Player, PlayerInventory>.Create("inventory"));
		private static readonly System.Lazy<FieldAccessor<Network_Player, Pickup>> _pickupScript =
				new System.Lazy<FieldAccessor<Network_Player, Pickup>>(() => FieldAccessor<Network_Player, Pickup>.Create("pickupScript"));
		private static readonly System.Lazy<FieldAccessor<Network_Player, Axe>> _axeScript =
				new System.Lazy<FieldAccessor<Network_Player, Axe>>(() => FieldAccessor<Network_Player, Axe>.Create("axeScript"));
		private static readonly System.Lazy<FieldAccessor<Network_Player, Hammer>> _hammerScript =
				new System.Lazy<FieldAccessor<Network_Player, Hammer>>(() => FieldAccessor<Network_Player, Hammer>.Create("hammerScript"));
		private static readonly System.Lazy<FieldAccessor<Network_Player, Paddle>> _paddleScript =
				new System.Lazy<FieldAccessor<Network_Player, Paddle>>(() => FieldAccessor<Network_Player, Paddle>.Create("paddleScript"));
		private static readonly System.Lazy<FieldAccessor<Network_Player, SharkBaitThrower>> _sharkBaitThrower =
				new System.Lazy<FieldAccessor<Network_Player, SharkBaitThrower>>(() => FieldAccessor<Network_Player, SharkBaitThrower>.Create("sharkBaitThrower"));
		private static readonly System.Lazy<FieldAccessor<Network_Player, PaintBrush>> _paintBrush =
				new System.Lazy<FieldAccessor<Network_Player, PaintBrush>>(() => FieldAccessor<Network_Player, PaintBrush>.Create("paintBrush"));
		private static readonly System.Lazy<FieldAccessor<Network_Player, PlayerEquipment>> _playerEquipment =
				new System.Lazy<FieldAccessor<Network_Player, PlayerEquipment>>(() => FieldAccessor<Network_Player, PlayerEquipment>.Create("playerEquipment"));
		private static readonly System.Lazy<FieldAccessor<Network_Player, ThrowableComponent_Bow>> _bow =
				new System.Lazy<FieldAccessor<Network_Player, ThrowableComponent_Bow>>(() => FieldAccessor<Network_Player, ThrowableComponent_Bow>.Create("bow"));
		private static readonly System.Lazy<FieldAccessor<Network_Player, Shovel>> _shovel =
				new System.Lazy<FieldAccessor<Network_Player, Shovel>>(() => FieldAccessor<Network_Player, Shovel>.Create("shovel"));
		private static readonly System.Lazy<FieldAccessor<Network_Player, Firework_Hand>> _fireworkHand =
				new System.Lazy<FieldAccessor<Network_Player, Firework_Hand>>(() => FieldAccessor<Network_Player, Firework_Hand>.Create("fireworkHand"));
		private static readonly System.Lazy<FieldAccessor<Network_Player, NoteBookUI>> _noteBookUI =
				new System.Lazy<FieldAccessor<Network_Player, NoteBookUI>>(() => FieldAccessor<Network_Player, NoteBookUI>.Create("noteBookUI"));
		private static readonly System.Lazy<FieldAccessor<Network_Player, MovementDeltaTracker>> _movementDeltaTracker =
				new System.Lazy<FieldAccessor<Network_Player, MovementDeltaTracker>>(() => FieldAccessor<Network_Player, MovementDeltaTracker>.Create("movementDeltaTracker"));
		private static readonly System.Lazy<FieldAccessor<Network_Player, Unstuck_Tracker>> _unstuckTracker =
				new System.Lazy<FieldAccessor<Network_Player, Unstuck_Tracker>>(() => FieldAccessor<Network_Player, Unstuck_Tracker>.Create("unstuckTracker"));
		private static readonly System.Lazy<FieldAccessor<Network_Player, HazmatSuit>> _hazmatSuit =
				new System.Lazy<FieldAccessor<Network_Player, HazmatSuit>>(() => FieldAccessor<Network_Player, HazmatSuit>.Create("hazmatSuit"));
		private static readonly System.Lazy<FieldAccessor<Network_Player, FishingBaitHandler>> _fishingBaitHandler =
				new System.Lazy<FieldAccessor<Network_Player, FishingBaitHandler>>(() => FieldAccessor<Network_Player, FishingBaitHandler>.Create("fishingBaitHandler"));
		private static readonly System.Lazy<FieldAccessor<Network_Player, PlayerBuffManager>> _buffManager =
				new System.Lazy<FieldAccessor<Network_Player, PlayerBuffManager>>(() => FieldAccessor<Network_Player, PlayerBuffManager>.Create("buffManager"));

		public static bool GetIsLocalPlayer(this Network_Player __self) => _isLocalPlayer.Value.GetValue(__self);
		public static void SetIsLocalPlayer(this Network_Player __self, bool value) => _isLocalPlayer.Value.SetValue(__self, value);
		public static Raft_Network GetNetwork(this Network_Player __self) => _network.Value.GetValue(__self);
		public static void SetNetwork(this Network_Player __self, Raft_Network value) => _network.Value.SetValue(__self, value);
		public static BillboardObject GetNameBillboard(this Network_Player __self) => _nameBillboard.Value.GetValue(__self);
		public static void SetNameBillboard(this Network_Player __self, BillboardObject value) => _nameBillboard.Value.SetValue(__self, value);
		public static UnityEngine.Sprite GetSmallSteamProfile(this Network_Player __self) => _smallSteamProfile.Value.GetValue(__self);
		public static void SetSmallSteamProfile(this Network_Player __self, UnityEngine.Sprite value) => _smallSteamProfile.Value.SetValue(__self, value);
		public static UnityEngine.Camera GetCamera(this Network_Player __self) => _camera.Value.GetValue(__self);
		public static void SetCamera(this Network_Player __self, UnityEngine.Camera value) => _camera.Value.SetValue(__self, value);
		public static UnityEngine.Camera GetHandCamera(this Network_Player __self) => _handCamera.Value.GetValue(__self);
		public static void SetHandCamera(this Network_Player __self, UnityEngine.Camera value) => _handCamera.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetCameraTransform(this Network_Player __self) => _cameraTransform.Value.GetValue(__self);
		public static void SetCameraTransform(this Network_Player __self, UnityEngine.Transform value) => _cameraTransform.Value.SetValue(__self, value);
		public static PersonController GetController(this Network_Player __self) => _controller.Value.GetValue(__self);
		public static void SetController(this Network_Player __self, PersonController value) => _controller.Value.SetValue(__self, value);
		public static PlayerAnimator GetAnimator(this Network_Player __self) => _animator.Value.GetValue(__self);
		public static void SetAnimator(this Network_Player __self, PlayerAnimator value) => _animator.Value.SetValue(__self, value);
		public static PlayerItemManager GetPlayerItemManager(this Network_Player __self) => _playerItemManager.Value.GetValue(__self);
		public static void SetPlayerItemManager(this Network_Player __self, PlayerItemManager value) => _playerItemManager.Value.SetValue(__self, value);
		public static BlockCreator GetBlockCreator(this Network_Player __self) => _blockCreator.Value.GetValue(__self);
		public static void SetBlockCreator(this Network_Player __self, BlockCreator value) => _blockCreator.Value.SetValue(__self, value);
		public static ZiplinePlayer GetZiplinePlayer(this Network_Player __self) => _ziplinePlayer.Value.GetValue(__self);
		public static void SetZiplinePlayer(this Network_Player __self, ZiplinePlayer value) => _ziplinePlayer.Value.SetValue(__self, value);
		public static PlayerNetworkManager GetPlayerNetworkManager(this Network_Player __self) => _playerNetworkManager.Value.GetValue(__self);
		public static void SetPlayerNetworkManager(this Network_Player __self, PlayerNetworkManager value) => _playerNetworkManager.Value.SetValue(__self, value);
		public static Player GetPlayerScript(this Network_Player __self) => _playerScript.Value.GetValue(__self);
		public static void SetPlayerScript(this Network_Player __self, Player value) => _playerScript.Value.SetValue(__self, value);
		public static BedComponent GetBedComponent(this Network_Player __self) => _bedComponent.Value.GetValue(__self);
		public static void SetBedComponent(this Network_Player __self, BedComponent value) => _bedComponent.Value.SetValue(__self, value);
		public static PlayerStats GetStats(this Network_Player __self) => _stats.Value.GetValue(__self);
		public static void SetStats(this Network_Player __self, PlayerStats value) => _stats.Value.SetValue(__self, value);
		public static PlantManager GetPlantManager(this Network_Player __self) => _plantManager.Value.GetValue(__self);
		public static void SetPlantManager(this Network_Player __self, PlantManager value) => _plantManager.Value.SetValue(__self, value);
		public static StorageManager GetStorageManager(this Network_Player __self) => _storageManager.Value.GetValue(__self);
		public static void SetStorageManager(this Network_Player __self, StorageManager value) => _storageManager.Value.SetValue(__self, value);
		public static RessurectComponent GetRessurectComponent(this Network_Player __self) => _ressurectComponent.Value.GetValue(__self);
		public static void SetRessurectComponent(this Network_Player __self, RessurectComponent value) => _ressurectComponent.Value.SetValue(__self, value);
		public static BlueprintComponent GetBlueprintComponent(this Network_Player __self) => _blueprintComponent.Value.GetValue(__self);
		public static void SetBlueprintComponent(this Network_Player __self, BlueprintComponent value) => _blueprintComponent.Value.SetValue(__self, value);
		public static CarryingComponent GetCarryingComponent(this Network_Player __self) => _carryingComponent.Value.GetValue(__self);
		public static void SetCarryingComponent(this Network_Player __self, CarryingComponent value) => _carryingComponent.Value.SetValue(__self, value);
		public static PlayerInventory GetInventory(this Network_Player __self) => _inventory.Value.GetValue(__self);
		public static void SetInventory(this Network_Player __self, PlayerInventory value) => _inventory.Value.SetValue(__self, value);
		public static Pickup GetPickupScript(this Network_Player __self) => _pickupScript.Value.GetValue(__self);
		public static void SetPickupScript(this Network_Player __self, Pickup value) => _pickupScript.Value.SetValue(__self, value);
		public static Axe GetAxeScript(this Network_Player __self) => _axeScript.Value.GetValue(__self);
		public static void SetAxeScript(this Network_Player __self, Axe value) => _axeScript.Value.SetValue(__self, value);
		public static Hammer GetHammerScript(this Network_Player __self) => _hammerScript.Value.GetValue(__self);
		public static void SetHammerScript(this Network_Player __self, Hammer value) => _hammerScript.Value.SetValue(__self, value);
		public static Paddle GetPaddleScript(this Network_Player __self) => _paddleScript.Value.GetValue(__self);
		public static void SetPaddleScript(this Network_Player __self, Paddle value) => _paddleScript.Value.SetValue(__self, value);
		public static SharkBaitThrower GetSharkBaitThrower(this Network_Player __self) => _sharkBaitThrower.Value.GetValue(__self);
		public static void SetSharkBaitThrower(this Network_Player __self, SharkBaitThrower value) => _sharkBaitThrower.Value.SetValue(__self, value);
		public static PaintBrush GetPaintBrush(this Network_Player __self) => _paintBrush.Value.GetValue(__self);
		public static void SetPaintBrush(this Network_Player __self, PaintBrush value) => _paintBrush.Value.SetValue(__self, value);
		public static PlayerEquipment GetPlayerEquipment(this Network_Player __self) => _playerEquipment.Value.GetValue(__self);
		public static void SetPlayerEquipment(this Network_Player __self, PlayerEquipment value) => _playerEquipment.Value.SetValue(__self, value);
		public static ThrowableComponent_Bow GetBow(this Network_Player __self) => _bow.Value.GetValue(__self);
		public static void SetBow(this Network_Player __self, ThrowableComponent_Bow value) => _bow.Value.SetValue(__self, value);
		public static Shovel GetShovel(this Network_Player __self) => _shovel.Value.GetValue(__self);
		public static void SetShovel(this Network_Player __self, Shovel value) => _shovel.Value.SetValue(__self, value);
		public static Firework_Hand GetFireworkHand(this Network_Player __self) => _fireworkHand.Value.GetValue(__self);
		public static void SetFireworkHand(this Network_Player __self, Firework_Hand value) => _fireworkHand.Value.SetValue(__self, value);
		public static NoteBookUI GetNoteBookUI(this Network_Player __self) => _noteBookUI.Value.GetValue(__self);
		public static void SetNoteBookUI(this Network_Player __self, NoteBookUI value) => _noteBookUI.Value.SetValue(__self, value);
		public static MovementDeltaTracker GetMovementDeltaTracker(this Network_Player __self) => _movementDeltaTracker.Value.GetValue(__self);
		public static void SetMovementDeltaTracker(this Network_Player __self, MovementDeltaTracker value) => _movementDeltaTracker.Value.SetValue(__self, value);
		public static Unstuck_Tracker GetUnstuckTracker(this Network_Player __self) => _unstuckTracker.Value.GetValue(__self);
		public static void SetUnstuckTracker(this Network_Player __self, Unstuck_Tracker value) => _unstuckTracker.Value.SetValue(__self, value);
		public static HazmatSuit GetHazmatSuit(this Network_Player __self) => _hazmatSuit.Value.GetValue(__self);
		public static void SetHazmatSuit(this Network_Player __self, HazmatSuit value) => _hazmatSuit.Value.SetValue(__self, value);
		public static FishingBaitHandler GetFishingBaitHandler(this Network_Player __self) => _fishingBaitHandler.Value.GetValue(__self);
		public static void SetFishingBaitHandler(this Network_Player __self, FishingBaitHandler value) => _fishingBaitHandler.Value.SetValue(__self, value);
		public static PlayerBuffManager GetBuffManager(this Network_Player __self) => _buffManager.Value.GetValue(__self);
		public static void SetBuffManager(this Network_Player __self, PlayerBuffManager value) => _buffManager.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Network_Player>> _SetToValidSpawnPointLate757602046 =
				new System.Lazy<MethodAccessor<Network_Player>>(() => MethodAccessor<Network_Player>.Create("SetToValidSpawnPointLate"));
		private static readonly System.Lazy<MethodAccessor<Network_Player>> _HandleInitialAnimationDelayed3665207588 =
				new System.Lazy<MethodAccessor<Network_Player>>(() => MethodAccessor<Network_Player>.Create("HandleInitialAnimationDelayed", typeof(Message_Player_Create), typeof(float)));
		private static readonly System.Lazy<MethodAccessor<Network_Player>> _OnWorldShift3429126434 =
				new System.Lazy<MethodAccessor<Network_Player>>(() => MethodAccessor<Network_Player>.Create("OnWorldShift", typeof(UnityEngine.Vector3)));
		private static readonly System.Lazy<MethodAccessor<Network_Player>> _ActivateController3486905475 =
				new System.Lazy<MethodAccessor<Network_Player>>(() => MethodAccessor<Network_Player>.Create("ActivateController", typeof(float)));
		private static readonly System.Lazy<MethodAccessor<Network_Player>> _SetBillboardTarget3486905475 =
				new System.Lazy<MethodAccessor<Network_Player>>(() => MethodAccessor<Network_Player>.Create("SetBillboardTarget", typeof(float)));
		private static readonly System.Lazy<MethodAccessor<Network_Player>> _InitializeComponents757602046 =
				new System.Lazy<MethodAccessor<Network_Player>>(() => MethodAccessor<Network_Player>.Create("InitializeComponents"));
		private static readonly System.Lazy<MethodAccessor<Network_Player>> _Start757602046 =
				new System.Lazy<MethodAccessor<Network_Player>>(() => MethodAccessor<Network_Player>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<Network_Player>> _Update757602046 =
				new System.Lazy<MethodAccessor<Network_Player>>(() => MethodAccessor<Network_Player>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<Network_Player>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<Network_Player>>(() => MethodAccessor<Network_Player>.Create("OnDestroy"));

		public static void SetToValidSpawnPointLate(this Network_Player __self) => _SetToValidSpawnPointLate757602046.Value.Invoke(__self);
		public static System.Collections.IEnumerator HandleInitialAnimationDelayed(this Network_Player __self, Message_Player_Create msg, float delay) => (System.Collections.IEnumerator)_HandleInitialAnimationDelayed3665207588.Value.Invoke(__self, msg, delay);
		public static void OnWorldShift(this Network_Player __self, UnityEngine.Vector3 shift) => _OnWorldShift3429126434.Value.Invoke(__self, shift);
		public static System.Collections.IEnumerator ActivateController(this Network_Player __self, float timeDelay) => (System.Collections.IEnumerator)_ActivateController3486905475.Value.Invoke(__self, timeDelay);
		public static System.Collections.IEnumerator SetBillboardTarget(this Network_Player __self, float timeDelay) => (System.Collections.IEnumerator)_SetBillboardTarget3486905475.Value.Invoke(__self, timeDelay);
		public static void InitializeComponents(this Network_Player __self) => _InitializeComponents757602046.Value.Invoke(__self);
		public static void Start(this Network_Player __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this Network_Player __self) => _Update757602046.Value.Invoke(__self);
		public static void OnDestroy(this Network_Player __self) => _OnDestroy757602046.Value.Invoke(__self);

	}

	public static class Private_Network_Player
	{

		private static readonly System.Lazy<StaticFieldAccessor<UnityEngine.Transform>> _localPlayerCameraTransform =
				new System.Lazy<StaticFieldAccessor<UnityEngine.Transform>>(() => StaticFieldAccessor<UnityEngine.Transform>.Create(typeof(Network_Player), "localPlayerCameraTransform"));

		public static UnityEngine.Transform GetLocalPlayerCameraTransform() => _localPlayerCameraTransform.Value.GetValue();
		public static void SetLocalPlayerCameraTransform(UnityEngine.Transform value) => _localPlayerCameraTransform.Value.SetValue(value);

	}

	public static class PrivateAccessor_Message_Player_Create
	{

		private static readonly System.Lazy<FieldAccessor<Message_Player_Create, ulong>> _steamID =
				new System.Lazy<FieldAccessor<Message_Player_Create, ulong>>(() => FieldAccessor<Message_Player_Create, ulong>.Create("steamID"));
		private static readonly System.Lazy<FieldAccessor<Message_Player_Create, bool>> _aui =
				new System.Lazy<FieldAccessor<Message_Player_Create, bool>>(() => FieldAccessor<Message_Player_Create, bool>.Create("aui"));

		public static ulong GetSteamID(this Message_Player_Create __self) => _steamID.Value.GetValue(__self);
		public static void SetSteamID(this Message_Player_Create __self, ulong value) => _steamID.Value.SetValue(__self, value);
		public static bool GetAui(this Message_Player_Create __self) => _aui.Value.GetValue(__self);
		public static void SetAui(this Message_Player_Create __self, bool value) => _aui.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_Network_Water
	{

		private static readonly System.Lazy<FieldAccessor<Network_Water, float>> _lerpSpeed =
				new System.Lazy<FieldAccessor<Network_Water, float>>(() => FieldAccessor<Network_Water, float>.Create("lerpSpeed"));
		private static readonly System.Lazy<FieldAccessor<Network_Water, Raft_Network>> _network =
				new System.Lazy<FieldAccessor<Network_Water, Raft_Network>>(() => FieldAccessor<Network_Water, Raft_Network>.Create("network"));
		private static readonly System.Lazy<FieldAccessor<Network_Water, UltimateWater.Water>> _playwayWater =
				new System.Lazy<FieldAccessor<Network_Water, UltimateWater.Water>>(() => FieldAccessor<Network_Water, UltimateWater.Water>.Create("playwayWater"));
		private static readonly System.Lazy<FieldAccessor<Network_Water, float>> _networkTime =
				new System.Lazy<FieldAccessor<Network_Water, float>>(() => FieldAccessor<Network_Water, float>.Create("networkTime"));

		public static float GetLerpSpeed(this Network_Water __self) => _lerpSpeed.Value.GetValue(__self);
		public static void SetLerpSpeed(this Network_Water __self, float value) => _lerpSpeed.Value.SetValue(__self, value);
		public static Raft_Network GetNetwork(this Network_Water __self) => _network.Value.GetValue(__self);
		public static void SetNetwork(this Network_Water __self, Raft_Network value) => _network.Value.SetValue(__self, value);
		public static UltimateWater.Water GetPlaywayWater(this Network_Water __self) => _playwayWater.Value.GetValue(__self);
		public static void SetPlaywayWater(this Network_Water __self, UltimateWater.Water value) => _playwayWater.Value.SetValue(__self, value);
		public static float GetNetworkTime(this Network_Water __self) => _networkTime.Value.GetValue(__self);
		public static void SetNetworkTime(this Network_Water __self, float value) => _networkTime.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Network_Water>> _Awake757602046 =
				new System.Lazy<MethodAccessor<Network_Water>>(() => MethodAccessor<Network_Water>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<Network_Water>> _Start757602046 =
				new System.Lazy<MethodAccessor<Network_Water>>(() => MethodAccessor<Network_Water>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<Network_Water>> _Update757602046 =
				new System.Lazy<MethodAccessor<Network_Water>>(() => MethodAccessor<Network_Water>.Create("Update"));

		public static void Awake(this Network_Water __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this Network_Water __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this Network_Water __self) => _Update757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_PickupObjectManager
	{

		private static readonly System.Lazy<FieldAccessor<PickupObjectManager, UnityEngine.GameObject>> _dropboxPrefab =
				new System.Lazy<FieldAccessor<PickupObjectManager, UnityEngine.GameObject>>(() => FieldAccessor<PickupObjectManager, UnityEngine.GameObject>.Create("dropboxPrefab"));

		public static UnityEngine.GameObject GetDropboxPrefab(this PickupObjectManager __self) => _dropboxPrefab.Value.GetValue(__self);
		public static void SetDropboxPrefab(this PickupObjectManager __self, UnityEngine.GameObject value) => _dropboxPrefab.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<PickupObjectManager>> _Awake757602046 =
				new System.Lazy<MethodAccessor<PickupObjectManager>>(() => MethodAccessor<PickupObjectManager>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<PickupObjectManager>> _Start757602046 =
				new System.Lazy<MethodAccessor<PickupObjectManager>>(() => MethodAccessor<PickupObjectManager>.Create("Start"));

		public static void Awake(this PickupObjectManager __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this PickupObjectManager __self) => _Start757602046.Value.Invoke(__self);

	}

	public static class Private_PickupObjectManager
	{

		private static readonly System.Lazy<StaticFieldAccessor<PoolManager>> _poolManager =
				new System.Lazy<StaticFieldAccessor<PoolManager>>(() => StaticFieldAccessor<PoolManager>.Create(typeof(PickupObjectManager), "poolManager"));
		private static readonly System.Lazy<StaticFieldAccessor<Raft_Network>> _network =
				new System.Lazy<StaticFieldAccessor<Raft_Network>>(() => StaticFieldAccessor<Raft_Network>.Create(typeof(PickupObjectManager), "network"));
		private static readonly System.Lazy<StaticFieldAccessor<PickupObjectManager>> _self =
				new System.Lazy<StaticFieldAccessor<PickupObjectManager>>(() => StaticFieldAccessor<PickupObjectManager>.Create(typeof(PickupObjectManager), "self"));
		private static readonly System.Lazy<StaticFieldAccessor<SoundManager>> _soundManager =
				new System.Lazy<StaticFieldAccessor<SoundManager>>(() => StaticFieldAccessor<SoundManager>.Create(typeof(PickupObjectManager), "soundManager"));
		private static readonly System.Lazy<StaticFieldAccessor<UnityEngine.GameObject>> _dropboxPrefabStatic =
				new System.Lazy<StaticFieldAccessor<UnityEngine.GameObject>>(() => StaticFieldAccessor<UnityEngine.GameObject>.Create(typeof(PickupObjectManager), "dropboxPrefabStatic"));
		private static readonly System.Lazy<StaticFieldAccessor<QuestItemManager>> _questItemManager =
				new System.Lazy<StaticFieldAccessor<QuestItemManager>>(() => StaticFieldAccessor<QuestItemManager>.Create(typeof(PickupObjectManager), "questItemManager"));

		public static PoolManager GetPoolManager() => _poolManager.Value.GetValue();
		public static void SetPoolManager(PoolManager value) => _poolManager.Value.SetValue(value);
		public static Raft_Network GetNetwork() => _network.Value.GetValue();
		public static void SetNetwork(Raft_Network value) => _network.Value.SetValue(value);
		public static PickupObjectManager GetSelf() => _self.Value.GetValue();
		public static void SetSelf(PickupObjectManager value) => _self.Value.SetValue(value);
		public static SoundManager GetSoundManager() => _soundManager.Value.GetValue();
		public static void SetSoundManager(SoundManager value) => _soundManager.Value.SetValue(value);
		public static UnityEngine.GameObject GetDropboxPrefabStatic() => _dropboxPrefabStatic.Value.GetValue();
		public static void SetDropboxPrefabStatic(UnityEngine.GameObject value) => _dropboxPrefabStatic.Value.SetValue(value);
		public static QuestItemManager GetQuestItemManager() => _questItemManager.Value.GetValue();
		public static void SetQuestItemManager(QuestItemManager value) => _questItemManager.Value.SetValue(value);

		private static readonly System.Lazy<StaticMethodAccessor> _SpawnDropItem791669214 =
				new System.Lazy<StaticMethodAccessor>(() => StaticMethodAccessor.Create(typeof(PickupObjectManager), "SpawnDropItem", typeof(ItemInstance), typeof(UnityEngine.Vector3), typeof(UnityEngine.Vector3), typeof(uint)));

		public static void SpawnDropItem(ItemInstance itemInstance, UnityEngine.Vector3 position, UnityEngine.Vector3 rotation, uint itemObjectIndex) => _SpawnDropItem791669214.Value.Invoke(itemInstance, position, rotation, itemObjectIndex);

	}

	public static class PrivateAccessor_Message_DropItem
	{

		private static readonly System.Lazy<FieldAccessor<Message_DropItem, float>> _xPos =
				new System.Lazy<FieldAccessor<Message_DropItem, float>>(() => FieldAccessor<Message_DropItem, float>.Create("xPos"));
		private static readonly System.Lazy<FieldAccessor<Message_DropItem, float>> _yPos =
				new System.Lazy<FieldAccessor<Message_DropItem, float>>(() => FieldAccessor<Message_DropItem, float>.Create("yPos"));
		private static readonly System.Lazy<FieldAccessor<Message_DropItem, float>> _zPos =
				new System.Lazy<FieldAccessor<Message_DropItem, float>>(() => FieldAccessor<Message_DropItem, float>.Create("zPos"));
		private static readonly System.Lazy<FieldAccessor<Message_DropItem, float>> _xDir =
				new System.Lazy<FieldAccessor<Message_DropItem, float>>(() => FieldAccessor<Message_DropItem, float>.Create("xDir"));
		private static readonly System.Lazy<FieldAccessor<Message_DropItem, float>> _yDir =
				new System.Lazy<FieldAccessor<Message_DropItem, float>>(() => FieldAccessor<Message_DropItem, float>.Create("yDir"));
		private static readonly System.Lazy<FieldAccessor<Message_DropItem, float>> _zDir =
				new System.Lazy<FieldAccessor<Message_DropItem, float>>(() => FieldAccessor<Message_DropItem, float>.Create("zDir"));

		public static float GetXPos(this Message_DropItem __self) => _xPos.Value.GetValue(__self);
		public static void SetXPos(this Message_DropItem __self, float value) => _xPos.Value.SetValue(__self, value);
		public static float GetYPos(this Message_DropItem __self) => _yPos.Value.GetValue(__self);
		public static void SetYPos(this Message_DropItem __self, float value) => _yPos.Value.SetValue(__self, value);
		public static float GetZPos(this Message_DropItem __self) => _zPos.Value.GetValue(__self);
		public static void SetZPos(this Message_DropItem __self, float value) => _zPos.Value.SetValue(__self, value);
		public static float GetXDir(this Message_DropItem __self) => _xDir.Value.GetValue(__self);
		public static void SetXDir(this Message_DropItem __self, float value) => _xDir.Value.SetValue(__self, value);
		public static float GetYDir(this Message_DropItem __self) => _yDir.Value.GetValue(__self);
		public static void SetYDir(this Message_DropItem __self, float value) => _yDir.Value.SetValue(__self, value);
		public static float GetZDir(this Message_DropItem __self) => _zDir.Value.GetValue(__self);
		public static void SetZDir(this Message_DropItem __self, float value) => _zDir.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_Raft_Network
	{

		private static readonly System.Lazy<FieldAccessor<Raft_Network, Network_Player>> _localPlayer =
				new System.Lazy<FieldAccessor<Raft_Network, Network_Player>>(() => FieldAccessor<Raft_Network, Network_Player>.Create("localPlayer"));
		private static readonly System.Lazy<FieldAccessor<Raft_Network, NetworkIDManager>> _networkIDManager =
				new System.Lazy<FieldAccessor<Raft_Network, NetworkIDManager>>(() => FieldAccessor<Raft_Network, NetworkIDManager>.Create("networkIDManager"));
		private static readonly System.Lazy<FieldAccessor<Raft_Network, Steamworks.CSteamID>> _localSteamID =
				new System.Lazy<FieldAccessor<Raft_Network, Steamworks.CSteamID>>(() => FieldAccessor<Raft_Network, Steamworks.CSteamID>.Create("localSteamID"));
		private static readonly System.Lazy<FieldAccessor<Raft_Network, Steamworks.CSteamID>> _lobbyID =
				new System.Lazy<FieldAccessor<Raft_Network, Steamworks.CSteamID>>(() => FieldAccessor<Raft_Network, Steamworks.CSteamID>.Create("lobbyID"));
		private static readonly System.Lazy<FieldAccessor<Raft_Network, Steamworks.CSteamID>> _hostID =
				new System.Lazy<FieldAccessor<Raft_Network, Steamworks.CSteamID>>(() => FieldAccessor<Raft_Network, Steamworks.CSteamID>.Create("hostID"));
		private static readonly System.Lazy<FieldAccessor<Raft_Network, System.Collections.Generic.List<Steamworks.CSteamID>>> _connectingUsers =
				new System.Lazy<FieldAccessor<Raft_Network, System.Collections.Generic.List<Steamworks.CSteamID>>>(() => FieldAccessor<Raft_Network, System.Collections.Generic.List<Steamworks.CSteamID>>.Create("connectingUsers"));
		private static readonly System.Lazy<FieldAccessor<Raft_Network, System.Collections.Generic.List<Steamworks.CSteamID>>> _whitelistedUsers =
				new System.Lazy<FieldAccessor<Raft_Network, System.Collections.Generic.List<Steamworks.CSteamID>>>(() => FieldAccessor<Raft_Network, System.Collections.Generic.List<Steamworks.CSteamID>>.Create("whitelistedUsers"));
		private static readonly System.Lazy<FieldAccessor<Raft_Network, Steamworks.CSteamID>> _awaitingConnectionResponseUser =
				new System.Lazy<FieldAccessor<Raft_Network, Steamworks.CSteamID>>(() => FieldAccessor<Raft_Network, Steamworks.CSteamID>.Create("awaitingConnectionResponseUser"));
		private static readonly System.Lazy<FieldAccessor<Raft_Network, Settings>> _settings =
				new System.Lazy<FieldAccessor<Raft_Network, Settings>>(() => FieldAccessor<Raft_Network, Settings>.Create("settings"));
		private static readonly System.Lazy<FieldAccessor<Raft_Network, UnityEngine.GameObject>> _bedRespawnPoint =
				new System.Lazy<FieldAccessor<Raft_Network, UnityEngine.GameObject>>(() => FieldAccessor<Raft_Network, UnityEngine.GameObject>.Create("bedRespawnPoint"));
		private static readonly System.Lazy<FieldAccessor<Raft_Network, bool>> _connectedToHost =
				new System.Lazy<FieldAccessor<Raft_Network, bool>>(() => FieldAccessor<Raft_Network, bool>.Create("connectedToHost"));
		private static readonly System.Lazy<FieldAccessor<Raft_Network, float>> _ping =
				new System.Lazy<FieldAccessor<Raft_Network, float>>(() => FieldAccessor<Raft_Network, float>.Create("ping"));
		private static readonly System.Lazy<FieldAccessor<Raft_Network, float>> _totalBytesSent =
				new System.Lazy<FieldAccessor<Raft_Network, float>>(() => FieldAccessor<Raft_Network, float>.Create("totalBytesSent"));
		private static readonly System.Lazy<FieldAccessor<Raft_Network, float>> _lastSecondBytes =
				new System.Lazy<FieldAccessor<Raft_Network, float>>(() => FieldAccessor<Raft_Network, float>.Create("lastSecondBytes"));
		private static readonly System.Lazy<FieldAccessor<Raft_Network, float>> _bytesSentPerSecond =
				new System.Lazy<FieldAccessor<Raft_Network, float>>(() => FieldAccessor<Raft_Network, float>.Create("bytesSentPerSecond"));
		private static readonly System.Lazy<FieldAccessor<Raft_Network, float>> _maxBytePackage =
				new System.Lazy<FieldAccessor<Raft_Network, float>>(() => FieldAccessor<Raft_Network, float>.Create("maxBytePackage"));
		private static readonly System.Lazy<FieldAccessor<Raft_Network, UnityEngine.SceneManagement.Scene>> _startScene =
				new System.Lazy<FieldAccessor<Raft_Network, UnityEngine.SceneManagement.Scene>>(() => FieldAccessor<Raft_Network, UnityEngine.SceneManagement.Scene>.Create("startScene"));
		private static readonly System.Lazy<FieldAccessor<Raft_Network, LoadSceneManager>> _loadSceneManager =
				new System.Lazy<FieldAccessor<Raft_Network, LoadSceneManager>>(() => FieldAccessor<Raft_Network, LoadSceneManager>.Create("loadSceneManager"));
		private static readonly System.Lazy<FieldAccessor<Raft_Network, UnityEngine.Coroutine>> _worldLoadedCoroutine =
				new System.Lazy<FieldAccessor<Raft_Network, UnityEngine.Coroutine>>(() => FieldAccessor<Raft_Network, UnityEngine.Coroutine>.Create("worldLoadedCoroutine"));
		private static readonly System.Lazy<FieldAccessor<Raft_Network, Steamworks.Callback<Steamworks.P2PSessionRequest_t>>> _OnP2PSessionRequestCallback =
				new System.Lazy<FieldAccessor<Raft_Network, Steamworks.Callback<Steamworks.P2PSessionRequest_t>>>(() => FieldAccessor<Raft_Network, Steamworks.Callback<Steamworks.P2PSessionRequest_t>>.Create("OnP2PSessionRequestCallback"));
		private static readonly System.Lazy<FieldAccessor<Raft_Network, Steamworks.Callback<Steamworks.P2PSessionConnectFail_t>>> _OnP2PSessionConnectFailCallback =
				new System.Lazy<FieldAccessor<Raft_Network, Steamworks.Callback<Steamworks.P2PSessionConnectFail_t>>>(() => FieldAccessor<Raft_Network, Steamworks.Callback<Steamworks.P2PSessionConnectFail_t>>.Create("OnP2PSessionConnectFailCallback"));
		private static readonly System.Lazy<FieldAccessor<Raft_Network, Steamworks.Callback<Steamworks.FriendRichPresenceUpdate_t>>> _OnFriendPresenceUpdateCallback =
				new System.Lazy<FieldAccessor<Raft_Network, Steamworks.Callback<Steamworks.FriendRichPresenceUpdate_t>>>(() => FieldAccessor<Raft_Network, Steamworks.Callback<Steamworks.FriendRichPresenceUpdate_t>>.Create("OnFriendPresenceUpdateCallback"));
		private static readonly System.Lazy<FieldAccessor<Raft_Network, Steamworks.Callback<Steamworks.GameRichPresenceJoinRequested_t>>> _OnGameRichPresenceJoinRequestCallback =
				new System.Lazy<FieldAccessor<Raft_Network, Steamworks.Callback<Steamworks.GameRichPresenceJoinRequested_t>>>(() => FieldAccessor<Raft_Network, Steamworks.Callback<Steamworks.GameRichPresenceJoinRequested_t>>.Create("OnGameRichPresenceJoinRequestCallback"));
		private static readonly System.Lazy<FieldAccessor<Raft_Network, Steamworks.Callback<Steamworks.UserStatsReceived_t>>> _OnUserStatsRecievedCallback =
				new System.Lazy<FieldAccessor<Raft_Network, Steamworks.Callback<Steamworks.UserStatsReceived_t>>>(() => FieldAccessor<Raft_Network, Steamworks.Callback<Steamworks.UserStatsReceived_t>>.Create("OnUserStatsRecievedCallback"));

		public static Network_Player GetLocalPlayer(this Raft_Network __self) => _localPlayer.Value.GetValue(__self);
		public static void SetLocalPlayer(this Raft_Network __self, Network_Player value) => _localPlayer.Value.SetValue(__self, value);
		public static NetworkIDManager GetNetworkIDManager(this Raft_Network __self) => _networkIDManager.Value.GetValue(__self);
		public static void SetNetworkIDManager(this Raft_Network __self, NetworkIDManager value) => _networkIDManager.Value.SetValue(__self, value);
		public static Steamworks.CSteamID GetLocalSteamID(this Raft_Network __self) => _localSteamID.Value.GetValue(__self);
		public static void SetLocalSteamID(this Raft_Network __self, Steamworks.CSteamID value) => _localSteamID.Value.SetValue(__self, value);
		public static Steamworks.CSteamID GetLobbyID(this Raft_Network __self) => _lobbyID.Value.GetValue(__self);
		public static void SetLobbyID(this Raft_Network __self, Steamworks.CSteamID value) => _lobbyID.Value.SetValue(__self, value);
		public static Steamworks.CSteamID GetHostID(this Raft_Network __self) => _hostID.Value.GetValue(__self);
		public static void SetHostID(this Raft_Network __self, Steamworks.CSteamID value) => _hostID.Value.SetValue(__self, value);
		public static System.Collections.Generic.List<Steamworks.CSteamID> GetConnectingUsers(this Raft_Network __self) => _connectingUsers.Value.GetValue(__self);
		public static void SetConnectingUsers(this Raft_Network __self, System.Collections.Generic.List<Steamworks.CSteamID> value) => _connectingUsers.Value.SetValue(__self, value);
		public static System.Collections.Generic.List<Steamworks.CSteamID> GetWhitelistedUsers(this Raft_Network __self) => _whitelistedUsers.Value.GetValue(__self);
		public static void SetWhitelistedUsers(this Raft_Network __self, System.Collections.Generic.List<Steamworks.CSteamID> value) => _whitelistedUsers.Value.SetValue(__self, value);
		public static Steamworks.CSteamID GetAwaitingConnectionResponseUser(this Raft_Network __self) => _awaitingConnectionResponseUser.Value.GetValue(__self);
		public static void SetAwaitingConnectionResponseUser(this Raft_Network __self, Steamworks.CSteamID value) => _awaitingConnectionResponseUser.Value.SetValue(__self, value);
		public static Settings GetSettings(this Raft_Network __self) => _settings.Value.GetValue(__self);
		public static void SetSettings(this Raft_Network __self, Settings value) => _settings.Value.SetValue(__self, value);
		public static UnityEngine.GameObject GetBedRespawnPoint(this Raft_Network __self) => _bedRespawnPoint.Value.GetValue(__self);
		public static void SetBedRespawnPoint(this Raft_Network __self, UnityEngine.GameObject value) => _bedRespawnPoint.Value.SetValue(__self, value);
		public static bool GetConnectedToHost(this Raft_Network __self) => _connectedToHost.Value.GetValue(__self);
		public static void SetConnectedToHost(this Raft_Network __self, bool value) => _connectedToHost.Value.SetValue(__self, value);
		public static float GetPing(this Raft_Network __self) => _ping.Value.GetValue(__self);
		public static void SetPing(this Raft_Network __self, float value) => _ping.Value.SetValue(__self, value);
		public static float GetTotalBytesSent(this Raft_Network __self) => _totalBytesSent.Value.GetValue(__self);
		public static void SetTotalBytesSent(this Raft_Network __self, float value) => _totalBytesSent.Value.SetValue(__self, value);
		public static float GetLastSecondBytes(this Raft_Network __self) => _lastSecondBytes.Value.GetValue(__self);
		public static void SetLastSecondBytes(this Raft_Network __self, float value) => _lastSecondBytes.Value.SetValue(__self, value);
		public static float GetBytesSentPerSecond(this Raft_Network __self) => _bytesSentPerSecond.Value.GetValue(__self);
		public static void SetBytesSentPerSecond(this Raft_Network __self, float value) => _bytesSentPerSecond.Value.SetValue(__self, value);
		public static float GetMaxBytePackage(this Raft_Network __self) => _maxBytePackage.Value.GetValue(__self);
		public static void SetMaxBytePackage(this Raft_Network __self, float value) => _maxBytePackage.Value.SetValue(__self, value);
		public static UnityEngine.SceneManagement.Scene GetStartScene(this Raft_Network __self) => _startScene.Value.GetValue(__self);
		public static void SetStartScene(this Raft_Network __self, UnityEngine.SceneManagement.Scene value) => _startScene.Value.SetValue(__self, value);
		public static LoadSceneManager GetLoadSceneManager(this Raft_Network __self) => _loadSceneManager.Value.GetValue(__self);
		public static void SetLoadSceneManager(this Raft_Network __self, LoadSceneManager value) => _loadSceneManager.Value.SetValue(__self, value);
		public static UnityEngine.Coroutine GetWorldLoadedCoroutine(this Raft_Network __self) => _worldLoadedCoroutine.Value.GetValue(__self);
		public static void SetWorldLoadedCoroutine(this Raft_Network __self, UnityEngine.Coroutine value) => _worldLoadedCoroutine.Value.SetValue(__self, value);
		public static Steamworks.Callback<Steamworks.P2PSessionRequest_t> GetOnP2PSessionRequestCallback(this Raft_Network __self) => _OnP2PSessionRequestCallback.Value.GetValue(__self);
		public static void SetOnP2PSessionRequestCallback(this Raft_Network __self, Steamworks.Callback<Steamworks.P2PSessionRequest_t> value) => _OnP2PSessionRequestCallback.Value.SetValue(__self, value);
		public static Steamworks.Callback<Steamworks.P2PSessionConnectFail_t> GetOnP2PSessionConnectFailCallback(this Raft_Network __self) => _OnP2PSessionConnectFailCallback.Value.GetValue(__self);
		public static void SetOnP2PSessionConnectFailCallback(this Raft_Network __self, Steamworks.Callback<Steamworks.P2PSessionConnectFail_t> value) => _OnP2PSessionConnectFailCallback.Value.SetValue(__self, value);
		public static Steamworks.Callback<Steamworks.FriendRichPresenceUpdate_t> GetOnFriendPresenceUpdateCallback(this Raft_Network __self) => _OnFriendPresenceUpdateCallback.Value.GetValue(__self);
		public static void SetOnFriendPresenceUpdateCallback(this Raft_Network __self, Steamworks.Callback<Steamworks.FriendRichPresenceUpdate_t> value) => _OnFriendPresenceUpdateCallback.Value.SetValue(__self, value);
		public static Steamworks.Callback<Steamworks.GameRichPresenceJoinRequested_t> GetOnGameRichPresenceJoinRequestCallback(this Raft_Network __self) => _OnGameRichPresenceJoinRequestCallback.Value.GetValue(__self);
		public static void SetOnGameRichPresenceJoinRequestCallback(this Raft_Network __self, Steamworks.Callback<Steamworks.GameRichPresenceJoinRequested_t> value) => _OnGameRichPresenceJoinRequestCallback.Value.SetValue(__self, value);
		public static Steamworks.Callback<Steamworks.UserStatsReceived_t> GetOnUserStatsRecievedCallback(this Raft_Network __self) => _OnUserStatsRecievedCallback.Value.GetValue(__self);
		public static void SetOnUserStatsRecievedCallback(this Raft_Network __self, Steamworks.Callback<Steamworks.UserStatsReceived_t> value) => _OnUserStatsRecievedCallback.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Raft_Network>> _OnEnable757602046 =
				new System.Lazy<MethodAccessor<Raft_Network>>(() => MethodAccessor<Raft_Network>.Create("OnEnable"));
		private static readonly System.Lazy<MethodAccessor<Raft_Network>> _OnApplicationQuit757602046 =
				new System.Lazy<MethodAccessor<Raft_Network>>(() => MethodAccessor<Raft_Network>.Create("OnApplicationQuit"));
		private static readonly System.Lazy<MethodAccessor<Raft_Network>> _Awake757602046 =
				new System.Lazy<MethodAccessor<Raft_Network>>(() => MethodAccessor<Raft_Network>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<Raft_Network>> _Start757602046 =
				new System.Lazy<MethodAccessor<Raft_Network>>(() => MethodAccessor<Raft_Network>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<Raft_Network>> _Update757602046 =
				new System.Lazy<MethodAccessor<Raft_Network>>(() => MethodAccessor<Raft_Network>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<Raft_Network>> _SendPing757602046 =
				new System.Lazy<MethodAccessor<Raft_Network>>(() => MethodAccessor<Raft_Network>.Create("SendPing"));
		private static readonly System.Lazy<MethodAccessor<Raft_Network>> _CalculateBytes757602046 =
				new System.Lazy<MethodAccessor<Raft_Network>>(() => MethodAccessor<Raft_Network>.Create("CalculateBytes"));
		private static readonly System.Lazy<MethodAccessor<Raft_Network>> _SplitPackage2972152306 =
				new System.Lazy<MethodAccessor<Raft_Network>>(() => MethodAccessor<Raft_Network>.Create("SplitPackage", typeof(int), typeof(System.IO.MemoryStream), typeof(System.Runtime.Serialization.Formatters.Binary.BinaryFormatter), typeof(Steamworks.CSteamID), typeof(Packet_Multiple), typeof(NetworkChannel)));
		private static readonly System.Lazy<MethodAccessor<Raft_Network>> _SendP2PFragmented3305924113 =
				new System.Lazy<MethodAccessor<Raft_Network>>(() => MethodAccessor<Raft_Network>.Create("SendP2PFragmented", typeof(System.IO.MemoryStream), typeof(System.Runtime.Serialization.Formatters.Binary.BinaryFormatter), typeof(Steamworks.CSteamID), typeof(Packet_Single), typeof(NetworkChannel)));
		private static readonly System.Lazy<MethodAccessor<Raft_Network>> _ReadP2P_Channel_Connecting757602046 =
				new System.Lazy<MethodAccessor<Raft_Network>>(() => MethodAccessor<Raft_Network>.Create("ReadP2P_Channel_Connecting"));
		private static readonly System.Lazy<MethodAccessor<Raft_Network>> _ReadP2P_Channel_Game757602046 =
				new System.Lazy<MethodAccessor<Raft_Network>>(() => MethodAccessor<Raft_Network>.Create("ReadP2P_Channel_Game"));
		private static readonly System.Lazy<MethodAccessor<Raft_Network>> _IsUserWhitelisted3429031458 =
				new System.Lazy<MethodAccessor<Raft_Network>>(() => MethodAccessor<Raft_Network>.Create("IsUserWhitelisted", typeof(Steamworks.CSteamID)));
		private static readonly System.Lazy<MethodAccessor<Raft_Network>> _DeserializeFragmentedPacket3143634610 =
				new System.Lazy<MethodAccessor<Raft_Network>>(() => MethodAccessor<Raft_Network>.Create("DeserializeFragmentedPacket", typeof(Raft_Network.Message_FragmentedPacket), typeof(System.Runtime.Serialization.Formatters.Binary.BinaryFormatter)));
		private static readonly System.Lazy<MethodAccessor<Raft_Network>> _CanUserJoinMe3438294504 =
				new System.Lazy<MethodAccessor<Raft_Network>>(() => MethodAccessor<Raft_Network>.Create("CanUserJoinMe", typeof(Steamworks.CSteamID), typeof(int), typeof(string)));
		private static readonly System.Lazy<MethodAccessor<Raft_Network>> _OnSceneLoaded1466693196 =
				new System.Lazy<MethodAccessor<Raft_Network>>(() => MethodAccessor<Raft_Network>.Create("OnSceneLoaded", typeof(UnityEngine.SceneManagement.Scene), typeof(UnityEngine.SceneManagement.LoadSceneMode)));
		private static readonly System.Lazy<MethodAccessor<Raft_Network>> _CanUserJoinFriendCheck3429031458 =
				new System.Lazy<MethodAccessor<Raft_Network>>(() => MethodAccessor<Raft_Network>.Create("CanUserJoinFriendCheck", typeof(Steamworks.CSteamID)));
		private static readonly System.Lazy<MethodAccessor<Raft_Network>> _GetWorld757602046 =
				new System.Lazy<MethodAccessor<Raft_Network>>(() => MethodAccessor<Raft_Network>.Create("GetWorld"));
		private static readonly System.Lazy<MethodAccessor<Raft_Network>> _LoadScene3454057852 =
				new System.Lazy<MethodAccessor<Raft_Network>>(() => MethodAccessor<Raft_Network>.Create("LoadScene", typeof(string)));
		private static readonly System.Lazy<MethodAccessor<Raft_Network>> _HandleCommandArgs757602046 =
				new System.Lazy<MethodAccessor<Raft_Network>>(() => MethodAccessor<Raft_Network>.Create("HandleCommandArgs"));
		private static readonly System.Lazy<MethodAccessor<Raft_Network>> _HandleConnectArgument3454057852 =
				new System.Lazy<MethodAccessor<Raft_Network>>(() => MethodAccessor<Raft_Network>.Create("HandleConnectArgument", typeof(string)));
		private static readonly System.Lazy<MethodAccessor<Raft_Network>> _SetupCallbacks757602046 =
				new System.Lazy<MethodAccessor<Raft_Network>>(() => MethodAccessor<Raft_Network>.Create("SetupCallbacks"));
		private static readonly System.Lazy<MethodAccessor<Raft_Network>> _OnP2PSessionRequest3465523275 =
				new System.Lazy<MethodAccessor<Raft_Network>>(() => MethodAccessor<Raft_Network>.Create("OnP2PSessionRequest", typeof(Steamworks.P2PSessionRequest_t)));
		private static readonly System.Lazy<MethodAccessor<Raft_Network>> _OnSessionRequest3438294504 =
				new System.Lazy<MethodAccessor<Raft_Network>>(() => MethodAccessor<Raft_Network>.Create("OnSessionRequest", typeof(Steamworks.CSteamID), typeof(int), typeof(string)));
		private static readonly System.Lazy<MethodAccessor<Raft_Network>> _OnIncommingConnection3654698072 =
				new System.Lazy<MethodAccessor<Raft_Network>>(() => MethodAccessor<Raft_Network>.Create("OnIncommingConnection", typeof(Steamworks.CSteamID), typeof(RGD_Settings_Character)));
		private static readonly System.Lazy<MethodAccessor<Raft_Network>> _AddPlayer3654698072 =
				new System.Lazy<MethodAccessor<Raft_Network>>(() => MethodAccessor<Raft_Network>.Create("AddPlayer", typeof(Steamworks.CSteamID), typeof(RGD_Settings_Character)));
		private static readonly System.Lazy<MethodAccessor<Raft_Network>> _AddPlayer3453945003 =
				new System.Lazy<MethodAccessor<Raft_Network>>(() => MethodAccessor<Raft_Network>.Create("AddPlayer", typeof(Message_Player_Create)));
		private static readonly System.Lazy<MethodAccessor<Raft_Network>> _KillLater2493041660 =
				new System.Lazy<MethodAccessor<Raft_Network>>(() => MethodAccessor<Raft_Network>.Create("KillLater", typeof(float), typeof(Network_Player)));
		private static readonly System.Lazy<MethodAccessor<Raft_Network>> _OnP2PSessionConnectFail3473370983 =
				new System.Lazy<MethodAccessor<Raft_Network>>(() => MethodAccessor<Raft_Network>.Create("OnP2PSessionConnectFail", typeof(Steamworks.P2PSessionConnectFail_t)));
		private static readonly System.Lazy<MethodAccessor<Raft_Network>> _OnFriendPresenceUpdate3437767851 =
				new System.Lazy<MethodAccessor<Raft_Network>>(() => MethodAccessor<Raft_Network>.Create("OnFriendPresenceUpdate", typeof(Steamworks.FriendRichPresenceUpdate_t)));
		private static readonly System.Lazy<MethodAccessor<Raft_Network>> _OnGameRichPresenceJoinRequest3455263839 =
				new System.Lazy<MethodAccessor<Raft_Network>>(() => MethodAccessor<Raft_Network>.Create("OnGameRichPresenceJoinRequest", typeof(Steamworks.GameRichPresenceJoinRequested_t)));
		private static readonly System.Lazy<MethodAccessor<Raft_Network>> _UserStatsRecieved3451314786 =
				new System.Lazy<MethodAccessor<Raft_Network>>(() => MethodAccessor<Raft_Network>.Create("UserStatsRecieved", typeof(Steamworks.UserStatsReceived_t)));
		private static readonly System.Lazy<MethodAccessor<Raft_Network>> _OnDisconnect3170406237 =
				new System.Lazy<MethodAccessor<Raft_Network>>(() => MethodAccessor<Raft_Network>.Create("OnDisconnect", typeof(Steamworks.CSteamID), typeof(DisconnectReason), typeof(bool)));
		private static readonly System.Lazy<MethodAccessor<Raft_Network>> _Disconnect4174161192 =
				new System.Lazy<MethodAccessor<Raft_Network>>(() => MethodAccessor<Raft_Network>.Create("Disconnect", typeof(DisconnectReason), typeof(SceneName), typeof(float)));
		private static readonly System.Lazy<MethodAccessor<Raft_Network>> _RemovePlayer3429031458 =
				new System.Lazy<MethodAccessor<Raft_Network>>(() => MethodAccessor<Raft_Network>.Create("RemovePlayer", typeof(Steamworks.CSteamID)));
		private static readonly System.Lazy<MethodAccessor<Raft_Network>> _RemoveConnectingUser3640294043 =
				new System.Lazy<MethodAccessor<Raft_Network>>(() => MethodAccessor<Raft_Network>.Create("RemoveConnectingUser", typeof(Steamworks.CSteamID), typeof(float)));

		public static void OnEnable(this Raft_Network __self) => _OnEnable757602046.Value.Invoke(__self);
		public static void OnApplicationQuit(this Raft_Network __self) => _OnApplicationQuit757602046.Value.Invoke(__self);
		public static void Awake(this Raft_Network __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this Raft_Network __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this Raft_Network __self) => _Update757602046.Value.Invoke(__self);
		public static void SendPing(this Raft_Network __self) => _SendPing757602046.Value.Invoke(__self);
		public static void CalculateBytes(this Raft_Network __self) => _CalculateBytes757602046.Value.Invoke(__self);
		public static void SplitPackage(this Raft_Network __self, int maxPackageSize, System.IO.MemoryStream memoryStream, System.Runtime.Serialization.Formatters.Binary.BinaryFormatter binaryFormatter, Steamworks.CSteamID steamID, Packet_Multiple packet, NetworkChannel channel) => _SplitPackage2972152306.Value.Invoke(__self, maxPackageSize, memoryStream, binaryFormatter, steamID, packet, channel);
		public static void SendP2PFragmented(this Raft_Network __self, System.IO.MemoryStream memoryStream, System.Runtime.Serialization.Formatters.Binary.BinaryFormatter binaryFormatter, Steamworks.CSteamID steamID, Packet_Single packetSingle, NetworkChannel channel) => _SendP2PFragmented3305924113.Value.Invoke(__self, memoryStream, binaryFormatter, steamID, packetSingle, channel);
		public static void ReadP2P_Channel_Connecting(this Raft_Network __self) => _ReadP2P_Channel_Connecting757602046.Value.Invoke(__self);
		public static void ReadP2P_Channel_Game(this Raft_Network __self) => _ReadP2P_Channel_Game757602046.Value.Invoke(__self);
		public static bool IsUserWhitelisted(this Raft_Network __self, Steamworks.CSteamID steamID) => (bool)_IsUserWhitelisted3429031458.Value.Invoke(__self, steamID);
		public static Packet_Single DeserializeFragmentedPacket(this Raft_Network __self, Raft_Network.Message_FragmentedPacket fragment, System.Runtime.Serialization.Formatters.Binary.BinaryFormatter binaryFormatter) => (Packet_Single)_DeserializeFragmentedPacket3143634610.Value.Invoke(__self, fragment, binaryFormatter);
		public static InitiateResult CanUserJoinMe(this Raft_Network __self, Steamworks.CSteamID remoteID, int appBuildID, string password) => (InitiateResult)_CanUserJoinMe3438294504.Value.Invoke(__self, remoteID, appBuildID, password);
		public static void OnSceneLoaded(this Raft_Network __self, UnityEngine.SceneManagement.Scene scene, UnityEngine.SceneManagement.LoadSceneMode sceneMode) => _OnSceneLoaded1466693196.Value.Invoke(__self, scene, sceneMode);
		public static InitiateResult CanUserJoinFriendCheck(this Raft_Network __self, Steamworks.CSteamID remoteID) => (InitiateResult)_CanUserJoinFriendCheck3429031458.Value.Invoke(__self, remoteID);
		public static System.Collections.Generic.List<Message> GetWorld(this Raft_Network __self) => (System.Collections.Generic.List<Message>)_GetWorld757602046.Value.Invoke(__self);
		public static void LoadScene(this Raft_Network __self, string sceneName) => _LoadScene3454057852.Value.Invoke(__self, sceneName);
		public static void HandleCommandArgs(this Raft_Network __self) => _HandleCommandArgs757602046.Value.Invoke(__self);
		public static void HandleConnectArgument(this Raft_Network __self, string argument) => _HandleConnectArgument3454057852.Value.Invoke(__self, argument);
		public static void SetupCallbacks(this Raft_Network __self) => _SetupCallbacks757602046.Value.Invoke(__self);
		public static void OnP2PSessionRequest(this Raft_Network __self, Steamworks.P2PSessionRequest_t callback) => _OnP2PSessionRequest3465523275.Value.Invoke(__self, callback);
		public static void OnSessionRequest(this Raft_Network __self, Steamworks.CSteamID remoteID, int appBuildID, string password) => _OnSessionRequest3438294504.Value.Invoke(__self, remoteID, appBuildID, password);
		public static void OnIncommingConnection(this Raft_Network __self, Steamworks.CSteamID remoteID, RGD_Settings_Character characterSettings) => _OnIncommingConnection3654698072.Value.Invoke(__self, remoteID, characterSettings);
		public static void AddPlayer(this Raft_Network __self, Steamworks.CSteamID steamID, RGD_Settings_Character characterSettings) => _AddPlayer3654698072.Value.Invoke(__self, steamID, characterSettings);
		public static void AddPlayer(this Raft_Network __self, Message_Player_Create msg) => _AddPlayer3453945003.Value.Invoke(__self, msg);
		public static System.Collections.IEnumerator KillLater(this Raft_Network __self, float timeDelay, Network_Player player) => (System.Collections.IEnumerator)_KillLater2493041660.Value.Invoke(__self, timeDelay, player);
		public static void OnP2PSessionConnectFail(this Raft_Network __self, Steamworks.P2PSessionConnectFail_t callback) => _OnP2PSessionConnectFail3473370983.Value.Invoke(__self, callback);
		public static void OnFriendPresenceUpdate(this Raft_Network __self, Steamworks.FriendRichPresenceUpdate_t callback) => _OnFriendPresenceUpdate3437767851.Value.Invoke(__self, callback);
		public static void OnGameRichPresenceJoinRequest(this Raft_Network __self, Steamworks.GameRichPresenceJoinRequested_t callback) => _OnGameRichPresenceJoinRequest3455263839.Value.Invoke(__self, callback);
		public static void UserStatsRecieved(this Raft_Network __self, Steamworks.UserStatsReceived_t callback) => _UserStatsRecieved3451314786.Value.Invoke(__self, callback);
		public static void OnDisconnect(this Raft_Network __self, Steamworks.CSteamID remoteID, DisconnectReason disconnectReason, bool saveGame) => _OnDisconnect3170406237.Value.Invoke(__self, remoteID, disconnectReason, saveGame);
		public static System.Collections.IEnumerator Disconnect(this Raft_Network __self, DisconnectReason reason, SceneName sceneName, float timeDelay) => (System.Collections.IEnumerator)_Disconnect4174161192.Value.Invoke(__self, reason, sceneName, timeDelay);
		public static void RemovePlayer(this Raft_Network __self, Steamworks.CSteamID id) => _RemovePlayer3429031458.Value.Invoke(__self, id);
		public static System.Collections.IEnumerator RemoveConnectingUser(this Raft_Network __self, Steamworks.CSteamID id, float timeDelay) => (System.Collections.IEnumerator)_RemoveConnectingUser3640294043.Value.Invoke(__self, id, timeDelay);

	}

	public static class Private_Raft_Network
	{

		private static readonly System.Lazy<StaticFieldAccessor<bool>> _initialized =
				new System.Lazy<StaticFieldAccessor<bool>>(() => StaticFieldAccessor<bool>.Create(typeof(Raft_Network), "initialized"));
		private static readonly System.Lazy<StaticFieldAccessor<bool>> _isHost =
				new System.Lazy<StaticFieldAccessor<bool>>(() => StaticFieldAccessor<bool>.Create(typeof(Raft_Network), "isHost"));
		private static readonly System.Lazy<StaticFieldAccessor<System.Collections.Generic.List<Raft_Network.Message_FragmentedPacket>>> _savedFragmentedPackets =
				new System.Lazy<StaticFieldAccessor<System.Collections.Generic.List<Raft_Network.Message_FragmentedPacket>>>(() => StaticFieldAccessor<System.Collections.Generic.List<Raft_Network.Message_FragmentedPacket>>.Create(typeof(Raft_Network), "savedFragmentedPackets"));
		private static readonly System.Lazy<StaticFieldAccessor<int>> _MaxUnreliableSize =
				new System.Lazy<StaticFieldAccessor<int>>(() => StaticFieldAccessor<int>.Create(typeof(Raft_Network), "MaxUnreliableSize"));
		private static readonly System.Lazy<StaticFieldAccessor<int>> _MaxReliableSize =
				new System.Lazy<StaticFieldAccessor<int>>(() => StaticFieldAccessor<int>.Create(typeof(Raft_Network), "MaxReliableSize"));
		private static readonly System.Lazy<StaticFieldAccessor<int>> _MaxReliableFragmentSize =
				new System.Lazy<StaticFieldAccessor<int>>(() => StaticFieldAccessor<int>.Create(typeof(Raft_Network), "MaxReliableFragmentSize"));

		public static bool GetInitialized() => _initialized.Value.GetValue();
		public static void SetInitialized(bool value) => _initialized.Value.SetValue(value);
		public static bool GetIsHost() => _isHost.Value.GetValue();
		public static void SetIsHost(bool value) => _isHost.Value.SetValue(value);
		public static System.Collections.Generic.List<Raft_Network.Message_FragmentedPacket> GetSavedFragmentedPackets() => _savedFragmentedPackets.Value.GetValue();
		public static void SetSavedFragmentedPackets(System.Collections.Generic.List<Raft_Network.Message_FragmentedPacket> value) => _savedFragmentedPackets.Value.SetValue(value);
		public static int GetMaxUnreliableSize() => _MaxUnreliableSize.Value.GetValue();
		public static void SetMaxUnreliableSize(int value) => _MaxUnreliableSize.Value.SetValue(value);
		public static int GetMaxReliableSize() => _MaxReliableSize.Value.GetValue();
		public static void SetMaxReliableSize(int value) => _MaxReliableSize.Value.SetValue(value);
		public static int GetMaxReliableFragmentSize() => _MaxReliableFragmentSize.Value.GetValue();
		public static void SetMaxReliableFragmentSize(int value) => _MaxReliableFragmentSize.Value.SetValue(value);

	}

	public static class PrivateAccessor_Message_NetworkBehaviour_Int
	{

		private static readonly System.Lazy<FieldAccessor<Message_NetworkBehaviour_Int, int>> _i =
				new System.Lazy<FieldAccessor<Message_NetworkBehaviour_Int, int>>(() => FieldAccessor<Message_NetworkBehaviour_Int, int>.Create("i"));

		public static int GetI(this Message_NetworkBehaviour_Int __self) => _i.Value.GetValue(__self);
		public static void SetI(this Message_NetworkBehaviour_Int __self, int value) => _i.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_Message_NetworkBehaviour_ID_Int
	{

		private static readonly System.Lazy<FieldAccessor<Message_NetworkBehaviour_ID_Int, int>> _i =
				new System.Lazy<FieldAccessor<Message_NetworkBehaviour_ID_Int, int>>(() => FieldAccessor<Message_NetworkBehaviour_ID_Int, int>.Create("i"));

		public static int GetI(this Message_NetworkBehaviour_ID_Int __self) => _i.Value.GetValue(__self);
		public static void SetI(this Message_NetworkBehaviour_ID_Int __self, int value) => _i.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_Message_NetworkBehaviour_SteamID
	{

		private static readonly System.Lazy<FieldAccessor<Message_NetworkBehaviour_SteamID, ulong>> _steamID =
				new System.Lazy<FieldAccessor<Message_NetworkBehaviour_SteamID, ulong>>(() => FieldAccessor<Message_NetworkBehaviour_SteamID, ulong>.Create("steamID"));

		public static ulong GetSteamID(this Message_NetworkBehaviour_SteamID __self) => _steamID.Value.GetValue(__self);
		public static void SetSteamID(this Message_NetworkBehaviour_SteamID __self, ulong value) => _steamID.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_Message_NetworkBehaviour_ID_SteamID
	{

		private static readonly System.Lazy<FieldAccessor<Message_NetworkBehaviour_ID_SteamID, ulong>> _steamID =
				new System.Lazy<FieldAccessor<Message_NetworkBehaviour_ID_SteamID, ulong>>(() => FieldAccessor<Message_NetworkBehaviour_ID_SteamID, ulong>.Create("steamID"));

		public static ulong GetSteamID(this Message_NetworkBehaviour_ID_SteamID __self) => _steamID.Value.GetValue(__self);
		public static void SetSteamID(this Message_NetworkBehaviour_ID_SteamID __self, ulong value) => _steamID.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_NightLightController
	{

		private static readonly System.Lazy<FieldAccessor<NightLightController, int>> _fullIntensityDistance =
				new System.Lazy<FieldAccessor<NightLightController, int>>(() => FieldAccessor<NightLightController, int>.Create("fullIntensityDistance"));
		private static readonly System.Lazy<FieldAccessor<NightLightController, int>> _zeroIntensityDistance =
				new System.Lazy<FieldAccessor<NightLightController, int>>(() => FieldAccessor<NightLightController, int>.Create("zeroIntensityDistance"));
		private static readonly System.Lazy<FieldAccessor<NightLightController, float>> _lerpSpeed =
				new System.Lazy<FieldAccessor<NightLightController, float>>(() => FieldAccessor<NightLightController, float>.Create("lerpSpeed"));
		private static readonly System.Lazy<FieldAccessor<NightLightController, float>> _nightTimeStart =
				new System.Lazy<FieldAccessor<NightLightController, float>>(() => FieldAccessor<NightLightController, float>.Create("nightTimeStart"));
		private static readonly System.Lazy<FieldAccessor<NightLightController, float>> _nightTimeEnd =
				new System.Lazy<FieldAccessor<NightLightController, float>>(() => FieldAccessor<NightLightController, float>.Create("nightTimeEnd"));
		private static readonly System.Lazy<FieldAccessor<NightLightController, float>> _distanceModifier =
				new System.Lazy<FieldAccessor<NightLightController, float>>(() => FieldAccessor<NightLightController, float>.Create("distanceModifier"));

		public static int GetFullIntensityDistance(this NightLightController __self) => _fullIntensityDistance.Value.GetValue(__self);
		public static void SetFullIntensityDistance(this NightLightController __self, int value) => _fullIntensityDistance.Value.SetValue(__self, value);
		public static int GetZeroIntensityDistance(this NightLightController __self) => _zeroIntensityDistance.Value.GetValue(__self);
		public static void SetZeroIntensityDistance(this NightLightController __self, int value) => _zeroIntensityDistance.Value.SetValue(__self, value);
		public static float GetLerpSpeed(this NightLightController __self) => _lerpSpeed.Value.GetValue(__self);
		public static void SetLerpSpeed(this NightLightController __self, float value) => _lerpSpeed.Value.SetValue(__self, value);
		public static float GetNightTimeStart(this NightLightController __self) => _nightTimeStart.Value.GetValue(__self);
		public static void SetNightTimeStart(this NightLightController __self, float value) => _nightTimeStart.Value.SetValue(__self, value);
		public static float GetNightTimeEnd(this NightLightController __self) => _nightTimeEnd.Value.GetValue(__self);
		public static void SetNightTimeEnd(this NightLightController __self, float value) => _nightTimeEnd.Value.SetValue(__self, value);
		public static float GetDistanceModifier(this NightLightController __self) => _distanceModifier.Value.GetValue(__self);
		public static void SetDistanceModifier(this NightLightController __self, float value) => _distanceModifier.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<NightLightController>> _Start757602046 =
				new System.Lazy<MethodAccessor<NightLightController>>(() => MethodAccessor<NightLightController>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<NightLightController>> _Update757602046 =
				new System.Lazy<MethodAccessor<NightLightController>>(() => MethodAccessor<NightLightController>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<NightLightController>> _SetLightIntensity3486905475 =
				new System.Lazy<MethodAccessor<NightLightController>>(() => MethodAccessor<NightLightController>.Create("SetLightIntensity", typeof(float)));

		public static void Start(this NightLightController __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this NightLightController __self) => _Update757602046.Value.Invoke(__self);
		public static void SetLightIntensity(this NightLightController __self, float targetValue) => _SetLightIntensity3486905475.Value.Invoke(__self, targetValue);

	}

	public static class Private_NightLightController
	{

		private static readonly System.Lazy<StaticFieldAccessor<UnityEngine.AzureSky.AzureSkyController>> _skyController =
				new System.Lazy<StaticFieldAccessor<UnityEngine.AzureSky.AzureSkyController>>(() => StaticFieldAccessor<UnityEngine.AzureSky.AzureSkyController>.Create(typeof(NightLightController), "skyController"));
		private static readonly System.Lazy<StaticFieldAccessor<UnityEngine.Transform>> _mainCameraTransform =
				new System.Lazy<StaticFieldAccessor<UnityEngine.Transform>>(() => StaticFieldAccessor<UnityEngine.Transform>.Create(typeof(NightLightController), "mainCameraTransform"));

		public static UnityEngine.AzureSky.AzureSkyController GetSkyController() => _skyController.Value.GetValue();
		public static void SetSkyController(UnityEngine.AzureSky.AzureSkyController value) => _skyController.Value.SetValue(value);
		public static UnityEngine.Transform GetMainCameraTransform() => _mainCameraTransform.Value.GetValue();
		public static void SetMainCameraTransform(UnityEngine.Transform value) => _mainCameraTransform.Value.SetValue(value);

	}

	public static class PrivateAccessor_NightLightControllerV2
	{

		private static readonly System.Lazy<FieldAccessor<NightLightControllerV2, int>> _fullIntensityDistance =
				new System.Lazy<FieldAccessor<NightLightControllerV2, int>>(() => FieldAccessor<NightLightControllerV2, int>.Create("fullIntensityDistance"));
		private static readonly System.Lazy<FieldAccessor<NightLightControllerV2, int>> _zeroIntensityDistance =
				new System.Lazy<FieldAccessor<NightLightControllerV2, int>>(() => FieldAccessor<NightLightControllerV2, int>.Create("zeroIntensityDistance"));
		private static readonly System.Lazy<FieldAccessor<NightLightControllerV2, float>> _lerpSpeed =
				new System.Lazy<FieldAccessor<NightLightControllerV2, float>>(() => FieldAccessor<NightLightControllerV2, float>.Create("lerpSpeed"));
		private static readonly System.Lazy<FieldAccessor<NightLightControllerV2, float>> _nightTimeStart =
				new System.Lazy<FieldAccessor<NightLightControllerV2, float>>(() => FieldAccessor<NightLightControllerV2, float>.Create("nightTimeStart"));
		private static readonly System.Lazy<FieldAccessor<NightLightControllerV2, float>> _nightTimeEnd =
				new System.Lazy<FieldAccessor<NightLightControllerV2, float>>(() => FieldAccessor<NightLightControllerV2, float>.Create("nightTimeEnd"));
		private static readonly System.Lazy<FieldAccessor<NightLightControllerV2, float>> _startIntensity =
				new System.Lazy<FieldAccessor<NightLightControllerV2, float>>(() => FieldAccessor<NightLightControllerV2, float>.Create("startIntensity"));
		private static readonly System.Lazy<FieldAccessor<NightLightControllerV2, UnityEngine.Light>> _light =
				new System.Lazy<FieldAccessor<NightLightControllerV2, UnityEngine.Light>>(() => FieldAccessor<NightLightControllerV2, UnityEngine.Light>.Create("light"));

		public static int GetFullIntensityDistance(this NightLightControllerV2 __self) => _fullIntensityDistance.Value.GetValue(__self);
		public static void SetFullIntensityDistance(this NightLightControllerV2 __self, int value) => _fullIntensityDistance.Value.SetValue(__self, value);
		public static int GetZeroIntensityDistance(this NightLightControllerV2 __self) => _zeroIntensityDistance.Value.GetValue(__self);
		public static void SetZeroIntensityDistance(this NightLightControllerV2 __self, int value) => _zeroIntensityDistance.Value.SetValue(__self, value);
		public static float GetLerpSpeed(this NightLightControllerV2 __self) => _lerpSpeed.Value.GetValue(__self);
		public static void SetLerpSpeed(this NightLightControllerV2 __self, float value) => _lerpSpeed.Value.SetValue(__self, value);
		public static float GetNightTimeStart(this NightLightControllerV2 __self) => _nightTimeStart.Value.GetValue(__self);
		public static void SetNightTimeStart(this NightLightControllerV2 __self, float value) => _nightTimeStart.Value.SetValue(__self, value);
		public static float GetNightTimeEnd(this NightLightControllerV2 __self) => _nightTimeEnd.Value.GetValue(__self);
		public static void SetNightTimeEnd(this NightLightControllerV2 __self, float value) => _nightTimeEnd.Value.SetValue(__self, value);
		public static float GetStartIntensity(this NightLightControllerV2 __self) => _startIntensity.Value.GetValue(__self);
		public static void SetStartIntensity(this NightLightControllerV2 __self, float value) => _startIntensity.Value.SetValue(__self, value);
		public static UnityEngine.Light GetLight(this NightLightControllerV2 __self) => _light.Value.GetValue(__self);
		public static void SetLight(this NightLightControllerV2 __self, UnityEngine.Light value) => _light.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<NightLightControllerV2>> _Start757602046 =
				new System.Lazy<MethodAccessor<NightLightControllerV2>>(() => MethodAccessor<NightLightControllerV2>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<NightLightControllerV2>> _Update757602046 =
				new System.Lazy<MethodAccessor<NightLightControllerV2>>(() => MethodAccessor<NightLightControllerV2>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<NightLightControllerV2>> _SetLightIntensity3486905475 =
				new System.Lazy<MethodAccessor<NightLightControllerV2>>(() => MethodAccessor<NightLightControllerV2>.Create("SetLightIntensity", typeof(float)));

		public static void Start(this NightLightControllerV2 __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this NightLightControllerV2 __self) => _Update757602046.Value.Invoke(__self);
		public static void SetLightIntensity(this NightLightControllerV2 __self, float targetLightValue) => _SetLightIntensity3486905475.Value.Invoke(__self, targetLightValue);

	}

	public static class Private_NightLightControllerV2
	{

		private static readonly System.Lazy<StaticFieldAccessor<UnityEngine.AzureSky.AzureSkyController>> _skyController =
				new System.Lazy<StaticFieldAccessor<UnityEngine.AzureSky.AzureSkyController>>(() => StaticFieldAccessor<UnityEngine.AzureSky.AzureSkyController>.Create(typeof(NightLightControllerV2), "skyController"));
		private static readonly System.Lazy<StaticFieldAccessor<UnityEngine.Transform>> _mainCameraTransform =
				new System.Lazy<StaticFieldAccessor<UnityEngine.Transform>>(() => StaticFieldAccessor<UnityEngine.Transform>.Create(typeof(NightLightControllerV2), "mainCameraTransform"));

		public static UnityEngine.AzureSky.AzureSkyController GetSkyController() => _skyController.Value.GetValue();
		public static void SetSkyController(UnityEngine.AzureSky.AzureSkyController value) => _skyController.Value.SetValue(value);
		public static UnityEngine.Transform GetMainCameraTransform() => _mainCameraTransform.Value.GetValue();
		public static void SetMainCameraTransform(UnityEngine.Transform value) => _mainCameraTransform.Value.SetValue(value);

	}

	public static class PrivateAccessor_NoteBook
	{

		private static readonly System.Lazy<FieldAccessor<NoteBook, UnityEngine.Vector2Int>> _latestNoteIndex =
				new System.Lazy<FieldAccessor<NoteBook, UnityEngine.Vector2Int>>(() => FieldAccessor<NoteBook, UnityEngine.Vector2Int>.Create("latestNoteIndex"));
		private static readonly System.Lazy<FieldAccessor<NoteBook, Raft_Network>> _network =
				new System.Lazy<FieldAccessor<NoteBook, Raft_Network>>(() => FieldAccessor<NoteBook, Raft_Network>.Create("network"));
		private static readonly System.Lazy<FieldAccessor<NoteBook, NotificationManager>> _notificationManager =
				new System.Lazy<FieldAccessor<NoteBook, NotificationManager>>(() => FieldAccessor<NoteBook, NotificationManager>.Create("notificationManager"));
		private static readonly System.Lazy<FieldAccessor<NoteBook, Network_Player>> _localPlayer =
				new System.Lazy<FieldAccessor<NoteBook, Network_Player>>(() => FieldAccessor<NoteBook, Network_Player>.Create("localPlayer"));

		public static UnityEngine.Vector2Int GetLatestNoteIndex(this NoteBook __self) => _latestNoteIndex.Value.GetValue(__self);
		public static void SetLatestNoteIndex(this NoteBook __self, UnityEngine.Vector2Int value) => _latestNoteIndex.Value.SetValue(__self, value);
		public static Raft_Network GetNetwork(this NoteBook __self) => _network.Value.GetValue(__self);
		public static void SetNetwork(this NoteBook __self, Raft_Network value) => _network.Value.SetValue(__self, value);
		public static NotificationManager GetNotificationManager(this NoteBook __self) => _notificationManager.Value.GetValue(__self);
		public static void SetNotificationManager(this NoteBook __self, NotificationManager value) => _notificationManager.Value.SetValue(__self, value);
		public static Network_Player GetLocalPlayer(this NoteBook __self) => _localPlayer.Value.GetValue(__self);
		public static void SetLocalPlayer(this NoteBook __self, Network_Player value) => _localPlayer.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<NoteBook>> _Awake757602046 =
				new System.Lazy<MethodAccessor<NoteBook>>(() => MethodAccessor<NoteBook>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<NoteBook>> _Start757602046 =
				new System.Lazy<MethodAccessor<NoteBook>>(() => MethodAccessor<NoteBook>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<NoteBook>> _Update757602046 =
				new System.Lazy<MethodAccessor<NoteBook>>(() => MethodAccessor<NoteBook>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<NoteBook>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<NoteBook>>(() => MethodAccessor<NoteBook>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<NoteBook>> _OnVoiceDataTracked3485005270 =
				new System.Lazy<MethodAccessor<NoteBook>>(() => MethodAccessor<NoteBook>.Create("OnVoiceDataTracked", typeof(SO_VoiceData.Instance_VoiceData)));

		public static void Awake(this NoteBook __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this NoteBook __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this NoteBook __self) => _Update757602046.Value.Invoke(__self);
		public static void OnDestroy(this NoteBook __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void OnVoiceDataTracked(this NoteBook __self, SO_VoiceData.Instance_VoiceData instance) => _OnVoiceDataTracked3485005270.Value.Invoke(__self, instance);

	}

	public static class PrivateAccessor_Message_NoteBook_Create
	{

		private static readonly System.Lazy<FieldAccessor<Message_NoteBook_Create, RGD_NoteBook>> _rgd_noteBook =
				new System.Lazy<FieldAccessor<Message_NoteBook_Create, RGD_NoteBook>>(() => FieldAccessor<Message_NoteBook_Create, RGD_NoteBook>.Create("rgd_noteBook"));

		public static RGD_NoteBook GetRgd_noteBook(this Message_NoteBook_Create __self) => _rgd_noteBook.Value.GetValue(__self);
		public static void SetRgd_noteBook(this Message_NoteBook_Create __self, RGD_NoteBook value) => _rgd_noteBook.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_NoteBookNote
	{

		private static readonly System.Lazy<FieldAccessor<NoteBookNote, SO_VoiceActor>> _voiceActor =
				new System.Lazy<FieldAccessor<NoteBookNote, SO_VoiceActor>>(() => FieldAccessor<NoteBookNote, SO_VoiceActor>.Create("voiceActor"));
		private static readonly System.Lazy<FieldAccessor<NoteBookNote, SO_VoiceData>> _voiceData =
				new System.Lazy<FieldAccessor<NoteBookNote, SO_VoiceData>>(() => FieldAccessor<NoteBookNote, SO_VoiceData>.Create("voiceData"));
		private static readonly System.Lazy<FieldAccessor<NoteBookNote, UnityEngine.Sprite>> _playSprite =
				new System.Lazy<FieldAccessor<NoteBookNote, UnityEngine.Sprite>>(() => FieldAccessor<NoteBookNote, UnityEngine.Sprite>.Create("playSprite"));
		private static readonly System.Lazy<FieldAccessor<NoteBookNote, UnityEngine.Sprite>> _stopSprite =
				new System.Lazy<FieldAccessor<NoteBookNote, UnityEngine.Sprite>>(() => FieldAccessor<NoteBookNote, UnityEngine.Sprite>.Create("stopSprite"));
		private static readonly System.Lazy<FieldAccessor<NoteBookNote, bool>> _pointerIsHovering =
				new System.Lazy<FieldAccessor<NoteBookNote, bool>>(() => FieldAccessor<NoteBookNote, bool>.Create("pointerIsHovering"));

		public static SO_VoiceActor GetVoiceActor(this NoteBookNote __self) => _voiceActor.Value.GetValue(__self);
		public static void SetVoiceActor(this NoteBookNote __self, SO_VoiceActor value) => _voiceActor.Value.SetValue(__self, value);
		public static SO_VoiceData GetVoiceData(this NoteBookNote __self) => _voiceData.Value.GetValue(__self);
		public static void SetVoiceData(this NoteBookNote __self, SO_VoiceData value) => _voiceData.Value.SetValue(__self, value);
		public static UnityEngine.Sprite GetPlaySprite(this NoteBookNote __self) => _playSprite.Value.GetValue(__self);
		public static void SetPlaySprite(this NoteBookNote __self, UnityEngine.Sprite value) => _playSprite.Value.SetValue(__self, value);
		public static UnityEngine.Sprite GetStopSprite(this NoteBookNote __self) => _stopSprite.Value.GetValue(__self);
		public static void SetStopSprite(this NoteBookNote __self, UnityEngine.Sprite value) => _stopSprite.Value.SetValue(__self, value);
		public static bool GetPointerIsHovering(this NoteBookNote __self) => _pointerIsHovering.Value.GetValue(__self);
		public static void SetPointerIsHovering(this NoteBookNote __self, bool value) => _pointerIsHovering.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<NoteBookNote>> _Awake757602046 =
				new System.Lazy<MethodAccessor<NoteBookNote>>(() => MethodAccessor<NoteBookNote>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<NoteBookNote>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<NoteBookNote>>(() => MethodAccessor<NoteBookNote>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<NoteBookNote>> _OnVoiceDataCancelled3485005270 =
				new System.Lazy<MethodAccessor<NoteBookNote>>(() => MethodAccessor<NoteBookNote>.Create("OnVoiceDataCancelled", typeof(SO_VoiceData.Instance_VoiceData)));
		private static readonly System.Lazy<MethodAccessor<NoteBookNote>> _SetPlayAndStopSpriteState3450040886 =
				new System.Lazy<MethodAccessor<NoteBookNote>>(() => MethodAccessor<NoteBookNote>.Create("SetPlayAndStopSpriteState", typeof(bool)));

		public static void Awake(this NoteBookNote __self) => _Awake757602046.Value.Invoke(__self);
		public static void OnDestroy(this NoteBookNote __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void OnVoiceDataCancelled(this NoteBookNote __self, SO_VoiceData.Instance_VoiceData instance) => _OnVoiceDataCancelled3485005270.Value.Invoke(__self, instance);
		public static void SetPlayAndStopSpriteState(this NoteBookNote __self, bool showPlaySprite) => _SetPlayAndStopSpriteState3450040886.Value.Invoke(__self, showPlaySprite);

	}

	public static class Private_NoteBookNote
	{

		private static readonly System.Lazy<StaticFieldAccessor<NoteBook>> _notebook =
				new System.Lazy<StaticFieldAccessor<NoteBook>>(() => StaticFieldAccessor<NoteBook>.Create(typeof(NoteBookNote), "notebook"));

		public static NoteBook GetNotebook() => _notebook.Value.GetValue();
		public static void SetNotebook(NoteBook value) => _notebook.Value.SetValue(value);

	}

	public static class PrivateAccessor_NoteBookNote_Enhancer
	{

		private static readonly System.Lazy<FieldAccessor<NoteBookNote_Enhancer, float>> _enhanceScale =
				new System.Lazy<FieldAccessor<NoteBookNote_Enhancer, float>>(() => FieldAccessor<NoteBookNote_Enhancer, float>.Create("enhanceScale"));
		private static readonly System.Lazy<FieldAccessor<NoteBookNote_Enhancer, UnityEngine.Vector3>> _enhanceOffset =
				new System.Lazy<FieldAccessor<NoteBookNote_Enhancer, UnityEngine.Vector3>>(() => FieldAccessor<NoteBookNote_Enhancer, UnityEngine.Vector3>.Create("enhanceOffset"));
		private static readonly System.Lazy<FieldAccessor<NoteBookNote_Enhancer, bool>> _isEnhanced =
				new System.Lazy<FieldAccessor<NoteBookNote_Enhancer, bool>>(() => FieldAccessor<NoteBookNote_Enhancer, bool>.Create("isEnhanced"));
		private static readonly System.Lazy<FieldAccessor<NoteBookNote_Enhancer, UnityEngine.Vector3>> _noteStartLocalPos =
				new System.Lazy<FieldAccessor<NoteBookNote_Enhancer, UnityEngine.Vector3>>(() => FieldAccessor<NoteBookNote_Enhancer, UnityEngine.Vector3>.Create("noteStartLocalPos"));
		private static readonly System.Lazy<FieldAccessor<NoteBookNote_Enhancer, UnityEngine.Vector3>> _noteStartLocalScale =
				new System.Lazy<FieldAccessor<NoteBookNote_Enhancer, UnityEngine.Vector3>>(() => FieldAccessor<NoteBookNote_Enhancer, UnityEngine.Vector3>.Create("noteStartLocalScale"));
		private static readonly System.Lazy<FieldAccessor<NoteBookNote_Enhancer, UnityEngine.Transform>> _noteStartParent =
				new System.Lazy<FieldAccessor<NoteBookNote_Enhancer, UnityEngine.Transform>>(() => FieldAccessor<NoteBookNote_Enhancer, UnityEngine.Transform>.Create("noteStartParent"));
		private static readonly System.Lazy<FieldAccessor<NoteBookNote_Enhancer, UnityEngine.Canvas>> _subCanvas =
				new System.Lazy<FieldAccessor<NoteBookNote_Enhancer, UnityEngine.Canvas>>(() => FieldAccessor<NoteBookNote_Enhancer, UnityEngine.Canvas>.Create("subCanvas"));
		private static readonly System.Lazy<FieldAccessor<NoteBookNote_Enhancer, int>> _noteStartSiblingIndex =
				new System.Lazy<FieldAccessor<NoteBookNote_Enhancer, int>>(() => FieldAccessor<NoteBookNote_Enhancer, int>.Create("noteStartSiblingIndex"));
		private static readonly System.Lazy<FieldAccessor<NoteBookNote_Enhancer, bool>> _canBeEnhanced =
				new System.Lazy<FieldAccessor<NoteBookNote_Enhancer, bool>>(() => FieldAccessor<NoteBookNote_Enhancer, bool>.Create("canBeEnhanced"));
		private static readonly System.Lazy<FieldAccessor<NoteBookNote_Enhancer, UnityEngine.Animator>> _animator =
				new System.Lazy<FieldAccessor<NoteBookNote_Enhancer, UnityEngine.Animator>>(() => FieldAccessor<NoteBookNote_Enhancer, UnityEngine.Animator>.Create("animator"));

		public static float GetEnhanceScale(this NoteBookNote_Enhancer __self) => _enhanceScale.Value.GetValue(__self);
		public static void SetEnhanceScale(this NoteBookNote_Enhancer __self, float value) => _enhanceScale.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetEnhanceOffset(this NoteBookNote_Enhancer __self) => _enhanceOffset.Value.GetValue(__self);
		public static void SetEnhanceOffset(this NoteBookNote_Enhancer __self, UnityEngine.Vector3 value) => _enhanceOffset.Value.SetValue(__self, value);
		public static bool GetIsEnhanced(this NoteBookNote_Enhancer __self) => _isEnhanced.Value.GetValue(__self);
		public static void SetIsEnhanced(this NoteBookNote_Enhancer __self, bool value) => _isEnhanced.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetNoteStartLocalPos(this NoteBookNote_Enhancer __self) => _noteStartLocalPos.Value.GetValue(__self);
		public static void SetNoteStartLocalPos(this NoteBookNote_Enhancer __self, UnityEngine.Vector3 value) => _noteStartLocalPos.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetNoteStartLocalScale(this NoteBookNote_Enhancer __self) => _noteStartLocalScale.Value.GetValue(__self);
		public static void SetNoteStartLocalScale(this NoteBookNote_Enhancer __self, UnityEngine.Vector3 value) => _noteStartLocalScale.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetNoteStartParent(this NoteBookNote_Enhancer __self) => _noteStartParent.Value.GetValue(__self);
		public static void SetNoteStartParent(this NoteBookNote_Enhancer __self, UnityEngine.Transform value) => _noteStartParent.Value.SetValue(__self, value);
		public static UnityEngine.Canvas GetSubCanvas(this NoteBookNote_Enhancer __self) => _subCanvas.Value.GetValue(__self);
		public static void SetSubCanvas(this NoteBookNote_Enhancer __self, UnityEngine.Canvas value) => _subCanvas.Value.SetValue(__self, value);
		public static int GetNoteStartSiblingIndex(this NoteBookNote_Enhancer __self) => _noteStartSiblingIndex.Value.GetValue(__self);
		public static void SetNoteStartSiblingIndex(this NoteBookNote_Enhancer __self, int value) => _noteStartSiblingIndex.Value.SetValue(__self, value);
		public static bool GetCanBeEnhanced(this NoteBookNote_Enhancer __self) => _canBeEnhanced.Value.GetValue(__self);
		public static void SetCanBeEnhanced(this NoteBookNote_Enhancer __self, bool value) => _canBeEnhanced.Value.SetValue(__self, value);
		public static UnityEngine.Animator GetAnimator(this NoteBookNote_Enhancer __self) => _animator.Value.GetValue(__self);
		public static void SetAnimator(this NoteBookNote_Enhancer __self, UnityEngine.Animator value) => _animator.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<NoteBookNote_Enhancer>> _Awake757602046 =
				new System.Lazy<MethodAccessor<NoteBookNote_Enhancer>>(() => MethodAccessor<NoteBookNote_Enhancer>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<NoteBookNote_Enhancer>> _Start757602046 =
				new System.Lazy<MethodAccessor<NoteBookNote_Enhancer>>(() => MethodAccessor<NoteBookNote_Enhancer>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<NoteBookNote_Enhancer>> _ResetEnhanceFlag757602046 =
				new System.Lazy<MethodAccessor<NoteBookNote_Enhancer>>(() => MethodAccessor<NoteBookNote_Enhancer>.Create("ResetEnhanceFlag"));
		private static readonly System.Lazy<MethodAccessor<NoteBookNote_Enhancer>> _RescaleNote757602046 =
				new System.Lazy<MethodAccessor<NoteBookNote_Enhancer>>(() => MethodAccessor<NoteBookNote_Enhancer>.Create("RescaleNote"));

		public static void Awake(this NoteBookNote_Enhancer __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this NoteBookNote_Enhancer __self) => _Start757602046.Value.Invoke(__self);
		public static void ResetEnhanceFlag(this NoteBookNote_Enhancer __self) => _ResetEnhanceFlag757602046.Value.Invoke(__self);
		public static System.Collections.IEnumerator RescaleNote(this NoteBookNote_Enhancer __self) => (System.Collections.IEnumerator)_RescaleNote757602046.Value.Invoke(__self);

	}

	public static class Private_NoteBookNote_Enhancer
	{

		private static readonly System.Lazy<StaticFieldAccessor<UnityEngine.Transform>> _enhancePoint =
				new System.Lazy<StaticFieldAccessor<UnityEngine.Transform>>(() => StaticFieldAccessor<UnityEngine.Transform>.Create(typeof(NoteBookNote_Enhancer), "enhancePoint"));

		public static UnityEngine.Transform GetEnhancePoint() => _enhancePoint.Value.GetValue();
		public static void SetEnhancePoint(UnityEngine.Transform value) => _enhancePoint.Value.SetValue(value);

	}

	public static class PrivateAccessor_NoteBookPage
	{

		private static readonly System.Lazy<FieldAccessor<NoteBookPage, string>> _pageTitleString =
				new System.Lazy<FieldAccessor<NoteBookPage, string>>(() => FieldAccessor<NoteBookPage, string>.Create("pageTitleString"));
		private static readonly System.Lazy<FieldAccessor<NoteBookPage, TMPro.TextMeshProUGUI>> _pageTitle =
				new System.Lazy<FieldAccessor<NoteBookPage, TMPro.TextMeshProUGUI>>(() => FieldAccessor<NoteBookPage, TMPro.TextMeshProUGUI>.Create("pageTitle"));
		private static readonly System.Lazy<FieldAccessor<NoteBookPage, TMPro.TextMeshProUGUI>> _pageNumber =
				new System.Lazy<FieldAccessor<NoteBookPage, TMPro.TextMeshProUGUI>>(() => FieldAccessor<NoteBookPage, TMPro.TextMeshProUGUI>.Create("pageNumber"));
		private static readonly System.Lazy<FieldAccessor<NoteBookPage, NoteBookNote[]>> _notes =
				new System.Lazy<FieldAccessor<NoteBookPage, NoteBookNote[]>>(() => FieldAccessor<NoteBookPage, NoteBookNote[]>.Create("notes"));

		public static string GetPageTitleString(this NoteBookPage __self) => _pageTitleString.Value.GetValue(__self);
		public static void SetPageTitleString(this NoteBookPage __self, string value) => _pageTitleString.Value.SetValue(__self, value);
		public static TMPro.TextMeshProUGUI GetPageTitle(this NoteBookPage __self) => _pageTitle.Value.GetValue(__self);
		public static void SetPageTitle(this NoteBookPage __self, TMPro.TextMeshProUGUI value) => _pageTitle.Value.SetValue(__self, value);
		public static TMPro.TextMeshProUGUI GetPageNumber(this NoteBookPage __self) => _pageNumber.Value.GetValue(__self);
		public static void SetPageNumber(this NoteBookPage __self, TMPro.TextMeshProUGUI value) => _pageNumber.Value.SetValue(__self, value);
		public static NoteBookNote[] GetNotes(this NoteBookPage __self) => _notes.Value.GetValue(__self);
		public static void SetNotes(this NoteBookPage __self, NoteBookNote[] value) => _notes.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<NoteBookPage>> _Start757602046 =
				new System.Lazy<MethodAccessor<NoteBookPage>>(() => MethodAccessor<NoteBookPage>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<NoteBookPage>> _FixPageTitle757602046 =
				new System.Lazy<MethodAccessor<NoteBookPage>>(() => MethodAccessor<NoteBookPage>.Create("FixPageTitle"));
		private static readonly System.Lazy<MethodAccessor<NoteBookPage>> _FixPageNumber757602046 =
				new System.Lazy<MethodAccessor<NoteBookPage>>(() => MethodAccessor<NoteBookPage>.Create("FixPageNumber"));
		private static readonly System.Lazy<MethodAccessor<NoteBookPage>> _FixName757602046 =
				new System.Lazy<MethodAccessor<NoteBookPage>>(() => MethodAccessor<NoteBookPage>.Create("FixName"));

		public static void Start(this NoteBookPage __self) => _Start757602046.Value.Invoke(__self);
		public static void FixPageTitle(this NoteBookPage __self) => _FixPageTitle757602046.Value.Invoke(__self);
		public static void FixPageNumber(this NoteBookPage __self) => _FixPageNumber757602046.Value.Invoke(__self);
		public static void FixName(this NoteBookPage __self) => _FixName757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_NoteBookPage_CharacterSpecific
	{

		private static readonly System.Lazy<FieldAccessor<NoteBookPage_CharacterSpecific, ObjectEnabler>> _characterEnabler =
				new System.Lazy<FieldAccessor<NoteBookPage_CharacterSpecific, ObjectEnabler>>(() => FieldAccessor<NoteBookPage_CharacterSpecific, ObjectEnabler>.Create("characterEnabler"));
		private static readonly System.Lazy<FieldAccessor<NoteBookPage_CharacterSpecific, Network_Player>> _localPlayer =
				new System.Lazy<FieldAccessor<NoteBookPage_CharacterSpecific, Network_Player>>(() => FieldAccessor<NoteBookPage_CharacterSpecific, Network_Player>.Create("localPlayer"));

		public static ObjectEnabler GetCharacterEnabler(this NoteBookPage_CharacterSpecific __self) => _characterEnabler.Value.GetValue(__self);
		public static void SetCharacterEnabler(this NoteBookPage_CharacterSpecific __self, ObjectEnabler value) => _characterEnabler.Value.SetValue(__self, value);
		public static Network_Player GetLocalPlayer(this NoteBookPage_CharacterSpecific __self) => _localPlayer.Value.GetValue(__self);
		public static void SetLocalPlayer(this NoteBookPage_CharacterSpecific __self, Network_Player value) => _localPlayer.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_NoteBookUI
	{

		private static readonly System.Lazy<FieldAccessor<NoteBookUI, UnityEngine.Canvas>> _noteBookCanvas =
				new System.Lazy<FieldAccessor<NoteBookUI, UnityEngine.Canvas>>(() => FieldAccessor<NoteBookUI, UnityEngine.Canvas>.Create("noteBookCanvas"));
		private static readonly System.Lazy<FieldAccessor<NoteBookUI, UnityEngine.Renderer>> _noteBookRenderer =
				new System.Lazy<FieldAccessor<NoteBookUI, UnityEngine.Renderer>>(() => FieldAccessor<NoteBookUI, UnityEngine.Renderer>.Create("noteBookRenderer"));
		private static readonly System.Lazy<FieldAccessor<NoteBookUI, UnityEngine.Animator>> _noteBookAnimator =
				new System.Lazy<FieldAccessor<NoteBookUI, UnityEngine.Animator>>(() => FieldAccessor<NoteBookUI, UnityEngine.Animator>.Create("noteBookAnimator"));
		private static readonly System.Lazy<FieldAccessor<NoteBookUI, UnityEngine.GameObject>> _leftPageFlipImage =
				new System.Lazy<FieldAccessor<NoteBookUI, UnityEngine.GameObject>>(() => FieldAccessor<NoteBookUI, UnityEngine.GameObject>.Create("leftPageFlipImage"));
		private static readonly System.Lazy<FieldAccessor<NoteBookUI, UnityEngine.GameObject>> _rightPageFlipImage =
				new System.Lazy<FieldAccessor<NoteBookUI, UnityEngine.GameObject>>(() => FieldAccessor<NoteBookUI, UnityEngine.GameObject>.Create("rightPageFlipImage"));
		private static readonly System.Lazy<FieldAccessor<NoteBookUI, SO_QuestItemColors>> _questItemColors =
				new System.Lazy<FieldAccessor<NoteBookUI, SO_QuestItemColors>>(() => FieldAccessor<NoteBookUI, SO_QuestItemColors>.Create("questItemColors"));
		private static readonly System.Lazy<FieldAccessor<NoteBookUI, float>> _hideBookDelay =
				new System.Lazy<FieldAccessor<NoteBookUI, float>>(() => FieldAccessor<NoteBookUI, float>.Create("hideBookDelay"));
		private static readonly System.Lazy<FieldAccessor<NoteBookUI, uint>> _currentPageIndex =
				new System.Lazy<FieldAccessor<NoteBookUI, uint>>(() => FieldAccessor<NoteBookUI, uint>.Create("currentPageIndex"));
		private static readonly System.Lazy<FieldAccessor<NoteBookUI, FMODUnity.StudioEventEmitter>> _soundemitter_FlipPage =
				new System.Lazy<FieldAccessor<NoteBookUI, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<NoteBookUI, FMODUnity.StudioEventEmitter>.Create("soundemitter_FlipPage"));
		private static readonly System.Lazy<FieldAccessor<NoteBookUI, FMODUnity.StudioEventEmitter>> _soundemitter_OpenBook =
				new System.Lazy<FieldAccessor<NoteBookUI, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<NoteBookUI, FMODUnity.StudioEventEmitter>.Create("soundemitter_OpenBook"));
		private static readonly System.Lazy<FieldAccessor<NoteBookUI, FMODUnity.StudioEventEmitter>> _soundemitter_CloseBook =
				new System.Lazy<FieldAccessor<NoteBookUI, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<NoteBookUI, FMODUnity.StudioEventEmitter>.Create("soundemitter_CloseBook"));
		private static readonly System.Lazy<FieldAccessor<NoteBookUI, UnityEngine.Light>> _lightSource =
				new System.Lazy<FieldAccessor<NoteBookUI, UnityEngine.Light>>(() => FieldAccessor<NoteBookUI, UnityEngine.Light>.Create("lightSource"));
		private static readonly System.Lazy<FieldAccessor<NoteBookUI, NoteBookPage>> _leftPage =
				new System.Lazy<FieldAccessor<NoteBookUI, NoteBookPage>>(() => FieldAccessor<NoteBookUI, NoteBookPage>.Create("leftPage"));
		private static readonly System.Lazy<FieldAccessor<NoteBookUI, NoteBookPage>> _rightPage =
				new System.Lazy<FieldAccessor<NoteBookUI, NoteBookPage>>(() => FieldAccessor<NoteBookUI, NoteBookPage>.Create("rightPage"));
		private static readonly System.Lazy<FieldAccessor<NoteBookUI, Raft_Network>> _network =
				new System.Lazy<FieldAccessor<NoteBookUI, Raft_Network>>(() => FieldAccessor<NoteBookUI, Raft_Network>.Create("network"));
		private static readonly System.Lazy<FieldAccessor<NoteBookUI, NoteBook>> _noteBook =
				new System.Lazy<FieldAccessor<NoteBookUI, NoteBook>>(() => FieldAccessor<NoteBookUI, NoteBook>.Create("noteBook"));
		private static readonly System.Lazy<FieldAccessor<NoteBookUI, Network_Player>> _player =
				new System.Lazy<FieldAccessor<NoteBookUI, Network_Player>>(() => FieldAccessor<NoteBookUI, Network_Player>.Create("player"));
		private static readonly System.Lazy<FieldAccessor<NoteBookUI, NoteBookPage[]>> _pageObjs =
				new System.Lazy<FieldAccessor<NoteBookUI, NoteBookPage[]>>(() => FieldAccessor<NoteBookUI, NoteBookPage[]>.Create("pageObjs"));
		private static readonly System.Lazy<FieldAccessor<NoteBookUI, NoteBookNote[]>> _notes =
				new System.Lazy<FieldAccessor<NoteBookUI, NoteBookNote[]>>(() => FieldAccessor<NoteBookUI, NoteBookNote[]>.Create("notes"));
		private static readonly System.Lazy<FieldAccessor<NoteBookUI, NoteBook_QuestItem[]>> _questItemUIs =
				new System.Lazy<FieldAccessor<NoteBookUI, NoteBook_QuestItem[]>>(() => FieldAccessor<NoteBookUI, NoteBook_QuestItem[]>.Create("questItemUIs"));
		private static readonly System.Lazy<FieldAccessor<NoteBookUI, uint>> _highestUnlockedPageIndex =
				new System.Lazy<FieldAccessor<NoteBookUI, uint>>(() => FieldAccessor<NoteBookUI, uint>.Create("highestUnlockedPageIndex"));

		public static UnityEngine.Canvas GetNoteBookCanvas(this NoteBookUI __self) => _noteBookCanvas.Value.GetValue(__self);
		public static void SetNoteBookCanvas(this NoteBookUI __self, UnityEngine.Canvas value) => _noteBookCanvas.Value.SetValue(__self, value);
		public static UnityEngine.Renderer GetNoteBookRenderer(this NoteBookUI __self) => _noteBookRenderer.Value.GetValue(__self);
		public static void SetNoteBookRenderer(this NoteBookUI __self, UnityEngine.Renderer value) => _noteBookRenderer.Value.SetValue(__self, value);
		public static UnityEngine.Animator GetNoteBookAnimator(this NoteBookUI __self) => _noteBookAnimator.Value.GetValue(__self);
		public static void SetNoteBookAnimator(this NoteBookUI __self, UnityEngine.Animator value) => _noteBookAnimator.Value.SetValue(__self, value);
		public static UnityEngine.GameObject GetLeftPageFlipImage(this NoteBookUI __self) => _leftPageFlipImage.Value.GetValue(__self);
		public static void SetLeftPageFlipImage(this NoteBookUI __self, UnityEngine.GameObject value) => _leftPageFlipImage.Value.SetValue(__self, value);
		public static UnityEngine.GameObject GetRightPageFlipImage(this NoteBookUI __self) => _rightPageFlipImage.Value.GetValue(__self);
		public static void SetRightPageFlipImage(this NoteBookUI __self, UnityEngine.GameObject value) => _rightPageFlipImage.Value.SetValue(__self, value);
		public static SO_QuestItemColors GetQuestItemColors(this NoteBookUI __self) => _questItemColors.Value.GetValue(__self);
		public static void SetQuestItemColors(this NoteBookUI __self, SO_QuestItemColors value) => _questItemColors.Value.SetValue(__self, value);
		public static float GetHideBookDelay(this NoteBookUI __self) => _hideBookDelay.Value.GetValue(__self);
		public static void SetHideBookDelay(this NoteBookUI __self, float value) => _hideBookDelay.Value.SetValue(__self, value);
		public static uint GetCurrentPageIndex(this NoteBookUI __self) => _currentPageIndex.Value.GetValue(__self);
		public static void SetCurrentPageIndex(this NoteBookUI __self, uint value) => _currentPageIndex.Value.SetValue(__self, value);
		public static FMODUnity.StudioEventEmitter GetSoundemitter_FlipPage(this NoteBookUI __self) => _soundemitter_FlipPage.Value.GetValue(__self);
		public static void SetSoundemitter_FlipPage(this NoteBookUI __self, FMODUnity.StudioEventEmitter value) => _soundemitter_FlipPage.Value.SetValue(__self, value);
		public static FMODUnity.StudioEventEmitter GetSoundemitter_OpenBook(this NoteBookUI __self) => _soundemitter_OpenBook.Value.GetValue(__self);
		public static void SetSoundemitter_OpenBook(this NoteBookUI __self, FMODUnity.StudioEventEmitter value) => _soundemitter_OpenBook.Value.SetValue(__self, value);
		public static FMODUnity.StudioEventEmitter GetSoundemitter_CloseBook(this NoteBookUI __self) => _soundemitter_CloseBook.Value.GetValue(__self);
		public static void SetSoundemitter_CloseBook(this NoteBookUI __self, FMODUnity.StudioEventEmitter value) => _soundemitter_CloseBook.Value.SetValue(__self, value);
		public static UnityEngine.Light GetLightSource(this NoteBookUI __self) => _lightSource.Value.GetValue(__self);
		public static void SetLightSource(this NoteBookUI __self, UnityEngine.Light value) => _lightSource.Value.SetValue(__self, value);
		public static NoteBookPage GetLeftPage(this NoteBookUI __self) => _leftPage.Value.GetValue(__self);
		public static void SetLeftPage(this NoteBookUI __self, NoteBookPage value) => _leftPage.Value.SetValue(__self, value);
		public static NoteBookPage GetRightPage(this NoteBookUI __self) => _rightPage.Value.GetValue(__self);
		public static void SetRightPage(this NoteBookUI __self, NoteBookPage value) => _rightPage.Value.SetValue(__self, value);
		public static Raft_Network GetNetwork(this NoteBookUI __self) => _network.Value.GetValue(__self);
		public static void SetNetwork(this NoteBookUI __self, Raft_Network value) => _network.Value.SetValue(__self, value);
		public static NoteBook GetNoteBook(this NoteBookUI __self) => _noteBook.Value.GetValue(__self);
		public static void SetNoteBook(this NoteBookUI __self, NoteBook value) => _noteBook.Value.SetValue(__self, value);
		public static Network_Player GetPlayer(this NoteBookUI __self) => _player.Value.GetValue(__self);
		public static void SetPlayer(this NoteBookUI __self, Network_Player value) => _player.Value.SetValue(__self, value);
		public static NoteBookPage[] GetPageObjs(this NoteBookUI __self) => _pageObjs.Value.GetValue(__self);
		public static void SetPageObjs(this NoteBookUI __self, NoteBookPage[] value) => _pageObjs.Value.SetValue(__self, value);
		public static NoteBookNote[] GetNotes(this NoteBookUI __self) => _notes.Value.GetValue(__self);
		public static void SetNotes(this NoteBookUI __self, NoteBookNote[] value) => _notes.Value.SetValue(__self, value);
		public static NoteBook_QuestItem[] GetQuestItemUIs(this NoteBookUI __self) => _questItemUIs.Value.GetValue(__self);
		public static void SetQuestItemUIs(this NoteBookUI __self, NoteBook_QuestItem[] value) => _questItemUIs.Value.SetValue(__self, value);
		public static uint GetHighestUnlockedPageIndex(this NoteBookUI __self) => _highestUnlockedPageIndex.Value.GetValue(__self);
		public static void SetHighestUnlockedPageIndex(this NoteBookUI __self, uint value) => _highestUnlockedPageIndex.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<NoteBookUI>> _Awake757602046 =
				new System.Lazy<MethodAccessor<NoteBookUI>>(() => MethodAccessor<NoteBookUI>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<NoteBookUI>> _Start757602046 =
				new System.Lazy<MethodAccessor<NoteBookUI>>(() => MethodAccessor<NoteBookUI>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<NoteBookUI>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<NoteBookUI>>(() => MethodAccessor<NoteBookUI>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<NoteBookUI>> _Update757602046 =
				new System.Lazy<MethodAccessor<NoteBookUI>>(() => MethodAccessor<NoteBookUI>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<NoteBookUI>> _OnQuestItemsModified757602046 =
				new System.Lazy<MethodAccessor<NoteBookUI>>(() => MethodAccessor<NoteBookUI>.Create("OnQuestItemsModified"));
		private static readonly System.Lazy<MethodAccessor<NoteBookUI>> _OnIndexUnlock3473662494 =
				new System.Lazy<MethodAccessor<NoteBookUI>>(() => MethodAccessor<NoteBookUI>.Create("OnIndexUnlock", typeof(uint)));
		private static readonly System.Lazy<MethodAccessor<NoteBookUI>> _IsAllNotesUnlockedInList3444282840 =
				new System.Lazy<MethodAccessor<NoteBookUI>>(() => MethodAccessor<NoteBookUI>.Create("IsAllNotesUnlockedInList", typeof(System.Collections.Generic.List<NoteBookNote>)));
		private static readonly System.Lazy<MethodAccessor<NoteBookUI>> _PopulateLandmarNotesListsByNoteEnum757602046 =
				new System.Lazy<MethodAccessor<NoteBookUI>>(() => MethodAccessor<NoteBookUI>.Create("PopulateLandmarNotesListsByNoteEnum"));
		private static readonly System.Lazy<MethodAccessor<NoteBookUI>> _SetBookVisible3450040886 =
				new System.Lazy<MethodAccessor<NoteBookUI>>(() => MethodAccessor<NoteBookUI>.Create("SetBookVisible", typeof(bool)));
		private static readonly System.Lazy<MethodAccessor<NoteBookUI>> _SetBookVisibleLate757602046 =
				new System.Lazy<MethodAccessor<NoteBookUI>>(() => MethodAccessor<NoteBookUI>.Create("SetBookVisibleLate"));
		private static readonly System.Lazy<MethodAccessor<NoteBookUI>> _SetBookHidden3450040886 =
				new System.Lazy<MethodAccessor<NoteBookUI>>(() => MethodAccessor<NoteBookUI>.Create("SetBookHidden", typeof(bool)));
		private static readonly System.Lazy<MethodAccessor<NoteBookUI>> _SetBookHiddenLate757602046 =
				new System.Lazy<MethodAccessor<NoteBookUI>>(() => MethodAccessor<NoteBookUI>.Create("SetBookHiddenLate"));
		private static readonly System.Lazy<MethodAccessor<NoteBookUI>> _GetPageFromIndex3436376465 =
				new System.Lazy<MethodAccessor<NoteBookUI>>(() => MethodAccessor<NoteBookUI>.Create("GetPageFromIndex", typeof(System.UInt32[])));
		private static readonly System.Lazy<MethodAccessor<NoteBookUI>> _PlayFlipPageSound757602046 =
				new System.Lazy<MethodAccessor<NoteBookUI>>(() => MethodAccessor<NoteBookUI>.Create("PlayFlipPageSound"));
		private static readonly System.Lazy<MethodAccessor<NoteBookUI>> _OpenBookSound757602046 =
				new System.Lazy<MethodAccessor<NoteBookUI>>(() => MethodAccessor<NoteBookUI>.Create("OpenBookSound"));
		private static readonly System.Lazy<MethodAccessor<NoteBookUI>> _CloseBookSound757602046 =
				new System.Lazy<MethodAccessor<NoteBookUI>>(() => MethodAccessor<NoteBookUI>.Create("CloseBookSound"));
		private static readonly System.Lazy<MethodAccessor<NoteBookUI>> _InitializeNotesAndPages757602046 =
				new System.Lazy<MethodAccessor<NoteBookUI>>(() => MethodAccessor<NoteBookUI>.Create("InitializeNotesAndPages"));
		private static readonly System.Lazy<MethodAccessor<NoteBookUI>> _UpdatePages757602046 =
				new System.Lazy<MethodAccessor<NoteBookUI>>(() => MethodAccessor<NoteBookUI>.Create("UpdatePages"));
		private static readonly System.Lazy<MethodAccessor<NoteBookUI>> _UpdateQuestItemUI757602046 =
				new System.Lazy<MethodAccessor<NoteBookUI>>(() => MethodAccessor<NoteBookUI>.Create("UpdateQuestItemUI"));
		private static readonly System.Lazy<MethodAccessor<NoteBookUI>> _CanUseNoteBook757602046 =
				new System.Lazy<MethodAccessor<NoteBookUI>>(() => MethodAccessor<NoteBookUI>.Create("CanUseNoteBook"));
		private static readonly System.Lazy<MethodAccessor<NoteBookUI>> _SendBookActiveMessage757602046 =
				new System.Lazy<MethodAccessor<NoteBookUI>>(() => MethodAccessor<NoteBookUI>.Create("SendBookActiveMessage"));
		private static readonly System.Lazy<MethodAccessor<NoteBookUI>> _SendFlipPageMessage757602046 =
				new System.Lazy<MethodAccessor<NoteBookUI>>(() => MethodAccessor<NoteBookUI>.Create("SendFlipPageMessage"));

		public static void Awake(this NoteBookUI __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this NoteBookUI __self) => _Start757602046.Value.Invoke(__self);
		public static void OnDestroy(this NoteBookUI __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void Update(this NoteBookUI __self) => _Update757602046.Value.Invoke(__self);
		public static void OnQuestItemsModified(this NoteBookUI __self) => _OnQuestItemsModified757602046.Value.Invoke(__self);
		public static void OnIndexUnlock(this NoteBookUI __self, uint noteIndex) => _OnIndexUnlock3473662494.Value.Invoke(__self, noteIndex);
		public static bool IsAllNotesUnlockedInList(this NoteBookUI __self, System.Collections.Generic.List<NoteBookNote> noteList) => (bool)_IsAllNotesUnlockedInList3444282840.Value.Invoke(__self, noteList);
		public static void PopulateLandmarNotesListsByNoteEnum(this NoteBookUI __self) => _PopulateLandmarNotesListsByNoteEnum757602046.Value.Invoke(__self);
		public static void SetBookVisible(this NoteBookUI __self, bool atStart) => _SetBookVisible3450040886.Value.Invoke(__self, atStart);
		public static void SetBookVisibleLate(this NoteBookUI __self) => _SetBookVisibleLate757602046.Value.Invoke(__self);
		public static void SetBookHidden(this NoteBookUI __self, bool atStart) => _SetBookHidden3450040886.Value.Invoke(__self, atStart);
		public static void SetBookHiddenLate(this NoteBookUI __self) => _SetBookHiddenLate757602046.Value.Invoke(__self);
		public static NoteBookPage[] GetPageFromIndex(this NoteBookUI __self, System.UInt32[] pageIndexes) => (NoteBookPage[])_GetPageFromIndex3436376465.Value.Invoke(__self, pageIndexes);
		public static void PlayFlipPageSound(this NoteBookUI __self) => _PlayFlipPageSound757602046.Value.Invoke(__self);
		public static void OpenBookSound(this NoteBookUI __self) => _OpenBookSound757602046.Value.Invoke(__self);
		public static void CloseBookSound(this NoteBookUI __self) => _CloseBookSound757602046.Value.Invoke(__self);
		public static void InitializeNotesAndPages(this NoteBookUI __self) => _InitializeNotesAndPages757602046.Value.Invoke(__self);
		public static void UpdatePages(this NoteBookUI __self) => _UpdatePages757602046.Value.Invoke(__self);
		public static void UpdateQuestItemUI(this NoteBookUI __self) => _UpdateQuestItemUI757602046.Value.Invoke(__self);
		public static bool CanUseNoteBook(this NoteBookUI __self) => (bool)_CanUseNoteBook757602046.Value.Invoke(__self);
		public static void SendBookActiveMessage(this NoteBookUI __self) => _SendBookActiveMessage757602046.Value.Invoke(__self);
		public static void SendFlipPageMessage(this NoteBookUI __self) => _SendFlipPageMessage757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_NoteBook_QuestItem
	{

		private static readonly System.Lazy<FieldAccessor<NoteBook_QuestItem, UnityEngine.UI.Image>> _backgroundImage =
				new System.Lazy<FieldAccessor<NoteBook_QuestItem, UnityEngine.UI.Image>>(() => FieldAccessor<NoteBook_QuestItem, UnityEngine.UI.Image>.Create("backgroundImage"));
		private static readonly System.Lazy<FieldAccessor<NoteBook_QuestItem, UnityEngine.UI.Image>> _itemImage =
				new System.Lazy<FieldAccessor<NoteBook_QuestItem, UnityEngine.UI.Image>>(() => FieldAccessor<NoteBook_QuestItem, UnityEngine.UI.Image>.Create("itemImage"));
		private static readonly System.Lazy<FieldAccessor<NoteBook_QuestItem, UnityEngine.UI.Image>> _textBackground =
				new System.Lazy<FieldAccessor<NoteBook_QuestItem, UnityEngine.UI.Image>>(() => FieldAccessor<NoteBook_QuestItem, UnityEngine.UI.Image>.Create("textBackground"));
		private static readonly System.Lazy<FieldAccessor<NoteBook_QuestItem, TMPro.TextMeshProUGUI>> _itemAmount =
				new System.Lazy<FieldAccessor<NoteBook_QuestItem, TMPro.TextMeshProUGUI>>(() => FieldAccessor<NoteBook_QuestItem, TMPro.TextMeshProUGUI>.Create("itemAmount"));
		private static readonly System.Lazy<FieldAccessor<NoteBook_QuestItem, TMPro.TextMeshProUGUI>> _onHoverDisplayText =
				new System.Lazy<FieldAccessor<NoteBook_QuestItem, TMPro.TextMeshProUGUI>>(() => FieldAccessor<NoteBook_QuestItem, TMPro.TextMeshProUGUI>.Create("onHoverDisplayText"));
		private static readonly System.Lazy<FieldAccessor<NoteBook_QuestItem, UnityEngine.Animator>> _anim =
				new System.Lazy<FieldAccessor<NoteBook_QuestItem, UnityEngine.Animator>>(() => FieldAccessor<NoteBook_QuestItem, UnityEngine.Animator>.Create("anim"));
		private static readonly System.Lazy<FieldAccessor<NoteBook_QuestItem, QuestItem>> _questItem =
				new System.Lazy<FieldAccessor<NoteBook_QuestItem, QuestItem>>(() => FieldAccessor<NoteBook_QuestItem, QuestItem>.Create("questItem"));

		public static UnityEngine.UI.Image GetBackgroundImage(this NoteBook_QuestItem __self) => _backgroundImage.Value.GetValue(__self);
		public static void SetBackgroundImage(this NoteBook_QuestItem __self, UnityEngine.UI.Image value) => _backgroundImage.Value.SetValue(__self, value);
		public static UnityEngine.UI.Image GetItemImage(this NoteBook_QuestItem __self) => _itemImage.Value.GetValue(__self);
		public static void SetItemImage(this NoteBook_QuestItem __self, UnityEngine.UI.Image value) => _itemImage.Value.SetValue(__self, value);
		public static UnityEngine.UI.Image GetTextBackground(this NoteBook_QuestItem __self) => _textBackground.Value.GetValue(__self);
		public static void SetTextBackground(this NoteBook_QuestItem __self, UnityEngine.UI.Image value) => _textBackground.Value.SetValue(__self, value);
		public static TMPro.TextMeshProUGUI GetItemAmount(this NoteBook_QuestItem __self) => _itemAmount.Value.GetValue(__self);
		public static void SetItemAmount(this NoteBook_QuestItem __self, TMPro.TextMeshProUGUI value) => _itemAmount.Value.SetValue(__self, value);
		public static TMPro.TextMeshProUGUI GetOnHoverDisplayText(this NoteBook_QuestItem __self) => _onHoverDisplayText.Value.GetValue(__self);
		public static void SetOnHoverDisplayText(this NoteBook_QuestItem __self, TMPro.TextMeshProUGUI value) => _onHoverDisplayText.Value.SetValue(__self, value);
		public static UnityEngine.Animator GetAnim(this NoteBook_QuestItem __self) => _anim.Value.GetValue(__self);
		public static void SetAnim(this NoteBook_QuestItem __self, UnityEngine.Animator value) => _anim.Value.SetValue(__self, value);
		public static QuestItem GetQuestItem(this NoteBook_QuestItem __self) => _questItem.Value.GetValue(__self);
		public static void SetQuestItem(this NoteBook_QuestItem __self, QuestItem value) => _questItem.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<NoteBook_QuestItem>> _Awake757602046 =
				new System.Lazy<MethodAccessor<NoteBook_QuestItem>>(() => MethodAccessor<NoteBook_QuestItem>.Create("Awake"));

		public static void Awake(this NoteBook_QuestItem __self) => _Awake757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Notebook_ThumbnailShortcut
	{

		private static readonly System.Lazy<FieldAccessor<Notebook_ThumbnailShortcut, NoteBookUI>> _notebookUI =
				new System.Lazy<FieldAccessor<Notebook_ThumbnailShortcut, NoteBookUI>>(() => FieldAccessor<Notebook_ThumbnailShortcut, NoteBookUI>.Create("notebookUI"));

		public static NoteBookUI GetNotebookUI(this Notebook_ThumbnailShortcut __self) => _notebookUI.Value.GetValue(__self);
		public static void SetNotebookUI(this Notebook_ThumbnailShortcut __self, NoteBookUI value) => _notebookUI.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Notebook_ThumbnailShortcut>> _Awake757602046 =
				new System.Lazy<MethodAccessor<Notebook_ThumbnailShortcut>>(() => MethodAccessor<Notebook_ThumbnailShortcut>.Create("Awake"));

		public static void Awake(this Notebook_ThumbnailShortcut __self) => _Awake757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_ObjectPool
	{

		private static readonly System.Lazy<FieldAccessor<ObjectPool, UnityEngine.GameObject>> _objectPrefab =
				new System.Lazy<FieldAccessor<ObjectPool, UnityEngine.GameObject>>(() => FieldAccessor<ObjectPool, UnityEngine.GameObject>.Create("objectPrefab"));
		private static readonly System.Lazy<FieldAccessor<ObjectPool, int>> _initialPoolSize =
				new System.Lazy<FieldAccessor<ObjectPool, int>>(() => FieldAccessor<ObjectPool, int>.Create("initialPoolSize"));
		private static readonly System.Lazy<FieldAccessor<ObjectPool, bool>> _canGrow =
				new System.Lazy<FieldAccessor<ObjectPool, bool>>(() => FieldAccessor<ObjectPool, bool>.Create("canGrow"));
		private static readonly System.Lazy<FieldAccessor<ObjectPool, System.Collections.Generic.List<UnityEngine.GameObject>>> _pool =
				new System.Lazy<FieldAccessor<ObjectPool, System.Collections.Generic.List<UnityEngine.GameObject>>>(() => FieldAccessor<ObjectPool, System.Collections.Generic.List<UnityEngine.GameObject>>.Create("pool"));

		public static UnityEngine.GameObject GetObjectPrefab(this ObjectPool __self) => _objectPrefab.Value.GetValue(__self);
		public static void SetObjectPrefab(this ObjectPool __self, UnityEngine.GameObject value) => _objectPrefab.Value.SetValue(__self, value);
		public static int GetInitialPoolSize(this ObjectPool __self) => _initialPoolSize.Value.GetValue(__self);
		public static void SetInitialPoolSize(this ObjectPool __self, int value) => _initialPoolSize.Value.SetValue(__self, value);
		public static bool GetCanGrow(this ObjectPool __self) => _canGrow.Value.GetValue(__self);
		public static void SetCanGrow(this ObjectPool __self, bool value) => _canGrow.Value.SetValue(__self, value);
		public static System.Collections.Generic.List<UnityEngine.GameObject> GetPool(this ObjectPool __self) => _pool.Value.GetValue(__self);
		public static void SetPool(this ObjectPool __self, System.Collections.Generic.List<UnityEngine.GameObject> value) => _pool.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<ObjectPool>> _AddObjectToPool757602046 =
				new System.Lazy<MethodAccessor<ObjectPool>>(() => MethodAccessor<ObjectPool>.Create("AddObjectToPool"));

		public static UnityEngine.GameObject AddObjectToPool(this ObjectPool __self) => (UnityEngine.GameObject)_AddObjectToPool757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_ParticleController
	{

		private static readonly System.Lazy<FieldAccessor<ParticleController, bool>> _isPlaying =
				new System.Lazy<FieldAccessor<ParticleController, bool>>(() => FieldAccessor<ParticleController, bool>.Create("isPlaying"));

		public static bool GetIsPlaying(this ParticleController __self) => _isPlaying.Value.GetValue(__self);
		public static void SetIsPlaying(this ParticleController __self, bool value) => _isPlaying.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<ParticleController>> _Awake757602046 =
				new System.Lazy<MethodAccessor<ParticleController>>(() => MethodAccessor<ParticleController>.Create("Awake"));

		public static void Awake(this ParticleController __self) => _Awake757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_ParticleSystemLOD
	{

		private static readonly System.Lazy<FieldAccessor<ParticleSystemLOD, float>> _lastDistance =
				new System.Lazy<FieldAccessor<ParticleSystemLOD, float>>(() => FieldAccessor<ParticleSystemLOD, float>.Create("lastDistance"));
		private static readonly System.Lazy<FieldAccessor<ParticleSystemLOD, float>> _nightTimeStart =
				new System.Lazy<FieldAccessor<ParticleSystemLOD, float>>(() => FieldAccessor<ParticleSystemLOD, float>.Create("nightTimeStart"));
		private static readonly System.Lazy<FieldAccessor<ParticleSystemLOD, float>> _nightTimeEnd =
				new System.Lazy<FieldAccessor<ParticleSystemLOD, float>>(() => FieldAccessor<ParticleSystemLOD, float>.Create("nightTimeEnd"));
		private static readonly System.Lazy<FieldAccessor<ParticleSystemLOD, UnityEngine.AzureSky.AzureSkyController>> _skyController =
				new System.Lazy<FieldAccessor<ParticleSystemLOD, UnityEngine.AzureSky.AzureSkyController>>(() => FieldAccessor<ParticleSystemLOD, UnityEngine.AzureSky.AzureSkyController>.Create("skyController"));
		private static readonly System.Lazy<FieldAccessor<ParticleSystemLOD, UnityEngine.Transform>> _mainCameraTransform =
				new System.Lazy<FieldAccessor<ParticleSystemLOD, UnityEngine.Transform>>(() => FieldAccessor<ParticleSystemLOD, UnityEngine.Transform>.Create("mainCameraTransform"));

		public static float GetLastDistance(this ParticleSystemLOD __self) => _lastDistance.Value.GetValue(__self);
		public static void SetLastDistance(this ParticleSystemLOD __self, float value) => _lastDistance.Value.SetValue(__self, value);
		public static float GetNightTimeStart(this ParticleSystemLOD __self) => _nightTimeStart.Value.GetValue(__self);
		public static void SetNightTimeStart(this ParticleSystemLOD __self, float value) => _nightTimeStart.Value.SetValue(__self, value);
		public static float GetNightTimeEnd(this ParticleSystemLOD __self) => _nightTimeEnd.Value.GetValue(__self);
		public static void SetNightTimeEnd(this ParticleSystemLOD __self, float value) => _nightTimeEnd.Value.SetValue(__self, value);
		public static UnityEngine.AzureSky.AzureSkyController GetSkyController(this ParticleSystemLOD __self) => _skyController.Value.GetValue(__self);
		public static void SetSkyController(this ParticleSystemLOD __self, UnityEngine.AzureSky.AzureSkyController value) => _skyController.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetMainCameraTransform(this ParticleSystemLOD __self) => _mainCameraTransform.Value.GetValue(__self);
		public static void SetMainCameraTransform(this ParticleSystemLOD __self, UnityEngine.Transform value) => _mainCameraTransform.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<ParticleSystemLOD>> _Awake757602046 =
				new System.Lazy<MethodAccessor<ParticleSystemLOD>>(() => MethodAccessor<ParticleSystemLOD>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<ParticleSystemLOD>> _OnDisable757602046 =
				new System.Lazy<MethodAccessor<ParticleSystemLOD>>(() => MethodAccessor<ParticleSystemLOD>.Create("OnDisable"));
		private static readonly System.Lazy<MethodAccessor<ParticleSystemLOD>> _Start757602046 =
				new System.Lazy<MethodAccessor<ParticleSystemLOD>>(() => MethodAccessor<ParticleSystemLOD>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<ParticleSystemLOD>> _Update757602046 =
				new System.Lazy<MethodAccessor<ParticleSystemLOD>>(() => MethodAccessor<ParticleSystemLOD>.Create("Update"));

		public static void Awake(this ParticleSystemLOD __self) => _Awake757602046.Value.Invoke(__self);
		public static void OnDisable(this ParticleSystemLOD __self) => _OnDisable757602046.Value.Invoke(__self);
		public static void Start(this ParticleSystemLOD __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this ParticleSystemLOD __self) => _Update757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_ParticleSystemTimeOffset
	{

		private static readonly System.Lazy<MethodAccessor<ParticleSystemTimeOffset>> _Start757602046 =
				new System.Lazy<MethodAccessor<ParticleSystemTimeOffset>>(() => MethodAccessor<ParticleSystemTimeOffset>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<ParticleSystemTimeOffset>> _Update757602046 =
				new System.Lazy<MethodAccessor<ParticleSystemTimeOffset>>(() => MethodAccessor<ParticleSystemTimeOffset>.Create("Update"));

		public static void Start(this ParticleSystemTimeOffset __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this ParticleSystemTimeOffset __self) => _Update757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Pickup
	{

		private static readonly System.Lazy<FieldAccessor<Pickup, PlayerInventory>> _playerInventory =
				new System.Lazy<FieldAccessor<Pickup, PlayerInventory>>(() => FieldAccessor<Pickup, PlayerInventory>.Create("playerInventory"));
		private static readonly System.Lazy<FieldAccessor<Pickup, PlayerAnimator>> _playerAnimator =
				new System.Lazy<FieldAccessor<Pickup, PlayerAnimator>>(() => FieldAccessor<Pickup, PlayerAnimator>.Create("playerAnimator"));
		private static readonly System.Lazy<FieldAccessor<Pickup, DisplayTextManager>> _displayTextManager =
				new System.Lazy<FieldAccessor<Pickup, DisplayTextManager>>(() => FieldAccessor<Pickup, DisplayTextManager>.Create("displayTextManager"));
		private static readonly System.Lazy<FieldAccessor<Pickup, bool>> _showingText =
				new System.Lazy<FieldAccessor<Pickup, bool>>(() => FieldAccessor<Pickup, bool>.Create("showingText"));
		private static readonly System.Lazy<FieldAccessor<Pickup, Network_Player>> _playerNetwork =
				new System.Lazy<FieldAccessor<Pickup, Network_Player>>(() => FieldAccessor<Pickup, Network_Player>.Create("playerNetwork"));
		private static readonly System.Lazy<FieldAccessor<Pickup, PickupItem>> _pickupItem =
				new System.Lazy<FieldAccessor<Pickup, PickupItem>>(() => FieldAccessor<Pickup, PickupItem>.Create("pickupItem"));
		private static readonly System.Lazy<FieldAccessor<Pickup, PickupChanneling>> _pickupChanneling =
				new System.Lazy<FieldAccessor<Pickup, PickupChanneling>>(() => FieldAccessor<Pickup, PickupChanneling>.Create("pickupChanneling"));
		private static readonly System.Lazy<FieldAccessor<Pickup, SoundManager>> _soundManager =
				new System.Lazy<FieldAccessor<Pickup, SoundManager>>(() => FieldAccessor<Pickup, SoundManager>.Create("soundManager"));
		private static readonly System.Lazy<FieldAccessor<Pickup, CanvasHelper>> _canvas =
				new System.Lazy<FieldAccessor<Pickup, CanvasHelper>>(() => FieldAccessor<Pickup, CanvasHelper>.Create("canvas"));
		private static readonly System.Lazy<FieldAccessor<Pickup, System.Collections.Generic.List<IRaycastable>>> _latestRaycastables =
				new System.Lazy<FieldAccessor<Pickup, System.Collections.Generic.List<IRaycastable>>>(() => FieldAccessor<Pickup, System.Collections.Generic.List<IRaycastable>>.Create("latestRaycastables"));

		public static PlayerInventory GetPlayerInventory(this Pickup __self) => _playerInventory.Value.GetValue(__self);
		public static void SetPlayerInventory(this Pickup __self, PlayerInventory value) => _playerInventory.Value.SetValue(__self, value);
		public static PlayerAnimator GetPlayerAnimator(this Pickup __self) => _playerAnimator.Value.GetValue(__self);
		public static void SetPlayerAnimator(this Pickup __self, PlayerAnimator value) => _playerAnimator.Value.SetValue(__self, value);
		public static DisplayTextManager GetDisplayTextManager(this Pickup __self) => _displayTextManager.Value.GetValue(__self);
		public static void SetDisplayTextManager(this Pickup __self, DisplayTextManager value) => _displayTextManager.Value.SetValue(__self, value);
		public static bool GetShowingText(this Pickup __self) => _showingText.Value.GetValue(__self);
		public static void SetShowingText(this Pickup __self, bool value) => _showingText.Value.SetValue(__self, value);
		public static Network_Player GetPlayerNetwork(this Pickup __self) => _playerNetwork.Value.GetValue(__self);
		public static void SetPlayerNetwork(this Pickup __self, Network_Player value) => _playerNetwork.Value.SetValue(__self, value);
		public static PickupItem GetPickupItem(this Pickup __self) => _pickupItem.Value.GetValue(__self);
		public static void SetPickupItem(this Pickup __self, PickupItem value) => _pickupItem.Value.SetValue(__self, value);
		public static PickupChanneling GetPickupChanneling(this Pickup __self) => _pickupChanneling.Value.GetValue(__self);
		public static void SetPickupChanneling(this Pickup __self, PickupChanneling value) => _pickupChanneling.Value.SetValue(__self, value);
		public static SoundManager GetSoundManager(this Pickup __self) => _soundManager.Value.GetValue(__self);
		public static void SetSoundManager(this Pickup __self, SoundManager value) => _soundManager.Value.SetValue(__self, value);
		public static CanvasHelper GetCanvas(this Pickup __self) => _canvas.Value.GetValue(__self);
		public static void SetCanvas(this Pickup __self, CanvasHelper value) => _canvas.Value.SetValue(__self, value);
		public static System.Collections.Generic.List<IRaycastable> GetLatestRaycastables(this Pickup __self) => _latestRaycastables.Value.GetValue(__self);
		public static void SetLatestRaycastables(this Pickup __self, System.Collections.Generic.List<IRaycastable> value) => _latestRaycastables.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Pickup>> _Start757602046 =
				new System.Lazy<MethodAccessor<Pickup>>(() => MethodAccessor<Pickup>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<Pickup>> _Update757602046 =
				new System.Lazy<MethodAccessor<Pickup>>(() => MethodAccessor<Pickup>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<Pickup>> _RaycastForRayInteractables757602046 =
				new System.Lazy<MethodAccessor<Pickup>>(() => MethodAccessor<Pickup>.Create("RaycastForRayInteractables"));
		private static readonly System.Lazy<MethodAccessor<Pickup>> _PickupDomestic3402953893 =
				new System.Lazy<MethodAccessor<Pickup>>(() => MethodAccessor<Pickup>.Create("PickupDomestic", typeof(PickupItem), typeof(bool)));
		private static readonly System.Lazy<MethodAccessor<Pickup>> _PickupItemNet3440352149 =
				new System.Lazy<MethodAccessor<Pickup>>(() => MethodAccessor<Pickup>.Create("PickupItemNet", typeof(ItemNet)));
		private static readonly System.Lazy<MethodAccessor<Pickup>> _PickupNoteBookNote3432555203 =
				new System.Lazy<MethodAccessor<Pickup>>(() => MethodAccessor<Pickup>.Create("PickupNoteBookNote", typeof(NoteBookNotePickup), typeof(bool)));

		public static void Start(this Pickup __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this Pickup __self) => _Update757602046.Value.Invoke(__self);
		public static RaycastInteractable RaycastForRayInteractables(this Pickup __self) => (RaycastInteractable)_RaycastForRayInteractables757602046.Value.Invoke(__self);
		public static void PickupDomestic(this Pickup __self, PickupItem pickup, bool forcePickup) => _PickupDomestic3402953893.Value.Invoke(__self, pickup, forcePickup);
		public static void PickupItemNet(this Pickup __self, ItemNet itemNet) => _PickupItemNet3440352149.Value.Invoke(__self, itemNet);
		public static void PickupNoteBookNote(this Pickup __self, NoteBookNotePickup note, bool triggerHandAnimation) => _PickupNoteBookNote3432555203.Value.Invoke(__self, note, triggerHandAnimation);

	}

	public static class PrivateAccessor_PickupChanneling
	{

		private static readonly System.Lazy<FieldAccessor<PickupChanneling, MonoBehaviour_ID_Network>> _networkBehaviourID =
				new System.Lazy<FieldAccessor<PickupChanneling, MonoBehaviour_ID_Network>>(() => FieldAccessor<PickupChanneling, MonoBehaviour_ID_Network>.Create("networkBehaviourID"));
		private static readonly System.Lazy<FieldAccessor<PickupChanneling, int>> _itemsTakenPerTick =
				new System.Lazy<FieldAccessor<PickupChanneling, int>>(() => FieldAccessor<PickupChanneling, int>.Create("itemsTakenPerTick"));
		private static readonly System.Lazy<FieldAccessor<PickupChanneling, UnityEngine.Collider>> _pickupCollider =
				new System.Lazy<FieldAccessor<PickupChanneling, UnityEngine.Collider>>(() => FieldAccessor<PickupChanneling, UnityEngine.Collider>.Create("pickupCollider"));
		private static readonly System.Lazy<FieldAccessor<PickupChanneling, bool>> _collectLastYieldFromPickupScript =
				new System.Lazy<FieldAccessor<PickupChanneling, bool>>(() => FieldAccessor<PickupChanneling, bool>.Create("collectLastYieldFromPickupScript"));
		private static readonly System.Lazy<FieldAccessor<PickupChanneling, bool>> _forcePickupLastYield =
				new System.Lazy<FieldAccessor<PickupChanneling, bool>>(() => FieldAccessor<PickupChanneling, bool>.Create("forcePickupLastYield"));
		private static readonly System.Lazy<FieldAccessor<PickupChanneling, UnityEngine.Transform>> _arrowParent =
				new System.Lazy<FieldAccessor<PickupChanneling, UnityEngine.Transform>>(() => FieldAccessor<PickupChanneling, UnityEngine.Transform>.Create("arrowParent"));
		private static readonly System.Lazy<FieldAccessor<PickupChanneling, Network_Player>> _player =
				new System.Lazy<FieldAccessor<PickupChanneling, Network_Player>>(() => FieldAccessor<PickupChanneling, Network_Player>.Create("player"));
		private static readonly System.Lazy<FieldAccessor<PickupChanneling, CanvasHelper>> _canvasHelper =
				new System.Lazy<FieldAccessor<PickupChanneling, CanvasHelper>>(() => FieldAccessor<PickupChanneling, CanvasHelper>.Create("canvasHelper"));
		private static readonly System.Lazy<FieldAccessor<PickupChanneling, int>> _channelStartItemCount =
				new System.Lazy<FieldAccessor<PickupChanneling, int>>(() => FieldAccessor<PickupChanneling, int>.Create("channelStartItemCount"));
		private static readonly System.Lazy<FieldAccessor<PickupChanneling, float>> _currentChannelProgress =
				new System.Lazy<FieldAccessor<PickupChanneling, float>>(() => FieldAccessor<PickupChanneling, float>.Create("currentChannelProgress"));
		private static readonly System.Lazy<FieldAccessor<PickupChanneling, float>> _lastPickupTime =
				new System.Lazy<FieldAccessor<PickupChanneling, float>>(() => FieldAccessor<PickupChanneling, float>.Create("lastPickupTime"));
		private static readonly System.Lazy<FieldAccessor<PickupChanneling, bool>> _isPickingUp =
				new System.Lazy<FieldAccessor<PickupChanneling, bool>>(() => FieldAccessor<PickupChanneling, bool>.Create("isPickingUp"));

		public static MonoBehaviour_ID_Network GetNetworkBehaviourID(this PickupChanneling __self) => _networkBehaviourID.Value.GetValue(__self);
		public static void SetNetworkBehaviourID(this PickupChanneling __self, MonoBehaviour_ID_Network value) => _networkBehaviourID.Value.SetValue(__self, value);
		public static int GetItemsTakenPerTick(this PickupChanneling __self) => _itemsTakenPerTick.Value.GetValue(__self);
		public static void SetItemsTakenPerTick(this PickupChanneling __self, int value) => _itemsTakenPerTick.Value.SetValue(__self, value);
		public static UnityEngine.Collider GetPickupCollider(this PickupChanneling __self) => _pickupCollider.Value.GetValue(__self);
		public static void SetPickupCollider(this PickupChanneling __self, UnityEngine.Collider value) => _pickupCollider.Value.SetValue(__self, value);
		public static bool GetCollectLastYieldFromPickupScript(this PickupChanneling __self) => _collectLastYieldFromPickupScript.Value.GetValue(__self);
		public static void SetCollectLastYieldFromPickupScript(this PickupChanneling __self, bool value) => _collectLastYieldFromPickupScript.Value.SetValue(__self, value);
		public static bool GetForcePickupLastYield(this PickupChanneling __self) => _forcePickupLastYield.Value.GetValue(__self);
		public static void SetForcePickupLastYield(this PickupChanneling __self, bool value) => _forcePickupLastYield.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetArrowParent(this PickupChanneling __self) => _arrowParent.Value.GetValue(__self);
		public static void SetArrowParent(this PickupChanneling __self, UnityEngine.Transform value) => _arrowParent.Value.SetValue(__self, value);
		public static Network_Player GetPlayer(this PickupChanneling __self) => _player.Value.GetValue(__self);
		public static void SetPlayer(this PickupChanneling __self, Network_Player value) => _player.Value.SetValue(__self, value);
		public static CanvasHelper GetCanvasHelper(this PickupChanneling __self) => _canvasHelper.Value.GetValue(__self);
		public static void SetCanvasHelper(this PickupChanneling __self, CanvasHelper value) => _canvasHelper.Value.SetValue(__self, value);
		public static int GetChannelStartItemCount(this PickupChanneling __self) => _channelStartItemCount.Value.GetValue(__self);
		public static void SetChannelStartItemCount(this PickupChanneling __self, int value) => _channelStartItemCount.Value.SetValue(__self, value);
		public static float GetCurrentChannelProgress(this PickupChanneling __self) => _currentChannelProgress.Value.GetValue(__self);
		public static void SetCurrentChannelProgress(this PickupChanneling __self, float value) => _currentChannelProgress.Value.SetValue(__self, value);
		public static float GetLastPickupTime(this PickupChanneling __self) => _lastPickupTime.Value.GetValue(__self);
		public static void SetLastPickupTime(this PickupChanneling __self, float value) => _lastPickupTime.Value.SetValue(__self, value);
		public static bool GetIsPickingUp(this PickupChanneling __self) => _isPickingUp.Value.GetValue(__self);
		public static void SetIsPickingUp(this PickupChanneling __self, bool value) => _isPickingUp.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<PickupChanneling>> _Awake757602046 =
				new System.Lazy<MethodAccessor<PickupChanneling>>(() => MethodAccessor<PickupChanneling>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<PickupChanneling>> _Start757602046 =
				new System.Lazy<MethodAccessor<PickupChanneling>>(() => MethodAccessor<PickupChanneling>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<PickupChanneling>> _InitiateChannel757602046 =
				new System.Lazy<MethodAccessor<PickupChanneling>>(() => MethodAccessor<PickupChanneling>.Create("InitiateChannel"));
		private static readonly System.Lazy<MethodAccessor<PickupChanneling>> _ProgressChannel3486905475 =
				new System.Lazy<MethodAccessor<PickupChanneling>>(() => MethodAccessor<PickupChanneling>.Create("ProgressChannel", typeof(float)));
		private static readonly System.Lazy<MethodAccessor<PickupChanneling>> _CancelChannel757602046 =
				new System.Lazy<MethodAccessor<PickupChanneling>>(() => MethodAccessor<PickupChanneling>.Create("CancelChannel"));
		private static readonly System.Lazy<MethodAccessor<PickupChanneling>> _HandleChannelProgress757602046 =
				new System.Lazy<MethodAccessor<PickupChanneling>>(() => MethodAccessor<PickupChanneling>.Create("HandleChannelProgress"));
		private static readonly System.Lazy<MethodAccessor<PickupChanneling>> _TakeItemNetworked757602046 =
				new System.Lazy<MethodAccessor<PickupChanneling>>(() => MethodAccessor<PickupChanneling>.Create("TakeItemNetworked"));
		private static readonly System.Lazy<MethodAccessor<PickupChanneling>> _TakeItemFromYield3461878659 =
				new System.Lazy<MethodAccessor<PickupChanneling>>(() => MethodAccessor<PickupChanneling>.Create("TakeItemFromYield", typeof(Network_Player)));
		private static readonly System.Lazy<MethodAccessor<PickupChanneling>> _AddItemToInventory757602046 =
				new System.Lazy<MethodAccessor<PickupChanneling>>(() => MethodAccessor<PickupChanneling>.Create("AddItemToInventory"));
		private static readonly System.Lazy<MethodAccessor<PickupChanneling>> _UpdateUIChannelRing3486905475 =
				new System.Lazy<MethodAccessor<PickupChanneling>>(() => MethodAccessor<PickupChanneling>.Create("UpdateUIChannelRing", typeof(float)));
		private static readonly System.Lazy<MethodAccessor<PickupChanneling>> _PickupChildArrows3461878659 =
				new System.Lazy<MethodAccessor<PickupChanneling>>(() => MethodAccessor<PickupChanneling>.Create("PickupChildArrows", typeof(Network_Player)));

		public static void Awake(this PickupChanneling __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this PickupChanneling __self) => _Start757602046.Value.Invoke(__self);
		public static void InitiateChannel(this PickupChanneling __self) => _InitiateChannel757602046.Value.Invoke(__self);
		public static void ProgressChannel(this PickupChanneling __self, float time) => _ProgressChannel3486905475.Value.Invoke(__self, time);
		public static void CancelChannel(this PickupChanneling __self) => _CancelChannel757602046.Value.Invoke(__self);
		public static void HandleChannelProgress(this PickupChanneling __self) => _HandleChannelProgress757602046.Value.Invoke(__self);
		public static void TakeItemNetworked(this PickupChanneling __self) => _TakeItemNetworked757602046.Value.Invoke(__self);
		public static void TakeItemFromYield(this PickupChanneling __self, Network_Player player) => _TakeItemFromYield3461878659.Value.Invoke(__self, player);
		public static void AddItemToInventory(this PickupChanneling __self) => _AddItemToInventory757602046.Value.Invoke(__self);
		public static void UpdateUIChannelRing(this PickupChanneling __self, float normalizedFill) => _UpdateUIChannelRing3486905475.Value.Invoke(__self, normalizedFill);
		public static void PickupChildArrows(this PickupChanneling __self, Network_Player player) => _PickupChildArrows3461878659.Value.Invoke(__self, player);

	}

	public static class PrivateAccessor_PickupChanneling_TelephoneAntenna
	{

		private static readonly System.Lazy<FieldAccessor<PickupChanneling_TelephoneAntenna, UnityEngine.LineRenderer>> _line =
				new System.Lazy<FieldAccessor<PickupChanneling_TelephoneAntenna, UnityEngine.LineRenderer>>(() => FieldAccessor<PickupChanneling_TelephoneAntenna, UnityEngine.LineRenderer>.Create("line"));
		private static readonly System.Lazy<FieldAccessor<PickupChanneling_TelephoneAntenna, UnityEngine.Transform>> _startPoint =
				new System.Lazy<FieldAccessor<PickupChanneling_TelephoneAntenna, UnityEngine.Transform>>(() => FieldAccessor<PickupChanneling_TelephoneAntenna, UnityEngine.Transform>.Create("startPoint"));
		private static readonly System.Lazy<FieldAccessor<PickupChanneling_TelephoneAntenna, UnityEngine.MeshRenderer>> _antenna =
				new System.Lazy<FieldAccessor<PickupChanneling_TelephoneAntenna, UnityEngine.MeshRenderer>>(() => FieldAccessor<PickupChanneling_TelephoneAntenna, UnityEngine.MeshRenderer>.Create("antenna"));
		private static readonly System.Lazy<FieldAccessor<PickupChanneling_TelephoneAntenna, FMODUnity.StudioEventEmitter>> _emitter_antenna =
				new System.Lazy<FieldAccessor<PickupChanneling_TelephoneAntenna, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<PickupChanneling_TelephoneAntenna, FMODUnity.StudioEventEmitter>.Create("emitter_antenna"));
		private static readonly System.Lazy<FieldAccessor<PickupChanneling_TelephoneAntenna, FMODUnity.StudioEventEmitter>> _emitter_pull =
				new System.Lazy<FieldAccessor<PickupChanneling_TelephoneAntenna, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<PickupChanneling_TelephoneAntenna, FMODUnity.StudioEventEmitter>.Create("emitter_pull"));
		private static readonly System.Lazy<FieldAccessor<PickupChanneling_TelephoneAntenna, string>> _eventRef_success =
				new System.Lazy<FieldAccessor<PickupChanneling_TelephoneAntenna, string>>(() => FieldAccessor<PickupChanneling_TelephoneAntenna, string>.Create("eventRef_success"));
		private static readonly System.Lazy<FieldAccessor<PickupChanneling_TelephoneAntenna, UnityEngine.MaterialPropertyBlock>> _matPropBlock =
				new System.Lazy<FieldAccessor<PickupChanneling_TelephoneAntenna, UnityEngine.MaterialPropertyBlock>>(() => FieldAccessor<PickupChanneling_TelephoneAntenna, UnityEngine.MaterialPropertyBlock>.Create("matPropBlock"));
		private static readonly System.Lazy<FieldAccessor<PickupChanneling_TelephoneAntenna, UnityEngine.Transform>> _leftHandRopeTransform =
				new System.Lazy<FieldAccessor<PickupChanneling_TelephoneAntenna, UnityEngine.Transform>>(() => FieldAccessor<PickupChanneling_TelephoneAntenna, UnityEngine.Transform>.Create("leftHandRopeTransform"));
		private static readonly System.Lazy<FieldAccessor<PickupChanneling_TelephoneAntenna, bool>> _isQuitting =
				new System.Lazy<FieldAccessor<PickupChanneling_TelephoneAntenna, bool>>(() => FieldAccessor<PickupChanneling_TelephoneAntenna, bool>.Create("isQuitting"));

		public static UnityEngine.LineRenderer GetLine(this PickupChanneling_TelephoneAntenna __self) => _line.Value.GetValue(__self);
		public static void SetLine(this PickupChanneling_TelephoneAntenna __self, UnityEngine.LineRenderer value) => _line.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetStartPoint(this PickupChanneling_TelephoneAntenna __self) => _startPoint.Value.GetValue(__self);
		public static void SetStartPoint(this PickupChanneling_TelephoneAntenna __self, UnityEngine.Transform value) => _startPoint.Value.SetValue(__self, value);
		public static UnityEngine.MeshRenderer GetAntenna(this PickupChanneling_TelephoneAntenna __self) => _antenna.Value.GetValue(__self);
		public static void SetAntenna(this PickupChanneling_TelephoneAntenna __self, UnityEngine.MeshRenderer value) => _antenna.Value.SetValue(__self, value);
		public static FMODUnity.StudioEventEmitter GetEmitter_antenna(this PickupChanneling_TelephoneAntenna __self) => _emitter_antenna.Value.GetValue(__self);
		public static void SetEmitter_antenna(this PickupChanneling_TelephoneAntenna __self, FMODUnity.StudioEventEmitter value) => _emitter_antenna.Value.SetValue(__self, value);
		public static FMODUnity.StudioEventEmitter GetEmitter_pull(this PickupChanneling_TelephoneAntenna __self) => _emitter_pull.Value.GetValue(__self);
		public static void SetEmitter_pull(this PickupChanneling_TelephoneAntenna __self, FMODUnity.StudioEventEmitter value) => _emitter_pull.Value.SetValue(__self, value);
		public static string GetEventRef_success(this PickupChanneling_TelephoneAntenna __self) => _eventRef_success.Value.GetValue(__self);
		public static void SetEventRef_success(this PickupChanneling_TelephoneAntenna __self, string value) => _eventRef_success.Value.SetValue(__self, value);
		public static UnityEngine.MaterialPropertyBlock GetMatPropBlock(this PickupChanneling_TelephoneAntenna __self) => _matPropBlock.Value.GetValue(__self);
		public static void SetMatPropBlock(this PickupChanneling_TelephoneAntenna __self, UnityEngine.MaterialPropertyBlock value) => _matPropBlock.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetLeftHandRopeTransform(this PickupChanneling_TelephoneAntenna __self) => _leftHandRopeTransform.Value.GetValue(__self);
		public static void SetLeftHandRopeTransform(this PickupChanneling_TelephoneAntenna __self, UnityEngine.Transform value) => _leftHandRopeTransform.Value.SetValue(__self, value);
		public static bool GetIsQuitting(this PickupChanneling_TelephoneAntenna __self) => _isQuitting.Value.GetValue(__self);
		public static void SetIsQuitting(this PickupChanneling_TelephoneAntenna __self, bool value) => _isQuitting.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<PickupChanneling_TelephoneAntenna>> _OnEnable757602046 =
				new System.Lazy<MethodAccessor<PickupChanneling_TelephoneAntenna>>(() => MethodAccessor<PickupChanneling_TelephoneAntenna>.Create("OnEnable"));
		private static readonly System.Lazy<MethodAccessor<PickupChanneling_TelephoneAntenna>> _OnDisable757602046 =
				new System.Lazy<MethodAccessor<PickupChanneling_TelephoneAntenna>>(() => MethodAccessor<PickupChanneling_TelephoneAntenna>.Create("OnDisable"));
		private static readonly System.Lazy<MethodAccessor<PickupChanneling_TelephoneAntenna>> _OnApplicationQuit757602046 =
				new System.Lazy<MethodAccessor<PickupChanneling_TelephoneAntenna>>(() => MethodAccessor<PickupChanneling_TelephoneAntenna>.Create("OnApplicationQuit"));
		private static readonly System.Lazy<MethodAccessor<PickupChanneling_TelephoneAntenna>> _InitiateChannel757602046 =
				new System.Lazy<MethodAccessor<PickupChanneling_TelephoneAntenna>>(() => MethodAccessor<PickupChanneling_TelephoneAntenna>.Create("InitiateChannel"));
		private static readonly System.Lazy<MethodAccessor<PickupChanneling_TelephoneAntenna>> _ProgressChannel3486905475 =
				new System.Lazy<MethodAccessor<PickupChanneling_TelephoneAntenna>>(() => MethodAccessor<PickupChanneling_TelephoneAntenna>.Create("ProgressChannel", typeof(float)));
		private static readonly System.Lazy<MethodAccessor<PickupChanneling_TelephoneAntenna>> _CancelChannel757602046 =
				new System.Lazy<MethodAccessor<PickupChanneling_TelephoneAntenna>>(() => MethodAccessor<PickupChanneling_TelephoneAntenna>.Create("CancelChannel"));

		public static void OnEnable(this PickupChanneling_TelephoneAntenna __self) => _OnEnable757602046.Value.Invoke(__self);
		public static void OnDisable(this PickupChanneling_TelephoneAntenna __self) => _OnDisable757602046.Value.Invoke(__self);
		public static void OnApplicationQuit(this PickupChanneling_TelephoneAntenna __self) => _OnApplicationQuit757602046.Value.Invoke(__self);
		public static void InitiateChannel(this PickupChanneling_TelephoneAntenna __self) => _InitiateChannel757602046.Value.Invoke(__self);
		public static void ProgressChannel(this PickupChanneling_TelephoneAntenna __self, float time) => _ProgressChannel3486905475.Value.Invoke(__self, time);
		public static void CancelChannel(this PickupChanneling_TelephoneAntenna __self) => _CancelChannel757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_PickupItem
	{

		private static readonly System.Lazy<FieldAccessor<PickupItem, string>> _lastLocalizedTerm =
				new System.Lazy<FieldAccessor<PickupItem, string>>(() => FieldAccessor<PickupItem, string>.Create("lastLocalizedTerm"));
		private static readonly System.Lazy<FieldAccessor<PickupItem, string>> _lastLocalizedPickupName =
				new System.Lazy<FieldAccessor<PickupItem, string>>(() => FieldAccessor<PickupItem, string>.Create("lastLocalizedPickupName"));

		public static string GetLastLocalizedTerm(this PickupItem __self) => _lastLocalizedTerm.Value.GetValue(__self);
		public static void SetLastLocalizedTerm(this PickupItem __self, string value) => _lastLocalizedTerm.Value.SetValue(__self, value);
		public static string GetLastLocalizedPickupName(this PickupItem __self) => _lastLocalizedPickupName.Value.GetValue(__self);
		public static void SetLastLocalizedPickupName(this PickupItem __self, string value) => _lastLocalizedPickupName.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<PickupItem>> _OnInspectorExtension757602046 =
				new System.Lazy<MethodAccessor<PickupItem>>(() => MethodAccessor<PickupItem>.Create("OnInspectorExtension"));
		private static readonly System.Lazy<MethodAccessor<PickupItem>> _GetPickupName757602046 =
				new System.Lazy<MethodAccessor<PickupItem>>(() => MethodAccessor<PickupItem>.Create("GetPickupName"));

		public static void OnInspectorExtension(this PickupItem __self) => _OnInspectorExtension757602046.Value.Invoke(__self);
		public static string GetPickupName(this PickupItem __self) => (string)_GetPickupName757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_PickupItem_Networked
	{

		private static readonly System.Lazy<FieldAccessor<PickupItem_Networked, PickupItem>> _pickupItem =
				new System.Lazy<FieldAccessor<PickupItem_Networked, PickupItem>>(() => FieldAccessor<PickupItem_Networked, PickupItem>.Create("pickupItem"));

		public static PickupItem GetPickupItem(this PickupItem_Networked __self) => _pickupItem.Value.GetValue(__self);
		public static void SetPickupItem(this PickupItem_Networked __self, PickupItem value) => _pickupItem.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_PickupItem_Networked_CaravanRocket
	{

		private static readonly System.Lazy<FieldAccessor<PickupItem_Networked_CaravanRocket, UnityEngine.GameObject>> _ropeModel =
				new System.Lazy<FieldAccessor<PickupItem_Networked_CaravanRocket, UnityEngine.GameObject>>(() => FieldAccessor<PickupItem_Networked_CaravanRocket, UnityEngine.GameObject>.Create("ropeModel"));

		public static UnityEngine.GameObject GetRopeModel(this PickupItem_Networked_CaravanRocket __self) => _ropeModel.Value.GetValue(__self);
		public static void SetRopeModel(this PickupItem_Networked_CaravanRocket __self, UnityEngine.GameObject value) => _ropeModel.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_PickupItem_Networked_ChangeMesh
	{

		private static readonly System.Lazy<FieldAccessor<PickupItem_Networked_ChangeMesh, UnityEngine.MeshFilter>> _meshFilter =
				new System.Lazy<FieldAccessor<PickupItem_Networked_ChangeMesh, UnityEngine.MeshFilter>>(() => FieldAccessor<PickupItem_Networked_ChangeMesh, UnityEngine.MeshFilter>.Create("meshFilter"));
		private static readonly System.Lazy<FieldAccessor<PickupItem_Networked_ChangeMesh, UnityEngine.Mesh>> _defaultMesh =
				new System.Lazy<FieldAccessor<PickupItem_Networked_ChangeMesh, UnityEngine.Mesh>>(() => FieldAccessor<PickupItem_Networked_ChangeMesh, UnityEngine.Mesh>.Create("defaultMesh"));
		private static readonly System.Lazy<FieldAccessor<PickupItem_Networked_ChangeMesh, UnityEngine.Mesh>> _pickedUpMesh =
				new System.Lazy<FieldAccessor<PickupItem_Networked_ChangeMesh, UnityEngine.Mesh>>(() => FieldAccessor<PickupItem_Networked_ChangeMesh, UnityEngine.Mesh>.Create("pickedUpMesh"));
		private static readonly System.Lazy<FieldAccessor<PickupItem_Networked_ChangeMesh, UnityEngine.Collider>> _pickupCollider =
				new System.Lazy<FieldAccessor<PickupItem_Networked_ChangeMesh, UnityEngine.Collider>>(() => FieldAccessor<PickupItem_Networked_ChangeMesh, UnityEngine.Collider>.Create("pickupCollider"));

		public static UnityEngine.MeshFilter GetMeshFilter(this PickupItem_Networked_ChangeMesh __self) => _meshFilter.Value.GetValue(__self);
		public static void SetMeshFilter(this PickupItem_Networked_ChangeMesh __self, UnityEngine.MeshFilter value) => _meshFilter.Value.SetValue(__self, value);
		public static UnityEngine.Mesh GetDefaultMesh(this PickupItem_Networked_ChangeMesh __self) => _defaultMesh.Value.GetValue(__self);
		public static void SetDefaultMesh(this PickupItem_Networked_ChangeMesh __self, UnityEngine.Mesh value) => _defaultMesh.Value.SetValue(__self, value);
		public static UnityEngine.Mesh GetPickedUpMesh(this PickupItem_Networked_ChangeMesh __self) => _pickedUpMesh.Value.GetValue(__self);
		public static void SetPickedUpMesh(this PickupItem_Networked_ChangeMesh __self, UnityEngine.Mesh value) => _pickedUpMesh.Value.SetValue(__self, value);
		public static UnityEngine.Collider GetPickupCollider(this PickupItem_Networked_ChangeMesh __self) => _pickupCollider.Value.GetValue(__self);
		public static void SetPickupCollider(this PickupItem_Networked_ChangeMesh __self, UnityEngine.Collider value) => _pickupCollider.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<PickupItem_Networked_ChangeMesh>> _OnValidate757602046 =
				new System.Lazy<MethodAccessor<PickupItem_Networked_ChangeMesh>>(() => MethodAccessor<PickupItem_Networked_ChangeMesh>.Create("OnValidate"));
		private static readonly System.Lazy<MethodAccessor<PickupItem_Networked_ChangeMesh>> _GrabDefaultMeshFromFilter757602046 =
				new System.Lazy<MethodAccessor<PickupItem_Networked_ChangeMesh>>(() => MethodAccessor<PickupItem_Networked_ChangeMesh>.Create("GrabDefaultMeshFromFilter"));
		private static readonly System.Lazy<MethodAccessor<PickupItem_Networked_ChangeMesh>> _RefreshMesh757602046 =
				new System.Lazy<MethodAccessor<PickupItem_Networked_ChangeMesh>>(() => MethodAccessor<PickupItem_Networked_ChangeMesh>.Create("RefreshMesh"));

		public static void OnValidate(this PickupItem_Networked_ChangeMesh __self) => _OnValidate757602046.Value.Invoke(__self);
		public static void GrabDefaultMeshFromFilter(this PickupItem_Networked_ChangeMesh __self) => _GrabDefaultMeshFromFilter757602046.Value.Invoke(__self);
		public static void RefreshMesh(this PickupItem_Networked_ChangeMesh __self) => _RefreshMesh757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_PickupItem_Networked_Channeling
	{

		private static readonly System.Lazy<FieldAccessor<PickupItem_Networked_Channeling, PickupChanneling>> _pickupChannelingScript =
				new System.Lazy<FieldAccessor<PickupItem_Networked_Channeling, PickupChanneling>>(() => FieldAccessor<PickupItem_Networked_Channeling, PickupChanneling>.Create("pickupChannelingScript"));

		public static PickupChanneling GetPickupChannelingScript(this PickupItem_Networked_Channeling __self) => _pickupChannelingScript.Value.GetValue(__self);
		public static void SetPickupChannelingScript(this PickupItem_Networked_Channeling __self, PickupChanneling value) => _pickupChannelingScript.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<PickupItem_Networked_Channeling>> _Awake757602046 =
				new System.Lazy<MethodAccessor<PickupItem_Networked_Channeling>>(() => MethodAccessor<PickupItem_Networked_Channeling>.Create("Awake"));

		public static void Awake(this PickupItem_Networked_Channeling __self) => _Awake757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_PickupItem_Networked_SeparateModel
	{

		private static readonly System.Lazy<FieldAccessor<PickupItem_Networked_SeparateModel, UnityEngine.GameObject>> _separateModel =
				new System.Lazy<FieldAccessor<PickupItem_Networked_SeparateModel, UnityEngine.GameObject>>(() => FieldAccessor<PickupItem_Networked_SeparateModel, UnityEngine.GameObject>.Create("separateModel"));

		public static UnityEngine.GameObject GetSeparateModel(this PickupItem_Networked_SeparateModel __self) => _separateModel.Value.GetValue(__self);
		public static void SetSeparateModel(this PickupItem_Networked_SeparateModel __self, UnityEngine.GameObject value) => _separateModel.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_Pickup_Specific_Blueprint
	{

		private static readonly System.Lazy<FieldAccessor<Pickup_Specific_Blueprint, float>> _requiredTimePlayed =
				new System.Lazy<FieldAccessor<Pickup_Specific_Blueprint, float>>(() => FieldAccessor<Pickup_Specific_Blueprint, float>.Create("requiredTimePlayed"));
		private static readonly System.Lazy<FieldAccessor<Pickup_Specific_Blueprint, RandomDropper>> _blueprintDropper =
				new System.Lazy<FieldAccessor<Pickup_Specific_Blueprint, RandomDropper>>(() => FieldAccessor<Pickup_Specific_Blueprint, RandomDropper>.Create("blueprintDropper"));

		public static float GetRequiredTimePlayed(this Pickup_Specific_Blueprint __self) => _requiredTimePlayed.Value.GetValue(__self);
		public static void SetRequiredTimePlayed(this Pickup_Specific_Blueprint __self, float value) => _requiredTimePlayed.Value.SetValue(__self, value);
		public static RandomDropper GetBlueprintDropper(this Pickup_Specific_Blueprint __self) => _blueprintDropper.Value.GetValue(__self);
		public static void SetBlueprintDropper(this Pickup_Specific_Blueprint __self, RandomDropper value) => _blueprintDropper.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_Pickup_Specific_CookingTableRecipe
	{

		private static readonly System.Lazy<FieldAccessor<Pickup_Specific_CookingTableRecipe, RandomDropper[]>> _droppers =
				new System.Lazy<FieldAccessor<Pickup_Specific_CookingTableRecipe, RandomDropper[]>>(() => FieldAccessor<Pickup_Specific_CookingTableRecipe, RandomDropper[]>.Create("droppers"));

		public static RandomDropper[] GetDroppers(this Pickup_Specific_CookingTableRecipe __self) => _droppers.Value.GetValue(__self);
		public static void SetDroppers(this Pickup_Specific_CookingTableRecipe __self, RandomDropper[] value) => _droppers.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Pickup_Specific_CookingTableRecipe>> _TryAddingRecipeLoot2395687745 =
				new System.Lazy<MethodAccessor<Pickup_Specific_CookingTableRecipe>>(() => MethodAccessor<Pickup_Specific_CookingTableRecipe>.Create("TryAddingRecipeLoot", typeof(RandomDropper), typeof(PlayerInventory)));

		public static void TryAddingRecipeLoot(this Pickup_Specific_CookingTableRecipe __self, RandomDropper dropper, PlayerInventory inventory) => _TryAddingRecipeLoot2395687745.Value.Invoke(__self, dropper, inventory);

	}

	public static class PrivateAccessor_Pickup_Specific_MysteryPackage
	{

		private static readonly System.Lazy<FieldAccessor<Pickup_Specific_MysteryPackage, float>> _requiredTimePlayed =
				new System.Lazy<FieldAccessor<Pickup_Specific_MysteryPackage, float>>(() => FieldAccessor<Pickup_Specific_MysteryPackage, float>.Create("requiredTimePlayed"));
		private static readonly System.Lazy<FieldAccessor<Pickup_Specific_MysteryPackage, Item_Base>> _mysteryBoxItem =
				new System.Lazy<FieldAccessor<Pickup_Specific_MysteryPackage, Item_Base>>(() => FieldAccessor<Pickup_Specific_MysteryPackage, Item_Base>.Create("mysteryBoxItem"));
		private static readonly System.Lazy<FieldAccessor<Pickup_Specific_MysteryPackage, SO_MysteryPackageLoot>> _mysteryLoot =
				new System.Lazy<FieldAccessor<Pickup_Specific_MysteryPackage, SO_MysteryPackageLoot>>(() => FieldAccessor<Pickup_Specific_MysteryPackage, SO_MysteryPackageLoot>.Create("mysteryLoot"));
		private static readonly System.Lazy<FieldAccessor<Pickup_Specific_MysteryPackage, float>> _mysteryLootDropChance =
				new System.Lazy<FieldAccessor<Pickup_Specific_MysteryPackage, float>>(() => FieldAccessor<Pickup_Specific_MysteryPackage, float>.Create("mysteryLootDropChance"));

		public static float GetRequiredTimePlayed(this Pickup_Specific_MysteryPackage __self) => _requiredTimePlayed.Value.GetValue(__self);
		public static void SetRequiredTimePlayed(this Pickup_Specific_MysteryPackage __self, float value) => _requiredTimePlayed.Value.SetValue(__self, value);
		public static Item_Base GetMysteryBoxItem(this Pickup_Specific_MysteryPackage __self) => _mysteryBoxItem.Value.GetValue(__self);
		public static void SetMysteryBoxItem(this Pickup_Specific_MysteryPackage __self, Item_Base value) => _mysteryBoxItem.Value.SetValue(__self, value);
		public static SO_MysteryPackageLoot GetMysteryLoot(this Pickup_Specific_MysteryPackage __self) => _mysteryLoot.Value.GetValue(__self);
		public static void SetMysteryLoot(this Pickup_Specific_MysteryPackage __self, SO_MysteryPackageLoot value) => _mysteryLoot.Value.SetValue(__self, value);
		public static float GetMysteryLootDropChance(this Pickup_Specific_MysteryPackage __self) => _mysteryLootDropChance.Value.GetValue(__self);
		public static void SetMysteryLootDropChance(this Pickup_Specific_MysteryPackage __self, float value) => _mysteryLootDropChance.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_ResourceCollector
	{

		private static readonly System.Lazy<FieldAccessor<ResourceCollector, float>> _toolUseRange =
				new System.Lazy<FieldAccessor<ResourceCollector, float>>(() => FieldAccessor<ResourceCollector, float>.Create("toolUseRange"));
		private static readonly System.Lazy<FieldAccessor<ResourceCollector, ResourceRegenerative>> _targetResource =
				new System.Lazy<FieldAccessor<ResourceCollector, ResourceRegenerative>>(() => FieldAccessor<ResourceCollector, ResourceRegenerative>.Create("targetResource"));

		public static float GetToolUseRange(this ResourceCollector __self) => _toolUseRange.Value.GetValue(__self);
		public static void SetToolUseRange(this ResourceCollector __self, float value) => _toolUseRange.Value.SetValue(__self, value);
		public static ResourceRegenerative GetTargetResource(this ResourceCollector __self) => _targetResource.Value.GetValue(__self);
		public static void SetTargetResource(this ResourceCollector __self, ResourceRegenerative value) => _targetResource.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<ResourceCollector>> _Start757602046 =
				new System.Lazy<MethodAccessor<ResourceCollector>>(() => MethodAccessor<ResourceCollector>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<ResourceCollector>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<ResourceCollector>>(() => MethodAccessor<ResourceCollector>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<ResourceCollector>> _Update757602046 =
				new System.Lazy<MethodAccessor<ResourceCollector>>(() => MethodAccessor<ResourceCollector>.Create("Update"));

		public static void Start(this ResourceCollector __self) => _Start757602046.Value.Invoke(__self);
		public static void OnDestroy(this ResourceCollector __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static bool Update(this ResourceCollector __self) => (bool)_Update757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_ResourceCollector_Bucket
	{

		private static readonly System.Lazy<FieldAccessor<ResourceCollector_Bucket, string>> _eventRef_gatherMilk =
				new System.Lazy<FieldAccessor<ResourceCollector_Bucket, string>>(() => FieldAccessor<ResourceCollector_Bucket, string>.Create("eventRef_gatherMilk"));

		public static string GetEventRef_gatherMilk(this ResourceCollector_Bucket __self) => _eventRef_gatherMilk.Value.GetValue(__self);
		public static void SetEventRef_gatherMilk(this ResourceCollector_Bucket __self, string value) => _eventRef_gatherMilk.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_ResourceCollector_Shear
	{

		private static readonly System.Lazy<FieldAccessor<ResourceCollector_Shear, UnityEngine.Animator>> _shearAnimator =
				new System.Lazy<FieldAccessor<ResourceCollector_Shear, UnityEngine.Animator>>(() => FieldAccessor<ResourceCollector_Shear, UnityEngine.Animator>.Create("shearAnimator"));
		private static readonly System.Lazy<FieldAccessor<ResourceCollector_Shear, string>> _eventRef_shearUse =
				new System.Lazy<FieldAccessor<ResourceCollector_Shear, string>>(() => FieldAccessor<ResourceCollector_Shear, string>.Create("eventRef_shearUse"));

		public static UnityEngine.Animator GetShearAnimator(this ResourceCollector_Shear __self) => _shearAnimator.Value.GetValue(__self);
		public static void SetShearAnimator(this ResourceCollector_Shear __self, UnityEngine.Animator value) => _shearAnimator.Value.SetValue(__self, value);
		public static string GetEventRef_shearUse(this ResourceCollector_Shear __self) => _eventRef_shearUse.Value.GetValue(__self);
		public static void SetEventRef_shearUse(this ResourceCollector_Shear __self, string value) => _eventRef_shearUse.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<ResourceCollector_Shear>> _Start757602046 =
				new System.Lazy<MethodAccessor<ResourceCollector_Shear>>(() => MethodAccessor<ResourceCollector_Shear>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<ResourceCollector_Shear>> _Update757602046 =
				new System.Lazy<MethodAccessor<ResourceCollector_Shear>>(() => MethodAccessor<ResourceCollector_Shear>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<ResourceCollector_Shear>> _OnNetworkProperties3462541703 =
				new System.Lazy<MethodAccessor<ResourceCollector_Shear>>(() => MethodAccessor<ResourceCollector_Shear>.Create("OnNetworkProperties", typeof(Message_Player_Update)));
		private static readonly System.Lazy<MethodAccessor<ResourceCollector_Shear>> _OnToolDeSelect757602046 =
				new System.Lazy<MethodAccessor<ResourceCollector_Shear>>(() => MethodAccessor<ResourceCollector_Shear>.Create("OnToolDeSelect"));

		public static void Start(this ResourceCollector_Shear __self) => _Start757602046.Value.Invoke(__self);
		public static bool Update(this ResourceCollector_Shear __self) => (bool)_Update757602046.Value.Invoke(__self);
		public static void OnNetworkProperties(this ResourceCollector_Shear __self, Message_Player_Update msg) => _OnNetworkProperties3462541703.Value.Invoke(__self, msg);
		public static void OnToolDeSelect(this ResourceCollector_Shear __self) => _OnToolDeSelect757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_ResourceRegenerative
	{

		private static readonly System.Lazy<FieldAccessor<ResourceRegenerative, bool>> __isReady =
				new System.Lazy<FieldAccessor<ResourceRegenerative, bool>>(() => FieldAccessor<ResourceRegenerative, bool>.Create("_isReady"));
		private static readonly System.Lazy<FieldAccessor<ResourceRegenerative, float>> _regenCount =
				new System.Lazy<FieldAccessor<ResourceRegenerative, float>>(() => FieldAccessor<ResourceRegenerative, float>.Create("regenCount"));
		private static readonly System.Lazy<FieldAccessor<ResourceRegenerative, Network_Player>> _localPlayer =
				new System.Lazy<FieldAccessor<ResourceRegenerative, Network_Player>>(() => FieldAccessor<ResourceRegenerative, Network_Player>.Create("localPlayer"));

		public static bool Get_isReady(this ResourceRegenerative __self) => __isReady.Value.GetValue(__self);
		public static void Set_isReady(this ResourceRegenerative __self, bool value) => __isReady.Value.SetValue(__self, value);
		public static float GetRegenCount(this ResourceRegenerative __self) => _regenCount.Value.GetValue(__self);
		public static void SetRegenCount(this ResourceRegenerative __self, float value) => _regenCount.Value.SetValue(__self, value);
		public static Network_Player GetLocalPlayer(this ResourceRegenerative __self) => _localPlayer.Value.GetValue(__self);
		public static void SetLocalPlayer(this ResourceRegenerative __self, Network_Player value) => _localPlayer.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<ResourceRegenerative>> _RegenResource757602046 =
				new System.Lazy<MethodAccessor<ResourceRegenerative>>(() => MethodAccessor<ResourceRegenerative>.Create("RegenResource"));
		private static readonly System.Lazy<MethodAccessor<ResourceRegenerative>> _AddRegen757602046 =
				new System.Lazy<MethodAccessor<ResourceRegenerative>>(() => MethodAccessor<ResourceRegenerative>.Create("AddRegen"));
		private static readonly System.Lazy<MethodAccessor<ResourceRegenerative>> _Start757602046 =
				new System.Lazy<MethodAccessor<ResourceRegenerative>>(() => MethodAccessor<ResourceRegenerative>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<ResourceRegenerative>> _Awake757602046 =
				new System.Lazy<MethodAccessor<ResourceRegenerative>>(() => MethodAccessor<ResourceRegenerative>.Create("Awake"));

		public static void RegenResource(this ResourceRegenerative __self) => _RegenResource757602046.Value.Invoke(__self);
		public static void AddRegen(this ResourceRegenerative __self) => _AddRegen757602046.Value.Invoke(__self);
		public static void Start(this ResourceRegenerative __self) => _Start757602046.Value.Invoke(__self);
		public static void Awake(this ResourceRegenerative __self) => _Awake757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_YieldHandler
	{

		private static readonly System.Lazy<FieldAccessor<YieldHandler, System.Collections.Generic.List<Cost>>> _yield =
				new System.Lazy<FieldAccessor<YieldHandler, System.Collections.Generic.List<Cost>>>(() => FieldAccessor<YieldHandler, System.Collections.Generic.List<Cost>>.Create("yield"));

		public static System.Collections.Generic.List<Cost> GetYield(this YieldHandler __self) => _yield.Value.GetValue(__self);
		public static void SetYield(this YieldHandler __self, System.Collections.Generic.List<Cost> value) => _yield.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<YieldHandler>> _Awake757602046 =
				new System.Lazy<MethodAccessor<YieldHandler>>(() => MethodAccessor<YieldHandler>.Create("Awake"));

		public static void Awake(this YieldHandler __self) => _Awake757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_CameraBob
	{

		private static readonly System.Lazy<FieldAccessor<CameraBob, float>> _timer =
				new System.Lazy<FieldAccessor<CameraBob, float>>(() => FieldAccessor<CameraBob, float>.Create("timer"));

		public static float GetTimer(this CameraBob __self) => _timer.Value.GetValue(__self);
		public static void SetTimer(this CameraBob __self, float value) => _timer.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<CameraBob>> _Update757602046 =
				new System.Lazy<MethodAccessor<CameraBob>>(() => MethodAccessor<CameraBob>.Create("Update"));

		public static void Update(this CameraBob __self) => _Update757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_CharacterModelModifications
	{

		private static readonly System.Lazy<FieldAccessor<CharacterModelModifications, UnityEngine.Avatar>> _avatar =
				new System.Lazy<FieldAccessor<CharacterModelModifications, UnityEngine.Avatar>>(() => FieldAccessor<CharacterModelModifications, UnityEngine.Avatar>.Create("avatar"));
		private static readonly System.Lazy<FieldAccessor<CharacterModelModifications, UnityEngine.GameObject>> _fullBodyMeshHazmat =
				new System.Lazy<FieldAccessor<CharacterModelModifications, UnityEngine.GameObject>>(() => FieldAccessor<CharacterModelModifications, UnityEngine.GameObject>.Create("fullBodyMeshHazmat"));
		private static readonly System.Lazy<FieldAccessor<CharacterModelModifications, UnityEngine.SkinnedMeshRenderer>> _armMesh =
				new System.Lazy<FieldAccessor<CharacterModelModifications, UnityEngine.SkinnedMeshRenderer>>(() => FieldAccessor<CharacterModelModifications, UnityEngine.SkinnedMeshRenderer>.Create("armMesh"));
		private static readonly System.Lazy<FieldAccessor<CharacterModelModifications, UnityEngine.GameObject>> _armMeshHazmat =
				new System.Lazy<FieldAccessor<CharacterModelModifications, UnityEngine.GameObject>>(() => FieldAccessor<CharacterModelModifications, UnityEngine.GameObject>.Create("armMeshHazmat"));
		private static readonly System.Lazy<FieldAccessor<CharacterModelModifications, HairStyle>> _currentHairStyle =
				new System.Lazy<FieldAccessor<CharacterModelModifications, HairStyle>>(() => FieldAccessor<CharacterModelModifications, HairStyle>.Create("currentHairStyle"));
		private static readonly System.Lazy<FieldAccessor<CharacterModelModifications, FOVStyle>> _currentFOVStyle =
				new System.Lazy<FieldAccessor<CharacterModelModifications, FOVStyle>>(() => FieldAccessor<CharacterModelModifications, FOVStyle>.Create("currentFOVStyle"));
		private static readonly System.Lazy<FieldAccessor<CharacterModelModifications, UnityEngine.Vector3>> _originalSkeletonPos =
				new System.Lazy<FieldAccessor<CharacterModelModifications, UnityEngine.Vector3>>(() => FieldAccessor<CharacterModelModifications, UnityEngine.Vector3>.Create("originalSkeletonPos"));
		private static readonly System.Lazy<FieldAccessor<CharacterModelModifications, UnityEngine.Vector3>> _originalCameraHolderPos =
				new System.Lazy<FieldAccessor<CharacterModelModifications, UnityEngine.Vector3>>(() => FieldAccessor<CharacterModelModifications, UnityEngine.Vector3>.Create("originalCameraHolderPos"));
		private static readonly System.Lazy<FieldAccessor<CharacterModelModifications, Network_Player>> _playerNetwork =
				new System.Lazy<FieldAccessor<CharacterModelModifications, Network_Player>>(() => FieldAccessor<CharacterModelModifications, Network_Player>.Create("playerNetwork"));
		private static readonly System.Lazy<FieldAccessor<CharacterModelModifications, Settings>> _settings =
				new System.Lazy<FieldAccessor<CharacterModelModifications, Settings>>(() => FieldAccessor<CharacterModelModifications, Settings>.Create("settings"));

		public static UnityEngine.Avatar GetAvatar(this CharacterModelModifications __self) => _avatar.Value.GetValue(__self);
		public static void SetAvatar(this CharacterModelModifications __self, UnityEngine.Avatar value) => _avatar.Value.SetValue(__self, value);
		public static UnityEngine.GameObject GetFullBodyMeshHazmat(this CharacterModelModifications __self) => _fullBodyMeshHazmat.Value.GetValue(__self);
		public static void SetFullBodyMeshHazmat(this CharacterModelModifications __self, UnityEngine.GameObject value) => _fullBodyMeshHazmat.Value.SetValue(__self, value);
		public static UnityEngine.SkinnedMeshRenderer GetArmMesh(this CharacterModelModifications __self) => _armMesh.Value.GetValue(__self);
		public static void SetArmMesh(this CharacterModelModifications __self, UnityEngine.SkinnedMeshRenderer value) => _armMesh.Value.SetValue(__self, value);
		public static UnityEngine.GameObject GetArmMeshHazmat(this CharacterModelModifications __self) => _armMeshHazmat.Value.GetValue(__self);
		public static void SetArmMeshHazmat(this CharacterModelModifications __self, UnityEngine.GameObject value) => _armMeshHazmat.Value.SetValue(__self, value);
		public static HairStyle GetCurrentHairStyle(this CharacterModelModifications __self) => _currentHairStyle.Value.GetValue(__self);
		public static void SetCurrentHairStyle(this CharacterModelModifications __self, HairStyle value) => _currentHairStyle.Value.SetValue(__self, value);
		public static FOVStyle GetCurrentFOVStyle(this CharacterModelModifications __self) => _currentFOVStyle.Value.GetValue(__self);
		public static void SetCurrentFOVStyle(this CharacterModelModifications __self, FOVStyle value) => _currentFOVStyle.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetOriginalSkeletonPos(this CharacterModelModifications __self) => _originalSkeletonPos.Value.GetValue(__self);
		public static void SetOriginalSkeletonPos(this CharacterModelModifications __self, UnityEngine.Vector3 value) => _originalSkeletonPos.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetOriginalCameraHolderPos(this CharacterModelModifications __self) => _originalCameraHolderPos.Value.GetValue(__self);
		public static void SetOriginalCameraHolderPos(this CharacterModelModifications __self, UnityEngine.Vector3 value) => _originalCameraHolderPos.Value.SetValue(__self, value);
		public static Network_Player GetPlayerNetwork(this CharacterModelModifications __self) => _playerNetwork.Value.GetValue(__self);
		public static void SetPlayerNetwork(this CharacterModelModifications __self, Network_Player value) => _playerNetwork.Value.SetValue(__self, value);
		public static Settings GetSettings(this CharacterModelModifications __self) => _settings.Value.GetValue(__self);
		public static void SetSettings(this CharacterModelModifications __self, Settings value) => _settings.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<CharacterModelModifications>> _CopyBodyMaterialToArm757602046 =
				new System.Lazy<MethodAccessor<CharacterModelModifications>>(() => MethodAccessor<CharacterModelModifications>.Create("CopyBodyMaterialToArm"));
		private static readonly System.Lazy<MethodAccessor<CharacterModelModifications>> _Start757602046 =
				new System.Lazy<MethodAccessor<CharacterModelModifications>>(() => MethodAccessor<CharacterModelModifications>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<CharacterModelModifications>> _Update757602046 =
				new System.Lazy<MethodAccessor<CharacterModelModifications>>(() => MethodAccessor<CharacterModelModifications>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<CharacterModelModifications>> _ThirdPersonStateChange3450040886 =
				new System.Lazy<MethodAccessor<CharacterModelModifications>>(() => MethodAccessor<CharacterModelModifications>.Create("ThirdPersonStateChange", typeof(bool)));

		public static void CopyBodyMaterialToArm(this CharacterModelModifications __self) => _CopyBodyMaterialToArm757602046.Value.Invoke(__self);
		public static void Start(this CharacterModelModifications __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this CharacterModelModifications __self) => _Update757602046.Value.Invoke(__self);
		public static void ThirdPersonStateChange(this CharacterModelModifications __self, bool newThirdPersonState) => _ThirdPersonStateChange3450040886.Value.Invoke(__self, newThirdPersonState);

	}

	public static class PrivateAccessor_EnvironmentLightAffector
	{

		private static readonly System.Lazy<FieldAccessor<EnvironmentLightAffector, UnityEngine.Coroutine>> _softLightRestore =
				new System.Lazy<FieldAccessor<EnvironmentLightAffector, UnityEngine.Coroutine>>(() => FieldAccessor<EnvironmentLightAffector, UnityEngine.Coroutine>.Create("softLightRestore"));
		private static readonly System.Lazy<FieldAccessor<EnvironmentLightAffector, UnityEngine.Coroutine>> _softTurnOff =
				new System.Lazy<FieldAccessor<EnvironmentLightAffector, UnityEngine.Coroutine>>(() => FieldAccessor<EnvironmentLightAffector, UnityEngine.Coroutine>.Create("softTurnOff"));
		private static readonly System.Lazy<FieldAccessor<EnvironmentLightAffector, float>> _intensityAmplitude =
				new System.Lazy<FieldAccessor<EnvironmentLightAffector, float>>(() => FieldAccessor<EnvironmentLightAffector, float>.Create("intensityAmplitude"));
		private static readonly System.Lazy<FieldAccessor<EnvironmentLightAffector, UnityEngine.MeshRenderer>> _lightCone =
				new System.Lazy<FieldAccessor<EnvironmentLightAffector, UnityEngine.MeshRenderer>>(() => FieldAccessor<EnvironmentLightAffector, UnityEngine.MeshRenderer>.Create("lightCone"));
		private static readonly System.Lazy<FieldAccessor<EnvironmentLightAffector, bool>> _playAtStart =
				new System.Lazy<FieldAccessor<EnvironmentLightAffector, bool>>(() => FieldAccessor<EnvironmentLightAffector, bool>.Create("playAtStart"));
		private static readonly System.Lazy<FieldAccessor<EnvironmentLightAffector, bool>> _playOnEnable =
				new System.Lazy<FieldAccessor<EnvironmentLightAffector, bool>>(() => FieldAccessor<EnvironmentLightAffector, bool>.Create("playOnEnable"));
		private static readonly System.Lazy<FieldAccessor<EnvironmentLightAffector, EnvironmentLightAffector.LightAffectorData>> _currentPlaying =
				new System.Lazy<FieldAccessor<EnvironmentLightAffector, EnvironmentLightAffector.LightAffectorData>>(() => FieldAccessor<EnvironmentLightAffector, EnvironmentLightAffector.LightAffectorData>.Create("currentPlaying"));
		private static readonly System.Lazy<FieldAccessor<EnvironmentLightAffector, Network_Player>> _localPlayer =
				new System.Lazy<FieldAccessor<EnvironmentLightAffector, Network_Player>>(() => FieldAccessor<EnvironmentLightAffector, Network_Player>.Create("localPlayer"));

		public static UnityEngine.Coroutine GetSoftLightRestore(this EnvironmentLightAffector __self) => _softLightRestore.Value.GetValue(__self);
		public static void SetSoftLightRestore(this EnvironmentLightAffector __self, UnityEngine.Coroutine value) => _softLightRestore.Value.SetValue(__self, value);
		public static UnityEngine.Coroutine GetSoftTurnOff(this EnvironmentLightAffector __self) => _softTurnOff.Value.GetValue(__self);
		public static void SetSoftTurnOff(this EnvironmentLightAffector __self, UnityEngine.Coroutine value) => _softTurnOff.Value.SetValue(__self, value);
		public static float GetIntensityAmplitude(this EnvironmentLightAffector __self) => _intensityAmplitude.Value.GetValue(__self);
		public static void SetIntensityAmplitude(this EnvironmentLightAffector __self, float value) => _intensityAmplitude.Value.SetValue(__self, value);
		public static UnityEngine.MeshRenderer GetLightCone(this EnvironmentLightAffector __self) => _lightCone.Value.GetValue(__self);
		public static void SetLightCone(this EnvironmentLightAffector __self, UnityEngine.MeshRenderer value) => _lightCone.Value.SetValue(__self, value);
		public static bool GetPlayAtStart(this EnvironmentLightAffector __self) => _playAtStart.Value.GetValue(__self);
		public static void SetPlayAtStart(this EnvironmentLightAffector __self, bool value) => _playAtStart.Value.SetValue(__self, value);
		public static bool GetPlayOnEnable(this EnvironmentLightAffector __self) => _playOnEnable.Value.GetValue(__self);
		public static void SetPlayOnEnable(this EnvironmentLightAffector __self, bool value) => _playOnEnable.Value.SetValue(__self, value);
		public static EnvironmentLightAffector.LightAffectorData GetCurrentPlaying(this EnvironmentLightAffector __self) => _currentPlaying.Value.GetValue(__self);
		public static void SetCurrentPlaying(this EnvironmentLightAffector __self, EnvironmentLightAffector.LightAffectorData value) => _currentPlaying.Value.SetValue(__self, value);
		public static Network_Player GetLocalPlayer(this EnvironmentLightAffector __self) => _localPlayer.Value.GetValue(__self);
		public static void SetLocalPlayer(this EnvironmentLightAffector __self, Network_Player value) => _localPlayer.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<EnvironmentLightAffector>> _OnEnable757602046 =
				new System.Lazy<MethodAccessor<EnvironmentLightAffector>>(() => MethodAccessor<EnvironmentLightAffector>.Create("OnEnable"));
		private static readonly System.Lazy<MethodAccessor<EnvironmentLightAffector>> _InvokeStop757602046 =
				new System.Lazy<MethodAccessor<EnvironmentLightAffector>>(() => MethodAccessor<EnvironmentLightAffector>.Create("InvokeStop"));

		public static void OnEnable(this EnvironmentLightAffector __self) => _OnEnable757602046.Value.Invoke(__self);
		public static void InvokeStop(this EnvironmentLightAffector __self) => _InvokeStop757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_ArmorHandler
	{

		private static readonly System.Lazy<FieldAccessor<ArmorHandler, int>> _totallArmorValue =
				new System.Lazy<FieldAccessor<ArmorHandler, int>>(() => FieldAccessor<ArmorHandler, int>.Create("totallArmorValue"));
		private static readonly System.Lazy<FieldAccessor<ArmorHandler, int>> _minimumArmor =
				new System.Lazy<FieldAccessor<ArmorHandler, int>>(() => FieldAccessor<ArmorHandler, int>.Create("minimumArmor"));
		private static readonly System.Lazy<FieldAccessor<ArmorHandler, int>> _maximumArmor =
				new System.Lazy<FieldAccessor<ArmorHandler, int>>(() => FieldAccessor<ArmorHandler, int>.Create("maximumArmor"));

		public static int GetTotallArmorValue(this ArmorHandler __self) => _totallArmorValue.Value.GetValue(__self);
		public static void SetTotallArmorValue(this ArmorHandler __self, int value) => _totallArmorValue.Value.SetValue(__self, value);
		public static int GetMinimumArmor(this ArmorHandler __self) => _minimumArmor.Value.GetValue(__self);
		public static void SetMinimumArmor(this ArmorHandler __self, int value) => _minimumArmor.Value.SetValue(__self, value);
		public static int GetMaximumArmor(this ArmorHandler __self) => _maximumArmor.Value.GetValue(__self);
		public static void SetMaximumArmor(this ArmorHandler __self, int value) => _maximumArmor.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_Equipment
	{

		private static readonly System.Lazy<FieldAccessor<Equipment, Slot_Equip>> _equippedSlot =
				new System.Lazy<FieldAccessor<Equipment, Slot_Equip>>(() => FieldAccessor<Equipment, Slot_Equip>.Create("equippedSlot"));
		private static readonly System.Lazy<FieldAccessor<Equipment, bool>> _equipped =
				new System.Lazy<FieldAccessor<Equipment, bool>>(() => FieldAccessor<Equipment, bool>.Create("equipped"));

		public static Slot_Equip GetEquippedSlot(this Equipment __self) => _equippedSlot.Value.GetValue(__self);
		public static void SetEquippedSlot(this Equipment __self, Slot_Equip value) => _equippedSlot.Value.SetValue(__self, value);
		public static bool GetEquipped(this Equipment __self) => _equipped.Value.GetValue(__self);
		public static void SetEquipped(this Equipment __self, bool value) => _equipped.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Equipment>> _Awake757602046 =
				new System.Lazy<MethodAccessor<Equipment>>(() => MethodAccessor<Equipment>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<Equipment>> _Start757602046 =
				new System.Lazy<MethodAccessor<Equipment>>(() => MethodAccessor<Equipment>.Create("Start"));

		public static void Awake(this Equipment __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this Equipment __self) => _Start757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Equipment_AirBottle
	{

		private static readonly System.Lazy<FieldAccessor<Equipment_AirBottle, float>> _oxygenLostMultiplier =
				new System.Lazy<FieldAccessor<Equipment_AirBottle, float>>(() => FieldAccessor<Equipment_AirBottle, float>.Create("oxygenLostMultiplier"));
		private static readonly System.Lazy<FieldAccessor<Equipment_AirBottle, float>> _timer =
				new System.Lazy<FieldAccessor<Equipment_AirBottle, float>>(() => FieldAccessor<Equipment_AirBottle, float>.Create("timer"));

		public static float GetOxygenLostMultiplier(this Equipment_AirBottle __self) => _oxygenLostMultiplier.Value.GetValue(__self);
		public static void SetOxygenLostMultiplier(this Equipment_AirBottle __self, float value) => _oxygenLostMultiplier.Value.SetValue(__self, value);
		public static float GetTimer(this Equipment_AirBottle __self) => _timer.Value.GetValue(__self);
		public static void SetTimer(this Equipment_AirBottle __self, float value) => _timer.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_Equipment_AnglerfishHead
	{

		private static readonly System.Lazy<FieldAccessor<Equipment_AnglerfishHead, UnityEngine.Light>> _lightSourceLight =
				new System.Lazy<FieldAccessor<Equipment_AnglerfishHead, UnityEngine.Light>>(() => FieldAccessor<Equipment_AnglerfishHead, UnityEngine.Light>.Create("lightSourceLight"));

		public static UnityEngine.Light GetLightSourceLight(this Equipment_AnglerfishHead __self) => _lightSourceLight.Value.GetValue(__self);
		public static void SetLightSourceLight(this Equipment_AnglerfishHead __self, UnityEngine.Light value) => _lightSourceLight.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Equipment_AnglerfishHead>> _Start757602046 =
				new System.Lazy<MethodAccessor<Equipment_AnglerfishHead>>(() => MethodAccessor<Equipment_AnglerfishHead>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<Equipment_AnglerfishHead>> _OnNoteBookToggle3450040886 =
				new System.Lazy<MethodAccessor<Equipment_AnglerfishHead>>(() => MethodAccessor<Equipment_AnglerfishHead>.Create("OnNoteBookToggle", typeof(bool)));

		public static void Start(this Equipment_AnglerfishHead __self) => _Start757602046.Value.Invoke(__self);
		public static void OnNoteBookToggle(this Equipment_AnglerfishHead __self, bool active) => _OnNoteBookToggle3450040886.Value.Invoke(__self, active);

	}

	public static class PrivateAccessor_Equipment_ArmorPiece
	{

		private static readonly System.Lazy<FieldAccessor<Equipment_ArmorPiece, ArmorHandler>> _armorHandler =
				new System.Lazy<FieldAccessor<Equipment_ArmorPiece, ArmorHandler>>(() => FieldAccessor<Equipment_ArmorPiece, ArmorHandler>.Create("armorHandler"));
		private static readonly System.Lazy<FieldAccessor<Equipment_ArmorPiece, Network_Entity>> _stats =
				new System.Lazy<FieldAccessor<Equipment_ArmorPiece, Network_Entity>>(() => FieldAccessor<Equipment_ArmorPiece, Network_Entity>.Create("stats"));

		public static ArmorHandler GetArmorHandler(this Equipment_ArmorPiece __self) => _armorHandler.Value.GetValue(__self);
		public static void SetArmorHandler(this Equipment_ArmorPiece __self, ArmorHandler value) => _armorHandler.Value.SetValue(__self, value);
		public static Network_Entity GetStats(this Equipment_ArmorPiece __self) => _stats.Value.GetValue(__self);
		public static void SetStats(this Equipment_ArmorPiece __self, Network_Entity value) => _stats.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Equipment_ArmorPiece>> _RemoveDurability2475015728 =
				new System.Lazy<MethodAccessor<Equipment_ArmorPiece>>(() => MethodAccessor<Equipment_ArmorPiece>.Create("RemoveDurability", typeof(float), typeof(UnityEngine.Vector3), typeof(UnityEngine.Vector3), typeof(EntityType)));

		public static void RemoveDurability(this Equipment_ArmorPiece __self, float damage, UnityEngine.Vector3 hitPoint, UnityEngine.Vector3 hitNormal, EntityType damageInflictorEntityType) => _RemoveDurability2475015728.Value.Invoke(__self, damage, hitPoint, hitNormal, damageInflictorEntityType);

	}

	public static class PrivateAccessor_Equipment_Flipper
	{

		private static readonly System.Lazy<FieldAccessor<Equipment_Flipper, float>> _swimSpeedMultiplier =
				new System.Lazy<FieldAccessor<Equipment_Flipper, float>>(() => FieldAccessor<Equipment_Flipper, float>.Create("swimSpeedMultiplier"));
		private static readonly System.Lazy<FieldAccessor<Equipment_Flipper, float>> _characterOffset =
				new System.Lazy<FieldAccessor<Equipment_Flipper, float>>(() => FieldAccessor<Equipment_Flipper, float>.Create("characterOffset"));
		private static readonly System.Lazy<FieldAccessor<Equipment_Flipper, float>> _timer =
				new System.Lazy<FieldAccessor<Equipment_Flipper, float>>(() => FieldAccessor<Equipment_Flipper, float>.Create("timer"));

		public static float GetSwimSpeedMultiplier(this Equipment_Flipper __self) => _swimSpeedMultiplier.Value.GetValue(__self);
		public static void SetSwimSpeedMultiplier(this Equipment_Flipper __self, float value) => _swimSpeedMultiplier.Value.SetValue(__self, value);
		public static float GetCharacterOffset(this Equipment_Flipper __self) => _characterOffset.Value.GetValue(__self);
		public static void SetCharacterOffset(this Equipment_Flipper __self, float value) => _characterOffset.Value.SetValue(__self, value);
		public static float GetTimer(this Equipment_Flipper __self) => _timer.Value.GetValue(__self);
		public static void SetTimer(this Equipment_Flipper __self, float value) => _timer.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_Equipment_Hat
	{

		private static readonly System.Lazy<FieldAccessor<Equipment_Hat, HairStyle>> _hairStyle =
				new System.Lazy<FieldAccessor<Equipment_Hat, HairStyle>>(() => FieldAccessor<Equipment_Hat, HairStyle>.Create("hairStyle"));

		public static HairStyle GetHairStyle(this Equipment_Hat __self) => _hairStyle.Value.GetValue(__self);
		public static void SetHairStyle(this Equipment_Hat __self, HairStyle value) => _hairStyle.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_Equipment_HeadLight
	{

		private static readonly System.Lazy<FieldAccessor<Equipment_HeadLight, uint>> _durabilityLostPerSecond =
				new System.Lazy<FieldAccessor<Equipment_HeadLight, uint>>(() => FieldAccessor<Equipment_HeadLight, uint>.Create("durabilityLostPerSecond"));
		private static readonly System.Lazy<FieldAccessor<Equipment_HeadLight, UnityEngine.Transform>> _lightParentRemote =
				new System.Lazy<FieldAccessor<Equipment_HeadLight, UnityEngine.Transform>>(() => FieldAccessor<Equipment_HeadLight, UnityEngine.Transform>.Create("lightParentRemote"));
		private static readonly System.Lazy<FieldAccessor<Equipment_HeadLight, UnityEngine.Light>> _lightSourceLight =
				new System.Lazy<FieldAccessor<Equipment_HeadLight, UnityEngine.Light>>(() => FieldAccessor<Equipment_HeadLight, UnityEngine.Light>.Create("lightSourceLight"));
		private static readonly System.Lazy<FieldAccessor<Equipment_HeadLight, float>> _timer =
				new System.Lazy<FieldAccessor<Equipment_HeadLight, float>>(() => FieldAccessor<Equipment_HeadLight, float>.Create("timer"));
		private static readonly System.Lazy<FieldAccessor<Equipment_HeadLight, bool>> _initialized =
				new System.Lazy<FieldAccessor<Equipment_HeadLight, bool>>(() => FieldAccessor<Equipment_HeadLight, bool>.Create("initialized"));

		public static uint GetDurabilityLostPerSecond(this Equipment_HeadLight __self) => _durabilityLostPerSecond.Value.GetValue(__self);
		public static void SetDurabilityLostPerSecond(this Equipment_HeadLight __self, uint value) => _durabilityLostPerSecond.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetLightParentRemote(this Equipment_HeadLight __self) => _lightParentRemote.Value.GetValue(__self);
		public static void SetLightParentRemote(this Equipment_HeadLight __self, UnityEngine.Transform value) => _lightParentRemote.Value.SetValue(__self, value);
		public static UnityEngine.Light GetLightSourceLight(this Equipment_HeadLight __self) => _lightSourceLight.Value.GetValue(__self);
		public static void SetLightSourceLight(this Equipment_HeadLight __self, UnityEngine.Light value) => _lightSourceLight.Value.SetValue(__self, value);
		public static float GetTimer(this Equipment_HeadLight __self) => _timer.Value.GetValue(__self);
		public static void SetTimer(this Equipment_HeadLight __self, float value) => _timer.Value.SetValue(__self, value);
		public static bool GetInitialized(this Equipment_HeadLight __self) => _initialized.Value.GetValue(__self);
		public static void SetInitialized(this Equipment_HeadLight __self, bool value) => _initialized.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Equipment_HeadLight>> _Start757602046 =
				new System.Lazy<MethodAccessor<Equipment_HeadLight>>(() => MethodAccessor<Equipment_HeadLight>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<Equipment_HeadLight>> _OnNoteBookToggle3450040886 =
				new System.Lazy<MethodAccessor<Equipment_HeadLight>>(() => MethodAccessor<Equipment_HeadLight>.Create("OnNoteBookToggle", typeof(bool)));

		public static void Start(this Equipment_HeadLight __self) => _Start757602046.Value.Invoke(__self);
		public static void OnNoteBookToggle(this Equipment_HeadLight __self, bool active) => _OnNoteBookToggle3450040886.Value.Invoke(__self, active);

	}

	public static class PrivateAccessor_Equipment_Helmet
	{

		private static readonly System.Lazy<FieldAccessor<Equipment_Helmet, HairStyle>> _hairStyle =
				new System.Lazy<FieldAccessor<Equipment_Helmet, HairStyle>>(() => FieldAccessor<Equipment_Helmet, HairStyle>.Create("hairStyle"));

		public static HairStyle GetHairStyle(this Equipment_Helmet __self) => _hairStyle.Value.GetValue(__self);
		public static void SetHairStyle(this Equipment_Helmet __self, HairStyle value) => _hairStyle.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_Equipment_Model
	{

		private static readonly System.Lazy<FieldAccessor<Equipment_Model, bool>> _getModelByName =
				new System.Lazy<FieldAccessor<Equipment_Model, bool>>(() => FieldAccessor<Equipment_Model, bool>.Create("getModelByName"));
		private static readonly System.Lazy<FieldAccessor<Equipment_Model, UnityEngine.Transform>> _localModel =
				new System.Lazy<FieldAccessor<Equipment_Model, UnityEngine.Transform>>(() => FieldAccessor<Equipment_Model, UnityEngine.Transform>.Create("localModel"));
		private static readonly System.Lazy<FieldAccessor<Equipment_Model, UnityEngine.Transform>> _remoteModel =
				new System.Lazy<FieldAccessor<Equipment_Model, UnityEngine.Transform>>(() => FieldAccessor<Equipment_Model, UnityEngine.Transform>.Create("remoteModel"));
		private static readonly System.Lazy<FieldAccessor<Equipment_Model, string>> _localModelName =
				new System.Lazy<FieldAccessor<Equipment_Model, string>>(() => FieldAccessor<Equipment_Model, string>.Create("localModelName"));
		private static readonly System.Lazy<FieldAccessor<Equipment_Model, string>> _remoteModelName =
				new System.Lazy<FieldAccessor<Equipment_Model, string>>(() => FieldAccessor<Equipment_Model, string>.Create("remoteModelName"));
		private static readonly System.Lazy<FieldAccessor<Equipment_Model, Network_Player>> _playerNetwork =
				new System.Lazy<FieldAccessor<Equipment_Model, Network_Player>>(() => FieldAccessor<Equipment_Model, Network_Player>.Create("playerNetwork"));

		public static bool GetGetModelByName(this Equipment_Model __self) => _getModelByName.Value.GetValue(__self);
		public static void SetGetModelByName(this Equipment_Model __self, bool value) => _getModelByName.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetLocalModel(this Equipment_Model __self) => _localModel.Value.GetValue(__self);
		public static void SetLocalModel(this Equipment_Model __self, UnityEngine.Transform value) => _localModel.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetRemoteModel(this Equipment_Model __self) => _remoteModel.Value.GetValue(__self);
		public static void SetRemoteModel(this Equipment_Model __self, UnityEngine.Transform value) => _remoteModel.Value.SetValue(__self, value);
		public static string GetLocalModelName(this Equipment_Model __self) => _localModelName.Value.GetValue(__self);
		public static void SetLocalModelName(this Equipment_Model __self, string value) => _localModelName.Value.SetValue(__self, value);
		public static string GetRemoteModelName(this Equipment_Model __self) => _remoteModelName.Value.GetValue(__self);
		public static void SetRemoteModelName(this Equipment_Model __self, string value) => _remoteModelName.Value.SetValue(__self, value);
		public static Network_Player GetPlayerNetwork(this Equipment_Model __self) => _playerNetwork.Value.GetValue(__self);
		public static void SetPlayerNetwork(this Equipment_Model __self, Network_Player value) => _playerNetwork.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Equipment_Model>> _Awake757602046 =
				new System.Lazy<MethodAccessor<Equipment_Model>>(() => MethodAccessor<Equipment_Model>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<Equipment_Model>> _Start757602046 =
				new System.Lazy<MethodAccessor<Equipment_Model>>(() => MethodAccessor<Equipment_Model>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<Equipment_Model>> _ThirdPersonStateChange3450040886 =
				new System.Lazy<MethodAccessor<Equipment_Model>>(() => MethodAccessor<Equipment_Model>.Create("ThirdPersonStateChange", typeof(bool)));

		public static void Awake(this Equipment_Model __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this Equipment_Model __self) => _Start757602046.Value.Invoke(__self);
		public static void ThirdPersonStateChange(this Equipment_Model __self, bool newThirdPersonState) => _ThirdPersonStateChange3450040886.Value.Invoke(__self, newThirdPersonState);

	}

	public static class PrivateAccessor_PlayerEquipment
	{

		private static readonly System.Lazy<FieldAccessor<PlayerEquipment, Network_Player>> _playerNetwork =
				new System.Lazy<FieldAccessor<PlayerEquipment, Network_Player>>(() => FieldAccessor<PlayerEquipment, Network_Player>.Create("playerNetwork"));
		private static readonly System.Lazy<FieldAccessor<PlayerEquipment, Equipment[]>> _equipment =
				new System.Lazy<FieldAccessor<PlayerEquipment, Equipment[]>>(() => FieldAccessor<PlayerEquipment, Equipment[]>.Create("equipment"));

		public static Network_Player GetPlayerNetwork(this PlayerEquipment __self) => _playerNetwork.Value.GetValue(__self);
		public static void SetPlayerNetwork(this PlayerEquipment __self, Network_Player value) => _playerNetwork.Value.SetValue(__self, value);
		public static Equipment[] GetEquipment(this PlayerEquipment __self) => _equipment.Value.GetValue(__self);
		public static void SetEquipment(this PlayerEquipment __self, Equipment[] value) => _equipment.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<PlayerEquipment>> _Awake757602046 =
				new System.Lazy<MethodAccessor<PlayerEquipment>>(() => MethodAccessor<PlayerEquipment>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<PlayerEquipment>> _Start757602046 =
				new System.Lazy<MethodAccessor<PlayerEquipment>>(() => MethodAccessor<PlayerEquipment>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<PlayerEquipment>> _Update757602046 =
				new System.Lazy<MethodAccessor<PlayerEquipment>>(() => MethodAccessor<PlayerEquipment>.Create("Update"));

		public static void Awake(this PlayerEquipment __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this PlayerEquipment __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this PlayerEquipment __self) => _Update757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_HazmatSuit
	{

		private static readonly System.Lazy<FieldAccessor<HazmatSuit, Network_Player>> _playerNetwork =
				new System.Lazy<FieldAccessor<HazmatSuit, Network_Player>>(() => FieldAccessor<HazmatSuit, Network_Player>.Create("playerNetwork"));
		private static readonly System.Lazy<FieldAccessor<HazmatSuit, float>> _wearableTime =
				new System.Lazy<FieldAccessor<HazmatSuit, float>>(() => FieldAccessor<HazmatSuit, float>.Create("wearableTime"));
		private static readonly System.Lazy<FieldAccessor<HazmatSuit, string>> _eventRef_equip =
				new System.Lazy<FieldAccessor<HazmatSuit, string>>(() => FieldAccessor<HazmatSuit, string>.Create("eventRef_equip"));
		private static readonly System.Lazy<FieldAccessor<HazmatSuit, string>> _eventRef_unEquip =
				new System.Lazy<FieldAccessor<HazmatSuit, string>>(() => FieldAccessor<HazmatSuit, string>.Create("eventRef_unEquip"));
		private static readonly System.Lazy<FieldAccessor<HazmatSuit, BuffDisplayObject>> _displayedBuff =
				new System.Lazy<FieldAccessor<HazmatSuit, BuffDisplayObject>>(() => FieldAccessor<HazmatSuit, BuffDisplayObject>.Create("displayedBuff"));

		public static Network_Player GetPlayerNetwork(this HazmatSuit __self) => _playerNetwork.Value.GetValue(__self);
		public static void SetPlayerNetwork(this HazmatSuit __self, Network_Player value) => _playerNetwork.Value.SetValue(__self, value);
		public static float GetWearableTime(this HazmatSuit __self) => _wearableTime.Value.GetValue(__self);
		public static void SetWearableTime(this HazmatSuit __self, float value) => _wearableTime.Value.SetValue(__self, value);
		public static string GetEventRef_equip(this HazmatSuit __self) => _eventRef_equip.Value.GetValue(__self);
		public static void SetEventRef_equip(this HazmatSuit __self, string value) => _eventRef_equip.Value.SetValue(__self, value);
		public static string GetEventRef_unEquip(this HazmatSuit __self) => _eventRef_unEquip.Value.GetValue(__self);
		public static void SetEventRef_unEquip(this HazmatSuit __self, string value) => _eventRef_unEquip.Value.SetValue(__self, value);
		public static BuffDisplayObject GetDisplayedBuff(this HazmatSuit __self) => _displayedBuff.Value.GetValue(__self);
		public static void SetDisplayedBuff(this HazmatSuit __self, BuffDisplayObject value) => _displayedBuff.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<HazmatSuit>> _Update757602046 =
				new System.Lazy<MethodAccessor<HazmatSuit>>(() => MethodAccessor<HazmatSuit>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<HazmatSuit>> _SetHazmatUIState3450040886 =
				new System.Lazy<MethodAccessor<HazmatSuit>>(() => MethodAccessor<HazmatSuit>.Create("SetHazmatUIState", typeof(bool)));

		public static void Update(this HazmatSuit __self) => _Update757602046.Value.Invoke(__self);
		public static void SetHazmatUIState(this HazmatSuit __self, bool state) => _SetHazmatUIState3450040886.Value.Invoke(__self, state);

	}

	public static class Private_HazmatSuit
	{

		private static readonly System.Lazy<StaticFieldAccessor<CanvasHelper>> _canvas =
				new System.Lazy<StaticFieldAccessor<CanvasHelper>>(() => StaticFieldAccessor<CanvasHelper>.Create(typeof(HazmatSuit), "canvas"));

		public static CanvasHelper GetCanvas() => _canvas.Value.GetValue();
		public static void SetCanvas(CanvasHelper value) => _canvas.Value.SetValue(value);

	}

	public static class PrivateAccessor_HeadTrackingIK
	{

		private static readonly System.Lazy<FieldAccessor<HeadTrackingIK, bool>> _startEnabled =
				new System.Lazy<FieldAccessor<HeadTrackingIK, bool>>(() => FieldAccessor<HeadTrackingIK, bool>.Create("startEnabled"));
		private static readonly System.Lazy<FieldAccessor<HeadTrackingIK, bool>> _startAllowSnapRotation =
				new System.Lazy<FieldAccessor<HeadTrackingIK, bool>>(() => FieldAccessor<HeadTrackingIK, bool>.Create("startAllowSnapRotation"));
		private static readonly System.Lazy<FieldAccessor<HeadTrackingIK, UnityEngine.Quaternion>> _startRotation =
				new System.Lazy<FieldAccessor<HeadTrackingIK, UnityEngine.Quaternion>>(() => FieldAccessor<HeadTrackingIK, UnityEngine.Quaternion>.Create("startRotation"));
		private static readonly System.Lazy<FieldAccessor<HeadTrackingIK, float>> _recoveredTrackTime =
				new System.Lazy<FieldAccessor<HeadTrackingIK, float>>(() => FieldAccessor<HeadTrackingIK, float>.Create("recoveredTrackTime"));
		private static readonly System.Lazy<FieldAccessor<HeadTrackingIK, UnityEngine.Vector3>> _lastTrackPosition =
				new System.Lazy<FieldAccessor<HeadTrackingIK, UnityEngine.Vector3>>(() => FieldAccessor<HeadTrackingIK, UnityEngine.Vector3>.Create("lastTrackPosition"));
		private static readonly System.Lazy<FieldAccessor<HeadTrackingIK, System.Nullable<UnityEngine.Vector3>>> _lastValidTrackPosition =
				new System.Lazy<FieldAccessor<HeadTrackingIK, System.Nullable<UnityEngine.Vector3>>>(() => FieldAccessor<HeadTrackingIK, System.Nullable<UnityEngine.Vector3>>.Create("lastValidTrackPosition"));
		private static readonly System.Lazy<FieldAccessor<HeadTrackingIK, System.Nullable<UnityEngine.Vector3>>> _startForwardLookPosition =
				new System.Lazy<FieldAccessor<HeadTrackingIK, System.Nullable<UnityEngine.Vector3>>>(() => FieldAccessor<HeadTrackingIK, System.Nullable<UnityEngine.Vector3>>.Create("startForwardLookPosition"));
		private static readonly System.Lazy<FieldAccessor<HeadTrackingIK, UnityEngine.Quaternion>> _fromRotation =
				new System.Lazy<FieldAccessor<HeadTrackingIK, UnityEngine.Quaternion>>(() => FieldAccessor<HeadTrackingIK, UnityEngine.Quaternion>.Create("fromRotation"));
		private static readonly System.Lazy<FieldAccessor<HeadTrackingIK, UnityEngine.Quaternion>> _toRotation =
				new System.Lazy<FieldAccessor<HeadTrackingIK, UnityEngine.Quaternion>>(() => FieldAccessor<HeadTrackingIK, UnityEngine.Quaternion>.Create("toRotation"));
		private static readonly System.Lazy<FieldAccessor<HeadTrackingIK, float>> _rotationTime =
				new System.Lazy<FieldAccessor<HeadTrackingIK, float>>(() => FieldAccessor<HeadTrackingIK, float>.Create("rotationTime"));
		private static readonly System.Lazy<FieldAccessor<HeadTrackingIK, bool>> _fadingIn =
				new System.Lazy<FieldAccessor<HeadTrackingIK, bool>>(() => FieldAccessor<HeadTrackingIK, bool>.Create("fadingIn"));
		private static readonly System.Lazy<FieldAccessor<HeadTrackingIK, float>> _fadeTargetTime =
				new System.Lazy<FieldAccessor<HeadTrackingIK, float>>(() => FieldAccessor<HeadTrackingIK, float>.Create("fadeTargetTime"));

		public static bool GetStartEnabled(this HeadTrackingIK __self) => _startEnabled.Value.GetValue(__self);
		public static void SetStartEnabled(this HeadTrackingIK __self, bool value) => _startEnabled.Value.SetValue(__self, value);
		public static bool GetStartAllowSnapRotation(this HeadTrackingIK __self) => _startAllowSnapRotation.Value.GetValue(__self);
		public static void SetStartAllowSnapRotation(this HeadTrackingIK __self, bool value) => _startAllowSnapRotation.Value.SetValue(__self, value);
		public static UnityEngine.Quaternion GetStartRotation(this HeadTrackingIK __self) => _startRotation.Value.GetValue(__self);
		public static void SetStartRotation(this HeadTrackingIK __self, UnityEngine.Quaternion value) => _startRotation.Value.SetValue(__self, value);
		public static float GetRecoveredTrackTime(this HeadTrackingIK __self) => _recoveredTrackTime.Value.GetValue(__self);
		public static void SetRecoveredTrackTime(this HeadTrackingIK __self, float value) => _recoveredTrackTime.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetLastTrackPosition(this HeadTrackingIK __self) => _lastTrackPosition.Value.GetValue(__self);
		public static void SetLastTrackPosition(this HeadTrackingIK __self, UnityEngine.Vector3 value) => _lastTrackPosition.Value.SetValue(__self, value);
		public static System.Nullable<UnityEngine.Vector3> GetLastValidTrackPosition(this HeadTrackingIK __self) => _lastValidTrackPosition.Value.GetValue(__self);
		public static void SetLastValidTrackPosition(this HeadTrackingIK __self, System.Nullable<UnityEngine.Vector3> value) => _lastValidTrackPosition.Value.SetValue(__self, value);
		public static System.Nullable<UnityEngine.Vector3> GetStartForwardLookPosition(this HeadTrackingIK __self) => _startForwardLookPosition.Value.GetValue(__self);
		public static void SetStartForwardLookPosition(this HeadTrackingIK __self, System.Nullable<UnityEngine.Vector3> value) => _startForwardLookPosition.Value.SetValue(__self, value);
		public static UnityEngine.Quaternion GetFromRotation(this HeadTrackingIK __self) => _fromRotation.Value.GetValue(__self);
		public static void SetFromRotation(this HeadTrackingIK __self, UnityEngine.Quaternion value) => _fromRotation.Value.SetValue(__self, value);
		public static UnityEngine.Quaternion GetToRotation(this HeadTrackingIK __self) => _toRotation.Value.GetValue(__self);
		public static void SetToRotation(this HeadTrackingIK __self, UnityEngine.Quaternion value) => _toRotation.Value.SetValue(__self, value);
		public static float GetRotationTime(this HeadTrackingIK __self) => _rotationTime.Value.GetValue(__self);
		public static void SetRotationTime(this HeadTrackingIK __self, float value) => _rotationTime.Value.SetValue(__self, value);
		public static bool GetFadingIn(this HeadTrackingIK __self) => _fadingIn.Value.GetValue(__self);
		public static void SetFadingIn(this HeadTrackingIK __self, bool value) => _fadingIn.Value.SetValue(__self, value);
		public static float GetFadeTargetTime(this HeadTrackingIK __self) => _fadeTargetTime.Value.GetValue(__self);
		public static void SetFadeTargetTime(this HeadTrackingIK __self, float value) => _fadeTargetTime.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<HeadTrackingIK>> _Start757602046 =
				new System.Lazy<MethodAccessor<HeadTrackingIK>>(() => MethodAccessor<HeadTrackingIK>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<HeadTrackingIK>> _LateUpdate757602046 =
				new System.Lazy<MethodAccessor<HeadTrackingIK>>(() => MethodAccessor<HeadTrackingIK>.Create("LateUpdate"));
		private static readonly System.Lazy<MethodAccessor<HeadTrackingIK>> _AdjustFinalPositionAfterMaxAngle3437001883 =
				new System.Lazy<MethodAccessor<HeadTrackingIK>>(() => MethodAccessor<HeadTrackingIK>.Create("AdjustFinalPositionAfterMaxAngle", typeof(UnityEngine.Transform)));
		private static readonly System.Lazy<MethodAccessor<HeadTrackingIK>> _IsAngleSolvable3437001883 =
				new System.Lazy<MethodAccessor<HeadTrackingIK>>(() => MethodAccessor<HeadTrackingIK>.Create("IsAngleSolvable", typeof(UnityEngine.Transform)));

		public static void Start(this HeadTrackingIK __self) => _Start757602046.Value.Invoke(__self);
		public static void LateUpdate(this HeadTrackingIK __self) => _LateUpdate757602046.Value.Invoke(__self);
		public static UnityEngine.Vector3 AdjustFinalPositionAfterMaxAngle(this HeadTrackingIK __self, UnityEngine.Transform target) => (UnityEngine.Vector3)_AdjustFinalPositionAfterMaxAngle3437001883.Value.Invoke(__self, target);
		public static bool IsAngleSolvable(this HeadTrackingIK __self, UnityEngine.Transform target) => (bool)_IsAngleSolvable3437001883.Value.Invoke(__self, target);

	}

	public static class Private_HeadTrackingIK
	{

		private static readonly System.Lazy<StaticFieldAccessor<float>> _SnapRotationDuration =
				new System.Lazy<StaticFieldAccessor<float>>(() => StaticFieldAccessor<float>.Create(typeof(HeadTrackingIK), "SnapRotationDuration"));
		private static readonly System.Lazy<StaticFieldAccessor<float>> _WeightFadeDuration =
				new System.Lazy<StaticFieldAccessor<float>>(() => StaticFieldAccessor<float>.Create(typeof(HeadTrackingIK), "WeightFadeDuration"));
		private static readonly System.Lazy<StaticFieldAccessor<float>> _BlendToValidDuration =
				new System.Lazy<StaticFieldAccessor<float>>(() => StaticFieldAccessor<float>.Create(typeof(HeadTrackingIK), "BlendToValidDuration"));
		private static readonly System.Lazy<StaticFieldAccessor<float>> _MinHeadOffset =
				new System.Lazy<StaticFieldAccessor<float>>(() => StaticFieldAccessor<float>.Create(typeof(HeadTrackingIK), "MinHeadOffset"));

		public static float GetSnapRotationDuration() => _SnapRotationDuration.Value.GetValue();
		public static void SetSnapRotationDuration(float value) => _SnapRotationDuration.Value.SetValue(value);
		public static float GetWeightFadeDuration() => _WeightFadeDuration.Value.GetValue();
		public static void SetWeightFadeDuration(float value) => _WeightFadeDuration.Value.SetValue(value);
		public static float GetBlendToValidDuration() => _BlendToValidDuration.Value.GetValue();
		public static void SetBlendToValidDuration(float value) => _BlendToValidDuration.Value.SetValue(value);
		public static float GetMinHeadOffset() => _MinHeadOffset.Value.GetValue();
		public static void SetMinHeadOffset(float value) => _MinHeadOffset.Value.SetValue(value);

		private static readonly System.Lazy<StaticMethodAccessor> _ProjectVectorOnPlane1662569814 =
				new System.Lazy<StaticMethodAccessor>(() => StaticMethodAccessor.Create(typeof(HeadTrackingIK), "ProjectVectorOnPlane", typeof(UnityEngine.Vector3), typeof(UnityEngine.Vector3)));

		public static UnityEngine.Vector3 ProjectVectorOnPlane(UnityEngine.Vector3 planeNormal, UnityEngine.Vector3 vector) => (UnityEngine.Vector3)_ProjectVectorOnPlane1662569814.Value.Invoke(planeNormal, vector);

	}

	public static class PrivateAccessor_JumpOutOfWaterChecker
	{

		private static readonly System.Lazy<MethodAccessor<JumpOutOfWaterChecker>> _OnTriggerStay3468606003 =
				new System.Lazy<MethodAccessor<JumpOutOfWaterChecker>>(() => MethodAccessor<JumpOutOfWaterChecker>.Create("OnTriggerStay", typeof(UnityEngine.Collider)));
		private static readonly System.Lazy<MethodAccessor<JumpOutOfWaterChecker>> _OnTriggerExit3468606003 =
				new System.Lazy<MethodAccessor<JumpOutOfWaterChecker>>(() => MethodAccessor<JumpOutOfWaterChecker>.Create("OnTriggerExit", typeof(UnityEngine.Collider)));

		public static void OnTriggerStay(this JumpOutOfWaterChecker __self, UnityEngine.Collider other) => _OnTriggerStay3468606003.Value.Invoke(__self, other);
		public static void OnTriggerExit(this JumpOutOfWaterChecker __self, UnityEngine.Collider other) => _OnTriggerExit3468606003.Value.Invoke(__self, other);

	}

	public static class PrivateAccessor_MouseLook
	{

		private static readonly System.Lazy<FieldAccessor<MouseLook, Settings>> _settings =
				new System.Lazy<FieldAccessor<MouseLook, Settings>>(() => FieldAccessor<MouseLook, Settings>.Create("settings"));
		private static readonly System.Lazy<FieldAccessor<MouseLook, float>> _targetRotX =
				new System.Lazy<FieldAccessor<MouseLook, float>>(() => FieldAccessor<MouseLook, float>.Create("targetRotX"));
		private static readonly System.Lazy<FieldAccessor<MouseLook, float>> _targetRotY =
				new System.Lazy<FieldAccessor<MouseLook, float>>(() => FieldAccessor<MouseLook, float>.Create("targetRotY"));
		private static readonly System.Lazy<FieldAccessor<MouseLook, bool>> _rotationLocked =
				new System.Lazy<FieldAccessor<MouseLook, bool>>(() => FieldAccessor<MouseLook, bool>.Create("rotationLocked"));
		private static readonly System.Lazy<FieldAccessor<MouseLook, UnityEngine.Vector3>> _lockedEulerRoation =
				new System.Lazy<FieldAccessor<MouseLook, UnityEngine.Vector3>>(() => FieldAccessor<MouseLook, UnityEngine.Vector3>.Create("lockedEulerRoation"));

		public static Settings GetSettings(this MouseLook __self) => _settings.Value.GetValue(__self);
		public static void SetSettings(this MouseLook __self, Settings value) => _settings.Value.SetValue(__self, value);
		public static float GetTargetRotX(this MouseLook __self) => _targetRotX.Value.GetValue(__self);
		public static void SetTargetRotX(this MouseLook __self, float value) => _targetRotX.Value.SetValue(__self, value);
		public static float GetTargetRotY(this MouseLook __self) => _targetRotY.Value.GetValue(__self);
		public static void SetTargetRotY(this MouseLook __self, float value) => _targetRotY.Value.SetValue(__self, value);
		public static bool GetRotationLocked(this MouseLook __self) => _rotationLocked.Value.GetValue(__self);
		public static void SetRotationLocked(this MouseLook __self, bool value) => _rotationLocked.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetLockedEulerRoation(this MouseLook __self) => _lockedEulerRoation.Value.GetValue(__self);
		public static void SetLockedEulerRoation(this MouseLook __self, UnityEngine.Vector3 value) => _lockedEulerRoation.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<MouseLook>> _Start757602046 =
				new System.Lazy<MethodAccessor<MouseLook>>(() => MethodAccessor<MouseLook>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<MouseLook>> _Update757602046 =
				new System.Lazy<MethodAccessor<MouseLook>>(() => MethodAccessor<MouseLook>.Create("Update"));

		public static void Start(this MouseLook __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this MouseLook __self) => _Update757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_PersonController
	{

		private static readonly System.Lazy<FieldAccessor<PersonController, UltimateWater.SubmersionState>> _submersionState =
				new System.Lazy<FieldAccessor<PersonController, UltimateWater.SubmersionState>>(() => FieldAccessor<PersonController, UltimateWater.SubmersionState>.Create("submersionState"));
		private static readonly System.Lazy<FieldAccessor<PersonController, float>> _minValidGroundAngle =
				new System.Lazy<FieldAccessor<PersonController, float>>(() => FieldAccessor<PersonController, float>.Create("minValidGroundAngle"));
		private static readonly System.Lazy<FieldAccessor<PersonController, float>> _groundVelocityModifier =
				new System.Lazy<FieldAccessor<PersonController, float>>(() => FieldAccessor<PersonController, float>.Create("groundVelocityModifier"));
		private static readonly System.Lazy<FieldAccessor<PersonController, float>> _waterVelocityModifier =
				new System.Lazy<FieldAccessor<PersonController, float>>(() => FieldAccessor<PersonController, float>.Create("waterVelocityModifier"));
		private static readonly System.Lazy<FieldAccessor<PersonController, float>> _currentGroundAngle =
				new System.Lazy<FieldAccessor<PersonController, float>>(() => FieldAccessor<PersonController, float>.Create("currentGroundAngle"));
		private static readonly System.Lazy<FieldAccessor<PersonController, UnityEngine.Vector3>> _groundAngle =
				new System.Lazy<FieldAccessor<PersonController, UnityEngine.Vector3>>(() => FieldAccessor<PersonController, UnityEngine.Vector3>.Create("groundAngle"));
		private static readonly System.Lazy<FieldAccessor<PersonController, UnityEngine.Vector3>> _groundPoint =
				new System.Lazy<FieldAccessor<PersonController, UnityEngine.Vector3>>(() => FieldAccessor<PersonController, UnityEngine.Vector3>.Create("groundPoint"));
		private static readonly System.Lazy<FieldAccessor<PersonController, float>> _jumpCooldown =
				new System.Lazy<FieldAccessor<PersonController, float>>(() => FieldAccessor<PersonController, float>.Create("jumpCooldown"));
		private static readonly System.Lazy<FieldAccessor<PersonController, float>> _coyoteJumpDuration =
				new System.Lazy<FieldAccessor<PersonController, float>>(() => FieldAccessor<PersonController, float>.Create("coyoteJumpDuration"));
		private static readonly System.Lazy<FieldAccessor<PersonController, float>> _crouchHeightCamera =
				new System.Lazy<FieldAccessor<PersonController, float>>(() => FieldAccessor<PersonController, float>.Create("crouchHeightCamera"));
		private static readonly System.Lazy<FieldAccessor<PersonController, float>> _crouchSpeed =
				new System.Lazy<FieldAccessor<PersonController, float>>(() => FieldAccessor<PersonController, float>.Create("crouchSpeed"));
		private static readonly System.Lazy<FieldAccessor<PersonController, float>> _crouchHeight =
				new System.Lazy<FieldAccessor<PersonController, float>>(() => FieldAccessor<PersonController, float>.Create("crouchHeight"));
		private static readonly System.Lazy<FieldAccessor<PersonController, bool>> _cheatSprinting =
				new System.Lazy<FieldAccessor<PersonController, bool>>(() => FieldAccessor<PersonController, bool>.Create("cheatSprinting"));
		private static readonly System.Lazy<FieldAccessor<PersonController, bool>> _isMovementFree =
				new System.Lazy<FieldAccessor<PersonController, bool>>(() => FieldAccessor<PersonController, bool>.Create("isMovementFree"));
		private static readonly System.Lazy<FieldAccessor<PersonController, string>> _eventRef_Jump =
				new System.Lazy<FieldAccessor<PersonController, string>>(() => FieldAccessor<PersonController, string>.Create("eventRef_Jump"));
		private static readonly System.Lazy<FieldAccessor<PersonController, string>> _eventRef_LandGround =
				new System.Lazy<FieldAccessor<PersonController, string>>(() => FieldAccessor<PersonController, string>.Create("eventRef_LandGround"));
		private static readonly System.Lazy<FieldAccessor<PersonController, string>> _eventRef_LandWater =
				new System.Lazy<FieldAccessor<PersonController, string>>(() => FieldAccessor<PersonController, string>.Create("eventRef_LandWater"));
		private static readonly System.Lazy<FieldAccessor<PersonController, FMODUnity.StudioEventEmitter>> _eventEmitter_footstep =
				new System.Lazy<FieldAccessor<PersonController, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<PersonController, FMODUnity.StudioEventEmitter>.Create("eventEmitter_footstep"));
		private static readonly System.Lazy<FieldAccessor<PersonController, FMODUnity.StudioEventEmitter>> _eventEmitter_swim =
				new System.Lazy<FieldAccessor<PersonController, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<PersonController, FMODUnity.StudioEventEmitter>.Create("eventEmitter_swim"));
		private static readonly System.Lazy<FieldAccessor<PersonController, FMODUnity.StudioEventEmitter>> _eventEmitter_fall3D =
				new System.Lazy<FieldAccessor<PersonController, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<PersonController, FMODUnity.StudioEventEmitter>.Create("eventEmitter_fall3D"));
		private static readonly System.Lazy<FieldAccessor<PersonController, FMODUnity.StudioEventEmitter>> _eventEmitter_fall2D =
				new System.Lazy<FieldAccessor<PersonController, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<PersonController, FMODUnity.StudioEventEmitter>.Create("eventEmitter_fall2D"));
		private static readonly System.Lazy<FieldAccessor<PersonController, FMOD.Studio.EventInstance>> _eventInstance_jump =
				new System.Lazy<FieldAccessor<PersonController, FMOD.Studio.EventInstance>>(() => FieldAccessor<PersonController, FMOD.Studio.EventInstance>.Create("eventInstance_jump"));
		private static readonly System.Lazy<FieldAccessor<PersonController, FMOD.Studio.EventInstance>> _eventInstance_land =
				new System.Lazy<FieldAccessor<PersonController, FMOD.Studio.EventInstance>>(() => FieldAccessor<PersonController, FMOD.Studio.EventInstance>.Create("eventInstance_land"));
		private static readonly System.Lazy<FieldAccessor<PersonController, string>> _defaultWalkSound =
				new System.Lazy<FieldAccessor<PersonController, string>>(() => FieldAccessor<PersonController, string>.Create("defaultWalkSound"));
		private static readonly System.Lazy<FieldAccessor<PersonController, float>> _stepDistance =
				new System.Lazy<FieldAccessor<PersonController, float>>(() => FieldAccessor<PersonController, float>.Create("stepDistance"));
		private static readonly System.Lazy<FieldAccessor<PersonController, float>> _swimStepDistance =
				new System.Lazy<FieldAccessor<PersonController, float>>(() => FieldAccessor<PersonController, float>.Create("swimStepDistance"));
		private static readonly System.Lazy<FieldAccessor<PersonController, float>> _fallSoundMaxValue =
				new System.Lazy<FieldAccessor<PersonController, float>>(() => FieldAccessor<PersonController, float>.Create("fallSoundMaxValue"));
		private static readonly System.Lazy<FieldAccessor<PersonController, UnityEngine.Vector3>> _lastPlayedFootstepPos =
				new System.Lazy<FieldAccessor<PersonController, UnityEngine.Vector3>>(() => FieldAccessor<PersonController, UnityEngine.Vector3>.Create("lastPlayedFootstepPos"));
		private static readonly System.Lazy<FieldAccessor<PersonController, float>> __currentFallDuration =
				new System.Lazy<FieldAccessor<PersonController, float>>(() => FieldAccessor<PersonController, float>.Create("_currentFallDuration"));
		private static readonly System.Lazy<FieldAccessor<PersonController, float>> _fallDamageMultiplier =
				new System.Lazy<FieldAccessor<PersonController, float>>(() => FieldAccessor<PersonController, float>.Create("fallDamageMultiplier"));
		private static readonly System.Lazy<FieldAccessor<PersonController, float>> _minimumFallDuration =
				new System.Lazy<FieldAccessor<PersonController, float>>(() => FieldAccessor<PersonController, float>.Create("minimumFallDuration"));
		private static readonly System.Lazy<FieldAccessor<PersonController, float>> _baseFallDamage =
				new System.Lazy<FieldAccessor<PersonController, float>>(() => FieldAccessor<PersonController, float>.Create("baseFallDamage"));
		private static readonly System.Lazy<FieldAccessor<PersonController, float>> _maxFallDamage =
				new System.Lazy<FieldAccessor<PersonController, float>>(() => FieldAccessor<PersonController, float>.Create("maxFallDamage"));
		private static readonly System.Lazy<FieldAccessor<PersonController, UltimateWater.WaterCamera>> _waterCamera =
				new System.Lazy<FieldAccessor<PersonController, UltimateWater.WaterCamera>>(() => FieldAccessor<PersonController, UltimateWater.WaterCamera>.Create("waterCamera"));
		private static readonly System.Lazy<FieldAccessor<PersonController, bool>> _recentlyJumped =
				new System.Lazy<FieldAccessor<PersonController, bool>>(() => FieldAccessor<PersonController, bool>.Create("recentlyJumped"));
		private static readonly System.Lazy<FieldAccessor<PersonController, float>> _resetVelocityOnGroundedTimer =
				new System.Lazy<FieldAccessor<PersonController, float>>(() => FieldAccessor<PersonController, float>.Create("resetVelocityOnGroundedTimer"));
		private static readonly System.Lazy<FieldAccessor<PersonController, UnityEngine.Transform>> _camTransform =
				new System.Lazy<FieldAccessor<PersonController, UnityEngine.Transform>>(() => FieldAccessor<PersonController, UnityEngine.Transform>.Create("camTransform"));
		private static readonly System.Lazy<FieldAccessor<PersonController, UnityEngine.Transform>> _lockedPivot =
				new System.Lazy<FieldAccessor<PersonController, UnityEngine.Transform>>(() => FieldAccessor<PersonController, UnityEngine.Transform>.Create("lockedPivot"));
		private static readonly System.Lazy<FieldAccessor<PersonController, UnityEngine.Vector3>> _moveDirection =
				new System.Lazy<FieldAccessor<PersonController, UnityEngine.Vector3>>(() => FieldAccessor<PersonController, UnityEngine.Vector3>.Create("moveDirection"));
		private static readonly System.Lazy<FieldAccessor<PersonController, UnityEngine.Vector3>> _originalPlayerPivotPosition =
				new System.Lazy<FieldAccessor<PersonController, UnityEngine.Vector3>>(() => FieldAccessor<PersonController, UnityEngine.Vector3>.Create("originalPlayerPivotPosition"));
		private static readonly System.Lazy<FieldAccessor<PersonController, bool>> _completelyStarted =
				new System.Lazy<FieldAccessor<PersonController, bool>>(() => FieldAccessor<PersonController, bool>.Create("completelyStarted"));
		private static readonly System.Lazy<FieldAccessor<PersonController, bool>> _networkPositionIsLocalLockedPivot =
				new System.Lazy<FieldAccessor<PersonController, bool>>(() => FieldAccessor<PersonController, bool>.Create("networkPositionIsLocalLockedPivot"));
		private static readonly System.Lazy<FieldAccessor<PersonController, UnityEngine.Vector3>> _networkPosition =
				new System.Lazy<FieldAccessor<PersonController, UnityEngine.Vector3>>(() => FieldAccessor<PersonController, UnityEngine.Vector3>.Create("networkPosition"));
		private static readonly System.Lazy<FieldAccessor<PersonController, float>> _networkRotationY =
				new System.Lazy<FieldAccessor<PersonController, float>>(() => FieldAccessor<PersonController, float>.Create("networkRotationY"));
		private static readonly System.Lazy<FieldAccessor<PersonController, float>> _networkRotationX =
				new System.Lazy<FieldAccessor<PersonController, float>>(() => FieldAccessor<PersonController, float>.Create("networkRotationX"));
		private static readonly System.Lazy<FieldAccessor<PersonController, Network_Player>> _playerNetwork =
				new System.Lazy<FieldAccessor<PersonController, Network_Player>>(() => FieldAccessor<PersonController, Network_Player>.Create("playerNetwork"));
		private static readonly System.Lazy<FieldAccessor<PersonController, UnityEngine.RaycastHit>> _groundRaycastHit =
				new System.Lazy<FieldAccessor<PersonController, UnityEngine.RaycastHit>>(() => FieldAccessor<PersonController, UnityEngine.RaycastHit>.Create("groundRaycastHit"));
		private static readonly System.Lazy<FieldAccessor<PersonController, bool>> _autoRun =
				new System.Lazy<FieldAccessor<PersonController, bool>>(() => FieldAccessor<PersonController, bool>.Create("autoRun"));
		private static readonly System.Lazy<FieldAccessor<PersonController, Settings>> _settings =
				new System.Lazy<FieldAccessor<PersonController, Settings>>(() => FieldAccessor<PersonController, Settings>.Create("settings"));
		private static readonly System.Lazy<FieldAccessor<PersonController, bool>> _runToggled =
				new System.Lazy<FieldAccessor<PersonController, bool>>(() => FieldAccessor<PersonController, bool>.Create("runToggled"));
		private static readonly System.Lazy<FieldAccessor<PersonController, bool>> _usedCoyoteJump =
				new System.Lazy<FieldAccessor<PersonController, bool>>(() => FieldAccessor<PersonController, bool>.Create("usedCoyoteJump"));
		private static readonly System.Lazy<FieldAccessor<PersonController, float>> _originalControllerColliderHeight =
				new System.Lazy<FieldAccessor<PersonController, float>>(() => FieldAccessor<PersonController, float>.Create("originalControllerColliderHeight"));
		private static readonly System.Lazy<FieldAccessor<PersonController, float>> _defaultCharacterGroundedFallSpeed =
				new System.Lazy<FieldAccessor<PersonController, float>>(() => FieldAccessor<PersonController, float>.Create("defaultCharacterGroundedFallSpeed"));

		public static UltimateWater.SubmersionState GetSubmersionState(this PersonController __self) => _submersionState.Value.GetValue(__self);
		public static void SetSubmersionState(this PersonController __self, UltimateWater.SubmersionState value) => _submersionState.Value.SetValue(__self, value);
		public static float GetMinValidGroundAngle(this PersonController __self) => _minValidGroundAngle.Value.GetValue(__self);
		public static void SetMinValidGroundAngle(this PersonController __self, float value) => _minValidGroundAngle.Value.SetValue(__self, value);
		public static float GetGroundVelocityModifier(this PersonController __self) => _groundVelocityModifier.Value.GetValue(__self);
		public static void SetGroundVelocityModifier(this PersonController __self, float value) => _groundVelocityModifier.Value.SetValue(__self, value);
		public static float GetWaterVelocityModifier(this PersonController __self) => _waterVelocityModifier.Value.GetValue(__self);
		public static void SetWaterVelocityModifier(this PersonController __self, float value) => _waterVelocityModifier.Value.SetValue(__self, value);
		public static float GetCurrentGroundAngle(this PersonController __self) => _currentGroundAngle.Value.GetValue(__self);
		public static void SetCurrentGroundAngle(this PersonController __self, float value) => _currentGroundAngle.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetGroundAngle(this PersonController __self) => _groundAngle.Value.GetValue(__self);
		public static void SetGroundAngle(this PersonController __self, UnityEngine.Vector3 value) => _groundAngle.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetGroundPoint(this PersonController __self) => _groundPoint.Value.GetValue(__self);
		public static void SetGroundPoint(this PersonController __self, UnityEngine.Vector3 value) => _groundPoint.Value.SetValue(__self, value);
		public static float GetJumpCooldown(this PersonController __self) => _jumpCooldown.Value.GetValue(__self);
		public static void SetJumpCooldown(this PersonController __self, float value) => _jumpCooldown.Value.SetValue(__self, value);
		public static float GetCoyoteJumpDuration(this PersonController __self) => _coyoteJumpDuration.Value.GetValue(__self);
		public static void SetCoyoteJumpDuration(this PersonController __self, float value) => _coyoteJumpDuration.Value.SetValue(__self, value);
		public static float GetCrouchHeightCamera(this PersonController __self) => _crouchHeightCamera.Value.GetValue(__self);
		public static void SetCrouchHeightCamera(this PersonController __self, float value) => _crouchHeightCamera.Value.SetValue(__self, value);
		public static float GetCrouchSpeed(this PersonController __self) => _crouchSpeed.Value.GetValue(__self);
		public static void SetCrouchSpeed(this PersonController __self, float value) => _crouchSpeed.Value.SetValue(__self, value);
		public static float GetCrouchHeight(this PersonController __self) => _crouchHeight.Value.GetValue(__self);
		public static void SetCrouchHeight(this PersonController __self, float value) => _crouchHeight.Value.SetValue(__self, value);
		public static bool GetCheatSprinting(this PersonController __self) => _cheatSprinting.Value.GetValue(__self);
		public static void SetCheatSprinting(this PersonController __self, bool value) => _cheatSprinting.Value.SetValue(__self, value);
		public static bool GetIsMovementFree(this PersonController __self) => _isMovementFree.Value.GetValue(__self);
		public static void SetIsMovementFree(this PersonController __self, bool value) => _isMovementFree.Value.SetValue(__self, value);
		public static string GetEventRef_Jump(this PersonController __self) => _eventRef_Jump.Value.GetValue(__self);
		public static void SetEventRef_Jump(this PersonController __self, string value) => _eventRef_Jump.Value.SetValue(__self, value);
		public static string GetEventRef_LandGround(this PersonController __self) => _eventRef_LandGround.Value.GetValue(__self);
		public static void SetEventRef_LandGround(this PersonController __self, string value) => _eventRef_LandGround.Value.SetValue(__self, value);
		public static string GetEventRef_LandWater(this PersonController __self) => _eventRef_LandWater.Value.GetValue(__self);
		public static void SetEventRef_LandWater(this PersonController __self, string value) => _eventRef_LandWater.Value.SetValue(__self, value);
		public static FMODUnity.StudioEventEmitter GetEventEmitter_footstep(this PersonController __self) => _eventEmitter_footstep.Value.GetValue(__self);
		public static void SetEventEmitter_footstep(this PersonController __self, FMODUnity.StudioEventEmitter value) => _eventEmitter_footstep.Value.SetValue(__self, value);
		public static FMODUnity.StudioEventEmitter GetEventEmitter_swim(this PersonController __self) => _eventEmitter_swim.Value.GetValue(__self);
		public static void SetEventEmitter_swim(this PersonController __self, FMODUnity.StudioEventEmitter value) => _eventEmitter_swim.Value.SetValue(__self, value);
		public static FMODUnity.StudioEventEmitter GetEventEmitter_fall3D(this PersonController __self) => _eventEmitter_fall3D.Value.GetValue(__self);
		public static void SetEventEmitter_fall3D(this PersonController __self, FMODUnity.StudioEventEmitter value) => _eventEmitter_fall3D.Value.SetValue(__self, value);
		public static FMODUnity.StudioEventEmitter GetEventEmitter_fall2D(this PersonController __self) => _eventEmitter_fall2D.Value.GetValue(__self);
		public static void SetEventEmitter_fall2D(this PersonController __self, FMODUnity.StudioEventEmitter value) => _eventEmitter_fall2D.Value.SetValue(__self, value);
		public static FMOD.Studio.EventInstance GetEventInstance_jump(this PersonController __self) => _eventInstance_jump.Value.GetValue(__self);
		public static void SetEventInstance_jump(this PersonController __self, FMOD.Studio.EventInstance value) => _eventInstance_jump.Value.SetValue(__self, value);
		public static FMOD.Studio.EventInstance GetEventInstance_land(this PersonController __self) => _eventInstance_land.Value.GetValue(__self);
		public static void SetEventInstance_land(this PersonController __self, FMOD.Studio.EventInstance value) => _eventInstance_land.Value.SetValue(__self, value);
		public static string GetDefaultWalkSound(this PersonController __self) => _defaultWalkSound.Value.GetValue(__self);
		public static void SetDefaultWalkSound(this PersonController __self, string value) => _defaultWalkSound.Value.SetValue(__self, value);
		public static float GetStepDistance(this PersonController __self) => _stepDistance.Value.GetValue(__self);
		public static void SetStepDistance(this PersonController __self, float value) => _stepDistance.Value.SetValue(__self, value);
		public static float GetSwimStepDistance(this PersonController __self) => _swimStepDistance.Value.GetValue(__self);
		public static void SetSwimStepDistance(this PersonController __self, float value) => _swimStepDistance.Value.SetValue(__self, value);
		public static float GetFallSoundMaxValue(this PersonController __self) => _fallSoundMaxValue.Value.GetValue(__self);
		public static void SetFallSoundMaxValue(this PersonController __self, float value) => _fallSoundMaxValue.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetLastPlayedFootstepPos(this PersonController __self) => _lastPlayedFootstepPos.Value.GetValue(__self);
		public static void SetLastPlayedFootstepPos(this PersonController __self, UnityEngine.Vector3 value) => _lastPlayedFootstepPos.Value.SetValue(__self, value);
		public static float Get_currentFallDuration(this PersonController __self) => __currentFallDuration.Value.GetValue(__self);
		public static void Set_currentFallDuration(this PersonController __self, float value) => __currentFallDuration.Value.SetValue(__self, value);
		public static float GetFallDamageMultiplier(this PersonController __self) => _fallDamageMultiplier.Value.GetValue(__self);
		public static void SetFallDamageMultiplier(this PersonController __self, float value) => _fallDamageMultiplier.Value.SetValue(__self, value);
		public static float GetMinimumFallDuration(this PersonController __self) => _minimumFallDuration.Value.GetValue(__self);
		public static void SetMinimumFallDuration(this PersonController __self, float value) => _minimumFallDuration.Value.SetValue(__self, value);
		public static float GetBaseFallDamage(this PersonController __self) => _baseFallDamage.Value.GetValue(__self);
		public static void SetBaseFallDamage(this PersonController __self, float value) => _baseFallDamage.Value.SetValue(__self, value);
		public static float GetMaxFallDamage(this PersonController __self) => _maxFallDamage.Value.GetValue(__self);
		public static void SetMaxFallDamage(this PersonController __self, float value) => _maxFallDamage.Value.SetValue(__self, value);
		public static UltimateWater.WaterCamera GetWaterCamera(this PersonController __self) => _waterCamera.Value.GetValue(__self);
		public static void SetWaterCamera(this PersonController __self, UltimateWater.WaterCamera value) => _waterCamera.Value.SetValue(__self, value);
		public static bool GetRecentlyJumped(this PersonController __self) => _recentlyJumped.Value.GetValue(__self);
		public static void SetRecentlyJumped(this PersonController __self, bool value) => _recentlyJumped.Value.SetValue(__self, value);
		public static float GetResetVelocityOnGroundedTimer(this PersonController __self) => _resetVelocityOnGroundedTimer.Value.GetValue(__self);
		public static void SetResetVelocityOnGroundedTimer(this PersonController __self, float value) => _resetVelocityOnGroundedTimer.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetCamTransform(this PersonController __self) => _camTransform.Value.GetValue(__self);
		public static void SetCamTransform(this PersonController __self, UnityEngine.Transform value) => _camTransform.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetLockedPivot(this PersonController __self) => _lockedPivot.Value.GetValue(__self);
		public static void SetLockedPivot(this PersonController __self, UnityEngine.Transform value) => _lockedPivot.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetMoveDirection(this PersonController __self) => _moveDirection.Value.GetValue(__self);
		public static void SetMoveDirection(this PersonController __self, UnityEngine.Vector3 value) => _moveDirection.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetOriginalPlayerPivotPosition(this PersonController __self) => _originalPlayerPivotPosition.Value.GetValue(__self);
		public static void SetOriginalPlayerPivotPosition(this PersonController __self, UnityEngine.Vector3 value) => _originalPlayerPivotPosition.Value.SetValue(__self, value);
		public static bool GetCompletelyStarted(this PersonController __self) => _completelyStarted.Value.GetValue(__self);
		public static void SetCompletelyStarted(this PersonController __self, bool value) => _completelyStarted.Value.SetValue(__self, value);
		public static bool GetNetworkPositionIsLocalLockedPivot(this PersonController __self) => _networkPositionIsLocalLockedPivot.Value.GetValue(__self);
		public static void SetNetworkPositionIsLocalLockedPivot(this PersonController __self, bool value) => _networkPositionIsLocalLockedPivot.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetNetworkPosition(this PersonController __self) => _networkPosition.Value.GetValue(__self);
		public static void SetNetworkPosition(this PersonController __self, UnityEngine.Vector3 value) => _networkPosition.Value.SetValue(__self, value);
		public static float GetNetworkRotationY(this PersonController __self) => _networkRotationY.Value.GetValue(__self);
		public static void SetNetworkRotationY(this PersonController __self, float value) => _networkRotationY.Value.SetValue(__self, value);
		public static float GetNetworkRotationX(this PersonController __self) => _networkRotationX.Value.GetValue(__self);
		public static void SetNetworkRotationX(this PersonController __self, float value) => _networkRotationX.Value.SetValue(__self, value);
		public static Network_Player GetPlayerNetwork(this PersonController __self) => _playerNetwork.Value.GetValue(__self);
		public static void SetPlayerNetwork(this PersonController __self, Network_Player value) => _playerNetwork.Value.SetValue(__self, value);
		public static UnityEngine.RaycastHit GetGroundRaycastHit(this PersonController __self) => _groundRaycastHit.Value.GetValue(__self);
		public static void SetGroundRaycastHit(this PersonController __self, UnityEngine.RaycastHit value) => _groundRaycastHit.Value.SetValue(__self, value);
		public static bool GetAutoRun(this PersonController __self) => _autoRun.Value.GetValue(__self);
		public static void SetAutoRun(this PersonController __self, bool value) => _autoRun.Value.SetValue(__self, value);
		public static Settings GetSettings(this PersonController __self) => _settings.Value.GetValue(__self);
		public static void SetSettings(this PersonController __self, Settings value) => _settings.Value.SetValue(__self, value);
		public static bool GetRunToggled(this PersonController __self) => _runToggled.Value.GetValue(__self);
		public static void SetRunToggled(this PersonController __self, bool value) => _runToggled.Value.SetValue(__self, value);
		public static bool GetUsedCoyoteJump(this PersonController __self) => _usedCoyoteJump.Value.GetValue(__self);
		public static void SetUsedCoyoteJump(this PersonController __self, bool value) => _usedCoyoteJump.Value.SetValue(__self, value);
		public static float GetOriginalControllerColliderHeight(this PersonController __self) => _originalControllerColliderHeight.Value.GetValue(__self);
		public static void SetOriginalControllerColliderHeight(this PersonController __self, float value) => _originalControllerColliderHeight.Value.SetValue(__self, value);
		public static float GetDefaultCharacterGroundedFallSpeed(this PersonController __self) => _defaultCharacterGroundedFallSpeed.Value.GetValue(__self);
		public static void SetDefaultCharacterGroundedFallSpeed(this PersonController __self, float value) => _defaultCharacterGroundedFallSpeed.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<PersonController>> _Awake757602046 =
				new System.Lazy<MethodAccessor<PersonController>>(() => MethodAccessor<PersonController>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<PersonController>> _Start757602046 =
				new System.Lazy<MethodAccessor<PersonController>>(() => MethodAccessor<PersonController>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<PersonController>> _Update757602046 =
				new System.Lazy<MethodAccessor<PersonController>>(() => MethodAccessor<PersonController>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<PersonController>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<PersonController>>(() => MethodAccessor<PersonController>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<PersonController>> _OnDisable757602046 =
				new System.Lazy<MethodAccessor<PersonController>>(() => MethodAccessor<PersonController>.Create("OnDisable"));
		private static readonly System.Lazy<MethodAccessor<PersonController>> _OnTriggerStay3468606003 =
				new System.Lazy<MethodAccessor<PersonController>>(() => MethodAccessor<PersonController>.Create("OnTriggerStay", typeof(UnityEngine.Collider)));
		private static readonly System.Lazy<MethodAccessor<PersonController>> _OnTriggerExit3468606003 =
				new System.Lazy<MethodAccessor<PersonController>>(() => MethodAccessor<PersonController>.Create("OnTriggerExit", typeof(UnityEngine.Collider)));
		private static readonly System.Lazy<MethodAccessor<PersonController>> _OnControllerColliderHit3458064587 =
				new System.Lazy<MethodAccessor<PersonController>>(() => MethodAccessor<PersonController>.Create("OnControllerColliderHit", typeof(UnityEngine.ControllerColliderHit)));
		private static readonly System.Lazy<MethodAccessor<PersonController>> _OnPlayerDeath757602046 =
				new System.Lazy<MethodAccessor<PersonController>>(() => MethodAccessor<PersonController>.Create("OnPlayerDeath"));
		private static readonly System.Lazy<MethodAccessor<PersonController>> _HandleSlopes757602046 =
				new System.Lazy<MethodAccessor<PersonController>>(() => MethodAccessor<PersonController>.Create("HandleSlopes"));
		private static readonly System.Lazy<MethodAccessor<PersonController>> _HandleFalling757602046 =
				new System.Lazy<MethodAccessor<PersonController>>(() => MethodAccessor<PersonController>.Create("HandleFalling"));
		private static readonly System.Lazy<MethodAccessor<PersonController>> _OnHitGround757602046 =
				new System.Lazy<MethodAccessor<PersonController>>(() => MethodAccessor<PersonController>.Create("OnHitGround"));
		private static readonly System.Lazy<MethodAccessor<PersonController>> _CalculateFallDamage3486905475 =
				new System.Lazy<MethodAccessor<PersonController>>(() => MethodAccessor<PersonController>.Create("CalculateFallDamage", typeof(float)));
		private static readonly System.Lazy<MethodAccessor<PersonController>> _ClampExternalVelocity3486905475 =
				new System.Lazy<MethodAccessor<PersonController>>(() => MethodAccessor<PersonController>.Create("ClampExternalVelocity", typeof(float)));
		private static readonly System.Lazy<MethodAccessor<PersonController>> _SetGroundMaterial757602046 =
				new System.Lazy<MethodAccessor<PersonController>>(() => MethodAccessor<PersonController>.Create("SetGroundMaterial"));
		private static readonly System.Lazy<MethodAccessor<PersonController>> _ResetJump757602046 =
				new System.Lazy<MethodAccessor<PersonController>>(() => MethodAccessor<PersonController>.Create("ResetJump"));
		private static readonly System.Lazy<MethodAccessor<PersonController>> _HandleFallSound3486905475 =
				new System.Lazy<MethodAccessor<PersonController>>(() => MethodAccessor<PersonController>.Create("HandleFallSound", typeof(float)));
		private static readonly System.Lazy<MethodAccessor<PersonController>> _HandleFootstepSound757602046 =
				new System.Lazy<MethodAccessor<PersonController>>(() => MethodAccessor<PersonController>.Create("HandleFootstepSound"));
		private static readonly System.Lazy<MethodAccessor<PersonController>> _HandleSwimSound757602046 =
				new System.Lazy<MethodAccessor<PersonController>>(() => MethodAccessor<PersonController>.Create("HandleSwimSound"));
		private static readonly System.Lazy<MethodAccessor<PersonController>> _AllowJump757602046 =
				new System.Lazy<MethodAccessor<PersonController>>(() => MethodAccessor<PersonController>.Create("AllowJump"));
		private static readonly System.Lazy<MethodAccessor<PersonController>> _GroundControll3464942049 =
				new System.Lazy<MethodAccessor<PersonController>>(() => MethodAccessor<PersonController>.Create("GroundControll", typeof(UnityEngine.RaycastHit)));
		private static readonly System.Lazy<MethodAccessor<PersonController>> _WaterControll757602046 =
				new System.Lazy<MethodAccessor<PersonController>>(() => MethodAccessor<PersonController>.Create("WaterControll"));

		public static void Awake(this PersonController __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this PersonController __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this PersonController __self) => _Update757602046.Value.Invoke(__self);
		public static void OnDestroy(this PersonController __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void OnDisable(this PersonController __self) => _OnDisable757602046.Value.Invoke(__self);
		public static void OnTriggerStay(this PersonController __self, UnityEngine.Collider other) => _OnTriggerStay3468606003.Value.Invoke(__self, other);
		public static void OnTriggerExit(this PersonController __self, UnityEngine.Collider other) => _OnTriggerExit3468606003.Value.Invoke(__self, other);
		public static void OnControllerColliderHit(this PersonController __self, UnityEngine.ControllerColliderHit hit) => _OnControllerColliderHit3458064587.Value.Invoke(__self, hit);
		public static void OnPlayerDeath(this PersonController __self) => _OnPlayerDeath757602046.Value.Invoke(__self);
		public static void HandleSlopes(this PersonController __self) => _HandleSlopes757602046.Value.Invoke(__self);
		public static void HandleFalling(this PersonController __self) => _HandleFalling757602046.Value.Invoke(__self);
		public static void OnHitGround(this PersonController __self) => _OnHitGround757602046.Value.Invoke(__self);
		public static void CalculateFallDamage(this PersonController __self, float p_fallDuration) => _CalculateFallDamage3486905475.Value.Invoke(__self, p_fallDuration);
		public static void ClampExternalVelocity(this PersonController __self, float value) => _ClampExternalVelocity3486905475.Value.Invoke(__self, value);
		public static void SetGroundMaterial(this PersonController __self) => _SetGroundMaterial757602046.Value.Invoke(__self);
		public static void ResetJump(this PersonController __self) => _ResetJump757602046.Value.Invoke(__self);
		public static void HandleFallSound(this PersonController __self, float velocity) => _HandleFallSound3486905475.Value.Invoke(__self, velocity);
		public static void HandleFootstepSound(this PersonController __self) => _HandleFootstepSound757602046.Value.Invoke(__self);
		public static void HandleSwimSound(this PersonController __self) => _HandleSwimSound757602046.Value.Invoke(__self);
		public static bool AllowJump(this PersonController __self) => (bool)_AllowJump757602046.Value.Invoke(__self);
		public static void GroundControll(this PersonController __self, UnityEngine.RaycastHit groundHit) => _GroundControll3464942049.Value.Invoke(__self, groundHit);
		public static void WaterControll(this PersonController __self) => _WaterControll757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Player
	{

		private static readonly System.Lazy<FieldAccessor<Player, Network_Player>> _playerNetwork =
				new System.Lazy<FieldAccessor<Player, Network_Player>>(() => FieldAccessor<Player, Network_Player>.Create("playerNetwork"));
		private static readonly System.Lazy<FieldAccessor<Player, PlayerStats>> _playerStats =
				new System.Lazy<FieldAccessor<Player, PlayerStats>>(() => FieldAccessor<Player, PlayerStats>.Create("playerStats"));
		private static readonly System.Lazy<FieldAccessor<Player, CanvasHelper>> _canvas =
				new System.Lazy<FieldAccessor<Player, CanvasHelper>>(() => FieldAccessor<Player, CanvasHelper>.Create("canvas"));
		private static readonly System.Lazy<FieldAccessor<Player, SoundManager>> _soundManager =
				new System.Lazy<FieldAccessor<Player, SoundManager>>(() => FieldAccessor<Player, SoundManager>.Create("soundManager"));
		private static readonly System.Lazy<FieldAccessor<Player, System.Nullable<float>>> _fixedHealth =
				new System.Lazy<FieldAccessor<Player, System.Nullable<float>>>(() => FieldAccessor<Player, System.Nullable<float>>.Create("fixedHealth"));
		private static readonly System.Lazy<FieldAccessor<Player, System.Nullable<float>>> _fixedHunger =
				new System.Lazy<FieldAccessor<Player, System.Nullable<float>>>(() => FieldAccessor<Player, System.Nullable<float>>.Create("fixedHunger"));
		private static readonly System.Lazy<FieldAccessor<Player, System.Nullable<float>>> _fixedThurst =
				new System.Lazy<FieldAccessor<Player, System.Nullable<float>>>(() => FieldAccessor<Player, System.Nullable<float>>.Create("fixedThurst"));

		public static Network_Player GetPlayerNetwork(this Player __self) => _playerNetwork.Value.GetValue(__self);
		public static void SetPlayerNetwork(this Player __self, Network_Player value) => _playerNetwork.Value.SetValue(__self, value);
		public static PlayerStats GetPlayerStats(this Player __self) => _playerStats.Value.GetValue(__self);
		public static void SetPlayerStats(this Player __self, PlayerStats value) => _playerStats.Value.SetValue(__self, value);
		public static CanvasHelper GetCanvas(this Player __self) => _canvas.Value.GetValue(__self);
		public static void SetCanvas(this Player __self, CanvasHelper value) => _canvas.Value.SetValue(__self, value);
		public static SoundManager GetSoundManager(this Player __self) => _soundManager.Value.GetValue(__self);
		public static void SetSoundManager(this Player __self, SoundManager value) => _soundManager.Value.SetValue(__self, value);
		public static System.Nullable<float> GetFixedHealth(this Player __self) => _fixedHealth.Value.GetValue(__self);
		public static void SetFixedHealth(this Player __self, System.Nullable<float> value) => _fixedHealth.Value.SetValue(__self, value);
		public static System.Nullable<float> GetFixedHunger(this Player __self) => _fixedHunger.Value.GetValue(__self);
		public static void SetFixedHunger(this Player __self, System.Nullable<float> value) => _fixedHunger.Value.SetValue(__self, value);
		public static System.Nullable<float> GetFixedThurst(this Player __self) => _fixedThurst.Value.GetValue(__self);
		public static void SetFixedThurst(this Player __self, System.Nullable<float> value) => _fixedThurst.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Player>> _Awake757602046 =
				new System.Lazy<MethodAccessor<Player>>(() => MethodAccessor<Player>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<Player>> _Start757602046 =
				new System.Lazy<MethodAccessor<Player>>(() => MethodAccessor<Player>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<Player>> _Update757602046 =
				new System.Lazy<MethodAccessor<Player>>(() => MethodAccessor<Player>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<Player>> _StuckTest757602046 =
				new System.Lazy<MethodAccessor<Player>>(() => MethodAccessor<Player>.Create("StuckTest"));
		private static readonly System.Lazy<MethodAccessor<Player>> _InitializeInventory757602046 =
				new System.Lazy<MethodAccessor<Player>>(() => MethodAccessor<Player>.Create("InitializeInventory"));
		private static readonly System.Lazy<MethodAccessor<Player>> _RespawnWait3486905475 =
				new System.Lazy<MethodAccessor<Player>>(() => MethodAccessor<Player>.Create("RespawnWait", typeof(float)));

		public static void Awake(this Player __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this Player __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this Player __self) => _Update757602046.Value.Invoke(__self);
		public static bool StuckTest(this Player __self) => (bool)_StuckTest757602046.Value.Invoke(__self);
		public static void InitializeInventory(this Player __self) => _InitializeInventory757602046.Value.Invoke(__self);
		public static System.Collections.IEnumerator RespawnWait(this Player __self, float timeDelayBeforePlayerCanMove) => (System.Collections.IEnumerator)_RespawnWait3486905475.Value.Invoke(__self, timeDelayBeforePlayerCanMove);

	}

	public static class Private_Player
	{

		private static readonly System.Lazy<StaticFieldAccessor<float>> __useDistance =
				new System.Lazy<StaticFieldAccessor<float>>(() => StaticFieldAccessor<float>.Create(typeof(Player), "_useDistance"));

		public static float Get_useDistance() => __useDistance.Value.GetValue();
		public static void Set_useDistance(float value) => __useDistance.Value.SetValue(value);

	}

	public static class PrivateAccessor_PlayerAnimator
	{

		private static readonly System.Lazy<FieldAccessor<PlayerAnimator, float>> _networkVelocityLerpSpeed =
				new System.Lazy<FieldAccessor<PlayerAnimator, float>>(() => FieldAccessor<PlayerAnimator, float>.Create("networkVelocityLerpSpeed"));
		private static readonly System.Lazy<FieldAccessor<PlayerAnimator, float>> _maxTriggerTime =
				new System.Lazy<FieldAccessor<PlayerAnimator, float>>(() => FieldAccessor<PlayerAnimator, float>.Create("maxTriggerTime"));
		private static readonly System.Lazy<FieldAccessor<PlayerAnimator, float>> _triggeringTimer =
				new System.Lazy<FieldAccessor<PlayerAnimator, float>>(() => FieldAccessor<PlayerAnimator, float>.Create("triggeringTimer"));

		public static float GetNetworkVelocityLerpSpeed(this PlayerAnimator __self) => _networkVelocityLerpSpeed.Value.GetValue(__self);
		public static void SetNetworkVelocityLerpSpeed(this PlayerAnimator __self, float value) => _networkVelocityLerpSpeed.Value.SetValue(__self, value);
		public static float GetMaxTriggerTime(this PlayerAnimator __self) => _maxTriggerTime.Value.GetValue(__self);
		public static void SetMaxTriggerTime(this PlayerAnimator __self, float value) => _maxTriggerTime.Value.SetValue(__self, value);
		public static float GetTriggeringTimer(this PlayerAnimator __self) => _triggeringTimer.Value.GetValue(__self);
		public static void SetTriggeringTimer(this PlayerAnimator __self, float value) => _triggeringTimer.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<PlayerAnimator>> _Awake757602046 =
				new System.Lazy<MethodAccessor<PlayerAnimator>>(() => MethodAccessor<PlayerAnimator>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<PlayerAnimator>> _Update757602046 =
				new System.Lazy<MethodAccessor<PlayerAnimator>>(() => MethodAccessor<PlayerAnimator>.Create("Update"));

		public static void Awake(this PlayerAnimator __self) => _Awake757602046.Value.Invoke(__self);
		public static void Update(this PlayerAnimator __self) => _Update757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_PlayerEnvironmentLightManager
	{

		private static readonly System.Lazy<FieldAccessor<PlayerEnvironmentLightManager, float>> _lerpTime =
				new System.Lazy<FieldAccessor<PlayerEnvironmentLightManager, float>>(() => FieldAccessor<PlayerEnvironmentLightManager, float>.Create("lerpTime"));
		private static readonly System.Lazy<FieldAccessor<PlayerEnvironmentLightManager, float>> _pointLightIntensity =
				new System.Lazy<FieldAccessor<PlayerEnvironmentLightManager, float>>(() => FieldAccessor<PlayerEnvironmentLightManager, float>.Create("pointLightIntensity"));
		private static readonly System.Lazy<FieldAccessor<PlayerEnvironmentLightManager, UnityEngine.AzureSky.AzureSkyController>> _skyController =
				new System.Lazy<FieldAccessor<PlayerEnvironmentLightManager, UnityEngine.AzureSky.AzureSkyController>>(() => FieldAccessor<PlayerEnvironmentLightManager, UnityEngine.AzureSky.AzureSkyController>.Create("skyController"));
		private static readonly System.Lazy<FieldAccessor<PlayerEnvironmentLightManager, bool>> _lastFrameUsingCustomEnvironmentLight =
				new System.Lazy<FieldAccessor<PlayerEnvironmentLightManager, bool>>(() => FieldAccessor<PlayerEnvironmentLightManager, bool>.Create("lastFrameUsingCustomEnvironmentLight"));

		public static float GetLerpTime(this PlayerEnvironmentLightManager __self) => _lerpTime.Value.GetValue(__self);
		public static void SetLerpTime(this PlayerEnvironmentLightManager __self, float value) => _lerpTime.Value.SetValue(__self, value);
		public static float GetPointLightIntensity(this PlayerEnvironmentLightManager __self) => _pointLightIntensity.Value.GetValue(__self);
		public static void SetPointLightIntensity(this PlayerEnvironmentLightManager __self, float value) => _pointLightIntensity.Value.SetValue(__self, value);
		public static UnityEngine.AzureSky.AzureSkyController GetSkyController(this PlayerEnvironmentLightManager __self) => _skyController.Value.GetValue(__self);
		public static void SetSkyController(this PlayerEnvironmentLightManager __self, UnityEngine.AzureSky.AzureSkyController value) => _skyController.Value.SetValue(__self, value);
		public static bool GetLastFrameUsingCustomEnvironmentLight(this PlayerEnvironmentLightManager __self) => _lastFrameUsingCustomEnvironmentLight.Value.GetValue(__self);
		public static void SetLastFrameUsingCustomEnvironmentLight(this PlayerEnvironmentLightManager __self, bool value) => _lastFrameUsingCustomEnvironmentLight.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<PlayerEnvironmentLightManager>> _Start757602046 =
				new System.Lazy<MethodAccessor<PlayerEnvironmentLightManager>>(() => MethodAccessor<PlayerEnvironmentLightManager>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<PlayerEnvironmentLightManager>> _Update757602046 =
				new System.Lazy<MethodAccessor<PlayerEnvironmentLightManager>>(() => MethodAccessor<PlayerEnvironmentLightManager>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<PlayerEnvironmentLightManager>> _LerpLights3450040886 =
				new System.Lazy<MethodAccessor<PlayerEnvironmentLightManager>>(() => MethodAccessor<PlayerEnvironmentLightManager>.Create("LerpLights", typeof(bool)));

		public static void Start(this PlayerEnvironmentLightManager __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this PlayerEnvironmentLightManager __self) => _Update757602046.Value.Invoke(__self);
		public static System.Collections.IEnumerator LerpLights(this PlayerEnvironmentLightManager __self, bool inCustomLightZone) => (System.Collections.IEnumerator)_LerpLights3450040886.Value.Invoke(__self, inCustomLightZone);

	}

	public static class PrivateAccessor_PlayerFOVManager
	{

		private static readonly System.Lazy<FieldAccessor<PlayerFOVManager, System.Collections.Generic.List<UnityEngine.Transform>>> _fovChildren =
				new System.Lazy<FieldAccessor<PlayerFOVManager, System.Collections.Generic.List<UnityEngine.Transform>>>(() => FieldAccessor<PlayerFOVManager, System.Collections.Generic.List<UnityEngine.Transform>>.Create("fovChildren"));
		private static readonly System.Lazy<FieldAccessor<PlayerFOVManager, Network_Player>> _player =
				new System.Lazy<FieldAccessor<PlayerFOVManager, Network_Player>>(() => FieldAccessor<PlayerFOVManager, Network_Player>.Create("player"));

		public static System.Collections.Generic.List<UnityEngine.Transform> GetFovChildren(this PlayerFOVManager __self) => _fovChildren.Value.GetValue(__self);
		public static void SetFovChildren(this PlayerFOVManager __self, System.Collections.Generic.List<UnityEngine.Transform> value) => _fovChildren.Value.SetValue(__self, value);
		public static Network_Player GetPlayer(this PlayerFOVManager __self) => _player.Value.GetValue(__self);
		public static void SetPlayer(this PlayerFOVManager __self, Network_Player value) => _player.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<PlayerFOVManager>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<PlayerFOVManager>>(() => MethodAccessor<PlayerFOVManager>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<PlayerFOVManager>> _OnThirdPersonModelChange3450040886 =
				new System.Lazy<MethodAccessor<PlayerFOVManager>>(() => MethodAccessor<PlayerFOVManager>.Create("OnThirdPersonModelChange", typeof(bool)));
		private static readonly System.Lazy<MethodAccessor<PlayerFOVManager>> _SetFovChildrenLayer3486186818 =
				new System.Lazy<MethodAccessor<PlayerFOVManager>>(() => MethodAccessor<PlayerFOVManager>.Create("SetFovChildrenLayer", typeof(int)));

		public static void OnDestroy(this PlayerFOVManager __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void OnThirdPersonModelChange(this PlayerFOVManager __self, bool thirdPerson) => _OnThirdPersonModelChange3450040886.Value.Invoke(__self, thirdPerson);
		public static void SetFovChildrenLayer(this PlayerFOVManager __self, int layer) => _SetFovChildrenLayer3486186818.Value.Invoke(__self, layer);

	}

	public static class PrivateAccessor_YieldManipulator
	{

		private static readonly System.Lazy<FieldAccessor<YieldManipulator, UnityEngine.AnimationCurve>> _curve =
				new System.Lazy<FieldAccessor<YieldManipulator, UnityEngine.AnimationCurve>>(() => FieldAccessor<YieldManipulator, UnityEngine.AnimationCurve>.Create("curve"));

		public static UnityEngine.AnimationCurve GetCurve(this YieldManipulator __self) => _curve.Value.GetValue(__self);
		public static void SetCurve(this YieldManipulator __self, UnityEngine.AnimationCurve value) => _curve.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_PlayerStats
	{

		private static readonly System.Lazy<FieldAccessor<PlayerStats, UnityEngine.ParticleSystem>> _bloodParticles =
				new System.Lazy<FieldAccessor<PlayerStats, UnityEngine.ParticleSystem>>(() => FieldAccessor<PlayerStats, UnityEngine.ParticleSystem>.Create("bloodParticles"));
		private static readonly System.Lazy<FieldAccessor<PlayerStats, float>> _healthLostPerSecondDrowning =
				new System.Lazy<FieldAccessor<PlayerStats, float>>(() => FieldAccessor<PlayerStats, float>.Create("healthLostPerSecondDrowning"));
		private static readonly System.Lazy<FieldAccessor<PlayerStats, float>> _healthLostPerSecondWellbeing =
				new System.Lazy<FieldAccessor<PlayerStats, float>>(() => FieldAccessor<PlayerStats, float>.Create("healthLostPerSecondWellbeing"));
		private static readonly System.Lazy<FieldAccessor<PlayerStats, float>> _healthLostPerSecondZeroed =
				new System.Lazy<FieldAccessor<PlayerStats, float>>(() => FieldAccessor<PlayerStats, float>.Create("healthLostPerSecondZeroed"));
		private static readonly System.Lazy<FieldAccessor<PlayerStats, TimerEventer>> _updateUISliderTimer =
				new System.Lazy<FieldAccessor<PlayerStats, TimerEventer>>(() => FieldAccessor<PlayerStats, TimerEventer>.Create("updateUISliderTimer"));
		private static readonly System.Lazy<FieldAccessor<PlayerStats, SO_Buff>> _deathPreventionTriggeredInvurnabilityBuff =
				new System.Lazy<FieldAccessor<PlayerStats, SO_Buff>>(() => FieldAccessor<PlayerStats, SO_Buff>.Create("deathPreventionTriggeredInvurnabilityBuff"));
		private static readonly System.Lazy<FieldAccessor<PlayerStats, SO_Buff>> _deathPreventionTriggeredHealEffect =
				new System.Lazy<FieldAccessor<PlayerStats, SO_Buff>>(() => FieldAccessor<PlayerStats, SO_Buff>.Create("deathPreventionTriggeredHealEffect"));
		private static readonly System.Lazy<FieldAccessor<PlayerStats, float>> _sineFrequency =
				new System.Lazy<FieldAccessor<PlayerStats, float>>(() => FieldAccessor<PlayerStats, float>.Create("sineFrequency"));
		private static readonly System.Lazy<FieldAccessor<PlayerStats, Interval_Float>> _vignetteInterval =
				new System.Lazy<FieldAccessor<PlayerStats, Interval_Float>>(() => FieldAccessor<PlayerStats, Interval_Float>.Create("vignetteInterval"));
		private static readonly System.Lazy<FieldAccessor<PlayerStats, Interval_Float>> _aberationInterval =
				new System.Lazy<FieldAccessor<PlayerStats, Interval_Float>>(() => FieldAccessor<PlayerStats, Interval_Float>.Create("aberationInterval"));
		private static readonly System.Lazy<FieldAccessor<PlayerStats, Interval_Float>> _saturationInterval =
				new System.Lazy<FieldAccessor<PlayerStats, Interval_Float>>(() => FieldAccessor<PlayerStats, Interval_Float>.Create("saturationInterval"));
		private static readonly System.Lazy<FieldAccessor<PlayerStats, SO_ScreenEffect>> _bloodSplatterSettings =
				new System.Lazy<FieldAccessor<PlayerStats, SO_ScreenEffect>>(() => FieldAccessor<PlayerStats, SO_ScreenEffect>.Create("bloodSplatterSettings"));
		private static readonly System.Lazy<FieldAccessor<PlayerStats, SO_CameraShaker>> _cameraShakeSettings =
				new System.Lazy<FieldAccessor<PlayerStats, SO_CameraShaker>>(() => FieldAccessor<PlayerStats, SO_CameraShaker>.Create("cameraShakeSettings"));
		private static readonly System.Lazy<FieldAccessor<PlayerStats, float>> _soundIntervall =
				new System.Lazy<FieldAccessor<PlayerStats, float>>(() => FieldAccessor<PlayerStats, float>.Create("soundIntervall"));
		private static readonly System.Lazy<FieldAccessor<PlayerStats, FMODUnity.StudioEventEmitter>> _eventEmitter_Damaged =
				new System.Lazy<FieldAccessor<PlayerStats, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<PlayerStats, FMODUnity.StudioEventEmitter>.Create("eventEmitter_Damaged"));
		private static readonly System.Lazy<FieldAccessor<PlayerStats, FMODUnity.StudioEventEmitter>> _eventEmitter_Drowning =
				new System.Lazy<FieldAccessor<PlayerStats, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<PlayerStats, FMODUnity.StudioEventEmitter>.Create("eventEmitter_Drowning"));
		private static readonly System.Lazy<FieldAccessor<PlayerStats, FMODUnity.StudioEventEmitter>> _eventEmitter_Thirsty =
				new System.Lazy<FieldAccessor<PlayerStats, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<PlayerStats, FMODUnity.StudioEventEmitter>.Create("eventEmitter_Thirsty"));
		private static readonly System.Lazy<FieldAccessor<PlayerStats, FMODUnity.StudioEventEmitter>> _eventEmitter_Hungry =
				new System.Lazy<FieldAccessor<PlayerStats, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<PlayerStats, FMODUnity.StudioEventEmitter>.Create("eventEmitter_Hungry"));
		private static readonly System.Lazy<FieldAccessor<PlayerStats, FMODUnity.StudioEventEmitter>> _eventEmitter_LowBreath =
				new System.Lazy<FieldAccessor<PlayerStats, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<PlayerStats, FMODUnity.StudioEventEmitter>.Create("eventEmitter_LowBreath"));
		private static readonly System.Lazy<FieldAccessor<PlayerStats, UnityEngine.Coroutine>> _coroutine_hungrySound =
				new System.Lazy<FieldAccessor<PlayerStats, UnityEngine.Coroutine>>(() => FieldAccessor<PlayerStats, UnityEngine.Coroutine>.Create("coroutine_hungrySound"));
		private static readonly System.Lazy<FieldAccessor<PlayerStats, UnityEngine.Coroutine>> _coroutine_thirstySound =
				new System.Lazy<FieldAccessor<PlayerStats, UnityEngine.Coroutine>>(() => FieldAccessor<PlayerStats, UnityEngine.Coroutine>.Create("coroutine_thirstySound"));
		private static readonly System.Lazy<FieldAccessor<PlayerStats, UnityEngine.Coroutine>> _coroutine_lowBreathSound =
				new System.Lazy<FieldAccessor<PlayerStats, UnityEngine.Coroutine>>(() => FieldAccessor<PlayerStats, UnityEngine.Coroutine>.Create("coroutine_lowBreathSound"));
		private static readonly System.Lazy<FieldAccessor<PlayerStats, UnityEngine.Coroutine>> _coroutine_drowningSound =
				new System.Lazy<FieldAccessor<PlayerStats, UnityEngine.Coroutine>>(() => FieldAccessor<PlayerStats, UnityEngine.Coroutine>.Create("coroutine_drowningSound"));
		private static readonly System.Lazy<FieldAccessor<PlayerStats, CanvasHelper>> _canvas =
				new System.Lazy<FieldAccessor<PlayerStats, CanvasHelper>>(() => FieldAccessor<PlayerStats, CanvasHelper>.Create("canvas"));
		private static readonly System.Lazy<FieldAccessor<PlayerStats, Network_Player>> _playerNetwork =
				new System.Lazy<FieldAccessor<PlayerStats, Network_Player>>(() => FieldAccessor<PlayerStats, Network_Player>.Create("playerNetwork"));
		private static readonly System.Lazy<FieldAccessor<PlayerStats, UnityEngine.PostProcessing.PostProcessingProfile>> _postEffects =
				new System.Lazy<FieldAccessor<PlayerStats, UnityEngine.PostProcessing.PostProcessingProfile>>(() => FieldAccessor<PlayerStats, UnityEngine.PostProcessing.PostProcessingProfile>.Create("postEffects"));
		private static readonly System.Lazy<FieldAccessor<PlayerStats, ScreenEffectManager>> _screenEffectManager =
				new System.Lazy<FieldAccessor<PlayerStats, ScreenEffectManager>>(() => FieldAccessor<PlayerStats, ScreenEffectManager>.Create("screenEffectManager"));
		private static readonly System.Lazy<FieldAccessor<PlayerStats, ArmorHandler>> _armorHandler =
				new System.Lazy<FieldAccessor<PlayerStats, ArmorHandler>>(() => FieldAccessor<PlayerStats, ArmorHandler>.Create("armorHandler"));
		private static readonly System.Lazy<FieldAccessor<PlayerStats, float>> _sineTime =
				new System.Lazy<FieldAccessor<PlayerStats, float>>(() => FieldAccessor<PlayerStats, float>.Create("sineTime"));

		public static UnityEngine.ParticleSystem GetBloodParticles(this PlayerStats __self) => _bloodParticles.Value.GetValue(__self);
		public static void SetBloodParticles(this PlayerStats __self, UnityEngine.ParticleSystem value) => _bloodParticles.Value.SetValue(__self, value);
		public static float GetHealthLostPerSecondDrowning(this PlayerStats __self) => _healthLostPerSecondDrowning.Value.GetValue(__self);
		public static void SetHealthLostPerSecondDrowning(this PlayerStats __self, float value) => _healthLostPerSecondDrowning.Value.SetValue(__self, value);
		public static float GetHealthLostPerSecondWellbeing(this PlayerStats __self) => _healthLostPerSecondWellbeing.Value.GetValue(__self);
		public static void SetHealthLostPerSecondWellbeing(this PlayerStats __self, float value) => _healthLostPerSecondWellbeing.Value.SetValue(__self, value);
		public static float GetHealthLostPerSecondZeroed(this PlayerStats __self) => _healthLostPerSecondZeroed.Value.GetValue(__self);
		public static void SetHealthLostPerSecondZeroed(this PlayerStats __self, float value) => _healthLostPerSecondZeroed.Value.SetValue(__self, value);
		public static TimerEventer GetUpdateUISliderTimer(this PlayerStats __self) => _updateUISliderTimer.Value.GetValue(__self);
		public static void SetUpdateUISliderTimer(this PlayerStats __self, TimerEventer value) => _updateUISliderTimer.Value.SetValue(__self, value);
		public static SO_Buff GetDeathPreventionTriggeredInvurnabilityBuff(this PlayerStats __self) => _deathPreventionTriggeredInvurnabilityBuff.Value.GetValue(__self);
		public static void SetDeathPreventionTriggeredInvurnabilityBuff(this PlayerStats __self, SO_Buff value) => _deathPreventionTriggeredInvurnabilityBuff.Value.SetValue(__self, value);
		public static SO_Buff GetDeathPreventionTriggeredHealEffect(this PlayerStats __self) => _deathPreventionTriggeredHealEffect.Value.GetValue(__self);
		public static void SetDeathPreventionTriggeredHealEffect(this PlayerStats __self, SO_Buff value) => _deathPreventionTriggeredHealEffect.Value.SetValue(__self, value);
		public static float GetSineFrequency(this PlayerStats __self) => _sineFrequency.Value.GetValue(__self);
		public static void SetSineFrequency(this PlayerStats __self, float value) => _sineFrequency.Value.SetValue(__self, value);
		public static Interval_Float GetVignetteInterval(this PlayerStats __self) => _vignetteInterval.Value.GetValue(__self);
		public static void SetVignetteInterval(this PlayerStats __self, Interval_Float value) => _vignetteInterval.Value.SetValue(__self, value);
		public static Interval_Float GetAberationInterval(this PlayerStats __self) => _aberationInterval.Value.GetValue(__self);
		public static void SetAberationInterval(this PlayerStats __self, Interval_Float value) => _aberationInterval.Value.SetValue(__self, value);
		public static Interval_Float GetSaturationInterval(this PlayerStats __self) => _saturationInterval.Value.GetValue(__self);
		public static void SetSaturationInterval(this PlayerStats __self, Interval_Float value) => _saturationInterval.Value.SetValue(__self, value);
		public static SO_ScreenEffect GetBloodSplatterSettings(this PlayerStats __self) => _bloodSplatterSettings.Value.GetValue(__self);
		public static void SetBloodSplatterSettings(this PlayerStats __self, SO_ScreenEffect value) => _bloodSplatterSettings.Value.SetValue(__self, value);
		public static SO_CameraShaker GetCameraShakeSettings(this PlayerStats __self) => _cameraShakeSettings.Value.GetValue(__self);
		public static void SetCameraShakeSettings(this PlayerStats __self, SO_CameraShaker value) => _cameraShakeSettings.Value.SetValue(__self, value);
		public static float GetSoundIntervall(this PlayerStats __self) => _soundIntervall.Value.GetValue(__self);
		public static void SetSoundIntervall(this PlayerStats __self, float value) => _soundIntervall.Value.SetValue(__self, value);
		public static FMODUnity.StudioEventEmitter GetEventEmitter_Damaged(this PlayerStats __self) => _eventEmitter_Damaged.Value.GetValue(__self);
		public static void SetEventEmitter_Damaged(this PlayerStats __self, FMODUnity.StudioEventEmitter value) => _eventEmitter_Damaged.Value.SetValue(__self, value);
		public static FMODUnity.StudioEventEmitter GetEventEmitter_Drowning(this PlayerStats __self) => _eventEmitter_Drowning.Value.GetValue(__self);
		public static void SetEventEmitter_Drowning(this PlayerStats __self, FMODUnity.StudioEventEmitter value) => _eventEmitter_Drowning.Value.SetValue(__self, value);
		public static FMODUnity.StudioEventEmitter GetEventEmitter_Thirsty(this PlayerStats __self) => _eventEmitter_Thirsty.Value.GetValue(__self);
		public static void SetEventEmitter_Thirsty(this PlayerStats __self, FMODUnity.StudioEventEmitter value) => _eventEmitter_Thirsty.Value.SetValue(__self, value);
		public static FMODUnity.StudioEventEmitter GetEventEmitter_Hungry(this PlayerStats __self) => _eventEmitter_Hungry.Value.GetValue(__self);
		public static void SetEventEmitter_Hungry(this PlayerStats __self, FMODUnity.StudioEventEmitter value) => _eventEmitter_Hungry.Value.SetValue(__self, value);
		public static FMODUnity.StudioEventEmitter GetEventEmitter_LowBreath(this PlayerStats __self) => _eventEmitter_LowBreath.Value.GetValue(__self);
		public static void SetEventEmitter_LowBreath(this PlayerStats __self, FMODUnity.StudioEventEmitter value) => _eventEmitter_LowBreath.Value.SetValue(__self, value);
		public static UnityEngine.Coroutine GetCoroutine_hungrySound(this PlayerStats __self) => _coroutine_hungrySound.Value.GetValue(__self);
		public static void SetCoroutine_hungrySound(this PlayerStats __self, UnityEngine.Coroutine value) => _coroutine_hungrySound.Value.SetValue(__self, value);
		public static UnityEngine.Coroutine GetCoroutine_thirstySound(this PlayerStats __self) => _coroutine_thirstySound.Value.GetValue(__self);
		public static void SetCoroutine_thirstySound(this PlayerStats __self, UnityEngine.Coroutine value) => _coroutine_thirstySound.Value.SetValue(__self, value);
		public static UnityEngine.Coroutine GetCoroutine_lowBreathSound(this PlayerStats __self) => _coroutine_lowBreathSound.Value.GetValue(__self);
		public static void SetCoroutine_lowBreathSound(this PlayerStats __self, UnityEngine.Coroutine value) => _coroutine_lowBreathSound.Value.SetValue(__self, value);
		public static UnityEngine.Coroutine GetCoroutine_drowningSound(this PlayerStats __self) => _coroutine_drowningSound.Value.GetValue(__self);
		public static void SetCoroutine_drowningSound(this PlayerStats __self, UnityEngine.Coroutine value) => _coroutine_drowningSound.Value.SetValue(__self, value);
		public static CanvasHelper GetCanvas(this PlayerStats __self) => _canvas.Value.GetValue(__self);
		public static void SetCanvas(this PlayerStats __self, CanvasHelper value) => _canvas.Value.SetValue(__self, value);
		public static Network_Player GetPlayerNetwork(this PlayerStats __self) => _playerNetwork.Value.GetValue(__self);
		public static void SetPlayerNetwork(this PlayerStats __self, Network_Player value) => _playerNetwork.Value.SetValue(__self, value);
		public static UnityEngine.PostProcessing.PostProcessingProfile GetPostEffects(this PlayerStats __self) => _postEffects.Value.GetValue(__self);
		public static void SetPostEffects(this PlayerStats __self, UnityEngine.PostProcessing.PostProcessingProfile value) => _postEffects.Value.SetValue(__self, value);
		public static ScreenEffectManager GetScreenEffectManager(this PlayerStats __self) => _screenEffectManager.Value.GetValue(__self);
		public static void SetScreenEffectManager(this PlayerStats __self, ScreenEffectManager value) => _screenEffectManager.Value.SetValue(__self, value);
		public static ArmorHandler GetArmorHandler(this PlayerStats __self) => _armorHandler.Value.GetValue(__self);
		public static void SetArmorHandler(this PlayerStats __self, ArmorHandler value) => _armorHandler.Value.SetValue(__self, value);
		public static float GetSineTime(this PlayerStats __self) => _sineTime.Value.GetValue(__self);
		public static void SetSineTime(this PlayerStats __self, float value) => _sineTime.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<PlayerStats>> _Awake757602046 =
				new System.Lazy<MethodAccessor<PlayerStats>>(() => MethodAccessor<PlayerStats>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<PlayerStats>> _Start757602046 =
				new System.Lazy<MethodAccessor<PlayerStats>>(() => MethodAccessor<PlayerStats>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<PlayerStats>> _Update757602046 =
				new System.Lazy<MethodAccessor<PlayerStats>>(() => MethodAccessor<PlayerStats>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<PlayerStats>> _UpdateUISliders757602046 =
				new System.Lazy<MethodAccessor<PlayerStats>>(() => MethodAccessor<PlayerStats>.Create("UpdateUISliders"));
		private static readonly System.Lazy<MethodAccessor<PlayerStats>> _HandleBonusSlider2360087928 =
				new System.Lazy<MethodAccessor<PlayerStats>>(() => MethodAccessor<PlayerStats>.Create("HandleBonusSlider", typeof(UISlider_Stat), typeof(UISlider_Stat), typeof(UnityEngine.GameObject), typeof(Stat_Target), typeof(Stat_Target), typeof(bool), typeof(bool)));
		private static readonly System.Lazy<MethodAccessor<PlayerStats>> _HandleUIFeedback757602046 =
				new System.Lazy<MethodAccessor<PlayerStats>>(() => MethodAccessor<PlayerStats>.Create("HandleUIFeedback"));
		private static readonly System.Lazy<MethodAccessor<PlayerStats>> _HandleSoundFeedback757602046 =
				new System.Lazy<MethodAccessor<PlayerStats>>(() => MethodAccessor<PlayerStats>.Create("HandleSoundFeedback"));
		private static readonly System.Lazy<MethodAccessor<PlayerStats>> _SetOxygenUI757602046 =
				new System.Lazy<MethodAccessor<PlayerStats>>(() => MethodAccessor<PlayerStats>.Create("SetOxygenUI"));
		private static readonly System.Lazy<MethodAccessor<PlayerStats>> _PlaySoundOnInterval3485710711 =
				new System.Lazy<MethodAccessor<PlayerStats>>(() => MethodAccessor<PlayerStats>.Create("PlaySoundOnInterval", typeof(FMODUnity.StudioEventEmitter)));
		private static readonly System.Lazy<MethodAccessor<PlayerStats>> _ShouldClearBuffs757602046 =
				new System.Lazy<MethodAccessor<PlayerStats>>(() => MethodAccessor<PlayerStats>.Create("ShouldClearBuffs"));

		public static void Awake(this PlayerStats __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this PlayerStats __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this PlayerStats __self) => _Update757602046.Value.Invoke(__self);
		public static void UpdateUISliders(this PlayerStats __self) => _UpdateUISliders757602046.Value.Invoke(__self);
		public static void HandleBonusSlider(this PlayerStats __self, UISlider_Stat normalSlider, UISlider_Stat bonusSlider, UnityEngine.GameObject bonusUIBackground, Stat_Target normal, Stat_Target bonus, bool forceShowBonusSlider, bool simplified) => _HandleBonusSlider2360087928.Value.Invoke(__self, normalSlider, bonusSlider, bonusUIBackground, normal, bonus, forceShowBonusSlider, simplified);
		public static void HandleUIFeedback(this PlayerStats __self) => _HandleUIFeedback757602046.Value.Invoke(__self);
		public static void HandleSoundFeedback(this PlayerStats __self) => _HandleSoundFeedback757602046.Value.Invoke(__self);
		public static void SetOxygenUI(this PlayerStats __self) => _SetOxygenUI757602046.Value.Invoke(__self);
		public static System.Collections.IEnumerator PlaySoundOnInterval(this PlayerStats __self, FMODUnity.StudioEventEmitter emitter) => (System.Collections.IEnumerator)_PlaySoundOnInterval3485710711.Value.Invoke(__self, emitter);
		public static bool ShouldClearBuffs(this PlayerStats __self) => (bool)_ShouldClearBuffs757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_RemovePlaceables
	{

		private static readonly System.Lazy<FieldAccessor<RemovePlaceables, float>> _removeTime =
				new System.Lazy<FieldAccessor<RemovePlaceables, float>>(() => FieldAccessor<RemovePlaceables, float>.Create("removeTime"));
		private static readonly System.Lazy<FieldAccessor<RemovePlaceables, float>> _removeTimer =
				new System.Lazy<FieldAccessor<RemovePlaceables, float>>(() => FieldAccessor<RemovePlaceables, float>.Create("removeTimer"));
		private static readonly System.Lazy<FieldAccessor<RemovePlaceables, Network_Player>> _playerNetwork =
				new System.Lazy<FieldAccessor<RemovePlaceables, Network_Player>>(() => FieldAccessor<RemovePlaceables, Network_Player>.Create("playerNetwork"));
		private static readonly System.Lazy<FieldAccessor<RemovePlaceables, CanvasHelper>> _canvas =
				new System.Lazy<FieldAccessor<RemovePlaceables, CanvasHelper>>(() => FieldAccessor<RemovePlaceables, CanvasHelper>.Create("canvas"));
		private static readonly System.Lazy<FieldAccessor<RemovePlaceables, Block>> _currentBlock =
				new System.Lazy<FieldAccessor<RemovePlaceables, Block>>(() => FieldAccessor<RemovePlaceables, Block>.Create("currentBlock"));
		private static readonly System.Lazy<FieldAccessor<RemovePlaceables, bool>> _showingText =
				new System.Lazy<FieldAccessor<RemovePlaceables, bool>>(() => FieldAccessor<RemovePlaceables, bool>.Create("showingText"));

		public static float GetRemoveTime(this RemovePlaceables __self) => _removeTime.Value.GetValue(__self);
		public static void SetRemoveTime(this RemovePlaceables __self, float value) => _removeTime.Value.SetValue(__self, value);
		public static float GetRemoveTimer(this RemovePlaceables __self) => _removeTimer.Value.GetValue(__self);
		public static void SetRemoveTimer(this RemovePlaceables __self, float value) => _removeTimer.Value.SetValue(__self, value);
		public static Network_Player GetPlayerNetwork(this RemovePlaceables __self) => _playerNetwork.Value.GetValue(__self);
		public static void SetPlayerNetwork(this RemovePlaceables __self, Network_Player value) => _playerNetwork.Value.SetValue(__self, value);
		public static CanvasHelper GetCanvas(this RemovePlaceables __self) => _canvas.Value.GetValue(__self);
		public static void SetCanvas(this RemovePlaceables __self, CanvasHelper value) => _canvas.Value.SetValue(__self, value);
		public static Block GetCurrentBlock(this RemovePlaceables __self) => _currentBlock.Value.GetValue(__self);
		public static void SetCurrentBlock(this RemovePlaceables __self, Block value) => _currentBlock.Value.SetValue(__self, value);
		public static bool GetShowingText(this RemovePlaceables __self) => _showingText.Value.GetValue(__self);
		public static void SetShowingText(this RemovePlaceables __self, bool value) => _showingText.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<RemovePlaceables>> _Awake757602046 =
				new System.Lazy<MethodAccessor<RemovePlaceables>>(() => MethodAccessor<RemovePlaceables>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<RemovePlaceables>> _Start757602046 =
				new System.Lazy<MethodAccessor<RemovePlaceables>>(() => MethodAccessor<RemovePlaceables>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<RemovePlaceables>> _Update757602046 =
				new System.Lazy<MethodAccessor<RemovePlaceables>>(() => MethodAccessor<RemovePlaceables>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<RemovePlaceables>> _CheckForCurrentBlock757602046 =
				new System.Lazy<MethodAccessor<RemovePlaceables>>(() => MethodAccessor<RemovePlaceables>.Create("CheckForCurrentBlock"));
		private static readonly System.Lazy<MethodAccessor<RemovePlaceables>> _ResetRemove757602046 =
				new System.Lazy<MethodAccessor<RemovePlaceables>>(() => MethodAccessor<RemovePlaceables>.Create("ResetRemove"));
		private static readonly System.Lazy<MethodAccessor<RemovePlaceables>> _PickupBlock3483718959 =
				new System.Lazy<MethodAccessor<RemovePlaceables>>(() => MethodAccessor<RemovePlaceables>.Create("PickupBlock", typeof(Block)));

		public static void Awake(this RemovePlaceables __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this RemovePlaceables __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this RemovePlaceables __self) => _Update757602046.Value.Invoke(__self);
		public static bool CheckForCurrentBlock(this RemovePlaceables __self) => (bool)_CheckForCurrentBlock757602046.Value.Invoke(__self);
		public static void ResetRemove(this RemovePlaceables __self) => _ResetRemove757602046.Value.Invoke(__self);
		public static void PickupBlock(this RemovePlaceables __self, Block block) => _PickupBlock3483718959.Value.Invoke(__self, block);

	}

	public static class PrivateAccessor_RessurectComponent
	{

		private static readonly System.Lazy<FieldAccessor<RessurectComponent, Network_Player>> _playerNetwork =
				new System.Lazy<FieldAccessor<RessurectComponent, Network_Player>>(() => FieldAccessor<RessurectComponent, Network_Player>.Create("playerNetwork"));
		private static readonly System.Lazy<FieldAccessor<RessurectComponent, UnityEngine.Transform>> _firstPersonCarryTransform =
				new System.Lazy<FieldAccessor<RessurectComponent, UnityEngine.Transform>>(() => FieldAccessor<RessurectComponent, UnityEngine.Transform>.Create("firstPersonCarryTransform"));
		private static readonly System.Lazy<FieldAccessor<RessurectComponent, UnityEngine.Transform>> _thirdPersonCarryTransform =
				new System.Lazy<FieldAccessor<RessurectComponent, UnityEngine.Transform>>(() => FieldAccessor<RessurectComponent, UnityEngine.Transform>.Create("thirdPersonCarryTransform"));
		private static readonly System.Lazy<FieldAccessor<RessurectComponent, bool>> _isCarrying =
				new System.Lazy<FieldAccessor<RessurectComponent, bool>>(() => FieldAccessor<RessurectComponent, bool>.Create("isCarrying"));
		private static readonly System.Lazy<FieldAccessor<RessurectComponent, bool>> _beingCarried =
				new System.Lazy<FieldAccessor<RessurectComponent, bool>>(() => FieldAccessor<RessurectComponent, bool>.Create("beingCarried"));
		private static readonly System.Lazy<FieldAccessor<RessurectComponent, bool>> _aimingAtDead =
				new System.Lazy<FieldAccessor<RessurectComponent, bool>>(() => FieldAccessor<RessurectComponent, bool>.Create("aimingAtDead"));
		private static readonly System.Lazy<FieldAccessor<RessurectComponent, DisplayTextManager>> _displayTextManager =
				new System.Lazy<FieldAccessor<RessurectComponent, DisplayTextManager>>(() => FieldAccessor<RessurectComponent, DisplayTextManager>.Create("displayTextManager"));
		private static readonly System.Lazy<FieldAccessor<RessurectComponent, Network_Player>> _carriedPlayer =
				new System.Lazy<FieldAccessor<RessurectComponent, Network_Player>>(() => FieldAccessor<RessurectComponent, Network_Player>.Create("carriedPlayer"));
		private static readonly System.Lazy<FieldAccessor<RessurectComponent, Network_Player>> _carriedByPlayer =
				new System.Lazy<FieldAccessor<RessurectComponent, Network_Player>>(() => FieldAccessor<RessurectComponent, Network_Player>.Create("carriedByPlayer"));
		private static readonly System.Lazy<FieldAccessor<RessurectComponent, Network_Player>> _incapacitatedPlayerAtCursor =
				new System.Lazy<FieldAccessor<RessurectComponent, Network_Player>>(() => FieldAccessor<RessurectComponent, Network_Player>.Create("incapacitatedPlayerAtCursor"));

		public static Network_Player GetPlayerNetwork(this RessurectComponent __self) => _playerNetwork.Value.GetValue(__self);
		public static void SetPlayerNetwork(this RessurectComponent __self, Network_Player value) => _playerNetwork.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetFirstPersonCarryTransform(this RessurectComponent __self) => _firstPersonCarryTransform.Value.GetValue(__self);
		public static void SetFirstPersonCarryTransform(this RessurectComponent __self, UnityEngine.Transform value) => _firstPersonCarryTransform.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetThirdPersonCarryTransform(this RessurectComponent __self) => _thirdPersonCarryTransform.Value.GetValue(__self);
		public static void SetThirdPersonCarryTransform(this RessurectComponent __self, UnityEngine.Transform value) => _thirdPersonCarryTransform.Value.SetValue(__self, value);
		public static bool GetIsCarrying(this RessurectComponent __self) => _isCarrying.Value.GetValue(__self);
		public static void SetIsCarrying(this RessurectComponent __self, bool value) => _isCarrying.Value.SetValue(__self, value);
		public static bool GetBeingCarried(this RessurectComponent __self) => _beingCarried.Value.GetValue(__self);
		public static void SetBeingCarried(this RessurectComponent __self, bool value) => _beingCarried.Value.SetValue(__self, value);
		public static bool GetAimingAtDead(this RessurectComponent __self) => _aimingAtDead.Value.GetValue(__self);
		public static void SetAimingAtDead(this RessurectComponent __self, bool value) => _aimingAtDead.Value.SetValue(__self, value);
		public static DisplayTextManager GetDisplayTextManager(this RessurectComponent __self) => _displayTextManager.Value.GetValue(__self);
		public static void SetDisplayTextManager(this RessurectComponent __self, DisplayTextManager value) => _displayTextManager.Value.SetValue(__self, value);
		public static Network_Player GetCarriedPlayer(this RessurectComponent __self) => _carriedPlayer.Value.GetValue(__self);
		public static void SetCarriedPlayer(this RessurectComponent __self, Network_Player value) => _carriedPlayer.Value.SetValue(__self, value);
		public static Network_Player GetCarriedByPlayer(this RessurectComponent __self) => _carriedByPlayer.Value.GetValue(__self);
		public static void SetCarriedByPlayer(this RessurectComponent __self, Network_Player value) => _carriedByPlayer.Value.SetValue(__self, value);
		public static Network_Player GetIncapacitatedPlayerAtCursor(this RessurectComponent __self) => _incapacitatedPlayerAtCursor.Value.GetValue(__self);
		public static void SetIncapacitatedPlayerAtCursor(this RessurectComponent __self, Network_Player value) => _incapacitatedPlayerAtCursor.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<RessurectComponent>> _Start757602046 =
				new System.Lazy<MethodAccessor<RessurectComponent>>(() => MethodAccessor<RessurectComponent>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<RessurectComponent>> _Update757602046 =
				new System.Lazy<MethodAccessor<RessurectComponent>>(() => MethodAccessor<RessurectComponent>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<RessurectComponent>> _CheckForPlayerToCarry757602046 =
				new System.Lazy<MethodAccessor<RessurectComponent>>(() => MethodAccessor<RessurectComponent>.Create("CheckForPlayerToCarry"));
		private static readonly System.Lazy<MethodAccessor<RessurectComponent>> _HandleCarrying757602046 =
				new System.Lazy<MethodAccessor<RessurectComponent>>(() => MethodAccessor<RessurectComponent>.Create("HandleCarrying"));

		public static void Start(this RessurectComponent __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this RessurectComponent __self) => _Update757602046.Value.Invoke(__self);
		public static void CheckForPlayerToCarry(this RessurectComponent __self) => _CheckForPlayerToCarry757602046.Value.Invoke(__self);
		public static void HandleCarrying(this RessurectComponent __self) => _HandleCarrying757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Stat
	{

		private static readonly System.Lazy<FieldAccessor<Stat, float>> _max =
				new System.Lazy<FieldAccessor<Stat, float>>(() => FieldAccessor<Stat, float>.Create("max"));
		private static readonly System.Lazy<FieldAccessor<Stat, float>> _value =
				new System.Lazy<FieldAccessor<Stat, float>>(() => FieldAccessor<Stat, float>.Create("value"));
		private static readonly System.Lazy<FieldAccessor<Stat, float>> _maxValue =
				new System.Lazy<FieldAccessor<Stat, float>>(() => FieldAccessor<Stat, float>.Create("maxValue"));
		private static readonly System.Lazy<FieldAccessor<Stat, float>> _startValue =
				new System.Lazy<FieldAccessor<Stat, float>>(() => FieldAccessor<Stat, float>.Create("startValue"));

		public static float GetMax(this Stat __self) => _max.Value.GetValue(__self);
		public static void SetMax(this Stat __self, float value) => _max.Value.SetValue(__self, value);
		public static float GetValue(this Stat __self) => _value.Value.GetValue(__self);
		public static void SetValue(this Stat __self, float value) => _value.Value.SetValue(__self, value);
		public static float GetMaxValue(this Stat __self) => _maxValue.Value.GetValue(__self);
		public static void SetMaxValue(this Stat __self, float value) => _maxValue.Value.SetValue(__self, value);
		public static float GetStartValue(this Stat __self) => _startValue.Value.GetValue(__self);
		public static void SetStartValue(this Stat __self, float value) => _startValue.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Stat>> _Awake757602046 =
				new System.Lazy<MethodAccessor<Stat>>(() => MethodAccessor<Stat>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<Stat>> _ChangeValue3698168060 =
				new System.Lazy<MethodAccessor<Stat>>(() => MethodAccessor<Stat>.Create("ChangeValue", typeof(float), typeof(float)));

		public static void Awake(this Stat __self) => _Awake757602046.Value.Invoke(__self);
		public static void ChangeValue(this Stat __self, float diff, float newValue) => _ChangeValue3698168060.Value.Invoke(__self, diff, newValue);

	}

	public static class PrivateAccessor_Stat_Bonus_Consumable
	{

		private static readonly System.Lazy<MethodAccessor<Stat_Bonus_Consumable>> _Awake757602046 =
				new System.Lazy<MethodAccessor<Stat_Bonus_Consumable>>(() => MethodAccessor<Stat_Bonus_Consumable>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<Stat_Bonus_Consumable>> _Update757602046 =
				new System.Lazy<MethodAccessor<Stat_Bonus_Consumable>>(() => MethodAccessor<Stat_Bonus_Consumable>.Create("Update"));

		public static void Awake(this Stat_Bonus_Consumable __self) => _Awake757602046.Value.Invoke(__self);
		public static void Update(this Stat_Bonus_Consumable __self) => _Update757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Stat_Consumable
	{

		private static readonly System.Lazy<FieldAccessor<Stat_Consumable, bool>> __consuming =
				new System.Lazy<FieldAccessor<Stat_Consumable, bool>>(() => FieldAccessor<Stat_Consumable, bool>.Create("_consuming"));
		private static readonly System.Lazy<FieldAccessor<Stat_Consumable, float>> _lostPerSecondDefault =
				new System.Lazy<FieldAccessor<Stat_Consumable, float>>(() => FieldAccessor<Stat_Consumable, float>.Create("lostPerSecondDefault"));
		private static readonly System.Lazy<FieldAccessor<Stat_Consumable, float>> _consumeTime =
				new System.Lazy<FieldAccessor<Stat_Consumable, float>>(() => FieldAccessor<Stat_Consumable, float>.Create("consumeTime"));
		private static readonly System.Lazy<FieldAccessor<Stat_Consumable, YieldManipulator>> _rawManipulator =
				new System.Lazy<FieldAccessor<Stat_Consumable, YieldManipulator>>(() => FieldAccessor<Stat_Consumable, YieldManipulator>.Create("rawManipulator"));
		private static readonly System.Lazy<FieldAccessor<Stat_Consumable, YieldManipulator>> _cookedManipulator =
				new System.Lazy<FieldAccessor<Stat_Consumable, YieldManipulator>>(() => FieldAccessor<Stat_Consumable, YieldManipulator>.Create("cookedManipulator"));

		public static bool Get_consuming(this Stat_Consumable __self) => __consuming.Value.GetValue(__self);
		public static void Set_consuming(this Stat_Consumable __self, bool value) => __consuming.Value.SetValue(__self, value);
		public static float GetLostPerSecondDefault(this Stat_Consumable __self) => _lostPerSecondDefault.Value.GetValue(__self);
		public static void SetLostPerSecondDefault(this Stat_Consumable __self, float value) => _lostPerSecondDefault.Value.SetValue(__self, value);
		public static float GetConsumeTime(this Stat_Consumable __self) => _consumeTime.Value.GetValue(__self);
		public static void SetConsumeTime(this Stat_Consumable __self, float value) => _consumeTime.Value.SetValue(__self, value);
		public static YieldManipulator GetRawManipulator(this Stat_Consumable __self) => _rawManipulator.Value.GetValue(__self);
		public static void SetRawManipulator(this Stat_Consumable __self, YieldManipulator value) => _rawManipulator.Value.SetValue(__self, value);
		public static YieldManipulator GetCookedManipulator(this Stat_Consumable __self) => _cookedManipulator.Value.GetValue(__self);
		public static void SetCookedManipulator(this Stat_Consumable __self, YieldManipulator value) => _cookedManipulator.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Stat_Consumable>> _Update757602046 =
				new System.Lazy<MethodAccessor<Stat_Consumable>>(() => MethodAccessor<Stat_Consumable>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<Stat_Consumable>> _OnValidate757602046 =
				new System.Lazy<MethodAccessor<Stat_Consumable>>(() => MethodAccessor<Stat_Consumable>.Create("OnValidate"));
		private static readonly System.Lazy<MethodAccessor<Stat_Consumable>> _ChangeValue3698168060 =
				new System.Lazy<MethodAccessor<Stat_Consumable>>(() => MethodAccessor<Stat_Consumable>.Create("ChangeValue", typeof(float), typeof(float)));

		public static void Update(this Stat_Consumable __self) => _Update757602046.Value.Invoke(__self);
		public static void OnValidate(this Stat_Consumable __self) => _OnValidate757602046.Value.Invoke(__self);
		public static void ChangeValue(this Stat_Consumable __self, float diff, float newValue) => _ChangeValue3698168060.Value.Invoke(__self, diff, newValue);

	}

	public static class PrivateAccessor_Stat_Health
	{

		private static readonly System.Lazy<FieldAccessor<Stat_Health, float>> _regenPerSecond =
				new System.Lazy<FieldAccessor<Stat_Health, float>>(() => FieldAccessor<Stat_Health, float>.Create("regenPerSecond"));

		public static float GetRegenPerSecond(this Stat_Health __self) => _regenPerSecond.Value.GetValue(__self);
		public static void SetRegenPerSecond(this Stat_Health __self, float value) => _regenPerSecond.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Stat_Health>> _ChangeValue3698168060 =
				new System.Lazy<MethodAccessor<Stat_Health>>(() => MethodAccessor<Stat_Health>.Create("ChangeValue", typeof(float), typeof(float)));

		public static void ChangeValue(this Stat_Health __self, float diff, float newValue) => _ChangeValue3698168060.Value.Invoke(__self, diff, newValue);

	}

	public static class PrivateAccessor_Stat_Oxygen
	{

		private static readonly System.Lazy<FieldAccessor<Stat_Oxygen, float>> _oxygenLostPerSecond =
				new System.Lazy<FieldAccessor<Stat_Oxygen, float>>(() => FieldAccessor<Stat_Oxygen, float>.Create("oxygenLostPerSecond"));
		private static readonly System.Lazy<FieldAccessor<Stat_Oxygen, PersonController>> _personController =
				new System.Lazy<FieldAccessor<Stat_Oxygen, PersonController>>(() => FieldAccessor<Stat_Oxygen, PersonController>.Create("personController"));

		public static float GetOxygenLostPerSecond(this Stat_Oxygen __self) => _oxygenLostPerSecond.Value.GetValue(__self);
		public static void SetOxygenLostPerSecond(this Stat_Oxygen __self, float value) => _oxygenLostPerSecond.Value.SetValue(__self, value);
		public static PersonController GetPersonController(this Stat_Oxygen __self) => _personController.Value.GetValue(__self);
		public static void SetPersonController(this Stat_Oxygen __self, PersonController value) => _personController.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Stat_Oxygen>> _Update757602046 =
				new System.Lazy<MethodAccessor<Stat_Oxygen>>(() => MethodAccessor<Stat_Oxygen>.Create("Update"));

		public static void Update(this Stat_Oxygen __self) => _Update757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Stat_WellBeing
	{

		private static readonly System.Lazy<FieldAccessor<Stat_WellBeing, Stat_Consumable>> _stat_hunger =
				new System.Lazy<FieldAccessor<Stat_WellBeing, Stat_Consumable>>(() => FieldAccessor<Stat_WellBeing, Stat_Consumable>.Create("stat_hunger"));
		private static readonly System.Lazy<FieldAccessor<Stat_WellBeing, Stat_Consumable>> _stat_thirst =
				new System.Lazy<FieldAccessor<Stat_WellBeing, Stat_Consumable>>(() => FieldAccessor<Stat_WellBeing, Stat_Consumable>.Create("stat_thirst"));
		private static readonly System.Lazy<FieldAccessor<Stat_WellBeing, Network_Player>> _playerNetwork =
				new System.Lazy<FieldAccessor<Stat_WellBeing, Network_Player>>(() => FieldAccessor<Stat_WellBeing, Network_Player>.Create("playerNetwork"));

		public static Stat_Consumable GetStat_hunger(this Stat_WellBeing __self) => _stat_hunger.Value.GetValue(__self);
		public static void SetStat_hunger(this Stat_WellBeing __self, Stat_Consumable value) => _stat_hunger.Value.SetValue(__self, value);
		public static Stat_Consumable GetStat_thirst(this Stat_WellBeing __self) => _stat_thirst.Value.GetValue(__self);
		public static void SetStat_thirst(this Stat_WellBeing __self, Stat_Consumable value) => _stat_thirst.Value.SetValue(__self, value);
		public static Network_Player GetPlayerNetwork(this Stat_WellBeing __self) => _playerNetwork.Value.GetValue(__self);
		public static void SetPlayerNetwork(this Stat_WellBeing __self, Network_Player value) => _playerNetwork.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Stat_WellBeing>> _Start757602046 =
				new System.Lazy<MethodAccessor<Stat_WellBeing>>(() => MethodAccessor<Stat_WellBeing>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<Stat_WellBeing>> _Update757602046 =
				new System.Lazy<MethodAccessor<Stat_WellBeing>>(() => MethodAccessor<Stat_WellBeing>.Create("Update"));

		public static void Start(this Stat_WellBeing __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this Stat_WellBeing __self) => _Update757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_ThirdPerson
	{

		private static readonly System.Lazy<FieldAccessor<ThirdPerson, AnimatorStorage>> _storage =
				new System.Lazy<FieldAccessor<ThirdPerson, AnimatorStorage>>(() => FieldAccessor<ThirdPerson, AnimatorStorage>.Create("storage"));
		private static readonly System.Lazy<FieldAccessor<ThirdPerson, Network_Player>> _playerNetwork =
				new System.Lazy<FieldAccessor<ThirdPerson, Network_Player>>(() => FieldAccessor<ThirdPerson, Network_Player>.Create("playerNetwork"));
		private static readonly System.Lazy<FieldAccessor<ThirdPerson, Settings>> _settings =
				new System.Lazy<FieldAccessor<ThirdPerson, Settings>>(() => FieldAccessor<ThirdPerson, Settings>.Create("settings"));
		private static readonly System.Lazy<FieldAccessor<ThirdPerson, CharacterModelModifications>> _currentModel =
				new System.Lazy<FieldAccessor<ThirdPerson, CharacterModelModifications>>(() => FieldAccessor<ThirdPerson, CharacterModelModifications>.Create("currentModel"));
		private static readonly System.Lazy<FieldAccessor<ThirdPerson, CanvasHelper>> _canvas =
				new System.Lazy<FieldAccessor<ThirdPerson, CanvasHelper>>(() => FieldAccessor<ThirdPerson, CanvasHelper>.Create("canvas"));
		private static readonly System.Lazy<FieldAccessor<ThirdPerson, UnityEngine.Transform>> _cameraTransform =
				new System.Lazy<FieldAccessor<ThirdPerson, UnityEngine.Transform>>(() => FieldAccessor<ThirdPerson, UnityEngine.Transform>.Create("cameraTransform"));
		private static readonly System.Lazy<FieldAccessor<ThirdPerson, UnityEngine.Transform>> _cameraRotateTransform =
				new System.Lazy<FieldAccessor<ThirdPerson, UnityEngine.Transform>>(() => FieldAccessor<ThirdPerson, UnityEngine.Transform>.Create("cameraRotateTransform"));
		private static readonly System.Lazy<FieldAccessor<ThirdPerson, UnityEngine.Vector3>> _localCameraRotation =
				new System.Lazy<FieldAccessor<ThirdPerson, UnityEngine.Vector3>>(() => FieldAccessor<ThirdPerson, UnityEngine.Vector3>.Create("localCameraRotation"));
		private static readonly System.Lazy<FieldAccessor<ThirdPerson, bool>> _thirdPersonState =
				new System.Lazy<FieldAccessor<ThirdPerson, bool>>(() => FieldAccessor<ThirdPerson, bool>.Create("thirdPersonState"));
		private static readonly System.Lazy<FieldAccessor<ThirdPerson, bool>> _thirdPersonModel =
				new System.Lazy<FieldAccessor<ThirdPerson, bool>>(() => FieldAccessor<ThirdPerson, bool>.Create("thirdPersonModel"));
		private static readonly System.Lazy<FieldAccessor<ThirdPerson, float>> _zoom =
				new System.Lazy<FieldAccessor<ThirdPerson, float>>(() => FieldAccessor<ThirdPerson, float>.Create("zoom"));
		private static readonly System.Lazy<FieldAccessor<ThirdPerson, float>> _targetZoom =
				new System.Lazy<FieldAccessor<ThirdPerson, float>>(() => FieldAccessor<ThirdPerson, float>.Create("targetZoom"));

		public static AnimatorStorage GetStorage(this ThirdPerson __self) => _storage.Value.GetValue(__self);
		public static void SetStorage(this ThirdPerson __self, AnimatorStorage value) => _storage.Value.SetValue(__self, value);
		public static Network_Player GetPlayerNetwork(this ThirdPerson __self) => _playerNetwork.Value.GetValue(__self);
		public static void SetPlayerNetwork(this ThirdPerson __self, Network_Player value) => _playerNetwork.Value.SetValue(__self, value);
		public static Settings GetSettings(this ThirdPerson __self) => _settings.Value.GetValue(__self);
		public static void SetSettings(this ThirdPerson __self, Settings value) => _settings.Value.SetValue(__self, value);
		public static CharacterModelModifications GetCurrentModel(this ThirdPerson __self) => _currentModel.Value.GetValue(__self);
		public static void SetCurrentModel(this ThirdPerson __self, CharacterModelModifications value) => _currentModel.Value.SetValue(__self, value);
		public static CanvasHelper GetCanvas(this ThirdPerson __self) => _canvas.Value.GetValue(__self);
		public static void SetCanvas(this ThirdPerson __self, CanvasHelper value) => _canvas.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetCameraTransform(this ThirdPerson __self) => _cameraTransform.Value.GetValue(__self);
		public static void SetCameraTransform(this ThirdPerson __self, UnityEngine.Transform value) => _cameraTransform.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetCameraRotateTransform(this ThirdPerson __self) => _cameraRotateTransform.Value.GetValue(__self);
		public static void SetCameraRotateTransform(this ThirdPerson __self, UnityEngine.Transform value) => _cameraRotateTransform.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetLocalCameraRotation(this ThirdPerson __self) => _localCameraRotation.Value.GetValue(__self);
		public static void SetLocalCameraRotation(this ThirdPerson __self, UnityEngine.Vector3 value) => _localCameraRotation.Value.SetValue(__self, value);
		public static bool GetThirdPersonState(this ThirdPerson __self) => _thirdPersonState.Value.GetValue(__self);
		public static void SetThirdPersonState(this ThirdPerson __self, bool value) => _thirdPersonState.Value.SetValue(__self, value);
		public static bool GetThirdPersonModel(this ThirdPerson __self) => _thirdPersonModel.Value.GetValue(__self);
		public static void SetThirdPersonModel(this ThirdPerson __self, bool value) => _thirdPersonModel.Value.SetValue(__self, value);
		public static float GetZoom(this ThirdPerson __self) => _zoom.Value.GetValue(__self);
		public static void SetZoom(this ThirdPerson __self, float value) => _zoom.Value.SetValue(__self, value);
		public static float GetTargetZoom(this ThirdPerson __self) => _targetZoom.Value.GetValue(__self);
		public static void SetTargetZoom(this ThirdPerson __self, float value) => _targetZoom.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<ThirdPerson>> _Start757602046 =
				new System.Lazy<MethodAccessor<ThirdPerson>>(() => MethodAccessor<ThirdPerson>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<ThirdPerson>> _Update757602046 =
				new System.Lazy<MethodAccessor<ThirdPerson>>(() => MethodAccessor<ThirdPerson>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<ThirdPerson>> _CanGoIntoThirdperson757602046 =
				new System.Lazy<MethodAccessor<ThirdPerson>>(() => MethodAccessor<ThirdPerson>.Create("CanGoIntoThirdperson"));
		private static readonly System.Lazy<MethodAccessor<ThirdPerson>> _SetThirdPersonModel3423983438 =
				new System.Lazy<MethodAccessor<ThirdPerson>>(() => MethodAccessor<ThirdPerson>.Create("SetThirdPersonModel", typeof(bool), typeof(bool)));
		private static readonly System.Lazy<MethodAccessor<ThirdPerson>> _SetThirdPersonState3423983438 =
				new System.Lazy<MethodAccessor<ThirdPerson>>(() => MethodAccessor<ThirdPerson>.Create("SetThirdPersonState", typeof(bool), typeof(bool)));
		private static readonly System.Lazy<MethodAccessor<ThirdPerson>> _HandleThirdPerson757602046 =
				new System.Lazy<MethodAccessor<ThirdPerson>>(() => MethodAccessor<ThirdPerson>.Create("HandleThirdPerson"));
		private static readonly System.Lazy<MethodAccessor<ThirdPerson>> _SetSpecificAnimationParameters757602046 =
				new System.Lazy<MethodAccessor<ThirdPerson>>(() => MethodAccessor<ThirdPerson>.Create("SetSpecificAnimationParameters"));

		public static void Start(this ThirdPerson __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this ThirdPerson __self) => _Update757602046.Value.Invoke(__self);
		public static bool CanGoIntoThirdperson(this ThirdPerson __self) => (bool)_CanGoIntoThirdperson757602046.Value.Invoke(__self);
		public static void SetThirdPersonModel(this ThirdPerson __self, bool thirdPersonModel, bool force) => _SetThirdPersonModel3423983438.Value.Invoke(__self, thirdPersonModel, force);
		public static void SetThirdPersonState(this ThirdPerson __self, bool thirdPersonState, bool force) => _SetThirdPersonState3423983438.Value.Invoke(__self, thirdPersonState, force);
		public static void HandleThirdPerson(this ThirdPerson __self) => _HandleThirdPerson757602046.Value.Invoke(__self);
		public static void SetSpecificAnimationParameters(this ThirdPerson __self) => _SetSpecificAnimationParameters757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_ZiplinePlayer
	{

		private static readonly System.Lazy<FieldAccessor<ZiplinePlayer, AttachPlayer>> _attachPlayerScript =
				new System.Lazy<FieldAccessor<ZiplinePlayer, AttachPlayer>>(() => FieldAccessor<ZiplinePlayer, AttachPlayer>.Create("attachPlayerScript"));
		private static readonly System.Lazy<FieldAccessor<ZiplinePlayer, UnityEngine.GameObject>> _ziplineTool =
				new System.Lazy<FieldAccessor<ZiplinePlayer, UnityEngine.GameObject>>(() => FieldAccessor<ZiplinePlayer, UnityEngine.GameObject>.Create("ziplineTool"));
		private static readonly System.Lazy<FieldAccessor<ZiplinePlayer, UnityEngine.GameObject>> _ziplineToolEletric =
				new System.Lazy<FieldAccessor<ZiplinePlayer, UnityEngine.GameObject>>(() => FieldAccessor<ZiplinePlayer, UnityEngine.GameObject>.Create("ziplineToolEletric"));
		private static readonly System.Lazy<FieldAccessor<ZiplinePlayer, UnityEngine.Transform>> _ziplineToolPivot =
				new System.Lazy<FieldAccessor<ZiplinePlayer, UnityEngine.Transform>>(() => FieldAccessor<ZiplinePlayer, UnityEngine.Transform>.Create("ziplineToolPivot"));
		private static readonly System.Lazy<FieldAccessor<ZiplinePlayer, UnityEngine.Transform>> _ziplineElectricToolPivot =
				new System.Lazy<FieldAccessor<ZiplinePlayer, UnityEngine.Transform>>(() => FieldAccessor<ZiplinePlayer, UnityEngine.Transform>.Create("ziplineElectricToolPivot"));
		private static readonly System.Lazy<FieldAccessor<ZiplinePlayer, float>> _zipplineYOffset =
				new System.Lazy<FieldAccessor<ZiplinePlayer, float>>(() => FieldAccessor<ZiplinePlayer, float>.Create("zipplineYOffset"));
		private static readonly System.Lazy<FieldAccessor<ZiplinePlayer, float>> _maxZiplineSpeed =
				new System.Lazy<FieldAccessor<ZiplinePlayer, float>>(() => FieldAccessor<ZiplinePlayer, float>.Create("maxZiplineSpeed"));
		private static readonly System.Lazy<FieldAccessor<ZiplinePlayer, float>> _maxElectricZiplineSpeed =
				new System.Lazy<FieldAccessor<ZiplinePlayer, float>>(() => FieldAccessor<ZiplinePlayer, float>.Create("maxElectricZiplineSpeed"));
		private static readonly System.Lazy<FieldAccessor<ZiplinePlayer, float>> _electricZiplineSpeed =
				new System.Lazy<FieldAccessor<ZiplinePlayer, float>>(() => FieldAccessor<ZiplinePlayer, float>.Create("electricZiplineSpeed"));
		private static readonly System.Lazy<FieldAccessor<ZiplinePlayer, float>> _ziplineSpeedDamping =
				new System.Lazy<FieldAccessor<ZiplinePlayer, float>>(() => FieldAccessor<ZiplinePlayer, float>.Create("ziplineSpeedDamping"));
		private static readonly System.Lazy<FieldAccessor<ZiplinePlayer, Interval_Float>> _ziplineSpeedAcceleration =
				new System.Lazy<FieldAccessor<ZiplinePlayer, Interval_Float>>(() => FieldAccessor<ZiplinePlayer, Interval_Float>.Create("ziplineSpeedAcceleration"));
		private static readonly System.Lazy<FieldAccessor<ZiplinePlayer, float>> _ziplineSlackScrollSpeed =
				new System.Lazy<FieldAccessor<ZiplinePlayer, float>>(() => FieldAccessor<ZiplinePlayer, float>.Create("ziplineSlackScrollSpeed"));
		private static readonly System.Lazy<FieldAccessor<ZiplinePlayer, float>> _ziplineSlackKeyboardSpeed =
				new System.Lazy<FieldAccessor<ZiplinePlayer, float>>(() => FieldAccessor<ZiplinePlayer, float>.Create("ziplineSlackKeyboardSpeed"));
		private static readonly System.Lazy<FieldAccessor<ZiplinePlayer, float>> _minDistanceFromGround =
				new System.Lazy<FieldAccessor<ZiplinePlayer, float>>(() => FieldAccessor<ZiplinePlayer, float>.Create("minDistanceFromGround"));
		private static readonly System.Lazy<FieldAccessor<ZiplinePlayer, Interval_Float>> _ziplineSlackInterval =
				new System.Lazy<FieldAccessor<ZiplinePlayer, Interval_Float>>(() => FieldAccessor<ZiplinePlayer, Interval_Float>.Create("ziplineSlackInterval"));
		private static readonly System.Lazy<FieldAccessor<ZiplinePlayer, UnityEngine.LayerMask>> _AbortCollision =
				new System.Lazy<FieldAccessor<ZiplinePlayer, UnityEngine.LayerMask>>(() => FieldAccessor<ZiplinePlayer, UnityEngine.LayerMask>.Create("AbortCollision"));
		private static readonly System.Lazy<FieldAccessor<ZiplinePlayer, float>> _AbortGroundOffset =
				new System.Lazy<FieldAccessor<ZiplinePlayer, float>>(() => FieldAccessor<ZiplinePlayer, float>.Create("AbortGroundOffset"));
		private static readonly System.Lazy<FieldAccessor<ZiplinePlayer, float>> _speedDirectionModifier =
				new System.Lazy<FieldAccessor<ZiplinePlayer, float>>(() => FieldAccessor<ZiplinePlayer, float>.Create("speedDirectionModifier"));
		private static readonly System.Lazy<FieldAccessor<ZiplinePlayer, int>> _currentZiplineModelIndex =
				new System.Lazy<FieldAccessor<ZiplinePlayer, int>>(() => FieldAccessor<ZiplinePlayer, int>.Create("currentZiplineModelIndex"));
		private static readonly System.Lazy<FieldAccessor<ZiplinePlayer, bool>> _usingMotor =
				new System.Lazy<FieldAccessor<ZiplinePlayer, bool>>(() => FieldAccessor<ZiplinePlayer, bool>.Create("usingMotor"));
		private static readonly System.Lazy<FieldAccessor<ZiplinePlayer, float>> _movementInput =
				new System.Lazy<FieldAccessor<ZiplinePlayer, float>>(() => FieldAccessor<ZiplinePlayer, float>.Create("movementInput"));
		private static readonly System.Lazy<FieldAccessor<ZiplinePlayer, UnityEngine.ParticleSystem>> _particles_FP =
				new System.Lazy<FieldAccessor<ZiplinePlayer, UnityEngine.ParticleSystem>>(() => FieldAccessor<ZiplinePlayer, UnityEngine.ParticleSystem>.Create("particles_FP"));
		private static readonly System.Lazy<FieldAccessor<ZiplinePlayer, UnityEngine.ParticleSystem>> _particles_TP =
				new System.Lazy<FieldAccessor<ZiplinePlayer, UnityEngine.ParticleSystem>>(() => FieldAccessor<ZiplinePlayer, UnityEngine.ParticleSystem>.Create("particles_TP"));
		private static readonly System.Lazy<FieldAccessor<ZiplinePlayer, UnityEngine.AnimationCurve>> _particleEmissionCurve =
				new System.Lazy<FieldAccessor<ZiplinePlayer, UnityEngine.AnimationCurve>>(() => FieldAccessor<ZiplinePlayer, UnityEngine.AnimationCurve>.Create("particleEmissionCurve"));
		private static readonly System.Lazy<FieldAccessor<ZiplinePlayer, StudioEventEmitterSustain>> _eventEmitter_Zipline =
				new System.Lazy<FieldAccessor<ZiplinePlayer, StudioEventEmitterSustain>>(() => FieldAccessor<ZiplinePlayer, StudioEventEmitterSustain>.Create("eventEmitter_Zipline"));
		private static readonly System.Lazy<FieldAccessor<ZiplinePlayer, string>> _eventRef_ZiplineImpact =
				new System.Lazy<FieldAccessor<ZiplinePlayer, string>>(() => FieldAccessor<ZiplinePlayer, string>.Create("eventRef_ZiplineImpact"));
		private static readonly System.Lazy<FieldAccessor<ZiplinePlayer, FMODUnity.StudioEventEmitter>> _eventEmitter_ZiplineMotor =
				new System.Lazy<FieldAccessor<ZiplinePlayer, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<ZiplinePlayer, FMODUnity.StudioEventEmitter>.Create("eventEmitter_ZiplineMotor"));
		private static readonly System.Lazy<FieldAccessor<ZiplinePlayer, SoundManager>> _soundManager =
				new System.Lazy<FieldAccessor<ZiplinePlayer, SoundManager>>(() => FieldAccessor<ZiplinePlayer, SoundManager>.Create("soundManager"));
		private static readonly System.Lazy<FieldAccessor<ZiplinePlayer, CanvasHelper>> _canvas =
				new System.Lazy<FieldAccessor<ZiplinePlayer, CanvasHelper>>(() => FieldAccessor<ZiplinePlayer, CanvasHelper>.Create("canvas"));
		private static readonly System.Lazy<FieldAccessor<ZiplinePlayer, MeshPath_Zipline>> _ziplinePath =
				new System.Lazy<FieldAccessor<ZiplinePlayer, MeshPath_Zipline>>(() => FieldAccessor<ZiplinePlayer, MeshPath_Zipline>.Create("ziplinePath"));
		private static readonly System.Lazy<FieldAccessor<ZiplinePlayer, Network_Player>> _player =
				new System.Lazy<FieldAccessor<ZiplinePlayer, Network_Player>>(() => FieldAccessor<ZiplinePlayer, Network_Player>.Create("player"));
		private static readonly System.Lazy<FieldAccessor<ZiplinePlayer, UnityEngine.Vector3>> _localPlayerZiplinePosition =
				new System.Lazy<FieldAccessor<ZiplinePlayer, UnityEngine.Vector3>>(() => FieldAccessor<ZiplinePlayer, UnityEngine.Vector3>.Create("localPlayerZiplinePosition"));
		private static readonly System.Lazy<FieldAccessor<ZiplinePlayer, UnityEngine.Transform>> _lockedPivot =
				new System.Lazy<FieldAccessor<ZiplinePlayer, UnityEngine.Transform>>(() => FieldAccessor<ZiplinePlayer, UnityEngine.Transform>.Create("lockedPivot"));
		private static readonly System.Lazy<FieldAccessor<ZiplinePlayer, float>> _ziplineSpeed =
				new System.Lazy<FieldAccessor<ZiplinePlayer, float>>(() => FieldAccessor<ZiplinePlayer, float>.Create("ziplineSpeed"));
		private static readonly System.Lazy<FieldAccessor<ZiplinePlayer, bool>> _canBounce =
				new System.Lazy<FieldAccessor<ZiplinePlayer, bool>>(() => FieldAccessor<ZiplinePlayer, bool>.Create("canBounce"));
		private static readonly System.Lazy<FieldAccessor<ZiplinePlayer, UnityEngine.MaterialPropertyBlock>> _mpbLinerenderer =
				new System.Lazy<FieldAccessor<ZiplinePlayer, UnityEngine.MaterialPropertyBlock>>(() => FieldAccessor<ZiplinePlayer, UnityEngine.MaterialPropertyBlock>.Create("mpbLinerenderer"));
		private static readonly System.Lazy<FieldAccessor<ZiplinePlayer, float>> _motorSoundRampUpMultipier =
				new System.Lazy<FieldAccessor<ZiplinePlayer, float>>(() => FieldAccessor<ZiplinePlayer, float>.Create("motorSoundRampUpMultipier"));
		private static readonly System.Lazy<FieldAccessor<ZiplinePlayer, float>> _motorActiveDuration =
				new System.Lazy<FieldAccessor<ZiplinePlayer, float>>(() => FieldAccessor<ZiplinePlayer, float>.Create("motorActiveDuration"));

		public static AttachPlayer GetAttachPlayerScript(this ZiplinePlayer __self) => _attachPlayerScript.Value.GetValue(__self);
		public static void SetAttachPlayerScript(this ZiplinePlayer __self, AttachPlayer value) => _attachPlayerScript.Value.SetValue(__self, value);
		public static UnityEngine.GameObject GetZiplineTool(this ZiplinePlayer __self) => _ziplineTool.Value.GetValue(__self);
		public static void SetZiplineTool(this ZiplinePlayer __self, UnityEngine.GameObject value) => _ziplineTool.Value.SetValue(__self, value);
		public static UnityEngine.GameObject GetZiplineToolEletric(this ZiplinePlayer __self) => _ziplineToolEletric.Value.GetValue(__self);
		public static void SetZiplineToolEletric(this ZiplinePlayer __self, UnityEngine.GameObject value) => _ziplineToolEletric.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetZiplineToolPivot(this ZiplinePlayer __self) => _ziplineToolPivot.Value.GetValue(__self);
		public static void SetZiplineToolPivot(this ZiplinePlayer __self, UnityEngine.Transform value) => _ziplineToolPivot.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetZiplineElectricToolPivot(this ZiplinePlayer __self) => _ziplineElectricToolPivot.Value.GetValue(__self);
		public static void SetZiplineElectricToolPivot(this ZiplinePlayer __self, UnityEngine.Transform value) => _ziplineElectricToolPivot.Value.SetValue(__self, value);
		public static float GetZipplineYOffset(this ZiplinePlayer __self) => _zipplineYOffset.Value.GetValue(__self);
		public static void SetZipplineYOffset(this ZiplinePlayer __self, float value) => _zipplineYOffset.Value.SetValue(__self, value);
		public static float GetMaxZiplineSpeed(this ZiplinePlayer __self) => _maxZiplineSpeed.Value.GetValue(__self);
		public static void SetMaxZiplineSpeed(this ZiplinePlayer __self, float value) => _maxZiplineSpeed.Value.SetValue(__self, value);
		public static float GetMaxElectricZiplineSpeed(this ZiplinePlayer __self) => _maxElectricZiplineSpeed.Value.GetValue(__self);
		public static void SetMaxElectricZiplineSpeed(this ZiplinePlayer __self, float value) => _maxElectricZiplineSpeed.Value.SetValue(__self, value);
		public static float GetElectricZiplineSpeed(this ZiplinePlayer __self) => _electricZiplineSpeed.Value.GetValue(__self);
		public static void SetElectricZiplineSpeed(this ZiplinePlayer __self, float value) => _electricZiplineSpeed.Value.SetValue(__self, value);
		public static float GetZiplineSpeedDamping(this ZiplinePlayer __self) => _ziplineSpeedDamping.Value.GetValue(__self);
		public static void SetZiplineSpeedDamping(this ZiplinePlayer __self, float value) => _ziplineSpeedDamping.Value.SetValue(__self, value);
		public static Interval_Float GetZiplineSpeedAcceleration(this ZiplinePlayer __self) => _ziplineSpeedAcceleration.Value.GetValue(__self);
		public static void SetZiplineSpeedAcceleration(this ZiplinePlayer __self, Interval_Float value) => _ziplineSpeedAcceleration.Value.SetValue(__self, value);
		public static float GetZiplineSlackScrollSpeed(this ZiplinePlayer __self) => _ziplineSlackScrollSpeed.Value.GetValue(__self);
		public static void SetZiplineSlackScrollSpeed(this ZiplinePlayer __self, float value) => _ziplineSlackScrollSpeed.Value.SetValue(__self, value);
		public static float GetZiplineSlackKeyboardSpeed(this ZiplinePlayer __self) => _ziplineSlackKeyboardSpeed.Value.GetValue(__self);
		public static void SetZiplineSlackKeyboardSpeed(this ZiplinePlayer __self, float value) => _ziplineSlackKeyboardSpeed.Value.SetValue(__self, value);
		public static float GetMinDistanceFromGround(this ZiplinePlayer __self) => _minDistanceFromGround.Value.GetValue(__self);
		public static void SetMinDistanceFromGround(this ZiplinePlayer __self, float value) => _minDistanceFromGround.Value.SetValue(__self, value);
		public static Interval_Float GetZiplineSlackInterval(this ZiplinePlayer __self) => _ziplineSlackInterval.Value.GetValue(__self);
		public static void SetZiplineSlackInterval(this ZiplinePlayer __self, Interval_Float value) => _ziplineSlackInterval.Value.SetValue(__self, value);
		public static UnityEngine.LayerMask GetAbortCollision(this ZiplinePlayer __self) => _AbortCollision.Value.GetValue(__self);
		public static void SetAbortCollision(this ZiplinePlayer __self, UnityEngine.LayerMask value) => _AbortCollision.Value.SetValue(__self, value);
		public static float GetAbortGroundOffset(this ZiplinePlayer __self) => _AbortGroundOffset.Value.GetValue(__self);
		public static void SetAbortGroundOffset(this ZiplinePlayer __self, float value) => _AbortGroundOffset.Value.SetValue(__self, value);
		public static float GetSpeedDirectionModifier(this ZiplinePlayer __self) => _speedDirectionModifier.Value.GetValue(__self);
		public static void SetSpeedDirectionModifier(this ZiplinePlayer __self, float value) => _speedDirectionModifier.Value.SetValue(__self, value);
		public static int GetCurrentZiplineModelIndex(this ZiplinePlayer __self) => _currentZiplineModelIndex.Value.GetValue(__self);
		public static void SetCurrentZiplineModelIndex(this ZiplinePlayer __self, int value) => _currentZiplineModelIndex.Value.SetValue(__self, value);
		public static bool GetUsingMotor(this ZiplinePlayer __self) => _usingMotor.Value.GetValue(__self);
		public static void SetUsingMotor(this ZiplinePlayer __self, bool value) => _usingMotor.Value.SetValue(__self, value);
		public static float GetMovementInput(this ZiplinePlayer __self) => _movementInput.Value.GetValue(__self);
		public static void SetMovementInput(this ZiplinePlayer __self, float value) => _movementInput.Value.SetValue(__self, value);
		public static UnityEngine.ParticleSystem GetParticles_FP(this ZiplinePlayer __self) => _particles_FP.Value.GetValue(__self);
		public static void SetParticles_FP(this ZiplinePlayer __self, UnityEngine.ParticleSystem value) => _particles_FP.Value.SetValue(__self, value);
		public static UnityEngine.ParticleSystem GetParticles_TP(this ZiplinePlayer __self) => _particles_TP.Value.GetValue(__self);
		public static void SetParticles_TP(this ZiplinePlayer __self, UnityEngine.ParticleSystem value) => _particles_TP.Value.SetValue(__self, value);
		public static UnityEngine.AnimationCurve GetParticleEmissionCurve(this ZiplinePlayer __self) => _particleEmissionCurve.Value.GetValue(__self);
		public static void SetParticleEmissionCurve(this ZiplinePlayer __self, UnityEngine.AnimationCurve value) => _particleEmissionCurve.Value.SetValue(__self, value);
		public static StudioEventEmitterSustain GetEventEmitter_Zipline(this ZiplinePlayer __self) => _eventEmitter_Zipline.Value.GetValue(__self);
		public static void SetEventEmitter_Zipline(this ZiplinePlayer __self, StudioEventEmitterSustain value) => _eventEmitter_Zipline.Value.SetValue(__self, value);
		public static string GetEventRef_ZiplineImpact(this ZiplinePlayer __self) => _eventRef_ZiplineImpact.Value.GetValue(__self);
		public static void SetEventRef_ZiplineImpact(this ZiplinePlayer __self, string value) => _eventRef_ZiplineImpact.Value.SetValue(__self, value);
		public static FMODUnity.StudioEventEmitter GetEventEmitter_ZiplineMotor(this ZiplinePlayer __self) => _eventEmitter_ZiplineMotor.Value.GetValue(__self);
		public static void SetEventEmitter_ZiplineMotor(this ZiplinePlayer __self, FMODUnity.StudioEventEmitter value) => _eventEmitter_ZiplineMotor.Value.SetValue(__self, value);
		public static SoundManager GetSoundManager(this ZiplinePlayer __self) => _soundManager.Value.GetValue(__self);
		public static void SetSoundManager(this ZiplinePlayer __self, SoundManager value) => _soundManager.Value.SetValue(__self, value);
		public static CanvasHelper GetCanvas(this ZiplinePlayer __self) => _canvas.Value.GetValue(__self);
		public static void SetCanvas(this ZiplinePlayer __self, CanvasHelper value) => _canvas.Value.SetValue(__self, value);
		public static MeshPath_Zipline GetZiplinePath(this ZiplinePlayer __self) => _ziplinePath.Value.GetValue(__self);
		public static void SetZiplinePath(this ZiplinePlayer __self, MeshPath_Zipline value) => _ziplinePath.Value.SetValue(__self, value);
		public static Network_Player GetPlayer(this ZiplinePlayer __self) => _player.Value.GetValue(__self);
		public static void SetPlayer(this ZiplinePlayer __self, Network_Player value) => _player.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetLocalPlayerZiplinePosition(this ZiplinePlayer __self) => _localPlayerZiplinePosition.Value.GetValue(__self);
		public static void SetLocalPlayerZiplinePosition(this ZiplinePlayer __self, UnityEngine.Vector3 value) => _localPlayerZiplinePosition.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetLockedPivot(this ZiplinePlayer __self) => _lockedPivot.Value.GetValue(__self);
		public static void SetLockedPivot(this ZiplinePlayer __self, UnityEngine.Transform value) => _lockedPivot.Value.SetValue(__self, value);
		public static float GetZiplineSpeed(this ZiplinePlayer __self) => _ziplineSpeed.Value.GetValue(__self);
		public static void SetZiplineSpeed(this ZiplinePlayer __self, float value) => _ziplineSpeed.Value.SetValue(__self, value);
		public static bool GetCanBounce(this ZiplinePlayer __self) => _canBounce.Value.GetValue(__self);
		public static void SetCanBounce(this ZiplinePlayer __self, bool value) => _canBounce.Value.SetValue(__self, value);
		public static UnityEngine.MaterialPropertyBlock GetMpbLinerenderer(this ZiplinePlayer __self) => _mpbLinerenderer.Value.GetValue(__self);
		public static void SetMpbLinerenderer(this ZiplinePlayer __self, UnityEngine.MaterialPropertyBlock value) => _mpbLinerenderer.Value.SetValue(__self, value);
		public static float GetMotorSoundRampUpMultipier(this ZiplinePlayer __self) => _motorSoundRampUpMultipier.Value.GetValue(__self);
		public static void SetMotorSoundRampUpMultipier(this ZiplinePlayer __self, float value) => _motorSoundRampUpMultipier.Value.SetValue(__self, value);
		public static float GetMotorActiveDuration(this ZiplinePlayer __self) => _motorActiveDuration.Value.GetValue(__self);
		public static void SetMotorActiveDuration(this ZiplinePlayer __self, float value) => _motorActiveDuration.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<ZiplinePlayer>> _Awake757602046 =
				new System.Lazy<MethodAccessor<ZiplinePlayer>>(() => MethodAccessor<ZiplinePlayer>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<ZiplinePlayer>> _Start757602046 =
				new System.Lazy<MethodAccessor<ZiplinePlayer>>(() => MethodAccessor<ZiplinePlayer>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<ZiplinePlayer>> _OnDrawGizmos757602046 =
				new System.Lazy<MethodAccessor<ZiplinePlayer>>(() => MethodAccessor<ZiplinePlayer>.Create("OnDrawGizmos"));
		private static readonly System.Lazy<MethodAccessor<ZiplinePlayer>> _Update757602046 =
				new System.Lazy<MethodAccessor<ZiplinePlayer>>(() => MethodAccessor<ZiplinePlayer>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<ZiplinePlayer>> _UpdateZiplineMovement757602046 =
				new System.Lazy<MethodAccessor<ZiplinePlayer>>(() => MethodAccessor<ZiplinePlayer>.Create("UpdateZiplineMovement"));
		private static readonly System.Lazy<MethodAccessor<ZiplinePlayer>> _UpdateZiplineRemote757602046 =
				new System.Lazy<MethodAccessor<ZiplinePlayer>>(() => MethodAccessor<ZiplinePlayer>.Create("UpdateZiplineRemote"));
		private static readonly System.Lazy<MethodAccessor<ZiplinePlayer>> _HandleParticleEmission757602046 =
				new System.Lazy<MethodAccessor<ZiplinePlayer>>(() => MethodAccessor<ZiplinePlayer>.Create("HandleParticleEmission"));
		private static readonly System.Lazy<MethodAccessor<ZiplinePlayer>> _ThirdPersonStateChange3450040886 =
				new System.Lazy<MethodAccessor<ZiplinePlayer>>(() => MethodAccessor<ZiplinePlayer>.Create("ThirdPersonStateChange", typeof(bool)));
		private static readonly System.Lazy<MethodAccessor<ZiplinePlayer>> _OnFinishedCreatingMeshPath757602046 =
				new System.Lazy<MethodAccessor<ZiplinePlayer>>(() => MethodAccessor<ZiplinePlayer>.Create("OnFinishedCreatingMeshPath"));
		private static readonly System.Lazy<MethodAccessor<ZiplinePlayer>> _BounceZiplineSpeed757602046 =
				new System.Lazy<MethodAccessor<ZiplinePlayer>>(() => MethodAccessor<ZiplinePlayer>.Create("BounceZiplineSpeed"));
		private static readonly System.Lazy<MethodAccessor<ZiplinePlayer>> _ResetCanBounce757602046 =
				new System.Lazy<MethodAccessor<ZiplinePlayer>>(() => MethodAccessor<ZiplinePlayer>.Create("ResetCanBounce"));
		private static readonly System.Lazy<MethodAccessor<ZiplinePlayer>> _CalculateInitialSpeedBetweenPathAndPlayer2491319681 =
				new System.Lazy<MethodAccessor<ZiplinePlayer>>(() => MethodAccessor<ZiplinePlayer>.Create("CalculateInitialSpeedBetweenPathAndPlayer", typeof(MeshPath_Zipline), typeof(Network_Player)));
		private static readonly System.Lazy<MethodAccessor<ZiplinePlayer>> _DisableModels757602046 =
				new System.Lazy<MethodAccessor<ZiplinePlayer>>(() => MethodAccessor<ZiplinePlayer>.Create("DisableModels"));

		public static void Awake(this ZiplinePlayer __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this ZiplinePlayer __self) => _Start757602046.Value.Invoke(__self);
		public static void OnDrawGizmos(this ZiplinePlayer __self) => _OnDrawGizmos757602046.Value.Invoke(__self);
		public static void Update(this ZiplinePlayer __self) => _Update757602046.Value.Invoke(__self);
		public static void UpdateZiplineMovement(this ZiplinePlayer __self) => _UpdateZiplineMovement757602046.Value.Invoke(__self);
		public static void UpdateZiplineRemote(this ZiplinePlayer __self) => _UpdateZiplineRemote757602046.Value.Invoke(__self);
		public static void HandleParticleEmission(this ZiplinePlayer __self) => _HandleParticleEmission757602046.Value.Invoke(__self);
		public static void ThirdPersonStateChange(this ZiplinePlayer __self, bool newThirdPersonState) => _ThirdPersonStateChange3450040886.Value.Invoke(__self, newThirdPersonState);
		public static void OnFinishedCreatingMeshPath(this ZiplinePlayer __self) => _OnFinishedCreatingMeshPath757602046.Value.Invoke(__self);
		public static void BounceZiplineSpeed(this ZiplinePlayer __self) => _BounceZiplineSpeed757602046.Value.Invoke(__self);
		public static void ResetCanBounce(this ZiplinePlayer __self) => _ResetCanBounce757602046.Value.Invoke(__self);
		public static float CalculateInitialSpeedBetweenPathAndPlayer(this ZiplinePlayer __self, MeshPath_Zipline path, Network_Player player) => (float)_CalculateInitialSpeedBetweenPathAndPlayer2491319681.Value.Invoke(__self, path, player);
		public static void DisableModels(this ZiplinePlayer __self) => _DisableModels757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AddBonusHealthComponent
	{

		private static readonly System.Lazy<FieldAccessor<AddBonusHealthComponent, float>> _amount =
				new System.Lazy<FieldAccessor<AddBonusHealthComponent, float>>(() => FieldAccessor<AddBonusHealthComponent, float>.Create("amount"));
		private static readonly System.Lazy<FieldAccessor<AddBonusHealthComponent, Network_Player>> _playerNetwork =
				new System.Lazy<FieldAccessor<AddBonusHealthComponent, Network_Player>>(() => FieldAccessor<AddBonusHealthComponent, Network_Player>.Create("playerNetwork"));

		public static float GetAmount(this AddBonusHealthComponent __self) => _amount.Value.GetValue(__self);
		public static void SetAmount(this AddBonusHealthComponent __self, float value) => _amount.Value.SetValue(__self, value);
		public static Network_Player GetPlayerNetwork(this AddBonusHealthComponent __self) => _playerNetwork.Value.GetValue(__self);
		public static void SetPlayerNetwork(this AddBonusHealthComponent __self, Network_Player value) => _playerNetwork.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AddBonusHealthComponent>> _Start757602046 =
				new System.Lazy<MethodAccessor<AddBonusHealthComponent>>(() => MethodAccessor<AddBonusHealthComponent>.Create("Start"));

		public static void Start(this AddBonusHealthComponent __self) => _Start757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_ApplyBuffComponent
	{

		private static readonly System.Lazy<FieldAccessor<ApplyBuffComponent, string>> _eventRef_applyBuff =
				new System.Lazy<FieldAccessor<ApplyBuffComponent, string>>(() => FieldAccessor<ApplyBuffComponent, string>.Create("eventRef_applyBuff"));
		private static readonly System.Lazy<FieldAccessor<ApplyBuffComponent, Network_Player>> _playerNetwork =
				new System.Lazy<FieldAccessor<ApplyBuffComponent, Network_Player>>(() => FieldAccessor<ApplyBuffComponent, Network_Player>.Create("playerNetwork"));

		public static string GetEventRef_applyBuff(this ApplyBuffComponent __self) => _eventRef_applyBuff.Value.GetValue(__self);
		public static void SetEventRef_applyBuff(this ApplyBuffComponent __self, string value) => _eventRef_applyBuff.Value.SetValue(__self, value);
		public static Network_Player GetPlayerNetwork(this ApplyBuffComponent __self) => _playerNetwork.Value.GetValue(__self);
		public static void SetPlayerNetwork(this ApplyBuffComponent __self, Network_Player value) => _playerNetwork.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<ApplyBuffComponent>> _Start757602046 =
				new System.Lazy<MethodAccessor<ApplyBuffComponent>>(() => MethodAccessor<ApplyBuffComponent>.Create("Start"));

		public static void Start(this ApplyBuffComponent __self) => _Start757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_BedComponent
	{

		private static readonly System.Lazy<FieldAccessor<BedComponent, CanvasHelper>> _canvas =
				new System.Lazy<FieldAccessor<BedComponent, CanvasHelper>>(() => FieldAccessor<BedComponent, CanvasHelper>.Create("canvas"));
		private static readonly System.Lazy<FieldAccessor<BedComponent, Network_Player>> _playerNetwork =
				new System.Lazy<FieldAccessor<BedComponent, Network_Player>>(() => FieldAccessor<BedComponent, Network_Player>.Create("playerNetwork"));
		private static readonly System.Lazy<FieldAccessor<BedComponent, Bed>> _currentBed =
				new System.Lazy<FieldAccessor<BedComponent, Bed>>(() => FieldAccessor<BedComponent, Bed>.Create("currentBed"));
		private static readonly System.Lazy<FieldAccessor<BedComponent, bool>> _aimingAtBed =
				new System.Lazy<FieldAccessor<BedComponent, bool>>(() => FieldAccessor<BedComponent, bool>.Create("aimingAtBed"));
		private static readonly System.Lazy<FieldAccessor<BedComponent, bool>> _sleeping =
				new System.Lazy<FieldAccessor<BedComponent, bool>>(() => FieldAccessor<BedComponent, bool>.Create("sleeping"));
		private static readonly System.Lazy<FieldAccessor<BedComponent, bool>> _canExit =
				new System.Lazy<FieldAccessor<BedComponent, bool>>(() => FieldAccessor<BedComponent, bool>.Create("canExit"));
		private static readonly System.Lazy<FieldAccessor<BedComponent, float>> _exitDelay =
				new System.Lazy<FieldAccessor<BedComponent, float>>(() => FieldAccessor<BedComponent, float>.Create("exitDelay"));

		public static CanvasHelper GetCanvas(this BedComponent __self) => _canvas.Value.GetValue(__self);
		public static void SetCanvas(this BedComponent __self, CanvasHelper value) => _canvas.Value.SetValue(__self, value);
		public static Network_Player GetPlayerNetwork(this BedComponent __self) => _playerNetwork.Value.GetValue(__self);
		public static void SetPlayerNetwork(this BedComponent __self, Network_Player value) => _playerNetwork.Value.SetValue(__self, value);
		public static Bed GetCurrentBed(this BedComponent __self) => _currentBed.Value.GetValue(__self);
		public static void SetCurrentBed(this BedComponent __self, Bed value) => _currentBed.Value.SetValue(__self, value);
		public static bool GetAimingAtBed(this BedComponent __self) => _aimingAtBed.Value.GetValue(__self);
		public static void SetAimingAtBed(this BedComponent __self, bool value) => _aimingAtBed.Value.SetValue(__self, value);
		public static bool GetSleeping(this BedComponent __self) => _sleeping.Value.GetValue(__self);
		public static void SetSleeping(this BedComponent __self, bool value) => _sleeping.Value.SetValue(__self, value);
		public static bool GetCanExit(this BedComponent __self) => _canExit.Value.GetValue(__self);
		public static void SetCanExit(this BedComponent __self, bool value) => _canExit.Value.SetValue(__self, value);
		public static float GetExitDelay(this BedComponent __self) => _exitDelay.Value.GetValue(__self);
		public static void SetExitDelay(this BedComponent __self, float value) => _exitDelay.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<BedComponent>> _Start757602046 =
				new System.Lazy<MethodAccessor<BedComponent>>(() => MethodAccessor<BedComponent>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<BedComponent>> _Update757602046 =
				new System.Lazy<MethodAccessor<BedComponent>>(() => MethodAccessor<BedComponent>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<BedComponent>> _SetCanExit757602046 =
				new System.Lazy<MethodAccessor<BedComponent>>(() => MethodAccessor<BedComponent>.Create("SetCanExit"));

		public static void Start(this BedComponent __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this BedComponent __self) => _Update757602046.Value.Invoke(__self);
		public static void SetCanExit(this BedComponent __self) => _SetCanExit757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_BlueprintComponent
	{

		private static readonly System.Lazy<FieldAccessor<BlueprintComponent, UnityEngine.UI.Image>> _blueprintImage =
				new System.Lazy<FieldAccessor<BlueprintComponent, UnityEngine.UI.Image>>(() => FieldAccessor<BlueprintComponent, UnityEngine.UI.Image>.Create("blueprintImage"));
		private static readonly System.Lazy<FieldAccessor<BlueprintComponent, TMPro.TextMeshProUGUI>> _nameText =
				new System.Lazy<FieldAccessor<BlueprintComponent, TMPro.TextMeshProUGUI>>(() => FieldAccessor<BlueprintComponent, TMPro.TextMeshProUGUI>.Create("nameText"));
		private static readonly System.Lazy<FieldAccessor<BlueprintComponent, TMPro.TextMeshProUGUI>> _descText =
				new System.Lazy<FieldAccessor<BlueprintComponent, TMPro.TextMeshProUGUI>>(() => FieldAccessor<BlueprintComponent, TMPro.TextMeshProUGUI>.Create("descText"));
		private static readonly System.Lazy<FieldAccessor<BlueprintComponent, System.Collections.Generic.List<BlueprintConnection>>> _blueprintConnections =
				new System.Lazy<FieldAccessor<BlueprintComponent, System.Collections.Generic.List<BlueprintConnection>>>(() => FieldAccessor<BlueprintComponent, System.Collections.Generic.List<BlueprintConnection>>.Create("blueprintConnections"));
		private static readonly System.Lazy<FieldAccessor<BlueprintComponent, Network_Player>> _playerNetwork =
				new System.Lazy<FieldAccessor<BlueprintComponent, Network_Player>>(() => FieldAccessor<BlueprintComponent, Network_Player>.Create("playerNetwork"));
		private static readonly System.Lazy<FieldAccessor<BlueprintComponent, BlueprintConnection>> _currentCon =
				new System.Lazy<FieldAccessor<BlueprintComponent, BlueprintConnection>>(() => FieldAccessor<BlueprintComponent, BlueprintConnection>.Create("currentCon"));

		public static UnityEngine.UI.Image GetBlueprintImage(this BlueprintComponent __self) => _blueprintImage.Value.GetValue(__self);
		public static void SetBlueprintImage(this BlueprintComponent __self, UnityEngine.UI.Image value) => _blueprintImage.Value.SetValue(__self, value);
		public static TMPro.TextMeshProUGUI GetNameText(this BlueprintComponent __self) => _nameText.Value.GetValue(__self);
		public static void SetNameText(this BlueprintComponent __self, TMPro.TextMeshProUGUI value) => _nameText.Value.SetValue(__self, value);
		public static TMPro.TextMeshProUGUI GetDescText(this BlueprintComponent __self) => _descText.Value.GetValue(__self);
		public static void SetDescText(this BlueprintComponent __self, TMPro.TextMeshProUGUI value) => _descText.Value.SetValue(__self, value);
		public static System.Collections.Generic.List<BlueprintConnection> GetBlueprintConnections(this BlueprintComponent __self) => _blueprintConnections.Value.GetValue(__self);
		public static void SetBlueprintConnections(this BlueprintComponent __self, System.Collections.Generic.List<BlueprintConnection> value) => _blueprintConnections.Value.SetValue(__self, value);
		public static Network_Player GetPlayerNetwork(this BlueprintComponent __self) => _playerNetwork.Value.GetValue(__self);
		public static void SetPlayerNetwork(this BlueprintComponent __self, Network_Player value) => _playerNetwork.Value.SetValue(__self, value);
		public static BlueprintConnection GetCurrentCon(this BlueprintComponent __self) => _currentCon.Value.GetValue(__self);
		public static void SetCurrentCon(this BlueprintComponent __self, BlueprintConnection value) => _currentCon.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<BlueprintComponent>> _GetConnectionFromItem3436837919 =
				new System.Lazy<MethodAccessor<BlueprintComponent>>(() => MethodAccessor<BlueprintComponent>.Create("GetConnectionFromItem", typeof(Item_Base)));

		public static BlueprintConnection GetConnectionFromItem(this BlueprintComponent __self, Item_Base item) => (BlueprintConnection)_GetConnectionFromItem3436837919.Value.Invoke(__self, item);

	}

	public static class PrivateAccessor_BuildComponent
	{

		private static readonly System.Lazy<FieldAccessor<BuildComponent, BlockCreator>> _blockCreator =
				new System.Lazy<FieldAccessor<BuildComponent, BlockCreator>>(() => FieldAccessor<BuildComponent, BlockCreator>.Create("blockCreator"));
		private static readonly System.Lazy<FieldAccessor<BuildComponent, Network_Player>> _playerNetwork =
				new System.Lazy<FieldAccessor<BuildComponent, Network_Player>>(() => FieldAccessor<BuildComponent, Network_Player>.Create("playerNetwork"));

		public static BlockCreator GetBlockCreator(this BuildComponent __self) => _blockCreator.Value.GetValue(__self);
		public static void SetBlockCreator(this BuildComponent __self, BlockCreator value) => _blockCreator.Value.SetValue(__self, value);
		public static Network_Player GetPlayerNetwork(this BuildComponent __self) => _playerNetwork.Value.GetValue(__self);
		public static void SetPlayerNetwork(this BuildComponent __self, Network_Player value) => _playerNetwork.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<BuildComponent>> _Start757602046 =
				new System.Lazy<MethodAccessor<BuildComponent>>(() => MethodAccessor<BuildComponent>.Create("Start"));

		public static void Start(this BuildComponent __self) => _Start757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_CarryingComponent
	{

		private static readonly System.Lazy<FieldAccessor<CarryingComponent, Carry>> _carriedObject =
				new System.Lazy<FieldAccessor<CarryingComponent, Carry>>(() => FieldAccessor<CarryingComponent, Carry>.Create("carriedObject"));

		public static Carry GetCarriedObject(this CarryingComponent __self) => _carriedObject.Value.GetValue(__self);
		public static void SetCarriedObject(this CarryingComponent __self, Carry value) => _carriedObject.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_ConsumeComponent
	{

		private static readonly System.Lazy<FieldAccessor<ConsumeComponent, Network_Player>> _playerNetwork =
				new System.Lazy<FieldAccessor<ConsumeComponent, Network_Player>>(() => FieldAccessor<ConsumeComponent, Network_Player>.Create("playerNetwork"));
		private static readonly System.Lazy<FieldAccessor<ConsumeComponent, bool>> _showingText =
				new System.Lazy<FieldAccessor<ConsumeComponent, bool>>(() => FieldAccessor<ConsumeComponent, bool>.Create("showingText"));

		public static Network_Player GetPlayerNetwork(this ConsumeComponent __self) => _playerNetwork.Value.GetValue(__self);
		public static void SetPlayerNetwork(this ConsumeComponent __self, Network_Player value) => _playerNetwork.Value.SetValue(__self, value);
		public static bool GetShowingText(this ConsumeComponent __self) => _showingText.Value.GetValue(__self);
		public static void SetShowingText(this ConsumeComponent __self, bool value) => _showingText.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<ConsumeComponent>> _Start757602046 =
				new System.Lazy<MethodAccessor<ConsumeComponent>>(() => MethodAccessor<ConsumeComponent>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<ConsumeComponent>> _Update757602046 =
				new System.Lazy<MethodAccessor<ConsumeComponent>>(() => MethodAccessor<ConsumeComponent>.Create("Update"));

		public static void Start(this ConsumeComponent __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this ConsumeComponent __self) => _Update757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_CookingTableRecipeComponent
	{

		private static readonly System.Lazy<FieldAccessor<CookingTableRecipeComponent, CookingTable_Recipe_UI>> _recipeUI =
				new System.Lazy<FieldAccessor<CookingTableRecipeComponent, CookingTable_Recipe_UI>>(() => FieldAccessor<CookingTableRecipeComponent, CookingTable_Recipe_UI>.Create("recipeUI"));
		private static readonly System.Lazy<FieldAccessor<CookingTableRecipeComponent, Network_Player>> _playerNetwork =
				new System.Lazy<FieldAccessor<CookingTableRecipeComponent, Network_Player>>(() => FieldAccessor<CookingTableRecipeComponent, Network_Player>.Create("playerNetwork"));

		public static CookingTable_Recipe_UI GetRecipeUI(this CookingTableRecipeComponent __self) => _recipeUI.Value.GetValue(__self);
		public static void SetRecipeUI(this CookingTableRecipeComponent __self, CookingTable_Recipe_UI value) => _recipeUI.Value.SetValue(__self, value);
		public static Network_Player GetPlayerNetwork(this CookingTableRecipeComponent __self) => _playerNetwork.Value.GetValue(__self);
		public static void SetPlayerNetwork(this CookingTableRecipeComponent __self, Network_Player value) => _playerNetwork.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_FillWaterComponent
	{

		private static readonly System.Lazy<FieldAccessor<FillWaterComponent, Item_Base>> _saltWaterItem =
				new System.Lazy<FieldAccessor<FillWaterComponent, Item_Base>>(() => FieldAccessor<FillWaterComponent, Item_Base>.Create("saltWaterItem"));
		private static readonly System.Lazy<FieldAccessor<FillWaterComponent, Item_Base>> _emptyItem =
				new System.Lazy<FieldAccessor<FillWaterComponent, Item_Base>>(() => FieldAccessor<FillWaterComponent, Item_Base>.Create("emptyItem"));
		private static readonly System.Lazy<FieldAccessor<FillWaterComponent, TimerEventer>> _holdToPourTimer =
				new System.Lazy<FieldAccessor<FillWaterComponent, TimerEventer>>(() => FieldAccessor<FillWaterComponent, TimerEventer>.Create("holdToPourTimer"));
		private static readonly System.Lazy<FieldAccessor<FillWaterComponent, CanvasHelper>> _canvas =
				new System.Lazy<FieldAccessor<FillWaterComponent, CanvasHelper>>(() => FieldAccessor<FillWaterComponent, CanvasHelper>.Create("canvas"));
		private static readonly System.Lazy<FieldAccessor<FillWaterComponent, PlayerInventory>> _inventory =
				new System.Lazy<FieldAccessor<FillWaterComponent, PlayerInventory>>(() => FieldAccessor<FillWaterComponent, PlayerInventory>.Create("inventory"));
		private static readonly System.Lazy<FieldAccessor<FillWaterComponent, Network_Player>> _playerNetwork =
				new System.Lazy<FieldAccessor<FillWaterComponent, Network_Player>>(() => FieldAccessor<FillWaterComponent, Network_Player>.Create("playerNetwork"));
		private static readonly System.Lazy<FieldAccessor<FillWaterComponent, bool>> _canvasTextVisible =
				new System.Lazy<FieldAccessor<FillWaterComponent, bool>>(() => FieldAccessor<FillWaterComponent, bool>.Create("canvasTextVisible"));
		private static readonly System.Lazy<FieldAccessor<FillWaterComponent, UnityEngine.Plane>> _waterPlane =
				new System.Lazy<FieldAccessor<FillWaterComponent, UnityEngine.Plane>>(() => FieldAccessor<FillWaterComponent, UnityEngine.Plane>.Create("waterPlane"));
		private static readonly System.Lazy<FieldAccessor<FillWaterComponent, string>> _eventRef_fillWater =
				new System.Lazy<FieldAccessor<FillWaterComponent, string>>(() => FieldAccessor<FillWaterComponent, string>.Create("eventRef_fillWater"));
		private static readonly System.Lazy<FieldAccessor<FillWaterComponent, string>> _eventRef_pourWater =
				new System.Lazy<FieldAccessor<FillWaterComponent, string>>(() => FieldAccessor<FillWaterComponent, string>.Create("eventRef_pourWater"));

		public static Item_Base GetSaltWaterItem(this FillWaterComponent __self) => _saltWaterItem.Value.GetValue(__self);
		public static void SetSaltWaterItem(this FillWaterComponent __self, Item_Base value) => _saltWaterItem.Value.SetValue(__self, value);
		public static Item_Base GetEmptyItem(this FillWaterComponent __self) => _emptyItem.Value.GetValue(__self);
		public static void SetEmptyItem(this FillWaterComponent __self, Item_Base value) => _emptyItem.Value.SetValue(__self, value);
		public static TimerEventer GetHoldToPourTimer(this FillWaterComponent __self) => _holdToPourTimer.Value.GetValue(__self);
		public static void SetHoldToPourTimer(this FillWaterComponent __self, TimerEventer value) => _holdToPourTimer.Value.SetValue(__self, value);
		public static CanvasHelper GetCanvas(this FillWaterComponent __self) => _canvas.Value.GetValue(__self);
		public static void SetCanvas(this FillWaterComponent __self, CanvasHelper value) => _canvas.Value.SetValue(__self, value);
		public static PlayerInventory GetInventory(this FillWaterComponent __self) => _inventory.Value.GetValue(__self);
		public static void SetInventory(this FillWaterComponent __self, PlayerInventory value) => _inventory.Value.SetValue(__self, value);
		public static Network_Player GetPlayerNetwork(this FillWaterComponent __self) => _playerNetwork.Value.GetValue(__self);
		public static void SetPlayerNetwork(this FillWaterComponent __self, Network_Player value) => _playerNetwork.Value.SetValue(__self, value);
		public static bool GetCanvasTextVisible(this FillWaterComponent __self) => _canvasTextVisible.Value.GetValue(__self);
		public static void SetCanvasTextVisible(this FillWaterComponent __self, bool value) => _canvasTextVisible.Value.SetValue(__self, value);
		public static UnityEngine.Plane GetWaterPlane(this FillWaterComponent __self) => _waterPlane.Value.GetValue(__self);
		public static void SetWaterPlane(this FillWaterComponent __self, UnityEngine.Plane value) => _waterPlane.Value.SetValue(__self, value);
		public static string GetEventRef_fillWater(this FillWaterComponent __self) => _eventRef_fillWater.Value.GetValue(__self);
		public static void SetEventRef_fillWater(this FillWaterComponent __self, string value) => _eventRef_fillWater.Value.SetValue(__self, value);
		public static string GetEventRef_pourWater(this FillWaterComponent __self) => _eventRef_pourWater.Value.GetValue(__self);
		public static void SetEventRef_pourWater(this FillWaterComponent __self, string value) => _eventRef_pourWater.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<FillWaterComponent>> _Awake757602046 =
				new System.Lazy<MethodAccessor<FillWaterComponent>>(() => MethodAccessor<FillWaterComponent>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<FillWaterComponent>> _Start757602046 =
				new System.Lazy<MethodAccessor<FillWaterComponent>>(() => MethodAccessor<FillWaterComponent>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<FillWaterComponent>> _Update757602046 =
				new System.Lazy<MethodAccessor<FillWaterComponent>>(() => MethodAccessor<FillWaterComponent>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<FillWaterComponent>> _AimingAtTarget757602046 =
				new System.Lazy<MethodAccessor<FillWaterComponent>>(() => MethodAccessor<FillWaterComponent>.Create("AimingAtTarget"));

		public static void Awake(this FillWaterComponent __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this FillWaterComponent __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this FillWaterComponent __self) => _Update757602046.Value.Invoke(__self);
		public static bool AimingAtTarget(this FillWaterComponent __self) => (bool)_AimingAtTarget757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_FluidComponent
	{

		private static readonly System.Lazy<FieldAccessor<FluidComponent, UnityEngine.Transform>> _fluidTransform =
				new System.Lazy<FieldAccessor<FluidComponent, UnityEngine.Transform>>(() => FieldAccessor<FluidComponent, UnityEngine.Transform>.Create("fluidTransform"));
		private static readonly System.Lazy<FieldAccessor<FluidComponent, float>> _yPosStartLocal =
				new System.Lazy<FieldAccessor<FluidComponent, float>>(() => FieldAccessor<FluidComponent, float>.Create("yPosStartLocal"));
		private static readonly System.Lazy<FieldAccessor<FluidComponent, float>> _stepInterval =
				new System.Lazy<FieldAccessor<FluidComponent, float>>(() => FieldAccessor<FluidComponent, float>.Create("stepInterval"));
		private static readonly System.Lazy<FieldAccessor<FluidComponent, float>> _targetY =
				new System.Lazy<FieldAccessor<FluidComponent, float>>(() => FieldAccessor<FluidComponent, float>.Create("targetY"));

		public static UnityEngine.Transform GetFluidTransform(this FluidComponent __self) => _fluidTransform.Value.GetValue(__self);
		public static void SetFluidTransform(this FluidComponent __self, UnityEngine.Transform value) => _fluidTransform.Value.SetValue(__self, value);
		public static float GetYPosStartLocal(this FluidComponent __self) => _yPosStartLocal.Value.GetValue(__self);
		public static void SetYPosStartLocal(this FluidComponent __self, float value) => _yPosStartLocal.Value.SetValue(__self, value);
		public static float GetStepInterval(this FluidComponent __self) => _stepInterval.Value.GetValue(__self);
		public static void SetStepInterval(this FluidComponent __self, float value) => _stepInterval.Value.SetValue(__self, value);
		public static float GetTargetY(this FluidComponent __self) => _targetY.Value.GetValue(__self);
		public static void SetTargetY(this FluidComponent __self, float value) => _targetY.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<FluidComponent>> _Start757602046 =
				new System.Lazy<MethodAccessor<FluidComponent>>(() => MethodAccessor<FluidComponent>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<FluidComponent>> _Update757602046 =
				new System.Lazy<MethodAccessor<FluidComponent>>(() => MethodAccessor<FluidComponent>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<FluidComponent>> _ShowFluid757602046 =
				new System.Lazy<MethodAccessor<FluidComponent>>(() => MethodAccessor<FluidComponent>.Create("ShowFluid"));

		public static void Start(this FluidComponent __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this FluidComponent __self) => _Update757602046.Value.Invoke(__self);
		public static void ShowFluid(this FluidComponent __self) => _ShowFluid757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_FluidComponent_Hand
	{

		private static readonly System.Lazy<FieldAccessor<FluidComponent_Hand, PlayerInventory>> _inventory =
				new System.Lazy<FieldAccessor<FluidComponent_Hand, PlayerInventory>>(() => FieldAccessor<FluidComponent_Hand, PlayerInventory>.Create("inventory"));

		public static PlayerInventory GetInventory(this FluidComponent_Hand __self) => _inventory.Value.GetValue(__self);
		public static void SetInventory(this FluidComponent_Hand __self, PlayerInventory value) => _inventory.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<FluidComponent_Hand>> _Start757602046 =
				new System.Lazy<MethodAccessor<FluidComponent_Hand>>(() => MethodAccessor<FluidComponent_Hand>.Create("Start"));

		public static void Start(this FluidComponent_Hand __self) => _Start757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_PlantComponent
	{

		private static readonly System.Lazy<FieldAccessor<PlantComponent, Plant>> _plantPrefab =
				new System.Lazy<FieldAccessor<PlantComponent, Plant>>(() => FieldAccessor<PlantComponent, Plant>.Create("plantPrefab"));
		private static readonly System.Lazy<FieldAccessor<PlantComponent, PlantManager>> _plantManager =
				new System.Lazy<FieldAccessor<PlantComponent, PlantManager>>(() => FieldAccessor<PlantComponent, PlantManager>.Create("plantManager"));
		private static readonly System.Lazy<FieldAccessor<PlantComponent, bool>> _isDisplayingText =
				new System.Lazy<FieldAccessor<PlantComponent, bool>>(() => FieldAccessor<PlantComponent, bool>.Create("isDisplayingText"));
		private static readonly System.Lazy<FieldAccessor<PlantComponent, Network_Player>> _playerNetwork =
				new System.Lazy<FieldAccessor<PlantComponent, Network_Player>>(() => FieldAccessor<PlantComponent, Network_Player>.Create("playerNetwork"));
		private static readonly System.Lazy<FieldAccessor<PlantComponent, CanvasHelper>> _canvas =
				new System.Lazy<FieldAccessor<PlantComponent, CanvasHelper>>(() => FieldAccessor<PlantComponent, CanvasHelper>.Create("canvas"));

		public static Plant GetPlantPrefab(this PlantComponent __self) => _plantPrefab.Value.GetValue(__self);
		public static void SetPlantPrefab(this PlantComponent __self, Plant value) => _plantPrefab.Value.SetValue(__self, value);
		public static PlantManager GetPlantManager(this PlantComponent __self) => _plantManager.Value.GetValue(__self);
		public static void SetPlantManager(this PlantComponent __self, PlantManager value) => _plantManager.Value.SetValue(__self, value);
		public static bool GetIsDisplayingText(this PlantComponent __self) => _isDisplayingText.Value.GetValue(__self);
		public static void SetIsDisplayingText(this PlantComponent __self, bool value) => _isDisplayingText.Value.SetValue(__self, value);
		public static Network_Player GetPlayerNetwork(this PlantComponent __self) => _playerNetwork.Value.GetValue(__self);
		public static void SetPlayerNetwork(this PlantComponent __self, Network_Player value) => _playerNetwork.Value.SetValue(__self, value);
		public static CanvasHelper GetCanvas(this PlantComponent __self) => _canvas.Value.GetValue(__self);
		public static void SetCanvas(this PlantComponent __self, CanvasHelper value) => _canvas.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<PlantComponent>> _Start757602046 =
				new System.Lazy<MethodAccessor<PlantComponent>>(() => MethodAccessor<PlantComponent>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<PlantComponent>> _Update757602046 =
				new System.Lazy<MethodAccessor<PlantComponent>>(() => MethodAccessor<PlantComponent>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<PlantComponent>> _GetCropplot757602046 =
				new System.Lazy<MethodAccessor<PlantComponent>>(() => MethodAccessor<PlantComponent>.Create("GetCropplot"));

		public static void Start(this PlantComponent __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this PlantComponent __self) => _Update757602046.Value.Invoke(__self);
		public static Cropplot GetCropplot(this PlantComponent __self) => (Cropplot)_GetCropplot757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_PlantManager
	{

		private static readonly System.Lazy<FieldAccessor<PlantManager, System.Collections.Generic.List<Plant>>> _allPlants =
				new System.Lazy<FieldAccessor<PlantManager, System.Collections.Generic.List<Plant>>>(() => FieldAccessor<PlantManager, System.Collections.Generic.List<Plant>>.Create("allPlants"));
		private static readonly System.Lazy<FieldAccessor<PlantManager, string>> _FMOD_Event_Plant =
				new System.Lazy<FieldAccessor<PlantManager, string>>(() => FieldAccessor<PlantManager, string>.Create("FMOD_Event_Plant"));
		private static readonly System.Lazy<FieldAccessor<PlantManager, string>> _FMOD_Event_Harvest =
				new System.Lazy<FieldAccessor<PlantManager, string>>(() => FieldAccessor<PlantManager, string>.Create("FMOD_Event_Harvest"));
		private static readonly System.Lazy<FieldAccessor<PlantManager, string>> _FMOD_Event_WaterCropplot =
				new System.Lazy<FieldAccessor<PlantManager, string>>(() => FieldAccessor<PlantManager, string>.Create("FMOD_Event_WaterCropplot"));
		private static readonly System.Lazy<FieldAccessor<PlantManager, Network_Player>> _playerNetwork =
				new System.Lazy<FieldAccessor<PlantManager, Network_Player>>(() => FieldAccessor<PlantManager, Network_Player>.Create("playerNetwork"));
		private static readonly System.Lazy<FieldAccessor<PlantManager, PlayerInventory>> _playerInventory =
				new System.Lazy<FieldAccessor<PlantManager, PlayerInventory>>(() => FieldAccessor<PlantManager, PlayerInventory>.Create("playerInventory"));
		private static readonly System.Lazy<FieldAccessor<PlantManager, PlayerAnimator>> _playerAnimator =
				new System.Lazy<FieldAccessor<PlantManager, PlayerAnimator>>(() => FieldAccessor<PlantManager, PlayerAnimator>.Create("playerAnimator"));
		private static readonly System.Lazy<FieldAccessor<PlantManager, CanvasHelper>> _canvas =
				new System.Lazy<FieldAccessor<PlantManager, CanvasHelper>>(() => FieldAccessor<PlantManager, CanvasHelper>.Create("canvas"));
		private static readonly System.Lazy<FieldAccessor<PlantManager, WeatherManager>> _weatherManager =
				new System.Lazy<FieldAccessor<PlantManager, WeatherManager>>(() => FieldAccessor<PlantManager, WeatherManager>.Create("weatherManager"));

		public static System.Collections.Generic.List<Plant> GetAllPlants(this PlantManager __self) => _allPlants.Value.GetValue(__self);
		public static void SetAllPlants(this PlantManager __self, System.Collections.Generic.List<Plant> value) => _allPlants.Value.SetValue(__self, value);
		public static string GetFMOD_Event_Plant(this PlantManager __self) => _FMOD_Event_Plant.Value.GetValue(__self);
		public static void SetFMOD_Event_Plant(this PlantManager __self, string value) => _FMOD_Event_Plant.Value.SetValue(__self, value);
		public static string GetFMOD_Event_Harvest(this PlantManager __self) => _FMOD_Event_Harvest.Value.GetValue(__self);
		public static void SetFMOD_Event_Harvest(this PlantManager __self, string value) => _FMOD_Event_Harvest.Value.SetValue(__self, value);
		public static string GetFMOD_Event_WaterCropplot(this PlantManager __self) => _FMOD_Event_WaterCropplot.Value.GetValue(__self);
		public static void SetFMOD_Event_WaterCropplot(this PlantManager __self, string value) => _FMOD_Event_WaterCropplot.Value.SetValue(__self, value);
		public static Network_Player GetPlayerNetwork(this PlantManager __self) => _playerNetwork.Value.GetValue(__self);
		public static void SetPlayerNetwork(this PlantManager __self, Network_Player value) => _playerNetwork.Value.SetValue(__self, value);
		public static PlayerInventory GetPlayerInventory(this PlantManager __self) => _playerInventory.Value.GetValue(__self);
		public static void SetPlayerInventory(this PlantManager __self, PlayerInventory value) => _playerInventory.Value.SetValue(__self, value);
		public static PlayerAnimator GetPlayerAnimator(this PlantManager __self) => _playerAnimator.Value.GetValue(__self);
		public static void SetPlayerAnimator(this PlantManager __self, PlayerAnimator value) => _playerAnimator.Value.SetValue(__self, value);
		public static CanvasHelper GetCanvas(this PlantManager __self) => _canvas.Value.GetValue(__self);
		public static void SetCanvas(this PlantManager __self, CanvasHelper value) => _canvas.Value.SetValue(__self, value);
		public static WeatherManager GetWeatherManager(this PlantManager __self) => _weatherManager.Value.GetValue(__self);
		public static void SetWeatherManager(this PlantManager __self, WeatherManager value) => _weatherManager.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<PlantManager>> _Start757602046 =
				new System.Lazy<MethodAccessor<PlantManager>>(() => MethodAccessor<PlantManager>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<PlantManager>> _Update757602046 =
				new System.Lazy<MethodAccessor<PlantManager>>(() => MethodAccessor<PlantManager>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<PlantManager>> _HarvestPlants757602046 =
				new System.Lazy<MethodAccessor<PlantManager>>(() => MethodAccessor<PlantManager>.Create("HarvestPlants"));

		public static void Start(this PlantManager __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this PlantManager __self) => _Update757602046.Value.Invoke(__self);
		public static void HarvestPlants(this PlantManager __self) => _HarvestPlants757602046.Value.Invoke(__self);

	}

	public static class Private_PlantManager
	{

		private static readonly System.Lazy<StaticMethodAccessor> _GetCropplotByIndex3473662494 =
				new System.Lazy<StaticMethodAccessor>(() => StaticMethodAccessor.Create(typeof(PlantManager), "GetCropplotByIndex", typeof(uint)));

		public static Cropplot GetCropplotByIndex(uint objectIndex) => (Cropplot)_GetCropplotByIndex3473662494.Value.Invoke(objectIndex);

	}

	public static class PrivateAccessor_ThrowableComponent
	{

		private static readonly System.Lazy<FieldAccessor<ThrowableComponent, ItemObjectEnabler>> _throwablePrefabs =
				new System.Lazy<FieldAccessor<ThrowableComponent, ItemObjectEnabler>>(() => FieldAccessor<ThrowableComponent, ItemObjectEnabler>.Create("throwablePrefabs"));
		private static readonly System.Lazy<FieldAccessor<ThrowableComponent, ItemObjectEnabler>> _throwableModelEnabler =
				new System.Lazy<FieldAccessor<ThrowableComponent, ItemObjectEnabler>>(() => FieldAccessor<ThrowableComponent, ItemObjectEnabler>.Create("throwableModelEnabler"));
		private static readonly System.Lazy<FieldAccessor<ThrowableComponent, UnityEngine.Transform>> _shootPoint =
				new System.Lazy<FieldAccessor<ThrowableComponent, UnityEngine.Transform>>(() => FieldAccessor<ThrowableComponent, UnityEngine.Transform>.Create("shootPoint"));
		private static readonly System.Lazy<FieldAccessor<ThrowableComponent, UnityEngine.Vector3>> _throwForce =
				new System.Lazy<FieldAccessor<ThrowableComponent, UnityEngine.Vector3>>(() => FieldAccessor<ThrowableComponent, UnityEngine.Vector3>.Create("throwForce"));
		private static readonly System.Lazy<FieldAccessor<ThrowableComponent, float>> _throwDelay =
				new System.Lazy<FieldAccessor<ThrowableComponent, float>>(() => FieldAccessor<ThrowableComponent, float>.Create("throwDelay"));
		private static readonly System.Lazy<FieldAccessor<ThrowableComponent, bool>> _hideDuringCooldown =
				new System.Lazy<FieldAccessor<ThrowableComponent, bool>>(() => FieldAccessor<ThrowableComponent, bool>.Create("hideDuringCooldown"));
		private static readonly System.Lazy<FieldAccessor<ThrowableComponent, float>> _hideDelay =
				new System.Lazy<FieldAccessor<ThrowableComponent, float>>(() => FieldAccessor<ThrowableComponent, float>.Create("hideDelay"));
		private static readonly System.Lazy<FieldAccessor<ThrowableComponent, string>> _button_Charge =
				new System.Lazy<FieldAccessor<ThrowableComponent, string>>(() => FieldAccessor<ThrowableComponent, string>.Create("button_Charge"));
		private static readonly System.Lazy<FieldAccessor<ThrowableComponent, string>> _button_Release =
				new System.Lazy<FieldAccessor<ThrowableComponent, string>>(() => FieldAccessor<ThrowableComponent, string>.Create("button_Release"));
		private static readonly System.Lazy<FieldAccessor<ThrowableComponent, string>> _button_Abort =
				new System.Lazy<FieldAccessor<ThrowableComponent, string>>(() => FieldAccessor<ThrowableComponent, string>.Create("button_Abort"));
		private static readonly System.Lazy<FieldAccessor<ThrowableComponent, System.Collections.Generic.List<Throwable_Object>>> _thrownObjects =
				new System.Lazy<FieldAccessor<ThrowableComponent, System.Collections.Generic.List<Throwable_Object>>>(() => FieldAccessor<ThrowableComponent, System.Collections.Generic.List<Throwable_Object>>.Create("thrownObjects"));
		private static readonly System.Lazy<FieldAccessor<ThrowableComponent, ChargeMeter>> _chargeMeter =
				new System.Lazy<FieldAccessor<ThrowableComponent, ChargeMeter>>(() => FieldAccessor<ThrowableComponent, ChargeMeter>.Create("chargeMeter"));
		private static readonly System.Lazy<FieldAccessor<ThrowableComponent, uint>> _uniqueThrowableIndex =
				new System.Lazy<FieldAccessor<ThrowableComponent, uint>>(() => FieldAccessor<ThrowableComponent, uint>.Create("uniqueThrowableIndex"));
		private static readonly System.Lazy<FieldAccessor<ThrowableComponent, bool>> _canThrow =
				new System.Lazy<FieldAccessor<ThrowableComponent, bool>>(() => FieldAccessor<ThrowableComponent, bool>.Create("canThrow"));
		private static readonly System.Lazy<FieldAccessor<ThrowableComponent, Item_Base>> _currentAmmo =
				new System.Lazy<FieldAccessor<ThrowableComponent, Item_Base>>(() => FieldAccessor<ThrowableComponent, Item_Base>.Create("currentAmmo"));
		private static readonly System.Lazy<FieldAccessor<ThrowableComponent, DisplayTextManager>> _textManager =
				new System.Lazy<FieldAccessor<ThrowableComponent, DisplayTextManager>>(() => FieldAccessor<ThrowableComponent, DisplayTextManager>.Create("textManager"));
		private static readonly System.Lazy<FieldAccessor<ThrowableComponent, bool>> _isTextShown =
				new System.Lazy<FieldAccessor<ThrowableComponent, bool>>(() => FieldAccessor<ThrowableComponent, bool>.Create("isTextShown"));
		private static readonly System.Lazy<FieldAccessor<ThrowableComponent, bool>> _hasAborted =
				new System.Lazy<FieldAccessor<ThrowableComponent, bool>>(() => FieldAccessor<ThrowableComponent, bool>.Create("hasAborted"));

		public static ItemObjectEnabler GetThrowablePrefabs(this ThrowableComponent __self) => _throwablePrefabs.Value.GetValue(__self);
		public static void SetThrowablePrefabs(this ThrowableComponent __self, ItemObjectEnabler value) => _throwablePrefabs.Value.SetValue(__self, value);
		public static ItemObjectEnabler GetThrowableModelEnabler(this ThrowableComponent __self) => _throwableModelEnabler.Value.GetValue(__self);
		public static void SetThrowableModelEnabler(this ThrowableComponent __self, ItemObjectEnabler value) => _throwableModelEnabler.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetShootPoint(this ThrowableComponent __self) => _shootPoint.Value.GetValue(__self);
		public static void SetShootPoint(this ThrowableComponent __self, UnityEngine.Transform value) => _shootPoint.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetThrowForce(this ThrowableComponent __self) => _throwForce.Value.GetValue(__self);
		public static void SetThrowForce(this ThrowableComponent __self, UnityEngine.Vector3 value) => _throwForce.Value.SetValue(__self, value);
		public static float GetThrowDelay(this ThrowableComponent __self) => _throwDelay.Value.GetValue(__self);
		public static void SetThrowDelay(this ThrowableComponent __self, float value) => _throwDelay.Value.SetValue(__self, value);
		public static bool GetHideDuringCooldown(this ThrowableComponent __self) => _hideDuringCooldown.Value.GetValue(__self);
		public static void SetHideDuringCooldown(this ThrowableComponent __self, bool value) => _hideDuringCooldown.Value.SetValue(__self, value);
		public static float GetHideDelay(this ThrowableComponent __self) => _hideDelay.Value.GetValue(__self);
		public static void SetHideDelay(this ThrowableComponent __self, float value) => _hideDelay.Value.SetValue(__self, value);
		public static string GetButton_Charge(this ThrowableComponent __self) => _button_Charge.Value.GetValue(__self);
		public static void SetButton_Charge(this ThrowableComponent __self, string value) => _button_Charge.Value.SetValue(__self, value);
		public static string GetButton_Release(this ThrowableComponent __self) => _button_Release.Value.GetValue(__self);
		public static void SetButton_Release(this ThrowableComponent __self, string value) => _button_Release.Value.SetValue(__self, value);
		public static string GetButton_Abort(this ThrowableComponent __self) => _button_Abort.Value.GetValue(__self);
		public static void SetButton_Abort(this ThrowableComponent __self, string value) => _button_Abort.Value.SetValue(__self, value);
		public static System.Collections.Generic.List<Throwable_Object> GetThrownObjects(this ThrowableComponent __self) => _thrownObjects.Value.GetValue(__self);
		public static void SetThrownObjects(this ThrowableComponent __self, System.Collections.Generic.List<Throwable_Object> value) => _thrownObjects.Value.SetValue(__self, value);
		public static ChargeMeter GetChargeMeter(this ThrowableComponent __self) => _chargeMeter.Value.GetValue(__self);
		public static void SetChargeMeter(this ThrowableComponent __self, ChargeMeter value) => _chargeMeter.Value.SetValue(__self, value);
		public static uint GetUniqueThrowableIndex(this ThrowableComponent __self) => _uniqueThrowableIndex.Value.GetValue(__self);
		public static void SetUniqueThrowableIndex(this ThrowableComponent __self, uint value) => _uniqueThrowableIndex.Value.SetValue(__self, value);
		public static bool GetCanThrow(this ThrowableComponent __self) => _canThrow.Value.GetValue(__self);
		public static void SetCanThrow(this ThrowableComponent __self, bool value) => _canThrow.Value.SetValue(__self, value);
		public static Item_Base GetCurrentAmmo(this ThrowableComponent __self) => _currentAmmo.Value.GetValue(__self);
		public static void SetCurrentAmmo(this ThrowableComponent __self, Item_Base value) => _currentAmmo.Value.SetValue(__self, value);
		public static DisplayTextManager GetTextManager(this ThrowableComponent __self) => _textManager.Value.GetValue(__self);
		public static void SetTextManager(this ThrowableComponent __self, DisplayTextManager value) => _textManager.Value.SetValue(__self, value);
		public static bool GetIsTextShown(this ThrowableComponent __self) => _isTextShown.Value.GetValue(__self);
		public static void SetIsTextShown(this ThrowableComponent __self, bool value) => _isTextShown.Value.SetValue(__self, value);
		public static bool GetHasAborted(this ThrowableComponent __self) => _hasAborted.Value.GetValue(__self);
		public static void SetHasAborted(this ThrowableComponent __self, bool value) => _hasAborted.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<ThrowableComponent>> _Awake757602046 =
				new System.Lazy<MethodAccessor<ThrowableComponent>>(() => MethodAccessor<ThrowableComponent>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<ThrowableComponent>> _Start757602046 =
				new System.Lazy<MethodAccessor<ThrowableComponent>>(() => MethodAccessor<ThrowableComponent>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<ThrowableComponent>> _Update757602046 =
				new System.Lazy<MethodAccessor<ThrowableComponent>>(() => MethodAccessor<ThrowableComponent>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<ThrowableComponent>> _HandleLocalClient757602046 =
				new System.Lazy<MethodAccessor<ThrowableComponent>>(() => MethodAccessor<ThrowableComponent>.Create("HandleLocalClient"));
		private static readonly System.Lazy<MethodAccessor<ThrowableComponent>> _HandleCollision4019802200 =
				new System.Lazy<MethodAccessor<ThrowableComponent>>(() => MethodAccessor<ThrowableComponent>.Create("HandleCollision", typeof(Throwable_Object), typeof(UnityEngine.Vector3), typeof(UnityEngine.Vector3), typeof(ParentType), typeof(Network_Entity)));
		private static readonly System.Lazy<MethodAccessor<ThrowableComponent>> _StartThrow3698168060 =
				new System.Lazy<MethodAccessor<ThrowableComponent>>(() => MethodAccessor<ThrowableComponent>.Create("StartThrow", typeof(float), typeof(float)));
		private static readonly System.Lazy<MethodAccessor<ThrowableComponent>> _Throw3722884114 =
				new System.Lazy<MethodAccessor<ThrowableComponent>>(() => MethodAccessor<ThrowableComponent>.Create("Throw", typeof(uint), typeof(uint), typeof(UnityEngine.Vector3), typeof(UnityEngine.Vector3), typeof(Throwable_Object)));
		private static readonly System.Lazy<MethodAccessor<ThrowableComponent>> _GetThrowableFromIndex3473662494 =
				new System.Lazy<MethodAccessor<ThrowableComponent>>(() => MethodAccessor<ThrowableComponent>.Create("GetThrowableFromIndex", typeof(uint)));
		private static readonly System.Lazy<MethodAccessor<ThrowableComponent>> _GetThrowableFromAmmo3436837919 =
				new System.Lazy<MethodAccessor<ThrowableComponent>>(() => MethodAccessor<ThrowableComponent>.Create("GetThrowableFromAmmo", typeof(Item_Base)));
		private static readonly System.Lazy<MethodAccessor<ThrowableComponent>> _GetAmmo757602046 =
				new System.Lazy<MethodAccessor<ThrowableComponent>>(() => MethodAccessor<ThrowableComponent>.Create("GetAmmo"));
		private static readonly System.Lazy<MethodAccessor<ThrowableComponent>> _ReleaseButton757602046 =
				new System.Lazy<MethodAccessor<ThrowableComponent>>(() => MethodAccessor<ThrowableComponent>.Create("ReleaseButton"));
		private static readonly System.Lazy<MethodAccessor<ThrowableComponent>> _ReleaseHand757602046 =
				new System.Lazy<MethodAccessor<ThrowableComponent>>(() => MethodAccessor<ThrowableComponent>.Create("ReleaseHand"));
		private static readonly System.Lazy<MethodAccessor<ThrowableComponent>> _ResetThrowable757602046 =
				new System.Lazy<MethodAccessor<ThrowableComponent>>(() => MethodAccessor<ThrowableComponent>.Create("ResetThrowable"));
		private static readonly System.Lazy<MethodAccessor<ThrowableComponent>> _ResetCooldown757602046 =
				new System.Lazy<MethodAccessor<ThrowableComponent>>(() => MethodAccessor<ThrowableComponent>.Create("ResetCooldown"));
		private static readonly System.Lazy<MethodAccessor<ThrowableComponent>> _HideModelDuringCooldown757602046 =
				new System.Lazy<MethodAccessor<ThrowableComponent>>(() => MethodAccessor<ThrowableComponent>.Create("HideModelDuringCooldown"));
		private static readonly System.Lazy<MethodAccessor<ThrowableComponent>> _CallStartChargeEvent757602046 =
				new System.Lazy<MethodAccessor<ThrowableComponent>>(() => MethodAccessor<ThrowableComponent>.Create("CallStartChargeEvent"));
		private static readonly System.Lazy<MethodAccessor<ThrowableComponent>> _CallThrowEvent1662569814 =
				new System.Lazy<MethodAccessor<ThrowableComponent>>(() => MethodAccessor<ThrowableComponent>.Create("CallThrowEvent", typeof(UnityEngine.Vector3), typeof(UnityEngine.Vector3)));

		public static void Awake(this ThrowableComponent __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this ThrowableComponent __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this ThrowableComponent __self) => _Update757602046.Value.Invoke(__self);
		public static void HandleLocalClient(this ThrowableComponent __self) => _HandleLocalClient757602046.Value.Invoke(__self);
		public static void HandleCollision(this ThrowableComponent __self, Throwable_Object throwable, UnityEngine.Vector3 collisionPosition, UnityEngine.Vector3 normal, ParentType parentType, Network_Entity entity) => _HandleCollision4019802200.Value.Invoke(__self, throwable, collisionPosition, normal, parentType, entity);
		public static System.Collections.IEnumerator StartThrow(this ThrowableComponent __self, float throwDelay, float chargeNormal) => (System.Collections.IEnumerator)_StartThrow3698168060.Value.Invoke(__self, throwDelay, chargeNormal);
		public static void Throw(this ThrowableComponent __self, uint throwableIndex, uint throwablePickupIndex, UnityEngine.Vector3 position, UnityEngine.Vector3 force, Throwable_Object throwablePrefab) => _Throw3722884114.Value.Invoke(__self, throwableIndex, throwablePickupIndex, position, force, throwablePrefab);
		public static Throwable_Object GetThrowableFromIndex(this ThrowableComponent __self, uint throwableIndex) => (Throwable_Object)_GetThrowableFromIndex3473662494.Value.Invoke(__self, throwableIndex);
		public static Throwable_Object GetThrowableFromAmmo(this ThrowableComponent __self, Item_Base ammo) => (Throwable_Object)_GetThrowableFromAmmo3436837919.Value.Invoke(__self, ammo);
		public static Item_Base GetAmmo(this ThrowableComponent __self) => (Item_Base)_GetAmmo757602046.Value.Invoke(__self);
		public static void ReleaseButton(this ThrowableComponent __self) => _ReleaseButton757602046.Value.Invoke(__self);
		public static void ReleaseHand(this ThrowableComponent __self) => _ReleaseHand757602046.Value.Invoke(__self);
		public static void ResetThrowable(this ThrowableComponent __self) => _ResetThrowable757602046.Value.Invoke(__self);
		public static void ResetCooldown(this ThrowableComponent __self) => _ResetCooldown757602046.Value.Invoke(__self);
		public static void HideModelDuringCooldown(this ThrowableComponent __self) => _HideModelDuringCooldown757602046.Value.Invoke(__self);
		public static void CallStartChargeEvent(this ThrowableComponent __self) => _CallStartChargeEvent757602046.Value.Invoke(__self);
		public static void CallThrowEvent(this ThrowableComponent __self, UnityEngine.Vector3 position, UnityEngine.Vector3 force) => _CallThrowEvent1662569814.Value.Invoke(__self, position, force);

	}

	public static class PrivateAccessor_ThrowableComponent_Hand
	{

		private static readonly System.Lazy<MethodAccessor<ThrowableComponent_Hand>> _CallStartChargeEvent757602046 =
				new System.Lazy<MethodAccessor<ThrowableComponent_Hand>>(() => MethodAccessor<ThrowableComponent_Hand>.Create("CallStartChargeEvent"));
		private static readonly System.Lazy<MethodAccessor<ThrowableComponent_Hand>> _ReleaseButton757602046 =
				new System.Lazy<MethodAccessor<ThrowableComponent_Hand>>(() => MethodAccessor<ThrowableComponent_Hand>.Create("ReleaseButton"));

		public static void CallStartChargeEvent(this ThrowableComponent_Hand __self) => _CallStartChargeEvent757602046.Value.Invoke(__self);
		public static void ReleaseButton(this ThrowableComponent_Hand __self) => _ReleaseButton757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Axe
	{

		private static readonly System.Lazy<FieldAccessor<Axe, ParticleController>> _woodParticles =
				new System.Lazy<FieldAccessor<Axe, ParticleController>>(() => FieldAccessor<Axe, ParticleController>.Create("woodParticles"));
		private static readonly System.Lazy<FieldAccessor<Axe, FMODUnity.StudioEventEmitter>> _axeSoundEmitter =
				new System.Lazy<FieldAccessor<Axe, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<Axe, FMODUnity.StudioEventEmitter>.Create("axeSoundEmitter"));
		private static readonly System.Lazy<FieldAccessor<Axe, string>> _eventRef_swing =
				new System.Lazy<FieldAccessor<Axe, string>>(() => FieldAccessor<Axe, string>.Create("eventRef_swing"));
		private static readonly System.Lazy<FieldAccessor<Axe, PlayerAnimator>> _playerAnimator =
				new System.Lazy<FieldAccessor<Axe, PlayerAnimator>>(() => FieldAccessor<Axe, PlayerAnimator>.Create("playerAnimator"));
		private static readonly System.Lazy<FieldAccessor<Axe, Network_Player>> _playerNetwork =
				new System.Lazy<FieldAccessor<Axe, Network_Player>>(() => FieldAccessor<Axe, Network_Player>.Create("playerNetwork"));
		private static readonly System.Lazy<FieldAccessor<Axe, PlayerInventory>> _playerInventory =
				new System.Lazy<FieldAccessor<Axe, PlayerInventory>>(() => FieldAccessor<Axe, PlayerInventory>.Create("playerInventory"));
		private static readonly System.Lazy<FieldAccessor<Axe, CanvasHelper>> _canvas =
				new System.Lazy<FieldAccessor<Axe, CanvasHelper>>(() => FieldAccessor<Axe, CanvasHelper>.Create("canvas"));
		private static readonly System.Lazy<FieldAccessor<Axe, float>> _chopTimer =
				new System.Lazy<FieldAccessor<Axe, float>>(() => FieldAccessor<Axe, float>.Create("chopTimer"));
		private static readonly System.Lazy<FieldAccessor<Axe, Block>> _aimedAtBlock =
				new System.Lazy<FieldAccessor<Axe, Block>>(() => FieldAccessor<Axe, Block>.Create("aimedAtBlock"));
		private static readonly System.Lazy<FieldAccessor<Axe, Block>> _currentBlockToRemove =
				new System.Lazy<FieldAccessor<Axe, Block>>(() => FieldAccessor<Axe, Block>.Create("currentBlockToRemove"));
		private static readonly System.Lazy<FieldAccessor<Axe, HarvestableTree>> _currentTreeToChop =
				new System.Lazy<FieldAccessor<Axe, HarvestableTree>>(() => FieldAccessor<Axe, HarvestableTree>.Create("currentTreeToChop"));
		private static readonly System.Lazy<FieldAccessor<Axe, UnityEngine.RaycastHit>> _rayHit =
				new System.Lazy<FieldAccessor<Axe, UnityEngine.RaycastHit>>(() => FieldAccessor<Axe, UnityEngine.RaycastHit>.Create("rayHit"));

		public static ParticleController GetWoodParticles(this Axe __self) => _woodParticles.Value.GetValue(__self);
		public static void SetWoodParticles(this Axe __self, ParticleController value) => _woodParticles.Value.SetValue(__self, value);
		public static FMODUnity.StudioEventEmitter GetAxeSoundEmitter(this Axe __self) => _axeSoundEmitter.Value.GetValue(__self);
		public static void SetAxeSoundEmitter(this Axe __self, FMODUnity.StudioEventEmitter value) => _axeSoundEmitter.Value.SetValue(__self, value);
		public static string GetEventRef_swing(this Axe __self) => _eventRef_swing.Value.GetValue(__self);
		public static void SetEventRef_swing(this Axe __self, string value) => _eventRef_swing.Value.SetValue(__self, value);
		public static PlayerAnimator GetPlayerAnimator(this Axe __self) => _playerAnimator.Value.GetValue(__self);
		public static void SetPlayerAnimator(this Axe __self, PlayerAnimator value) => _playerAnimator.Value.SetValue(__self, value);
		public static Network_Player GetPlayerNetwork(this Axe __self) => _playerNetwork.Value.GetValue(__self);
		public static void SetPlayerNetwork(this Axe __self, Network_Player value) => _playerNetwork.Value.SetValue(__self, value);
		public static PlayerInventory GetPlayerInventory(this Axe __self) => _playerInventory.Value.GetValue(__self);
		public static void SetPlayerInventory(this Axe __self, PlayerInventory value) => _playerInventory.Value.SetValue(__self, value);
		public static CanvasHelper GetCanvas(this Axe __self) => _canvas.Value.GetValue(__self);
		public static void SetCanvas(this Axe __self, CanvasHelper value) => _canvas.Value.SetValue(__self, value);
		public static float GetChopTimer(this Axe __self) => _chopTimer.Value.GetValue(__self);
		public static void SetChopTimer(this Axe __self, float value) => _chopTimer.Value.SetValue(__self, value);
		public static Block GetAimedAtBlock(this Axe __self) => _aimedAtBlock.Value.GetValue(__self);
		public static void SetAimedAtBlock(this Axe __self, Block value) => _aimedAtBlock.Value.SetValue(__self, value);
		public static Block GetCurrentBlockToRemove(this Axe __self) => _currentBlockToRemove.Value.GetValue(__self);
		public static void SetCurrentBlockToRemove(this Axe __self, Block value) => _currentBlockToRemove.Value.SetValue(__self, value);
		public static HarvestableTree GetCurrentTreeToChop(this Axe __self) => _currentTreeToChop.Value.GetValue(__self);
		public static void SetCurrentTreeToChop(this Axe __self, HarvestableTree value) => _currentTreeToChop.Value.SetValue(__self, value);
		public static UnityEngine.RaycastHit GetRayHit(this Axe __self) => _rayHit.Value.GetValue(__self);
		public static void SetRayHit(this Axe __self, UnityEngine.RaycastHit value) => _rayHit.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Axe>> _Start757602046 =
				new System.Lazy<MethodAccessor<Axe>>(() => MethodAccessor<Axe>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<Axe>> _Update757602046 =
				new System.Lazy<MethodAccessor<Axe>>(() => MethodAccessor<Axe>.Create("Update"));

		public static void Start(this Axe __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this Axe __self) => _Update757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Message_AxeHit
	{

		private static readonly System.Lazy<FieldAccessor<Message_AxeHit, float>> _posX =
				new System.Lazy<FieldAccessor<Message_AxeHit, float>>(() => FieldAccessor<Message_AxeHit, float>.Create("posX"));
		private static readonly System.Lazy<FieldAccessor<Message_AxeHit, float>> _posY =
				new System.Lazy<FieldAccessor<Message_AxeHit, float>>(() => FieldAccessor<Message_AxeHit, float>.Create("posY"));
		private static readonly System.Lazy<FieldAccessor<Message_AxeHit, float>> _posZ =
				new System.Lazy<FieldAccessor<Message_AxeHit, float>>(() => FieldAccessor<Message_AxeHit, float>.Create("posZ"));
		private static readonly System.Lazy<FieldAccessor<Message_AxeHit, float>> _rotX =
				new System.Lazy<FieldAccessor<Message_AxeHit, float>>(() => FieldAccessor<Message_AxeHit, float>.Create("rotX"));
		private static readonly System.Lazy<FieldAccessor<Message_AxeHit, float>> _rotY =
				new System.Lazy<FieldAccessor<Message_AxeHit, float>>(() => FieldAccessor<Message_AxeHit, float>.Create("rotY"));
		private static readonly System.Lazy<FieldAccessor<Message_AxeHit, float>> _rotZ =
				new System.Lazy<FieldAccessor<Message_AxeHit, float>>(() => FieldAccessor<Message_AxeHit, float>.Create("rotZ"));

		public static float GetPosX(this Message_AxeHit __self) => _posX.Value.GetValue(__self);
		public static void SetPosX(this Message_AxeHit __self, float value) => _posX.Value.SetValue(__self, value);
		public static float GetPosY(this Message_AxeHit __self) => _posY.Value.GetValue(__self);
		public static void SetPosY(this Message_AxeHit __self, float value) => _posY.Value.SetValue(__self, value);
		public static float GetPosZ(this Message_AxeHit __self) => _posZ.Value.GetValue(__self);
		public static void SetPosZ(this Message_AxeHit __self, float value) => _posZ.Value.SetValue(__self, value);
		public static float GetRotX(this Message_AxeHit __self) => _rotX.Value.GetValue(__self);
		public static void SetRotX(this Message_AxeHit __self, float value) => _rotX.Value.SetValue(__self, value);
		public static float GetRotY(this Message_AxeHit __self) => _rotY.Value.GetValue(__self);
		public static void SetRotY(this Message_AxeHit __self, float value) => _rotY.Value.SetValue(__self, value);
		public static float GetRotZ(this Message_AxeHit __self) => _rotZ.Value.GetValue(__self);
		public static void SetRotZ(this Message_AxeHit __self, float value) => _rotZ.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_AdvancedCollision
	{

		private static readonly System.Lazy<MethodAccessor<AdvancedCollision>> _Awake757602046 =
				new System.Lazy<MethodAccessor<AdvancedCollision>>(() => MethodAccessor<AdvancedCollision>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<AdvancedCollision>> _HasSamePosition430668164 =
				new System.Lazy<MethodAccessor<AdvancedCollision>>(() => MethodAccessor<AdvancedCollision>.Create("HasSamePosition", typeof(Block), typeof(Block)));

		public static void Awake(this AdvancedCollision __self) => _Awake757602046.Value.Invoke(__self);
		public static bool HasSamePosition(this AdvancedCollision __self, Block block, Block block2) => (bool)_HasSamePosition430668164.Value.Invoke(__self, block, block2);

	}

	public static class PrivateAccessor_Block
	{

		private static readonly System.Lazy<FieldAccessor<Block, int>> _health =
				new System.Lazy<FieldAccessor<Block, int>>(() => FieldAccessor<Block, int>.Create("health"));
		private static readonly System.Lazy<FieldAccessor<Block, int>> _maxHealth =
				new System.Lazy<FieldAccessor<Block, int>>(() => FieldAccessor<Block, int>.Create("maxHealth"));
		private static readonly System.Lazy<FieldAccessor<Block, UnityEngine.MaterialPropertyBlock>> _matPropBlock =
				new System.Lazy<FieldAccessor<Block, UnityEngine.MaterialPropertyBlock>>(() => FieldAccessor<Block, UnityEngine.MaterialPropertyBlock>.Create("matPropBlock"));

		public static int GetHealth(this Block __self) => _health.Value.GetValue(__self);
		public static void SetHealth(this Block __self, int value) => _health.Value.SetValue(__self, value);
		public static int GetMaxHealth(this Block __self) => _maxHealth.Value.GetValue(__self);
		public static void SetMaxHealth(this Block __self, int value) => _maxHealth.Value.SetValue(__self, value);
		public static UnityEngine.MaterialPropertyBlock GetMatPropBlock(this Block __self) => _matPropBlock.Value.GetValue(__self);
		public static void SetMatPropBlock(this Block __self, UnityEngine.MaterialPropertyBlock value) => _matPropBlock.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Block>> _Awake757602046 =
				new System.Lazy<MethodAccessor<Block>>(() => MethodAccessor<Block>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<Block>> _Start757602046 =
				new System.Lazy<MethodAccessor<Block>>(() => MethodAccessor<Block>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<Block>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<Block>>(() => MethodAccessor<Block>.Create("OnDestroy"));

		public static void Awake(this Block __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this Block __self) => _Start757602046.Value.Invoke(__self);
		public static void OnDestroy(this Block __self) => _OnDestroy757602046.Value.Invoke(__self);

	}

	public static class Private_Block
	{

		private static readonly System.Lazy<StaticFieldAccessor<ColliderPrefabEnabler>> _colliderPrefabEnabler =
				new System.Lazy<StaticFieldAccessor<ColliderPrefabEnabler>>(() => StaticFieldAccessor<ColliderPrefabEnabler>.Create(typeof(Block), "colliderPrefabEnabler"));

		public static ColliderPrefabEnabler GetColliderPrefabEnabler() => _colliderPrefabEnabler.Value.GetValue();
		public static void SetColliderPrefabEnabler(ColliderPrefabEnabler value) => _colliderPrefabEnabler.Value.SetValue(value);

	}

	public static class PrivateAccessor_BlockCollisionConsolidator
	{

		private static readonly System.Lazy<FieldAccessor<BlockCollisionConsolidator, System.Collections.Generic.Dictionary<int, System.Collections.Generic.List<Block>>>> _blockMap =
				new System.Lazy<FieldAccessor<BlockCollisionConsolidator, System.Collections.Generic.Dictionary<int, System.Collections.Generic.List<Block>>>>(() => FieldAccessor<BlockCollisionConsolidator, System.Collections.Generic.Dictionary<int, System.Collections.Generic.List<Block>>>.Create("blockMap"));
		private static readonly System.Lazy<FieldAccessor<BlockCollisionConsolidator, System.Collections.Generic.Dictionary<Block, UnityEngine.BoxCollider[]>>> _queuedBlocks =
				new System.Lazy<FieldAccessor<BlockCollisionConsolidator, System.Collections.Generic.Dictionary<Block, UnityEngine.BoxCollider[]>>>(() => FieldAccessor<BlockCollisionConsolidator, System.Collections.Generic.Dictionary<Block, UnityEngine.BoxCollider[]>>.Create("queuedBlocks"));
		private static readonly System.Lazy<FieldAccessor<BlockCollisionConsolidator, System.Collections.Generic.Dictionary<Block, int>>> _blockToIndex =
				new System.Lazy<FieldAccessor<BlockCollisionConsolidator, System.Collections.Generic.Dictionary<Block, int>>>(() => FieldAccessor<BlockCollisionConsolidator, System.Collections.Generic.Dictionary<Block, int>>.Create("blockToIndex"));
		private static readonly System.Lazy<FieldAccessor<BlockCollisionConsolidator, System.Collections.Generic.Dictionary<int, Block>>> _indexToBlock =
				new System.Lazy<FieldAccessor<BlockCollisionConsolidator, System.Collections.Generic.Dictionary<int, Block>>>(() => FieldAccessor<BlockCollisionConsolidator, System.Collections.Generic.Dictionary<int, Block>>.Create("indexToBlock"));
		private static readonly System.Lazy<FieldAccessor<BlockCollisionConsolidator, System.Collections.Generic.List<UnityEngine.Vector3>>> _vertices =
				new System.Lazy<FieldAccessor<BlockCollisionConsolidator, System.Collections.Generic.List<UnityEngine.Vector3>>>(() => FieldAccessor<BlockCollisionConsolidator, System.Collections.Generic.List<UnityEngine.Vector3>>.Create("vertices"));
		private static readonly System.Lazy<FieldAccessor<BlockCollisionConsolidator, System.Collections.Generic.List<int>>> _indices =
				new System.Lazy<FieldAccessor<BlockCollisionConsolidator, System.Collections.Generic.List<int>>>(() => FieldAccessor<BlockCollisionConsolidator, System.Collections.Generic.List<int>>.Create("indices"));
		private static readonly System.Lazy<FieldAccessor<BlockCollisionConsolidator, System.Collections.Generic.List<UnityEngine.BoxCollider>>> _collidersToDeactivate =
				new System.Lazy<FieldAccessor<BlockCollisionConsolidator, System.Collections.Generic.List<UnityEngine.BoxCollider>>>(() => FieldAccessor<BlockCollisionConsolidator, System.Collections.Generic.List<UnityEngine.BoxCollider>>.Create("collidersToDeactivate"));
		private static readonly System.Lazy<FieldAccessor<BlockCollisionConsolidator, System.Collections.Generic.List<int>>> _lastActiveBlocks =
				new System.Lazy<FieldAccessor<BlockCollisionConsolidator, System.Collections.Generic.List<int>>>(() => FieldAccessor<BlockCollisionConsolidator, System.Collections.Generic.List<int>>.Create("lastActiveBlocks"));
		private static readonly System.Lazy<FieldAccessor<BlockCollisionConsolidator, System.Collections.Generic.List<int>>> _newActiveBlocksCache =
				new System.Lazy<FieldAccessor<BlockCollisionConsolidator, System.Collections.Generic.List<int>>>(() => FieldAccessor<BlockCollisionConsolidator, System.Collections.Generic.List<int>>.Create("newActiveBlocksCache"));
		private static readonly System.Lazy<FieldAccessor<BlockCollisionConsolidator, System.Collections.Generic.Dictionary<int, int>>> _tempActivatedCells =
				new System.Lazy<FieldAccessor<BlockCollisionConsolidator, System.Collections.Generic.Dictionary<int, int>>>(() => FieldAccessor<BlockCollisionConsolidator, System.Collections.Generic.Dictionary<int, int>>.Create("tempActivatedCells"));
		private static readonly System.Lazy<FieldAccessor<BlockCollisionConsolidator, System.Collections.Generic.List<UnityEngine.BoxCollider>>> _tempActivatedBlocks =
				new System.Lazy<FieldAccessor<BlockCollisionConsolidator, System.Collections.Generic.List<UnityEngine.BoxCollider>>>(() => FieldAccessor<BlockCollisionConsolidator, System.Collections.Generic.List<UnityEngine.BoxCollider>>.Create("tempActivatedBlocks"));
		private static readonly System.Lazy<FieldAccessor<BlockCollisionConsolidator, System.Collections.Generic.HashSet<int>>> _duplicateFilterCashed =
				new System.Lazy<FieldAccessor<BlockCollisionConsolidator, System.Collections.Generic.HashSet<int>>>(() => FieldAccessor<BlockCollisionConsolidator, System.Collections.Generic.HashSet<int>>.Create("duplicateFilterCashed"));
		private static readonly System.Lazy<FieldAccessor<BlockCollisionConsolidator, UnityEngine.Mesh>> _bakingCollisionMesh =
				new System.Lazy<FieldAccessor<BlockCollisionConsolidator, UnityEngine.Mesh>>(() => FieldAccessor<BlockCollisionConsolidator, UnityEngine.Mesh>.Create("bakingCollisionMesh"));
		private static readonly System.Lazy<FieldAccessor<BlockCollisionConsolidator, UnityEngine.MeshCollider>> _meshCollider =
				new System.Lazy<FieldAccessor<BlockCollisionConsolidator, UnityEngine.MeshCollider>>(() => FieldAccessor<BlockCollisionConsolidator, UnityEngine.MeshCollider>.Create("meshCollider"));
		private static readonly System.Lazy<FieldAccessor<BlockCollisionConsolidator, Network_Player>> _localPlayer =
				new System.Lazy<FieldAccessor<BlockCollisionConsolidator, Network_Player>>(() => FieldAccessor<BlockCollisionConsolidator, Network_Player>.Create("localPlayer"));
		private static readonly System.Lazy<FieldAccessor<BlockCollisionConsolidator, int>> _lastPlayerSpatialIndex =
				new System.Lazy<FieldAccessor<BlockCollisionConsolidator, int>>(() => FieldAccessor<BlockCollisionConsolidator, int>.Create("lastPlayerSpatialIndex"));
		private static readonly System.Lazy<FieldAccessor<BlockCollisionConsolidator, bool>> _drawAllCollidersState =
				new System.Lazy<FieldAccessor<BlockCollisionConsolidator, bool>>(() => FieldAccessor<BlockCollisionConsolidator, bool>.Create("drawAllCollidersState"));
		private static readonly System.Lazy<FieldAccessor<BlockCollisionConsolidator, System.Threading.Thread>> _bakeThread =
				new System.Lazy<FieldAccessor<BlockCollisionConsolidator, System.Threading.Thread>>(() => FieldAccessor<BlockCollisionConsolidator, System.Threading.Thread>.Create("bakeThread"));
		private static readonly System.Lazy<FieldAccessor<BlockCollisionConsolidator, System.Collections.Generic.Queue<System.ValueTuple<System.Threading.Thread, UnityEngine.Mesh>>>> _discardedBakeThreads =
				new System.Lazy<FieldAccessor<BlockCollisionConsolidator, System.Collections.Generic.Queue<System.ValueTuple<System.Threading.Thread, UnityEngine.Mesh>>>>(() => FieldAccessor<BlockCollisionConsolidator, System.Collections.Generic.Queue<System.ValueTuple<System.Threading.Thread, UnityEngine.Mesh>>>.Create("discardedBakeThreads"));

		public static System.Collections.Generic.Dictionary<int, System.Collections.Generic.List<Block>> GetBlockMap(this BlockCollisionConsolidator __self) => _blockMap.Value.GetValue(__self);
		public static void SetBlockMap(this BlockCollisionConsolidator __self, System.Collections.Generic.Dictionary<int, System.Collections.Generic.List<Block>> value) => _blockMap.Value.SetValue(__self, value);
		public static System.Collections.Generic.Dictionary<Block, UnityEngine.BoxCollider[]> GetQueuedBlocks(this BlockCollisionConsolidator __self) => _queuedBlocks.Value.GetValue(__self);
		public static void SetQueuedBlocks(this BlockCollisionConsolidator __self, System.Collections.Generic.Dictionary<Block, UnityEngine.BoxCollider[]> value) => _queuedBlocks.Value.SetValue(__self, value);
		public static System.Collections.Generic.Dictionary<Block, int> GetBlockToIndex(this BlockCollisionConsolidator __self) => _blockToIndex.Value.GetValue(__self);
		public static void SetBlockToIndex(this BlockCollisionConsolidator __self, System.Collections.Generic.Dictionary<Block, int> value) => _blockToIndex.Value.SetValue(__self, value);
		public static System.Collections.Generic.Dictionary<int, Block> GetIndexToBlock(this BlockCollisionConsolidator __self) => _indexToBlock.Value.GetValue(__self);
		public static void SetIndexToBlock(this BlockCollisionConsolidator __self, System.Collections.Generic.Dictionary<int, Block> value) => _indexToBlock.Value.SetValue(__self, value);
		public static System.Collections.Generic.List<UnityEngine.Vector3> GetVertices(this BlockCollisionConsolidator __self) => _vertices.Value.GetValue(__self);
		public static void SetVertices(this BlockCollisionConsolidator __self, System.Collections.Generic.List<UnityEngine.Vector3> value) => _vertices.Value.SetValue(__self, value);
		public static System.Collections.Generic.List<int> GetIndices(this BlockCollisionConsolidator __self) => _indices.Value.GetValue(__self);
		public static void SetIndices(this BlockCollisionConsolidator __self, System.Collections.Generic.List<int> value) => _indices.Value.SetValue(__self, value);
		public static System.Collections.Generic.List<UnityEngine.BoxCollider> GetCollidersToDeactivate(this BlockCollisionConsolidator __self) => _collidersToDeactivate.Value.GetValue(__self);
		public static void SetCollidersToDeactivate(this BlockCollisionConsolidator __self, System.Collections.Generic.List<UnityEngine.BoxCollider> value) => _collidersToDeactivate.Value.SetValue(__self, value);
		public static System.Collections.Generic.List<int> GetLastActiveBlocks(this BlockCollisionConsolidator __self) => _lastActiveBlocks.Value.GetValue(__self);
		public static void SetLastActiveBlocks(this BlockCollisionConsolidator __self, System.Collections.Generic.List<int> value) => _lastActiveBlocks.Value.SetValue(__self, value);
		public static System.Collections.Generic.List<int> GetNewActiveBlocksCache(this BlockCollisionConsolidator __self) => _newActiveBlocksCache.Value.GetValue(__self);
		public static void SetNewActiveBlocksCache(this BlockCollisionConsolidator __self, System.Collections.Generic.List<int> value) => _newActiveBlocksCache.Value.SetValue(__self, value);
		public static System.Collections.Generic.Dictionary<int, int> GetTempActivatedCells(this BlockCollisionConsolidator __self) => _tempActivatedCells.Value.GetValue(__self);
		public static void SetTempActivatedCells(this BlockCollisionConsolidator __self, System.Collections.Generic.Dictionary<int, int> value) => _tempActivatedCells.Value.SetValue(__self, value);
		public static System.Collections.Generic.List<UnityEngine.BoxCollider> GetTempActivatedBlocks(this BlockCollisionConsolidator __self) => _tempActivatedBlocks.Value.GetValue(__self);
		public static void SetTempActivatedBlocks(this BlockCollisionConsolidator __self, System.Collections.Generic.List<UnityEngine.BoxCollider> value) => _tempActivatedBlocks.Value.SetValue(__self, value);
		public static System.Collections.Generic.HashSet<int> GetDuplicateFilterCashed(this BlockCollisionConsolidator __self) => _duplicateFilterCashed.Value.GetValue(__self);
		public static void SetDuplicateFilterCashed(this BlockCollisionConsolidator __self, System.Collections.Generic.HashSet<int> value) => _duplicateFilterCashed.Value.SetValue(__self, value);
		public static UnityEngine.Mesh GetBakingCollisionMesh(this BlockCollisionConsolidator __self) => _bakingCollisionMesh.Value.GetValue(__self);
		public static void SetBakingCollisionMesh(this BlockCollisionConsolidator __self, UnityEngine.Mesh value) => _bakingCollisionMesh.Value.SetValue(__self, value);
		public static UnityEngine.MeshCollider GetMeshCollider(this BlockCollisionConsolidator __self) => _meshCollider.Value.GetValue(__self);
		public static void SetMeshCollider(this BlockCollisionConsolidator __self, UnityEngine.MeshCollider value) => _meshCollider.Value.SetValue(__self, value);
		public static Network_Player GetLocalPlayer(this BlockCollisionConsolidator __self) => _localPlayer.Value.GetValue(__self);
		public static void SetLocalPlayer(this BlockCollisionConsolidator __self, Network_Player value) => _localPlayer.Value.SetValue(__self, value);
		public static int GetLastPlayerSpatialIndex(this BlockCollisionConsolidator __self) => _lastPlayerSpatialIndex.Value.GetValue(__self);
		public static void SetLastPlayerSpatialIndex(this BlockCollisionConsolidator __self, int value) => _lastPlayerSpatialIndex.Value.SetValue(__self, value);
		public static bool GetDrawAllCollidersState(this BlockCollisionConsolidator __self) => _drawAllCollidersState.Value.GetValue(__self);
		public static void SetDrawAllCollidersState(this BlockCollisionConsolidator __self, bool value) => _drawAllCollidersState.Value.SetValue(__self, value);
		public static System.Threading.Thread GetBakeThread(this BlockCollisionConsolidator __self) => _bakeThread.Value.GetValue(__self);
		public static void SetBakeThread(this BlockCollisionConsolidator __self, System.Threading.Thread value) => _bakeThread.Value.SetValue(__self, value);
		public static System.Collections.Generic.Queue<System.ValueTuple<System.Threading.Thread, UnityEngine.Mesh>> GetDiscardedBakeThreads(this BlockCollisionConsolidator __self) => _discardedBakeThreads.Value.GetValue(__self);
		public static void SetDiscardedBakeThreads(this BlockCollisionConsolidator __self, System.Collections.Generic.Queue<System.ValueTuple<System.Threading.Thread, UnityEngine.Mesh>> value) => _discardedBakeThreads.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<BlockCollisionConsolidator>> _Awake757602046 =
				new System.Lazy<MethodAccessor<BlockCollisionConsolidator>>(() => MethodAccessor<BlockCollisionConsolidator>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<BlockCollisionConsolidator>> _OnEnable757602046 =
				new System.Lazy<MethodAccessor<BlockCollisionConsolidator>>(() => MethodAccessor<BlockCollisionConsolidator>.Create("OnEnable"));
		private static readonly System.Lazy<MethodAccessor<BlockCollisionConsolidator>> _OnDisable757602046 =
				new System.Lazy<MethodAccessor<BlockCollisionConsolidator>>(() => MethodAccessor<BlockCollisionConsolidator>.Create("OnDisable"));
		private static readonly System.Lazy<MethodAccessor<BlockCollisionConsolidator>> _Update757602046 =
				new System.Lazy<MethodAccessor<BlockCollisionConsolidator>>(() => MethodAccessor<BlockCollisionConsolidator>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<BlockCollisionConsolidator>> _GetCellIndex3429126434 =
				new System.Lazy<MethodAccessor<BlockCollisionConsolidator>>(() => MethodAccessor<BlockCollisionConsolidator>.Create("GetCellIndex", typeof(UnityEngine.Vector3)));
		private static readonly System.Lazy<MethodAccessor<BlockCollisionConsolidator>> _GetCellPosition3486186818 =
				new System.Lazy<MethodAccessor<BlockCollisionConsolidator>>(() => MethodAccessor<BlockCollisionConsolidator>.Create("GetCellPosition", typeof(int)));
		private static readonly System.Lazy<MethodAccessor<BlockCollisionConsolidator>> _TempActivateCellAndNeighbours2409303675 =
				new System.Lazy<MethodAccessor<BlockCollisionConsolidator>>(() => MethodAccessor<BlockCollisionConsolidator>.Create("TempActivateCellAndNeighbours", typeof(int), typeof(System.Collections.Generic.HashSet<int>)));
		private static readonly System.Lazy<MethodAccessor<BlockCollisionConsolidator>> _UpdateActiveCollision757602046 =
				new System.Lazy<MethodAccessor<BlockCollisionConsolidator>>(() => MethodAccessor<BlockCollisionConsolidator>.Create("UpdateActiveCollision"));
		private static readonly System.Lazy<MethodAccessor<BlockCollisionConsolidator>> _SetBlocksActive3416760334 =
				new System.Lazy<MethodAccessor<BlockCollisionConsolidator>>(() => MethodAccessor<BlockCollisionConsolidator>.Create("SetBlocksActive", typeof(System.Collections.Generic.List<Block>), typeof(bool)));
		private static readonly System.Lazy<MethodAccessor<BlockCollisionConsolidator>> _SetBlockActive3457661511 =
				new System.Lazy<MethodAccessor<BlockCollisionConsolidator>>(() => MethodAccessor<BlockCollisionConsolidator>.Create("SetBlockActive", typeof(Block), typeof(bool)));
		private static readonly System.Lazy<MethodAccessor<BlockCollisionConsolidator>> _OnDrawGizmos757602046 =
				new System.Lazy<MethodAccessor<BlockCollisionConsolidator>>(() => MethodAccessor<BlockCollisionConsolidator>.Create("OnDrawGizmos"));
		private static readonly System.Lazy<MethodAccessor<BlockCollisionConsolidator>> _DrawAllCollidersState757602046 =
				new System.Lazy<MethodAccessor<BlockCollisionConsolidator>>(() => MethodAccessor<BlockCollisionConsolidator>.Create("DrawAllCollidersState"));

		public static void Awake(this BlockCollisionConsolidator __self) => _Awake757602046.Value.Invoke(__self);
		public static void OnEnable(this BlockCollisionConsolidator __self) => _OnEnable757602046.Value.Invoke(__self);
		public static void OnDisable(this BlockCollisionConsolidator __self) => _OnDisable757602046.Value.Invoke(__self);
		public static void Update(this BlockCollisionConsolidator __self) => _Update757602046.Value.Invoke(__self);
		public static System.ValueTuple<bool, int> GetCellIndex(this BlockCollisionConsolidator __self, UnityEngine.Vector3 position) => (System.ValueTuple<bool, int>)_GetCellIndex3429126434.Value.Invoke(__self, position);
		public static UnityEngine.Vector3 GetCellPosition(this BlockCollisionConsolidator __self, int index) => (UnityEngine.Vector3)_GetCellPosition3486186818.Value.Invoke(__self, index);
		public static void TempActivateCellAndNeighbours(this BlockCollisionConsolidator __self, int cellIndex, System.Collections.Generic.HashSet<int> duplicateFilter) => _TempActivateCellAndNeighbours2409303675.Value.Invoke(__self, cellIndex, duplicateFilter);
		public static void UpdateActiveCollision(this BlockCollisionConsolidator __self) => _UpdateActiveCollision757602046.Value.Invoke(__self);
		public static void SetBlocksActive(this BlockCollisionConsolidator __self, System.Collections.Generic.List<Block> blocks, bool active) => _SetBlocksActive3416760334.Value.Invoke(__self, blocks, active);
		public static void SetBlockActive(this BlockCollisionConsolidator __self, Block block, bool active) => _SetBlockActive3457661511.Value.Invoke(__self, block, active);
		public static void OnDrawGizmos(this BlockCollisionConsolidator __self) => _OnDrawGizmos757602046.Value.Invoke(__self);
		public static void DrawAllCollidersState(this BlockCollisionConsolidator __self) => _DrawAllCollidersState757602046.Value.Invoke(__self);

	}

	public static class Private_BlockCollisionConsolidator
	{

		private static readonly System.Lazy<StaticFieldAccessor<UnityEngine.Vector3>> _SpaceSize =
				new System.Lazy<StaticFieldAccessor<UnityEngine.Vector3>>(() => StaticFieldAccessor<UnityEngine.Vector3>.Create(typeof(BlockCollisionConsolidator), "SpaceSize"));
		private static readonly System.Lazy<StaticFieldAccessor<UnityEngine.Vector3>> _SpaceOffset =
				new System.Lazy<StaticFieldAccessor<UnityEngine.Vector3>>(() => StaticFieldAccessor<UnityEngine.Vector3>.Create(typeof(BlockCollisionConsolidator), "SpaceOffset"));
		private static readonly System.Lazy<StaticFieldAccessor<UnityEngine.Vector3>> _SpaceABS =
				new System.Lazy<StaticFieldAccessor<UnityEngine.Vector3>>(() => StaticFieldAccessor<UnityEngine.Vector3>.Create(typeof(BlockCollisionConsolidator), "SpaceABS"));
		private static readonly System.Lazy<StaticFieldAccessor<UnityEngine.Vector3>> _HalfCell =
				new System.Lazy<StaticFieldAccessor<UnityEngine.Vector3>>(() => StaticFieldAccessor<UnityEngine.Vector3>.Create(typeof(BlockCollisionConsolidator), "HalfCell"));
		private static readonly System.Lazy<StaticFieldAccessor<System.Int32[]>> _CubeIndices =
				new System.Lazy<StaticFieldAccessor<System.Int32[]>>(() => StaticFieldAccessor<System.Int32[]>.Create(typeof(BlockCollisionConsolidator), "CubeIndices"));
		private static readonly System.Lazy<StaticFieldAccessor<float>> _SizeXZ =
				new System.Lazy<StaticFieldAccessor<float>>(() => StaticFieldAccessor<float>.Create(typeof(BlockCollisionConsolidator), "SizeXZ"));
		private static readonly System.Lazy<StaticFieldAccessor<float>> _SizeY =
				new System.Lazy<StaticFieldAccessor<float>>(() => StaticFieldAccessor<float>.Create(typeof(BlockCollisionConsolidator), "SizeY"));
		private static readonly System.Lazy<StaticFieldAccessor<float>> _MinY =
				new System.Lazy<StaticFieldAccessor<float>>(() => StaticFieldAccessor<float>.Create(typeof(BlockCollisionConsolidator), "MinY"));
		private static readonly System.Lazy<StaticFieldAccessor<float>> _CellSize =
				new System.Lazy<StaticFieldAccessor<float>>(() => StaticFieldAccessor<float>.Create(typeof(BlockCollisionConsolidator), "CellSize"));
		private static readonly System.Lazy<StaticFieldAccessor<int>> _XIndexOffset =
				new System.Lazy<StaticFieldAccessor<int>>(() => StaticFieldAccessor<int>.Create(typeof(BlockCollisionConsolidator), "XIndexOffset"));
		private static readonly System.Lazy<StaticFieldAccessor<int>> _YIndexOffset =
				new System.Lazy<StaticFieldAccessor<int>>(() => StaticFieldAccessor<int>.Create(typeof(BlockCollisionConsolidator), "YIndexOffset"));
		private static readonly System.Lazy<StaticFieldAccessor<int>> _ZIndexOffset =
				new System.Lazy<StaticFieldAccessor<int>>(() => StaticFieldAccessor<int>.Create(typeof(BlockCollisionConsolidator), "ZIndexOffset"));

		public static UnityEngine.Vector3 GetSpaceSize() => _SpaceSize.Value.GetValue();
		public static void SetSpaceSize(UnityEngine.Vector3 value) => _SpaceSize.Value.SetValue(value);
		public static UnityEngine.Vector3 GetSpaceOffset() => _SpaceOffset.Value.GetValue();
		public static void SetSpaceOffset(UnityEngine.Vector3 value) => _SpaceOffset.Value.SetValue(value);
		public static UnityEngine.Vector3 GetSpaceABS() => _SpaceABS.Value.GetValue();
		public static void SetSpaceABS(UnityEngine.Vector3 value) => _SpaceABS.Value.SetValue(value);
		public static UnityEngine.Vector3 GetHalfCell() => _HalfCell.Value.GetValue();
		public static void SetHalfCell(UnityEngine.Vector3 value) => _HalfCell.Value.SetValue(value);
		public static System.Int32[] GetCubeIndices() => _CubeIndices.Value.GetValue();
		public static void SetCubeIndices(System.Int32[] value) => _CubeIndices.Value.SetValue(value);
		public static float GetSizeXZ() => _SizeXZ.Value.GetValue();
		public static void SetSizeXZ(float value) => _SizeXZ.Value.SetValue(value);
		public static float GetSizeY() => _SizeY.Value.GetValue();
		public static void SetSizeY(float value) => _SizeY.Value.SetValue(value);
		public static float GetMinY() => _MinY.Value.GetValue();
		public static void SetMinY(float value) => _MinY.Value.SetValue(value);
		public static float GetCellSize() => _CellSize.Value.GetValue();
		public static void SetCellSize(float value) => _CellSize.Value.SetValue(value);
		public static int GetXIndexOffset() => _XIndexOffset.Value.GetValue();
		public static void SetXIndexOffset(int value) => _XIndexOffset.Value.SetValue(value);
		public static int GetYIndexOffset() => _YIndexOffset.Value.GetValue();
		public static void SetYIndexOffset(int value) => _YIndexOffset.Value.SetValue(value);
		public static int GetZIndexOffset() => _ZIndexOffset.Value.GetValue();
		public static void SetZIndexOffset(int value) => _ZIndexOffset.Value.SetValue(value);

	}

	public static class PrivateAccessor_BlockCreator
	{

		private static readonly System.Lazy<FieldAccessor<BlockCreator, ColliderPrefabEnabler>> _colliderPrefabEnablerPrefab =
				new System.Lazy<FieldAccessor<BlockCreator, ColliderPrefabEnabler>>(() => FieldAccessor<BlockCreator, ColliderPrefabEnabler>.Create("colliderPrefabEnablerPrefab"));
		private static readonly System.Lazy<FieldAccessor<BlockCreator, ColliderPrefabEnabler>> _colliderPrefabEnabler =
				new System.Lazy<FieldAccessor<BlockCreator, ColliderPrefabEnabler>>(() => FieldAccessor<BlockCreator, ColliderPrefabEnabler>.Create("colliderPrefabEnabler"));
		private static readonly System.Lazy<FieldAccessor<BlockCreator, UnityEngine.ParticleSystem>> _blockBuildParticles =
				new System.Lazy<FieldAccessor<BlockCreator, UnityEngine.ParticleSystem>>(() => FieldAccessor<BlockCreator, UnityEngine.ParticleSystem>.Create("blockBuildParticles"));
		private static readonly System.Lazy<FieldAccessor<BlockCreator, UnityEngine.ParticleSystem>> _blockBuildParticlesPlaceable =
				new System.Lazy<FieldAccessor<BlockCreator, UnityEngine.ParticleSystem>>(() => FieldAccessor<BlockCreator, UnityEngine.ParticleSystem>.Create("blockBuildParticlesPlaceable"));
		private static readonly System.Lazy<FieldAccessor<BlockCreator, UnityEngine.ParticleSystem>> _blockBreakParticles =
				new System.Lazy<FieldAccessor<BlockCreator, UnityEngine.ParticleSystem>>(() => FieldAccessor<BlockCreator, UnityEngine.ParticleSystem>.Create("blockBreakParticles"));
		private static readonly System.Lazy<FieldAccessor<BlockCreator, string>> _eventRef_createBlock =
				new System.Lazy<FieldAccessor<BlockCreator, string>>(() => FieldAccessor<BlockCreator, string>.Create("eventRef_createBlock"));
		private static readonly System.Lazy<FieldAccessor<BlockCreator, string>> _eventRef_placeBlock =
				new System.Lazy<FieldAccessor<BlockCreator, string>>(() => FieldAccessor<BlockCreator, string>.Create("eventRef_placeBlock"));
		private static readonly System.Lazy<FieldAccessor<BlockCreator, Network_Player>> _playerNetwork =
				new System.Lazy<FieldAccessor<BlockCreator, Network_Player>>(() => FieldAccessor<BlockCreator, Network_Player>.Create("playerNetwork"));
		private static readonly System.Lazy<FieldAccessor<BlockCreator, Item_Base>> _selectedBuildableItem =
				new System.Lazy<FieldAccessor<BlockCreator, Item_Base>>(() => FieldAccessor<BlockCreator, Item_Base>.Create("selectedBuildableItem"));
		private static readonly System.Lazy<FieldAccessor<BlockCreator, Block>> _selectedBuildablePrefab =
				new System.Lazy<FieldAccessor<BlockCreator, Block>>(() => FieldAccessor<BlockCreator, Block>.Create("selectedBuildablePrefab"));
		private static readonly System.Lazy<FieldAccessor<BlockCreator, CanvasHelper>> _canvas =
				new System.Lazy<FieldAccessor<BlockCreator, CanvasHelper>>(() => FieldAccessor<BlockCreator, CanvasHelper>.Create("canvas"));
		private static readonly System.Lazy<FieldAccessor<BlockCreator, PlayerInventory>> _playerInventory =
				new System.Lazy<FieldAccessor<BlockCreator, PlayerInventory>>(() => FieldAccessor<BlockCreator, PlayerInventory>.Create("playerInventory"));
		private static readonly System.Lazy<FieldAccessor<BlockCreator, BlockQuad>> _quadAtCursor =
				new System.Lazy<FieldAccessor<BlockCreator, BlockQuad>>(() => FieldAccessor<BlockCreator, BlockQuad>.Create("quadAtCursor"));
		private static readonly System.Lazy<FieldAccessor<BlockCreator, BlockSurface>> _quadSurface =
				new System.Lazy<FieldAccessor<BlockCreator, BlockSurface>>(() => FieldAccessor<BlockCreator, BlockSurface>.Create("quadSurface"));
		private static readonly System.Lazy<FieldAccessor<BlockCreator, UnityEngine.RaycastHit>> _quadHit =
				new System.Lazy<FieldAccessor<BlockCreator, UnityEngine.RaycastHit>>(() => FieldAccessor<BlockCreator, UnityEngine.RaycastHit>.Create("quadHit"));
		private static readonly System.Lazy<FieldAccessor<BlockCreator, float>> _rotationKeyAccumulation =
				new System.Lazy<FieldAccessor<BlockCreator, float>>(() => FieldAccessor<BlockCreator, float>.Create("rotationKeyAccumulation"));
		private static readonly System.Lazy<FieldAccessor<BlockCreator, RaftCollisionManager>> _collisionManager =
				new System.Lazy<FieldAccessor<BlockCreator, RaftCollisionManager>>(() => FieldAccessor<BlockCreator, RaftCollisionManager>.Create("collisionManager"));
		private static readonly System.Lazy<FieldAccessor<BlockCreator, float>> _quickBuildTimer =
				new System.Lazy<FieldAccessor<BlockCreator, float>>(() => FieldAccessor<BlockCreator, float>.Create("quickBuildTimer"));
		private static readonly System.Lazy<FieldAccessor<BlockCreator, bool>> _isRotating =
				new System.Lazy<FieldAccessor<BlockCreator, bool>>(() => FieldAccessor<BlockCreator, bool>.Create("isRotating"));

		public static ColliderPrefabEnabler GetColliderPrefabEnablerPrefab(this BlockCreator __self) => _colliderPrefabEnablerPrefab.Value.GetValue(__self);
		public static void SetColliderPrefabEnablerPrefab(this BlockCreator __self, ColliderPrefabEnabler value) => _colliderPrefabEnablerPrefab.Value.SetValue(__self, value);
		public static ColliderPrefabEnabler GetColliderPrefabEnabler(this BlockCreator __self) => _colliderPrefabEnabler.Value.GetValue(__self);
		public static void SetColliderPrefabEnabler(this BlockCreator __self, ColliderPrefabEnabler value) => _colliderPrefabEnabler.Value.SetValue(__self, value);
		public static UnityEngine.ParticleSystem GetBlockBuildParticles(this BlockCreator __self) => _blockBuildParticles.Value.GetValue(__self);
		public static void SetBlockBuildParticles(this BlockCreator __self, UnityEngine.ParticleSystem value) => _blockBuildParticles.Value.SetValue(__self, value);
		public static UnityEngine.ParticleSystem GetBlockBuildParticlesPlaceable(this BlockCreator __self) => _blockBuildParticlesPlaceable.Value.GetValue(__self);
		public static void SetBlockBuildParticlesPlaceable(this BlockCreator __self, UnityEngine.ParticleSystem value) => _blockBuildParticlesPlaceable.Value.SetValue(__self, value);
		public static UnityEngine.ParticleSystem GetBlockBreakParticles(this BlockCreator __self) => _blockBreakParticles.Value.GetValue(__self);
		public static void SetBlockBreakParticles(this BlockCreator __self, UnityEngine.ParticleSystem value) => _blockBreakParticles.Value.SetValue(__self, value);
		public static string GetEventRef_createBlock(this BlockCreator __self) => _eventRef_createBlock.Value.GetValue(__self);
		public static void SetEventRef_createBlock(this BlockCreator __self, string value) => _eventRef_createBlock.Value.SetValue(__self, value);
		public static string GetEventRef_placeBlock(this BlockCreator __self) => _eventRef_placeBlock.Value.GetValue(__self);
		public static void SetEventRef_placeBlock(this BlockCreator __self, string value) => _eventRef_placeBlock.Value.SetValue(__self, value);
		public static Network_Player GetPlayerNetwork(this BlockCreator __self) => _playerNetwork.Value.GetValue(__self);
		public static void SetPlayerNetwork(this BlockCreator __self, Network_Player value) => _playerNetwork.Value.SetValue(__self, value);
		public static Item_Base GetSelectedBuildableItem(this BlockCreator __self) => _selectedBuildableItem.Value.GetValue(__self);
		public static void SetSelectedBuildableItem(this BlockCreator __self, Item_Base value) => _selectedBuildableItem.Value.SetValue(__self, value);
		public static Block GetSelectedBuildablePrefab(this BlockCreator __self) => _selectedBuildablePrefab.Value.GetValue(__self);
		public static void SetSelectedBuildablePrefab(this BlockCreator __self, Block value) => _selectedBuildablePrefab.Value.SetValue(__self, value);
		public static CanvasHelper GetCanvas(this BlockCreator __self) => _canvas.Value.GetValue(__self);
		public static void SetCanvas(this BlockCreator __self, CanvasHelper value) => _canvas.Value.SetValue(__self, value);
		public static PlayerInventory GetPlayerInventory(this BlockCreator __self) => _playerInventory.Value.GetValue(__self);
		public static void SetPlayerInventory(this BlockCreator __self, PlayerInventory value) => _playerInventory.Value.SetValue(__self, value);
		public static BlockQuad GetQuadAtCursor(this BlockCreator __self) => _quadAtCursor.Value.GetValue(__self);
		public static void SetQuadAtCursor(this BlockCreator __self, BlockQuad value) => _quadAtCursor.Value.SetValue(__self, value);
		public static BlockSurface GetQuadSurface(this BlockCreator __self) => _quadSurface.Value.GetValue(__self);
		public static void SetQuadSurface(this BlockCreator __self, BlockSurface value) => _quadSurface.Value.SetValue(__self, value);
		public static UnityEngine.RaycastHit GetQuadHit(this BlockCreator __self) => _quadHit.Value.GetValue(__self);
		public static void SetQuadHit(this BlockCreator __self, UnityEngine.RaycastHit value) => _quadHit.Value.SetValue(__self, value);
		public static float GetRotationKeyAccumulation(this BlockCreator __self) => _rotationKeyAccumulation.Value.GetValue(__self);
		public static void SetRotationKeyAccumulation(this BlockCreator __self, float value) => _rotationKeyAccumulation.Value.SetValue(__self, value);
		public static RaftCollisionManager GetCollisionManager(this BlockCreator __self) => _collisionManager.Value.GetValue(__self);
		public static void SetCollisionManager(this BlockCreator __self, RaftCollisionManager value) => _collisionManager.Value.SetValue(__self, value);
		public static float GetQuickBuildTimer(this BlockCreator __self) => _quickBuildTimer.Value.GetValue(__self);
		public static void SetQuickBuildTimer(this BlockCreator __self, float value) => _quickBuildTimer.Value.SetValue(__self, value);
		public static bool GetIsRotating(this BlockCreator __self) => _isRotating.Value.GetValue(__self);
		public static void SetIsRotating(this BlockCreator __self, bool value) => _isRotating.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<BlockCreator>> _Awake757602046 =
				new System.Lazy<MethodAccessor<BlockCreator>>(() => MethodAccessor<BlockCreator>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<BlockCreator>> _Start757602046 =
				new System.Lazy<MethodAccessor<BlockCreator>>(() => MethodAccessor<BlockCreator>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<BlockCreator>> _Update757602046 =
				new System.Lazy<MethodAccessor<BlockCreator>>(() => MethodAccessor<BlockCreator>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<BlockCreator>> _OnDisable757602046 =
				new System.Lazy<MethodAccessor<BlockCreator>>(() => MethodAccessor<BlockCreator>.Create("OnDisable"));
		private static readonly System.Lazy<MethodAccessor<BlockCreator>> _OnThirdPersonModelChange3450040886 =
				new System.Lazy<MethodAccessor<BlockCreator>>(() => MethodAccessor<BlockCreator>.Create("OnThirdPersonModelChange", typeof(bool)));
		private static readonly System.Lazy<MethodAccessor<BlockCreator>> _DestroyGhostBlock757602046 =
				new System.Lazy<MethodAccessor<BlockCreator>>(() => MethodAccessor<BlockCreator>.Create("DestroyGhostBlock"));
		private static readonly System.Lazy<MethodAccessor<BlockCreator>> _CanBuildBlock3483718959 =
				new System.Lazy<MethodAccessor<BlockCreator>>(() => MethodAccessor<BlockCreator>.Create("CanBuildBlock", typeof(Block)));
		private static readonly System.Lazy<MethodAccessor<BlockCreator>> _HandleRotationOfSelectedBlock757602046 =
				new System.Lazy<MethodAccessor<BlockCreator>>(() => MethodAccessor<BlockCreator>.Create("HandleRotationOfSelectedBlock"));
		private static readonly System.Lazy<MethodAccessor<BlockCreator>> _HandleMirroredVersion757602046 =
				new System.Lazy<MethodAccessor<BlockCreator>>(() => MethodAccessor<BlockCreator>.Create("HandleMirroredVersion"));
		private static readonly System.Lazy<MethodAccessor<BlockCreator>> _HandleUpgrade757602046 =
				new System.Lazy<MethodAccessor<BlockCreator>>(() => MethodAccessor<BlockCreator>.Create("HandleUpgrade"));
		private static readonly System.Lazy<MethodAccessor<BlockCreator>> _UpgradeBlock3016145135 =
				new System.Lazy<MethodAccessor<BlockCreator>>(() => MethodAccessor<BlockCreator>.Create("UpgradeBlock", typeof(Item_Base), typeof(UnityEngine.Vector3), typeof(UnityEngine.Vector3), typeof(DPS), typeof(int), typeof(bool), typeof(uint), typeof(uint), typeof(uint), typeof(Block), typeof(Item_Base), typeof(Network_Player)));
		private static readonly System.Lazy<MethodAccessor<BlockCreator>> _RotateBlock3433437928 =
				new System.Lazy<MethodAccessor<BlockCreator>>(() => MethodAccessor<BlockCreator>.Create("RotateBlock", typeof(Block), typeof(float), typeof(bool)));
		private static readonly System.Lazy<MethodAccessor<BlockCreator>> _SetGhostBlockPositionAndRotation757602046 =
				new System.Lazy<MethodAccessor<BlockCreator>>(() => MethodAccessor<BlockCreator>.Create("SetGhostBlockPositionAndRotation"));
		private static readonly System.Lazy<MethodAccessor<BlockCreator>> _AlignBlockPerpendicular1717162339 =
				new System.Lazy<MethodAccessor<BlockCreator>>(() => MethodAccessor<BlockCreator>.Create("AlignBlockPerpendicular", typeof(Block), typeof(UnityEngine.Vector3)));
		private static readonly System.Lazy<MethodAccessor<BlockCreator>> _GetPerpendicularDirection3483718959 =
				new System.Lazy<MethodAccessor<BlockCreator>>(() => MethodAccessor<BlockCreator>.Create("GetPerpendicularDirection", typeof(Block)));
		private static readonly System.Lazy<MethodAccessor<BlockCreator>> _HandleBlockPick757602046 =
				new System.Lazy<MethodAccessor<BlockCreator>>(() => MethodAccessor<BlockCreator>.Create("HandleBlockPick"));
		private static readonly System.Lazy<MethodAccessor<BlockCreator>> _DebugCreatorSize757602046 =
				new System.Lazy<MethodAccessor<BlockCreator>>(() => MethodAccessor<BlockCreator>.Create("DebugCreatorSize"));
		private static readonly System.Lazy<MethodAccessor<BlockCreator>> _GetCreateBlocksMessage757602046 =
				new System.Lazy<MethodAccessor<BlockCreator>>(() => MethodAccessor<BlockCreator>.Create("GetCreateBlocksMessage"));
		private static readonly System.Lazy<MethodAccessor<BlockCreator>> _CreateBlockLate2700495769 =
				new System.Lazy<MethodAccessor<BlockCreator>>(() => MethodAccessor<BlockCreator>.Create("CreateBlockLate", typeof(Block), typeof(Message_BlockCreator_PlaceBlock)));

		public static void Awake(this BlockCreator __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this BlockCreator __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this BlockCreator __self) => _Update757602046.Value.Invoke(__self);
		public static void OnDisable(this BlockCreator __self) => _OnDisable757602046.Value.Invoke(__self);
		public static void OnThirdPersonModelChange(this BlockCreator __self, bool newThirdPersonState) => _OnThirdPersonModelChange3450040886.Value.Invoke(__self, newThirdPersonState);
		public static void DestroyGhostBlock(this BlockCreator __self) => _DestroyGhostBlock757602046.Value.Invoke(__self);
		public static BuildError CanBuildBlock(this BlockCreator __self, Block block) => (BuildError)_CanBuildBlock3483718959.Value.Invoke(__self, block);
		public static void HandleRotationOfSelectedBlock(this BlockCreator __self) => _HandleRotationOfSelectedBlock757602046.Value.Invoke(__self);
		public static void HandleMirroredVersion(this BlockCreator __self) => _HandleMirroredVersion757602046.Value.Invoke(__self);
		public static void HandleUpgrade(this BlockCreator __self) => _HandleUpgrade757602046.Value.Invoke(__self);
		public static Block UpgradeBlock(this BlockCreator __self, Item_Base newBlockItem, UnityEngine.Vector3 localBuildPosition, UnityEngine.Vector3 localBuildRotation, DPS dpsType, int hotslotIndex, bool replicating, uint blockObjectIndex, uint networkedObjectIndex, uint networkedBehaviourIndex, Block oldBlock, Item_Base upgradeItem, Network_Player playerUpgrading) => (Block)_UpgradeBlock3016145135.Value.Invoke(__self, newBlockItem, localBuildPosition, localBuildRotation, dpsType, hotslotIndex, replicating, blockObjectIndex, networkedObjectIndex, networkedBehaviourIndex, oldBlock, upgradeItem, playerUpgrading);
		public static void RotateBlock(this BlockCreator __self, Block block, float degrees, bool snap) => _RotateBlock3433437928.Value.Invoke(__self, block, degrees, snap);
		public static void SetGhostBlockPositionAndRotation(this BlockCreator __self) => _SetGhostBlockPositionAndRotation757602046.Value.Invoke(__self);
		public static void AlignBlockPerpendicular(this BlockCreator __self, Block block, UnityEngine.Vector3 normalDirection) => _AlignBlockPerpendicular1717162339.Value.Invoke(__self, block, normalDirection);
		public static UnityEngine.Vector3 GetPerpendicularDirection(this BlockCreator __self, Block block) => (UnityEngine.Vector3)_GetPerpendicularDirection3483718959.Value.Invoke(__self, block);
		public static void HandleBlockPick(this BlockCreator __self) => _HandleBlockPick757602046.Value.Invoke(__self);
		public static void DebugCreatorSize(this BlockCreator __self) => _DebugCreatorSize757602046.Value.Invoke(__self);
		public static Message_NetworkBehaviour GetCreateBlocksMessage(this BlockCreator __self) => (Message_NetworkBehaviour)_GetCreateBlocksMessage757602046.Value.Invoke(__self);
		public static System.Collections.IEnumerator CreateBlockLate(this BlockCreator __self, Block newBlock, Message_BlockCreator_PlaceBlock msg) => (System.Collections.IEnumerator)_CreateBlockLate2700495769.Value.Invoke(__self, newBlock, msg);

	}

	public static class Private_BlockCreator
	{

		private static readonly System.Lazy<StaticFieldAccessor<UnityEngine.ParticleSystem>> _blockBuildParticlesPlaceableStatic =
				new System.Lazy<StaticFieldAccessor<UnityEngine.ParticleSystem>>(() => StaticFieldAccessor<UnityEngine.ParticleSystem>.Create(typeof(BlockCreator), "blockBuildParticlesPlaceableStatic"));
		private static readonly System.Lazy<StaticFieldAccessor<UnityEngine.ParticleSystem>> _blockBreakParticlesStatic =
				new System.Lazy<StaticFieldAccessor<UnityEngine.ParticleSystem>>(() => StaticFieldAccessor<UnityEngine.ParticleSystem>.Create(typeof(BlockCreator), "blockBreakParticlesStatic"));
		private static readonly System.Lazy<StaticFieldAccessor<Raft_Network>> _network =
				new System.Lazy<StaticFieldAccessor<Raft_Network>>(() => StaticFieldAccessor<Raft_Network>.Create(typeof(BlockCreator), "network"));
		private static readonly System.Lazy<StaticFieldAccessor<System.Collections.Generic.List<Block>>> _placedBlocks =
				new System.Lazy<StaticFieldAccessor<System.Collections.Generic.List<Block>>>(() => StaticFieldAccessor<System.Collections.Generic.List<Block>>.Create(typeof(BlockCreator), "placedBlocks"));
		private static readonly System.Lazy<StaticFieldAccessor<System.Collections.Generic.List<Item_Base>>> _buildableItems =
				new System.Lazy<StaticFieldAccessor<System.Collections.Generic.List<Item_Base>>>(() => StaticFieldAccessor<System.Collections.Generic.List<Item_Base>>.Create(typeof(BlockCreator), "buildableItems"));
		private static readonly System.Lazy<StaticFieldAccessor<UnityEngine.Transform>> _lockedBuildPivot =
				new System.Lazy<StaticFieldAccessor<UnityEngine.Transform>>(() => StaticFieldAccessor<UnityEngine.Transform>.Create(typeof(BlockCreator), "lockedBuildPivot"));
		private static readonly System.Lazy<StaticFieldAccessor<RaftBounds>> _raftBounds =
				new System.Lazy<StaticFieldAccessor<RaftBounds>>(() => StaticFieldAccessor<RaftBounds>.Create(typeof(BlockCreator), "raftBounds"));
		private static readonly System.Lazy<StaticFieldAccessor<GameManager>> _gameManager =
				new System.Lazy<StaticFieldAccessor<GameManager>>(() => StaticFieldAccessor<GameManager>.Create(typeof(BlockCreator), "gameManager"));
		private static readonly System.Lazy<StaticFieldAccessor<float>> _rotateDegreeSmooth =
				new System.Lazy<StaticFieldAccessor<float>>(() => StaticFieldAccessor<float>.Create(typeof(BlockCreator), "rotateDegreeSmooth"));

		public static UnityEngine.ParticleSystem GetBlockBuildParticlesPlaceableStatic() => _blockBuildParticlesPlaceableStatic.Value.GetValue();
		public static void SetBlockBuildParticlesPlaceableStatic(UnityEngine.ParticleSystem value) => _blockBuildParticlesPlaceableStatic.Value.SetValue(value);
		public static UnityEngine.ParticleSystem GetBlockBreakParticlesStatic() => _blockBreakParticlesStatic.Value.GetValue();
		public static void SetBlockBreakParticlesStatic(UnityEngine.ParticleSystem value) => _blockBreakParticlesStatic.Value.SetValue(value);
		public static Raft_Network GetNetwork() => _network.Value.GetValue();
		public static void SetNetwork(Raft_Network value) => _network.Value.SetValue(value);
		public static System.Collections.Generic.List<Block> GetPlacedBlocks() => _placedBlocks.Value.GetValue();
		public static void SetPlacedBlocks(System.Collections.Generic.List<Block> value) => _placedBlocks.Value.SetValue(value);
		public static System.Collections.Generic.List<Item_Base> GetBuildableItems() => _buildableItems.Value.GetValue();
		public static void SetBuildableItems(System.Collections.Generic.List<Item_Base> value) => _buildableItems.Value.SetValue(value);
		public static UnityEngine.Transform GetLockedBuildPivot() => _lockedBuildPivot.Value.GetValue();
		public static void SetLockedBuildPivot(UnityEngine.Transform value) => _lockedBuildPivot.Value.SetValue(value);
		public static RaftBounds GetRaftBounds() => _raftBounds.Value.GetValue();
		public static void SetRaftBounds(RaftBounds value) => _raftBounds.Value.SetValue(value);
		public static GameManager GetGameManager() => _gameManager.Value.GetValue();
		public static void SetGameManager(GameManager value) => _gameManager.Value.SetValue(value);
		public static float GetRotateDegreeSmooth() => _rotateDegreeSmooth.Value.GetValue();
		public static void SetRotateDegreeSmooth(float value) => _rotateDegreeSmooth.Value.SetValue(value);

		private static readonly System.Lazy<StaticMethodAccessor> _RemoveBlockCoroutine2228311528 =
				new System.Lazy<StaticMethodAccessor>(() => StaticMethodAccessor.Create(typeof(BlockCreator), "RemoveBlockCoroutine", typeof(Block), typeof(Network_Player), typeof(bool)));

		public static System.Collections.IEnumerator RemoveBlockCoroutine(Block block, Network_Player playerRemovingBlock, bool updateRaftBounds) => (System.Collections.IEnumerator)_RemoveBlockCoroutine2228311528.Value.Invoke(block, playerRemovingBlock, updateRaftBounds);

	}

	public static class PrivateAccessor_BlockCreator_UpgradePreviewData
	{

		private static readonly System.Lazy<MethodAccessor<BlockCreator.UpgradePreviewData>> _SetOriginalBlockRenderState3450040886 =
				new System.Lazy<MethodAccessor<BlockCreator.UpgradePreviewData>>(() => MethodAccessor<BlockCreator.UpgradePreviewData>.Create("SetOriginalBlockRenderState", typeof(bool)));
		private static readonly System.Lazy<MethodAccessor<BlockCreator.UpgradePreviewData>> _DestroyGhost757602046 =
				new System.Lazy<MethodAccessor<BlockCreator.UpgradePreviewData>>(() => MethodAccessor<BlockCreator.UpgradePreviewData>.Create("DestroyGhost"));

		public static void SetOriginalBlockRenderState(this BlockCreator.UpgradePreviewData __self, bool state) => _SetOriginalBlockRenderState3450040886.Value.Invoke(__self, state);
		public static void DestroyGhost(this BlockCreator.UpgradePreviewData __self) => _DestroyGhost757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Message_BlockCreator_PlaceBlock
	{

		private static readonly System.Lazy<FieldAccessor<Message_BlockCreator_PlaceBlock, float>> _posX =
				new System.Lazy<FieldAccessor<Message_BlockCreator_PlaceBlock, float>>(() => FieldAccessor<Message_BlockCreator_PlaceBlock, float>.Create("posX"));
		private static readonly System.Lazy<FieldAccessor<Message_BlockCreator_PlaceBlock, float>> _posY =
				new System.Lazy<FieldAccessor<Message_BlockCreator_PlaceBlock, float>>(() => FieldAccessor<Message_BlockCreator_PlaceBlock, float>.Create("posY"));
		private static readonly System.Lazy<FieldAccessor<Message_BlockCreator_PlaceBlock, float>> _posZ =
				new System.Lazy<FieldAccessor<Message_BlockCreator_PlaceBlock, float>>(() => FieldAccessor<Message_BlockCreator_PlaceBlock, float>.Create("posZ"));
		private static readonly System.Lazy<FieldAccessor<Message_BlockCreator_PlaceBlock, float>> _rotX =
				new System.Lazy<FieldAccessor<Message_BlockCreator_PlaceBlock, float>>(() => FieldAccessor<Message_BlockCreator_PlaceBlock, float>.Create("rotX"));
		private static readonly System.Lazy<FieldAccessor<Message_BlockCreator_PlaceBlock, float>> _rotY =
				new System.Lazy<FieldAccessor<Message_BlockCreator_PlaceBlock, float>>(() => FieldAccessor<Message_BlockCreator_PlaceBlock, float>.Create("rotY"));
		private static readonly System.Lazy<FieldAccessor<Message_BlockCreator_PlaceBlock, float>> _rotZ =
				new System.Lazy<FieldAccessor<Message_BlockCreator_PlaceBlock, float>>(() => FieldAccessor<Message_BlockCreator_PlaceBlock, float>.Create("rotZ"));

		public static float GetPosX(this Message_BlockCreator_PlaceBlock __self) => _posX.Value.GetValue(__self);
		public static void SetPosX(this Message_BlockCreator_PlaceBlock __self, float value) => _posX.Value.SetValue(__self, value);
		public static float GetPosY(this Message_BlockCreator_PlaceBlock __self) => _posY.Value.GetValue(__self);
		public static void SetPosY(this Message_BlockCreator_PlaceBlock __self, float value) => _posY.Value.SetValue(__self, value);
		public static float GetPosZ(this Message_BlockCreator_PlaceBlock __self) => _posZ.Value.GetValue(__self);
		public static void SetPosZ(this Message_BlockCreator_PlaceBlock __self, float value) => _posZ.Value.SetValue(__self, value);
		public static float GetRotX(this Message_BlockCreator_PlaceBlock __self) => _rotX.Value.GetValue(__self);
		public static void SetRotX(this Message_BlockCreator_PlaceBlock __self, float value) => _rotX.Value.SetValue(__self, value);
		public static float GetRotY(this Message_BlockCreator_PlaceBlock __self) => _rotY.Value.GetValue(__self);
		public static void SetRotY(this Message_BlockCreator_PlaceBlock __self, float value) => _rotY.Value.SetValue(__self, value);
		public static float GetRotZ(this Message_BlockCreator_PlaceBlock __self) => _rotZ.Value.GetValue(__self);
		public static void SetRotZ(this Message_BlockCreator_PlaceBlock __self, float value) => _rotZ.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_Message_BlockCreator_UpgradeBlock
	{

		private static readonly System.Lazy<FieldAccessor<Message_BlockCreator_UpgradeBlock, ulong>> _playerUpgradingSteamID =
				new System.Lazy<FieldAccessor<Message_BlockCreator_UpgradeBlock, ulong>>(() => FieldAccessor<Message_BlockCreator_UpgradeBlock, ulong>.Create("playerUpgradingSteamID"));

		public static ulong GetPlayerUpgradingSteamID(this Message_BlockCreator_UpgradeBlock __self) => _playerUpgradingSteamID.Value.GetValue(__self);
		public static void SetPlayerUpgradingSteamID(this Message_BlockCreator_UpgradeBlock __self, ulong value) => _playerUpgradingSteamID.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_Message_BlockCreator_RemoveBlock
	{

		private static readonly System.Lazy<FieldAccessor<Message_BlockCreator_RemoveBlock, bool>> _u =
				new System.Lazy<FieldAccessor<Message_BlockCreator_RemoveBlock, bool>>(() => FieldAccessor<Message_BlockCreator_RemoveBlock, bool>.Create("u"));

		public static bool GetU(this Message_BlockCreator_RemoveBlock __self) => _u.Value.GetValue(__self);
		public static void SetU(this Message_BlockCreator_RemoveBlock __self, bool value) => _u.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_BlockQuad
	{

		private static readonly System.Lazy<FieldAccessor<BlockQuad, UnityEngine.BoxCollider>> _quadCollider =
				new System.Lazy<FieldAccessor<BlockQuad, UnityEngine.BoxCollider>>(() => FieldAccessor<BlockQuad, UnityEngine.BoxCollider>.Create("quadCollider"));
		private static readonly System.Lazy<FieldAccessor<BlockQuad, Block>> _parentBlock =
				new System.Lazy<FieldAccessor<BlockQuad, Block>>(() => FieldAccessor<BlockQuad, Block>.Create("parentBlock"));

		public static UnityEngine.BoxCollider GetQuadCollider(this BlockQuad __self) => _quadCollider.Value.GetValue(__self);
		public static void SetQuadCollider(this BlockQuad __self, UnityEngine.BoxCollider value) => _quadCollider.Value.SetValue(__self, value);
		public static Block GetParentBlock(this BlockQuad __self) => _parentBlock.Value.GetValue(__self);
		public static void SetParentBlock(this BlockQuad __self, Block value) => _parentBlock.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<BlockQuad>> _OnEnable757602046 =
				new System.Lazy<MethodAccessor<BlockQuad>>(() => MethodAccessor<BlockQuad>.Create("OnEnable"));

		public static void OnEnable(this BlockQuad __self) => _OnEnable757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Block_BitmaskTile
	{

		private static readonly System.Lazy<FieldAccessor<Block_BitmaskTile, BitmaskTile>> _bitmaskTile =
				new System.Lazy<FieldAccessor<Block_BitmaskTile, BitmaskTile>>(() => FieldAccessor<Block_BitmaskTile, BitmaskTile>.Create("bitmaskTile"));
		private static readonly System.Lazy<FieldAccessor<Block_BitmaskTile, bool>> _hasBeenPlaced =
				new System.Lazy<FieldAccessor<Block_BitmaskTile, bool>>(() => FieldAccessor<Block_BitmaskTile, bool>.Create("hasBeenPlaced"));

		public static BitmaskTile GetBitmaskTile(this Block_BitmaskTile __self) => _bitmaskTile.Value.GetValue(__self);
		public static void SetBitmaskTile(this Block_BitmaskTile __self, BitmaskTile value) => _bitmaskTile.Value.SetValue(__self, value);
		public static bool GetHasBeenPlaced(this Block_BitmaskTile __self) => _hasBeenPlaced.Value.GetValue(__self);
		public static void SetHasBeenPlaced(this Block_BitmaskTile __self, bool value) => _hasBeenPlaced.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Block_BitmaskTile>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<Block_BitmaskTile>>(() => MethodAccessor<Block_BitmaskTile>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<Block_BitmaskTile>> _OnFinishPlacementLate757602046 =
				new System.Lazy<MethodAccessor<Block_BitmaskTile>>(() => MethodAccessor<Block_BitmaskTile>.Create("OnFinishPlacementLate"));

		public static void OnDestroy(this Block_BitmaskTile __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void OnFinishPlacementLate(this Block_BitmaskTile __self) => _OnFinishPlacementLate757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Block_DamageVisual
	{

		private static readonly System.Lazy<FieldAccessor<Block_DamageVisual, DamageConnection[]>> _damageConnections =
				new System.Lazy<FieldAccessor<Block_DamageVisual, DamageConnection[]>>(() => FieldAccessor<Block_DamageVisual, DamageConnection[]>.Create("damageConnections"));
		private static readonly System.Lazy<FieldAccessor<Block_DamageVisual, UnityEngine.MeshFilter>> _meshFilter =
				new System.Lazy<FieldAccessor<Block_DamageVisual, UnityEngine.MeshFilter>>(() => FieldAccessor<Block_DamageVisual, UnityEngine.MeshFilter>.Create("meshFilter"));

		public static DamageConnection[] GetDamageConnections(this Block_DamageVisual __self) => _damageConnections.Value.GetValue(__self);
		public static void SetDamageConnections(this Block_DamageVisual __self, DamageConnection[] value) => _damageConnections.Value.SetValue(__self, value);
		public static UnityEngine.MeshFilter GetMeshFilter(this Block_DamageVisual __self) => _meshFilter.Value.GetValue(__self);
		public static void SetMeshFilter(this Block_DamageVisual __self, UnityEngine.MeshFilter value) => _meshFilter.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Block_DamageVisual>> _Awake757602046 =
				new System.Lazy<MethodAccessor<Block_DamageVisual>>(() => MethodAccessor<Block_DamageVisual>.Create("Awake"));

		public static void Awake(this Block_DamageVisual __self) => _Awake757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Block_Fence
	{

		private static readonly System.Lazy<FieldAccessor<Block_Fence, int>> _knobPriority =
				new System.Lazy<FieldAccessor<Block_Fence, int>>(() => FieldAccessor<Block_Fence, int>.Create("knobPriority"));
		private static readonly System.Lazy<FieldAccessor<Block_Fence, GizmoBox>> _gizmoBoxLeft =
				new System.Lazy<FieldAccessor<Block_Fence, GizmoBox>>(() => FieldAccessor<Block_Fence, GizmoBox>.Create("gizmoBoxLeft"));
		private static readonly System.Lazy<FieldAccessor<Block_Fence, GizmoBox>> _gizmoBoxRight =
				new System.Lazy<FieldAccessor<Block_Fence, GizmoBox>>(() => FieldAccessor<Block_Fence, GizmoBox>.Create("gizmoBoxRight"));
		private static readonly System.Lazy<FieldAccessor<Block_Fence, UnityEngine.Collider>> _currentFenceCollider =
				new System.Lazy<FieldAccessor<Block_Fence, UnityEngine.Collider>>(() => FieldAccessor<Block_Fence, UnityEngine.Collider>.Create("currentFenceCollider"));

		public static int GetKnobPriority(this Block_Fence __self) => _knobPriority.Value.GetValue(__self);
		public static void SetKnobPriority(this Block_Fence __self, int value) => _knobPriority.Value.SetValue(__self, value);
		public static GizmoBox GetGizmoBoxLeft(this Block_Fence __self) => _gizmoBoxLeft.Value.GetValue(__self);
		public static void SetGizmoBoxLeft(this Block_Fence __self, GizmoBox value) => _gizmoBoxLeft.Value.SetValue(__self, value);
		public static GizmoBox GetGizmoBoxRight(this Block_Fence __self) => _gizmoBoxRight.Value.GetValue(__self);
		public static void SetGizmoBoxRight(this Block_Fence __self, GizmoBox value) => _gizmoBoxRight.Value.SetValue(__self, value);
		public static UnityEngine.Collider GetCurrentFenceCollider(this Block_Fence __self) => _currentFenceCollider.Value.GetValue(__self);
		public static void SetCurrentFenceCollider(this Block_Fence __self, UnityEngine.Collider value) => _currentFenceCollider.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Block_Fence>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<Block_Fence>>(() => MethodAccessor<Block_Fence>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<Block_Fence>> _GetOverlappingFences3447403036 =
				new System.Lazy<MethodAccessor<Block_Fence>>(() => MethodAccessor<Block_Fence>.Create("GetOverlappingFences", typeof(GizmoBox)));
		private static readonly System.Lazy<MethodAccessor<Block_Fence>> _RefreshKnob2726159025 =
				new System.Lazy<MethodAccessor<Block_Fence>>(() => MethodAccessor<Block_Fence>.Create("RefreshKnob", typeof(System.Collections.Generic.List<Block_Fence>), typeof(Block_Fence), typeof(UnityEngine.Vector3)));
		private static readonly System.Lazy<MethodAccessor<Block_Fence>> _SetClosestKnobState3403068986 =
				new System.Lazy<MethodAccessor<Block_Fence>>(() => MethodAccessor<Block_Fence>.Create("SetClosestKnobState", typeof(UnityEngine.Vector3), typeof(bool)));
		private static readonly System.Lazy<MethodAccessor<Block_Fence>> _ShouldBeKnobbed3449916734 =
				new System.Lazy<MethodAccessor<Block_Fence>>(() => MethodAccessor<Block_Fence>.Create("ShouldBeKnobbed", typeof(Block_Fence)));

		public static void OnDestroy(this Block_Fence __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static System.Collections.Generic.List<Block_Fence> GetOverlappingFences(this Block_Fence __self, GizmoBox box) => (System.Collections.Generic.List<Block_Fence>)_GetOverlappingFences3447403036.Value.Invoke(__self, box);
		public static void RefreshKnob(this Block_Fence __self, System.Collections.Generic.List<Block_Fence> otherFences, Block_Fence newFence, UnityEngine.Vector3 knobPosition) => _RefreshKnob2726159025.Value.Invoke(__self, otherFences, newFence, knobPosition);
		public static void SetClosestKnobState(this Block_Fence __self, UnityEngine.Vector3 position, bool state) => _SetClosestKnobState3403068986.Value.Invoke(__self, position, state);
		public static bool ShouldBeKnobbed(this Block_Fence __self, Block_Fence other) => (bool)_ShouldBeKnobbed3449916734.Value.Invoke(__self, other);

	}

	public static class PrivateAccessor_Block_Foundation
	{

		private static readonly System.Lazy<FieldAccessor<Block_Foundation, bool>> _reinforced =
				new System.Lazy<FieldAccessor<Block_Foundation, bool>>(() => FieldAccessor<Block_Foundation, bool>.Create("reinforced"));
		private static readonly System.Lazy<FieldAccessor<Block_Foundation, UnityEngine.MeshFilter>> _meshFilter =
				new System.Lazy<FieldAccessor<Block_Foundation, UnityEngine.MeshFilter>>(() => FieldAccessor<Block_Foundation, UnityEngine.MeshFilter>.Create("meshFilter"));
		private static readonly System.Lazy<FieldAccessor<Block_Foundation, UnityEngine.Mesh>> _defaultMesh =
				new System.Lazy<FieldAccessor<Block_Foundation, UnityEngine.Mesh>>(() => FieldAccessor<Block_Foundation, UnityEngine.Mesh>.Create("defaultMesh"));
		private static readonly System.Lazy<FieldAccessor<Block_Foundation, UnityEngine.Material>> _defaultMaterial =
				new System.Lazy<FieldAccessor<Block_Foundation, UnityEngine.Material>>(() => FieldAccessor<Block_Foundation, UnityEngine.Material>.Create("defaultMaterial"));
		private static readonly System.Lazy<FieldAccessor<Block_Foundation, UnityEngine.Material>> _armoredMaterial =
				new System.Lazy<FieldAccessor<Block_Foundation, UnityEngine.Material>>(() => FieldAccessor<Block_Foundation, UnityEngine.Material>.Create("armoredMaterial"));

		public static bool GetReinforced(this Block_Foundation __self) => _reinforced.Value.GetValue(__self);
		public static void SetReinforced(this Block_Foundation __self, bool value) => _reinforced.Value.SetValue(__self, value);
		public static UnityEngine.MeshFilter GetMeshFilter(this Block_Foundation __self) => _meshFilter.Value.GetValue(__self);
		public static void SetMeshFilter(this Block_Foundation __self, UnityEngine.MeshFilter value) => _meshFilter.Value.SetValue(__self, value);
		public static UnityEngine.Mesh GetDefaultMesh(this Block_Foundation __self) => _defaultMesh.Value.GetValue(__self);
		public static void SetDefaultMesh(this Block_Foundation __self, UnityEngine.Mesh value) => _defaultMesh.Value.SetValue(__self, value);
		public static UnityEngine.Material GetDefaultMaterial(this Block_Foundation __self) => _defaultMaterial.Value.GetValue(__self);
		public static void SetDefaultMaterial(this Block_Foundation __self, UnityEngine.Material value) => _defaultMaterial.Value.SetValue(__self, value);
		public static UnityEngine.Material GetArmoredMaterial(this Block_Foundation __self) => _armoredMaterial.Value.GetValue(__self);
		public static void SetArmoredMaterial(this Block_Foundation __self, UnityEngine.Material value) => _armoredMaterial.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Block_Foundation>> _OnReinforcedToggle3450040886 =
				new System.Lazy<MethodAccessor<Block_Foundation>>(() => MethodAccessor<Block_Foundation>.Create("OnReinforcedToggle", typeof(bool)));

		public static void OnReinforcedToggle(this Block_Foundation __self, bool value) => _OnReinforcedToggle3450040886.Value.Invoke(__self, value);

	}

	public static class PrivateAccessor_Block_Interactable
	{

		private static readonly System.Lazy<FieldAccessor<Block_Interactable, Placeable_Interactable>> _interactable =
				new System.Lazy<FieldAccessor<Block_Interactable, Placeable_Interactable>>(() => FieldAccessor<Block_Interactable, Placeable_Interactable>.Create("interactable"));

		public static Placeable_Interactable GetInteractable(this Block_Interactable __self) => _interactable.Value.GetValue(__self);
		public static void SetInteractable(this Block_Interactable __self, Placeable_Interactable value) => _interactable.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_Block_Pipe
	{

		private static readonly System.Lazy<FieldAccessor<Block_Pipe, SO_PipeColliderInfo>> _pipeColliderInfo =
				new System.Lazy<FieldAccessor<Block_Pipe, SO_PipeColliderInfo>>(() => FieldAccessor<Block_Pipe, SO_PipeColliderInfo>.Create("pipeColliderInfo"));
		private static readonly System.Lazy<FieldAccessor<Block_Pipe, Block_PipeBitmask[]>> _pipeBitmaskConnections =
				new System.Lazy<FieldAccessor<Block_Pipe, Block_PipeBitmask[]>>(() => FieldAccessor<Block_Pipe, Block_PipeBitmask[]>.Create("pipeBitmaskConnections"));
		private static readonly System.Lazy<FieldAccessor<Block_Pipe, UnityEngine.GameObject>> _currentPipeCollider =
				new System.Lazy<FieldAccessor<Block_Pipe, UnityEngine.GameObject>>(() => FieldAccessor<Block_Pipe, UnityEngine.GameObject>.Create("currentPipeCollider"));
		private static readonly System.Lazy<FieldAccessor<Block_Pipe, bool>> _hasPipeSocket =
				new System.Lazy<FieldAccessor<Block_Pipe, bool>>(() => FieldAccessor<Block_Pipe, bool>.Create("hasPipeSocket"));

		public static SO_PipeColliderInfo GetPipeColliderInfo(this Block_Pipe __self) => _pipeColliderInfo.Value.GetValue(__self);
		public static void SetPipeColliderInfo(this Block_Pipe __self, SO_PipeColliderInfo value) => _pipeColliderInfo.Value.SetValue(__self, value);
		public static Block_PipeBitmask[] GetPipeBitmaskConnections(this Block_Pipe __self) => _pipeBitmaskConnections.Value.GetValue(__self);
		public static void SetPipeBitmaskConnections(this Block_Pipe __self, Block_PipeBitmask[] value) => _pipeBitmaskConnections.Value.SetValue(__self, value);
		public static UnityEngine.GameObject GetCurrentPipeCollider(this Block_Pipe __self) => _currentPipeCollider.Value.GetValue(__self);
		public static void SetCurrentPipeCollider(this Block_Pipe __self, UnityEngine.GameObject value) => _currentPipeCollider.Value.SetValue(__self, value);
		public static bool GetHasPipeSocket(this Block_Pipe __self) => _hasPipeSocket.Value.GetValue(__self);
		public static void SetHasPipeSocket(this Block_Pipe __self, bool value) => _hasPipeSocket.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Block_Pipe>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<Block_Pipe>>(() => MethodAccessor<Block_Pipe>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<Block_Pipe>> _Awake757602046 =
				new System.Lazy<MethodAccessor<Block_Pipe>>(() => MethodAccessor<Block_Pipe>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<Block_Pipe>> _MergeIntoNearbyPipesLate757602046 =
				new System.Lazy<MethodAccessor<Block_Pipe>>(() => MethodAccessor<Block_Pipe>.Create("MergeIntoNearbyPipesLate"));
		private static readonly System.Lazy<MethodAccessor<Block_Pipe>> _OnBitmaskTileChange3458695754 =
				new System.Lazy<MethodAccessor<Block_Pipe>>(() => MethodAccessor<Block_Pipe>.Create("OnBitmaskTileChange", typeof(BitmaskTile)));
		private static readonly System.Lazy<MethodAccessor<Block_Pipe>> _OnBitmaskTileCompleteVisual757602046 =
				new System.Lazy<MethodAccessor<Block_Pipe>>(() => MethodAccessor<Block_Pipe>.Create("OnBitmaskTileCompleteVisual"));
		private static readonly System.Lazy<MethodAccessor<Block_Pipe>> _OnFinishedPlacementLate757602046 =
				new System.Lazy<MethodAccessor<Block_Pipe>>(() => MethodAccessor<Block_Pipe>.Create("OnFinishedPlacementLate"));

		public static void OnDestroy(this Block_Pipe __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void Awake(this Block_Pipe __self) => _Awake757602046.Value.Invoke(__self);
		public static void MergeIntoNearbyPipesLate(this Block_Pipe __self) => _MergeIntoNearbyPipesLate757602046.Value.Invoke(__self);
		public static void OnBitmaskTileChange(this Block_Pipe __self, BitmaskTile bitmaskTile) => _OnBitmaskTileChange3458695754.Value.Invoke(__self, bitmaskTile);
		public static void OnBitmaskTileCompleteVisual(this Block_Pipe __self) => _OnBitmaskTileCompleteVisual757602046.Value.Invoke(__self);
		public static void OnFinishedPlacementLate(this Block_Pipe __self) => _OnFinishedPlacementLate757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Block_Pipe_Tank
	{

		private static readonly System.Lazy<FieldAccessor<Block_Pipe_Tank, Placeable_Tank>> _placeableTank =
				new System.Lazy<FieldAccessor<Block_Pipe_Tank, Placeable_Tank>>(() => FieldAccessor<Block_Pipe_Tank, Placeable_Tank>.Create("placeableTank"));

		public static Placeable_Tank GetPlaceableTank(this Block_Pipe_Tank __self) => _placeableTank.Value.GetValue(__self);
		public static void SetPlaceableTank(this Block_Pipe_Tank __self, Placeable_Tank value) => _placeableTank.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_ColliderPrefabEnabler
	{

		private static readonly System.Lazy<FieldAccessor<ColliderPrefabEnabler, UnityEngine.SphereCollider>> _collider =
				new System.Lazy<FieldAccessor<ColliderPrefabEnabler, UnityEngine.SphereCollider>>(() => FieldAccessor<ColliderPrefabEnabler, UnityEngine.SphereCollider>.Create("collider"));
		private static readonly System.Lazy<FieldAccessor<ColliderPrefabEnabler, float>> _sphereFirstpersonRadius =
				new System.Lazy<FieldAccessor<ColliderPrefabEnabler, float>>(() => FieldAccessor<ColliderPrefabEnabler, float>.Create("sphereFirstpersonRadius"));
		private static readonly System.Lazy<FieldAccessor<ColliderPrefabEnabler, float>> _sphereThirdpersonRadius =
				new System.Lazy<FieldAccessor<ColliderPrefabEnabler, float>>(() => FieldAccessor<ColliderPrefabEnabler, float>.Create("sphereThirdpersonRadius"));
		private static readonly System.Lazy<FieldAccessor<ColliderPrefabEnabler, System.Collections.Generic.List<Block>>> _attachedColliderBlocks =
				new System.Lazy<FieldAccessor<ColliderPrefabEnabler, System.Collections.Generic.List<Block>>>(() => FieldAccessor<ColliderPrefabEnabler, System.Collections.Generic.List<Block>>.Create("attachedColliderBlocks"));

		public static UnityEngine.SphereCollider GetCollider(this ColliderPrefabEnabler __self) => _collider.Value.GetValue(__self);
		public static void SetCollider(this ColliderPrefabEnabler __self, UnityEngine.SphereCollider value) => _collider.Value.SetValue(__self, value);
		public static float GetSphereFirstpersonRadius(this ColliderPrefabEnabler __self) => _sphereFirstpersonRadius.Value.GetValue(__self);
		public static void SetSphereFirstpersonRadius(this ColliderPrefabEnabler __self, float value) => _sphereFirstpersonRadius.Value.SetValue(__self, value);
		public static float GetSphereThirdpersonRadius(this ColliderPrefabEnabler __self) => _sphereThirdpersonRadius.Value.GetValue(__self);
		public static void SetSphereThirdpersonRadius(this ColliderPrefabEnabler __self, float value) => _sphereThirdpersonRadius.Value.SetValue(__self, value);
		public static System.Collections.Generic.List<Block> GetAttachedColliderBlocks(this ColliderPrefabEnabler __self) => _attachedColliderBlocks.Value.GetValue(__self);
		public static void SetAttachedColliderBlocks(this ColliderPrefabEnabler __self, System.Collections.Generic.List<Block> value) => _attachedColliderBlocks.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<ColliderPrefabEnabler>> _Awake757602046 =
				new System.Lazy<MethodAccessor<ColliderPrefabEnabler>>(() => MethodAccessor<ColliderPrefabEnabler>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<ColliderPrefabEnabler>> _DisableAllActiveColliderPrefabs757602046 =
				new System.Lazy<MethodAccessor<ColliderPrefabEnabler>>(() => MethodAccessor<ColliderPrefabEnabler>.Create("DisableAllActiveColliderPrefabs"));
		private static readonly System.Lazy<MethodAccessor<ColliderPrefabEnabler>> _OnTriggerStay3468606003 =
				new System.Lazy<MethodAccessor<ColliderPrefabEnabler>>(() => MethodAccessor<ColliderPrefabEnabler>.Create("OnTriggerStay", typeof(UnityEngine.Collider)));
		private static readonly System.Lazy<MethodAccessor<ColliderPrefabEnabler>> _OnTriggerExit3468606003 =
				new System.Lazy<MethodAccessor<ColliderPrefabEnabler>>(() => MethodAccessor<ColliderPrefabEnabler>.Create("OnTriggerExit", typeof(UnityEngine.Collider)));

		public static void Awake(this ColliderPrefabEnabler __self) => _Awake757602046.Value.Invoke(__self);
		public static void DisableAllActiveColliderPrefabs(this ColliderPrefabEnabler __self) => _DisableAllActiveColliderPrefabs757602046.Value.Invoke(__self);
		public static void OnTriggerStay(this ColliderPrefabEnabler __self, UnityEngine.Collider other) => _OnTriggerStay3468606003.Value.Invoke(__self, other);
		public static void OnTriggerExit(this ColliderPrefabEnabler __self, UnityEngine.Collider other) => _OnTriggerExit3468606003.Value.Invoke(__self, other);

	}

	public static class PrivateAccessor_DetailPlank
	{

		private static readonly System.Lazy<FieldAccessor<DetailPlank, float>> __cameraOffset =
				new System.Lazy<FieldAccessor<DetailPlank, float>>(() => FieldAccessor<DetailPlank, float>.Create("_cameraOffset"));
		private static readonly System.Lazy<FieldAccessor<DetailPlank, Block>> _plankPrefab =
				new System.Lazy<FieldAccessor<DetailPlank, Block>>(() => FieldAccessor<DetailPlank, Block>.Create("plankPrefab"));
		private static readonly System.Lazy<FieldAccessor<DetailPlank, DetailPlankLength>> _lengthSetter =
				new System.Lazy<FieldAccessor<DetailPlank, DetailPlankLength>>(() => FieldAccessor<DetailPlank, DetailPlankLength>.Create("lengthSetter"));
		private static readonly System.Lazy<FieldAccessor<DetailPlank, float>> _rotationDegrees =
				new System.Lazy<FieldAccessor<DetailPlank, float>>(() => FieldAccessor<DetailPlank, float>.Create("rotationDegrees"));
		private static readonly System.Lazy<FieldAccessor<DetailPlank, float>> _scrollIndexLength =
				new System.Lazy<FieldAccessor<DetailPlank, float>>(() => FieldAccessor<DetailPlank, float>.Create("scrollIndexLength"));
		private static readonly System.Lazy<FieldAccessor<DetailPlank, Interval_Float>> _scrollLengthInterval =
				new System.Lazy<FieldAccessor<DetailPlank, Interval_Float>>(() => FieldAccessor<DetailPlank, Interval_Float>.Create("scrollLengthInterval"));
		private static readonly System.Lazy<FieldAccessor<DetailPlank, Interval_Float>> _plankLengthInterval =
				new System.Lazy<FieldAccessor<DetailPlank, Interval_Float>>(() => FieldAccessor<DetailPlank, Interval_Float>.Create("plankLengthInterval"));
		private static readonly System.Lazy<FieldAccessor<DetailPlank, UnityEngine.Transform>> _lockedPivot =
				new System.Lazy<FieldAccessor<DetailPlank, UnityEngine.Transform>>(() => FieldAccessor<DetailPlank, UnityEngine.Transform>.Create("lockedPivot"));
		private static readonly System.Lazy<FieldAccessor<DetailPlank, UnityEngine.Vector3>> _localPointA =
				new System.Lazy<FieldAccessor<DetailPlank, UnityEngine.Vector3>>(() => FieldAccessor<DetailPlank, UnityEngine.Vector3>.Create("localPointA"));
		private static readonly System.Lazy<FieldAccessor<DetailPlank, UnityEngine.Vector3>> _worldAimPoint =
				new System.Lazy<FieldAccessor<DetailPlank, UnityEngine.Vector3>>(() => FieldAccessor<DetailPlank, UnityEngine.Vector3>.Create("worldAimPoint"));
		private static readonly System.Lazy<FieldAccessor<DetailPlank, float>> _rotation =
				new System.Lazy<FieldAccessor<DetailPlank, float>>(() => FieldAccessor<DetailPlank, float>.Create("rotation"));

		public static float Get_cameraOffset(this DetailPlank __self) => __cameraOffset.Value.GetValue(__self);
		public static void Set_cameraOffset(this DetailPlank __self, float value) => __cameraOffset.Value.SetValue(__self, value);
		public static Block GetPlankPrefab(this DetailPlank __self) => _plankPrefab.Value.GetValue(__self);
		public static void SetPlankPrefab(this DetailPlank __self, Block value) => _plankPrefab.Value.SetValue(__self, value);
		public static DetailPlankLength GetLengthSetter(this DetailPlank __self) => _lengthSetter.Value.GetValue(__self);
		public static void SetLengthSetter(this DetailPlank __self, DetailPlankLength value) => _lengthSetter.Value.SetValue(__self, value);
		public static float GetRotationDegrees(this DetailPlank __self) => _rotationDegrees.Value.GetValue(__self);
		public static void SetRotationDegrees(this DetailPlank __self, float value) => _rotationDegrees.Value.SetValue(__self, value);
		public static float GetScrollIndexLength(this DetailPlank __self) => _scrollIndexLength.Value.GetValue(__self);
		public static void SetScrollIndexLength(this DetailPlank __self, float value) => _scrollIndexLength.Value.SetValue(__self, value);
		public static Interval_Float GetScrollLengthInterval(this DetailPlank __self) => _scrollLengthInterval.Value.GetValue(__self);
		public static void SetScrollLengthInterval(this DetailPlank __self, Interval_Float value) => _scrollLengthInterval.Value.SetValue(__self, value);
		public static Interval_Float GetPlankLengthInterval(this DetailPlank __self) => _plankLengthInterval.Value.GetValue(__self);
		public static void SetPlankLengthInterval(this DetailPlank __self, Interval_Float value) => _plankLengthInterval.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetLockedPivot(this DetailPlank __self) => _lockedPivot.Value.GetValue(__self);
		public static void SetLockedPivot(this DetailPlank __self, UnityEngine.Transform value) => _lockedPivot.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetLocalPointA(this DetailPlank __self) => _localPointA.Value.GetValue(__self);
		public static void SetLocalPointA(this DetailPlank __self, UnityEngine.Vector3 value) => _localPointA.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetWorldAimPoint(this DetailPlank __self) => _worldAimPoint.Value.GetValue(__self);
		public static void SetWorldAimPoint(this DetailPlank __self, UnityEngine.Vector3 value) => _worldAimPoint.Value.SetValue(__self, value);
		public static float GetRotation(this DetailPlank __self) => _rotation.Value.GetValue(__self);
		public static void SetRotation(this DetailPlank __self, float value) => _rotation.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<DetailPlank>> _Start757602046 =
				new System.Lazy<MethodAccessor<DetailPlank>>(() => MethodAccessor<DetailPlank>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<DetailPlank>> _OnDisable757602046 =
				new System.Lazy<MethodAccessor<DetailPlank>>(() => MethodAccessor<DetailPlank>.Create("OnDisable"));
		private static readonly System.Lazy<MethodAccessor<DetailPlank>> _Update757602046 =
				new System.Lazy<MethodAccessor<DetailPlank>>(() => MethodAccessor<DetailPlank>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<DetailPlank>> _OnToolSelect757602046 =
				new System.Lazy<MethodAccessor<DetailPlank>>(() => MethodAccessor<DetailPlank>.Create("OnToolSelect"));
		private static readonly System.Lazy<MethodAccessor<DetailPlank>> _OnToolDeSelect757602046 =
				new System.Lazy<MethodAccessor<DetailPlank>>(() => MethodAccessor<DetailPlank>.Create("OnToolDeSelect"));
		private static readonly System.Lazy<MethodAccessor<DetailPlank>> _Abort757602046 =
				new System.Lazy<MethodAccessor<DetailPlank>>(() => MethodAccessor<DetailPlank>.Create("Abort"));
		private static readonly System.Lazy<MethodAccessor<DetailPlank>> _AddPoint3429126434 =
				new System.Lazy<MethodAccessor<DetailPlank>>(() => MethodAccessor<DetailPlank>.Create("AddPoint", typeof(UnityEngine.Vector3)));
		private static readonly System.Lazy<MethodAccessor<DetailPlank>> _ClampPointToMaxLength3429126434 =
				new System.Lazy<MethodAccessor<DetailPlank>>(() => MethodAccessor<DetailPlank>.Create("ClampPointToMaxLength", typeof(UnityEngine.Vector3)));
		private static readonly System.Lazy<MethodAccessor<DetailPlank>> _CreatePlank1662569814 =
				new System.Lazy<MethodAccessor<DetailPlank>>(() => MethodAccessor<DetailPlank>.Create("CreatePlank", typeof(UnityEngine.Vector3), typeof(UnityEngine.Vector3)));

		public static void Start(this DetailPlank __self) => _Start757602046.Value.Invoke(__self);
		public static void OnDisable(this DetailPlank __self) => _OnDisable757602046.Value.Invoke(__self);
		public static bool Update(this DetailPlank __self) => (bool)_Update757602046.Value.Invoke(__self);
		public static void OnToolSelect(this DetailPlank __self) => _OnToolSelect757602046.Value.Invoke(__self);
		public static void OnToolDeSelect(this DetailPlank __self) => _OnToolDeSelect757602046.Value.Invoke(__self);
		public static void Abort(this DetailPlank __self) => _Abort757602046.Value.Invoke(__self);
		public static void AddPoint(this DetailPlank __self, UnityEngine.Vector3 localPosition) => _AddPoint3429126434.Value.Invoke(__self, localPosition);
		public static UnityEngine.Vector3 ClampPointToMaxLength(this DetailPlank __self, UnityEngine.Vector3 worldPoint) => (UnityEngine.Vector3)_ClampPointToMaxLength3429126434.Value.Invoke(__self, worldPoint);
		public static void CreatePlank(this DetailPlank __self, UnityEngine.Vector3 localPosition, UnityEngine.Vector3 secondLocalPosition) => _CreatePlank1662569814.Value.Invoke(__self, localPosition, secondLocalPosition);

	}

	public static class PrivateAccessor_Hammer
	{

		private static readonly System.Lazy<FieldAccessor<Hammer, string>> _eventRef_reinforce =
				new System.Lazy<FieldAccessor<Hammer, string>>(() => FieldAccessor<Hammer, string>.Create("eventRef_reinforce"));
		private static readonly System.Lazy<FieldAccessor<Hammer, int>> _blockRepairAmount =
				new System.Lazy<FieldAccessor<Hammer, int>>(() => FieldAccessor<Hammer, int>.Create("blockRepairAmount"));
		private static readonly System.Lazy<FieldAccessor<Hammer, BlockCreator>> _blockCreator =
				new System.Lazy<FieldAccessor<Hammer, BlockCreator>>(() => FieldAccessor<Hammer, BlockCreator>.Create("blockCreator"));
		private static readonly System.Lazy<FieldAccessor<Hammer, ParticleController>> _woodParticles =
				new System.Lazy<FieldAccessor<Hammer, ParticleController>>(() => FieldAccessor<Hammer, ParticleController>.Create("woodParticles"));
		private static readonly System.Lazy<FieldAccessor<Hammer, Item_Base>> _repairItem =
				new System.Lazy<FieldAccessor<Hammer, Item_Base>>(() => FieldAccessor<Hammer, Item_Base>.Create("repairItem"));
		private static readonly System.Lazy<FieldAccessor<Hammer, Item_Base>> _reinforceItem =
				new System.Lazy<FieldAccessor<Hammer, Item_Base>>(() => FieldAccessor<Hammer, Item_Base>.Create("reinforceItem"));
		private static readonly System.Lazy<FieldAccessor<Hammer, GhostDisplayer>> _reinForceGhostPrefab =
				new System.Lazy<FieldAccessor<Hammer, GhostDisplayer>>(() => FieldAccessor<Hammer, GhostDisplayer>.Create("reinForceGhostPrefab"));
		private static readonly System.Lazy<FieldAccessor<Hammer, GhostDisplayer>> _reinforceGhostObject =
				new System.Lazy<FieldAccessor<Hammer, GhostDisplayer>>(() => FieldAccessor<Hammer, GhostDisplayer>.Create("reinforceGhostObject"));
		private static readonly System.Lazy<FieldAccessor<Hammer, Network_Player>> _playerNetwork =
				new System.Lazy<FieldAccessor<Hammer, Network_Player>>(() => FieldAccessor<Hammer, Network_Player>.Create("playerNetwork"));
		private static readonly System.Lazy<FieldAccessor<Hammer, CanvasHelper>> _canvas =
				new System.Lazy<FieldAccessor<Hammer, CanvasHelper>>(() => FieldAccessor<Hammer, CanvasHelper>.Create("canvas"));
		private static readonly System.Lazy<FieldAccessor<Hammer, string>> _eventRef_swing =
				new System.Lazy<FieldAccessor<Hammer, string>>(() => FieldAccessor<Hammer, string>.Create("eventRef_swing"));

		public static string GetEventRef_reinforce(this Hammer __self) => _eventRef_reinforce.Value.GetValue(__self);
		public static void SetEventRef_reinforce(this Hammer __self, string value) => _eventRef_reinforce.Value.SetValue(__self, value);
		public static int GetBlockRepairAmount(this Hammer __self) => _blockRepairAmount.Value.GetValue(__self);
		public static void SetBlockRepairAmount(this Hammer __self, int value) => _blockRepairAmount.Value.SetValue(__self, value);
		public static BlockCreator GetBlockCreator(this Hammer __self) => _blockCreator.Value.GetValue(__self);
		public static void SetBlockCreator(this Hammer __self, BlockCreator value) => _blockCreator.Value.SetValue(__self, value);
		public static ParticleController GetWoodParticles(this Hammer __self) => _woodParticles.Value.GetValue(__self);
		public static void SetWoodParticles(this Hammer __self, ParticleController value) => _woodParticles.Value.SetValue(__self, value);
		public static Item_Base GetRepairItem(this Hammer __self) => _repairItem.Value.GetValue(__self);
		public static void SetRepairItem(this Hammer __self, Item_Base value) => _repairItem.Value.SetValue(__self, value);
		public static Item_Base GetReinforceItem(this Hammer __self) => _reinforceItem.Value.GetValue(__self);
		public static void SetReinforceItem(this Hammer __self, Item_Base value) => _reinforceItem.Value.SetValue(__self, value);
		public static GhostDisplayer GetReinForceGhostPrefab(this Hammer __self) => _reinForceGhostPrefab.Value.GetValue(__self);
		public static void SetReinForceGhostPrefab(this Hammer __self, GhostDisplayer value) => _reinForceGhostPrefab.Value.SetValue(__self, value);
		public static GhostDisplayer GetReinforceGhostObject(this Hammer __self) => _reinforceGhostObject.Value.GetValue(__self);
		public static void SetReinforceGhostObject(this Hammer __self, GhostDisplayer value) => _reinforceGhostObject.Value.SetValue(__self, value);
		public static Network_Player GetPlayerNetwork(this Hammer __self) => _playerNetwork.Value.GetValue(__self);
		public static void SetPlayerNetwork(this Hammer __self, Network_Player value) => _playerNetwork.Value.SetValue(__self, value);
		public static CanvasHelper GetCanvas(this Hammer __self) => _canvas.Value.GetValue(__self);
		public static void SetCanvas(this Hammer __self, CanvasHelper value) => _canvas.Value.SetValue(__self, value);
		public static string GetEventRef_swing(this Hammer __self) => _eventRef_swing.Value.GetValue(__self);
		public static void SetEventRef_swing(this Hammer __self, string value) => _eventRef_swing.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Hammer>> _Start757602046 =
				new System.Lazy<MethodAccessor<Hammer>>(() => MethodAccessor<Hammer>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<Hammer>> _Update757602046 =
				new System.Lazy<MethodAccessor<Hammer>>(() => MethodAccessor<Hammer>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<Hammer>> _HandleRepairingAndReinforcement757602046 =
				new System.Lazy<MethodAccessor<Hammer>>(() => MethodAccessor<Hammer>.Create("HandleRepairingAndReinforcement"));
		private static readonly System.Lazy<MethodAccessor<Hammer>> _HandleRepairingOfBlock2659602878 =
				new System.Lazy<MethodAccessor<Hammer>>(() => MethodAccessor<Hammer>.Create("HandleRepairingOfBlock", typeof(Block), typeof(UnityEngine.RaycastHit)));
		private static readonly System.Lazy<MethodAccessor<Hammer>> _HandleReinforcementOfBlock2659602878 =
				new System.Lazy<MethodAccessor<Hammer>>(() => MethodAccessor<Hammer>.Create("HandleReinforcementOfBlock", typeof(Block), typeof(UnityEngine.RaycastHit)));

		public static void Start(this Hammer __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this Hammer __self) => _Update757602046.Value.Invoke(__self);
		public static void HandleRepairingAndReinforcement(this Hammer __self) => _HandleRepairingAndReinforcement757602046.Value.Invoke(__self);
		public static void HandleRepairingOfBlock(this Hammer __self, Block block, UnityEngine.RaycastHit hit) => _HandleRepairingOfBlock2659602878.Value.Invoke(__self, block, hit);
		public static void HandleReinforcementOfBlock(this Hammer __self, Block block, UnityEngine.RaycastHit hit) => _HandleReinforcementOfBlock2659602878.Value.Invoke(__self, block, hit);

	}

	public static class PrivateAccessor_MaterialRendConnection
	{

		private static readonly System.Lazy<FieldAccessor<MaterialRendConnection, UnityEngine.MaterialPropertyBlock>> _matPropBlock =
				new System.Lazy<FieldAccessor<MaterialRendConnection, UnityEngine.MaterialPropertyBlock>>(() => FieldAccessor<MaterialRendConnection, UnityEngine.MaterialPropertyBlock>.Create("matPropBlock"));

		public static UnityEngine.MaterialPropertyBlock GetMatPropBlock(this MaterialRendConnection __self) => _matPropBlock.Value.GetValue(__self);
		public static void SetMatPropBlock(this MaterialRendConnection __self, UnityEngine.MaterialPropertyBlock value) => _matPropBlock.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_OccupyingComponent
	{

		private static readonly System.Lazy<FieldAccessor<OccupyingComponent, AdvancedCollision[]>> _advancedCollisions =
				new System.Lazy<FieldAccessor<OccupyingComponent, AdvancedCollision[]>>(() => FieldAccessor<OccupyingComponent, AdvancedCollision[]>.Create("advancedCollisions"));
		private static readonly System.Lazy<FieldAccessor<OccupyingComponent, MaterialRendConnection[]>> _materialConnections =
				new System.Lazy<FieldAccessor<OccupyingComponent, MaterialRendConnection[]>>(() => FieldAccessor<OccupyingComponent, MaterialRendConnection[]>.Create("materialConnections"));

		public static AdvancedCollision[] GetAdvancedCollisions(this OccupyingComponent __self) => _advancedCollisions.Value.GetValue(__self);
		public static void SetAdvancedCollisions(this OccupyingComponent __self, AdvancedCollision[] value) => _advancedCollisions.Value.SetValue(__self, value);
		public static MaterialRendConnection[] GetMaterialConnections(this OccupyingComponent __self) => _materialConnections.Value.GetValue(__self);
		public static void SetMaterialConnections(this OccupyingComponent __self, MaterialRendConnection[] value) => _materialConnections.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<OccupyingComponent>> _Awake757602046 =
				new System.Lazy<MethodAccessor<OccupyingComponent>>(() => MethodAccessor<OccupyingComponent>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<OccupyingComponent>> _Start757602046 =
				new System.Lazy<MethodAccessor<OccupyingComponent>>(() => MethodAccessor<OccupyingComponent>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<OccupyingComponent>> _Button_FindRenderers757602046 =
				new System.Lazy<MethodAccessor<OccupyingComponent>>(() => MethodAccessor<OccupyingComponent>.Create("Button_FindRenderers"));

		public static void Awake(this OccupyingComponent __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this OccupyingComponent __self) => _Start757602046.Value.Invoke(__self);
		public static void Button_FindRenderers(this OccupyingComponent __self) => _Button_FindRenderers757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_StableComponent
	{

		private static readonly System.Lazy<MethodAccessor<StableComponent>> _OnValidate757602046 =
				new System.Lazy<MethodAccessor<StableComponent>>(() => MethodAccessor<StableComponent>.Create("OnValidate"));
		private static readonly System.Lazy<MethodAccessor<StableComponent>> _GetOverlapCount757602046 =
				new System.Lazy<MethodAccessor<StableComponent>>(() => MethodAccessor<StableComponent>.Create("GetOverlapCount"));

		public static void OnValidate(this StableComponent __self) => _OnValidate757602046.Value.Invoke(__self);
		public static int GetOverlapCount(this StableComponent __self) => (int)_GetOverlapCount757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_TMPBlockCollider
	{

		private static readonly System.Lazy<MethodAccessor<TMPBlockCollider>> _RenameColliders757602046 =
				new System.Lazy<MethodAccessor<TMPBlockCollider>>(() => MethodAccessor<TMPBlockCollider>.Create("RenameColliders"));

		public static void RenameColliders(this TMPBlockCollider __self) => _RenameColliders757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Anchor_Throwable
	{

		private static readonly System.Lazy<FieldAccessor<Anchor_Throwable, Anchor>> _anchorPrefab =
				new System.Lazy<FieldAccessor<Anchor_Throwable, Anchor>>(() => FieldAccessor<Anchor_Throwable, Anchor>.Create("anchorPrefab"));
		private static readonly System.Lazy<FieldAccessor<Anchor_Throwable, Network_Player>> _playerNetwork =
				new System.Lazy<FieldAccessor<Anchor_Throwable, Network_Player>>(() => FieldAccessor<Anchor_Throwable, Network_Player>.Create("playerNetwork"));
		private static readonly System.Lazy<FieldAccessor<Anchor_Throwable, CanvasHelper>> _canvas =
				new System.Lazy<FieldAccessor<Anchor_Throwable, CanvasHelper>>(() => FieldAccessor<Anchor_Throwable, CanvasHelper>.Create("canvas"));
		private static readonly System.Lazy<FieldAccessor<Anchor_Throwable, float>> _holdRemoveValue =
				new System.Lazy<FieldAccessor<Anchor_Throwable, float>>(() => FieldAccessor<Anchor_Throwable, float>.Create("holdRemoveValue"));
		private static readonly System.Lazy<FieldAccessor<Anchor_Throwable, bool>> _isShowingText =
				new System.Lazy<FieldAccessor<Anchor_Throwable, bool>>(() => FieldAccessor<Anchor_Throwable, bool>.Create("isShowingText"));

		public static Anchor GetAnchorPrefab(this Anchor_Throwable __self) => _anchorPrefab.Value.GetValue(__self);
		public static void SetAnchorPrefab(this Anchor_Throwable __self, Anchor value) => _anchorPrefab.Value.SetValue(__self, value);
		public static Network_Player GetPlayerNetwork(this Anchor_Throwable __self) => _playerNetwork.Value.GetValue(__self);
		public static void SetPlayerNetwork(this Anchor_Throwable __self, Network_Player value) => _playerNetwork.Value.SetValue(__self, value);
		public static CanvasHelper GetCanvas(this Anchor_Throwable __self) => _canvas.Value.GetValue(__self);
		public static void SetCanvas(this Anchor_Throwable __self, CanvasHelper value) => _canvas.Value.SetValue(__self, value);
		public static float GetHoldRemoveValue(this Anchor_Throwable __self) => _holdRemoveValue.Value.GetValue(__self);
		public static void SetHoldRemoveValue(this Anchor_Throwable __self, float value) => _holdRemoveValue.Value.SetValue(__self, value);
		public static bool GetIsShowingText(this Anchor_Throwable __self) => _isShowingText.Value.GetValue(__self);
		public static void SetIsShowingText(this Anchor_Throwable __self, bool value) => _isShowingText.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Anchor_Throwable>> _Awake757602046 =
				new System.Lazy<MethodAccessor<Anchor_Throwable>>(() => MethodAccessor<Anchor_Throwable>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<Anchor_Throwable>> _Start757602046 =
				new System.Lazy<MethodAccessor<Anchor_Throwable>>(() => MethodAccessor<Anchor_Throwable>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<Anchor_Throwable>> _OnDisable757602046 =
				new System.Lazy<MethodAccessor<Anchor_Throwable>>(() => MethodAccessor<Anchor_Throwable>.Create("OnDisable"));
		private static readonly System.Lazy<MethodAccessor<Anchor_Throwable>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<Anchor_Throwable>>(() => MethodAccessor<Anchor_Throwable>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<Anchor_Throwable>> _Update757602046 =
				new System.Lazy<MethodAccessor<Anchor_Throwable>>(() => MethodAccessor<Anchor_Throwable>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<Anchor_Throwable>> _OnThrow757602046 =
				new System.Lazy<MethodAccessor<Anchor_Throwable>>(() => MethodAccessor<Anchor_Throwable>.Create("OnThrow"));

		public static void Awake(this Anchor_Throwable __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this Anchor_Throwable __self) => _Start757602046.Value.Invoke(__self);
		public static void OnDisable(this Anchor_Throwable __self) => _OnDisable757602046.Value.Invoke(__self);
		public static void OnDestroy(this Anchor_Throwable __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void Update(this Anchor_Throwable __self) => _Update757602046.Value.Invoke(__self);
		public static void OnThrow(this Anchor_Throwable __self) => _OnThrow757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Bobber
	{

		private static readonly System.Lazy<FieldAccessor<Bobber, Interval_Float>> _waitTime =
				new System.Lazy<FieldAccessor<Bobber, Interval_Float>>(() => FieldAccessor<Bobber, Interval_Float>.Create("waitTime"));
		private static readonly System.Lazy<FieldAccessor<Bobber, Interval_Float>> _fishFightTime =
				new System.Lazy<FieldAccessor<Bobber, Interval_Float>>(() => FieldAccessor<Bobber, Interval_Float>.Create("fishFightTime"));
		private static readonly System.Lazy<FieldAccessor<Bobber, RandomDropper>> _randomDropper =
				new System.Lazy<FieldAccessor<Bobber, RandomDropper>>(() => FieldAccessor<Bobber, RandomDropper>.Create("randomDropper"));
		private static readonly System.Lazy<FieldAccessor<Bobber, WaterFloatSemih2>> _waterFloat =
				new System.Lazy<FieldAccessor<Bobber, WaterFloatSemih2>>(() => FieldAccessor<Bobber, WaterFloatSemih2>.Create("waterFloat"));
		private static readonly System.Lazy<FieldAccessor<Bobber, FMODUnity.StudioEventEmitter>> _eventEmitter_FishOnHook =
				new System.Lazy<FieldAccessor<Bobber, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<Bobber, FMODUnity.StudioEventEmitter>.Create("eventEmitter_FishOnHook"));
		private static readonly System.Lazy<FieldAccessor<Bobber, FMODUnity.StudioEventEmitter>> _eventEmitter_FishOnHookPole =
				new System.Lazy<FieldAccessor<Bobber, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<Bobber, FMODUnity.StudioEventEmitter>.Create("eventEmitter_FishOnHookPole"));
		private static readonly System.Lazy<FieldAccessor<Bobber, Throwable>> _rodThrowable =
				new System.Lazy<FieldAccessor<Bobber, Throwable>>(() => FieldAccessor<Bobber, Throwable>.Create("rodThrowable"));
		private static readonly System.Lazy<FieldAccessor<Bobber, bool>> _active =
				new System.Lazy<FieldAccessor<Bobber, bool>>(() => FieldAccessor<Bobber, bool>.Create("active"));
		private static readonly System.Lazy<FieldAccessor<Bobber, bool>> _fishIsOnHook =
				new System.Lazy<FieldAccessor<Bobber, bool>>(() => FieldAccessor<Bobber, bool>.Create("fishIsOnHook"));
		private static readonly System.Lazy<FieldAccessor<Bobber, bool>> _fishEscaped =
				new System.Lazy<FieldAccessor<Bobber, bool>>(() => FieldAccessor<Bobber, bool>.Create("fishEscaped"));

		public static Interval_Float GetWaitTime(this Bobber __self) => _waitTime.Value.GetValue(__self);
		public static void SetWaitTime(this Bobber __self, Interval_Float value) => _waitTime.Value.SetValue(__self, value);
		public static Interval_Float GetFishFightTime(this Bobber __self) => _fishFightTime.Value.GetValue(__self);
		public static void SetFishFightTime(this Bobber __self, Interval_Float value) => _fishFightTime.Value.SetValue(__self, value);
		public static RandomDropper GetRandomDropper(this Bobber __self) => _randomDropper.Value.GetValue(__self);
		public static void SetRandomDropper(this Bobber __self, RandomDropper value) => _randomDropper.Value.SetValue(__self, value);
		public static WaterFloatSemih2 GetWaterFloat(this Bobber __self) => _waterFloat.Value.GetValue(__self);
		public static void SetWaterFloat(this Bobber __self, WaterFloatSemih2 value) => _waterFloat.Value.SetValue(__self, value);
		public static FMODUnity.StudioEventEmitter GetEventEmitter_FishOnHook(this Bobber __self) => _eventEmitter_FishOnHook.Value.GetValue(__self);
		public static void SetEventEmitter_FishOnHook(this Bobber __self, FMODUnity.StudioEventEmitter value) => _eventEmitter_FishOnHook.Value.SetValue(__self, value);
		public static FMODUnity.StudioEventEmitter GetEventEmitter_FishOnHookPole(this Bobber __self) => _eventEmitter_FishOnHookPole.Value.GetValue(__self);
		public static void SetEventEmitter_FishOnHookPole(this Bobber __self, FMODUnity.StudioEventEmitter value) => _eventEmitter_FishOnHookPole.Value.SetValue(__self, value);
		public static Throwable GetRodThrowable(this Bobber __self) => _rodThrowable.Value.GetValue(__self);
		public static void SetRodThrowable(this Bobber __self, Throwable value) => _rodThrowable.Value.SetValue(__self, value);
		public static bool GetActive(this Bobber __self) => _active.Value.GetValue(__self);
		public static void SetActive(this Bobber __self, bool value) => _active.Value.SetValue(__self, value);
		public static bool GetFishIsOnHook(this Bobber __self) => _fishIsOnHook.Value.GetValue(__self);
		public static void SetFishIsOnHook(this Bobber __self, bool value) => _fishIsOnHook.Value.SetValue(__self, value);
		public static bool GetFishEscaped(this Bobber __self) => _fishEscaped.Value.GetValue(__self);
		public static void SetFishEscaped(this Bobber __self, bool value) => _fishEscaped.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Bobber>> _Awake757602046 =
				new System.Lazy<MethodAccessor<Bobber>>(() => MethodAccessor<Bobber>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<Bobber>> _OnValidate757602046 =
				new System.Lazy<MethodAccessor<Bobber>>(() => MethodAccessor<Bobber>.Create("OnValidate"));
		private static readonly System.Lazy<MethodAccessor<Bobber>> _FishOnHook3486905475 =
				new System.Lazy<MethodAccessor<Bobber>>(() => MethodAccessor<Bobber>.Create("FishOnHook", typeof(float)));
		private static readonly System.Lazy<MethodAccessor<Bobber>> _FishEscaped3486905475 =
				new System.Lazy<MethodAccessor<Bobber>>(() => MethodAccessor<Bobber>.Create("FishEscaped", typeof(float)));
		private static readonly System.Lazy<MethodAccessor<Bobber>> _Flee757602046 =
				new System.Lazy<MethodAccessor<Bobber>>(() => MethodAccessor<Bobber>.Create("Flee"));

		public static void Awake(this Bobber __self) => _Awake757602046.Value.Invoke(__self);
		public static void OnValidate(this Bobber __self) => _OnValidate757602046.Value.Invoke(__self);
		public static System.Collections.IEnumerator FishOnHook(this Bobber __self, float timeDelay) => (System.Collections.IEnumerator)_FishOnHook3486905475.Value.Invoke(__self, timeDelay);
		public static System.Collections.IEnumerator FishEscaped(this Bobber __self, float timeDelay) => (System.Collections.IEnumerator)_FishEscaped3486905475.Value.Invoke(__self, timeDelay);
		public static System.Collections.IEnumerator Flee(this Bobber __self) => (System.Collections.IEnumerator)_Flee757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_ChargeMeter
	{

		private static readonly System.Lazy<FieldAccessor<ChargeMeter, bool>> _setCanvasCircle =
				new System.Lazy<FieldAccessor<ChargeMeter, bool>>(() => FieldAccessor<ChargeMeter, bool>.Create("setCanvasCircle"));
		private static readonly System.Lazy<FieldAccessor<ChargeMeter, float>> _chargeSpeed =
				new System.Lazy<FieldAccessor<ChargeMeter, float>>(() => FieldAccessor<ChargeMeter, float>.Create("chargeSpeed"));
		private static readonly System.Lazy<FieldAccessor<ChargeMeter, CanvasHelper>> _canvas =
				new System.Lazy<FieldAccessor<ChargeMeter, CanvasHelper>>(() => FieldAccessor<ChargeMeter, CanvasHelper>.Create("canvas"));
		private static readonly System.Lazy<FieldAccessor<ChargeMeter, float>> _maxCharge =
				new System.Lazy<FieldAccessor<ChargeMeter, float>>(() => FieldAccessor<ChargeMeter, float>.Create("maxCharge"));
		private static readonly System.Lazy<FieldAccessor<ChargeMeter, float>> _minCharge =
				new System.Lazy<FieldAccessor<ChargeMeter, float>>(() => FieldAccessor<ChargeMeter, float>.Create("minCharge"));
		private static readonly System.Lazy<FieldAccessor<ChargeMeter, float>> _currentCharge =
				new System.Lazy<FieldAccessor<ChargeMeter, float>>(() => FieldAccessor<ChargeMeter, float>.Create("currentCharge"));

		public static bool GetSetCanvasCircle(this ChargeMeter __self) => _setCanvasCircle.Value.GetValue(__self);
		public static void SetSetCanvasCircle(this ChargeMeter __self, bool value) => _setCanvasCircle.Value.SetValue(__self, value);
		public static float GetChargeSpeed(this ChargeMeter __self) => _chargeSpeed.Value.GetValue(__self);
		public static void SetChargeSpeed(this ChargeMeter __self, float value) => _chargeSpeed.Value.SetValue(__self, value);
		public static CanvasHelper GetCanvas(this ChargeMeter __self) => _canvas.Value.GetValue(__self);
		public static void SetCanvas(this ChargeMeter __self, CanvasHelper value) => _canvas.Value.SetValue(__self, value);
		public static float GetMaxCharge(this ChargeMeter __self) => _maxCharge.Value.GetValue(__self);
		public static void SetMaxCharge(this ChargeMeter __self, float value) => _maxCharge.Value.SetValue(__self, value);
		public static float GetMinCharge(this ChargeMeter __self) => _minCharge.Value.GetValue(__self);
		public static void SetMinCharge(this ChargeMeter __self, float value) => _minCharge.Value.SetValue(__self, value);
		public static float GetCurrentCharge(this ChargeMeter __self) => _currentCharge.Value.GetValue(__self);
		public static void SetCurrentCharge(this ChargeMeter __self, float value) => _currentCharge.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<ChargeMeter>> _Start757602046 =
				new System.Lazy<MethodAccessor<ChargeMeter>>(() => MethodAccessor<ChargeMeter>.Create("Start"));

		public static void Start(this ChargeMeter __self) => _Start757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_FishingBaitHandler
	{

		private static readonly System.Lazy<FieldAccessor<FishingBaitHandler, Network_Player>> _playerNetwork =
				new System.Lazy<FieldAccessor<FishingBaitHandler, Network_Player>>(() => FieldAccessor<FishingBaitHandler, Network_Player>.Create("playerNetwork"));
		private static readonly System.Lazy<FieldAccessor<FishingBaitHandler, RandomDropper>> _defaultDropper =
				new System.Lazy<FieldAccessor<FishingBaitHandler, RandomDropper>>(() => FieldAccessor<FishingBaitHandler, RandomDropper>.Create("defaultDropper"));
		private static readonly System.Lazy<FieldAccessor<FishingBaitHandler, RandomDropper>> _metalRodDropper =
				new System.Lazy<FieldAccessor<FishingBaitHandler, RandomDropper>>(() => FieldAccessor<FishingBaitHandler, RandomDropper>.Create("metalRodDropper"));
		private static readonly System.Lazy<FieldAccessor<FishingBaitHandler, UnityEngine.Mesh>> _defaultBobberMesh =
				new System.Lazy<FieldAccessor<FishingBaitHandler, UnityEngine.Mesh>>(() => FieldAccessor<FishingBaitHandler, UnityEngine.Mesh>.Create("defaultBobberMesh"));
		private static readonly System.Lazy<FieldAccessor<FishingBaitHandler, UnityEngine.Material>> _defaultBobberMaterial =
				new System.Lazy<FieldAccessor<FishingBaitHandler, UnityEngine.Material>>(() => FieldAccessor<FishingBaitHandler, UnityEngine.Material>.Create("defaultBobberMaterial"));
		private static readonly System.Lazy<FieldAccessor<FishingBaitHandler, Item_Base>> _currentBait =
				new System.Lazy<FieldAccessor<FishingBaitHandler, Item_Base>>(() => FieldAccessor<FishingBaitHandler, Item_Base>.Create("currentBait"));

		public static Network_Player GetPlayerNetwork(this FishingBaitHandler __self) => _playerNetwork.Value.GetValue(__self);
		public static void SetPlayerNetwork(this FishingBaitHandler __self, Network_Player value) => _playerNetwork.Value.SetValue(__self, value);
		public static RandomDropper GetDefaultDropper(this FishingBaitHandler __self) => _defaultDropper.Value.GetValue(__self);
		public static void SetDefaultDropper(this FishingBaitHandler __self, RandomDropper value) => _defaultDropper.Value.SetValue(__self, value);
		public static RandomDropper GetMetalRodDropper(this FishingBaitHandler __self) => _metalRodDropper.Value.GetValue(__self);
		public static void SetMetalRodDropper(this FishingBaitHandler __self, RandomDropper value) => _metalRodDropper.Value.SetValue(__self, value);
		public static UnityEngine.Mesh GetDefaultBobberMesh(this FishingBaitHandler __self) => _defaultBobberMesh.Value.GetValue(__self);
		public static void SetDefaultBobberMesh(this FishingBaitHandler __self, UnityEngine.Mesh value) => _defaultBobberMesh.Value.SetValue(__self, value);
		public static UnityEngine.Material GetDefaultBobberMaterial(this FishingBaitHandler __self) => _defaultBobberMaterial.Value.GetValue(__self);
		public static void SetDefaultBobberMaterial(this FishingBaitHandler __self, UnityEngine.Material value) => _defaultBobberMaterial.Value.SetValue(__self, value);
		public static Item_Base GetCurrentBait(this FishingBaitHandler __self) => _currentBait.Value.GetValue(__self);
		public static void SetCurrentBait(this FishingBaitHandler __self, Item_Base value) => _currentBait.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_FishingRod
	{

		private static readonly System.Lazy<FieldAccessor<FishingRod, UnityEngine.Vector3>> _ropeFOVOffset =
				new System.Lazy<FieldAccessor<FishingRod, UnityEngine.Vector3>>(() => FieldAccessor<FishingRod, UnityEngine.Vector3>.Create("ropeFOVOffset"));
		private static readonly System.Lazy<FieldAccessor<FishingRod, UnityEngine.GameObject>> _ropeMesh =
				new System.Lazy<FieldAccessor<FishingRod, UnityEngine.GameObject>>(() => FieldAccessor<FishingRod, UnityEngine.GameObject>.Create("ropeMesh"));
		private static readonly System.Lazy<FieldAccessor<FishingRod, UnityEngine.MeshFilter>> _bobberMeshFilter =
				new System.Lazy<FieldAccessor<FishingRod, UnityEngine.MeshFilter>>(() => FieldAccessor<FishingRod, UnityEngine.MeshFilter>.Create("bobberMeshFilter"));
		private static readonly System.Lazy<FieldAccessor<FishingRod, UnityEngine.MeshRenderer>> _bobberMeshRenderer =
				new System.Lazy<FieldAccessor<FishingRod, UnityEngine.MeshRenderer>>(() => FieldAccessor<FishingRod, UnityEngine.MeshRenderer>.Create("bobberMeshRenderer"));
		private static readonly System.Lazy<FieldAccessor<FishingRod, FishingBaitHandler>> _fishingBaitHandler =
				new System.Lazy<FieldAccessor<FishingRod, FishingBaitHandler>>(() => FieldAccessor<FishingRod, FishingBaitHandler>.Create("fishingBaitHandler"));
		private static readonly System.Lazy<FieldAccessor<FishingRod, bool>> _isMetalRod =
				new System.Lazy<FieldAccessor<FishingRod, bool>>(() => FieldAccessor<FishingRod, bool>.Create("isMetalRod"));
		private static readonly System.Lazy<FieldAccessor<FishingRod, Network_Player>> _playerNetwork =
				new System.Lazy<FieldAccessor<FishingRod, Network_Player>>(() => FieldAccessor<FishingRod, Network_Player>.Create("playerNetwork"));
		private static readonly System.Lazy<FieldAccessor<FishingRod, Throwable>> _throwable =
				new System.Lazy<FieldAccessor<FishingRod, Throwable>>(() => FieldAccessor<FishingRod, Throwable>.Create("throwable"));
		private static readonly System.Lazy<FieldAccessor<FishingRod, PersonController>> _personController =
				new System.Lazy<FieldAccessor<FishingRod, PersonController>>(() => FieldAccessor<FishingRod, PersonController>.Create("personController"));
		private static readonly System.Lazy<FieldAccessor<FishingRod, Rope>> _rope =
				new System.Lazy<FieldAccessor<FishingRod, Rope>>(() => FieldAccessor<FishingRod, Rope>.Create("rope"));
		private static readonly System.Lazy<FieldAccessor<FishingRod, PlayerAnimator>> _playerAnimator =
				new System.Lazy<FieldAccessor<FishingRod, PlayerAnimator>>(() => FieldAccessor<FishingRod, PlayerAnimator>.Create("playerAnimator"));
		private static readonly System.Lazy<FieldAccessor<FishingRod, CanvasHelper>> _canvas =
				new System.Lazy<FieldAccessor<FishingRod, CanvasHelper>>(() => FieldAccessor<FishingRod, CanvasHelper>.Create("canvas"));
		private static readonly System.Lazy<FieldAccessor<FishingRod, bool>> _canUseRod =
				new System.Lazy<FieldAccessor<FishingRod, bool>>(() => FieldAccessor<FishingRod, bool>.Create("canUseRod"));

		public static UnityEngine.Vector3 GetRopeFOVOffset(this FishingRod __self) => _ropeFOVOffset.Value.GetValue(__self);
		public static void SetRopeFOVOffset(this FishingRod __self, UnityEngine.Vector3 value) => _ropeFOVOffset.Value.SetValue(__self, value);
		public static UnityEngine.GameObject GetRopeMesh(this FishingRod __self) => _ropeMesh.Value.GetValue(__self);
		public static void SetRopeMesh(this FishingRod __self, UnityEngine.GameObject value) => _ropeMesh.Value.SetValue(__self, value);
		public static UnityEngine.MeshFilter GetBobberMeshFilter(this FishingRod __self) => _bobberMeshFilter.Value.GetValue(__self);
		public static void SetBobberMeshFilter(this FishingRod __self, UnityEngine.MeshFilter value) => _bobberMeshFilter.Value.SetValue(__self, value);
		public static UnityEngine.MeshRenderer GetBobberMeshRenderer(this FishingRod __self) => _bobberMeshRenderer.Value.GetValue(__self);
		public static void SetBobberMeshRenderer(this FishingRod __self, UnityEngine.MeshRenderer value) => _bobberMeshRenderer.Value.SetValue(__self, value);
		public static FishingBaitHandler GetFishingBaitHandler(this FishingRod __self) => _fishingBaitHandler.Value.GetValue(__self);
		public static void SetFishingBaitHandler(this FishingRod __self, FishingBaitHandler value) => _fishingBaitHandler.Value.SetValue(__self, value);
		public static bool GetIsMetalRod(this FishingRod __self) => _isMetalRod.Value.GetValue(__self);
		public static void SetIsMetalRod(this FishingRod __self, bool value) => _isMetalRod.Value.SetValue(__self, value);
		public static Network_Player GetPlayerNetwork(this FishingRod __self) => _playerNetwork.Value.GetValue(__self);
		public static void SetPlayerNetwork(this FishingRod __self, Network_Player value) => _playerNetwork.Value.SetValue(__self, value);
		public static Throwable GetThrowable(this FishingRod __self) => _throwable.Value.GetValue(__self);
		public static void SetThrowable(this FishingRod __self, Throwable value) => _throwable.Value.SetValue(__self, value);
		public static PersonController GetPersonController(this FishingRod __self) => _personController.Value.GetValue(__self);
		public static void SetPersonController(this FishingRod __self, PersonController value) => _personController.Value.SetValue(__self, value);
		public static Rope GetRope(this FishingRod __self) => _rope.Value.GetValue(__self);
		public static void SetRope(this FishingRod __self, Rope value) => _rope.Value.SetValue(__self, value);
		public static PlayerAnimator GetPlayerAnimator(this FishingRod __self) => _playerAnimator.Value.GetValue(__self);
		public static void SetPlayerAnimator(this FishingRod __self, PlayerAnimator value) => _playerAnimator.Value.SetValue(__self, value);
		public static CanvasHelper GetCanvas(this FishingRod __self) => _canvas.Value.GetValue(__self);
		public static void SetCanvas(this FishingRod __self, CanvasHelper value) => _canvas.Value.SetValue(__self, value);
		public static bool GetCanUseRod(this FishingRod __self) => _canUseRod.Value.GetValue(__self);
		public static void SetCanUseRod(this FishingRod __self, bool value) => _canUseRod.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<FishingRod>> _Awake757602046 =
				new System.Lazy<MethodAccessor<FishingRod>>(() => MethodAccessor<FishingRod>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<FishingRod>> _Start757602046 =
				new System.Lazy<MethodAccessor<FishingRod>>(() => MethodAccessor<FishingRod>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<FishingRod>> _Update757602046 =
				new System.Lazy<MethodAccessor<FishingRod>>(() => MethodAccessor<FishingRod>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<FishingRod>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<FishingRod>>(() => MethodAccessor<FishingRod>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<FishingRod>> _SetRopePositionAndLayer757602046 =
				new System.Lazy<MethodAccessor<FishingRod>>(() => MethodAccessor<FishingRod>.Create("SetRopePositionAndLayer"));
		private static readonly System.Lazy<MethodAccessor<FishingRod>> _OnFishGrabBait757602046 =
				new System.Lazy<MethodAccessor<FishingRod>>(() => MethodAccessor<FishingRod>.Create("OnFishGrabBait"));
		private static readonly System.Lazy<MethodAccessor<FishingRod>> _OnFishEscaped757602046 =
				new System.Lazy<MethodAccessor<FishingRod>>(() => MethodAccessor<FishingRod>.Create("OnFishEscaped"));
		private static readonly System.Lazy<MethodAccessor<FishingRod>> _CameraSubmersionState3450800533 =
				new System.Lazy<MethodAccessor<FishingRod>>(() => MethodAccessor<FishingRod>.Create("CameraSubmersionState", typeof(UltimateWater.SubmersionState)));
		private static readonly System.Lazy<MethodAccessor<FishingRod>> _PullItemsFromSea757602046 =
				new System.Lazy<MethodAccessor<FishingRod>>(() => MethodAccessor<FishingRod>.Create("PullItemsFromSea"));
		private static readonly System.Lazy<MethodAccessor<FishingRod>> _ResetRod757602046 =
				new System.Lazy<MethodAccessor<FishingRod>>(() => MethodAccessor<FishingRod>.Create("ResetRod"));
		private static readonly System.Lazy<MethodAccessor<FishingRod>> _ResetUseRod757602046 =
				new System.Lazy<MethodAccessor<FishingRod>>(() => MethodAccessor<FishingRod>.Create("ResetUseRod"));
		private static readonly System.Lazy<MethodAccessor<FishingRod>> _OnThrow757602046 =
				new System.Lazy<MethodAccessor<FishingRod>>(() => MethodAccessor<FishingRod>.Create("OnThrow"));
		private static readonly System.Lazy<MethodAccessor<FishingRod>> _OnWaterHit757602046 =
				new System.Lazy<MethodAccessor<FishingRod>>(() => MethodAccessor<FishingRod>.Create("OnWaterHit"));

		public static void Awake(this FishingRod __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this FishingRod __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this FishingRod __self) => _Update757602046.Value.Invoke(__self);
		public static void OnDestroy(this FishingRod __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void SetRopePositionAndLayer(this FishingRod __self) => _SetRopePositionAndLayer757602046.Value.Invoke(__self);
		public static void OnFishGrabBait(this FishingRod __self) => _OnFishGrabBait757602046.Value.Invoke(__self);
		public static void OnFishEscaped(this FishingRod __self) => _OnFishEscaped757602046.Value.Invoke(__self);
		public static void CameraSubmersionState(this FishingRod __self, UltimateWater.SubmersionState state) => _CameraSubmersionState3450800533.Value.Invoke(__self, state);
		public static void PullItemsFromSea(this FishingRod __self) => _PullItemsFromSea757602046.Value.Invoke(__self);
		public static void ResetRod(this FishingRod __self) => _ResetRod757602046.Value.Invoke(__self);
		public static void ResetUseRod(this FishingRod __self) => _ResetUseRod757602046.Value.Invoke(__self);
		public static void OnThrow(this FishingRod __self) => _OnThrow757602046.Value.Invoke(__self);
		public static void OnWaterHit(this FishingRod __self) => _OnWaterHit757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Hook
	{

		private static readonly System.Lazy<FieldAccessor<Hook, Rope>> _rope =
				new System.Lazy<FieldAccessor<Hook, Rope>>(() => FieldAccessor<Hook, Rope>.Create("rope"));
		private static readonly System.Lazy<FieldAccessor<Hook, UnityEngine.GameObject>> _leftHandRopeModel =
				new System.Lazy<FieldAccessor<Hook, UnityEngine.GameObject>>(() => FieldAccessor<Hook, UnityEngine.GameObject>.Create("leftHandRopeModel"));
		private static readonly System.Lazy<FieldAccessor<Hook, UnityEngine.GameObject>> _hookMesh =
				new System.Lazy<FieldAccessor<Hook, UnityEngine.GameObject>>(() => FieldAccessor<Hook, UnityEngine.GameObject>.Create("hookMesh"));
		private static readonly System.Lazy<FieldAccessor<Hook, UnityEngine.GameObject>> _ropeMesh =
				new System.Lazy<FieldAccessor<Hook, UnityEngine.GameObject>>(() => FieldAccessor<Hook, UnityEngine.GameObject>.Create("ropeMesh"));
		private static readonly System.Lazy<FieldAccessor<Hook, FMODUnity.StudioEventEmitter>> _eventEmitter_gather =
				new System.Lazy<FieldAccessor<Hook, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<Hook, FMODUnity.StudioEventEmitter>.Create("eventEmitter_gather"));
		private static readonly System.Lazy<FieldAccessor<Hook, float>> _gatherTimer =
				new System.Lazy<FieldAccessor<Hook, float>>(() => FieldAccessor<Hook, float>.Create("gatherTimer"));
		private static readonly System.Lazy<FieldAccessor<Hook, CanvasHelper>> _canvas =
				new System.Lazy<FieldAccessor<Hook, CanvasHelper>>(() => FieldAccessor<Hook, CanvasHelper>.Create("canvas"));
		private static readonly System.Lazy<FieldAccessor<Hook, PickupItem>> _currentGatherItem =
				new System.Lazy<FieldAccessor<Hook, PickupItem>>(() => FieldAccessor<Hook, PickupItem>.Create("currentGatherItem"));
		private static readonly System.Lazy<FieldAccessor<Hook, PersonController>> _personController =
				new System.Lazy<FieldAccessor<Hook, PersonController>>(() => FieldAccessor<Hook, PersonController>.Create("personController"));
		private static readonly System.Lazy<FieldAccessor<Hook, UnityEngine.Transform>> _ropeConnectTransform =
				new System.Lazy<FieldAccessor<Hook, UnityEngine.Transform>>(() => FieldAccessor<Hook, UnityEngine.Transform>.Create("ropeConnectTransform"));
		private static readonly System.Lazy<FieldAccessor<Hook, Network_Player>> _playerNetwork =
				new System.Lazy<FieldAccessor<Hook, Network_Player>>(() => FieldAccessor<Hook, Network_Player>.Create("playerNetwork"));
		private static readonly System.Lazy<FieldAccessor<Hook, UnityEngine.ParticleSystem>> _watersplash_hook_pulling =
				new System.Lazy<FieldAccessor<Hook, UnityEngine.ParticleSystem>>(() => FieldAccessor<Hook, UnityEngine.ParticleSystem>.Create("watersplash_hook_pulling"));
		private static readonly System.Lazy<FieldAccessor<Hook, UnityEngine.Transform>> _raftTransform =
				new System.Lazy<FieldAccessor<Hook, UnityEngine.Transform>>(() => FieldAccessor<Hook, UnityEngine.Transform>.Create("raftTransform"));
		private static readonly System.Lazy<FieldAccessor<Hook, FMODUnity.StudioEventEmitter>> _eventEmitter_hookPull =
				new System.Lazy<FieldAccessor<Hook, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<Hook, FMODUnity.StudioEventEmitter>.Create("eventEmitter_hookPull"));

		public static Rope GetRope(this Hook __self) => _rope.Value.GetValue(__self);
		public static void SetRope(this Hook __self, Rope value) => _rope.Value.SetValue(__self, value);
		public static UnityEngine.GameObject GetLeftHandRopeModel(this Hook __self) => _leftHandRopeModel.Value.GetValue(__self);
		public static void SetLeftHandRopeModel(this Hook __self, UnityEngine.GameObject value) => _leftHandRopeModel.Value.SetValue(__self, value);
		public static UnityEngine.GameObject GetHookMesh(this Hook __self) => _hookMesh.Value.GetValue(__self);
		public static void SetHookMesh(this Hook __self, UnityEngine.GameObject value) => _hookMesh.Value.SetValue(__self, value);
		public static UnityEngine.GameObject GetRopeMesh(this Hook __self) => _ropeMesh.Value.GetValue(__self);
		public static void SetRopeMesh(this Hook __self, UnityEngine.GameObject value) => _ropeMesh.Value.SetValue(__self, value);
		public static FMODUnity.StudioEventEmitter GetEventEmitter_gather(this Hook __self) => _eventEmitter_gather.Value.GetValue(__self);
		public static void SetEventEmitter_gather(this Hook __self, FMODUnity.StudioEventEmitter value) => _eventEmitter_gather.Value.SetValue(__self, value);
		public static float GetGatherTimer(this Hook __self) => _gatherTimer.Value.GetValue(__self);
		public static void SetGatherTimer(this Hook __self, float value) => _gatherTimer.Value.SetValue(__self, value);
		public static CanvasHelper GetCanvas(this Hook __self) => _canvas.Value.GetValue(__self);
		public static void SetCanvas(this Hook __self, CanvasHelper value) => _canvas.Value.SetValue(__self, value);
		public static PickupItem GetCurrentGatherItem(this Hook __self) => _currentGatherItem.Value.GetValue(__self);
		public static void SetCurrentGatherItem(this Hook __self, PickupItem value) => _currentGatherItem.Value.SetValue(__self, value);
		public static PersonController GetPersonController(this Hook __self) => _personController.Value.GetValue(__self);
		public static void SetPersonController(this Hook __self, PersonController value) => _personController.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetRopeConnectTransform(this Hook __self) => _ropeConnectTransform.Value.GetValue(__self);
		public static void SetRopeConnectTransform(this Hook __self, UnityEngine.Transform value) => _ropeConnectTransform.Value.SetValue(__self, value);
		public static Network_Player GetPlayerNetwork(this Hook __self) => _playerNetwork.Value.GetValue(__self);
		public static void SetPlayerNetwork(this Hook __self, Network_Player value) => _playerNetwork.Value.SetValue(__self, value);
		public static UnityEngine.ParticleSystem GetWatersplash_hook_pulling(this Hook __self) => _watersplash_hook_pulling.Value.GetValue(__self);
		public static void SetWatersplash_hook_pulling(this Hook __self, UnityEngine.ParticleSystem value) => _watersplash_hook_pulling.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetRaftTransform(this Hook __self) => _raftTransform.Value.GetValue(__self);
		public static void SetRaftTransform(this Hook __self, UnityEngine.Transform value) => _raftTransform.Value.SetValue(__self, value);
		public static FMODUnity.StudioEventEmitter GetEventEmitter_hookPull(this Hook __self) => _eventEmitter_hookPull.Value.GetValue(__self);
		public static void SetEventEmitter_hookPull(this Hook __self, FMODUnity.StudioEventEmitter value) => _eventEmitter_hookPull.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Hook>> _Awake757602046 =
				new System.Lazy<MethodAccessor<Hook>>(() => MethodAccessor<Hook>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<Hook>> _Start757602046 =
				new System.Lazy<MethodAccessor<Hook>>(() => MethodAccessor<Hook>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<Hook>> _Update757602046 =
				new System.Lazy<MethodAccessor<Hook>>(() => MethodAccessor<Hook>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<Hook>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<Hook>>(() => MethodAccessor<Hook>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<Hook>> _CameraSubmersionState3450800533 =
				new System.Lazy<MethodAccessor<Hook>>(() => MethodAccessor<Hook>.Create("CameraSubmersionState", typeof(UltimateWater.SubmersionState)));
		private static readonly System.Lazy<MethodAccessor<Hook>> _OnTrow757602046 =
				new System.Lazy<MethodAccessor<Hook>>(() => MethodAccessor<Hook>.Create("OnTrow"));
		private static readonly System.Lazy<MethodAccessor<Hook>> _OnHitWater757602046 =
				new System.Lazy<MethodAccessor<Hook>>(() => MethodAccessor<Hook>.Create("OnHitWater"));
		private static readonly System.Lazy<MethodAccessor<Hook>> _ResetHookToPlayer757602046 =
				new System.Lazy<MethodAccessor<Hook>>(() => MethodAccessor<Hook>.Create("ResetHookToPlayer"));
		private static readonly System.Lazy<MethodAccessor<Hook>> _RotateHookTowardsPlayer757602046 =
				new System.Lazy<MethodAccessor<Hook>>(() => MethodAccessor<Hook>.Create("RotateHookTowardsPlayer"));
		private static readonly System.Lazy<MethodAccessor<Hook>> _HandleGathering757602046 =
				new System.Lazy<MethodAccessor<Hook>>(() => MethodAccessor<Hook>.Create("HandleGathering"));
		private static readonly System.Lazy<MethodAccessor<Hook>> _FinishGathering757602046 =
				new System.Lazy<MethodAccessor<Hook>>(() => MethodAccessor<Hook>.Create("FinishGathering"));
		private static readonly System.Lazy<MethodAccessor<Hook>> _StartCollecting3429011341 =
				new System.Lazy<MethodAccessor<Hook>>(() => MethodAccessor<Hook>.Create("StartCollecting", typeof(PickupItem)));
		private static readonly System.Lazy<MethodAccessor<Hook>> _StopCollecting757602046 =
				new System.Lazy<MethodAccessor<Hook>>(() => MethodAccessor<Hook>.Create("StopCollecting"));
		private static readonly System.Lazy<MethodAccessor<Hook>> _ResetGatherTimer757602046 =
				new System.Lazy<MethodAccessor<Hook>>(() => MethodAccessor<Hook>.Create("ResetGatherTimer"));

		public static void Awake(this Hook __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this Hook __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this Hook __self) => _Update757602046.Value.Invoke(__self);
		public static void OnDestroy(this Hook __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void CameraSubmersionState(this Hook __self, UltimateWater.SubmersionState state) => _CameraSubmersionState3450800533.Value.Invoke(__self, state);
		public static void OnTrow(this Hook __self) => _OnTrow757602046.Value.Invoke(__self);
		public static void OnHitWater(this Hook __self) => _OnHitWater757602046.Value.Invoke(__self);
		public static void ResetHookToPlayer(this Hook __self) => _ResetHookToPlayer757602046.Value.Invoke(__self);
		public static void RotateHookTowardsPlayer(this Hook __self) => _RotateHookTowardsPlayer757602046.Value.Invoke(__self);
		public static void HandleGathering(this Hook __self) => _HandleGathering757602046.Value.Invoke(__self);
		public static void FinishGathering(this Hook __self) => _FinishGathering757602046.Value.Invoke(__self);
		public static void StartCollecting(this Hook __self, PickupItem item) => _StartCollecting3429011341.Value.Invoke(__self, item);
		public static void StopCollecting(this Hook __self) => _StopCollecting757602046.Value.Invoke(__self);
		public static void ResetGatherTimer(this Hook __self) => _ResetGatherTimer757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_ItemCollector
	{

		private static readonly System.Lazy<FieldAccessor<ItemCollector, UnityEngine.Collider>> _collectorCollider =
				new System.Lazy<FieldAccessor<ItemCollector, UnityEngine.Collider>>(() => FieldAccessor<ItemCollector, UnityEngine.Collider>.Create("collectorCollider"));
		private static readonly System.Lazy<FieldAccessor<ItemCollector, int>> _maxNumberOfItems =
				new System.Lazy<FieldAccessor<ItemCollector, int>>(() => FieldAccessor<ItemCollector, int>.Create("maxNumberOfItems"));
		private static readonly System.Lazy<FieldAccessor<ItemCollector, string>> _eventRef_collect =
				new System.Lazy<FieldAccessor<ItemCollector, string>>(() => FieldAccessor<ItemCollector, string>.Create("eventRef_collect"));
		private static readonly System.Lazy<FieldAccessor<ItemCollector, Raft_Network>> _network =
				new System.Lazy<FieldAccessor<ItemCollector, Raft_Network>>(() => FieldAccessor<ItemCollector, Raft_Network>.Create("network"));

		public static UnityEngine.Collider GetCollectorCollider(this ItemCollector __self) => _collectorCollider.Value.GetValue(__self);
		public static void SetCollectorCollider(this ItemCollector __self, UnityEngine.Collider value) => _collectorCollider.Value.SetValue(__self, value);
		public static int GetMaxNumberOfItems(this ItemCollector __self) => _maxNumberOfItems.Value.GetValue(__self);
		public static void SetMaxNumberOfItems(this ItemCollector __self, int value) => _maxNumberOfItems.Value.SetValue(__self, value);
		public static string GetEventRef_collect(this ItemCollector __self) => _eventRef_collect.Value.GetValue(__self);
		public static void SetEventRef_collect(this ItemCollector __self, string value) => _eventRef_collect.Value.SetValue(__self, value);
		public static Raft_Network GetNetwork(this ItemCollector __self) => _network.Value.GetValue(__self);
		public static void SetNetwork(this ItemCollector __self, Raft_Network value) => _network.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<ItemCollector>> _Start757602046 =
				new System.Lazy<MethodAccessor<ItemCollector>>(() => MethodAccessor<ItemCollector>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<ItemCollector>> _OnTriggerEnter3468606003 =
				new System.Lazy<MethodAccessor<ItemCollector>>(() => MethodAccessor<ItemCollector>.Create("OnTriggerEnter", typeof(UnityEngine.Collider)));
		private static readonly System.Lazy<MethodAccessor<ItemCollector>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<ItemCollector>>(() => MethodAccessor<ItemCollector>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<ItemCollector>> _ClearCollectedItems3461878659 =
				new System.Lazy<MethodAccessor<ItemCollector>>(() => MethodAccessor<ItemCollector>.Create("ClearCollectedItems", typeof(Network_Player)));

		public static void Start(this ItemCollector __self) => _Start757602046.Value.Invoke(__self);
		public static void OnTriggerEnter(this ItemCollector __self, UnityEngine.Collider other) => _OnTriggerEnter3468606003.Value.Invoke(__self, other);
		public static void OnDestroy(this ItemCollector __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static bool ClearCollectedItems(this ItemCollector __self, Network_Player collectingPlayer) => (bool)_ClearCollectedItems3461878659.Value.Invoke(__self, collectingPlayer);

	}

	public static class PrivateAccessor_Message_ItemCollectorCreate
	{

		private static readonly System.Lazy<MethodAccessor<Message_ItemCollectorCreate>> _GetItemCollectorFromObjectIndex3462911395 =
				new System.Lazy<MethodAccessor<Message_ItemCollectorCreate>>(() => MethodAccessor<Message_ItemCollectorCreate>.Create("GetItemCollectorFromObjectIndex", typeof(ItemCollector[]), typeof(uint)));

		public static ItemCollector GetItemCollectorFromObjectIndex(this Message_ItemCollectorCreate __self, ItemCollector[] itemCollectors, uint objectIndex) => (ItemCollector)_GetItemCollectorFromObjectIndex3462911395.Value.Invoke(__self, itemCollectors, objectIndex);

	}

	public static class PrivateAccessor_SharkBait
	{

		private static readonly System.Lazy<FieldAccessor<SharkBait, bool>> _initialized =
				new System.Lazy<FieldAccessor<SharkBait, bool>>(() => FieldAccessor<SharkBait, bool>.Create("initialized"));

		public static bool GetInitialized(this SharkBait __self) => _initialized.Value.GetValue(__self);
		public static void SetInitialized(this SharkBait __self, bool value) => _initialized.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<SharkBait>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<SharkBait>>(() => MethodAccessor<SharkBait>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<SharkBait>> _OnWorldShift3429126434 =
				new System.Lazy<MethodAccessor<SharkBait>>(() => MethodAccessor<SharkBait>.Create("OnWorldShift", typeof(UnityEngine.Vector3)));
		private static readonly System.Lazy<MethodAccessor<SharkBait>> _CheckForRemove757602046 =
				new System.Lazy<MethodAccessor<SharkBait>>(() => MethodAccessor<SharkBait>.Create("CheckForRemove"));

		public static void OnDestroy(this SharkBait __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void OnWorldShift(this SharkBait __self, UnityEngine.Vector3 shift) => _OnWorldShift3429126434.Value.Invoke(__self, shift);
		public static System.Collections.IEnumerator CheckForRemove(this SharkBait __self) => (System.Collections.IEnumerator)_CheckForRemove757602046.Value.Invoke(__self);

	}

	public static class Private_SharkBait
	{

		private static readonly System.Lazy<StaticFieldAccessor<UnityEngine.Transform>> _raftTransform =
				new System.Lazy<StaticFieldAccessor<UnityEngine.Transform>>(() => StaticFieldAccessor<UnityEngine.Transform>.Create(typeof(SharkBait), "raftTransform"));
		private static readonly System.Lazy<StaticFieldAccessor<float>> _checkTimerMin =
				new System.Lazy<StaticFieldAccessor<float>>(() => StaticFieldAccessor<float>.Create(typeof(SharkBait), "checkTimerMin"));

		public static UnityEngine.Transform GetRaftTransform() => _raftTransform.Value.GetValue();
		public static void SetRaftTransform(UnityEngine.Transform value) => _raftTransform.Value.SetValue(value);
		public static float GetCheckTimerMin() => _checkTimerMin.Value.GetValue();
		public static void SetCheckTimerMin(float value) => _checkTimerMin.Value.SetValue(value);

	}

	public static class PrivateAccessor_SharkBaitThrower
	{

		private static readonly System.Lazy<FieldAccessor<SharkBaitThrower, Item_Base>> _sharkbaitItem =
				new System.Lazy<FieldAccessor<SharkBaitThrower, Item_Base>>(() => FieldAccessor<SharkBaitThrower, Item_Base>.Create("sharkbaitItem"));
		private static readonly System.Lazy<FieldAccessor<SharkBaitThrower, SharkBait>> _sharkBaitPrefab =
				new System.Lazy<FieldAccessor<SharkBaitThrower, SharkBait>>(() => FieldAccessor<SharkBaitThrower, SharkBait>.Create("sharkBaitPrefab"));
		private static readonly System.Lazy<FieldAccessor<SharkBaitThrower, UnityEngine.ParticleSystem>> _waterSplash =
				new System.Lazy<FieldAccessor<SharkBaitThrower, UnityEngine.ParticleSystem>>(() => FieldAccessor<SharkBaitThrower, UnityEngine.ParticleSystem>.Create("waterSplash"));
		private static readonly System.Lazy<FieldAccessor<SharkBaitThrower, Throwable>> _throwable =
				new System.Lazy<FieldAccessor<SharkBaitThrower, Throwable>>(() => FieldAccessor<SharkBaitThrower, Throwable>.Create("throwable"));
		private static readonly System.Lazy<FieldAccessor<SharkBaitThrower, PlayerInventory>> _inventory =
				new System.Lazy<FieldAccessor<SharkBaitThrower, PlayerInventory>>(() => FieldAccessor<SharkBaitThrower, PlayerInventory>.Create("inventory"));
		private static readonly System.Lazy<FieldAccessor<SharkBaitThrower, PlayerAnimator>> _playerAnimator =
				new System.Lazy<FieldAccessor<SharkBaitThrower, PlayerAnimator>>(() => FieldAccessor<SharkBaitThrower, PlayerAnimator>.Create("playerAnimator"));
		private static readonly System.Lazy<FieldAccessor<SharkBaitThrower, Network_Player>> _playerNetwork =
				new System.Lazy<FieldAccessor<SharkBaitThrower, Network_Player>>(() => FieldAccessor<SharkBaitThrower, Network_Player>.Create("playerNetwork"));

		public static Item_Base GetSharkbaitItem(this SharkBaitThrower __self) => _sharkbaitItem.Value.GetValue(__self);
		public static void SetSharkbaitItem(this SharkBaitThrower __self, Item_Base value) => _sharkbaitItem.Value.SetValue(__self, value);
		public static SharkBait GetSharkBaitPrefab(this SharkBaitThrower __self) => _sharkBaitPrefab.Value.GetValue(__self);
		public static void SetSharkBaitPrefab(this SharkBaitThrower __self, SharkBait value) => _sharkBaitPrefab.Value.SetValue(__self, value);
		public static UnityEngine.ParticleSystem GetWaterSplash(this SharkBaitThrower __self) => _waterSplash.Value.GetValue(__self);
		public static void SetWaterSplash(this SharkBaitThrower __self, UnityEngine.ParticleSystem value) => _waterSplash.Value.SetValue(__self, value);
		public static Throwable GetThrowable(this SharkBaitThrower __self) => _throwable.Value.GetValue(__self);
		public static void SetThrowable(this SharkBaitThrower __self, Throwable value) => _throwable.Value.SetValue(__self, value);
		public static PlayerInventory GetInventory(this SharkBaitThrower __self) => _inventory.Value.GetValue(__self);
		public static void SetInventory(this SharkBaitThrower __self, PlayerInventory value) => _inventory.Value.SetValue(__self, value);
		public static PlayerAnimator GetPlayerAnimator(this SharkBaitThrower __self) => _playerAnimator.Value.GetValue(__self);
		public static void SetPlayerAnimator(this SharkBaitThrower __self, PlayerAnimator value) => _playerAnimator.Value.SetValue(__self, value);
		public static Network_Player GetPlayerNetwork(this SharkBaitThrower __self) => _playerNetwork.Value.GetValue(__self);
		public static void SetPlayerNetwork(this SharkBaitThrower __self, Network_Player value) => _playerNetwork.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<SharkBaitThrower>> _Awake757602046 =
				new System.Lazy<MethodAccessor<SharkBaitThrower>>(() => MethodAccessor<SharkBaitThrower>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<SharkBaitThrower>> _Start757602046 =
				new System.Lazy<MethodAccessor<SharkBaitThrower>>(() => MethodAccessor<SharkBaitThrower>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<SharkBaitThrower>> _Update757602046 =
				new System.Lazy<MethodAccessor<SharkBaitThrower>>(() => MethodAccessor<SharkBaitThrower>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<SharkBaitThrower>> _OnThrow757602046 =
				new System.Lazy<MethodAccessor<SharkBaitThrower>>(() => MethodAccessor<SharkBaitThrower>.Create("OnThrow"));
		private static readonly System.Lazy<MethodAccessor<SharkBaitThrower>> _OnHitWater757602046 =
				new System.Lazy<MethodAccessor<SharkBaitThrower>>(() => MethodAccessor<SharkBaitThrower>.Create("OnHitWater"));
		private static readonly System.Lazy<MethodAccessor<SharkBaitThrower>> _CreateNewThrowable757602046 =
				new System.Lazy<MethodAccessor<SharkBaitThrower>>(() => MethodAccessor<SharkBaitThrower>.Create("CreateNewThrowable"));

		public static void Awake(this SharkBaitThrower __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this SharkBaitThrower __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this SharkBaitThrower __self) => _Update757602046.Value.Invoke(__self);
		public static void OnThrow(this SharkBaitThrower __self) => _OnThrow757602046.Value.Invoke(__self);
		public static void OnHitWater(this SharkBaitThrower __self) => _OnHitWater757602046.Value.Invoke(__self);
		public static void CreateNewThrowable(this SharkBaitThrower __self) => _CreateNewThrowable757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Throwable
	{

		private static readonly System.Lazy<FieldAccessor<Throwable, bool>> _inHand =
				new System.Lazy<FieldAccessor<Throwable, bool>>(() => FieldAccessor<Throwable, bool>.Create("inHand"));
		private static readonly System.Lazy<FieldAccessor<Throwable, bool>> _inWater =
				new System.Lazy<FieldAccessor<Throwable, bool>>(() => FieldAccessor<Throwable, bool>.Create("inWater"));
		private static readonly System.Lazy<FieldAccessor<Throwable, bool>> _canThrow =
				new System.Lazy<FieldAccessor<Throwable, bool>>(() => FieldAccessor<Throwable, bool>.Create("canThrow"));
		private static readonly System.Lazy<FieldAccessor<Throwable, bool>> _isLocked =
				new System.Lazy<FieldAccessor<Throwable, bool>>(() => FieldAccessor<Throwable, bool>.Create("isLocked"));
		private static readonly System.Lazy<FieldAccessor<Throwable, string>> _FMOD_Event_Throw =
				new System.Lazy<FieldAccessor<Throwable, string>>(() => FieldAccessor<Throwable, string>.Create("FMOD_Event_Throw"));
		private static readonly System.Lazy<FieldAccessor<Throwable, string>> _FMOD_Event_WaterHit =
				new System.Lazy<FieldAccessor<Throwable, string>>(() => FieldAccessor<Throwable, string>.Create("FMOD_Event_WaterHit"));
		private static readonly System.Lazy<FieldAccessor<Throwable, string>> _FMOD_Event_Impact =
				new System.Lazy<FieldAccessor<Throwable, string>>(() => FieldAccessor<Throwable, string>.Create("FMOD_Event_Impact"));
		private static readonly System.Lazy<FieldAccessor<Throwable, Network_Player>> _playerNetwork =
				new System.Lazy<FieldAccessor<Throwable, Network_Player>>(() => FieldAccessor<Throwable, Network_Player>.Create("playerNetwork"));
		private static readonly System.Lazy<FieldAccessor<Throwable, CanvasHelper>> _canvas =
				new System.Lazy<FieldAccessor<Throwable, CanvasHelper>>(() => FieldAccessor<Throwable, CanvasHelper>.Create("canvas"));
		private static readonly System.Lazy<FieldAccessor<Throwable, ChargeMeter>> _chargeMeter =
				new System.Lazy<FieldAccessor<Throwable, ChargeMeter>>(() => FieldAccessor<Throwable, ChargeMeter>.Create("chargeMeter"));
		private static readonly System.Lazy<FieldAccessor<Throwable, UnityEngine.Transform>> _raftTransform =
				new System.Lazy<FieldAccessor<Throwable, UnityEngine.Transform>>(() => FieldAccessor<Throwable, UnityEngine.Transform>.Create("raftTransform"));
		private static readonly System.Lazy<FieldAccessor<Throwable, UnityEngine.Transform>> _buoyancyTransform =
				new System.Lazy<FieldAccessor<Throwable, UnityEngine.Transform>>(() => FieldAccessor<Throwable, UnityEngine.Transform>.Create("buoyancyTransform"));
		private static readonly System.Lazy<FieldAccessor<Throwable, UnityEngine.Transform>> _throwableObjectParent =
				new System.Lazy<FieldAccessor<Throwable, UnityEngine.Transform>>(() => FieldAccessor<Throwable, UnityEngine.Transform>.Create("throwableObjectParent"));
		private static readonly System.Lazy<FieldAccessor<Throwable, UnityEngine.Vector3>> _lastThrowForce =
				new System.Lazy<FieldAccessor<Throwable, UnityEngine.Vector3>>(() => FieldAccessor<Throwable, UnityEngine.Vector3>.Create("lastThrowForce"));
		private static readonly System.Lazy<FieldAccessor<Throwable, UnityEngine.Vector3>> _throwableStartPosition =
				new System.Lazy<FieldAccessor<Throwable, UnityEngine.Vector3>>(() => FieldAccessor<Throwable, UnityEngine.Vector3>.Create("throwableStartPosition"));
		private static readonly System.Lazy<FieldAccessor<Throwable, UnityEngine.Vector3>> _throwableStartRotation =
				new System.Lazy<FieldAccessor<Throwable, UnityEngine.Vector3>>(() => FieldAccessor<Throwable, UnityEngine.Vector3>.Create("throwableStartRotation"));
		private static readonly System.Lazy<FieldAccessor<Throwable, UnityEngine.Vector3>> _throwableStartLocalScale =
				new System.Lazy<FieldAccessor<Throwable, UnityEngine.Vector3>>(() => FieldAccessor<Throwable, UnityEngine.Vector3>.Create("throwableStartLocalScale"));
		private static readonly System.Lazy<FieldAccessor<Throwable, UnityEngine.Vector3>> _networkPosition =
				new System.Lazy<FieldAccessor<Throwable, UnityEngine.Vector3>>(() => FieldAccessor<Throwable, UnityEngine.Vector3>.Create("networkPosition"));
		private static readonly System.Lazy<FieldAccessor<Throwable, bool>> _initialized =
				new System.Lazy<FieldAccessor<Throwable, bool>>(() => FieldAccessor<Throwable, bool>.Create("initialized"));
		private static readonly System.Lazy<FieldAccessor<Throwable, bool>> _needToReleaseBeforeThrow =
				new System.Lazy<FieldAccessor<Throwable, bool>>(() => FieldAccessor<Throwable, bool>.Create("needToReleaseBeforeThrow"));

		public static bool GetInHand(this Throwable __self) => _inHand.Value.GetValue(__self);
		public static void SetInHand(this Throwable __self, bool value) => _inHand.Value.SetValue(__self, value);
		public static bool GetInWater(this Throwable __self) => _inWater.Value.GetValue(__self);
		public static void SetInWater(this Throwable __self, bool value) => _inWater.Value.SetValue(__self, value);
		public static bool GetCanThrow(this Throwable __self) => _canThrow.Value.GetValue(__self);
		public static void SetCanThrow(this Throwable __self, bool value) => _canThrow.Value.SetValue(__self, value);
		public static bool GetIsLocked(this Throwable __self) => _isLocked.Value.GetValue(__self);
		public static void SetIsLocked(this Throwable __self, bool value) => _isLocked.Value.SetValue(__self, value);
		public static string GetFMOD_Event_Throw(this Throwable __self) => _FMOD_Event_Throw.Value.GetValue(__self);
		public static void SetFMOD_Event_Throw(this Throwable __self, string value) => _FMOD_Event_Throw.Value.SetValue(__self, value);
		public static string GetFMOD_Event_WaterHit(this Throwable __self) => _FMOD_Event_WaterHit.Value.GetValue(__self);
		public static void SetFMOD_Event_WaterHit(this Throwable __self, string value) => _FMOD_Event_WaterHit.Value.SetValue(__self, value);
		public static string GetFMOD_Event_Impact(this Throwable __self) => _FMOD_Event_Impact.Value.GetValue(__self);
		public static void SetFMOD_Event_Impact(this Throwable __self, string value) => _FMOD_Event_Impact.Value.SetValue(__self, value);
		public static Network_Player GetPlayerNetwork(this Throwable __self) => _playerNetwork.Value.GetValue(__self);
		public static void SetPlayerNetwork(this Throwable __self, Network_Player value) => _playerNetwork.Value.SetValue(__self, value);
		public static CanvasHelper GetCanvas(this Throwable __self) => _canvas.Value.GetValue(__self);
		public static void SetCanvas(this Throwable __self, CanvasHelper value) => _canvas.Value.SetValue(__self, value);
		public static ChargeMeter GetChargeMeter(this Throwable __self) => _chargeMeter.Value.GetValue(__self);
		public static void SetChargeMeter(this Throwable __self, ChargeMeter value) => _chargeMeter.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetRaftTransform(this Throwable __self) => _raftTransform.Value.GetValue(__self);
		public static void SetRaftTransform(this Throwable __self, UnityEngine.Transform value) => _raftTransform.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetBuoyancyTransform(this Throwable __self) => _buoyancyTransform.Value.GetValue(__self);
		public static void SetBuoyancyTransform(this Throwable __self, UnityEngine.Transform value) => _buoyancyTransform.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetThrowableObjectParent(this Throwable __self) => _throwableObjectParent.Value.GetValue(__self);
		public static void SetThrowableObjectParent(this Throwable __self, UnityEngine.Transform value) => _throwableObjectParent.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetLastThrowForce(this Throwable __self) => _lastThrowForce.Value.GetValue(__self);
		public static void SetLastThrowForce(this Throwable __self, UnityEngine.Vector3 value) => _lastThrowForce.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetThrowableStartPosition(this Throwable __self) => _throwableStartPosition.Value.GetValue(__self);
		public static void SetThrowableStartPosition(this Throwable __self, UnityEngine.Vector3 value) => _throwableStartPosition.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetThrowableStartRotation(this Throwable __self) => _throwableStartRotation.Value.GetValue(__self);
		public static void SetThrowableStartRotation(this Throwable __self, UnityEngine.Vector3 value) => _throwableStartRotation.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetThrowableStartLocalScale(this Throwable __self) => _throwableStartLocalScale.Value.GetValue(__self);
		public static void SetThrowableStartLocalScale(this Throwable __self, UnityEngine.Vector3 value) => _throwableStartLocalScale.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetNetworkPosition(this Throwable __self) => _networkPosition.Value.GetValue(__self);
		public static void SetNetworkPosition(this Throwable __self, UnityEngine.Vector3 value) => _networkPosition.Value.SetValue(__self, value);
		public static bool GetInitialized(this Throwable __self) => _initialized.Value.GetValue(__self);
		public static void SetInitialized(this Throwable __self, bool value) => _initialized.Value.SetValue(__self, value);
		public static bool GetNeedToReleaseBeforeThrow(this Throwable __self) => _needToReleaseBeforeThrow.Value.GetValue(__self);
		public static void SetNeedToReleaseBeforeThrow(this Throwable __self, bool value) => _needToReleaseBeforeThrow.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Throwable>> _Awake757602046 =
				new System.Lazy<MethodAccessor<Throwable>>(() => MethodAccessor<Throwable>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<Throwable>> _Start757602046 =
				new System.Lazy<MethodAccessor<Throwable>>(() => MethodAccessor<Throwable>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<Throwable>> _Update757602046 =
				new System.Lazy<MethodAccessor<Throwable>>(() => MethodAccessor<Throwable>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<Throwable>> _HandleRemoteClient757602046 =
				new System.Lazy<MethodAccessor<Throwable>>(() => MethodAccessor<Throwable>.Create("HandleRemoteClient"));
		private static readonly System.Lazy<MethodAccessor<Throwable>> _HandleLocalClient757602046 =
				new System.Lazy<MethodAccessor<Throwable>>(() => MethodAccessor<Throwable>.Create("HandleLocalClient"));
		private static readonly System.Lazy<MethodAccessor<Throwable>> _Initialize757602046 =
				new System.Lazy<MethodAccessor<Throwable>>(() => MethodAccessor<Throwable>.Create("Initialize"));

		public static void Awake(this Throwable __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this Throwable __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this Throwable __self) => _Update757602046.Value.Invoke(__self);
		public static void HandleRemoteClient(this Throwable __self) => _HandleRemoteClient757602046.Value.Invoke(__self);
		public static void HandleLocalClient(this Throwable __self) => _HandleLocalClient757602046.Value.Invoke(__self);
		public static void Initialize(this Throwable __self) => _Initialize757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Message_Throw
	{

		private static readonly System.Lazy<FieldAccessor<Message_Throw, float>> _xForce =
				new System.Lazy<FieldAccessor<Message_Throw, float>>(() => FieldAccessor<Message_Throw, float>.Create("xForce"));
		private static readonly System.Lazy<FieldAccessor<Message_Throw, float>> _yForce =
				new System.Lazy<FieldAccessor<Message_Throw, float>>(() => FieldAccessor<Message_Throw, float>.Create("yForce"));
		private static readonly System.Lazy<FieldAccessor<Message_Throw, float>> _zForce =
				new System.Lazy<FieldAccessor<Message_Throw, float>>(() => FieldAccessor<Message_Throw, float>.Create("zForce"));

		public static float GetXForce(this Message_Throw __self) => _xForce.Value.GetValue(__self);
		public static void SetXForce(this Message_Throw __self, float value) => _xForce.Value.SetValue(__self, value);
		public static float GetYForce(this Message_Throw __self) => _yForce.Value.GetValue(__self);
		public static void SetYForce(this Message_Throw __self, float value) => _yForce.Value.SetValue(__self, value);
		public static float GetZForce(this Message_Throw __self) => _zForce.Value.GetValue(__self);
		public static void SetZForce(this Message_Throw __self, float value) => _zForce.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_ThrowableImpactCheck
	{

		private static readonly System.Lazy<FieldAccessor<ThrowableImpactCheck, int>> _lastInstanceIDImpact =
				new System.Lazy<FieldAccessor<ThrowableImpactCheck, int>>(() => FieldAccessor<ThrowableImpactCheck, int>.Create("lastInstanceIDImpact"));

		public static int GetLastInstanceIDImpact(this ThrowableImpactCheck __self) => _lastInstanceIDImpact.Value.GetValue(__self);
		public static void SetLastInstanceIDImpact(this ThrowableImpactCheck __self, int value) => _lastInstanceIDImpact.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<ThrowableImpactCheck>> _OnCollisionEnter3430762572 =
				new System.Lazy<MethodAccessor<ThrowableImpactCheck>>(() => MethodAccessor<ThrowableImpactCheck>.Create("OnCollisionEnter", typeof(UnityEngine.Collision)));

		public static void OnCollisionEnter(this ThrowableImpactCheck __self, UnityEngine.Collision collision) => _OnCollisionEnter3430762572.Value.Invoke(__self, collision);

	}

	public static class PrivateAccessor_Throwable_Object
	{

		private static readonly System.Lazy<FieldAccessor<Throwable_Object, UnityEngine.Rigidbody>> _body =
				new System.Lazy<FieldAccessor<Throwable_Object, UnityEngine.Rigidbody>>(() => FieldAccessor<Throwable_Object, UnityEngine.Rigidbody>.Create("body"));
		private static readonly System.Lazy<FieldAccessor<Throwable_Object, UnityEngine.Collider>> _physicsCollider =
				new System.Lazy<FieldAccessor<Throwable_Object, UnityEngine.Collider>>(() => FieldAccessor<Throwable_Object, UnityEngine.Collider>.Create("physicsCollider"));
		private static readonly System.Lazy<FieldAccessor<Throwable_Object, bool>> _disablePhysicsColliderOnCollision =
				new System.Lazy<FieldAccessor<Throwable_Object, bool>>(() => FieldAccessor<Throwable_Object, bool>.Create("disablePhysicsColliderOnCollision"));
		private static readonly System.Lazy<FieldAccessor<Throwable_Object, bool>> _disableRigidBodyOnCollision =
				new System.Lazy<FieldAccessor<Throwable_Object, bool>>(() => FieldAccessor<Throwable_Object, bool>.Create("disableRigidBodyOnCollision"));
		private static readonly System.Lazy<FieldAccessor<Throwable_Object, bool>> _rotateBodyWithVelocity =
				new System.Lazy<FieldAccessor<Throwable_Object, bool>>(() => FieldAccessor<Throwable_Object, bool>.Create("rotateBodyWithVelocity"));
		private static readonly System.Lazy<FieldAccessor<Throwable_Object, bool>> _moveBodyWithTranslation =
				new System.Lazy<FieldAccessor<Throwable_Object, bool>>(() => FieldAccessor<Throwable_Object, bool>.Create("moveBodyWithTranslation"));
		private static readonly System.Lazy<FieldAccessor<Throwable_Object, float>> _waterDrag =
				new System.Lazy<FieldAccessor<Throwable_Object, float>>(() => FieldAccessor<Throwable_Object, float>.Create("waterDrag"));
		private static readonly System.Lazy<FieldAccessor<Throwable_Object, WaterFloatSemih2>> _waterFloat =
				new System.Lazy<FieldAccessor<Throwable_Object, WaterFloatSemih2>>(() => FieldAccessor<Throwable_Object, WaterFloatSemih2>.Create("waterFloat"));
		private static readonly System.Lazy<FieldAccessor<Throwable_Object, UnityEngine.ParticleSystem>> _underWaterParticles =
				new System.Lazy<FieldAccessor<Throwable_Object, UnityEngine.ParticleSystem>>(() => FieldAccessor<Throwable_Object, UnityEngine.ParticleSystem>.Create("underWaterParticles"));
		private static readonly System.Lazy<FieldAccessor<Throwable_Object, string>> _eventRef_hitWaterSound =
				new System.Lazy<FieldAccessor<Throwable_Object, string>>(() => FieldAccessor<Throwable_Object, string>.Create("eventRef_hitWaterSound"));
		private static readonly System.Lazy<FieldAccessor<Throwable_Object, System.Collections.IEnumerator>> _lateWaterCoroutine =
				new System.Lazy<FieldAccessor<Throwable_Object, System.Collections.IEnumerator>>(() => FieldAccessor<Throwable_Object, System.Collections.IEnumerator>.Create("lateWaterCoroutine"));
		private static readonly System.Lazy<FieldAccessor<Throwable_Object, bool>> _hasBeenOverWater =
				new System.Lazy<FieldAccessor<Throwable_Object, bool>>(() => FieldAccessor<Throwable_Object, bool>.Create("hasBeenOverWater"));
		private static readonly System.Lazy<FieldAccessor<Throwable_Object, bool>> _underWater =
				new System.Lazy<FieldAccessor<Throwable_Object, bool>>(() => FieldAccessor<Throwable_Object, bool>.Create("underWater"));
		private static readonly System.Lazy<FieldAccessor<Throwable_Object, bool>> _sink =
				new System.Lazy<FieldAccessor<Throwable_Object, bool>>(() => FieldAccessor<Throwable_Object, bool>.Create("sink"));
		private static readonly System.Lazy<FieldAccessor<Throwable_Object, string>> _eventRef_hitSound =
				new System.Lazy<FieldAccessor<Throwable_Object, string>>(() => FieldAccessor<Throwable_Object, string>.Create("eventRef_hitSound"));
		private static readonly System.Lazy<FieldAccessor<Throwable_Object, FMODUnity.StudioEventEmitter>> _eventEmitter_projectileFly =
				new System.Lazy<FieldAccessor<Throwable_Object, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<Throwable_Object, FMODUnity.StudioEventEmitter>.Create("eventEmitter_projectileFly"));
		private static readonly System.Lazy<FieldAccessor<Throwable_Object, Interval_Float>> _flyVelocityInterval =
				new System.Lazy<FieldAccessor<Throwable_Object, Interval_Float>>(() => FieldAccessor<Throwable_Object, Interval_Float>.Create("flyVelocityInterval"));
		private static readonly System.Lazy<FieldAccessor<Throwable_Object, float>> _flyVelocityMagnifier =
				new System.Lazy<FieldAccessor<Throwable_Object, float>>(() => FieldAccessor<Throwable_Object, float>.Create("flyVelocityMagnifier"));
		private static readonly System.Lazy<FieldAccessor<Throwable_Object, ThrowableComponent>> _throwableComponent =
				new System.Lazy<FieldAccessor<Throwable_Object, ThrowableComponent>>(() => FieldAccessor<Throwable_Object, ThrowableComponent>.Create("throwableComponent"));
		private static readonly System.Lazy<FieldAccessor<Throwable_Object, float>> _defaultDrag =
				new System.Lazy<FieldAccessor<Throwable_Object, float>>(() => FieldAccessor<Throwable_Object, float>.Create("defaultDrag"));
		private static readonly System.Lazy<FieldAccessor<Throwable_Object, bool>> _hitSomething =
				new System.Lazy<FieldAccessor<Throwable_Object, bool>>(() => FieldAccessor<Throwable_Object, bool>.Create("hitSomething"));

		public static UnityEngine.Rigidbody GetBody(this Throwable_Object __self) => _body.Value.GetValue(__self);
		public static void SetBody(this Throwable_Object __self, UnityEngine.Rigidbody value) => _body.Value.SetValue(__self, value);
		public static UnityEngine.Collider GetPhysicsCollider(this Throwable_Object __self) => _physicsCollider.Value.GetValue(__self);
		public static void SetPhysicsCollider(this Throwable_Object __self, UnityEngine.Collider value) => _physicsCollider.Value.SetValue(__self, value);
		public static bool GetDisablePhysicsColliderOnCollision(this Throwable_Object __self) => _disablePhysicsColliderOnCollision.Value.GetValue(__self);
		public static void SetDisablePhysicsColliderOnCollision(this Throwable_Object __self, bool value) => _disablePhysicsColliderOnCollision.Value.SetValue(__self, value);
		public static bool GetDisableRigidBodyOnCollision(this Throwable_Object __self) => _disableRigidBodyOnCollision.Value.GetValue(__self);
		public static void SetDisableRigidBodyOnCollision(this Throwable_Object __self, bool value) => _disableRigidBodyOnCollision.Value.SetValue(__self, value);
		public static bool GetRotateBodyWithVelocity(this Throwable_Object __self) => _rotateBodyWithVelocity.Value.GetValue(__self);
		public static void SetRotateBodyWithVelocity(this Throwable_Object __self, bool value) => _rotateBodyWithVelocity.Value.SetValue(__self, value);
		public static bool GetMoveBodyWithTranslation(this Throwable_Object __self) => _moveBodyWithTranslation.Value.GetValue(__self);
		public static void SetMoveBodyWithTranslation(this Throwable_Object __self, bool value) => _moveBodyWithTranslation.Value.SetValue(__self, value);
		public static float GetWaterDrag(this Throwable_Object __self) => _waterDrag.Value.GetValue(__self);
		public static void SetWaterDrag(this Throwable_Object __self, float value) => _waterDrag.Value.SetValue(__self, value);
		public static WaterFloatSemih2 GetWaterFloat(this Throwable_Object __self) => _waterFloat.Value.GetValue(__self);
		public static void SetWaterFloat(this Throwable_Object __self, WaterFloatSemih2 value) => _waterFloat.Value.SetValue(__self, value);
		public static UnityEngine.ParticleSystem GetUnderWaterParticles(this Throwable_Object __self) => _underWaterParticles.Value.GetValue(__self);
		public static void SetUnderWaterParticles(this Throwable_Object __self, UnityEngine.ParticleSystem value) => _underWaterParticles.Value.SetValue(__self, value);
		public static string GetEventRef_hitWaterSound(this Throwable_Object __self) => _eventRef_hitWaterSound.Value.GetValue(__self);
		public static void SetEventRef_hitWaterSound(this Throwable_Object __self, string value) => _eventRef_hitWaterSound.Value.SetValue(__self, value);
		public static System.Collections.IEnumerator GetLateWaterCoroutine(this Throwable_Object __self) => _lateWaterCoroutine.Value.GetValue(__self);
		public static void SetLateWaterCoroutine(this Throwable_Object __self, System.Collections.IEnumerator value) => _lateWaterCoroutine.Value.SetValue(__self, value);
		public static bool GetHasBeenOverWater(this Throwable_Object __self) => _hasBeenOverWater.Value.GetValue(__self);
		public static void SetHasBeenOverWater(this Throwable_Object __self, bool value) => _hasBeenOverWater.Value.SetValue(__self, value);
		public static bool GetUnderWater(this Throwable_Object __self) => _underWater.Value.GetValue(__self);
		public static void SetUnderWater(this Throwable_Object __self, bool value) => _underWater.Value.SetValue(__self, value);
		public static bool GetSink(this Throwable_Object __self) => _sink.Value.GetValue(__self);
		public static void SetSink(this Throwable_Object __self, bool value) => _sink.Value.SetValue(__self, value);
		public static string GetEventRef_hitSound(this Throwable_Object __self) => _eventRef_hitSound.Value.GetValue(__self);
		public static void SetEventRef_hitSound(this Throwable_Object __self, string value) => _eventRef_hitSound.Value.SetValue(__self, value);
		public static FMODUnity.StudioEventEmitter GetEventEmitter_projectileFly(this Throwable_Object __self) => _eventEmitter_projectileFly.Value.GetValue(__self);
		public static void SetEventEmitter_projectileFly(this Throwable_Object __self, FMODUnity.StudioEventEmitter value) => _eventEmitter_projectileFly.Value.SetValue(__self, value);
		public static Interval_Float GetFlyVelocityInterval(this Throwable_Object __self) => _flyVelocityInterval.Value.GetValue(__self);
		public static void SetFlyVelocityInterval(this Throwable_Object __self, Interval_Float value) => _flyVelocityInterval.Value.SetValue(__self, value);
		public static float GetFlyVelocityMagnifier(this Throwable_Object __self) => _flyVelocityMagnifier.Value.GetValue(__self);
		public static void SetFlyVelocityMagnifier(this Throwable_Object __self, float value) => _flyVelocityMagnifier.Value.SetValue(__self, value);
		public static ThrowableComponent GetThrowableComponent(this Throwable_Object __self) => _throwableComponent.Value.GetValue(__self);
		public static void SetThrowableComponent(this Throwable_Object __self, ThrowableComponent value) => _throwableComponent.Value.SetValue(__self, value);
		public static float GetDefaultDrag(this Throwable_Object __self) => _defaultDrag.Value.GetValue(__self);
		public static void SetDefaultDrag(this Throwable_Object __self, float value) => _defaultDrag.Value.SetValue(__self, value);
		public static bool GetHitSomething(this Throwable_Object __self) => _hitSomething.Value.GetValue(__self);
		public static void SetHitSomething(this Throwable_Object __self, bool value) => _hitSomething.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Throwable_Object>> _Update757602046 =
				new System.Lazy<MethodAccessor<Throwable_Object>>(() => MethodAccessor<Throwable_Object>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<Throwable_Object>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<Throwable_Object>>(() => MethodAccessor<Throwable_Object>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<Throwable_Object>> _OnCollisionEnter3430762572 =
				new System.Lazy<MethodAccessor<Throwable_Object>>(() => MethodAccessor<Throwable_Object>.Create("OnCollisionEnter", typeof(UnityEngine.Collision)));
		private static readonly System.Lazy<MethodAccessor<Throwable_Object>> _OnCollisionEvent2778293322 =
				new System.Lazy<MethodAccessor<Throwable_Object>>(() => MethodAccessor<Throwable_Object>.Create("OnCollisionEvent", typeof(UnityEngine.Collision), typeof(Network_Entity)));
		private static readonly System.Lazy<MethodAccessor<Throwable_Object>> _CallOnHitWater757602046 =
				new System.Lazy<MethodAccessor<Throwable_Object>>(() => MethodAccessor<Throwable_Object>.Create("CallOnHitWater"));
		private static readonly System.Lazy<MethodAccessor<Throwable_Object>> _HandleVelocitySound757602046 =
				new System.Lazy<MethodAccessor<Throwable_Object>>(() => MethodAccessor<Throwable_Object>.Create("HandleVelocitySound"));
		private static readonly System.Lazy<MethodAccessor<Throwable_Object>> _HandleWaterBehaviour757602046 =
				new System.Lazy<MethodAccessor<Throwable_Object>>(() => MethodAccessor<Throwable_Object>.Create("HandleWaterBehaviour"));
		private static readonly System.Lazy<MethodAccessor<Throwable_Object>> _SinkInWater757602046 =
				new System.Lazy<MethodAccessor<Throwable_Object>>(() => MethodAccessor<Throwable_Object>.Create("SinkInWater"));
		private static readonly System.Lazy<MethodAccessor<Throwable_Object>> _LaterWaterHit757602046 =
				new System.Lazy<MethodAccessor<Throwable_Object>>(() => MethodAccessor<Throwable_Object>.Create("LaterWaterHit"));

		public static void Update(this Throwable_Object __self) => _Update757602046.Value.Invoke(__self);
		public static void OnDestroy(this Throwable_Object __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void OnCollisionEnter(this Throwable_Object __self, UnityEngine.Collision collision) => _OnCollisionEnter3430762572.Value.Invoke(__self, collision);
		public static void OnCollisionEvent(this Throwable_Object __self, UnityEngine.Collision collision, Network_Entity entity) => _OnCollisionEvent2778293322.Value.Invoke(__self, collision, entity);
		public static void CallOnHitWater(this Throwable_Object __self) => _CallOnHitWater757602046.Value.Invoke(__self);
		public static void HandleVelocitySound(this Throwable_Object __self) => _HandleVelocitySound757602046.Value.Invoke(__self);
		public static void HandleWaterBehaviour(this Throwable_Object __self) => _HandleWaterBehaviour757602046.Value.Invoke(__self);
		public static void SinkInWater(this Throwable_Object __self) => _SinkInWater757602046.Value.Invoke(__self);
		public static System.Collections.IEnumerator LaterWaterHit(this Throwable_Object __self) => (System.Collections.IEnumerator)_LaterWaterHit757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Throwable_Stone
	{

		private static readonly System.Lazy<FieldAccessor<Throwable_Stone, float>> _damage =
				new System.Lazy<FieldAccessor<Throwable_Stone, float>>(() => FieldAccessor<Throwable_Stone, float>.Create("damage"));
		private static readonly System.Lazy<FieldAccessor<Throwable_Stone, UnityEngine.ParticleSystem>> _particlesBreak =
				new System.Lazy<FieldAccessor<Throwable_Stone, UnityEngine.ParticleSystem>>(() => FieldAccessor<Throwable_Stone, UnityEngine.ParticleSystem>.Create("particlesBreak"));

		public static float GetDamage(this Throwable_Stone __self) => _damage.Value.GetValue(__self);
		public static void SetDamage(this Throwable_Stone __self, float value) => _damage.Value.SetValue(__self, value);
		public static UnityEngine.ParticleSystem GetParticlesBreak(this Throwable_Stone __self) => _particlesBreak.Value.GetValue(__self);
		public static void SetParticlesBreak(this Throwable_Stone __self, UnityEngine.ParticleSystem value) => _particlesBreak.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Throwable_Stone>> _OnCollisionEvent2778293322 =
				new System.Lazy<MethodAccessor<Throwable_Stone>>(() => MethodAccessor<Throwable_Stone>.Create("OnCollisionEvent", typeof(UnityEngine.Collision), typeof(Network_Entity)));

		public static void OnCollisionEvent(this Throwable_Stone __self, UnityEngine.Collision collision, Network_Entity entity) => _OnCollisionEvent2778293322.Value.Invoke(__self, collision, entity);

	}

	public static class PrivateAccessor_Arrow
	{

		private static readonly System.Lazy<FieldAccessor<Arrow, float>> _damage =
				new System.Lazy<FieldAccessor<Arrow, float>>(() => FieldAccessor<Arrow, float>.Create("damage"));
		private static readonly System.Lazy<FieldAccessor<Arrow, UnityEngine.TrailRenderer>> _trailRenderer =
				new System.Lazy<FieldAccessor<Arrow, UnityEngine.TrailRenderer>>(() => FieldAccessor<Arrow, UnityEngine.TrailRenderer>.Create("trailRenderer"));
		private static readonly System.Lazy<FieldAccessor<Arrow, string>> _eventRef_hitMarker =
				new System.Lazy<FieldAccessor<Arrow, string>>(() => FieldAccessor<Arrow, string>.Create("eventRef_hitMarker"));
		private static readonly System.Lazy<FieldAccessor<Arrow, string>> _eventRef_hitInvurnerable =
				new System.Lazy<FieldAccessor<Arrow, string>>(() => FieldAccessor<Arrow, string>.Create("eventRef_hitInvurnerable"));
		private static readonly System.Lazy<FieldAccessor<Arrow, bool>> _isExpended =
				new System.Lazy<FieldAccessor<Arrow, bool>>(() => FieldAccessor<Arrow, bool>.Create("isExpended"));
		private static readonly System.Lazy<FieldAccessor<Arrow, int>> _maxInvurnabilityHits =
				new System.Lazy<FieldAccessor<Arrow, int>>(() => FieldAccessor<Arrow, int>.Create("maxInvurnabilityHits"));
		private static readonly System.Lazy<FieldAccessor<Arrow, int>> _invurnabilityHits =
				new System.Lazy<FieldAccessor<Arrow, int>>(() => FieldAccessor<Arrow, int>.Create("invurnabilityHits"));

		public static float GetDamage(this Arrow __self) => _damage.Value.GetValue(__self);
		public static void SetDamage(this Arrow __self, float value) => _damage.Value.SetValue(__self, value);
		public static UnityEngine.TrailRenderer GetTrailRenderer(this Arrow __self) => _trailRenderer.Value.GetValue(__self);
		public static void SetTrailRenderer(this Arrow __self, UnityEngine.TrailRenderer value) => _trailRenderer.Value.SetValue(__self, value);
		public static string GetEventRef_hitMarker(this Arrow __self) => _eventRef_hitMarker.Value.GetValue(__self);
		public static void SetEventRef_hitMarker(this Arrow __self, string value) => _eventRef_hitMarker.Value.SetValue(__self, value);
		public static string GetEventRef_hitInvurnerable(this Arrow __self) => _eventRef_hitInvurnerable.Value.GetValue(__self);
		public static void SetEventRef_hitInvurnerable(this Arrow __self, string value) => _eventRef_hitInvurnerable.Value.SetValue(__self, value);
		public static bool GetIsExpended(this Arrow __self) => _isExpended.Value.GetValue(__self);
		public static void SetIsExpended(this Arrow __self, bool value) => _isExpended.Value.SetValue(__self, value);
		public static int GetMaxInvurnabilityHits(this Arrow __self) => _maxInvurnabilityHits.Value.GetValue(__self);
		public static void SetMaxInvurnabilityHits(this Arrow __self, int value) => _maxInvurnabilityHits.Value.SetValue(__self, value);
		public static int GetInvurnabilityHits(this Arrow __self) => _invurnabilityHits.Value.GetValue(__self);
		public static void SetInvurnabilityHits(this Arrow __self, int value) => _invurnabilityHits.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Arrow>> _OnCollisionEvent2778293322 =
				new System.Lazy<MethodAccessor<Arrow>>(() => MethodAccessor<Arrow>.Create("OnCollisionEvent", typeof(UnityEngine.Collision), typeof(Network_Entity)));
		private static readonly System.Lazy<MethodAccessor<Arrow>> _Update757602046 =
				new System.Lazy<MethodAccessor<Arrow>>(() => MethodAccessor<Arrow>.Create("Update"));

		public static void OnCollisionEvent(this Arrow __self, UnityEngine.Collision collision, Network_Entity entity) => _OnCollisionEvent2778293322.Value.Invoke(__self, collision, entity);
		public static void Update(this Arrow __self) => _Update757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Binoculars
	{

		private static readonly System.Lazy<FieldAccessor<Binoculars, float>> _activeFOV =
				new System.Lazy<FieldAccessor<Binoculars, float>>(() => FieldAccessor<Binoculars, float>.Create("activeFOV"));
		private static readonly System.Lazy<FieldAccessor<Binoculars, float>> _minFOV =
				new System.Lazy<FieldAccessor<Binoculars, float>>(() => FieldAccessor<Binoculars, float>.Create("minFOV"));
		private static readonly System.Lazy<FieldAccessor<Binoculars, float>> _zoomAmount =
				new System.Lazy<FieldAccessor<Binoculars, float>>(() => FieldAccessor<Binoculars, float>.Create("zoomAmount"));
		private static readonly System.Lazy<FieldAccessor<Binoculars, float>> _zoomSpeed =
				new System.Lazy<FieldAccessor<Binoculars, float>>(() => FieldAccessor<Binoculars, float>.Create("zoomSpeed"));
		private static readonly System.Lazy<FieldAccessor<Binoculars, UnityEngine.MeshRenderer>> _binocularModel =
				new System.Lazy<FieldAccessor<Binoculars, UnityEngine.MeshRenderer>>(() => FieldAccessor<Binoculars, UnityEngine.MeshRenderer>.Create("binocularModel"));
		private static readonly System.Lazy<FieldAccessor<Binoculars, float>> _fadeSpeed =
				new System.Lazy<FieldAccessor<Binoculars, float>>(() => FieldAccessor<Binoculars, float>.Create("fadeSpeed"));
		private static readonly System.Lazy<FieldAccessor<Binoculars, float>> _sensitivityMultiplier =
				new System.Lazy<FieldAccessor<Binoculars, float>>(() => FieldAccessor<Binoculars, float>.Create("sensitivityMultiplier"));
		private static readonly System.Lazy<FieldAccessor<Binoculars, CanvasHelper>> _canvas =
				new System.Lazy<FieldAccessor<Binoculars, CanvasHelper>>(() => FieldAccessor<Binoculars, CanvasHelper>.Create("canvas"));
		private static readonly System.Lazy<FieldAccessor<Binoculars, Settings>> _settings =
				new System.Lazy<FieldAccessor<Binoculars, Settings>>(() => FieldAccessor<Binoculars, Settings>.Create("settings"));
		private static readonly System.Lazy<FieldAccessor<Binoculars, float>> _defaultFOV =
				new System.Lazy<FieldAccessor<Binoculars, float>>(() => FieldAccessor<Binoculars, float>.Create("defaultFOV"));
		private static readonly System.Lazy<FieldAccessor<Binoculars, float>> _targetFOV =
				new System.Lazy<FieldAccessor<Binoculars, float>>(() => FieldAccessor<Binoculars, float>.Create("targetFOV"));
		private static readonly System.Lazy<FieldAccessor<Binoculars, float>> _maxFOV =
				new System.Lazy<FieldAccessor<Binoculars, float>>(() => FieldAccessor<Binoculars, float>.Create("maxFOV"));
		private static readonly System.Lazy<FieldAccessor<Binoculars, bool>> _active =
				new System.Lazy<FieldAccessor<Binoculars, bool>>(() => FieldAccessor<Binoculars, bool>.Create("active"));
		private static readonly System.Lazy<FieldAccessor<Binoculars, float>> _defaultMouseSensitivity =
				new System.Lazy<FieldAccessor<Binoculars, float>>(() => FieldAccessor<Binoculars, float>.Create("defaultMouseSensitivity"));

		public static float GetActiveFOV(this Binoculars __self) => _activeFOV.Value.GetValue(__self);
		public static void SetActiveFOV(this Binoculars __self, float value) => _activeFOV.Value.SetValue(__self, value);
		public static float GetMinFOV(this Binoculars __self) => _minFOV.Value.GetValue(__self);
		public static void SetMinFOV(this Binoculars __self, float value) => _minFOV.Value.SetValue(__self, value);
		public static float GetZoomAmount(this Binoculars __self) => _zoomAmount.Value.GetValue(__self);
		public static void SetZoomAmount(this Binoculars __self, float value) => _zoomAmount.Value.SetValue(__self, value);
		public static float GetZoomSpeed(this Binoculars __self) => _zoomSpeed.Value.GetValue(__self);
		public static void SetZoomSpeed(this Binoculars __self, float value) => _zoomSpeed.Value.SetValue(__self, value);
		public static UnityEngine.MeshRenderer GetBinocularModel(this Binoculars __self) => _binocularModel.Value.GetValue(__self);
		public static void SetBinocularModel(this Binoculars __self, UnityEngine.MeshRenderer value) => _binocularModel.Value.SetValue(__self, value);
		public static float GetFadeSpeed(this Binoculars __self) => _fadeSpeed.Value.GetValue(__self);
		public static void SetFadeSpeed(this Binoculars __self, float value) => _fadeSpeed.Value.SetValue(__self, value);
		public static float GetSensitivityMultiplier(this Binoculars __self) => _sensitivityMultiplier.Value.GetValue(__self);
		public static void SetSensitivityMultiplier(this Binoculars __self, float value) => _sensitivityMultiplier.Value.SetValue(__self, value);
		public static CanvasHelper GetCanvas(this Binoculars __self) => _canvas.Value.GetValue(__self);
		public static void SetCanvas(this Binoculars __self, CanvasHelper value) => _canvas.Value.SetValue(__self, value);
		public static Settings GetSettings(this Binoculars __self) => _settings.Value.GetValue(__self);
		public static void SetSettings(this Binoculars __self, Settings value) => _settings.Value.SetValue(__self, value);
		public static float GetDefaultFOV(this Binoculars __self) => _defaultFOV.Value.GetValue(__self);
		public static void SetDefaultFOV(this Binoculars __self, float value) => _defaultFOV.Value.SetValue(__self, value);
		public static float GetTargetFOV(this Binoculars __self) => _targetFOV.Value.GetValue(__self);
		public static void SetTargetFOV(this Binoculars __self, float value) => _targetFOV.Value.SetValue(__self, value);
		public static float GetMaxFOV(this Binoculars __self) => _maxFOV.Value.GetValue(__self);
		public static void SetMaxFOV(this Binoculars __self, float value) => _maxFOV.Value.SetValue(__self, value);
		public static bool GetActive(this Binoculars __self) => _active.Value.GetValue(__self);
		public static void SetActive(this Binoculars __self, bool value) => _active.Value.SetValue(__self, value);
		public static float GetDefaultMouseSensitivity(this Binoculars __self) => _defaultMouseSensitivity.Value.GetValue(__self);
		public static void SetDefaultMouseSensitivity(this Binoculars __self, float value) => _defaultMouseSensitivity.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Binoculars>> _Start757602046 =
				new System.Lazy<MethodAccessor<Binoculars>>(() => MethodAccessor<Binoculars>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<Binoculars>> _Update757602046 =
				new System.Lazy<MethodAccessor<Binoculars>>(() => MethodAccessor<Binoculars>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<Binoculars>> _OnToolDeSelect757602046 =
				new System.Lazy<MethodAccessor<Binoculars>>(() => MethodAccessor<Binoculars>.Create("OnToolDeSelect"));
		private static readonly System.Lazy<MethodAccessor<Binoculars>> _ResetBinoculars757602046 =
				new System.Lazy<MethodAccessor<Binoculars>>(() => MethodAccessor<Binoculars>.Create("ResetBinoculars"));
		private static readonly System.Lazy<MethodAccessor<Binoculars>> _SetState3450040886 =
				new System.Lazy<MethodAccessor<Binoculars>>(() => MethodAccessor<Binoculars>.Create("SetState", typeof(bool)));
		private static readonly System.Lazy<MethodAccessor<Binoculars>> _SetRenderState3450040886 =
				new System.Lazy<MethodAccessor<Binoculars>>(() => MethodAccessor<Binoculars>.Create("SetRenderState", typeof(bool)));
		private static readonly System.Lazy<MethodAccessor<Binoculars>> _Activate757602046 =
				new System.Lazy<MethodAccessor<Binoculars>>(() => MethodAccessor<Binoculars>.Create("Activate"));
		private static readonly System.Lazy<MethodAccessor<Binoculars>> _Deactivate757602046 =
				new System.Lazy<MethodAccessor<Binoculars>>(() => MethodAccessor<Binoculars>.Create("Deactivate"));

		public static void Start(this Binoculars __self) => _Start757602046.Value.Invoke(__self);
		public static bool Update(this Binoculars __self) => (bool)_Update757602046.Value.Invoke(__self);
		public static void OnToolDeSelect(this Binoculars __self) => _OnToolDeSelect757602046.Value.Invoke(__self);
		public static void ResetBinoculars(this Binoculars __self) => _ResetBinoculars757602046.Value.Invoke(__self);
		public static void SetState(this Binoculars __self, bool state) => _SetState3450040886.Value.Invoke(__self, state);
		public static void SetRenderState(this Binoculars __self, bool state) => _SetRenderState3450040886.Value.Invoke(__self, state);
		public static System.Collections.IEnumerator Activate(this Binoculars __self) => (System.Collections.IEnumerator)_Activate757602046.Value.Invoke(__self);
		public static System.Collections.IEnumerator Deactivate(this Binoculars __self) => (System.Collections.IEnumerator)_Deactivate757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Firework
	{

		private static readonly System.Lazy<FieldAccessor<Firework, float>> _initialForce =
				new System.Lazy<FieldAccessor<Firework, float>>(() => FieldAccessor<Firework, float>.Create("initialForce"));
		private static readonly System.Lazy<FieldAccessor<Firework, float>> _constantForce =
				new System.Lazy<FieldAccessor<Firework, float>>(() => FieldAccessor<Firework, float>.Create("constantForce"));
		private static readonly System.Lazy<FieldAccessor<Firework, SO_ColorValue>> _defaultColor =
				new System.Lazy<FieldAccessor<Firework, SO_ColorValue>>(() => FieldAccessor<Firework, SO_ColorValue>.Create("defaultColor"));
		private static readonly System.Lazy<FieldAccessor<Firework, UnityEngine.Collider>> _fireworkCollider =
				new System.Lazy<FieldAccessor<Firework, UnityEngine.Collider>>(() => FieldAccessor<Firework, UnityEngine.Collider>.Create("fireworkCollider"));
		private static readonly System.Lazy<FieldAccessor<Firework, UnityEngine.ParticleSystem[]>> _particleSystemPrefabs =
				new System.Lazy<FieldAccessor<Firework, UnityEngine.ParticleSystem[]>>(() => FieldAccessor<Firework, UnityEngine.ParticleSystem[]>.Create("particleSystemPrefabs"));
		private static readonly System.Lazy<FieldAccessor<Firework, UnityEngine.Transform>> _smokeTrail =
				new System.Lazy<FieldAccessor<Firework, UnityEngine.Transform>>(() => FieldAccessor<Firework, UnityEngine.Transform>.Create("smokeTrail"));
		private static readonly System.Lazy<FieldAccessor<Firework, float>> _damage =
				new System.Lazy<FieldAccessor<Firework, float>>(() => FieldAccessor<Firework, float>.Create("damage"));
		private static readonly System.Lazy<FieldAccessor<Firework, SO_ColorValue>> _currentColor =
				new System.Lazy<FieldAccessor<Firework, SO_ColorValue>>(() => FieldAccessor<Firework, SO_ColorValue>.Create("currentColor"));
		private static readonly System.Lazy<FieldAccessor<Firework, string>> _eventRef_explode =
				new System.Lazy<FieldAccessor<Firework, string>>(() => FieldAccessor<Firework, string>.Create("eventRef_explode"));
		private static readonly System.Lazy<FieldAccessor<Firework, UnityEngine.Rigidbody>> _body =
				new System.Lazy<FieldAccessor<Firework, UnityEngine.Rigidbody>>(() => FieldAccessor<Firework, UnityEngine.Rigidbody>.Create("body"));
		private static readonly System.Lazy<FieldAccessor<Firework, bool>> _exploded =
				new System.Lazy<FieldAccessor<Firework, bool>>(() => FieldAccessor<Firework, bool>.Create("exploded"));
		private static readonly System.Lazy<FieldAccessor<Firework, Raft_Network>> _network =
				new System.Lazy<FieldAccessor<Firework, Raft_Network>>(() => FieldAccessor<Firework, Raft_Network>.Create("network"));

		public static float GetInitialForce(this Firework __self) => _initialForce.Value.GetValue(__self);
		public static void SetInitialForce(this Firework __self, float value) => _initialForce.Value.SetValue(__self, value);
		public static float GetConstantForce(this Firework __self) => _constantForce.Value.GetValue(__self);
		public static void SetConstantForce(this Firework __self, float value) => _constantForce.Value.SetValue(__self, value);
		public static SO_ColorValue GetDefaultColor(this Firework __self) => _defaultColor.Value.GetValue(__self);
		public static void SetDefaultColor(this Firework __self, SO_ColorValue value) => _defaultColor.Value.SetValue(__self, value);
		public static UnityEngine.Collider GetFireworkCollider(this Firework __self) => _fireworkCollider.Value.GetValue(__self);
		public static void SetFireworkCollider(this Firework __self, UnityEngine.Collider value) => _fireworkCollider.Value.SetValue(__self, value);
		public static UnityEngine.ParticleSystem[] GetParticleSystemPrefabs(this Firework __self) => _particleSystemPrefabs.Value.GetValue(__self);
		public static void SetParticleSystemPrefabs(this Firework __self, UnityEngine.ParticleSystem[] value) => _particleSystemPrefabs.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetSmokeTrail(this Firework __self) => _smokeTrail.Value.GetValue(__self);
		public static void SetSmokeTrail(this Firework __self, UnityEngine.Transform value) => _smokeTrail.Value.SetValue(__self, value);
		public static float GetDamage(this Firework __self) => _damage.Value.GetValue(__self);
		public static void SetDamage(this Firework __self, float value) => _damage.Value.SetValue(__self, value);
		public static SO_ColorValue GetCurrentColor(this Firework __self) => _currentColor.Value.GetValue(__self);
		public static void SetCurrentColor(this Firework __self, SO_ColorValue value) => _currentColor.Value.SetValue(__self, value);
		public static string GetEventRef_explode(this Firework __self) => _eventRef_explode.Value.GetValue(__self);
		public static void SetEventRef_explode(this Firework __self, string value) => _eventRef_explode.Value.SetValue(__self, value);
		public static UnityEngine.Rigidbody GetBody(this Firework __self) => _body.Value.GetValue(__self);
		public static void SetBody(this Firework __self, UnityEngine.Rigidbody value) => _body.Value.SetValue(__self, value);
		public static bool GetExploded(this Firework __self) => _exploded.Value.GetValue(__self);
		public static void SetExploded(this Firework __self, bool value) => _exploded.Value.SetValue(__self, value);
		public static Raft_Network GetNetwork(this Firework __self) => _network.Value.GetValue(__self);
		public static void SetNetwork(this Firework __self, Raft_Network value) => _network.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Firework>> _Awake757602046 =
				new System.Lazy<MethodAccessor<Firework>>(() => MethodAccessor<Firework>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<Firework>> _Start757602046 =
				new System.Lazy<MethodAccessor<Firework>>(() => MethodAccessor<Firework>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<Firework>> _Update757602046 =
				new System.Lazy<MethodAccessor<Firework>>(() => MethodAccessor<Firework>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<Firework>> _OnCollisionEnter3430762572 =
				new System.Lazy<MethodAccessor<Firework>>(() => MethodAccessor<Firework>.Create("OnCollisionEnter", typeof(UnityEngine.Collision)));
		private static readonly System.Lazy<MethodAccessor<Firework>> _ExplodeRPC757602046 =
				new System.Lazy<MethodAccessor<Firework>>(() => MethodAccessor<Firework>.Create("ExplodeRPC"));
		private static readonly System.Lazy<MethodAccessor<Firework>> _Explode1158682102 =
				new System.Lazy<MethodAccessor<Firework>>(() => MethodAccessor<Firework>.Create("Explode", typeof(UnityEngine.Vector3), typeof(int)));
		private static readonly System.Lazy<MethodAccessor<Firework>> _TryToDamageEntity3437001883 =
				new System.Lazy<MethodAccessor<Firework>>(() => MethodAccessor<Firework>.Create("TryToDamageEntity", typeof(UnityEngine.Transform)));
		private static readonly System.Lazy<MethodAccessor<Firework>> _InitializeCollider757602046 =
				new System.Lazy<MethodAccessor<Firework>>(() => MethodAccessor<Firework>.Create("InitializeCollider"));
		private static readonly System.Lazy<MethodAccessor<Firework>> _EnableCollider757602046 =
				new System.Lazy<MethodAccessor<Firework>>(() => MethodAccessor<Firework>.Create("EnableCollider"));

		public static void Awake(this Firework __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this Firework __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this Firework __self) => _Update757602046.Value.Invoke(__self);
		public static void OnCollisionEnter(this Firework __self, UnityEngine.Collision collision) => _OnCollisionEnter3430762572.Value.Invoke(__self, collision);
		public static void ExplodeRPC(this Firework __self) => _ExplodeRPC757602046.Value.Invoke(__self);
		public static void Explode(this Firework __self, UnityEngine.Vector3 position, int particlePrefabIndex) => _Explode1158682102.Value.Invoke(__self, position, particlePrefabIndex);
		public static void TryToDamageEntity(this Firework __self, UnityEngine.Transform transform) => _TryToDamageEntity3437001883.Value.Invoke(__self, transform);
		public static void InitializeCollider(this Firework __self) => _InitializeCollider757602046.Value.Invoke(__self);
		public static void EnableCollider(this Firework __self) => _EnableCollider757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Firework_Hand
	{

		private static readonly System.Lazy<FieldAccessor<Firework_Hand, UnityEngine.GameObject>> _fireworkHandModel =
				new System.Lazy<FieldAccessor<Firework_Hand, UnityEngine.GameObject>>(() => FieldAccessor<Firework_Hand, UnityEngine.GameObject>.Create("fireworkHandModel"));
		private static readonly System.Lazy<FieldAccessor<Firework_Hand, Network_Player>> _player =
				new System.Lazy<FieldAccessor<Firework_Hand, Network_Player>>(() => FieldAccessor<Firework_Hand, Network_Player>.Create("player"));

		public static UnityEngine.GameObject GetFireworkHandModel(this Firework_Hand __self) => _fireworkHandModel.Value.GetValue(__self);
		public static void SetFireworkHandModel(this Firework_Hand __self, UnityEngine.GameObject value) => _fireworkHandModel.Value.SetValue(__self, value);
		public static Network_Player GetPlayer(this Firework_Hand __self) => _player.Value.GetValue(__self);
		public static void SetPlayer(this Firework_Hand __self, Network_Player value) => _player.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Firework_Hand>> _Update757602046 =
				new System.Lazy<MethodAccessor<Firework_Hand>>(() => MethodAccessor<Firework_Hand>.Create("Update"));

		public static void Update(this Firework_Hand __self) => _Update757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Message_Firework_Launch
	{

		private static readonly System.Lazy<FieldAccessor<Message_Firework_Launch, int>> _l =
				new System.Lazy<FieldAccessor<Message_Firework_Launch, int>>(() => FieldAccessor<Message_Firework_Launch, int>.Create("l"));
		private static readonly System.Lazy<FieldAccessor<Message_Firework_Launch, bool>> _r =
				new System.Lazy<FieldAccessor<Message_Firework_Launch, bool>>(() => FieldAccessor<Message_Firework_Launch, bool>.Create("r"));
		private static readonly System.Lazy<FieldAccessor<Message_Firework_Launch, uint>> _f =
				new System.Lazy<FieldAccessor<Message_Firework_Launch, uint>>(() => FieldAccessor<Message_Firework_Launch, uint>.Create("f"));
		private static readonly System.Lazy<FieldAccessor<Message_Firework_Launch, int>> _v =
				new System.Lazy<FieldAccessor<Message_Firework_Launch, int>>(() => FieldAccessor<Message_Firework_Launch, int>.Create("v"));

		public static int GetL(this Message_Firework_Launch __self) => _l.Value.GetValue(__self);
		public static void SetL(this Message_Firework_Launch __self, int value) => _l.Value.SetValue(__self, value);
		public static bool GetR(this Message_Firework_Launch __self) => _r.Value.GetValue(__self);
		public static void SetR(this Message_Firework_Launch __self, bool value) => _r.Value.SetValue(__self, value);
		public static uint GetF(this Message_Firework_Launch __self) => _f.Value.GetValue(__self);
		public static void SetF(this Message_Firework_Launch __self, uint value) => _f.Value.SetValue(__self, value);
		public static int GetV(this Message_Firework_Launch __self) => _v.Value.GetValue(__self);
		public static void SetV(this Message_Firework_Launch __self, int value) => _v.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_Handheld_Compass
	{

		private static readonly System.Lazy<FieldAccessor<Handheld_Compass, bool>> _invert =
				new System.Lazy<FieldAccessor<Handheld_Compass, bool>>(() => FieldAccessor<Handheld_Compass, bool>.Create("invert"));
		private static readonly System.Lazy<FieldAccessor<Handheld_Compass, float>> _accelerationSpeed =
				new System.Lazy<FieldAccessor<Handheld_Compass, float>>(() => FieldAccessor<Handheld_Compass, float>.Create("accelerationSpeed"));
		private static readonly System.Lazy<FieldAccessor<Handheld_Compass, float>> _maxAcceleration =
				new System.Lazy<FieldAccessor<Handheld_Compass, float>>(() => FieldAccessor<Handheld_Compass, float>.Create("maxAcceleration"));
		private static readonly System.Lazy<FieldAccessor<Handheld_Compass, float>> _acceleration =
				new System.Lazy<FieldAccessor<Handheld_Compass, float>>(() => FieldAccessor<Handheld_Compass, float>.Create("acceleration"));
		private static readonly System.Lazy<FieldAccessor<Handheld_Compass, float>> _currentAngle =
				new System.Lazy<FieldAccessor<Handheld_Compass, float>>(() => FieldAccessor<Handheld_Compass, float>.Create("currentAngle"));
		private static readonly System.Lazy<FieldAccessor<Handheld_Compass, float>> _targetAngle =
				new System.Lazy<FieldAccessor<Handheld_Compass, float>>(() => FieldAccessor<Handheld_Compass, float>.Create("targetAngle"));

		public static bool GetInvert(this Handheld_Compass __self) => _invert.Value.GetValue(__self);
		public static void SetInvert(this Handheld_Compass __self, bool value) => _invert.Value.SetValue(__self, value);
		public static float GetAccelerationSpeed(this Handheld_Compass __self) => _accelerationSpeed.Value.GetValue(__self);
		public static void SetAccelerationSpeed(this Handheld_Compass __self, float value) => _accelerationSpeed.Value.SetValue(__self, value);
		public static float GetMaxAcceleration(this Handheld_Compass __self) => _maxAcceleration.Value.GetValue(__self);
		public static void SetMaxAcceleration(this Handheld_Compass __self, float value) => _maxAcceleration.Value.SetValue(__self, value);
		public static float GetAcceleration(this Handheld_Compass __self) => _acceleration.Value.GetValue(__self);
		public static void SetAcceleration(this Handheld_Compass __self, float value) => _acceleration.Value.SetValue(__self, value);
		public static float GetCurrentAngle(this Handheld_Compass __self) => _currentAngle.Value.GetValue(__self);
		public static void SetCurrentAngle(this Handheld_Compass __self, float value) => _currentAngle.Value.SetValue(__self, value);
		public static float GetTargetAngle(this Handheld_Compass __self) => _targetAngle.Value.GetValue(__self);
		public static void SetTargetAngle(this Handheld_Compass __self, float value) => _targetAngle.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Handheld_Compass>> _Update757602046 =
				new System.Lazy<MethodAccessor<Handheld_Compass>>(() => MethodAccessor<Handheld_Compass>.Create("Update"));

		public static void Update(this Handheld_Compass __self) => _Update757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Machete
	{

		private static readonly System.Lazy<FieldAccessor<Machete, string>> _macheteInteractTagName =
				new System.Lazy<FieldAccessor<Machete, string>>(() => FieldAccessor<Machete, string>.Create("macheteInteractTagName"));

		public static string GetMacheteInteractTagName(this Machete __self) => _macheteInteractTagName.Value.GetValue(__self);
		public static void SetMacheteInteractTagName(this Machete __self, string value) => _macheteInteractTagName.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Machete>> _CheckForMacheteInteractableViableTarget3464942049 =
				new System.Lazy<MethodAccessor<Machete>>(() => MethodAccessor<Machete>.Create("CheckForMacheteInteractableViableTarget", typeof(UnityEngine.RaycastHit)));
		private static readonly System.Lazy<MethodAccessor<Machete>> _MacheteInteractWithQuest3475417258 =
				new System.Lazy<MethodAccessor<Machete>>(() => MethodAccessor<Machete>.Create("MacheteInteractWithQuest", typeof(QuestEventBase)));

		public static void CheckForMacheteInteractableViableTarget(this Machete __self, UnityEngine.RaycastHit hit) => _CheckForMacheteInteractableViableTarget3464942049.Value.Invoke(__self, hit);
		public static void MacheteInteractWithQuest(this Machete __self, QuestEventBase qEntity) => _MacheteInteractWithQuest3475417258.Value.Invoke(__self, qEntity);

	}

	public static class PrivateAccessor_MeleeWeapon
	{

		private static readonly System.Lazy<FieldAccessor<MeleeWeapon, float>> _attackRange =
				new System.Lazy<FieldAccessor<MeleeWeapon, float>>(() => FieldAccessor<MeleeWeapon, float>.Create("attackRange"));
		private static readonly System.Lazy<FieldAccessor<MeleeWeapon, int>> _damage =
				new System.Lazy<FieldAccessor<MeleeWeapon, int>>(() => FieldAccessor<MeleeWeapon, int>.Create("damage"));
		private static readonly System.Lazy<FieldAccessor<MeleeWeapon, bool>> _goThroughInvurnability =
				new System.Lazy<FieldAccessor<MeleeWeapon, bool>>(() => FieldAccessor<MeleeWeapon, bool>.Create("goThroughInvurnability"));
		private static readonly System.Lazy<FieldAccessor<MeleeWeapon, bool>> _useSphereCast =
				new System.Lazy<FieldAccessor<MeleeWeapon, bool>>(() => FieldAccessor<MeleeWeapon, bool>.Create("useSphereCast"));
		private static readonly System.Lazy<FieldAccessor<MeleeWeapon, float>> _sphereRadius =
				new System.Lazy<FieldAccessor<MeleeWeapon, float>>(() => FieldAccessor<MeleeWeapon, float>.Create("sphereRadius"));
		private static readonly System.Lazy<FieldAccessor<MeleeWeapon, string>> _eventRef_weaponSwing =
				new System.Lazy<FieldAccessor<MeleeWeapon, string>>(() => FieldAccessor<MeleeWeapon, string>.Create("eventRef_weaponSwing"));
		private static readonly System.Lazy<FieldAccessor<MeleeWeapon, Network_Host>> _hostNetwork =
				new System.Lazy<FieldAccessor<MeleeWeapon, Network_Host>>(() => FieldAccessor<MeleeWeapon, Network_Host>.Create("hostNetwork"));

		public static float GetAttackRange(this MeleeWeapon __self) => _attackRange.Value.GetValue(__self);
		public static void SetAttackRange(this MeleeWeapon __self, float value) => _attackRange.Value.SetValue(__self, value);
		public static int GetDamage(this MeleeWeapon __self) => _damage.Value.GetValue(__self);
		public static void SetDamage(this MeleeWeapon __self, int value) => _damage.Value.SetValue(__self, value);
		public static bool GetGoThroughInvurnability(this MeleeWeapon __self) => _goThroughInvurnability.Value.GetValue(__self);
		public static void SetGoThroughInvurnability(this MeleeWeapon __self, bool value) => _goThroughInvurnability.Value.SetValue(__self, value);
		public static bool GetUseSphereCast(this MeleeWeapon __self) => _useSphereCast.Value.GetValue(__self);
		public static void SetUseSphereCast(this MeleeWeapon __self, bool value) => _useSphereCast.Value.SetValue(__self, value);
		public static float GetSphereRadius(this MeleeWeapon __self) => _sphereRadius.Value.GetValue(__self);
		public static void SetSphereRadius(this MeleeWeapon __self, float value) => _sphereRadius.Value.SetValue(__self, value);
		public static string GetEventRef_weaponSwing(this MeleeWeapon __self) => _eventRef_weaponSwing.Value.GetValue(__self);
		public static void SetEventRef_weaponSwing(this MeleeWeapon __self, string value) => _eventRef_weaponSwing.Value.SetValue(__self, value);
		public static Network_Host GetHostNetwork(this MeleeWeapon __self) => _hostNetwork.Value.GetValue(__self);
		public static void SetHostNetwork(this MeleeWeapon __self, Network_Host value) => _hostNetwork.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<MeleeWeapon>> _Start757602046 =
				new System.Lazy<MethodAccessor<MeleeWeapon>>(() => MethodAccessor<MeleeWeapon>.Create("Start"));

		public static void Start(this MeleeWeapon __self) => _Start757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_NetCanister
	{

		private static readonly System.Lazy<FieldAccessor<NetCanister, UnityEngine.Rigidbody[]>> _netEnds =
				new System.Lazy<FieldAccessor<NetCanister, UnityEngine.Rigidbody[]>>(() => FieldAccessor<NetCanister, UnityEngine.Rigidbody[]>.Create("netEnds"));

		public static UnityEngine.Rigidbody[] GetNetEnds(this NetCanister __self) => _netEnds.Value.GetValue(__self);
		public static void SetNetEnds(this NetCanister __self, UnityEngine.Rigidbody[] value) => _netEnds.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<NetCanister>> _OnWaterHit757602046 =
				new System.Lazy<MethodAccessor<NetCanister>>(() => MethodAccessor<NetCanister>.Create("OnWaterHit"));
		private static readonly System.Lazy<MethodAccessor<NetCanister>> _ScaleOverTime3486905475 =
				new System.Lazy<MethodAccessor<NetCanister>>(() => MethodAccessor<NetCanister>.Create("ScaleOverTime", typeof(float)));

		public static void OnWaterHit(this NetCanister __self) => _OnWaterHit757602046.Value.Invoke(__self);
		public static System.Collections.IEnumerator ScaleOverTime(this NetCanister __self, float time) => (System.Collections.IEnumerator)_ScaleOverTime3486905475.Value.Invoke(__self, time);

	}

	public static class PrivateAccessor_NetCanisterCapture
	{

		private static readonly System.Lazy<FieldAccessor<NetCanisterCapture, string>> _eventRef_captureAnimal =
				new System.Lazy<FieldAccessor<NetCanisterCapture, string>>(() => FieldAccessor<NetCanisterCapture, string>.Create("eventRef_captureAnimal"));
		private static readonly System.Lazy<FieldAccessor<NetCanisterCapture, bool>> _isNetValid =
				new System.Lazy<FieldAccessor<NetCanisterCapture, bool>>(() => FieldAccessor<NetCanisterCapture, bool>.Create("isNetValid"));

		public static string GetEventRef_captureAnimal(this NetCanisterCapture __self) => _eventRef_captureAnimal.Value.GetValue(__self);
		public static void SetEventRef_captureAnimal(this NetCanisterCapture __self, string value) => _eventRef_captureAnimal.Value.SetValue(__self, value);
		public static bool GetIsNetValid(this NetCanisterCapture __self) => _isNetValid.Value.GetValue(__self);
		public static void SetIsNetValid(this NetCanisterCapture __self, bool value) => _isNetValid.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<NetCanisterCapture>> _OnCollisionEnter3430762572 =
				new System.Lazy<MethodAccessor<NetCanisterCapture>>(() => MethodAccessor<NetCanisterCapture>.Create("OnCollisionEnter", typeof(UnityEngine.Collision)));
		private static readonly System.Lazy<MethodAccessor<NetCanisterCapture>> _DeactiveateCapturablility757602046 =
				new System.Lazy<MethodAccessor<NetCanisterCapture>>(() => MethodAccessor<NetCanisterCapture>.Create("DeactiveateCapturablility"));
		private static readonly System.Lazy<MethodAccessor<NetCanisterCapture>> _OnCaptureTarget757602046 =
				new System.Lazy<MethodAccessor<NetCanisterCapture>>(() => MethodAccessor<NetCanisterCapture>.Create("OnCaptureTarget"));
		private static readonly System.Lazy<MethodAccessor<NetCanisterCapture>> _DisplayParticleEffect757602046 =
				new System.Lazy<MethodAccessor<NetCanisterCapture>>(() => MethodAccessor<NetCanisterCapture>.Create("DisplayParticleEffect"));
		private static readonly System.Lazy<MethodAccessor<NetCanisterCapture>> _CheckIfObjectIsCapturableAnimal3437001883 =
				new System.Lazy<MethodAccessor<NetCanisterCapture>>(() => MethodAccessor<NetCanisterCapture>.Create("CheckIfObjectIsCapturableAnimal", typeof(UnityEngine.Transform)));

		public static void OnCollisionEnter(this NetCanisterCapture __self, UnityEngine.Collision other) => _OnCollisionEnter3430762572.Value.Invoke(__self, other);
		public static void DeactiveateCapturablility(this NetCanisterCapture __self) => _DeactiveateCapturablility757602046.Value.Invoke(__self);
		public static void OnCaptureTarget(this NetCanisterCapture __self) => _OnCaptureTarget757602046.Value.Invoke(__self);
		public static void DisplayParticleEffect(this NetCanisterCapture __self) => _DisplayParticleEffect757602046.Value.Invoke(__self);
		public static CaptureAnimal CheckIfObjectIsCapturableAnimal(this NetCanisterCapture __self, UnityEngine.Transform p_other) => (CaptureAnimal)_CheckIfObjectIsCapturableAnimal3437001883.Value.Invoke(__self, p_other);

	}

	public static class PrivateAccessor_NetCanisterPart
	{

		private static readonly System.Lazy<FieldAccessor<NetCanisterPart, UnityEngine.Transform>> _netParent =
				new System.Lazy<FieldAccessor<NetCanisterPart, UnityEngine.Transform>>(() => FieldAccessor<NetCanisterPart, UnityEngine.Transform>.Create("netParent"));

		public static UnityEngine.Transform GetNetParent(this NetCanisterPart __self) => _netParent.Value.GetValue(__self);
		public static void SetNetParent(this NetCanisterPart __self, UnityEngine.Transform value) => _netParent.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_Paddle
	{

		private static readonly System.Lazy<FieldAccessor<Paddle, float>> _paddleForce =
				new System.Lazy<FieldAccessor<Paddle, float>>(() => FieldAccessor<Paddle, float>.Create("paddleForce"));
		private static readonly System.Lazy<FieldAccessor<Paddle, UnityEngine.Transform>> _particleTransform =
				new System.Lazy<FieldAccessor<Paddle, UnityEngine.Transform>>(() => FieldAccessor<Paddle, UnityEngine.Transform>.Create("particleTransform"));
		private static readonly System.Lazy<FieldAccessor<Paddle, string>> _eventRef_Paddle =
				new System.Lazy<FieldAccessor<Paddle, string>>(() => FieldAccessor<Paddle, string>.Create("eventRef_Paddle"));
		private static readonly System.Lazy<FieldAccessor<Paddle, Raft>> _raft =
				new System.Lazy<FieldAccessor<Paddle, Raft>>(() => FieldAccessor<Paddle, Raft>.Create("raft"));

		public static float GetPaddleForce(this Paddle __self) => _paddleForce.Value.GetValue(__self);
		public static void SetPaddleForce(this Paddle __self, float value) => _paddleForce.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetParticleTransform(this Paddle __self) => _particleTransform.Value.GetValue(__self);
		public static void SetParticleTransform(this Paddle __self, UnityEngine.Transform value) => _particleTransform.Value.SetValue(__self, value);
		public static string GetEventRef_Paddle(this Paddle __self) => _eventRef_Paddle.Value.GetValue(__self);
		public static void SetEventRef_Paddle(this Paddle __self, string value) => _eventRef_Paddle.Value.SetValue(__self, value);
		public static Raft GetRaft(this Paddle __self) => _raft.Value.GetValue(__self);
		public static void SetRaft(this Paddle __self, Raft value) => _raft.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Paddle>> _Start757602046 =
				new System.Lazy<MethodAccessor<Paddle>>(() => MethodAccessor<Paddle>.Create("Start"));

		public static void Start(this Paddle __self) => _Start757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Message_Paddle
	{

		private static readonly System.Lazy<FieldAccessor<Message_Paddle, float>> _xPos =
				new System.Lazy<FieldAccessor<Message_Paddle, float>>(() => FieldAccessor<Message_Paddle, float>.Create("xPos"));
		private static readonly System.Lazy<FieldAccessor<Message_Paddle, float>> _yPos =
				new System.Lazy<FieldAccessor<Message_Paddle, float>>(() => FieldAccessor<Message_Paddle, float>.Create("yPos"));
		private static readonly System.Lazy<FieldAccessor<Message_Paddle, float>> _zPos =
				new System.Lazy<FieldAccessor<Message_Paddle, float>>(() => FieldAccessor<Message_Paddle, float>.Create("zPos"));
		private static readonly System.Lazy<FieldAccessor<Message_Paddle, float>> _xDir =
				new System.Lazy<FieldAccessor<Message_Paddle, float>>(() => FieldAccessor<Message_Paddle, float>.Create("xDir"));
		private static readonly System.Lazy<FieldAccessor<Message_Paddle, float>> _yDir =
				new System.Lazy<FieldAccessor<Message_Paddle, float>>(() => FieldAccessor<Message_Paddle, float>.Create("yDir"));
		private static readonly System.Lazy<FieldAccessor<Message_Paddle, float>> _zDir =
				new System.Lazy<FieldAccessor<Message_Paddle, float>>(() => FieldAccessor<Message_Paddle, float>.Create("zDir"));

		public static float GetXPos(this Message_Paddle __self) => _xPos.Value.GetValue(__self);
		public static void SetXPos(this Message_Paddle __self, float value) => _xPos.Value.SetValue(__self, value);
		public static float GetYPos(this Message_Paddle __self) => _yPos.Value.GetValue(__self);
		public static void SetYPos(this Message_Paddle __self, float value) => _yPos.Value.SetValue(__self, value);
		public static float GetZPos(this Message_Paddle __self) => _zPos.Value.GetValue(__self);
		public static void SetZPos(this Message_Paddle __self, float value) => _zPos.Value.SetValue(__self, value);
		public static float GetXDir(this Message_Paddle __self) => _xDir.Value.GetValue(__self);
		public static void SetXDir(this Message_Paddle __self, float value) => _xDir.Value.SetValue(__self, value);
		public static float GetYDir(this Message_Paddle __self) => _yDir.Value.GetValue(__self);
		public static void SetYDir(this Message_Paddle __self, float value) => _yDir.Value.SetValue(__self, value);
		public static float GetZDir(this Message_Paddle __self) => _zDir.Value.GetValue(__self);
		public static void SetZDir(this Message_Paddle __self, float value) => _zDir.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_PaintBrush
	{

		private static readonly System.Lazy<FieldAccessor<PaintBrush, string>> _eventRef_paint =
				new System.Lazy<FieldAccessor<PaintBrush, string>>(() => FieldAccessor<PaintBrush, string>.Create("eventRef_paint"));
		private static readonly System.Lazy<FieldAccessor<PaintBrush, CanvasHelper>> _canvas =
				new System.Lazy<FieldAccessor<PaintBrush, CanvasHelper>>(() => FieldAccessor<PaintBrush, CanvasHelper>.Create("canvas"));
		private static readonly System.Lazy<FieldAccessor<PaintBrush, ColorMenu>> _colorMenu =
				new System.Lazy<FieldAccessor<PaintBrush, ColorMenu>>(() => FieldAccessor<PaintBrush, ColorMenu>.Create("colorMenu"));
		private static readonly System.Lazy<FieldAccessor<PaintBrush, UnityEngine.ParticleSystem[]>> _particleSystems =
				new System.Lazy<FieldAccessor<PaintBrush, UnityEngine.ParticleSystem[]>>(() => FieldAccessor<PaintBrush, UnityEngine.ParticleSystem[]>.Create("particleSystems"));
		private static readonly System.Lazy<FieldAccessor<PaintBrush, Block>> _aimedAtBlock =
				new System.Lazy<FieldAccessor<PaintBrush, Block>>(() => FieldAccessor<PaintBrush, Block>.Create("aimedAtBlock"));
		private static readonly System.Lazy<FieldAccessor<PaintBrush, UnityEngine.Transform>> _lockedPivot =
				new System.Lazy<FieldAccessor<PaintBrush, UnityEngine.Transform>>(() => FieldAccessor<PaintBrush, UnityEngine.Transform>.Create("lockedPivot"));
		private static readonly System.Lazy<FieldAccessor<PaintBrush, UnityEngine.MaterialPropertyBlock>> _propertyBlock =
				new System.Lazy<FieldAccessor<PaintBrush, UnityEngine.MaterialPropertyBlock>>(() => FieldAccessor<PaintBrush, UnityEngine.MaterialPropertyBlock>.Create("propertyBlock"));
		private static readonly System.Lazy<FieldAccessor<PaintBrush, bool>> _singleSidedPainting =
				new System.Lazy<FieldAccessor<PaintBrush, bool>>(() => FieldAccessor<PaintBrush, bool>.Create("singleSidedPainting"));

		public static string GetEventRef_paint(this PaintBrush __self) => _eventRef_paint.Value.GetValue(__self);
		public static void SetEventRef_paint(this PaintBrush __self, string value) => _eventRef_paint.Value.SetValue(__self, value);
		public static CanvasHelper GetCanvas(this PaintBrush __self) => _canvas.Value.GetValue(__self);
		public static void SetCanvas(this PaintBrush __self, CanvasHelper value) => _canvas.Value.SetValue(__self, value);
		public static ColorMenu GetColorMenu(this PaintBrush __self) => _colorMenu.Value.GetValue(__self);
		public static void SetColorMenu(this PaintBrush __self, ColorMenu value) => _colorMenu.Value.SetValue(__self, value);
		public static UnityEngine.ParticleSystem[] GetParticleSystems(this PaintBrush __self) => _particleSystems.Value.GetValue(__self);
		public static void SetParticleSystems(this PaintBrush __self, UnityEngine.ParticleSystem[] value) => _particleSystems.Value.SetValue(__self, value);
		public static Block GetAimedAtBlock(this PaintBrush __self) => _aimedAtBlock.Value.GetValue(__self);
		public static void SetAimedAtBlock(this PaintBrush __self, Block value) => _aimedAtBlock.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetLockedPivot(this PaintBrush __self) => _lockedPivot.Value.GetValue(__self);
		public static void SetLockedPivot(this PaintBrush __self, UnityEngine.Transform value) => _lockedPivot.Value.SetValue(__self, value);
		public static UnityEngine.MaterialPropertyBlock GetPropertyBlock(this PaintBrush __self) => _propertyBlock.Value.GetValue(__self);
		public static void SetPropertyBlock(this PaintBrush __self, UnityEngine.MaterialPropertyBlock value) => _propertyBlock.Value.SetValue(__self, value);
		public static bool GetSingleSidedPainting(this PaintBrush __self) => _singleSidedPainting.Value.GetValue(__self);
		public static void SetSingleSidedPainting(this PaintBrush __self, bool value) => _singleSidedPainting.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<PaintBrush>> _Start757602046 =
				new System.Lazy<MethodAccessor<PaintBrush>>(() => MethodAccessor<PaintBrush>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<PaintBrush>> _Update757602046 =
				new System.Lazy<MethodAccessor<PaintBrush>>(() => MethodAccessor<PaintBrush>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<PaintBrush>> _OnToolDeSelect757602046 =
				new System.Lazy<MethodAccessor<PaintBrush>>(() => MethodAccessor<PaintBrush>.Create("OnToolDeSelect"));
		private static readonly System.Lazy<MethodAccessor<PaintBrush>> _OnToolUse757602046 =
				new System.Lazy<MethodAccessor<PaintBrush>>(() => MethodAccessor<PaintBrush>.Create("OnToolUse"));
		private static readonly System.Lazy<MethodAccessor<PaintBrush>> _PreviewPaint1213274627 =
				new System.Lazy<MethodAccessor<PaintBrush>>(() => MethodAccessor<PaintBrush>.Create("PreviewPaint", typeof(Block), typeof(int)));
		private static readonly System.Lazy<MethodAccessor<PaintBrush>> _GetPaintSideFromPaintAxis2398059262 =
				new System.Lazy<MethodAccessor<PaintBrush>>(() => MethodAccessor<PaintBrush>.Create("GetPaintSideFromPaintAxis", typeof(Block), typeof(UnityEngine.RaycastHit), typeof(bool)));
		private static readonly System.Lazy<MethodAccessor<PaintBrush>> _ColorPickFromBlock1213274627 =
				new System.Lazy<MethodAccessor<PaintBrush>>(() => MethodAccessor<PaintBrush>.Create("ColorPickFromBlock", typeof(Block), typeof(int)));
		private static readonly System.Lazy<MethodAccessor<PaintBrush>> _HandleBlobs757602046 =
				new System.Lazy<MethodAccessor<PaintBrush>>(() => MethodAccessor<PaintBrush>.Create("HandleBlobs"));
		private static readonly System.Lazy<MethodAccessor<PaintBrush>> _SetBlobValue2764980691 =
				new System.Lazy<MethodAccessor<PaintBrush>>(() => MethodAccessor<PaintBrush>.Create("SetBlobValue", typeof(UnityEngine.MeshRenderer), typeof(SO_ColorValue)));

		public static void Start(this PaintBrush __self) => _Start757602046.Value.Invoke(__self);
		public static bool Update(this PaintBrush __self) => (bool)_Update757602046.Value.Invoke(__self);
		public static void OnToolDeSelect(this PaintBrush __self) => _OnToolDeSelect757602046.Value.Invoke(__self);
		public static void OnToolUse(this PaintBrush __self) => _OnToolUse757602046.Value.Invoke(__self);
		public static void PreviewPaint(this PaintBrush __self, Block block, int paintSide) => _PreviewPaint1213274627.Value.Invoke(__self, block, paintSide);
		public static int GetPaintSideFromPaintAxis(this PaintBrush __self, Block block, UnityEngine.RaycastHit hit, bool careAboutSingleSidedSetting) => (int)_GetPaintSideFromPaintAxis2398059262.Value.Invoke(__self, block, hit, careAboutSingleSidedSetting);
		public static void ColorPickFromBlock(this PaintBrush __self, Block block, int paintSide) => _ColorPickFromBlock1213274627.Value.Invoke(__self, block, paintSide);
		public static void HandleBlobs(this PaintBrush __self) => _HandleBlobs757602046.Value.Invoke(__self);
		public static void SetBlobValue(this PaintBrush __self, UnityEngine.MeshRenderer blob, SO_ColorValue color) => _SetBlobValue2764980691.Value.Invoke(__self, blob, color);

	}

	public static class PrivateAccessor_Shovel
	{

		private static readonly System.Lazy<FieldAccessor<Shovel, float>> _useRange =
				new System.Lazy<FieldAccessor<Shovel, float>>(() => FieldAccessor<Shovel, float>.Create("useRange"));
		private static readonly System.Lazy<FieldAccessor<Shovel, string>> _eventRef_DigDown =
				new System.Lazy<FieldAccessor<Shovel, string>>(() => FieldAccessor<Shovel, string>.Create("eventRef_DigDown"));
		private static readonly System.Lazy<FieldAccessor<Shovel, string>> _eventRef_DigThrow =
				new System.Lazy<FieldAccessor<Shovel, string>>(() => FieldAccessor<Shovel, string>.Create("eventRef_DigThrow"));
		private static readonly System.Lazy<FieldAccessor<Shovel, UnityEngine.ParticleSystem>> _dirtParticles =
				new System.Lazy<FieldAccessor<Shovel, UnityEngine.ParticleSystem>>(() => FieldAccessor<Shovel, UnityEngine.ParticleSystem>.Create("dirtParticles"));
		private static readonly System.Lazy<FieldAccessor<Shovel, PickupItem>> _currentTarget =
				new System.Lazy<FieldAccessor<Shovel, PickupItem>>(() => FieldAccessor<Shovel, PickupItem>.Create("currentTarget"));
		private static readonly System.Lazy<FieldAccessor<Shovel, PoolManager>> _poolManager =
				new System.Lazy<FieldAccessor<Shovel, PoolManager>>(() => FieldAccessor<Shovel, PoolManager>.Create("poolManager"));
		private static readonly System.Lazy<FieldAccessor<Shovel, TreasurePointManager>> _treasurePointManager =
				new System.Lazy<FieldAccessor<Shovel, TreasurePointManager>>(() => FieldAccessor<Shovel, TreasurePointManager>.Create("treasurePointManager"));
		private static readonly System.Lazy<FieldAccessor<Shovel, TreasurePoint>> _closestTreasurePoint =
				new System.Lazy<FieldAccessor<Shovel, TreasurePoint>>(() => FieldAccessor<Shovel, TreasurePoint>.Create("closestTreasurePoint"));
		private static readonly System.Lazy<FieldAccessor<Shovel, SoundManager>> _soundManager =
				new System.Lazy<FieldAccessor<Shovel, SoundManager>>(() => FieldAccessor<Shovel, SoundManager>.Create("soundManager"));

		public static float GetUseRange(this Shovel __self) => _useRange.Value.GetValue(__self);
		public static void SetUseRange(this Shovel __self, float value) => _useRange.Value.SetValue(__self, value);
		public static string GetEventRef_DigDown(this Shovel __self) => _eventRef_DigDown.Value.GetValue(__self);
		public static void SetEventRef_DigDown(this Shovel __self, string value) => _eventRef_DigDown.Value.SetValue(__self, value);
		public static string GetEventRef_DigThrow(this Shovel __self) => _eventRef_DigThrow.Value.GetValue(__self);
		public static void SetEventRef_DigThrow(this Shovel __self, string value) => _eventRef_DigThrow.Value.SetValue(__self, value);
		public static UnityEngine.ParticleSystem GetDirtParticles(this Shovel __self) => _dirtParticles.Value.GetValue(__self);
		public static void SetDirtParticles(this Shovel __self, UnityEngine.ParticleSystem value) => _dirtParticles.Value.SetValue(__self, value);
		public static PickupItem GetCurrentTarget(this Shovel __self) => _currentTarget.Value.GetValue(__self);
		public static void SetCurrentTarget(this Shovel __self, PickupItem value) => _currentTarget.Value.SetValue(__self, value);
		public static PoolManager GetPoolManager(this Shovel __self) => _poolManager.Value.GetValue(__self);
		public static void SetPoolManager(this Shovel __self, PoolManager value) => _poolManager.Value.SetValue(__self, value);
		public static TreasurePointManager GetTreasurePointManager(this Shovel __self) => _treasurePointManager.Value.GetValue(__self);
		public static void SetTreasurePointManager(this Shovel __self, TreasurePointManager value) => _treasurePointManager.Value.SetValue(__self, value);
		public static TreasurePoint GetClosestTreasurePoint(this Shovel __self) => _closestTreasurePoint.Value.GetValue(__self);
		public static void SetClosestTreasurePoint(this Shovel __self, TreasurePoint value) => _closestTreasurePoint.Value.SetValue(__self, value);
		public static SoundManager GetSoundManager(this Shovel __self) => _soundManager.Value.GetValue(__self);
		public static void SetSoundManager(this Shovel __self, SoundManager value) => _soundManager.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Shovel>> _Start757602046 =
				new System.Lazy<MethodAccessor<Shovel>>(() => MethodAccessor<Shovel>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<Shovel>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<Shovel>>(() => MethodAccessor<Shovel>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<Shovel>> _OnToolDeSelect757602046 =
				new System.Lazy<MethodAccessor<Shovel>>(() => MethodAccessor<Shovel>.Create("OnToolDeSelect"));
		private static readonly System.Lazy<MethodAccessor<Shovel>> _ResetItemChannel757602046 =
				new System.Lazy<MethodAccessor<Shovel>>(() => MethodAccessor<Shovel>.Create("ResetItemChannel"));
		private static readonly System.Lazy<MethodAccessor<Shovel>> _PlayDirtParticles1013152354 =
				new System.Lazy<MethodAccessor<Shovel>>(() => MethodAccessor<Shovel>.Create("PlayDirtParticles", typeof(UnityEngine.Vector3), typeof(UnityEngine.Quaternion)));

		public static void Start(this Shovel __self) => _Start757602046.Value.Invoke(__self);
		public static void OnDestroy(this Shovel __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void OnToolDeSelect(this Shovel __self) => _OnToolDeSelect757602046.Value.Invoke(__self);
		public static void ResetItemChannel(this Shovel __self) => _ResetItemChannel757602046.Value.Invoke(__self);
		public static void PlayDirtParticles(this Shovel __self, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation) => _PlayDirtParticles1013152354.Value.Invoke(__self, position, rotation);

	}

	public static class PrivateAccessor_SweepNet
	{

		private static readonly System.Lazy<FieldAccessor<SweepNet, string>> _eventRef_netSwing =
				new System.Lazy<FieldAccessor<SweepNet, string>>(() => FieldAccessor<SweepNet, string>.Create("eventRef_netSwing"));
		private static readonly System.Lazy<FieldAccessor<SweepNet, string>> _eventRef_netCapture =
				new System.Lazy<FieldAccessor<SweepNet, string>>(() => FieldAccessor<SweepNet, string>.Create("eventRef_netCapture"));
		private static readonly System.Lazy<FieldAccessor<SweepNet, PickupItem>> _currentPickupTarget =
				new System.Lazy<FieldAccessor<SweepNet, PickupItem>>(() => FieldAccessor<SweepNet, PickupItem>.Create("currentPickupTarget"));

		public static string GetEventRef_netSwing(this SweepNet __self) => _eventRef_netSwing.Value.GetValue(__self);
		public static void SetEventRef_netSwing(this SweepNet __self, string value) => _eventRef_netSwing.Value.SetValue(__self, value);
		public static string GetEventRef_netCapture(this SweepNet __self) => _eventRef_netCapture.Value.GetValue(__self);
		public static void SetEventRef_netCapture(this SweepNet __self, string value) => _eventRef_netCapture.Value.SetValue(__self, value);
		public static PickupItem GetCurrentPickupTarget(this SweepNet __self) => _currentPickupTarget.Value.GetValue(__self);
		public static void SetCurrentPickupTarget(this SweepNet __self, PickupItem value) => _currentPickupTarget.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<SweepNet>> _Start757602046 =
				new System.Lazy<MethodAccessor<SweepNet>>(() => MethodAccessor<SweepNet>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<SweepNet>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<SweepNet>>(() => MethodAccessor<SweepNet>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<SweepNet>> _OnAnimationEvent3454057852 =
				new System.Lazy<MethodAccessor<SweepNet>>(() => MethodAccessor<SweepNet>.Create("OnAnimationEvent", typeof(string)));
		private static readonly System.Lazy<MethodAccessor<SweepNet>> _AttemptCaptureWithNet3468606003 =
				new System.Lazy<MethodAccessor<SweepNet>>(() => MethodAccessor<SweepNet>.Create("AttemptCaptureWithNet", typeof(UnityEngine.Collider)));
		private static readonly System.Lazy<MethodAccessor<SweepNet>> _PlaySuccessfullCaptureSound757602046 =
				new System.Lazy<MethodAccessor<SweepNet>>(() => MethodAccessor<SweepNet>.Create("PlaySuccessfullCaptureSound"));

		public static void Start(this SweepNet __self) => _Start757602046.Value.Invoke(__self);
		public static void OnDestroy(this SweepNet __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void OnAnimationEvent(this SweepNet __self, string parameter) => _OnAnimationEvent3454057852.Value.Invoke(__self, parameter);
		public static bool AttemptCaptureWithNet(this SweepNet __self, UnityEngine.Collider hit) => (bool)_AttemptCaptureWithNet3468606003.Value.Invoke(__self, hit);
		public static void PlaySuccessfullCaptureSound(this SweepNet __self) => _PlaySuccessfullCaptureSound757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_ThrowableComponent_Bow
	{

		private static readonly System.Lazy<FieldAccessor<ThrowableComponent_Bow, UnityEngine.Animator>> _bowAnimator =
				new System.Lazy<FieldAccessor<ThrowableComponent_Bow, UnityEngine.Animator>>(() => FieldAccessor<ThrowableComponent_Bow, UnityEngine.Animator>.Create("bowAnimator"));
		private static readonly System.Lazy<FieldAccessor<ThrowableComponent_Bow, FMODUnity.StudioEventEmitter>> _emitter_drawBow =
				new System.Lazy<FieldAccessor<ThrowableComponent_Bow, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<ThrowableComponent_Bow, FMODUnity.StudioEventEmitter>.Create("emitter_drawBow"));
		private static readonly System.Lazy<FieldAccessor<ThrowableComponent_Bow, FMODUnity.StudioEventEmitter>> _emitter_fireBow =
				new System.Lazy<FieldAccessor<ThrowableComponent_Bow, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<ThrowableComponent_Bow, FMODUnity.StudioEventEmitter>.Create("emitter_fireBow"));

		public static UnityEngine.Animator GetBowAnimator(this ThrowableComponent_Bow __self) => _bowAnimator.Value.GetValue(__self);
		public static void SetBowAnimator(this ThrowableComponent_Bow __self, UnityEngine.Animator value) => _bowAnimator.Value.SetValue(__self, value);
		public static FMODUnity.StudioEventEmitter GetEmitter_drawBow(this ThrowableComponent_Bow __self) => _emitter_drawBow.Value.GetValue(__self);
		public static void SetEmitter_drawBow(this ThrowableComponent_Bow __self, FMODUnity.StudioEventEmitter value) => _emitter_drawBow.Value.SetValue(__self, value);
		public static FMODUnity.StudioEventEmitter GetEmitter_fireBow(this ThrowableComponent_Bow __self) => _emitter_fireBow.Value.GetValue(__self);
		public static void SetEmitter_fireBow(this ThrowableComponent_Bow __self, FMODUnity.StudioEventEmitter value) => _emitter_fireBow.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<ThrowableComponent_Bow>> _Start757602046 =
				new System.Lazy<MethodAccessor<ThrowableComponent_Bow>>(() => MethodAccessor<ThrowableComponent_Bow>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<ThrowableComponent_Bow>> _OnNetworkProperties3462541703 =
				new System.Lazy<MethodAccessor<ThrowableComponent_Bow>>(() => MethodAccessor<ThrowableComponent_Bow>.Create("OnNetworkProperties", typeof(Message_Player_Update)));
		private static readonly System.Lazy<MethodAccessor<ThrowableComponent_Bow>> _CallStartChargeEvent757602046 =
				new System.Lazy<MethodAccessor<ThrowableComponent_Bow>>(() => MethodAccessor<ThrowableComponent_Bow>.Create("CallStartChargeEvent"));
		private static readonly System.Lazy<MethodAccessor<ThrowableComponent_Bow>> _ReleaseButton757602046 =
				new System.Lazy<MethodAccessor<ThrowableComponent_Bow>>(() => MethodAccessor<ThrowableComponent_Bow>.Create("ReleaseButton"));
		private static readonly System.Lazy<MethodAccessor<ThrowableComponent_Bow>> _CallThrowEvent1662569814 =
				new System.Lazy<MethodAccessor<ThrowableComponent_Bow>>(() => MethodAccessor<ThrowableComponent_Bow>.Create("CallThrowEvent", typeof(UnityEngine.Vector3), typeof(UnityEngine.Vector3)));
		private static readonly System.Lazy<MethodAccessor<ThrowableComponent_Bow>> _HandleLocalClient757602046 =
				new System.Lazy<MethodAccessor<ThrowableComponent_Bow>>(() => MethodAccessor<ThrowableComponent_Bow>.Create("HandleLocalClient"));

		public static void Start(this ThrowableComponent_Bow __self) => _Start757602046.Value.Invoke(__self);
		public static void OnNetworkProperties(this ThrowableComponent_Bow __self, Message_Player_Update msg) => _OnNetworkProperties3462541703.Value.Invoke(__self, msg);
		public static void CallStartChargeEvent(this ThrowableComponent_Bow __self) => _CallStartChargeEvent757602046.Value.Invoke(__self);
		public static void ReleaseButton(this ThrowableComponent_Bow __self) => _ReleaseButton757602046.Value.Invoke(__self);
		public static void CallThrowEvent(this ThrowableComponent_Bow __self, UnityEngine.Vector3 position, UnityEngine.Vector3 force) => _CallThrowEvent1662569814.Value.Invoke(__self, position, force);
		public static void HandleLocalClient(this ThrowableComponent_Bow __self) => _HandleLocalClient757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_ThrowableComponent_NetGun
	{

		private static readonly System.Lazy<FieldAccessor<ThrowableComponent_NetGun, UnityEngine.Animator>> _gunAnimator =
				new System.Lazy<FieldAccessor<ThrowableComponent_NetGun, UnityEngine.Animator>>(() => FieldAccessor<ThrowableComponent_NetGun, UnityEngine.Animator>.Create("gunAnimator"));
		private static readonly System.Lazy<FieldAccessor<ThrowableComponent_NetGun, float>> _originShotCooldown =
				new System.Lazy<FieldAccessor<ThrowableComponent_NetGun, float>>(() => FieldAccessor<ThrowableComponent_NetGun, float>.Create("originShotCooldown"));
		private static readonly System.Lazy<FieldAccessor<ThrowableComponent_NetGun, float>> _currentShotCooldown =
				new System.Lazy<FieldAccessor<ThrowableComponent_NetGun, float>>(() => FieldAccessor<ThrowableComponent_NetGun, float>.Create("currentShotCooldown"));
		private static readonly System.Lazy<FieldAccessor<ThrowableComponent_NetGun, bool>> _isCooldownsDeclining =
				new System.Lazy<FieldAccessor<ThrowableComponent_NetGun, bool>>(() => FieldAccessor<ThrowableComponent_NetGun, bool>.Create("isCooldownsDeclining"));
		private static readonly System.Lazy<FieldAccessor<ThrowableComponent_NetGun, float>> _reloadDuration =
				new System.Lazy<FieldAccessor<ThrowableComponent_NetGun, float>>(() => FieldAccessor<ThrowableComponent_NetGun, float>.Create("reloadDuration"));
		private static readonly System.Lazy<FieldAccessor<ThrowableComponent_NetGun, bool>> _isReloaded =
				new System.Lazy<FieldAccessor<ThrowableComponent_NetGun, bool>>(() => FieldAccessor<ThrowableComponent_NetGun, bool>.Create("isReloaded"));
		private static readonly System.Lazy<FieldAccessor<ThrowableComponent_NetGun, Throwable_Object>> _canisterShellObject =
				new System.Lazy<FieldAccessor<ThrowableComponent_NetGun, Throwable_Object>>(() => FieldAccessor<ThrowableComponent_NetGun, Throwable_Object>.Create("canisterShellObject"));
		private static readonly System.Lazy<FieldAccessor<ThrowableComponent_NetGun, UnityEngine.ParticleSystem>> _netGunFireParticleEffect =
				new System.Lazy<FieldAccessor<ThrowableComponent_NetGun, UnityEngine.ParticleSystem>>(() => FieldAccessor<ThrowableComponent_NetGun, UnityEngine.ParticleSystem>.Create("netGunFireParticleEffect"));
		private static readonly System.Lazy<FieldAccessor<ThrowableComponent_NetGun, UnityEngine.GameObject>> _canisterShellModel =
				new System.Lazy<FieldAccessor<ThrowableComponent_NetGun, UnityEngine.GameObject>>(() => FieldAccessor<ThrowableComponent_NetGun, UnityEngine.GameObject>.Create("canisterShellModel"));
		private static readonly System.Lazy<FieldAccessor<ThrowableComponent_NetGun, FMODUnity.StudioEventEmitter>> _eventEmitter_Reload =
				new System.Lazy<FieldAccessor<ThrowableComponent_NetGun, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<ThrowableComponent_NetGun, FMODUnity.StudioEventEmitter>.Create("eventEmitter_Reload"));
		private static readonly System.Lazy<FieldAccessor<ThrowableComponent_NetGun, FMODUnity.StudioEventEmitter>> _eventEmitter_Shoot =
				new System.Lazy<FieldAccessor<ThrowableComponent_NetGun, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<ThrowableComponent_NetGun, FMODUnity.StudioEventEmitter>.Create("eventEmitter_Shoot"));
		private static readonly System.Lazy<FieldAccessor<ThrowableComponent_NetGun, float>> _reloadSoundDelay =
				new System.Lazy<FieldAccessor<ThrowableComponent_NetGun, float>>(() => FieldAccessor<ThrowableComponent_NetGun, float>.Create("reloadSoundDelay"));
		private static readonly System.Lazy<FieldAccessor<ThrowableComponent_NetGun, bool>> _reloadStarted =
				new System.Lazy<FieldAccessor<ThrowableComponent_NetGun, bool>>(() => FieldAccessor<ThrowableComponent_NetGun, bool>.Create("reloadStarted"));

		public static UnityEngine.Animator GetGunAnimator(this ThrowableComponent_NetGun __self) => _gunAnimator.Value.GetValue(__self);
		public static void SetGunAnimator(this ThrowableComponent_NetGun __self, UnityEngine.Animator value) => _gunAnimator.Value.SetValue(__self, value);
		public static float GetOriginShotCooldown(this ThrowableComponent_NetGun __self) => _originShotCooldown.Value.GetValue(__self);
		public static void SetOriginShotCooldown(this ThrowableComponent_NetGun __self, float value) => _originShotCooldown.Value.SetValue(__self, value);
		public static float GetCurrentShotCooldown(this ThrowableComponent_NetGun __self) => _currentShotCooldown.Value.GetValue(__self);
		public static void SetCurrentShotCooldown(this ThrowableComponent_NetGun __self, float value) => _currentShotCooldown.Value.SetValue(__self, value);
		public static bool GetIsCooldownsDeclining(this ThrowableComponent_NetGun __self) => _isCooldownsDeclining.Value.GetValue(__self);
		public static void SetIsCooldownsDeclining(this ThrowableComponent_NetGun __self, bool value) => _isCooldownsDeclining.Value.SetValue(__self, value);
		public static float GetReloadDuration(this ThrowableComponent_NetGun __self) => _reloadDuration.Value.GetValue(__self);
		public static void SetReloadDuration(this ThrowableComponent_NetGun __self, float value) => _reloadDuration.Value.SetValue(__self, value);
		public static bool GetIsReloaded(this ThrowableComponent_NetGun __self) => _isReloaded.Value.GetValue(__self);
		public static void SetIsReloaded(this ThrowableComponent_NetGun __self, bool value) => _isReloaded.Value.SetValue(__self, value);
		public static Throwable_Object GetCanisterShellObject(this ThrowableComponent_NetGun __self) => _canisterShellObject.Value.GetValue(__self);
		public static void SetCanisterShellObject(this ThrowableComponent_NetGun __self, Throwable_Object value) => _canisterShellObject.Value.SetValue(__self, value);
		public static UnityEngine.ParticleSystem GetNetGunFireParticleEffect(this ThrowableComponent_NetGun __self) => _netGunFireParticleEffect.Value.GetValue(__self);
		public static void SetNetGunFireParticleEffect(this ThrowableComponent_NetGun __self, UnityEngine.ParticleSystem value) => _netGunFireParticleEffect.Value.SetValue(__self, value);
		public static UnityEngine.GameObject GetCanisterShellModel(this ThrowableComponent_NetGun __self) => _canisterShellModel.Value.GetValue(__self);
		public static void SetCanisterShellModel(this ThrowableComponent_NetGun __self, UnityEngine.GameObject value) => _canisterShellModel.Value.SetValue(__self, value);
		public static FMODUnity.StudioEventEmitter GetEventEmitter_Reload(this ThrowableComponent_NetGun __self) => _eventEmitter_Reload.Value.GetValue(__self);
		public static void SetEventEmitter_Reload(this ThrowableComponent_NetGun __self, FMODUnity.StudioEventEmitter value) => _eventEmitter_Reload.Value.SetValue(__self, value);
		public static FMODUnity.StudioEventEmitter GetEventEmitter_Shoot(this ThrowableComponent_NetGun __self) => _eventEmitter_Shoot.Value.GetValue(__self);
		public static void SetEventEmitter_Shoot(this ThrowableComponent_NetGun __self, FMODUnity.StudioEventEmitter value) => _eventEmitter_Shoot.Value.SetValue(__self, value);
		public static float GetReloadSoundDelay(this ThrowableComponent_NetGun __self) => _reloadSoundDelay.Value.GetValue(__self);
		public static void SetReloadSoundDelay(this ThrowableComponent_NetGun __self, float value) => _reloadSoundDelay.Value.SetValue(__self, value);
		public static bool GetReloadStarted(this ThrowableComponent_NetGun __self) => _reloadStarted.Value.GetValue(__self);
		public static void SetReloadStarted(this ThrowableComponent_NetGun __self, bool value) => _reloadStarted.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<ThrowableComponent_NetGun>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<ThrowableComponent_NetGun>>(() => MethodAccessor<ThrowableComponent_NetGun>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<ThrowableComponent_NetGun>> _Start757602046 =
				new System.Lazy<MethodAccessor<ThrowableComponent_NetGun>>(() => MethodAccessor<ThrowableComponent_NetGun>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<ThrowableComponent_NetGun>> _HandleLocalClient757602046 =
				new System.Lazy<MethodAccessor<ThrowableComponent_NetGun>>(() => MethodAccessor<ThrowableComponent_NetGun>.Create("HandleLocalClient"));
		private static readonly System.Lazy<MethodAccessor<ThrowableComponent_NetGun>> _CallThrowEvent1662569814 =
				new System.Lazy<MethodAccessor<ThrowableComponent_NetGun>>(() => MethodAccessor<ThrowableComponent_NetGun>.Create("CallThrowEvent", typeof(UnityEngine.Vector3), typeof(UnityEngine.Vector3)));
		private static readonly System.Lazy<MethodAccessor<ThrowableComponent_NetGun>> _StartReload757602046 =
				new System.Lazy<MethodAccessor<ThrowableComponent_NetGun>>(() => MethodAccessor<ThrowableComponent_NetGun>.Create("StartReload"));
		private static readonly System.Lazy<MethodAccessor<ThrowableComponent_NetGun>> _ReloadSoundDelayed757602046 =
				new System.Lazy<MethodAccessor<ThrowableComponent_NetGun>>(() => MethodAccessor<ThrowableComponent_NetGun>.Create("ReloadSoundDelayed"));
		private static readonly System.Lazy<MethodAccessor<ThrowableComponent_NetGun>> _SetIsReloaded757602046 =
				new System.Lazy<MethodAccessor<ThrowableComponent_NetGun>>(() => MethodAccessor<ThrowableComponent_NetGun>.Create("SetIsReloaded"));
		private static readonly System.Lazy<MethodAccessor<ThrowableComponent_NetGun>> _SetIsNotReloaded757602046 =
				new System.Lazy<MethodAccessor<ThrowableComponent_NetGun>>(() => MethodAccessor<ThrowableComponent_NetGun>.Create("SetIsNotReloaded"));
		private static readonly System.Lazy<MethodAccessor<ThrowableComponent_NetGun>> _SpawnShell565628958 =
				new System.Lazy<MethodAccessor<ThrowableComponent_NetGun>>(() => MethodAccessor<ThrowableComponent_NetGun>.Create("SpawnShell", typeof(uint), typeof(uint), typeof(UnityEngine.Vector3), typeof(UnityEngine.Vector3)));
		private static readonly System.Lazy<MethodAccessor<ThrowableComponent_NetGun>> _ResetShotCooldown757602046 =
				new System.Lazy<MethodAccessor<ThrowableComponent_NetGun>>(() => MethodAccessor<ThrowableComponent_NetGun>.Create("ResetShotCooldown"));
		private static readonly System.Lazy<MethodAccessor<ThrowableComponent_NetGun>> _SetCooldownDecreasingTrue757602046 =
				new System.Lazy<MethodAccessor<ThrowableComponent_NetGun>>(() => MethodAccessor<ThrowableComponent_NetGun>.Create("SetCooldownDecreasingTrue"));
		private static readonly System.Lazy<MethodAccessor<ThrowableComponent_NetGun>> _SetCooldownDecreasingFalse757602046 =
				new System.Lazy<MethodAccessor<ThrowableComponent_NetGun>>(() => MethodAccessor<ThrowableComponent_NetGun>.Create("SetCooldownDecreasingFalse"));
		private static readonly System.Lazy<MethodAccessor<ThrowableComponent_NetGun>> _OnNetworkProperties3462541703 =
				new System.Lazy<MethodAccessor<ThrowableComponent_NetGun>>(() => MethodAccessor<ThrowableComponent_NetGun>.Create("OnNetworkProperties", typeof(Message_Player_Update)));

		public static void OnDestroy(this ThrowableComponent_NetGun __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void Start(this ThrowableComponent_NetGun __self) => _Start757602046.Value.Invoke(__self);
		public static void HandleLocalClient(this ThrowableComponent_NetGun __self) => _HandleLocalClient757602046.Value.Invoke(__self);
		public static void CallThrowEvent(this ThrowableComponent_NetGun __self, UnityEngine.Vector3 position, UnityEngine.Vector3 force) => _CallThrowEvent1662569814.Value.Invoke(__self, position, force);
		public static void StartReload(this ThrowableComponent_NetGun __self) => _StartReload757602046.Value.Invoke(__self);
		public static void ReloadSoundDelayed(this ThrowableComponent_NetGun __self) => _ReloadSoundDelayed757602046.Value.Invoke(__self);
		public static void SetIsReloaded(this ThrowableComponent_NetGun __self) => _SetIsReloaded757602046.Value.Invoke(__self);
		public static void SetIsNotReloaded(this ThrowableComponent_NetGun __self) => _SetIsNotReloaded757602046.Value.Invoke(__self);
		public static void SpawnShell(this ThrowableComponent_NetGun __self, uint throwableIndex, uint throwablePickupIndex, UnityEngine.Vector3 pos, UnityEngine.Vector3 force) => _SpawnShell565628958.Value.Invoke(__self, throwableIndex, throwablePickupIndex, pos, force);
		public static void ResetShotCooldown(this ThrowableComponent_NetGun __self) => _ResetShotCooldown757602046.Value.Invoke(__self);
		public static void SetCooldownDecreasingTrue(this ThrowableComponent_NetGun __self) => _SetCooldownDecreasingTrue757602046.Value.Invoke(__self);
		public static void SetCooldownDecreasingFalse(this ThrowableComponent_NetGun __self) => _SetCooldownDecreasingFalse757602046.Value.Invoke(__self);
		public static void OnNetworkProperties(this ThrowableComponent_NetGun __self, Message_Player_Update msg) => _OnNetworkProperties3462541703.Value.Invoke(__self, msg);

	}

	public static class PrivateAccessor_UsableTool
	{

		private static readonly System.Lazy<FieldAccessor<UsableTool, System.Action>> _OnPressUseButton =
				new System.Lazy<FieldAccessor<UsableTool, System.Action>>(() => FieldAccessor<UsableTool, System.Action>.Create("OnPressUseButton"));
		private static readonly System.Lazy<FieldAccessor<UsableTool, System.Action>> _OnReleaseUseButton =
				new System.Lazy<FieldAccessor<UsableTool, System.Action>>(() => FieldAccessor<UsableTool, System.Action>.Create("OnReleaseUseButton"));
		private static readonly System.Lazy<FieldAccessor<UsableTool, bool>> _setItemHitAnimation =
				new System.Lazy<FieldAccessor<UsableTool, bool>>(() => FieldAccessor<UsableTool, bool>.Create("setItemHitAnimation"));
		private static readonly System.Lazy<FieldAccessor<UsableTool, Item_Base>> _thisItem =
				new System.Lazy<FieldAccessor<UsableTool, Item_Base>>(() => FieldAccessor<UsableTool, Item_Base>.Create("thisItem"));
		private static readonly System.Lazy<FieldAccessor<UsableTool, Network_Player>> _playerNetwork =
				new System.Lazy<FieldAccessor<UsableTool, Network_Player>>(() => FieldAccessor<UsableTool, Network_Player>.Create("playerNetwork"));
		private static readonly System.Lazy<FieldAccessor<UsableTool, PlayerAnimator>> _playerAnimator =
				new System.Lazy<FieldAccessor<UsableTool, PlayerAnimator>>(() => FieldAccessor<UsableTool, PlayerAnimator>.Create("playerAnimator"));
		private static readonly System.Lazy<FieldAccessor<UsableTool, bool>> _isHoldingUseButton =
				new System.Lazy<FieldAccessor<UsableTool, bool>>(() => FieldAccessor<UsableTool, bool>.Create("isHoldingUseButton"));

		public static System.Action GetOnPressUseButton(this UsableTool __self) => _OnPressUseButton.Value.GetValue(__self);
		public static void SetOnPressUseButton(this UsableTool __self, System.Action value) => _OnPressUseButton.Value.SetValue(__self, value);
		public static System.Action GetOnReleaseUseButton(this UsableTool __self) => _OnReleaseUseButton.Value.GetValue(__self);
		public static void SetOnReleaseUseButton(this UsableTool __self, System.Action value) => _OnReleaseUseButton.Value.SetValue(__self, value);
		public static bool GetSetItemHitAnimation(this UsableTool __self) => _setItemHitAnimation.Value.GetValue(__self);
		public static void SetSetItemHitAnimation(this UsableTool __self, bool value) => _setItemHitAnimation.Value.SetValue(__self, value);
		public static Item_Base GetThisItem(this UsableTool __self) => _thisItem.Value.GetValue(__self);
		public static void SetThisItem(this UsableTool __self, Item_Base value) => _thisItem.Value.SetValue(__self, value);
		public static Network_Player GetPlayerNetwork(this UsableTool __self) => _playerNetwork.Value.GetValue(__self);
		public static void SetPlayerNetwork(this UsableTool __self, Network_Player value) => _playerNetwork.Value.SetValue(__self, value);
		public static PlayerAnimator GetPlayerAnimator(this UsableTool __self) => _playerAnimator.Value.GetValue(__self);
		public static void SetPlayerAnimator(this UsableTool __self, PlayerAnimator value) => _playerAnimator.Value.SetValue(__self, value);
		public static bool GetIsHoldingUseButton(this UsableTool __self) => _isHoldingUseButton.Value.GetValue(__self);
		public static void SetIsHoldingUseButton(this UsableTool __self, bool value) => _isHoldingUseButton.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<UsableTool>> _Start757602046 =
				new System.Lazy<MethodAccessor<UsableTool>>(() => MethodAccessor<UsableTool>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<UsableTool>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<UsableTool>>(() => MethodAccessor<UsableTool>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<UsableTool>> _Update757602046 =
				new System.Lazy<MethodAccessor<UsableTool>>(() => MethodAccessor<UsableTool>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<UsableTool>> _OnToolSelect757602046 =
				new System.Lazy<MethodAccessor<UsableTool>>(() => MethodAccessor<UsableTool>.Create("OnToolSelect"));
		private static readonly System.Lazy<MethodAccessor<UsableTool>> _OnToolDeSelect757602046 =
				new System.Lazy<MethodAccessor<UsableTool>>(() => MethodAccessor<UsableTool>.Create("OnToolDeSelect"));
		private static readonly System.Lazy<MethodAccessor<UsableTool>> _OnToolUse757602046 =
				new System.Lazy<MethodAccessor<UsableTool>>(() => MethodAccessor<UsableTool>.Create("OnToolUse"));
		private static readonly System.Lazy<MethodAccessor<UsableTool>> _OnToolResetUse757602046 =
				new System.Lazy<MethodAccessor<UsableTool>>(() => MethodAccessor<UsableTool>.Create("OnToolResetUse"));

		public static void Start(this UsableTool __self) => _Start757602046.Value.Invoke(__self);
		public static void OnDestroy(this UsableTool __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static bool Update(this UsableTool __self) => (bool)_Update757602046.Value.Invoke(__self);
		public static void OnToolSelect(this UsableTool __self) => _OnToolSelect757602046.Value.Invoke(__self);
		public static void OnToolDeSelect(this UsableTool __self) => _OnToolDeSelect757602046.Value.Invoke(__self);
		public static void OnToolUse(this UsableTool __self) => _OnToolUse757602046.Value.Invoke(__self);
		public static void OnToolResetUse(this UsableTool __self) => _OnToolResetUse757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_PlayerItemManager
	{

		private static readonly System.Lazy<FieldAccessor<PlayerItemManager, Network_Player>> _playerNetwork =
				new System.Lazy<FieldAccessor<PlayerItemManager, Network_Player>>(() => FieldAccessor<PlayerItemManager, Network_Player>.Create("playerNetwork"));

		public static Network_Player GetPlayerNetwork(this PlayerItemManager __self) => _playerNetwork.Value.GetValue(__self);
		public static void SetPlayerNetwork(this PlayerItemManager __self, Network_Player value) => _playerNetwork.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<PlayerItemManager>> _Awake757602046 =
				new System.Lazy<MethodAccessor<PlayerItemManager>>(() => MethodAccessor<PlayerItemManager>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<PlayerItemManager>> _SelectUsableClient3436837919 =
				new System.Lazy<MethodAccessor<PlayerItemManager>>(() => MethodAccessor<PlayerItemManager>.Create("SelectUsableClient", typeof(Item_Base)));
		private static readonly System.Lazy<MethodAccessor<PlayerItemManager>> _SwitchItem3648100504 =
				new System.Lazy<MethodAccessor<PlayerItemManager>>(() => MethodAccessor<PlayerItemManager>.Create("SwitchItem", typeof(Item_Base), typeof(float)));

		public static void Awake(this PlayerItemManager __self) => _Awake757602046.Value.Invoke(__self);
		public static void SelectUsableClient(this PlayerItemManager __self, Item_Base item) => _SelectUsableClient3436837919.Value.Invoke(__self, item);
		public static System.Collections.IEnumerator SwitchItem(this PlayerItemManager __self, Item_Base newItem, float timeDelay) => (System.Collections.IEnumerator)_SwitchItem3648100504.Value.Invoke(__self, newItem, timeDelay);

	}

	public static class Private_PlayerItemManager
	{

		private static readonly System.Lazy<StaticFieldAccessor<bool>> _isBusy =
				new System.Lazy<StaticFieldAccessor<bool>>(() => StaticFieldAccessor<bool>.Create(typeof(PlayerItemManager), "isBusy"));

		public static bool GetIsBusy() => _isBusy.Value.GetValue();
		public static void SetIsBusy(bool value) => _isBusy.Value.SetValue(value);

	}

	public static class PrivateAccessor_UseItemController
	{

		private static readonly System.Lazy<FieldAccessor<UseItemController, Network_Player>> _playerNetwork =
				new System.Lazy<FieldAccessor<UseItemController, Network_Player>>(() => FieldAccessor<UseItemController, Network_Player>.Create("playerNetwork"));
		private static readonly System.Lazy<FieldAccessor<UseItemController, PlayerAnimator>> _playerAnimator =
				new System.Lazy<FieldAccessor<UseItemController, PlayerAnimator>>(() => FieldAccessor<UseItemController, PlayerAnimator>.Create("playerAnimator"));
		private static readonly System.Lazy<FieldAccessor<UseItemController, Item_Base>> _usableItem =
				new System.Lazy<FieldAccessor<UseItemController, Item_Base>>(() => FieldAccessor<UseItemController, Item_Base>.Create("usableItem"));
		private static readonly System.Lazy<FieldAccessor<UseItemController, System.Collections.Generic.Dictionary<string, ItemConnection>>> _connectionDictionary =
				new System.Lazy<FieldAccessor<UseItemController, System.Collections.Generic.Dictionary<string, ItemConnection>>>(() => FieldAccessor<UseItemController, System.Collections.Generic.Dictionary<string, ItemConnection>>.Create("connectionDictionary"));
		private static readonly System.Lazy<FieldAccessor<UseItemController, ItemConnection>> _activeObject =
				new System.Lazy<FieldAccessor<UseItemController, ItemConnection>>(() => FieldAccessor<UseItemController, ItemConnection>.Create("activeObject"));
		private static readonly System.Lazy<FieldAccessor<UseItemController, bool>> _canUse =
				new System.Lazy<FieldAccessor<UseItemController, bool>>(() => FieldAccessor<UseItemController, bool>.Create("canUse"));
		private static readonly System.Lazy<FieldAccessor<UseItemController, FMODUnity.StudioEventEmitter>> _SoundEmitter_Equip =
				new System.Lazy<FieldAccessor<UseItemController, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<UseItemController, FMODUnity.StudioEventEmitter>.Create("SoundEmitter_Equip"));

		public static Network_Player GetPlayerNetwork(this UseItemController __self) => _playerNetwork.Value.GetValue(__self);
		public static void SetPlayerNetwork(this UseItemController __self, Network_Player value) => _playerNetwork.Value.SetValue(__self, value);
		public static PlayerAnimator GetPlayerAnimator(this UseItemController __self) => _playerAnimator.Value.GetValue(__self);
		public static void SetPlayerAnimator(this UseItemController __self, PlayerAnimator value) => _playerAnimator.Value.SetValue(__self, value);
		public static Item_Base GetUsableItem(this UseItemController __self) => _usableItem.Value.GetValue(__self);
		public static void SetUsableItem(this UseItemController __self, Item_Base value) => _usableItem.Value.SetValue(__self, value);
		public static System.Collections.Generic.Dictionary<string, ItemConnection> GetConnectionDictionary(this UseItemController __self) => _connectionDictionary.Value.GetValue(__self);
		public static void SetConnectionDictionary(this UseItemController __self, System.Collections.Generic.Dictionary<string, ItemConnection> value) => _connectionDictionary.Value.SetValue(__self, value);
		public static ItemConnection GetActiveObject(this UseItemController __self) => _activeObject.Value.GetValue(__self);
		public static void SetActiveObject(this UseItemController __self, ItemConnection value) => _activeObject.Value.SetValue(__self, value);
		public static bool GetCanUse(this UseItemController __self) => _canUse.Value.GetValue(__self);
		public static void SetCanUse(this UseItemController __self, bool value) => _canUse.Value.SetValue(__self, value);
		public static FMODUnity.StudioEventEmitter GetSoundEmitter_Equip(this UseItemController __self) => _SoundEmitter_Equip.Value.GetValue(__self);
		public static void SetSoundEmitter_Equip(this UseItemController __self, FMODUnity.StudioEventEmitter value) => _SoundEmitter_Equip.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<UseItemController>> _Awake757602046 =
				new System.Lazy<MethodAccessor<UseItemController>>(() => MethodAccessor<UseItemController>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<UseItemController>> _Update757602046 =
				new System.Lazy<MethodAccessor<UseItemController>>(() => MethodAccessor<UseItemController>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<UseItemController>> _Use757602046 =
				new System.Lazy<MethodAccessor<UseItemController>>(() => MethodAccessor<UseItemController>.Create("Use"));
		private static readonly System.Lazy<MethodAccessor<UseItemController>> _ResetUse684082568 =
				new System.Lazy<MethodAccessor<UseItemController>>(() => MethodAccessor<UseItemController>.Create("ResetUse", typeof(float), typeof(Item_Base)));
		private static readonly System.Lazy<MethodAccessor<UseItemController>> _ConsumeStacks3697449403 =
				new System.Lazy<MethodAccessor<UseItemController>>(() => MethodAccessor<UseItemController>.Create("ConsumeStacks", typeof(int), typeof(float)));

		public static void Awake(this UseItemController __self) => _Awake757602046.Value.Invoke(__self);
		public static void Update(this UseItemController __self) => _Update757602046.Value.Invoke(__self);
		public static void Use(this UseItemController __self) => _Use757602046.Value.Invoke(__self);
		public static System.Collections.IEnumerator ResetUse(this UseItemController __self, float timeDelay, Item_Base usableItem) => (System.Collections.IEnumerator)_ResetUse684082568.Value.Invoke(__self, timeDelay, usableItem);
		public static System.Collections.IEnumerator ConsumeStacks(this UseItemController __self, int stacksToRemove, float timeDelay) => (System.Collections.IEnumerator)_ConsumeStacks3697449403.Value.Invoke(__self, stacksToRemove, timeDelay);

	}

	public static class PrivateAccessor_BrushAssetPainterConnection
	{

		private static readonly System.Lazy<FieldAccessor<BrushAssetPainterConnection, System.Collections.Generic.List<UnityEngine.Transform>>> _paintedObjects =
				new System.Lazy<FieldAccessor<BrushAssetPainterConnection, System.Collections.Generic.List<UnityEngine.Transform>>>(() => FieldAccessor<BrushAssetPainterConnection, System.Collections.Generic.List<UnityEngine.Transform>>.Create("paintedObjects"));

		public static System.Collections.Generic.List<UnityEngine.Transform> GetPaintedObjects(this BrushAssetPainterConnection __self) => _paintedObjects.Value.GetValue(__self);
		public static void SetPaintedObjects(this BrushAssetPainterConnection __self, System.Collections.Generic.List<UnityEngine.Transform> value) => _paintedObjects.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_Buoyancy
	{

		private static readonly System.Lazy<FieldAccessor<Buoyancy, float>> _lerpSpeed =
				new System.Lazy<FieldAccessor<Buoyancy, float>>(() => FieldAccessor<Buoyancy, float>.Create("lerpSpeed"));
		private static readonly System.Lazy<FieldAccessor<Buoyancy, RaftBounds>> _raftBounds =
				new System.Lazy<FieldAccessor<Buoyancy, RaftBounds>>(() => FieldAccessor<Buoyancy, RaftBounds>.Create("raftBounds"));
		private static readonly System.Lazy<FieldAccessor<Buoyancy, UnityEngine.Transform>> _lockedPivot =
				new System.Lazy<FieldAccessor<Buoyancy, UnityEngine.Transform>>(() => FieldAccessor<Buoyancy, UnityEngine.Transform>.Create("lockedPivot"));
		private static readonly System.Lazy<FieldAccessor<Buoyancy, UnityEngine.Transform>> _rotatePivot =
				new System.Lazy<FieldAccessor<Buoyancy, UnityEngine.Transform>>(() => FieldAccessor<Buoyancy, UnityEngine.Transform>.Create("rotatePivot"));
		private static readonly System.Lazy<FieldAccessor<Buoyancy, UnityEngine.Transform>> _pointL =
				new System.Lazy<FieldAccessor<Buoyancy, UnityEngine.Transform>>(() => FieldAccessor<Buoyancy, UnityEngine.Transform>.Create("pointL"));
		private static readonly System.Lazy<FieldAccessor<Buoyancy, UnityEngine.Transform>> _pointR =
				new System.Lazy<FieldAccessor<Buoyancy, UnityEngine.Transform>>(() => FieldAccessor<Buoyancy, UnityEngine.Transform>.Create("pointR"));
		private static readonly System.Lazy<FieldAccessor<Buoyancy, UnityEngine.Transform>> _pointT =
				new System.Lazy<FieldAccessor<Buoyancy, UnityEngine.Transform>>(() => FieldAccessor<Buoyancy, UnityEngine.Transform>.Create("pointT"));
		private static readonly System.Lazy<FieldAccessor<Buoyancy, UnityEngine.Transform>> _pointB =
				new System.Lazy<FieldAccessor<Buoyancy, UnityEngine.Transform>>(() => FieldAccessor<Buoyancy, UnityEngine.Transform>.Create("pointB"));
		private static readonly System.Lazy<FieldAccessor<Buoyancy, UnityEngine.Transform>> _pointC =
				new System.Lazy<FieldAccessor<Buoyancy, UnityEngine.Transform>>(() => FieldAccessor<Buoyancy, UnityEngine.Transform>.Create("pointC"));

		public static float GetLerpSpeed(this Buoyancy __self) => _lerpSpeed.Value.GetValue(__self);
		public static void SetLerpSpeed(this Buoyancy __self, float value) => _lerpSpeed.Value.SetValue(__self, value);
		public static RaftBounds GetRaftBounds(this Buoyancy __self) => _raftBounds.Value.GetValue(__self);
		public static void SetRaftBounds(this Buoyancy __self, RaftBounds value) => _raftBounds.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetLockedPivot(this Buoyancy __self) => _lockedPivot.Value.GetValue(__self);
		public static void SetLockedPivot(this Buoyancy __self, UnityEngine.Transform value) => _lockedPivot.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetRotatePivot(this Buoyancy __self) => _rotatePivot.Value.GetValue(__self);
		public static void SetRotatePivot(this Buoyancy __self, UnityEngine.Transform value) => _rotatePivot.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetPointL(this Buoyancy __self) => _pointL.Value.GetValue(__self);
		public static void SetPointL(this Buoyancy __self, UnityEngine.Transform value) => _pointL.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetPointR(this Buoyancy __self) => _pointR.Value.GetValue(__self);
		public static void SetPointR(this Buoyancy __self, UnityEngine.Transform value) => _pointR.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetPointT(this Buoyancy __self) => _pointT.Value.GetValue(__self);
		public static void SetPointT(this Buoyancy __self, UnityEngine.Transform value) => _pointT.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetPointB(this Buoyancy __self) => _pointB.Value.GetValue(__self);
		public static void SetPointB(this Buoyancy __self, UnityEngine.Transform value) => _pointB.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetPointC(this Buoyancy __self) => _pointC.Value.GetValue(__self);
		public static void SetPointC(this Buoyancy __self, UnityEngine.Transform value) => _pointC.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Buoyancy>> _Awake757602046 =
				new System.Lazy<MethodAccessor<Buoyancy>>(() => MethodAccessor<Buoyancy>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<Buoyancy>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<Buoyancy>>(() => MethodAccessor<Buoyancy>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<Buoyancy>> _Update757602046 =
				new System.Lazy<MethodAccessor<Buoyancy>>(() => MethodAccessor<Buoyancy>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<Buoyancy>> _RefreshChildrenToHolderPosition757602046 =
				new System.Lazy<MethodAccessor<Buoyancy>>(() => MethodAccessor<Buoyancy>.Create("RefreshChildrenToHolderPosition"));
		private static readonly System.Lazy<MethodAccessor<Buoyancy>> _SetBuoyancyPointPosition1670445263 =
				new System.Lazy<MethodAccessor<Buoyancy>>(() => MethodAccessor<Buoyancy>.Create("SetBuoyancyPointPosition", typeof(UnityEngine.Transform), typeof(UnityEngine.Vector3)));
		private static readonly System.Lazy<MethodAccessor<Buoyancy>> _RefreshPointsToBounds757602046 =
				new System.Lazy<MethodAccessor<Buoyancy>>(() => MethodAccessor<Buoyancy>.Create("RefreshPointsToBounds"));
		private static readonly System.Lazy<MethodAccessor<Buoyancy>> _OnBoundsUpdate757602046 =
				new System.Lazy<MethodAccessor<Buoyancy>>(() => MethodAccessor<Buoyancy>.Create("OnBoundsUpdate"));

		public static void Awake(this Buoyancy __self) => _Awake757602046.Value.Invoke(__self);
		public static void OnDestroy(this Buoyancy __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void Update(this Buoyancy __self) => _Update757602046.Value.Invoke(__self);
		public static void RefreshChildrenToHolderPosition(this Buoyancy __self) => _RefreshChildrenToHolderPosition757602046.Value.Invoke(__self);
		public static void SetBuoyancyPointPosition(this Buoyancy __self, UnityEngine.Transform point, UnityEngine.Vector3 newPos) => _SetBuoyancyPointPosition1670445263.Value.Invoke(__self, point, newPos);
		public static void RefreshPointsToBounds(this Buoyancy __self) => _RefreshPointsToBounds757602046.Value.Invoke(__self);
		public static void OnBoundsUpdate(this Buoyancy __self) => _OnBoundsUpdate757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Raft
	{

		private static readonly System.Lazy<FieldAccessor<Raft, int>> __anchorCount =
				new System.Lazy<FieldAccessor<Raft, int>>(() => FieldAccessor<Raft, int>.Create("_anchorCount"));
		private static readonly System.Lazy<FieldAccessor<Raft, float>> _currentMovementSpeed =
				new System.Lazy<FieldAccessor<Raft, float>>(() => FieldAccessor<Raft, float>.Create("currentMovementSpeed"));
		private static readonly System.Lazy<FieldAccessor<Raft, float>> _networkLerpSpeed =
				new System.Lazy<FieldAccessor<Raft, float>>(() => FieldAccessor<Raft, float>.Create("networkLerpSpeed"));
		private static readonly System.Lazy<FieldAccessor<Raft, float>> _maxDistanceFromAnchorPoint =
				new System.Lazy<FieldAccessor<Raft, float>>(() => FieldAccessor<Raft, float>.Create("maxDistanceFromAnchorPoint"));
		private static readonly System.Lazy<FieldAccessor<Raft, UnityEngine.Rigidbody>> _body =
				new System.Lazy<FieldAccessor<Raft, UnityEngine.Rigidbody>>(() => FieldAccessor<Raft, UnityEngine.Rigidbody>.Create("body"));
		private static readonly System.Lazy<FieldAccessor<Raft, Buoyancy>> _buoyancy =
				new System.Lazy<FieldAccessor<Raft, Buoyancy>>(() => FieldAccessor<Raft, Buoyancy>.Create("buoyancy"));
		private static readonly System.Lazy<FieldAccessor<Raft, string>> _eventRef_anchored =
				new System.Lazy<FieldAccessor<Raft, string>>(() => FieldAccessor<Raft, string>.Create("eventRef_anchored"));
		private static readonly System.Lazy<FieldAccessor<Raft, FMODUnity.StudioEventEmitter>> _eventEmitter_idle =
				new System.Lazy<FieldAccessor<Raft, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<Raft, FMODUnity.StudioEventEmitter>.Create("eventEmitter_idle"));
		private static readonly System.Lazy<FieldAccessor<Raft, float>> _speed =
				new System.Lazy<FieldAccessor<Raft, float>>(() => FieldAccessor<Raft, float>.Create("speed"));
		private static readonly System.Lazy<FieldAccessor<Raft, Raft_Network>> _network =
				new System.Lazy<FieldAccessor<Raft, Raft_Network>>(() => FieldAccessor<Raft, Raft_Network>.Create("network"));
		private static readonly System.Lazy<FieldAccessor<Raft, UnityEngine.Vector3>> _networkPosition =
				new System.Lazy<FieldAccessor<Raft, UnityEngine.Vector3>>(() => FieldAccessor<Raft, UnityEngine.Vector3>.Create("networkPosition"));
		private static readonly System.Lazy<FieldAccessor<Raft, float>> _networkYRot =
				new System.Lazy<FieldAccessor<Raft, float>>(() => FieldAccessor<Raft, float>.Create("networkYRot"));
		private static readonly System.Lazy<FieldAccessor<Raft, float>> _networkVelocity =
				new System.Lazy<FieldAccessor<Raft, float>>(() => FieldAccessor<Raft, float>.Create("networkVelocity"));
		private static readonly System.Lazy<FieldAccessor<Raft, Network_Player>> _localPlayer =
				new System.Lazy<FieldAccessor<Raft, Network_Player>>(() => FieldAccessor<Raft, Network_Player>.Create("localPlayer"));
		private static readonly System.Lazy<FieldAccessor<Raft, UnityEngine.Vector3>> _previousPosition =
				new System.Lazy<FieldAccessor<Raft, UnityEngine.Vector3>>(() => FieldAccessor<Raft, UnityEngine.Vector3>.Create("previousPosition"));
		private static readonly System.Lazy<FieldAccessor<Raft, UnityEngine.Vector3>> _moveDirection =
				new System.Lazy<FieldAccessor<Raft, UnityEngine.Vector3>>(() => FieldAccessor<Raft, UnityEngine.Vector3>.Create("moveDirection"));
		private static readonly System.Lazy<FieldAccessor<Raft, UnityEngine.Vector3>> _anchorPosition =
				new System.Lazy<FieldAccessor<Raft, UnityEngine.Vector3>>(() => FieldAccessor<Raft, UnityEngine.Vector3>.Create("anchorPosition"));
		private static readonly System.Lazy<FieldAccessor<Raft, UnityEngine.Vector3>> _creativeTargetPos =
				new System.Lazy<FieldAccessor<Raft, UnityEngine.Vector3>>(() => FieldAccessor<Raft, UnityEngine.Vector3>.Create("creativeTargetPos"));

		public static int Get_anchorCount(this Raft __self) => __anchorCount.Value.GetValue(__self);
		public static void Set_anchorCount(this Raft __self, int value) => __anchorCount.Value.SetValue(__self, value);
		public static float GetCurrentMovementSpeed(this Raft __self) => _currentMovementSpeed.Value.GetValue(__self);
		public static void SetCurrentMovementSpeed(this Raft __self, float value) => _currentMovementSpeed.Value.SetValue(__self, value);
		public static float GetNetworkLerpSpeed(this Raft __self) => _networkLerpSpeed.Value.GetValue(__self);
		public static void SetNetworkLerpSpeed(this Raft __self, float value) => _networkLerpSpeed.Value.SetValue(__self, value);
		public static float GetMaxDistanceFromAnchorPoint(this Raft __self) => _maxDistanceFromAnchorPoint.Value.GetValue(__self);
		public static void SetMaxDistanceFromAnchorPoint(this Raft __self, float value) => _maxDistanceFromAnchorPoint.Value.SetValue(__self, value);
		public static UnityEngine.Rigidbody GetBody(this Raft __self) => _body.Value.GetValue(__self);
		public static void SetBody(this Raft __self, UnityEngine.Rigidbody value) => _body.Value.SetValue(__self, value);
		public static Buoyancy GetBuoyancy(this Raft __self) => _buoyancy.Value.GetValue(__self);
		public static void SetBuoyancy(this Raft __self, Buoyancy value) => _buoyancy.Value.SetValue(__self, value);
		public static string GetEventRef_anchored(this Raft __self) => _eventRef_anchored.Value.GetValue(__self);
		public static void SetEventRef_anchored(this Raft __self, string value) => _eventRef_anchored.Value.SetValue(__self, value);
		public static FMODUnity.StudioEventEmitter GetEventEmitter_idle(this Raft __self) => _eventEmitter_idle.Value.GetValue(__self);
		public static void SetEventEmitter_idle(this Raft __self, FMODUnity.StudioEventEmitter value) => _eventEmitter_idle.Value.SetValue(__self, value);
		public static float GetSpeed(this Raft __self) => _speed.Value.GetValue(__self);
		public static void SetSpeed(this Raft __self, float value) => _speed.Value.SetValue(__self, value);
		public static Raft_Network GetNetwork(this Raft __self) => _network.Value.GetValue(__self);
		public static void SetNetwork(this Raft __self, Raft_Network value) => _network.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetNetworkPosition(this Raft __self) => _networkPosition.Value.GetValue(__self);
		public static void SetNetworkPosition(this Raft __self, UnityEngine.Vector3 value) => _networkPosition.Value.SetValue(__self, value);
		public static float GetNetworkYRot(this Raft __self) => _networkYRot.Value.GetValue(__self);
		public static void SetNetworkYRot(this Raft __self, float value) => _networkYRot.Value.SetValue(__self, value);
		public static float GetNetworkVelocity(this Raft __self) => _networkVelocity.Value.GetValue(__self);
		public static void SetNetworkVelocity(this Raft __self, float value) => _networkVelocity.Value.SetValue(__self, value);
		public static Network_Player GetLocalPlayer(this Raft __self) => _localPlayer.Value.GetValue(__self);
		public static void SetLocalPlayer(this Raft __self, Network_Player value) => _localPlayer.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetPreviousPosition(this Raft __self) => _previousPosition.Value.GetValue(__self);
		public static void SetPreviousPosition(this Raft __self, UnityEngine.Vector3 value) => _previousPosition.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetMoveDirection(this Raft __self) => _moveDirection.Value.GetValue(__self);
		public static void SetMoveDirection(this Raft __self, UnityEngine.Vector3 value) => _moveDirection.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetAnchorPosition(this Raft __self) => _anchorPosition.Value.GetValue(__self);
		public static void SetAnchorPosition(this Raft __self, UnityEngine.Vector3 value) => _anchorPosition.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetCreativeTargetPos(this Raft __self) => _creativeTargetPos.Value.GetValue(__self);
		public static void SetCreativeTargetPos(this Raft __self, UnityEngine.Vector3 value) => _creativeTargetPos.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Raft>> _Awake757602046 =
				new System.Lazy<MethodAccessor<Raft>>(() => MethodAccessor<Raft>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<Raft>> _Start757602046 =
				new System.Lazy<MethodAccessor<Raft>>(() => MethodAccessor<Raft>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<Raft>> _LateStart757602046 =
				new System.Lazy<MethodAccessor<Raft>>(() => MethodAccessor<Raft>.Create("LateStart"));
		private static readonly System.Lazy<MethodAccessor<Raft>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<Raft>>(() => MethodAccessor<Raft>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<Raft>> _Update757602046 =
				new System.Lazy<MethodAccessor<Raft>>(() => MethodAccessor<Raft>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<Raft>> _FixedUpdate757602046 =
				new System.Lazy<MethodAccessor<Raft>>(() => MethodAccessor<Raft>.Create("FixedUpdate"));
		private static readonly System.Lazy<MethodAccessor<Raft>> _OnDrawGizmos757602046 =
				new System.Lazy<MethodAccessor<Raft>>(() => MethodAccessor<Raft>.Create("OnDrawGizmos"));
		private static readonly System.Lazy<MethodAccessor<Raft>> _OnWorldShift3429126434 =
				new System.Lazy<MethodAccessor<Raft>>(() => MethodAccessor<Raft>.Create("OnWorldShift", typeof(UnityEngine.Vector3)));
		private static readonly System.Lazy<MethodAccessor<Raft>> _OnLoadComplete757602046 =
				new System.Lazy<MethodAccessor<Raft>>(() => MethodAccessor<Raft>.Create("OnLoadComplete"));
		private static readonly System.Lazy<MethodAccessor<Raft>> _BlockCreator_PlaceBlockCallStack1546667164 =
				new System.Lazy<MethodAccessor<Raft>>(() => MethodAccessor<Raft>.Create("BlockCreator_PlaceBlockCallStack", typeof(Block), typeof(Network_Player), typeof(bool), typeof(int)));
		private static readonly System.Lazy<MethodAccessor<Raft>> _ControlSpeed757602046 =
				new System.Lazy<MethodAccessor<Raft>>(() => MethodAccessor<Raft>.Create("ControlSpeed"));

		public static void Awake(this Raft __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this Raft __self) => _Start757602046.Value.Invoke(__self);
		public static void LateStart(this Raft __self) => _LateStart757602046.Value.Invoke(__self);
		public static void OnDestroy(this Raft __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void Update(this Raft __self) => _Update757602046.Value.Invoke(__self);
		public static void FixedUpdate(this Raft __self) => _FixedUpdate757602046.Value.Invoke(__self);
		public static void OnDrawGizmos(this Raft __self) => _OnDrawGizmos757602046.Value.Invoke(__self);
		public static void OnWorldShift(this Raft __self, UnityEngine.Vector3 shift) => _OnWorldShift3429126434.Value.Invoke(__self, shift);
		public static void OnLoadComplete(this Raft __self) => _OnLoadComplete757602046.Value.Invoke(__self);
		public static void BlockCreator_PlaceBlockCallStack(this Raft __self, Block block, Network_Player playerNetwork, bool replicating, int hotSlotIndex) => _BlockCreator_PlaceBlockCallStack1546667164.Value.Invoke(__self, block, playerNetwork, replicating, hotSlotIndex);
		public static void ControlSpeed(this Raft __self) => _ControlSpeed757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_RaftBounds
	{

		private static readonly System.Lazy<FieldAccessor<RaftBounds, float>> _width =
				new System.Lazy<FieldAccessor<RaftBounds, float>>(() => FieldAccessor<RaftBounds, float>.Create("width"));
		private static readonly System.Lazy<FieldAccessor<RaftBounds, float>> _length =
				new System.Lazy<FieldAccessor<RaftBounds, float>>(() => FieldAccessor<RaftBounds, float>.Create("length"));
		private static readonly System.Lazy<FieldAccessor<RaftBounds, int>> _foundationCount =
				new System.Lazy<FieldAccessor<RaftBounds, int>>(() => FieldAccessor<RaftBounds, int>.Create("foundationCount"));

		public static float GetWidth(this RaftBounds __self) => _width.Value.GetValue(__self);
		public static void SetWidth(this RaftBounds __self, float value) => _width.Value.SetValue(__self, value);
		public static float GetLength(this RaftBounds __self) => _length.Value.GetValue(__self);
		public static void SetLength(this RaftBounds __self, float value) => _length.Value.SetValue(__self, value);
		public static int GetFoundationCount(this RaftBounds __self) => _foundationCount.Value.GetValue(__self);
		public static void SetFoundationCount(this RaftBounds __self, int value) => _foundationCount.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<RaftBounds>> _Awake757602046 =
				new System.Lazy<MethodAccessor<RaftBounds>>(() => MethodAccessor<RaftBounds>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<RaftBounds>> _Start757602046 =
				new System.Lazy<MethodAccessor<RaftBounds>>(() => MethodAccessor<RaftBounds>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<RaftBounds>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<RaftBounds>>(() => MethodAccessor<RaftBounds>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<RaftBounds>> _OnDrawGizmosSelected757602046 =
				new System.Lazy<MethodAccessor<RaftBounds>>(() => MethodAccessor<RaftBounds>.Create("OnDrawGizmosSelected"));
		private static readonly System.Lazy<MethodAccessor<RaftBounds>> _BlockIndexCountsAsWeight3486186818 =
				new System.Lazy<MethodAccessor<RaftBounds>>(() => MethodAccessor<RaftBounds>.Create("BlockIndexCountsAsWeight", typeof(int)));
		private static readonly System.Lazy<MethodAccessor<RaftBounds>> _OnCreateBlock1546667164 =
				new System.Lazy<MethodAccessor<RaftBounds>>(() => MethodAccessor<RaftBounds>.Create("OnCreateBlock", typeof(Block), typeof(Network_Player), typeof(bool), typeof(int)));

		public static void Awake(this RaftBounds __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this RaftBounds __self) => _Start757602046.Value.Invoke(__self);
		public static void OnDestroy(this RaftBounds __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void OnDrawGizmosSelected(this RaftBounds __self) => _OnDrawGizmosSelected757602046.Value.Invoke(__self);
		public static bool BlockIndexCountsAsWeight(this RaftBounds __self, int index) => (bool)_BlockIndexCountsAsWeight3486186818.Value.Invoke(__self, index);
		public static void OnCreateBlock(this RaftBounds __self, Block block, Network_Player playerNetwork, bool replicating, int hotSlotIndex) => _OnCreateBlock1546667164.Value.Invoke(__self, block, playerNetwork, replicating, hotSlotIndex);

	}

	public static class PrivateAccessor_RaftColliderCompositioner
	{

		private static readonly System.Lazy<FieldAccessor<RaftColliderCompositioner, RaftCollisionManager>> _collMang =
				new System.Lazy<FieldAccessor<RaftColliderCompositioner, RaftCollisionManager>>(() => FieldAccessor<RaftColliderCompositioner, RaftCollisionManager>.Create("collMang"));
		private static readonly System.Lazy<FieldAccessor<RaftColliderCompositioner, UnityEngine.CompositeCollider2D>> _composite =
				new System.Lazy<FieldAccessor<RaftColliderCompositioner, UnityEngine.CompositeCollider2D>>(() => FieldAccessor<RaftColliderCompositioner, UnityEngine.CompositeCollider2D>.Create("composite"));
		private static readonly System.Lazy<FieldAccessor<RaftColliderCompositioner, System.Collections.Generic.List<UnityEngine.BoxCollider2D>>> _latestShapeColliders =
				new System.Lazy<FieldAccessor<RaftColliderCompositioner, System.Collections.Generic.List<UnityEngine.BoxCollider2D>>>(() => FieldAccessor<RaftColliderCompositioner, System.Collections.Generic.List<UnityEngine.BoxCollider2D>>.Create("latestShapeColliders"));

		public static RaftCollisionManager GetCollMang(this RaftColliderCompositioner __self) => _collMang.Value.GetValue(__self);
		public static void SetCollMang(this RaftColliderCompositioner __self, RaftCollisionManager value) => _collMang.Value.SetValue(__self, value);
		public static UnityEngine.CompositeCollider2D GetComposite(this RaftColliderCompositioner __self) => _composite.Value.GetValue(__self);
		public static void SetComposite(this RaftColliderCompositioner __self, UnityEngine.CompositeCollider2D value) => _composite.Value.SetValue(__self, value);
		public static System.Collections.Generic.List<UnityEngine.BoxCollider2D> GetLatestShapeColliders(this RaftColliderCompositioner __self) => _latestShapeColliders.Value.GetValue(__self);
		public static void SetLatestShapeColliders(this RaftColliderCompositioner __self, System.Collections.Generic.List<UnityEngine.BoxCollider2D> value) => _latestShapeColliders.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<RaftColliderCompositioner>> _Start757602046 =
				new System.Lazy<MethodAccessor<RaftColliderCompositioner>>(() => MethodAccessor<RaftColliderCompositioner>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<RaftColliderCompositioner>> _Update757602046 =
				new System.Lazy<MethodAccessor<RaftColliderCompositioner>>(() => MethodAccessor<RaftColliderCompositioner>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<RaftColliderCompositioner>> _UpdateColliderShape757602046 =
				new System.Lazy<MethodAccessor<RaftColliderCompositioner>>(() => MethodAccessor<RaftColliderCompositioner>.Create("UpdateColliderShape"));
		private static readonly System.Lazy<MethodAccessor<RaftColliderCompositioner>> _RemoveOldColliders757602046 =
				new System.Lazy<MethodAccessor<RaftColliderCompositioner>>(() => MethodAccessor<RaftColliderCompositioner>.Create("RemoveOldColliders"));
		private static readonly System.Lazy<MethodAccessor<RaftColliderCompositioner>> _Create2DCollider757602046 =
				new System.Lazy<MethodAccessor<RaftColliderCompositioner>>(() => MethodAccessor<RaftColliderCompositioner>.Create("Create2DCollider"));
		private static readonly System.Lazy<MethodAccessor<RaftColliderCompositioner>> _Create3DColliderFrom2D757602046 =
				new System.Lazy<MethodAccessor<RaftColliderCompositioner>>(() => MethodAccessor<RaftColliderCompositioner>.Create("Create3DColliderFrom2D"));

		public static void Start(this RaftColliderCompositioner __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this RaftColliderCompositioner __self) => _Update757602046.Value.Invoke(__self);
		public static void UpdateColliderShape(this RaftColliderCompositioner __self) => _UpdateColliderShape757602046.Value.Invoke(__self);
		public static void RemoveOldColliders(this RaftColliderCompositioner __self) => _RemoveOldColliders757602046.Value.Invoke(__self);
		public static void Create2DCollider(this RaftColliderCompositioner __self) => _Create2DCollider757602046.Value.Invoke(__self);
		public static void Create3DColliderFrom2D(this RaftColliderCompositioner __self) => _Create3DColliderFrom2D757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_MergeData
	{

		private static readonly System.Lazy<FieldAccessor<MergeData, UnityEngine.Vector2>> _dimensions =
				new System.Lazy<FieldAccessor<MergeData, UnityEngine.Vector2>>(() => FieldAccessor<MergeData, UnityEngine.Vector2>.Create("dimensions"));

		public static UnityEngine.Vector2 GetDimensions(this MergeData __self) => _dimensions.Value.GetValue(__self);
		public static void SetDimensions(this MergeData __self, UnityEngine.Vector2 value) => _dimensions.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_LineData
	{

		private static readonly System.Lazy<FieldAccessor<LineData, UnityEngine.Vector3>> _dir =
				new System.Lazy<FieldAccessor<LineData, UnityEngine.Vector3>>(() => FieldAccessor<LineData, UnityEngine.Vector3>.Create("dir"));

		public static UnityEngine.Vector3 GetDir(this LineData __self) => _dir.Value.GetValue(__self);
		public static void SetDir(this LineData __self, UnityEngine.Vector3 value) => _dir.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_RaftColliderPannkaka
	{

		private static readonly System.Lazy<FieldAccessor<RaftColliderPannkaka, UnityEngine.Transform>> _blockParent =
				new System.Lazy<FieldAccessor<RaftColliderPannkaka, UnityEngine.Transform>>(() => FieldAccessor<RaftColliderPannkaka, UnityEngine.Transform>.Create("blockParent"));
		private static readonly System.Lazy<FieldAccessor<RaftColliderPannkaka, UnityEngine.Transform>> _pannkaksParent =
				new System.Lazy<FieldAccessor<RaftColliderPannkaka, UnityEngine.Transform>>(() => FieldAccessor<RaftColliderPannkaka, UnityEngine.Transform>.Create("pannkaksParent"));
		private static readonly System.Lazy<FieldAccessor<RaftColliderPannkaka, RaftCollisionManager>> _collManager =
				new System.Lazy<FieldAccessor<RaftColliderPannkaka, RaftCollisionManager>>(() => FieldAccessor<RaftColliderPannkaka, RaftCollisionManager>.Create("collManager"));
		private static readonly System.Lazy<FieldAccessor<RaftColliderPannkaka, RaftBounds>> _raftBounds =
				new System.Lazy<FieldAccessor<RaftColliderPannkaka, RaftBounds>>(() => FieldAccessor<RaftColliderPannkaka, RaftBounds>.Create("raftBounds"));
		private static readonly System.Lazy<FieldAccessor<RaftColliderPannkaka, System.Collections.Generic.List<BlockData>>> _allBlocks =
				new System.Lazy<FieldAccessor<RaftColliderPannkaka, System.Collections.Generic.List<BlockData>>>(() => FieldAccessor<RaftColliderPannkaka, System.Collections.Generic.List<BlockData>>.Create("allBlocks"));
		private static readonly System.Lazy<FieldAccessor<RaftColliderPannkaka, System.Collections.Generic.List<LineData>>> _allLines =
				new System.Lazy<FieldAccessor<RaftColliderPannkaka, System.Collections.Generic.List<LineData>>>(() => FieldAccessor<RaftColliderPannkaka, System.Collections.Generic.List<LineData>>.Create("allLines"));
		private static readonly System.Lazy<FieldAccessor<RaftColliderPannkaka, System.Collections.Generic.List<BlockData>>> _mergedBlocks =
				new System.Lazy<FieldAccessor<RaftColliderPannkaka, System.Collections.Generic.List<BlockData>>>(() => FieldAccessor<RaftColliderPannkaka, System.Collections.Generic.List<BlockData>>.Create("mergedBlocks"));
		private static readonly System.Lazy<FieldAccessor<RaftColliderPannkaka, System.Collections.Generic.List<BlockData>>> _unmergedBlocks =
				new System.Lazy<FieldAccessor<RaftColliderPannkaka, System.Collections.Generic.List<BlockData>>>(() => FieldAccessor<RaftColliderPannkaka, System.Collections.Generic.List<BlockData>>.Create("unmergedBlocks"));
		private static readonly System.Lazy<FieldAccessor<RaftColliderPannkaka, System.Collections.Generic.List<MergeData>>> _mergeDatas =
				new System.Lazy<FieldAccessor<RaftColliderPannkaka, System.Collections.Generic.List<MergeData>>>(() => FieldAccessor<RaftColliderPannkaka, System.Collections.Generic.List<MergeData>>.Create("mergeDatas"));
		private static readonly System.Lazy<FieldAccessor<RaftColliderPannkaka, int>> _widthCount =
				new System.Lazy<FieldAccessor<RaftColliderPannkaka, int>>(() => FieldAccessor<RaftColliderPannkaka, int>.Create("widthCount"));
		private static readonly System.Lazy<FieldAccessor<RaftColliderPannkaka, int>> _lengthCount =
				new System.Lazy<FieldAccessor<RaftColliderPannkaka, int>>(() => FieldAccessor<RaftColliderPannkaka, int>.Create("lengthCount"));
		private static readonly System.Lazy<FieldAccessor<RaftColliderPannkaka, int>> _heightCount =
				new System.Lazy<FieldAccessor<RaftColliderPannkaka, int>>(() => FieldAccessor<RaftColliderPannkaka, int>.Create("heightCount"));

		public static UnityEngine.Transform GetBlockParent(this RaftColliderPannkaka __self) => _blockParent.Value.GetValue(__self);
		public static void SetBlockParent(this RaftColliderPannkaka __self, UnityEngine.Transform value) => _blockParent.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetPannkaksParent(this RaftColliderPannkaka __self) => _pannkaksParent.Value.GetValue(__self);
		public static void SetPannkaksParent(this RaftColliderPannkaka __self, UnityEngine.Transform value) => _pannkaksParent.Value.SetValue(__self, value);
		public static RaftCollisionManager GetCollManager(this RaftColliderPannkaka __self) => _collManager.Value.GetValue(__self);
		public static void SetCollManager(this RaftColliderPannkaka __self, RaftCollisionManager value) => _collManager.Value.SetValue(__self, value);
		public static RaftBounds GetRaftBounds(this RaftColliderPannkaka __self) => _raftBounds.Value.GetValue(__self);
		public static void SetRaftBounds(this RaftColliderPannkaka __self, RaftBounds value) => _raftBounds.Value.SetValue(__self, value);
		public static System.Collections.Generic.List<BlockData> GetAllBlocks(this RaftColliderPannkaka __self) => _allBlocks.Value.GetValue(__self);
		public static void SetAllBlocks(this RaftColliderPannkaka __self, System.Collections.Generic.List<BlockData> value) => _allBlocks.Value.SetValue(__self, value);
		public static System.Collections.Generic.List<LineData> GetAllLines(this RaftColliderPannkaka __self) => _allLines.Value.GetValue(__self);
		public static void SetAllLines(this RaftColliderPannkaka __self, System.Collections.Generic.List<LineData> value) => _allLines.Value.SetValue(__self, value);
		public static System.Collections.Generic.List<BlockData> GetMergedBlocks(this RaftColliderPannkaka __self) => _mergedBlocks.Value.GetValue(__self);
		public static void SetMergedBlocks(this RaftColliderPannkaka __self, System.Collections.Generic.List<BlockData> value) => _mergedBlocks.Value.SetValue(__self, value);
		public static System.Collections.Generic.List<BlockData> GetUnmergedBlocks(this RaftColliderPannkaka __self) => _unmergedBlocks.Value.GetValue(__self);
		public static void SetUnmergedBlocks(this RaftColliderPannkaka __self, System.Collections.Generic.List<BlockData> value) => _unmergedBlocks.Value.SetValue(__self, value);
		public static System.Collections.Generic.List<MergeData> GetMergeDatas(this RaftColliderPannkaka __self) => _mergeDatas.Value.GetValue(__self);
		public static void SetMergeDatas(this RaftColliderPannkaka __self, System.Collections.Generic.List<MergeData> value) => _mergeDatas.Value.SetValue(__self, value);
		public static int GetWidthCount(this RaftColliderPannkaka __self) => _widthCount.Value.GetValue(__self);
		public static void SetWidthCount(this RaftColliderPannkaka __self, int value) => _widthCount.Value.SetValue(__self, value);
		public static int GetLengthCount(this RaftColliderPannkaka __self) => _lengthCount.Value.GetValue(__self);
		public static void SetLengthCount(this RaftColliderPannkaka __self, int value) => _lengthCount.Value.SetValue(__self, value);
		public static int GetHeightCount(this RaftColliderPannkaka __self) => _heightCount.Value.GetValue(__self);
		public static void SetHeightCount(this RaftColliderPannkaka __self, int value) => _heightCount.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<RaftColliderPannkaka>> _Start757602046 =
				new System.Lazy<MethodAccessor<RaftColliderPannkaka>>(() => MethodAccessor<RaftColliderPannkaka>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<RaftColliderPannkaka>> _Update757602046 =
				new System.Lazy<MethodAccessor<RaftColliderPannkaka>>(() => MethodAccessor<RaftColliderPannkaka>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<RaftColliderPannkaka>> _PreWarmAllBlocks757602046 =
				new System.Lazy<MethodAccessor<RaftColliderPannkaka>>(() => MethodAccessor<RaftColliderPannkaka>.Create("PreWarmAllBlocks"));
		private static readonly System.Lazy<MethodAccessor<RaftColliderPannkaka>> _CreateLines3429126434 =
				new System.Lazy<MethodAccessor<RaftColliderPannkaka>>(() => MethodAccessor<RaftColliderPannkaka>.Create("CreateLines", typeof(UnityEngine.Vector3)));
		private static readonly System.Lazy<MethodAccessor<RaftColliderPannkaka>> _CheckLine3429941633 =
				new System.Lazy<MethodAccessor<RaftColliderPannkaka>>(() => MethodAccessor<RaftColliderPannkaka>.Create("CheckLine", typeof(LineData)));
		private static readonly System.Lazy<MethodAccessor<RaftColliderPannkaka>> _CreateLineCollider3429941633 =
				new System.Lazy<MethodAccessor<RaftColliderPannkaka>>(() => MethodAccessor<RaftColliderPannkaka>.Create("CreateLineCollider", typeof(LineData)));
		private static readonly System.Lazy<MethodAccessor<RaftColliderPannkaka>> _CreateMergeDataCollider3435196424 =
				new System.Lazy<MethodAccessor<RaftColliderPannkaka>>(() => MethodAccessor<RaftColliderPannkaka>.Create("CreateMergeDataCollider", typeof(MergeData)));
		private static readonly System.Lazy<MethodAccessor<RaftColliderPannkaka>> _MergeLines3469578056 =
				new System.Lazy<MethodAccessor<RaftColliderPannkaka>>(() => MethodAccessor<RaftColliderPannkaka>.Create("MergeLines", typeof(System.Collections.Generic.List<LineData>)));
		private static readonly System.Lazy<MethodAccessor<RaftColliderPannkaka>> _GetAverageLineLenght3469578056 =
				new System.Lazy<MethodAccessor<RaftColliderPannkaka>>(() => MethodAccessor<RaftColliderPannkaka>.Create("GetAverageLineLenght", typeof(System.Collections.Generic.List<LineData>)));
		private static readonly System.Lazy<MethodAccessor<RaftColliderPannkaka>> _ContainsGridPos3429126434 =
				new System.Lazy<MethodAccessor<RaftColliderPannkaka>>(() => MethodAccessor<RaftColliderPannkaka>.Create("ContainsGridPos", typeof(UnityEngine.Vector3)));
		private static readonly System.Lazy<MethodAccessor<RaftColliderPannkaka>> _GetBlockDataFromGridPos3429126434 =
				new System.Lazy<MethodAccessor<RaftColliderPannkaka>>(() => MethodAccessor<RaftColliderPannkaka>.Create("GetBlockDataFromGridPos", typeof(UnityEngine.Vector3)));

		public static void Start(this RaftColliderPannkaka __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this RaftColliderPannkaka __self) => _Update757602046.Value.Invoke(__self);
		public static void PreWarmAllBlocks(this RaftColliderPannkaka __self) => _PreWarmAllBlocks757602046.Value.Invoke(__self);
		public static void CreateLines(this RaftColliderPannkaka __self, UnityEngine.Vector3 p_startPos) => _CreateLines3429126434.Value.Invoke(__self, p_startPos);
		public static void CheckLine(this RaftColliderPannkaka __self, LineData p_Line) => _CheckLine3429941633.Value.Invoke(__self, p_Line);
		public static void CreateLineCollider(this RaftColliderPannkaka __self, LineData p_line) => _CreateLineCollider3429941633.Value.Invoke(__self, p_line);
		public static void CreateMergeDataCollider(this RaftColliderPannkaka __self, MergeData p_mergeData) => _CreateMergeDataCollider3435196424.Value.Invoke(__self, p_mergeData);
		public static void MergeLines(this RaftColliderPannkaka __self, System.Collections.Generic.List<LineData> p_lines) => _MergeLines3469578056.Value.Invoke(__self, p_lines);
		public static int GetAverageLineLenght(this RaftColliderPannkaka __self, System.Collections.Generic.List<LineData> p_lines) => (int)_GetAverageLineLenght3469578056.Value.Invoke(__self, p_lines);
		public static bool ContainsGridPos(this RaftColliderPannkaka __self, UnityEngine.Vector3 pos) => (bool)_ContainsGridPos3429126434.Value.Invoke(__self, pos);
		public static BlockData GetBlockDataFromGridPos(this RaftColliderPannkaka __self, UnityEngine.Vector3 pos) => (BlockData)_GetBlockDataFromGridPos3429126434.Value.Invoke(__self, pos);

	}

	public static class PrivateAccessor_RaftCollisionManager
	{

		private static readonly System.Lazy<FieldAccessor<RaftCollisionManager, UnityEngine.Rigidbody>> _body =
				new System.Lazy<FieldAccessor<RaftCollisionManager, UnityEngine.Rigidbody>>(() => FieldAccessor<RaftCollisionManager, UnityEngine.Rigidbody>.Create("body"));
		private static readonly System.Lazy<FieldAccessor<RaftCollisionManager, Buoyancy>> _buoyancy =
				new System.Lazy<FieldAccessor<RaftCollisionManager, Buoyancy>>(() => FieldAccessor<RaftCollisionManager, Buoyancy>.Create("buoyancy"));
		private static readonly System.Lazy<FieldAccessor<RaftCollisionManager, RaftBounds>> _raftBounds =
				new System.Lazy<FieldAccessor<RaftCollisionManager, RaftBounds>>(() => FieldAccessor<RaftCollisionManager, RaftBounds>.Create("raftBounds"));
		private static readonly System.Lazy<FieldAccessor<RaftCollisionManager, UnityEngine.Transform>> _blockParent =
				new System.Lazy<FieldAccessor<RaftCollisionManager, UnityEngine.Transform>>(() => FieldAccessor<RaftCollisionManager, UnityEngine.Transform>.Create("blockParent"));
		private static readonly System.Lazy<FieldAccessor<RaftCollisionManager, string>> _colliderPoolName =
				new System.Lazy<FieldAccessor<RaftCollisionManager, string>>(() => FieldAccessor<RaftCollisionManager, string>.Create("colliderPoolName"));
		private static readonly System.Lazy<FieldAccessor<RaftCollisionManager, float>> _foundationSizeY =
				new System.Lazy<FieldAccessor<RaftCollisionManager, float>>(() => FieldAccessor<RaftCollisionManager, float>.Create("foundationSizeY"));
		private static readonly System.Lazy<FieldAccessor<RaftCollisionManager, float>> _floorSizeY =
				new System.Lazy<FieldAccessor<RaftCollisionManager, float>>(() => FieldAccessor<RaftCollisionManager, float>.Create("floorSizeY"));
		private static readonly System.Lazy<FieldAccessor<RaftCollisionManager, PoolManager>> _poolManager =
				new System.Lazy<FieldAccessor<RaftCollisionManager, PoolManager>>(() => FieldAccessor<RaftCollisionManager, PoolManager>.Create("poolManager"));
		private static readonly System.Lazy<FieldAccessor<RaftCollisionManager, Raft_Network>> _network =
				new System.Lazy<FieldAccessor<RaftCollisionManager, Raft_Network>>(() => FieldAccessor<RaftCollisionManager, Raft_Network>.Create("network"));
		private static readonly System.Lazy<FieldAccessor<RaftCollisionManager, System.Collections.Generic.List<UnityEngine.Vector3>>> _blocks =
				new System.Lazy<FieldAccessor<RaftCollisionManager, System.Collections.Generic.List<UnityEngine.Vector3>>>(() => FieldAccessor<RaftCollisionManager, System.Collections.Generic.List<UnityEngine.Vector3>>.Create("blocks"));
		private static readonly System.Lazy<FieldAccessor<RaftCollisionManager, System.Collections.Generic.List<UnityEngine.BoxCollider>>> _currentColldiers =
				new System.Lazy<FieldAccessor<RaftCollisionManager, System.Collections.Generic.List<UnityEngine.BoxCollider>>>(() => FieldAccessor<RaftCollisionManager, System.Collections.Generic.List<UnityEngine.BoxCollider>>.Create("currentColldiers"));

		public static UnityEngine.Rigidbody GetBody(this RaftCollisionManager __self) => _body.Value.GetValue(__self);
		public static void SetBody(this RaftCollisionManager __self, UnityEngine.Rigidbody value) => _body.Value.SetValue(__self, value);
		public static Buoyancy GetBuoyancy(this RaftCollisionManager __self) => _buoyancy.Value.GetValue(__self);
		public static void SetBuoyancy(this RaftCollisionManager __self, Buoyancy value) => _buoyancy.Value.SetValue(__self, value);
		public static RaftBounds GetRaftBounds(this RaftCollisionManager __self) => _raftBounds.Value.GetValue(__self);
		public static void SetRaftBounds(this RaftCollisionManager __self, RaftBounds value) => _raftBounds.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetBlockParent(this RaftCollisionManager __self) => _blockParent.Value.GetValue(__self);
		public static void SetBlockParent(this RaftCollisionManager __self, UnityEngine.Transform value) => _blockParent.Value.SetValue(__self, value);
		public static string GetColliderPoolName(this RaftCollisionManager __self) => _colliderPoolName.Value.GetValue(__self);
		public static void SetColliderPoolName(this RaftCollisionManager __self, string value) => _colliderPoolName.Value.SetValue(__self, value);
		public static float GetFoundationSizeY(this RaftCollisionManager __self) => _foundationSizeY.Value.GetValue(__self);
		public static void SetFoundationSizeY(this RaftCollisionManager __self, float value) => _foundationSizeY.Value.SetValue(__self, value);
		public static float GetFloorSizeY(this RaftCollisionManager __self) => _floorSizeY.Value.GetValue(__self);
		public static void SetFloorSizeY(this RaftCollisionManager __self, float value) => _floorSizeY.Value.SetValue(__self, value);
		public static PoolManager GetPoolManager(this RaftCollisionManager __self) => _poolManager.Value.GetValue(__self);
		public static void SetPoolManager(this RaftCollisionManager __self, PoolManager value) => _poolManager.Value.SetValue(__self, value);
		public static Raft_Network GetNetwork(this RaftCollisionManager __self) => _network.Value.GetValue(__self);
		public static void SetNetwork(this RaftCollisionManager __self, Raft_Network value) => _network.Value.SetValue(__self, value);
		public static System.Collections.Generic.List<UnityEngine.Vector3> GetBlocks(this RaftCollisionManager __self) => _blocks.Value.GetValue(__self);
		public static void SetBlocks(this RaftCollisionManager __self, System.Collections.Generic.List<UnityEngine.Vector3> value) => _blocks.Value.SetValue(__self, value);
		public static System.Collections.Generic.List<UnityEngine.BoxCollider> GetCurrentColldiers(this RaftCollisionManager __self) => _currentColldiers.Value.GetValue(__self);
		public static void SetCurrentColldiers(this RaftCollisionManager __self, System.Collections.Generic.List<UnityEngine.BoxCollider> value) => _currentColldiers.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<RaftCollisionManager>> _Awake757602046 =
				new System.Lazy<MethodAccessor<RaftCollisionManager>>(() => MethodAccessor<RaftCollisionManager>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<RaftCollisionManager>> _Start757602046 =
				new System.Lazy<MethodAccessor<RaftCollisionManager>>(() => MethodAccessor<RaftCollisionManager>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<RaftCollisionManager>> _Update757602046 =
				new System.Lazy<MethodAccessor<RaftCollisionManager>>(() => MethodAccessor<RaftCollisionManager>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<RaftCollisionManager>> _FixedUpdate757602046 =
				new System.Lazy<MethodAccessor<RaftCollisionManager>>(() => MethodAccessor<RaftCollisionManager>.Create("FixedUpdate"));
		private static readonly System.Lazy<MethodAccessor<RaftCollisionManager>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<RaftCollisionManager>>(() => MethodAccessor<RaftCollisionManager>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<RaftCollisionManager>> _OnLoadComplete757602046 =
				new System.Lazy<MethodAccessor<RaftCollisionManager>>(() => MethodAccessor<RaftCollisionManager>.Create("OnLoadComplete"));
		private static readonly System.Lazy<MethodAccessor<RaftCollisionManager>> _UpdateGrid757602046 =
				new System.Lazy<MethodAccessor<RaftCollisionManager>>(() => MethodAccessor<RaftCollisionManager>.Create("UpdateGrid"));
		private static readonly System.Lazy<MethodAccessor<RaftCollisionManager>> _UpdateBoxLineFromBuildPos3429126434 =
				new System.Lazy<MethodAccessor<RaftCollisionManager>>(() => MethodAccessor<RaftCollisionManager>.Create("UpdateBoxLineFromBuildPos", typeof(UnityEngine.Vector3)));
		private static readonly System.Lazy<MethodAccessor<RaftCollisionManager>> _SetYPosition757602046 =
				new System.Lazy<MethodAccessor<RaftCollisionManager>>(() => MethodAccessor<RaftCollisionManager>.Create("SetYPosition"));
		private static readonly System.Lazy<MethodAccessor<RaftCollisionManager>> _ContainsGridPos3429126434 =
				new System.Lazy<MethodAccessor<RaftCollisionManager>>(() => MethodAccessor<RaftCollisionManager>.Create("ContainsGridPos", typeof(UnityEngine.Vector3)));
		private static readonly System.Lazy<MethodAccessor<RaftCollisionManager>> _RemoveGridPos3429126434 =
				new System.Lazy<MethodAccessor<RaftCollisionManager>>(() => MethodAccessor<RaftCollisionManager>.Create("RemoveGridPos", typeof(UnityEngine.Vector3)));
		private static readonly System.Lazy<MethodAccessor<RaftCollisionManager>> _GenerateColliderAbove3476701598 =
				new System.Lazy<MethodAccessor<RaftCollisionManager>>(() => MethodAccessor<RaftCollisionManager>.Create("GenerateColliderAbove", typeof(UnityEngine.Vector3), typeof(int), typeof(int)));
		private static readonly System.Lazy<MethodAccessor<RaftCollisionManager>> _GetColliderFromPos3429126434 =
				new System.Lazy<MethodAccessor<RaftCollisionManager>>(() => MethodAccessor<RaftCollisionManager>.Create("GetColliderFromPos", typeof(UnityEngine.Vector3)));
		private static readonly System.Lazy<MethodAccessor<RaftCollisionManager>> _OnAddWalkableBlock3457661511 =
				new System.Lazy<MethodAccessor<RaftCollisionManager>>(() => MethodAccessor<RaftCollisionManager>.Create("OnAddWalkableBlock", typeof(Block), typeof(bool)));
		private static readonly System.Lazy<MethodAccessor<RaftCollisionManager>> _OnRemoveWalkableBlock3416760334 =
				new System.Lazy<MethodAccessor<RaftCollisionManager>>(() => MethodAccessor<RaftCollisionManager>.Create("OnRemoveWalkableBlock", typeof(System.Collections.Generic.List<Block>), typeof(bool)));

		public static void Awake(this RaftCollisionManager __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this RaftCollisionManager __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this RaftCollisionManager __self) => _Update757602046.Value.Invoke(__self);
		public static void FixedUpdate(this RaftCollisionManager __self) => _FixedUpdate757602046.Value.Invoke(__self);
		public static void OnDestroy(this RaftCollisionManager __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void OnLoadComplete(this RaftCollisionManager __self) => _OnLoadComplete757602046.Value.Invoke(__self);
		public static void UpdateGrid(this RaftCollisionManager __self) => _UpdateGrid757602046.Value.Invoke(__self);
		public static void UpdateBoxLineFromBuildPos(this RaftCollisionManager __self, UnityEngine.Vector3 localBuildPos) => _UpdateBoxLineFromBuildPos3429126434.Value.Invoke(__self, localBuildPos);
		public static void SetYPosition(this RaftCollisionManager __self) => _SetYPosition757602046.Value.Invoke(__self);
		public static bool ContainsGridPos(this RaftCollisionManager __self, UnityEngine.Vector3 pos) => (bool)_ContainsGridPos3429126434.Value.Invoke(__self, pos);
		public static bool RemoveGridPos(this RaftCollisionManager __self, UnityEngine.Vector3 pos) => (bool)_RemoveGridPos3429126434.Value.Invoke(__self, pos);
		public static void GenerateColliderAbove(this RaftCollisionManager __self, UnityEngine.Vector3 startPosition, int lengthCount, int floor) => _GenerateColliderAbove3476701598.Value.Invoke(__self, startPosition, lengthCount, floor);
		public static System.Collections.Generic.List<UnityEngine.BoxCollider> GetColliderFromPos(this RaftCollisionManager __self, UnityEngine.Vector3 localPos) => (System.Collections.Generic.List<UnityEngine.BoxCollider>)_GetColliderFromPos3429126434.Value.Invoke(__self, localPos);
		public static void OnAddWalkableBlock(this RaftCollisionManager __self, Block block, bool replicating) => _OnAddWalkableBlock3457661511.Value.Invoke(__self, block, replicating);
		public static void OnRemoveWalkableBlock(this RaftCollisionManager __self, System.Collections.Generic.List<Block> removedWalkables, bool replicating) => _OnRemoveWalkableBlock3416760334.Value.Invoke(__self, removedWalkables, replicating);

	}

	public static class PrivateAccessor_RaftTrail
	{

		private static readonly System.Lazy<FieldAccessor<RaftTrail, UnityEngine.ParticleSystem>> _trailL =
				new System.Lazy<FieldAccessor<RaftTrail, UnityEngine.ParticleSystem>>(() => FieldAccessor<RaftTrail, UnityEngine.ParticleSystem>.Create("trailL"));
		private static readonly System.Lazy<FieldAccessor<RaftTrail, UnityEngine.ParticleSystem>> _trailR =
				new System.Lazy<FieldAccessor<RaftTrail, UnityEngine.ParticleSystem>>(() => FieldAccessor<RaftTrail, UnityEngine.ParticleSystem>.Create("trailR"));
		private static readonly System.Lazy<FieldAccessor<RaftTrail, Raft>> _raft =
				new System.Lazy<FieldAccessor<RaftTrail, Raft>>(() => FieldAccessor<RaftTrail, Raft>.Create("raft"));
		private static readonly System.Lazy<FieldAccessor<RaftTrail, UnityEngine.Transform>> _raftCenterTransform =
				new System.Lazy<FieldAccessor<RaftTrail, UnityEngine.Transform>>(() => FieldAccessor<RaftTrail, UnityEngine.Transform>.Create("raftCenterTransform"));
		private static readonly System.Lazy<FieldAccessor<RaftTrail, float>> _updateTrailPosRate =
				new System.Lazy<FieldAccessor<RaftTrail, float>>(() => FieldAccessor<RaftTrail, float>.Create("updateTrailPosRate"));
		private static readonly System.Lazy<FieldAccessor<RaftTrail, float>> _timer =
				new System.Lazy<FieldAccessor<RaftTrail, float>>(() => FieldAccessor<RaftTrail, float>.Create("timer"));
		private static readonly System.Lazy<FieldAccessor<RaftTrail, Block>> _leftBlock =
				new System.Lazy<FieldAccessor<RaftTrail, Block>>(() => FieldAccessor<RaftTrail, Block>.Create("leftBlock"));
		private static readonly System.Lazy<FieldAccessor<RaftTrail, Block>> _rightBlock =
				new System.Lazy<FieldAccessor<RaftTrail, Block>>(() => FieldAccessor<RaftTrail, Block>.Create("rightBlock"));

		public static UnityEngine.ParticleSystem GetTrailL(this RaftTrail __self) => _trailL.Value.GetValue(__self);
		public static void SetTrailL(this RaftTrail __self, UnityEngine.ParticleSystem value) => _trailL.Value.SetValue(__self, value);
		public static UnityEngine.ParticleSystem GetTrailR(this RaftTrail __self) => _trailR.Value.GetValue(__self);
		public static void SetTrailR(this RaftTrail __self, UnityEngine.ParticleSystem value) => _trailR.Value.SetValue(__self, value);
		public static Raft GetRaft(this RaftTrail __self) => _raft.Value.GetValue(__self);
		public static void SetRaft(this RaftTrail __self, Raft value) => _raft.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetRaftCenterTransform(this RaftTrail __self) => _raftCenterTransform.Value.GetValue(__self);
		public static void SetRaftCenterTransform(this RaftTrail __self, UnityEngine.Transform value) => _raftCenterTransform.Value.SetValue(__self, value);
		public static float GetUpdateTrailPosRate(this RaftTrail __self) => _updateTrailPosRate.Value.GetValue(__self);
		public static void SetUpdateTrailPosRate(this RaftTrail __self, float value) => _updateTrailPosRate.Value.SetValue(__self, value);
		public static float GetTimer(this RaftTrail __self) => _timer.Value.GetValue(__self);
		public static void SetTimer(this RaftTrail __self, float value) => _timer.Value.SetValue(__self, value);
		public static Block GetLeftBlock(this RaftTrail __self) => _leftBlock.Value.GetValue(__self);
		public static void SetLeftBlock(this RaftTrail __self, Block value) => _leftBlock.Value.SetValue(__self, value);
		public static Block GetRightBlock(this RaftTrail __self) => _rightBlock.Value.GetValue(__self);
		public static void SetRightBlock(this RaftTrail __self, Block value) => _rightBlock.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<RaftTrail>> _Start757602046 =
				new System.Lazy<MethodAccessor<RaftTrail>>(() => MethodAccessor<RaftTrail>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<RaftTrail>> _Update757602046 =
				new System.Lazy<MethodAccessor<RaftTrail>>(() => MethodAccessor<RaftTrail>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<RaftTrail>> _FindCorrectBlocks757602046 =
				new System.Lazy<MethodAccessor<RaftTrail>>(() => MethodAccessor<RaftTrail>.Create("FindCorrectBlocks"));

		public static void Start(this RaftTrail __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this RaftTrail __self) => _Update757602046.Value.Invoke(__self);
		public static void FindCorrectBlocks(this RaftTrail __self) => _FindCorrectBlocks757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_RandomDropper
	{

		private static readonly System.Lazy<FieldAccessor<RandomDropper, SO_RandomDropper>> _randomDropperAsset =
				new System.Lazy<FieldAccessor<RandomDropper, SO_RandomDropper>>(() => FieldAccessor<RandomDropper, SO_RandomDropper>.Create("randomDropperAsset"));
		private static readonly System.Lazy<FieldAccessor<RandomDropper, Interval_Int>> _amountOfItems =
				new System.Lazy<FieldAccessor<RandomDropper, Interval_Int>>(() => FieldAccessor<RandomDropper, Interval_Int>.Create("amountOfItems"));

		public static SO_RandomDropper GetRandomDropperAsset(this RandomDropper __self) => _randomDropperAsset.Value.GetValue(__self);
		public static void SetRandomDropperAsset(this RandomDropper __self, SO_RandomDropper value) => _randomDropperAsset.Value.SetValue(__self, value);
		public static Interval_Int GetAmountOfItems(this RandomDropper __self) => _amountOfItems.Value.GetValue(__self);
		public static void SetAmountOfItems(this RandomDropper __self, Interval_Int value) => _amountOfItems.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<RandomDropper>> _OnValidate757602046 =
				new System.Lazy<MethodAccessor<RandomDropper>>(() => MethodAccessor<RandomDropper>.Create("OnValidate"));
		private static readonly System.Lazy<MethodAccessor<RandomDropper>> _DebugLogLoot757602046 =
				new System.Lazy<MethodAccessor<RandomDropper>>(() => MethodAccessor<RandomDropper>.Create("DebugLogLoot"));

		public static void OnValidate(this RandomDropper __self) => _OnValidate757602046.Value.Invoke(__self);
		public static void DebugLogLoot(this RandomDropper __self) => _DebugLogLoot757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_LaserChallenge_ReflectiveRaycast
	{

		private static readonly System.Lazy<FieldAccessor<LaserChallenge_ReflectiveRaycast, float>> _questInteractTimeStamp =
				new System.Lazy<FieldAccessor<LaserChallenge_ReflectiveRaycast, float>>(() => FieldAccessor<LaserChallenge_ReflectiveRaycast, float>.Create("questInteractTimeStamp"));

		public static float GetQuestInteractTimeStamp(this LaserChallenge_ReflectiveRaycast __self) => _questInteractTimeStamp.Value.GetValue(__self);
		public static void SetQuestInteractTimeStamp(this LaserChallenge_ReflectiveRaycast __self, float value) => _questInteractTimeStamp.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<LaserChallenge_ReflectiveRaycast>> _HandleCastInteract3487180896 =
				new System.Lazy<MethodAccessor<LaserChallenge_ReflectiveRaycast>>(() => MethodAccessor<LaserChallenge_ReflectiveRaycast>.Create("HandleCastInteract", typeof(UnityEngine.GameObject)));

		public static void HandleCastInteract(this LaserChallenge_ReflectiveRaycast __self, UnityEngine.GameObject go) => _HandleCastInteract3487180896.Value.Invoke(__self, go);

	}

	public static class PrivateAccessor_LaserChallenge_Target
	{

		private static readonly System.Lazy<FieldAccessor<LaserChallenge_Target, bool>> _isDestroyed =
				new System.Lazy<FieldAccessor<LaserChallenge_Target, bool>>(() => FieldAccessor<LaserChallenge_Target, bool>.Create("isDestroyed"));

		public static bool GetIsDestroyed(this LaserChallenge_Target __self) => _isDestroyed.Value.GetValue(__self);
		public static void SetIsDestroyed(this LaserChallenge_Target __self, bool value) => _isDestroyed.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_ReflectiveRaycast
	{

		private static readonly System.Lazy<FieldAccessor<ReflectiveRaycast, UnityEngine.LineRenderer>> _lineRenderer =
				new System.Lazy<FieldAccessor<ReflectiveRaycast, UnityEngine.LineRenderer>>(() => FieldAccessor<ReflectiveRaycast, UnityEngine.LineRenderer>.Create("lineRenderer"));
		private static readonly System.Lazy<FieldAccessor<ReflectiveRaycast, SO_Data_ReflectiveRaycast>> _raycastData =
				new System.Lazy<FieldAccessor<ReflectiveRaycast, SO_Data_ReflectiveRaycast>>(() => FieldAccessor<ReflectiveRaycast, SO_Data_ReflectiveRaycast>.Create("raycastData"));
		private static readonly System.Lazy<FieldAccessor<ReflectiveRaycast, UnityEngine.Transform>> _startTransform =
				new System.Lazy<FieldAccessor<ReflectiveRaycast, UnityEngine.Transform>>(() => FieldAccessor<ReflectiveRaycast, UnityEngine.Transform>.Create("startTransform"));
		private static readonly System.Lazy<FieldAccessor<ReflectiveRaycast, TimerEventer>> _doCastTimer =
				new System.Lazy<FieldAccessor<ReflectiveRaycast, TimerEventer>>(() => FieldAccessor<ReflectiveRaycast, TimerEventer>.Create("doCastTimer"));
		private static readonly System.Lazy<FieldAccessor<ReflectiveRaycast, UnityEngine.Transform>> _hitVFX =
				new System.Lazy<FieldAccessor<ReflectiveRaycast, UnityEngine.Transform>>(() => FieldAccessor<ReflectiveRaycast, UnityEngine.Transform>.Create("hitVFX"));
		private static readonly System.Lazy<FieldAccessor<ReflectiveRaycast, UnityEngine.Transform>> _startVFX =
				new System.Lazy<FieldAccessor<ReflectiveRaycast, UnityEngine.Transform>>(() => FieldAccessor<ReflectiveRaycast, UnityEngine.Transform>.Create("startVFX"));
		private static readonly System.Lazy<FieldAccessor<ReflectiveRaycast, UnityEngine.Transform>> _bounceVFXPrefab =
				new System.Lazy<FieldAccessor<ReflectiveRaycast, UnityEngine.Transform>>(() => FieldAccessor<ReflectiveRaycast, UnityEngine.Transform>.Create("bounceVFXPrefab"));
		private static readonly System.Lazy<FieldAccessor<ReflectiveRaycast, string>> _eventRef_damagePlayer =
				new System.Lazy<FieldAccessor<ReflectiveRaycast, string>>(() => FieldAccessor<ReflectiveRaycast, string>.Create("eventRef_damagePlayer"));
		private static readonly System.Lazy<FieldAccessor<ReflectiveRaycast, System.Collections.Generic.List<UnityEngine.Vector3>>> _lineRendererPoints =
				new System.Lazy<FieldAccessor<ReflectiveRaycast, System.Collections.Generic.List<UnityEngine.Vector3>>>(() => FieldAccessor<ReflectiveRaycast, System.Collections.Generic.List<UnityEngine.Vector3>>.Create("lineRendererPoints"));
		private static readonly System.Lazy<FieldAccessor<ReflectiveRaycast, System.Collections.Generic.List<UnityEngine.RaycastHit>>> _calculationHits =
				new System.Lazy<FieldAccessor<ReflectiveRaycast, System.Collections.Generic.List<UnityEngine.RaycastHit>>>(() => FieldAccessor<ReflectiveRaycast, System.Collections.Generic.List<UnityEngine.RaycastHit>>.Create("calculationHits"));
		private static readonly System.Lazy<FieldAccessor<ReflectiveRaycast, System.Collections.Generic.List<UnityEngine.Transform>>> _bounceTransforms =
				new System.Lazy<FieldAccessor<ReflectiveRaycast, System.Collections.Generic.List<UnityEngine.Transform>>>(() => FieldAccessor<ReflectiveRaycast, System.Collections.Generic.List<UnityEngine.Transform>>.Create("bounceTransforms"));
		private static readonly System.Lazy<FieldAccessor<ReflectiveRaycast, bool>> _isActiveCasting =
				new System.Lazy<FieldAccessor<ReflectiveRaycast, bool>>(() => FieldAccessor<ReflectiveRaycast, bool>.Create("isActiveCasting"));
		private static readonly System.Lazy<FieldAccessor<ReflectiveRaycast, Network_Host>> _network_Host =
				new System.Lazy<FieldAccessor<ReflectiveRaycast, Network_Host>>(() => FieldAccessor<ReflectiveRaycast, Network_Host>.Create("network_Host"));
		private static readonly System.Lazy<FieldAccessor<ReflectiveRaycast, float>> _dealtDamageTimeStamp =
				new System.Lazy<FieldAccessor<ReflectiveRaycast, float>>(() => FieldAccessor<ReflectiveRaycast, float>.Create("dealtDamageTimeStamp"));

		public static UnityEngine.LineRenderer GetLineRenderer(this ReflectiveRaycast __self) => _lineRenderer.Value.GetValue(__self);
		public static void SetLineRenderer(this ReflectiveRaycast __self, UnityEngine.LineRenderer value) => _lineRenderer.Value.SetValue(__self, value);
		public static SO_Data_ReflectiveRaycast GetRaycastData(this ReflectiveRaycast __self) => _raycastData.Value.GetValue(__self);
		public static void SetRaycastData(this ReflectiveRaycast __self, SO_Data_ReflectiveRaycast value) => _raycastData.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetStartTransform(this ReflectiveRaycast __self) => _startTransform.Value.GetValue(__self);
		public static void SetStartTransform(this ReflectiveRaycast __self, UnityEngine.Transform value) => _startTransform.Value.SetValue(__self, value);
		public static TimerEventer GetDoCastTimer(this ReflectiveRaycast __self) => _doCastTimer.Value.GetValue(__self);
		public static void SetDoCastTimer(this ReflectiveRaycast __self, TimerEventer value) => _doCastTimer.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetHitVFX(this ReflectiveRaycast __self) => _hitVFX.Value.GetValue(__self);
		public static void SetHitVFX(this ReflectiveRaycast __self, UnityEngine.Transform value) => _hitVFX.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetStartVFX(this ReflectiveRaycast __self) => _startVFX.Value.GetValue(__self);
		public static void SetStartVFX(this ReflectiveRaycast __self, UnityEngine.Transform value) => _startVFX.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetBounceVFXPrefab(this ReflectiveRaycast __self) => _bounceVFXPrefab.Value.GetValue(__self);
		public static void SetBounceVFXPrefab(this ReflectiveRaycast __self, UnityEngine.Transform value) => _bounceVFXPrefab.Value.SetValue(__self, value);
		public static string GetEventRef_damagePlayer(this ReflectiveRaycast __self) => _eventRef_damagePlayer.Value.GetValue(__self);
		public static void SetEventRef_damagePlayer(this ReflectiveRaycast __self, string value) => _eventRef_damagePlayer.Value.SetValue(__self, value);
		public static System.Collections.Generic.List<UnityEngine.Vector3> GetLineRendererPoints(this ReflectiveRaycast __self) => _lineRendererPoints.Value.GetValue(__self);
		public static void SetLineRendererPoints(this ReflectiveRaycast __self, System.Collections.Generic.List<UnityEngine.Vector3> value) => _lineRendererPoints.Value.SetValue(__self, value);
		public static System.Collections.Generic.List<UnityEngine.RaycastHit> GetCalculationHits(this ReflectiveRaycast __self) => _calculationHits.Value.GetValue(__self);
		public static void SetCalculationHits(this ReflectiveRaycast __self, System.Collections.Generic.List<UnityEngine.RaycastHit> value) => _calculationHits.Value.SetValue(__self, value);
		public static System.Collections.Generic.List<UnityEngine.Transform> GetBounceTransforms(this ReflectiveRaycast __self) => _bounceTransforms.Value.GetValue(__self);
		public static void SetBounceTransforms(this ReflectiveRaycast __self, System.Collections.Generic.List<UnityEngine.Transform> value) => _bounceTransforms.Value.SetValue(__self, value);
		public static bool GetIsActiveCasting(this ReflectiveRaycast __self) => _isActiveCasting.Value.GetValue(__self);
		public static void SetIsActiveCasting(this ReflectiveRaycast __self, bool value) => _isActiveCasting.Value.SetValue(__self, value);
		public static Network_Host GetNetwork_Host(this ReflectiveRaycast __self) => _network_Host.Value.GetValue(__self);
		public static void SetNetwork_Host(this ReflectiveRaycast __self, Network_Host value) => _network_Host.Value.SetValue(__self, value);
		public static float GetDealtDamageTimeStamp(this ReflectiveRaycast __self) => _dealtDamageTimeStamp.Value.GetValue(__self);
		public static void SetDealtDamageTimeStamp(this ReflectiveRaycast __self, float value) => _dealtDamageTimeStamp.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<ReflectiveRaycast>> _Awake757602046 =
				new System.Lazy<MethodAccessor<ReflectiveRaycast>>(() => MethodAccessor<ReflectiveRaycast>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<ReflectiveRaycast>> _HandleCastInteract3487180896 =
				new System.Lazy<MethodAccessor<ReflectiveRaycast>>(() => MethodAccessor<ReflectiveRaycast>.Create("HandleCastInteract", typeof(UnityEngine.GameObject)));
		private static readonly System.Lazy<MethodAccessor<ReflectiveRaycast>> _HandleCastDamage3487180896 =
				new System.Lazy<MethodAccessor<ReflectiveRaycast>>(() => MethodAccessor<ReflectiveRaycast>.Create("HandleCastDamage", typeof(UnityEngine.GameObject)));
		private static readonly System.Lazy<MethodAccessor<ReflectiveRaycast>> _HandleVFX1705522108 =
				new System.Lazy<MethodAccessor<ReflectiveRaycast>>(() => MethodAccessor<ReflectiveRaycast>.Create("HandleVFX", typeof(System.Collections.Generic.List<UnityEngine.RaycastHit>), typeof(UnityEngine.Vector3)));
		private static readonly System.Lazy<MethodAccessor<ReflectiveRaycast>> _SetupLineRendererFromHits4291477021 =
				new System.Lazy<MethodAccessor<ReflectiveRaycast>>(() => MethodAccessor<ReflectiveRaycast>.Create("SetupLineRendererFromHits", typeof(UnityEngine.LineRenderer), typeof(UnityEngine.Vector3), typeof(UnityEngine.Vector3), typeof(System.Collections.Generic.List<UnityEngine.RaycastHit>)));
		private static readonly System.Lazy<MethodAccessor<ReflectiveRaycast>> _HitsToPoints3992171076 =
				new System.Lazy<MethodAccessor<ReflectiveRaycast>>(() => MethodAccessor<ReflectiveRaycast>.Create("HitsToPoints", typeof(UnityEngine.Vector3), typeof(UnityEngine.Vector3), typeof(System.Collections.Generic.List<UnityEngine.RaycastHit>)));
		private static readonly System.Lazy<MethodAccessor<ReflectiveRaycast>> _ClearData757602046 =
				new System.Lazy<MethodAccessor<ReflectiveRaycast>>(() => MethodAccessor<ReflectiveRaycast>.Create("ClearData"));
		private static readonly System.Lazy<MethodAccessor<ReflectiveRaycast>> _ClearLinerenderer3467359943 =
				new System.Lazy<MethodAccessor<ReflectiveRaycast>>(() => MethodAccessor<ReflectiveRaycast>.Create("ClearLinerenderer", typeof(UnityEngine.LineRenderer)));

		public static void Awake(this ReflectiveRaycast __self) => _Awake757602046.Value.Invoke(__self);
		public static void HandleCastInteract(this ReflectiveRaycast __self, UnityEngine.GameObject go) => _HandleCastInteract3487180896.Value.Invoke(__self, go);
		public static void HandleCastDamage(this ReflectiveRaycast __self, UnityEngine.GameObject go) => _HandleCastDamage3487180896.Value.Invoke(__self, go);
		public static void HandleVFX(this ReflectiveRaycast __self, System.Collections.Generic.List<UnityEngine.RaycastHit> hits, UnityEngine.Vector3 endPoint) => _HandleVFX1705522108.Value.Invoke(__self, hits, endPoint);
		public static void SetupLineRendererFromHits(this ReflectiveRaycast __self, UnityEngine.LineRenderer renderer, UnityEngine.Vector3 startPosition, UnityEngine.Vector3 endPoint, System.Collections.Generic.List<UnityEngine.RaycastHit> hits) => _SetupLineRendererFromHits4291477021.Value.Invoke(__self, renderer, startPosition, endPoint, hits);
		public static System.Collections.Generic.List<UnityEngine.Vector3> HitsToPoints(this ReflectiveRaycast __self, UnityEngine.Vector3 startPoint, UnityEngine.Vector3 endPoint, System.Collections.Generic.List<UnityEngine.RaycastHit> hits) => (System.Collections.Generic.List<UnityEngine.Vector3>)_HitsToPoints3992171076.Value.Invoke(__self, startPoint, endPoint, hits);
		public static void ClearData(this ReflectiveRaycast __self) => _ClearData757602046.Value.Invoke(__self);
		public static void ClearLinerenderer(this ReflectiveRaycast __self, UnityEngine.LineRenderer renderer) => _ClearLinerenderer3467359943.Value.Invoke(__self, renderer);

	}

	public static class PrivateAccessor_AreaZone
	{

		private static readonly System.Lazy<FieldAccessor<AreaZone, UnityEngine.Color>> _gizmoColor =
				new System.Lazy<FieldAccessor<AreaZone, UnityEngine.Color>>(() => FieldAccessor<AreaZone, UnityEngine.Color>.Create("gizmoColor"));
		private static readonly System.Lazy<FieldAccessor<AreaZone, EnvironmentProbeBoundsType>> _boundsType =
				new System.Lazy<FieldAccessor<AreaZone, EnvironmentProbeBoundsType>>(() => FieldAccessor<AreaZone, EnvironmentProbeBoundsType>.Create("boundsType"));
		private static readonly System.Lazy<FieldAccessor<AreaZone, UnityEngine.Collider>> _collider =
				new System.Lazy<FieldAccessor<AreaZone, UnityEngine.Collider>>(() => FieldAccessor<AreaZone, UnityEngine.Collider>.Create("collider"));

		public static UnityEngine.Color GetGizmoColor(this AreaZone __self) => _gizmoColor.Value.GetValue(__self);
		public static void SetGizmoColor(this AreaZone __self, UnityEngine.Color value) => _gizmoColor.Value.SetValue(__self, value);
		public static EnvironmentProbeBoundsType GetBoundsType(this AreaZone __self) => _boundsType.Value.GetValue(__self);
		public static void SetBoundsType(this AreaZone __self, EnvironmentProbeBoundsType value) => _boundsType.Value.SetValue(__self, value);
		public static UnityEngine.Collider GetCollider(this AreaZone __self) => _collider.Value.GetValue(__self);
		public static void SetCollider(this AreaZone __self, UnityEngine.Collider value) => _collider.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AreaZone>> _IsBoundsTypeCollider757602046 =
				new System.Lazy<MethodAccessor<AreaZone>>(() => MethodAccessor<AreaZone>.Create("IsBoundsTypeCollider"));

		public static bool IsBoundsTypeCollider(this AreaZone __self) => (bool)_IsBoundsTypeCollider757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AreaZone_MusicActivation
	{

		private static readonly System.Lazy<FieldAccessor<AreaZone_MusicActivation, Helper_PlayMusic>> _areaZone_music =
				new System.Lazy<FieldAccessor<AreaZone_MusicActivation, Helper_PlayMusic>>(() => FieldAccessor<AreaZone_MusicActivation, Helper_PlayMusic>.Create("areaZone_music"));
		private static readonly System.Lazy<FieldAccessor<AreaZone_MusicActivation, QuestType>> _questThatMustBeCompleteForMusic =
				new System.Lazy<FieldAccessor<AreaZone_MusicActivation, QuestType>>(() => FieldAccessor<AreaZone_MusicActivation, QuestType>.Create("questThatMustBeCompleteForMusic"));
		private static readonly System.Lazy<FieldAccessor<AreaZone_MusicActivation, QuestType>> _questRequirementForMusic =
				new System.Lazy<FieldAccessor<AreaZone_MusicActivation, QuestType>>(() => FieldAccessor<AreaZone_MusicActivation, QuestType>.Create("questRequirementForMusic"));
		private static readonly System.Lazy<FieldAccessor<AreaZone_MusicActivation, bool>> _stateToPlayAccordingToQuestIsDone =
				new System.Lazy<FieldAccessor<AreaZone_MusicActivation, bool>>(() => FieldAccessor<AreaZone_MusicActivation, bool>.Create("stateToPlayAccordingToQuestIsDone"));
		private static readonly System.Lazy<FieldAccessor<AreaZone_MusicActivation, Quest>> _requirementQuest =
				new System.Lazy<FieldAccessor<AreaZone_MusicActivation, Quest>>(() => FieldAccessor<AreaZone_MusicActivation, Quest>.Create("requirementQuest"));
		private static readonly System.Lazy<FieldAccessor<AreaZone_MusicActivation, Quest>> _trackedQuest =
				new System.Lazy<FieldAccessor<AreaZone_MusicActivation, Quest>>(() => FieldAccessor<AreaZone_MusicActivation, Quest>.Create("trackedQuest"));

		public static Helper_PlayMusic GetAreaZone_music(this AreaZone_MusicActivation __self) => _areaZone_music.Value.GetValue(__self);
		public static void SetAreaZone_music(this AreaZone_MusicActivation __self, Helper_PlayMusic value) => _areaZone_music.Value.SetValue(__self, value);
		public static QuestType GetQuestThatMustBeCompleteForMusic(this AreaZone_MusicActivation __self) => _questThatMustBeCompleteForMusic.Value.GetValue(__self);
		public static void SetQuestThatMustBeCompleteForMusic(this AreaZone_MusicActivation __self, QuestType value) => _questThatMustBeCompleteForMusic.Value.SetValue(__self, value);
		public static QuestType GetQuestRequirementForMusic(this AreaZone_MusicActivation __self) => _questRequirementForMusic.Value.GetValue(__self);
		public static void SetQuestRequirementForMusic(this AreaZone_MusicActivation __self, QuestType value) => _questRequirementForMusic.Value.SetValue(__self, value);
		public static bool GetStateToPlayAccordingToQuestIsDone(this AreaZone_MusicActivation __self) => _stateToPlayAccordingToQuestIsDone.Value.GetValue(__self);
		public static void SetStateToPlayAccordingToQuestIsDone(this AreaZone_MusicActivation __self, bool value) => _stateToPlayAccordingToQuestIsDone.Value.SetValue(__self, value);
		public static Quest GetRequirementQuest(this AreaZone_MusicActivation __self) => _requirementQuest.Value.GetValue(__self);
		public static void SetRequirementQuest(this AreaZone_MusicActivation __self, Quest value) => _requirementQuest.Value.SetValue(__self, value);
		public static Quest GetTrackedQuest(this AreaZone_MusicActivation __self) => _trackedQuest.Value.GetValue(__self);
		public static void SetTrackedQuest(this AreaZone_MusicActivation __self, Quest value) => _trackedQuest.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AreaZone_MusicActivation>> _OnEnable757602046 =
				new System.Lazy<MethodAccessor<AreaZone_MusicActivation>>(() => MethodAccessor<AreaZone_MusicActivation>.Create("OnEnable"));
		private static readonly System.Lazy<MethodAccessor<AreaZone_MusicActivation>> _OnDisable757602046 =
				new System.Lazy<MethodAccessor<AreaZone_MusicActivation>>(() => MethodAccessor<AreaZone_MusicActivation>.Create("OnDisable"));
		private static readonly System.Lazy<MethodAccessor<AreaZone_MusicActivation>> _OnAddNewPlayer3461878659 =
				new System.Lazy<MethodAccessor<AreaZone_MusicActivation>>(() => MethodAccessor<AreaZone_MusicActivation>.Create("OnAddNewPlayer", typeof(Network_Player)));
		private static readonly System.Lazy<MethodAccessor<AreaZone_MusicActivation>> _OnRemovePlayer3461878659 =
				new System.Lazy<MethodAccessor<AreaZone_MusicActivation>>(() => MethodAccessor<AreaZone_MusicActivation>.Create("OnRemovePlayer", typeof(Network_Player)));
		private static readonly System.Lazy<MethodAccessor<AreaZone_MusicActivation>> _DisableMusic757602046 =
				new System.Lazy<MethodAccessor<AreaZone_MusicActivation>>(() => MethodAccessor<AreaZone_MusicActivation>.Create("DisableMusic"));
		private static readonly System.Lazy<MethodAccessor<AreaZone_MusicActivation>> _CheckMusicStart757602046 =
				new System.Lazy<MethodAccessor<AreaZone_MusicActivation>>(() => MethodAccessor<AreaZone_MusicActivation>.Create("CheckMusicStart"));

		public static void OnEnable(this AreaZone_MusicActivation __self) => _OnEnable757602046.Value.Invoke(__self);
		public static void OnDisable(this AreaZone_MusicActivation __self) => _OnDisable757602046.Value.Invoke(__self);
		public static void OnAddNewPlayer(this AreaZone_MusicActivation __self, Network_Player player) => _OnAddNewPlayer3461878659.Value.Invoke(__self, player);
		public static void OnRemovePlayer(this AreaZone_MusicActivation __self, Network_Player player) => _OnRemovePlayer3461878659.Value.Invoke(__self, player);
		public static void DisableMusic(this AreaZone_MusicActivation __self) => _DisableMusic757602046.Value.Invoke(__self);
		public static void CheckMusicStart(this AreaZone_MusicActivation __self) => _CheckMusicStart757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_AreaZone_PlayerCounter
	{

		private static readonly System.Lazy<FieldAccessor<AreaZone_PlayerCounter, UnityEngine.GameObject>> _localPlayerObject =
				new System.Lazy<FieldAccessor<AreaZone_PlayerCounter, UnityEngine.GameObject>>(() => FieldAccessor<AreaZone_PlayerCounter, UnityEngine.GameObject>.Create("localPlayerObject"));
		private static readonly System.Lazy<FieldAccessor<AreaZone_PlayerCounter, bool>> _useInterval =
				new System.Lazy<FieldAccessor<AreaZone_PlayerCounter, bool>>(() => FieldAccessor<AreaZone_PlayerCounter, bool>.Create("useInterval"));
		private static readonly System.Lazy<FieldAccessor<AreaZone_PlayerCounter, float>> _checkForPlayerInterval =
				new System.Lazy<FieldAccessor<AreaZone_PlayerCounter, float>>(() => FieldAccessor<AreaZone_PlayerCounter, float>.Create("checkForPlayerInterval"));
		private static readonly System.Lazy<FieldAccessor<AreaZone_PlayerCounter, AreaZone_PlayerCounter.PlayerCheckPosition>> _playerCheckPosition =
				new System.Lazy<FieldAccessor<AreaZone_PlayerCounter, AreaZone_PlayerCounter.PlayerCheckPosition>>(() => FieldAccessor<AreaZone_PlayerCounter, AreaZone_PlayerCounter.PlayerCheckPosition>.Create("playerCheckPosition"));
		private static readonly System.Lazy<FieldAccessor<AreaZone_PlayerCounter, float>> _checkForPlayerTimer =
				new System.Lazy<FieldAccessor<AreaZone_PlayerCounter, float>>(() => FieldAccessor<AreaZone_PlayerCounter, float>.Create("checkForPlayerTimer"));
		private static readonly System.Lazy<FieldAccessor<AreaZone_PlayerCounter, Network_Player>> _localPlayer =
				new System.Lazy<FieldAccessor<AreaZone_PlayerCounter, Network_Player>>(() => FieldAccessor<AreaZone_PlayerCounter, Network_Player>.Create("localPlayer"));
		private static readonly System.Lazy<FieldAccessor<AreaZone_PlayerCounter, bool>> _isAreaActive =
				new System.Lazy<FieldAccessor<AreaZone_PlayerCounter, bool>>(() => FieldAccessor<AreaZone_PlayerCounter, bool>.Create("isAreaActive"));

		public static UnityEngine.GameObject GetLocalPlayerObject(this AreaZone_PlayerCounter __self) => _localPlayerObject.Value.GetValue(__self);
		public static void SetLocalPlayerObject(this AreaZone_PlayerCounter __self, UnityEngine.GameObject value) => _localPlayerObject.Value.SetValue(__self, value);
		public static bool GetUseInterval(this AreaZone_PlayerCounter __self) => _useInterval.Value.GetValue(__self);
		public static void SetUseInterval(this AreaZone_PlayerCounter __self, bool value) => _useInterval.Value.SetValue(__self, value);
		public static float GetCheckForPlayerInterval(this AreaZone_PlayerCounter __self) => _checkForPlayerInterval.Value.GetValue(__self);
		public static void SetCheckForPlayerInterval(this AreaZone_PlayerCounter __self, float value) => _checkForPlayerInterval.Value.SetValue(__self, value);
		public static AreaZone_PlayerCounter.PlayerCheckPosition GetPlayerCheckPosition(this AreaZone_PlayerCounter __self) => _playerCheckPosition.Value.GetValue(__self);
		public static void SetPlayerCheckPosition(this AreaZone_PlayerCounter __self, AreaZone_PlayerCounter.PlayerCheckPosition value) => _playerCheckPosition.Value.SetValue(__self, value);
		public static float GetCheckForPlayerTimer(this AreaZone_PlayerCounter __self) => _checkForPlayerTimer.Value.GetValue(__self);
		public static void SetCheckForPlayerTimer(this AreaZone_PlayerCounter __self, float value) => _checkForPlayerTimer.Value.SetValue(__self, value);
		public static Network_Player GetLocalPlayer(this AreaZone_PlayerCounter __self) => _localPlayer.Value.GetValue(__self);
		public static void SetLocalPlayer(this AreaZone_PlayerCounter __self, Network_Player value) => _localPlayer.Value.SetValue(__self, value);
		public static bool GetIsAreaActive(this AreaZone_PlayerCounter __self) => _isAreaActive.Value.GetValue(__self);
		public static void SetIsAreaActive(this AreaZone_PlayerCounter __self, bool value) => _isAreaActive.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<AreaZone_PlayerCounter>> _Start757602046 =
				new System.Lazy<MethodAccessor<AreaZone_PlayerCounter>>(() => MethodAccessor<AreaZone_PlayerCounter>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<AreaZone_PlayerCounter>> _Update757602046 =
				new System.Lazy<MethodAccessor<AreaZone_PlayerCounter>>(() => MethodAccessor<AreaZone_PlayerCounter>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<AreaZone_PlayerCounter>> _OnAddNewPlayer3461878659 =
				new System.Lazy<MethodAccessor<AreaZone_PlayerCounter>>(() => MethodAccessor<AreaZone_PlayerCounter>.Create("OnAddNewPlayer", typeof(Network_Player)));
		private static readonly System.Lazy<MethodAccessor<AreaZone_PlayerCounter>> _OnRemovePlayer3461878659 =
				new System.Lazy<MethodAccessor<AreaZone_PlayerCounter>>(() => MethodAccessor<AreaZone_PlayerCounter>.Create("OnRemovePlayer", typeof(Network_Player)));
		private static readonly System.Lazy<MethodAccessor<AreaZone_PlayerCounter>> _OnCheckForPlayersInterval757602046 =
				new System.Lazy<MethodAccessor<AreaZone_PlayerCounter>>(() => MethodAccessor<AreaZone_PlayerCounter>.Create("OnCheckForPlayersInterval"));

		public static void Start(this AreaZone_PlayerCounter __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this AreaZone_PlayerCounter __self) => _Update757602046.Value.Invoke(__self);
		public static void OnAddNewPlayer(this AreaZone_PlayerCounter __self, Network_Player player) => _OnAddNewPlayer3461878659.Value.Invoke(__self, player);
		public static void OnRemovePlayer(this AreaZone_PlayerCounter __self, Network_Player player) => _OnRemovePlayer3461878659.Value.Invoke(__self, player);
		public static void OnCheckForPlayersInterval(this AreaZone_PlayerCounter __self) => _OnCheckForPlayersInterval757602046.Value.Invoke(__self);

	}

	public static class Private_AreaZone_PlayerCounter
	{

		private static readonly System.Lazy<StaticFieldAccessor<Raft_Network>> _network =
				new System.Lazy<StaticFieldAccessor<Raft_Network>>(() => StaticFieldAccessor<Raft_Network>.Create(typeof(AreaZone_PlayerCounter), "network"));

		public static Raft_Network GetNetwork() => _network.Value.GetValue();
		public static void SetNetwork(Raft_Network value) => _network.Value.SetValue(value);

	}

	public static class PrivateAccessor_Helper_PlayMusic
	{

		private static readonly System.Lazy<FieldAccessor<Helper_PlayMusic, string>> _parameterName =
				new System.Lazy<FieldAccessor<Helper_PlayMusic, string>>(() => FieldAccessor<Helper_PlayMusic, string>.Create("parameterName"));
		private static readonly System.Lazy<FieldAccessor<Helper_PlayMusic, float>> _parameterValue =
				new System.Lazy<FieldAccessor<Helper_PlayMusic, float>>(() => FieldAccessor<Helper_PlayMusic, float>.Create("parameterValue"));
		private static readonly System.Lazy<FieldAccessor<Helper_PlayMusic, float>> _parameterStoppedValue =
				new System.Lazy<FieldAccessor<Helper_PlayMusic, float>>(() => FieldAccessor<Helper_PlayMusic, float>.Create("parameterStoppedValue"));
		private static readonly System.Lazy<FieldAccessor<Helper_PlayMusic, bool>> _stopOnRevert =
				new System.Lazy<FieldAccessor<Helper_PlayMusic, bool>>(() => FieldAccessor<Helper_PlayMusic, bool>.Create("stopOnRevert"));
		private static readonly System.Lazy<FieldAccessor<Helper_PlayMusic, SoundManager>> _soundManager =
				new System.Lazy<FieldAccessor<Helper_PlayMusic, SoundManager>>(() => FieldAccessor<Helper_PlayMusic, SoundManager>.Create("soundManager"));

		public static string GetParameterName(this Helper_PlayMusic __self) => _parameterName.Value.GetValue(__self);
		public static void SetParameterName(this Helper_PlayMusic __self, string value) => _parameterName.Value.SetValue(__self, value);
		public static float GetParameterValue(this Helper_PlayMusic __self) => _parameterValue.Value.GetValue(__self);
		public static void SetParameterValue(this Helper_PlayMusic __self, float value) => _parameterValue.Value.SetValue(__self, value);
		public static float GetParameterStoppedValue(this Helper_PlayMusic __self) => _parameterStoppedValue.Value.GetValue(__self);
		public static void SetParameterStoppedValue(this Helper_PlayMusic __self, float value) => _parameterStoppedValue.Value.SetValue(__self, value);
		public static bool GetStopOnRevert(this Helper_PlayMusic __self) => _stopOnRevert.Value.GetValue(__self);
		public static void SetStopOnRevert(this Helper_PlayMusic __self, bool value) => _stopOnRevert.Value.SetValue(__self, value);
		public static SoundManager GetSoundManager(this Helper_PlayMusic __self) => _soundManager.Value.GetValue(__self);
		public static void SetSoundManager(this Helper_PlayMusic __self, SoundManager value) => _soundManager.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_Region
	{

		private static readonly System.Lazy<FieldAccessor<Region, System.Collections.Generic.List<System.Type>>> _subregionComponentTypes =
				new System.Lazy<FieldAccessor<Region, System.Collections.Generic.List<System.Type>>>(() => FieldAccessor<Region, System.Collections.Generic.List<System.Type>>.Create("subregionComponentTypes"));

		public static System.Collections.Generic.List<System.Type> GetSubregionComponentTypes(this Region __self) => _subregionComponentTypes.Value.GetValue(__self);
		public static void SetSubregionComponentTypes(this Region __self, System.Collections.Generic.List<System.Type> value) => _subregionComponentTypes.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Region>> _Awake757602046 =
				new System.Lazy<MethodAccessor<Region>>(() => MethodAccessor<Region>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<Region>> _Start757602046 =
				new System.Lazy<MethodAccessor<Region>>(() => MethodAccessor<Region>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<Region>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<Region>>(() => MethodAccessor<Region>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<Region>> _LocateSubregions757602046 =
				new System.Lazy<MethodAccessor<Region>>(() => MethodAccessor<Region>.Create("LocateSubregions"));

		public static void Awake(this Region __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this Region __self) => _Start757602046.Value.Invoke(__self);
		public static void OnDestroy(this Region __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void LocateSubregions(this Region __self) => _LocateSubregions757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_RegionComponent_Light
	{

		private static readonly System.Lazy<MethodAccessor<RegionComponent_Light>> _Awake757602046 =
				new System.Lazy<MethodAccessor<RegionComponent_Light>>(() => MethodAccessor<RegionComponent_Light>.Create("Awake"));

		public static void Awake(this RegionComponent_Light __self) => _Awake757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_RegionManager
	{

		private static readonly System.Lazy<FieldAccessor<RegionManager, float>> _updateCurrentRegionInterval =
				new System.Lazy<FieldAccessor<RegionManager, float>>(() => FieldAccessor<RegionManager, float>.Create("updateCurrentRegionInterval"));
		private static readonly System.Lazy<FieldAccessor<RegionManager, Network_Player>> _localPlayer =
				new System.Lazy<FieldAccessor<RegionManager, Network_Player>>(() => FieldAccessor<RegionManager, Network_Player>.Create("localPlayer"));
		private static readonly System.Lazy<FieldAccessor<RegionManager, float>> _updateCurrentRegionTimer =
				new System.Lazy<FieldAccessor<RegionManager, float>>(() => FieldAccessor<RegionManager, float>.Create("updateCurrentRegionTimer"));

		public static float GetUpdateCurrentRegionInterval(this RegionManager __self) => _updateCurrentRegionInterval.Value.GetValue(__self);
		public static void SetUpdateCurrentRegionInterval(this RegionManager __self, float value) => _updateCurrentRegionInterval.Value.SetValue(__self, value);
		public static Network_Player GetLocalPlayer(this RegionManager __self) => _localPlayer.Value.GetValue(__self);
		public static void SetLocalPlayer(this RegionManager __self, Network_Player value) => _localPlayer.Value.SetValue(__self, value);
		public static float GetUpdateCurrentRegionTimer(this RegionManager __self) => _updateCurrentRegionTimer.Value.GetValue(__self);
		public static void SetUpdateCurrentRegionTimer(this RegionManager __self, float value) => _updateCurrentRegionTimer.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<RegionManager>> _LateUpdate757602046 =
				new System.Lazy<MethodAccessor<RegionManager>>(() => MethodAccessor<RegionManager>.Create("LateUpdate"));

		public static void LateUpdate(this RegionManager __self) => _LateUpdate757602046.Value.Invoke(__self);

	}

	public static class Private_RegionManager
	{

		private static readonly System.Lazy<StaticFieldAccessor<bool>> _forceUpdate =
				new System.Lazy<StaticFieldAccessor<bool>>(() => StaticFieldAccessor<bool>.Create(typeof(RegionManager), "forceUpdate"));

		public static bool GetForceUpdate() => _forceUpdate.Value.GetValue();
		public static void SetForceUpdate(bool value) => _forceUpdate.Value.SetValue(value);

	}

	public static class PrivateAccessor_SubRegionComponent_OxygenBounds
	{

		private static readonly System.Lazy<FieldAccessor<SubRegionComponent_OxygenBounds, float>> _surfaceOffset =
				new System.Lazy<FieldAccessor<SubRegionComponent_OxygenBounds, float>>(() => FieldAccessor<SubRegionComponent_OxygenBounds, float>.Create("surfaceOffset"));
		private static readonly System.Lazy<FieldAccessor<SubRegionComponent_OxygenBounds, UnityEngine.Transform>> _optionalVisualWaterRemover =
				new System.Lazy<FieldAccessor<SubRegionComponent_OxygenBounds, UnityEngine.Transform>>(() => FieldAccessor<SubRegionComponent_OxygenBounds, UnityEngine.Transform>.Create("optionalVisualWaterRemover"));

		public static float GetSurfaceOffset(this SubRegionComponent_OxygenBounds __self) => _surfaceOffset.Value.GetValue(__self);
		public static void SetSurfaceOffset(this SubRegionComponent_OxygenBounds __self, float value) => _surfaceOffset.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetOptionalVisualWaterRemover(this SubRegionComponent_OxygenBounds __self) => _optionalVisualWaterRemover.Value.GetValue(__self);
		public static void SetOptionalVisualWaterRemover(this SubRegionComponent_OxygenBounds __self, UnityEngine.Transform value) => _optionalVisualWaterRemover.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<SubRegionComponent_OxygenBounds>> _OnDrawGizmosSelected757602046 =
				new System.Lazy<MethodAccessor<SubRegionComponent_OxygenBounds>>(() => MethodAccessor<SubRegionComponent_OxygenBounds>.Create("OnDrawGizmosSelected"));
		private static readonly System.Lazy<MethodAccessor<SubRegionComponent_OxygenBounds>> _AdjustVisualWaterRemover757602046 =
				new System.Lazy<MethodAccessor<SubRegionComponent_OxygenBounds>>(() => MethodAccessor<SubRegionComponent_OxygenBounds>.Create("AdjustVisualWaterRemover"));

		public static void OnDrawGizmosSelected(this SubRegionComponent_OxygenBounds __self) => _OnDrawGizmosSelected757602046.Value.Invoke(__self);
		public static void AdjustVisualWaterRemover(this SubRegionComponent_OxygenBounds __self) => _AdjustVisualWaterRemover757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Subregion
	{

		private static readonly System.Lazy<MethodAccessor<Subregion>> _Awake757602046 =
				new System.Lazy<MethodAccessor<Subregion>>(() => MethodAccessor<Subregion>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<Subregion>> _OnValidate757602046 =
				new System.Lazy<MethodAccessor<Subregion>>(() => MethodAccessor<Subregion>.Create("OnValidate"));

		public static void Awake(this Subregion __self) => _Awake757602046.Value.Invoke(__self);
		public static void OnValidate(this Subregion __self) => _OnValidate757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_SubregionLight
	{

		private static readonly System.Lazy<FieldAccessor<SubregionLight, bool>> _disableIntensityAtStart =
				new System.Lazy<FieldAccessor<SubregionLight, bool>>(() => FieldAccessor<SubregionLight, bool>.Create("disableIntensityAtStart"));
		private static readonly System.Lazy<FieldAccessor<SubregionLight, float>> _lerpSpeed =
				new System.Lazy<FieldAccessor<SubregionLight, float>>(() => FieldAccessor<SubregionLight, float>.Create("lerpSpeed"));
		private static readonly System.Lazy<FieldAccessor<SubregionLight, UnityEngine.Light>> _light =
				new System.Lazy<FieldAccessor<SubregionLight, UnityEngine.Light>>(() => FieldAccessor<SubregionLight, UnityEngine.Light>.Create("light"));
		private static readonly System.Lazy<FieldAccessor<SubregionLight, Subregion[]>> _subregions =
				new System.Lazy<FieldAccessor<SubregionLight, Subregion[]>>(() => FieldAccessor<SubregionLight, Subregion[]>.Create("subregions"));
		private static readonly System.Lazy<FieldAccessor<SubregionLight, float>> _initialIntensity =
				new System.Lazy<FieldAccessor<SubregionLight, float>>(() => FieldAccessor<SubregionLight, float>.Create("initialIntensity"));

		public static bool GetDisableIntensityAtStart(this SubregionLight __self) => _disableIntensityAtStart.Value.GetValue(__self);
		public static void SetDisableIntensityAtStart(this SubregionLight __self, bool value) => _disableIntensityAtStart.Value.SetValue(__self, value);
		public static float GetLerpSpeed(this SubregionLight __self) => _lerpSpeed.Value.GetValue(__self);
		public static void SetLerpSpeed(this SubregionLight __self, float value) => _lerpSpeed.Value.SetValue(__self, value);
		public static UnityEngine.Light GetLight(this SubregionLight __self) => _light.Value.GetValue(__self);
		public static void SetLight(this SubregionLight __self, UnityEngine.Light value) => _light.Value.SetValue(__self, value);
		public static Subregion[] GetSubregions(this SubregionLight __self) => _subregions.Value.GetValue(__self);
		public static void SetSubregions(this SubregionLight __self, Subregion[] value) => _subregions.Value.SetValue(__self, value);
		public static float GetInitialIntensity(this SubregionLight __self) => _initialIntensity.Value.GetValue(__self);
		public static void SetInitialIntensity(this SubregionLight __self, float value) => _initialIntensity.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<SubregionLight>> _Awake757602046 =
				new System.Lazy<MethodAccessor<SubregionLight>>(() => MethodAccessor<SubregionLight>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<SubregionLight>> _Update757602046 =
				new System.Lazy<MethodAccessor<SubregionLight>>(() => MethodAccessor<SubregionLight>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<SubregionLight>> _OnDrawGizmos757602046 =
				new System.Lazy<MethodAccessor<SubregionLight>>(() => MethodAccessor<SubregionLight>.Create("OnDrawGizmos"));
		private static readonly System.Lazy<MethodAccessor<SubregionLight>> _IsEditorPlaying757602046 =
				new System.Lazy<MethodAccessor<SubregionLight>>(() => MethodAccessor<SubregionLight>.Create("IsEditorPlaying"));

		public static void Awake(this SubregionLight __self) => _Awake757602046.Value.Invoke(__self);
		public static void Update(this SubregionLight __self) => _Update757602046.Value.Invoke(__self);
		public static void OnDrawGizmos(this SubregionLight __self) => _OnDrawGizmos757602046.Value.Invoke(__self);
		public static bool IsEditorPlaying(this SubregionLight __self) => (bool)_IsEditorPlaying757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_TriggerForcedRegionUpdate
	{

		private static readonly System.Lazy<FieldAccessor<TriggerForcedRegionUpdate, TriggerBoxAction>> _enterAction =
				new System.Lazy<FieldAccessor<TriggerForcedRegionUpdate, TriggerBoxAction>>(() => FieldAccessor<TriggerForcedRegionUpdate, TriggerBoxAction>.Create("enterAction"));
		private static readonly System.Lazy<FieldAccessor<TriggerForcedRegionUpdate, TriggerBoxAction>> _exitAction =
				new System.Lazy<FieldAccessor<TriggerForcedRegionUpdate, TriggerBoxAction>>(() => FieldAccessor<TriggerForcedRegionUpdate, TriggerBoxAction>.Create("exitAction"));

		public static TriggerBoxAction GetEnterAction(this TriggerForcedRegionUpdate __self) => _enterAction.Value.GetValue(__self);
		public static void SetEnterAction(this TriggerForcedRegionUpdate __self, TriggerBoxAction value) => _enterAction.Value.SetValue(__self, value);
		public static TriggerBoxAction GetExitAction(this TriggerForcedRegionUpdate __self) => _exitAction.Value.GetValue(__self);
		public static void SetExitAction(this TriggerForcedRegionUpdate __self, TriggerBoxAction value) => _exitAction.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<TriggerForcedRegionUpdate>> _Start757602046 =
				new System.Lazy<MethodAccessor<TriggerForcedRegionUpdate>>(() => MethodAccessor<TriggerForcedRegionUpdate>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<TriggerForcedRegionUpdate>> _ForceUpdate3468606003 =
				new System.Lazy<MethodAccessor<TriggerForcedRegionUpdate>>(() => MethodAccessor<TriggerForcedRegionUpdate>.Create("ForceUpdate", typeof(UnityEngine.Collider)));

		public static void Start(this TriggerForcedRegionUpdate __self) => _Start757602046.Value.Invoke(__self);
		public static void ForceUpdate(this TriggerForcedRegionUpdate __self, UnityEngine.Collider collider) => _ForceUpdate3468606003.Value.Invoke(__self, collider);

	}

	public static class PrivateAccessor_RemoteConfigManager
	{

		private static readonly System.Lazy<MethodAccessor<RemoteConfigManager>> _Awake757602046 =
				new System.Lazy<MethodAccessor<RemoteConfigManager>>(() => MethodAccessor<RemoteConfigManager>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<RemoteConfigManager>> _Start757602046 =
				new System.Lazy<MethodAccessor<RemoteConfigManager>>(() => MethodAccessor<RemoteConfigManager>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<RemoteConfigManager>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<RemoteConfigManager>>(() => MethodAccessor<RemoteConfigManager>.Create("OnDestroy"));

		public static void Awake(this RemoteConfigManager __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this RemoteConfigManager __self) => _Start757602046.Value.Invoke(__self);
		public static void OnDestroy(this RemoteConfigManager __self) => _OnDestroy757602046.Value.Invoke(__self);

	}

	public static class Private_RemoteConfigManager
	{

		private static readonly System.Lazy<StaticFieldAccessor<Raft_Network>> _network =
				new System.Lazy<StaticFieldAccessor<Raft_Network>>(() => StaticFieldAccessor<Raft_Network>.Create(typeof(RemoteConfigManager), "network"));
		private static readonly System.Lazy<StaticFieldAccessor<bool>> _initialized =
				new System.Lazy<StaticFieldAccessor<bool>>(() => StaticFieldAccessor<bool>.Create(typeof(RemoteConfigManager), "initialized"));

		public static Raft_Network GetNetwork() => _network.Value.GetValue();
		public static void SetNetwork(Raft_Network value) => _network.Value.SetValue(value);
		public static bool GetInitialized() => _initialized.Value.GetValue();
		public static void SetInitialized(bool value) => _initialized.Value.SetValue(value);

		private static readonly System.Lazy<StaticMethodAccessor> _ApplyUserStatus3441670924 =
				new System.Lazy<StaticMethodAccessor>(() => StaticMethodAccessor.Create(typeof(RemoteConfigManager), "ApplyUserStatus", typeof(Unity.RemoteConfig.ConfigResponse)));

		public static void ApplyUserStatus(Unity.RemoteConfig.ConfigResponse response) => _ApplyUserStatus3441670924.Value.Invoke(response);

	}

	public static class PrivateAccessor_MonoBehaviour_ID
	{

		private static readonly System.Lazy<FieldAccessor<MonoBehaviour_ID, uint>> _objectIndex =
				new System.Lazy<FieldAccessor<MonoBehaviour_ID, uint>>(() => FieldAccessor<MonoBehaviour_ID, uint>.Create("objectIndex"));

		public static uint GetObjectIndex(this MonoBehaviour_ID __self) => _objectIndex.Value.GetValue(__self);
		public static void SetObjectIndex(this MonoBehaviour_ID __self, uint value) => _objectIndex.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<MonoBehaviour_ID>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<MonoBehaviour_ID>>(() => MethodAccessor<MonoBehaviour_ID>.Create("OnDestroy"));

		public static void OnDestroy(this MonoBehaviour_ID __self) => _OnDestroy757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_RGD_NoteBook
	{

		private static readonly System.Lazy<MethodAccessor<RGD_NoteBook>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_NoteBook>>(() => MethodAccessor<RGD_NoteBook>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_NoteBook __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_NoteBookNote
	{

		private static readonly System.Lazy<MethodAccessor<RGD_NoteBookNote>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_NoteBookNote>>(() => MethodAccessor<RGD_NoteBookNote>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_NoteBookNote __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_NoteBookPage
	{

		private static readonly System.Lazy<FieldAccessor<RGD_NoteBookPage, RGD_NoteBookNote[]>> _rgd_notes =
				new System.Lazy<FieldAccessor<RGD_NoteBookPage, RGD_NoteBookNote[]>>(() => FieldAccessor<RGD_NoteBookPage, RGD_NoteBookNote[]>.Create("rgd_notes"));

		public static RGD_NoteBookNote[] GetRgd_notes(this RGD_NoteBookPage __self) => _rgd_notes.Value.GetValue(__self);
		public static void SetRgd_notes(this RGD_NoteBookPage __self, RGD_NoteBookNote[] value) => _rgd_notes.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<RGD_NoteBookPage>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_NoteBookPage>>(() => MethodAccessor<RGD_NoteBookPage>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_NoteBookPage __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD
	{

		private static readonly System.Lazy<MethodAccessor<RGD>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD>>(() => MethodAccessor<RGD>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_SerializableVector3
	{

		private static readonly System.Lazy<FieldAccessor<SerializableVector3, float>> _x =
				new System.Lazy<FieldAccessor<SerializableVector3, float>>(() => FieldAccessor<SerializableVector3, float>.Create("x"));
		private static readonly System.Lazy<FieldAccessor<SerializableVector3, float>> _y =
				new System.Lazy<FieldAccessor<SerializableVector3, float>>(() => FieldAccessor<SerializableVector3, float>.Create("y"));
		private static readonly System.Lazy<FieldAccessor<SerializableVector3, float>> _z =
				new System.Lazy<FieldAccessor<SerializableVector3, float>>(() => FieldAccessor<SerializableVector3, float>.Create("z"));

		public static float GetX(this SerializableVector3 __self) => _x.Value.GetValue(__self);
		public static void SetX(this SerializableVector3 __self, float value) => _x.Value.SetValue(__self, value);
		public static float GetY(this SerializableVector3 __self) => _y.Value.GetValue(__self);
		public static void SetY(this SerializableVector3 __self, float value) => _y.Value.SetValue(__self, value);
		public static float GetZ(this SerializableVector3 __self) => _z.Value.GetValue(__self);
		public static void SetZ(this SerializableVector3 __self, float value) => _z.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<SerializableVector3>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<SerializableVector3>>(() => MethodAccessor<SerializableVector3>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this SerializableVector3 __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_SerializableBehaviour
	{

		private static readonly System.Lazy<MethodAccessor<SerializableBehaviour>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<SerializableBehaviour>>(() => MethodAccessor<SerializableBehaviour>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this SerializableBehaviour __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_AI_NetworkBehaviour
	{

		private static readonly System.Lazy<MethodAccessor<RGD_AI_NetworkBehaviour>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_AI_NetworkBehaviour>>(() => MethodAccessor<RGD_AI_NetworkBehaviour>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_AI_NetworkBehaviour __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_AI_State
	{

		private static readonly System.Lazy<MethodAccessor<RGD_AI_State>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_AI_State>>(() => MethodAccessor<RGD_AI_State>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_AI_State __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_Boar
	{

		private static readonly System.Lazy<MethodAccessor<RGD_Boar>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_Boar>>(() => MethodAccessor<RGD_Boar>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_Boar __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_AI_Revive
	{

		private static readonly System.Lazy<MethodAccessor<RGD_AI_Revive>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_AI_Revive>>(() => MethodAccessor<RGD_AI_Revive>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_AI_Revive __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_Chicken_Eggs
	{

		private static readonly System.Lazy<MethodAccessor<RGD_Chicken_Eggs>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_Chicken_Eggs>>(() => MethodAccessor<RGD_Chicken_Eggs>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_Chicken_Eggs __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_Domestic
	{

		private static readonly System.Lazy<MethodAccessor<RGD_Domestic>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_Domestic>>(() => MethodAccessor<RGD_Domestic>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_Domestic __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_Domestic_Chicken
	{

		private static readonly System.Lazy<MethodAccessor<RGD_Domestic_Chicken>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_Domestic_Chicken>>(() => MethodAccessor<RGD_Domestic_Chicken>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_Domestic_Chicken __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_Domestic_Resource
	{

		private static readonly System.Lazy<MethodAccessor<RGD_Domestic_Resource>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_Domestic_Resource>>(() => MethodAccessor<RGD_Domestic_Resource>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_Domestic_Resource __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_StateMachine
	{

		private static readonly System.Lazy<MethodAccessor<RGD_StateMachine>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_StateMachine>>(() => MethodAccessor<RGD_StateMachine>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_StateMachine __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_StateMachine_HyenaBoss
	{

		private static readonly System.Lazy<FieldAccessor<RGD_StateMachine_HyenaBoss, RGD_AcidPool[]>> _rgdAcidPools =
				new System.Lazy<FieldAccessor<RGD_StateMachine_HyenaBoss, RGD_AcidPool[]>>(() => FieldAccessor<RGD_StateMachine_HyenaBoss, RGD_AcidPool[]>.Create("rgdAcidPools"));

		public static RGD_AcidPool[] GetRgdAcidPools(this RGD_StateMachine_HyenaBoss __self) => _rgdAcidPools.Value.GetValue(__self);
		public static void SetRgdAcidPools(this RGD_StateMachine_HyenaBoss __self, RGD_AcidPool[] value) => _rgdAcidPools.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<RGD_StateMachine_HyenaBoss>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_StateMachine_HyenaBoss>>(() => MethodAccessor<RGD_StateMachine_HyenaBoss>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_StateMachine_HyenaBoss __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_AcidPool
	{

		private static readonly System.Lazy<MethodAccessor<RGD_AcidPool>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_AcidPool>>(() => MethodAccessor<RGD_AcidPool>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_AcidPool __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_StateMachine_VarunaBoss
	{

		private static readonly System.Lazy<FieldAccessor<RGD_StateMachine_VarunaBoss, ObjectOfInterestType>> _currentCirculationID =
				new System.Lazy<FieldAccessor<RGD_StateMachine_VarunaBoss, ObjectOfInterestType>>(() => FieldAccessor<RGD_StateMachine_VarunaBoss, ObjectOfInterestType>.Create("currentCirculationID"));
		private static readonly System.Lazy<FieldAccessor<RGD_StateMachine_VarunaBoss, ObjectOfInterestType>> _confirmedCirculationID =
				new System.Lazy<FieldAccessor<RGD_StateMachine_VarunaBoss, ObjectOfInterestType>>(() => FieldAccessor<RGD_StateMachine_VarunaBoss, ObjectOfInterestType>.Create("confirmedCirculationID"));

		public static ObjectOfInterestType GetCurrentCirculationID(this RGD_StateMachine_VarunaBoss __self) => _currentCirculationID.Value.GetValue(__self);
		public static void SetCurrentCirculationID(this RGD_StateMachine_VarunaBoss __self, ObjectOfInterestType value) => _currentCirculationID.Value.SetValue(__self, value);
		public static ObjectOfInterestType GetConfirmedCirculationID(this RGD_StateMachine_VarunaBoss __self) => _confirmedCirculationID.Value.GetValue(__self);
		public static void SetConfirmedCirculationID(this RGD_StateMachine_VarunaBoss __self, ObjectOfInterestType value) => _confirmedCirculationID.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<RGD_StateMachine_VarunaBoss>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_StateMachine_VarunaBoss>>(() => MethodAccessor<RGD_StateMachine_VarunaBoss>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_StateMachine_VarunaBoss __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_Stonebird
	{

		private static readonly System.Lazy<MethodAccessor<RGD_Stonebird>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_Stonebird>>(() => MethodAccessor<RGD_Stonebird>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_Stonebird __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_Stonebird_DropStone
	{

		private static readonly System.Lazy<MethodAccessor<RGD_Stonebird_DropStone>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_Stonebird_DropStone>>(() => MethodAccessor<RGD_Stonebird_DropStone>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_Stonebird_DropStone __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_Stonebird_GrabStone
	{

		private static readonly System.Lazy<MethodAccessor<RGD_Stonebird_GrabStone>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_Stonebird_GrabStone>>(() => MethodAccessor<RGD_Stonebird_GrabStone>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_Stonebird_GrabStone __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_AnchorStationary
	{

		private static readonly System.Lazy<MethodAccessor<RGD_AnchorStationary>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_AnchorStationary>>(() => MethodAccessor<RGD_AnchorStationary>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_AnchorStationary __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_AnchorThrowable
	{

		private static readonly System.Lazy<MethodAccessor<RGD_AnchorThrowable>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_AnchorThrowable>>(() => MethodAccessor<RGD_AnchorThrowable>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_AnchorThrowable __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_BatteryCharger
	{

		private static readonly System.Lazy<MethodAccessor<RGD_BatteryCharger>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_BatteryCharger>>(() => MethodAccessor<RGD_BatteryCharger>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_BatteryCharger __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_BeeHive
	{

		private static readonly System.Lazy<MethodAccessor<RGD_BeeHive>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_BeeHive>>(() => MethodAccessor<RGD_BeeHive>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_BeeHive __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_BiofuelExtactor
	{

		private static readonly System.Lazy<FieldAccessor<RGD_BiofuelExtactor, RGD_Tank>> _honeyTank =
				new System.Lazy<FieldAccessor<RGD_BiofuelExtactor, RGD_Tank>>(() => FieldAccessor<RGD_BiofuelExtactor, RGD_Tank>.Create("honeyTank"));

		public static RGD_Tank GetHoneyTank(this RGD_BiofuelExtactor __self) => _honeyTank.Value.GetValue(__self);
		public static void SetHoneyTank(this RGD_BiofuelExtactor __self, RGD_Tank value) => _honeyTank.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<RGD_BiofuelExtactor>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_BiofuelExtactor>>(() => MethodAccessor<RGD_BiofuelExtactor>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_BiofuelExtactor __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_BiomeZone
	{

		private static readonly System.Lazy<MethodAccessor<RGD_BiomeZone>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_BiomeZone>>(() => MethodAccessor<RGD_BiomeZone>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_BiomeZone __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_Birdsnest
	{

		private static readonly System.Lazy<MethodAccessor<RGD_Birdsnest>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_Birdsnest>>(() => MethodAccessor<RGD_Birdsnest>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_Birdsnest __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_Block
	{

		private static readonly System.Lazy<MethodAccessor<RGD_Block>> _Constructor3483718959 =
				new System.Lazy<MethodAccessor<RGD_Block>>(() => MethodAccessor<RGD_Block>.Create("Constructor", typeof(Block)));
		private static readonly System.Lazy<MethodAccessor<RGD_Block>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_Block>>(() => MethodAccessor<RGD_Block>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void Constructor(this RGD_Block __self, Block block) => _Constructor3483718959.Value.Invoke(__self, block);
		public static void SetDefaults(this RGD_Block __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_Block_BatteryCharger
	{

		private static readonly System.Lazy<MethodAccessor<RGD_Block_BatteryCharger>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_Block_BatteryCharger>>(() => MethodAccessor<RGD_Block_BatteryCharger>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_Block_BatteryCharger __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_Block_BeeHive
	{

		private static readonly System.Lazy<MethodAccessor<RGD_Block_BeeHive>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_Block_BeeHive>>(() => MethodAccessor<RGD_Block_BeeHive>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_Block_BeeHive __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_Block_BiofuelExtractor
	{

		private static readonly System.Lazy<MethodAccessor<RGD_Block_BiofuelExtractor>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_Block_BiofuelExtractor>>(() => MethodAccessor<RGD_Block_BiofuelExtractor>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_Block_BiofuelExtractor __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_Block_CookingPot
	{

		private static readonly System.Lazy<MethodAccessor<RGD_Block_CookingPot>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_Block_CookingPot>>(() => MethodAccessor<RGD_Block_CookingPot>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_Block_CookingPot __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_Block_DetailPlank
	{

		private static readonly System.Lazy<MethodAccessor<RGD_Block_DetailPlank>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_Block_DetailPlank>>(() => MethodAccessor<RGD_Block_DetailPlank>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_Block_DetailPlank __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_Block_ElectricPurifier
	{

		private static readonly System.Lazy<MethodAccessor<RGD_Block_ElectricPurifier>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_Block_ElectricPurifier>>(() => MethodAccessor<RGD_Block_ElectricPurifier>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_Block_ElectricPurifier __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_Block_Fence
	{

		private static readonly System.Lazy<FieldAccessor<RGD_Block_Fence, bool>> _c =
				new System.Lazy<FieldAccessor<RGD_Block_Fence, bool>>(() => FieldAccessor<RGD_Block_Fence, bool>.Create("c"));
		private static readonly System.Lazy<FieldAccessor<RGD_Block_Fence, bool>> _a =
				new System.Lazy<FieldAccessor<RGD_Block_Fence, bool>>(() => FieldAccessor<RGD_Block_Fence, bool>.Create("a"));

		public static bool GetC(this RGD_Block_Fence __self) => _c.Value.GetValue(__self);
		public static void SetC(this RGD_Block_Fence __self, bool value) => _c.Value.SetValue(__self, value);
		public static bool GetA(this RGD_Block_Fence __self) => _a.Value.GetValue(__self);
		public static void SetA(this RGD_Block_Fence __self, bool value) => _a.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<RGD_Block_Fence>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_Block_Fence>>(() => MethodAccessor<RGD_Block_Fence>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_Block_Fence __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_Block_Firework
	{

		private static readonly System.Lazy<MethodAccessor<RGD_Block_Firework>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_Block_Firework>>(() => MethodAccessor<RGD_Block_Firework>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_Block_Firework __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_Block_Foundation
	{

		private static readonly System.Lazy<FieldAccessor<RGD_Block_Foundation, bool>> _r =
				new System.Lazy<FieldAccessor<RGD_Block_Foundation, bool>>(() => FieldAccessor<RGD_Block_Foundation, bool>.Create("r"));

		public static bool GetR(this RGD_Block_Foundation __self) => _r.Value.GetValue(__self);
		public static void SetR(this RGD_Block_Foundation __self, bool value) => _r.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<RGD_Block_Foundation>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_Block_Foundation>>(() => MethodAccessor<RGD_Block_Foundation>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_Block_Foundation __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_Block_FuelTank
	{

		private static readonly System.Lazy<MethodAccessor<RGD_Block_FuelTank>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_Block_FuelTank>>(() => MethodAccessor<RGD_Block_FuelTank>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_Block_FuelTank __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_Block_Interactable
	{

		private static readonly System.Lazy<FieldAccessor<RGD_Block_Interactable, int>> _ii =
				new System.Lazy<FieldAccessor<RGD_Block_Interactable, int>>(() => FieldAccessor<RGD_Block_Interactable, int>.Create("ii"));

		public static int GetIi(this RGD_Block_Interactable __self) => _ii.Value.GetValue(__self);
		public static void SetIi(this RGD_Block_Interactable __self, int value) => _ii.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<RGD_Block_Interactable>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_Block_Interactable>>(() => MethodAccessor<RGD_Block_Interactable>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_Block_Interactable __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_Block_Radio
	{

		private static readonly System.Lazy<MethodAccessor<RGD_Block_Radio>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_Block_Radio>>(() => MethodAccessor<RGD_Block_Radio>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_Block_Radio __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_Block_Recycler
	{

		private static readonly System.Lazy<MethodAccessor<RGD_Block_Recycler>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_Block_Recycler>>(() => MethodAccessor<RGD_Block_Recycler>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_Block_Recycler __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_Block_Sprinkler
	{

		private static readonly System.Lazy<MethodAccessor<RGD_Block_Sprinkler>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_Block_Sprinkler>>(() => MethodAccessor<RGD_Block_Sprinkler>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_Block_Sprinkler __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_Block_TicTacToe
	{

		private static readonly System.Lazy<MethodAccessor<RGD_Block_TicTacToe>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_Block_TicTacToe>>(() => MethodAccessor<RGD_Block_TicTacToe>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_Block_TicTacToe __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_Block_WindTurbine
	{

		private static readonly System.Lazy<MethodAccessor<RGD_Block_WindTurbine>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_Block_WindTurbine>>(() => MethodAccessor<RGD_Block_WindTurbine>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_Block_WindTurbine __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_Brick
	{

		private static readonly System.Lazy<MethodAccessor<RGD_Brick>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_Brick>>(() => MethodAccessor<RGD_Brick>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_Brick __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_CarryNetworkInterestPoint
	{

		private static readonly System.Lazy<MethodAccessor<RGD_CarryNetworkInterestPoint>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_CarryNetworkInterestPoint>>(() => MethodAccessor<RGD_CarryNetworkInterestPoint>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_CarryNetworkInterestPoint __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_CarryNetwork
	{

		private static readonly System.Lazy<FieldAccessor<RGD_CarryNetwork, float>> _x =
				new System.Lazy<FieldAccessor<RGD_CarryNetwork, float>>(() => FieldAccessor<RGD_CarryNetwork, float>.Create("x"));
		private static readonly System.Lazy<FieldAccessor<RGD_CarryNetwork, float>> _y =
				new System.Lazy<FieldAccessor<RGD_CarryNetwork, float>>(() => FieldAccessor<RGD_CarryNetwork, float>.Create("y"));
		private static readonly System.Lazy<FieldAccessor<RGD_CarryNetwork, float>> _z =
				new System.Lazy<FieldAccessor<RGD_CarryNetwork, float>>(() => FieldAccessor<RGD_CarryNetwork, float>.Create("z"));
		private static readonly System.Lazy<FieldAccessor<RGD_CarryNetwork, float>> _q =
				new System.Lazy<FieldAccessor<RGD_CarryNetwork, float>>(() => FieldAccessor<RGD_CarryNetwork, float>.Create("q"));
		private static readonly System.Lazy<FieldAccessor<RGD_CarryNetwork, float>> _w =
				new System.Lazy<FieldAccessor<RGD_CarryNetwork, float>>(() => FieldAccessor<RGD_CarryNetwork, float>.Create("w"));
		private static readonly System.Lazy<FieldAccessor<RGD_CarryNetwork, float>> _e =
				new System.Lazy<FieldAccessor<RGD_CarryNetwork, float>>(() => FieldAccessor<RGD_CarryNetwork, float>.Create("e"));
		private static readonly System.Lazy<FieldAccessor<RGD_CarryNetwork, uint>> _oi =
				new System.Lazy<FieldAccessor<RGD_CarryNetwork, uint>>(() => FieldAccessor<RGD_CarryNetwork, uint>.Create("oi"));
		private static readonly System.Lazy<FieldAccessor<RGD_CarryNetwork, ulong>> _steamID =
				new System.Lazy<FieldAccessor<RGD_CarryNetwork, ulong>>(() => FieldAccessor<RGD_CarryNetwork, ulong>.Create("steamID"));

		public static float GetX(this RGD_CarryNetwork __self) => _x.Value.GetValue(__self);
		public static void SetX(this RGD_CarryNetwork __self, float value) => _x.Value.SetValue(__self, value);
		public static float GetY(this RGD_CarryNetwork __self) => _y.Value.GetValue(__self);
		public static void SetY(this RGD_CarryNetwork __self, float value) => _y.Value.SetValue(__self, value);
		public static float GetZ(this RGD_CarryNetwork __self) => _z.Value.GetValue(__self);
		public static void SetZ(this RGD_CarryNetwork __self, float value) => _z.Value.SetValue(__self, value);
		public static float GetQ(this RGD_CarryNetwork __self) => _q.Value.GetValue(__self);
		public static void SetQ(this RGD_CarryNetwork __self, float value) => _q.Value.SetValue(__self, value);
		public static float GetW(this RGD_CarryNetwork __self) => _w.Value.GetValue(__self);
		public static void SetW(this RGD_CarryNetwork __self, float value) => _w.Value.SetValue(__self, value);
		public static float GetE(this RGD_CarryNetwork __self) => _e.Value.GetValue(__self);
		public static void SetE(this RGD_CarryNetwork __self, float value) => _e.Value.SetValue(__self, value);
		public static uint GetOi(this RGD_CarryNetwork __self) => _oi.Value.GetValue(__self);
		public static void SetOi(this RGD_CarryNetwork __self, uint value) => _oi.Value.SetValue(__self, value);
		public static ulong GetSteamID(this RGD_CarryNetwork __self) => _steamID.Value.GetValue(__self);
		public static void SetSteamID(this RGD_CarryNetwork __self, ulong value) => _steamID.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<RGD_CarryNetwork>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_CarryNetwork>>(() => MethodAccessor<RGD_CarryNetwork>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_CarryNetwork __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_ChunkPoint
	{

		private static readonly System.Lazy<MethodAccessor<RGD_ChunkPoint>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_ChunkPoint>>(() => MethodAccessor<RGD_ChunkPoint>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_ChunkPoint __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_CookingPot
	{

		private static readonly System.Lazy<MethodAccessor<RGD_CookingPot>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_CookingPot>>(() => MethodAccessor<RGD_CookingPot>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_CookingPot __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_CookingPot_Slot
	{

		private static readonly System.Lazy<MethodAccessor<RGD_CookingPot_Slot>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_CookingPot_Slot>>(() => MethodAccessor<RGD_CookingPot_Slot>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_CookingPot_Slot __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_CookingStand
	{

		private static readonly System.Lazy<MethodAccessor<RGD_CookingStand>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_CookingStand>>(() => MethodAccessor<RGD_CookingStand>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_CookingStand __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_CookingSlot
	{

		private static readonly System.Lazy<MethodAccessor<RGD_CookingSlot>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_CookingSlot>>(() => MethodAccessor<RGD_CookingSlot>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_CookingSlot __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_CookingTable_Juicer
	{

		private static readonly System.Lazy<MethodAccessor<RGD_CookingTable_Juicer>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_CookingTable_Juicer>>(() => MethodAccessor<RGD_CookingTable_Juicer>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_CookingTable_Juicer __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_CookingTable_Pot
	{

		private static readonly System.Lazy<MethodAccessor<RGD_CookingTable_Pot>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_CookingTable_Pot>>(() => MethodAccessor<RGD_CookingTable_Pot>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_CookingTable_Pot __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_Cookingstand_Smelter_Electric
	{

		private static readonly System.Lazy<MethodAccessor<RGD_Cookingstand_Smelter_Electric>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_Cookingstand_Smelter_Electric>>(() => MethodAccessor<RGD_Cookingstand_Smelter_Electric>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_Cookingstand_Smelter_Electric __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_Cropplot
	{

		private static readonly System.Lazy<MethodAccessor<RGD_Cropplot>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_Cropplot>>(() => MethodAccessor<RGD_Cropplot>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_Cropplot __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_PlantationSlot
	{

		private static readonly System.Lazy<MethodAccessor<RGD_PlantationSlot>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_PlantationSlot>>(() => MethodAccessor<RGD_PlantationSlot>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_PlantationSlot __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_Yield
	{

		private static readonly System.Lazy<MethodAccessor<RGD_Yield>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_Yield>>(() => MethodAccessor<RGD_Yield>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_Yield __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_Door
	{

		private static readonly System.Lazy<MethodAccessor<RGD_Door>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_Door>>(() => MethodAccessor<RGD_Door>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_Door __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_Extractor
	{

		private static readonly System.Lazy<FieldAccessor<RGD_Extractor, RGD_Tank>> _processTank =
				new System.Lazy<FieldAccessor<RGD_Extractor, RGD_Tank>>(() => FieldAccessor<RGD_Extractor, RGD_Tank>.Create("processTank"));
		private static readonly System.Lazy<FieldAccessor<RGD_Extractor, RGD_Tank>> _outputTank =
				new System.Lazy<FieldAccessor<RGD_Extractor, RGD_Tank>>(() => FieldAccessor<RGD_Extractor, RGD_Tank>.Create("outputTank"));

		public static RGD_Tank GetProcessTank(this RGD_Extractor __self) => _processTank.Value.GetValue(__self);
		public static void SetProcessTank(this RGD_Extractor __self, RGD_Tank value) => _processTank.Value.SetValue(__self, value);
		public static RGD_Tank GetOutputTank(this RGD_Extractor __self) => _outputTank.Value.GetValue(__self);
		public static void SetOutputTank(this RGD_Extractor __self, RGD_Tank value) => _outputTank.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<RGD_Extractor>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_Extractor>>(() => MethodAccessor<RGD_Extractor>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_Extractor __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_FloatingItem
	{

		private static readonly System.Lazy<MethodAccessor<RGD_FloatingItem>> _DeserializeSpawnerIndex3432761845 =
				new System.Lazy<MethodAccessor<RGD_FloatingItem>>(() => MethodAccessor<RGD_FloatingItem>.Create("DeserializeSpawnerIndex", typeof(System.Object)));
		private static readonly System.Lazy<MethodAccessor<RGD_FloatingItem>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_FloatingItem>>(() => MethodAccessor<RGD_FloatingItem>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static int DeserializeSpawnerIndex(this RGD_FloatingItem __self, System.Object e) => (int)_DeserializeSpawnerIndex3432761845.Value.Invoke(__self, e);
		public static void SetDefaults(this RGD_FloatingItem __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_Fuel
	{

		private static readonly System.Lazy<MethodAccessor<RGD_Fuel>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_Fuel>>(() => MethodAccessor<RGD_Fuel>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_Fuel __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_Game
	{

		private static readonly System.Lazy<MethodAccessor<RGD_Game>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_Game>>(() => MethodAccessor<RGD_Game>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_Game __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_PlayerInventory
	{

		private static readonly System.Lazy<MethodAccessor<RGD_PlayerInventory>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_PlayerInventory>>(() => MethodAccessor<RGD_PlayerInventory>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_PlayerInventory __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_Slot
	{

		private static readonly System.Lazy<MethodAccessor<RGD_Slot>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_Slot>>(() => MethodAccessor<RGD_Slot>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_Slot __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_Storage
	{

		private static readonly System.Lazy<MethodAccessor<RGD_Storage>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_Storage>>(() => MethodAccessor<RGD_Storage>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_Storage __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_ItemCollector
	{

		private static readonly System.Lazy<MethodAccessor<RGD_ItemCollector>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_ItemCollector>>(() => MethodAccessor<RGD_ItemCollector>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_ItemCollector __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_ItemInstance
	{

		private static readonly System.Lazy<MethodAccessor<RGD_ItemInstance>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_ItemInstance>>(() => MethodAccessor<RGD_ItemInstance>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_ItemInstance __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_LandmarkSpawner
	{

		private static readonly System.Lazy<MethodAccessor<RGD_LandmarkSpawner>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_LandmarkSpawner>>(() => MethodAccessor<RGD_LandmarkSpawner>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_LandmarkSpawner __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_Landmark
	{

		private static readonly System.Lazy<MethodAccessor<RGD_Landmark>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_Landmark>>(() => MethodAccessor<RGD_Landmark>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_Landmark __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_LandmarkItem
	{

		private static readonly System.Lazy<MethodAccessor<RGD_LandmarkItem>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_LandmarkItem>>(() => MethodAccessor<RGD_LandmarkItem>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_LandmarkItem __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_LandmarkItem_CarryNetworked
	{

		private static readonly System.Lazy<MethodAccessor<RGD_LandmarkItem_CarryNetworked>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_LandmarkItem_CarryNetworked>>(() => MethodAccessor<RGD_LandmarkItem_CarryNetworked>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_LandmarkItem_CarryNetworked __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_LandmarkItem_ChallengePipe
	{

		private static readonly System.Lazy<FieldAccessor<RGD_LandmarkItem_ChallengePipe, RGD_RotationComponent>> _rgd_rotationComponent =
				new System.Lazy<FieldAccessor<RGD_LandmarkItem_ChallengePipe, RGD_RotationComponent>>(() => FieldAccessor<RGD_LandmarkItem_ChallengePipe, RGD_RotationComponent>.Create("rgd_rotationComponent"));

		public static RGD_RotationComponent GetRgd_rotationComponent(this RGD_LandmarkItem_ChallengePipe __self) => _rgd_rotationComponent.Value.GetValue(__self);
		public static void SetRgd_rotationComponent(this RGD_LandmarkItem_ChallengePipe __self, RGD_RotationComponent value) => _rgd_rotationComponent.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<RGD_LandmarkItem_ChallengePipe>> _RestoreChallengePipe3449795211 =
				new System.Lazy<MethodAccessor<RGD_LandmarkItem_ChallengePipe>>(() => MethodAccessor<RGD_LandmarkItem_ChallengePipe>.Create("RestoreChallengePipe", typeof(LandmarkItem)));
		private static readonly System.Lazy<MethodAccessor<RGD_LandmarkItem_ChallengePipe>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_LandmarkItem_ChallengePipe>>(() => MethodAccessor<RGD_LandmarkItem_ChallengePipe>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void RestoreChallengePipe(this RGD_LandmarkItem_ChallengePipe __self, LandmarkItem landmarkItem) => _RestoreChallengePipe3449795211.Value.Invoke(__self, landmarkItem);
		public static void SetDefaults(this RGD_LandmarkItem_ChallengePipe __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_LandmarkItem_CharacterUnlock
	{

		private static readonly System.Lazy<MethodAccessor<RGD_LandmarkItem_CharacterUnlock>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_LandmarkItem_CharacterUnlock>>(() => MethodAccessor<RGD_LandmarkItem_CharacterUnlock>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_LandmarkItem_CharacterUnlock __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_LandmarkItem_ClawChallenge
	{

		private static readonly System.Lazy<MethodAccessor<RGD_LandmarkItem_ClawChallenge>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_LandmarkItem_ClawChallenge>>(() => MethodAccessor<RGD_LandmarkItem_ClawChallenge>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_LandmarkItem_ClawChallenge __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_ClawChallengeLiftableObject
	{

		private static readonly System.Lazy<MethodAccessor<RGD_ClawChallengeLiftableObject>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_ClawChallengeLiftableObject>>(() => MethodAccessor<RGD_ClawChallengeLiftableObject>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_ClawChallengeLiftableObject __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_LandmarkItem_ComputerChallenge
	{

		private static readonly System.Lazy<MethodAccessor<RGD_LandmarkItem_ComputerChallenge>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_LandmarkItem_ComputerChallenge>>(() => MethodAccessor<RGD_LandmarkItem_ComputerChallenge>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_LandmarkItem_ComputerChallenge __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_LandmarkItem_Container
	{

		private static readonly System.Lazy<FieldAccessor<RGD_LandmarkItem_Container, RGD_CarryNetwork[]>> _i =
				new System.Lazy<FieldAccessor<RGD_LandmarkItem_Container, RGD_CarryNetwork[]>>(() => FieldAccessor<RGD_LandmarkItem_Container, RGD_CarryNetwork[]>.Create("i"));

		public static RGD_CarryNetwork[] GetI(this RGD_LandmarkItem_Container __self) => _i.Value.GetValue(__self);
		public static void SetI(this RGD_LandmarkItem_Container __self, RGD_CarryNetwork[] value) => _i.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<RGD_LandmarkItem_Container>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_LandmarkItem_Container>>(() => MethodAccessor<RGD_LandmarkItem_Container>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_LandmarkItem_Container __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_LandmarkItem_Elevator
	{

		private static readonly System.Lazy<MethodAccessor<RGD_LandmarkItem_Elevator>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_LandmarkItem_Elevator>>(() => MethodAccessor<RGD_LandmarkItem_Elevator>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_LandmarkItem_Elevator __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_LandmarkItem_JusticeScale
	{

		private static readonly System.Lazy<MethodAccessor<RGD_LandmarkItem_JusticeScale>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_LandmarkItem_JusticeScale>>(() => MethodAccessor<RGD_LandmarkItem_JusticeScale>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_LandmarkItem_JusticeScale __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_LandmarkItem_Keypad
	{

		private static readonly System.Lazy<MethodAccessor<RGD_LandmarkItem_Keypad>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_LandmarkItem_Keypad>>(() => MethodAccessor<RGD_LandmarkItem_Keypad>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_LandmarkItem_Keypad __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_LandmarkItem_PickupItem
	{

		private static readonly System.Lazy<MethodAccessor<RGD_LandmarkItem_PickupItem>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_LandmarkItem_PickupItem>>(() => MethodAccessor<RGD_LandmarkItem_PickupItem>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_LandmarkItem_PickupItem __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_LandmarkItem_QuestEvent
	{

		private static readonly System.Lazy<MethodAccessor<RGD_LandmarkItem_QuestEvent>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_LandmarkItem_QuestEvent>>(() => MethodAccessor<RGD_LandmarkItem_QuestEvent>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_LandmarkItem_QuestEvent __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_LandmarkItem_QuestEvent_OneWay
	{

		private static readonly System.Lazy<MethodAccessor<RGD_LandmarkItem_QuestEvent_OneWay>> _RestoreOneWayComponent3449795211 =
				new System.Lazy<MethodAccessor<RGD_LandmarkItem_QuestEvent_OneWay>>(() => MethodAccessor<RGD_LandmarkItem_QuestEvent_OneWay>.Create("RestoreOneWayComponent", typeof(LandmarkItem)));
		private static readonly System.Lazy<MethodAccessor<RGD_LandmarkItem_QuestEvent_OneWay>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_LandmarkItem_QuestEvent_OneWay>>(() => MethodAccessor<RGD_LandmarkItem_QuestEvent_OneWay>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void RestoreOneWayComponent(this RGD_LandmarkItem_QuestEvent_OneWay __self, LandmarkItem landmarkItem) => _RestoreOneWayComponent3449795211.Value.Invoke(__self, landmarkItem);
		public static void SetDefaults(this RGD_LandmarkItem_QuestEvent_OneWay __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_LandmarkItem_SeleneFightChallenge
	{

		private static readonly System.Lazy<MethodAccessor<RGD_LandmarkItem_SeleneFightChallenge>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_LandmarkItem_SeleneFightChallenge>>(() => MethodAccessor<RGD_LandmarkItem_SeleneFightChallenge>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_LandmarkItem_SeleneFightChallenge __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_LandmarkItem_SnowmobileShed
	{

		private static readonly System.Lazy<MethodAccessor<RGD_LandmarkItem_SnowmobileShed>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_LandmarkItem_SnowmobileShed>>(() => MethodAccessor<RGD_LandmarkItem_SnowmobileShed>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_LandmarkItem_SnowmobileShed __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_LandmarkItem_StarChallenge
	{

		private static readonly System.Lazy<MethodAccessor<RGD_LandmarkItem_StarChallenge>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_LandmarkItem_StarChallenge>>(() => MethodAccessor<RGD_LandmarkItem_StarChallenge>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_LandmarkItem_StarChallenge __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_LandmarkItem_TangaroaCockpitLaunch
	{

		private static readonly System.Lazy<FieldAccessor<RGD_LandmarkItem_TangaroaCockpitLaunch, int>> _x =
				new System.Lazy<FieldAccessor<RGD_LandmarkItem_TangaroaCockpitLaunch, int>>(() => FieldAccessor<RGD_LandmarkItem_TangaroaCockpitLaunch, int>.Create("x"));
		private static readonly System.Lazy<FieldAccessor<RGD_LandmarkItem_TangaroaCockpitLaunch, int>> _z =
				new System.Lazy<FieldAccessor<RGD_LandmarkItem_TangaroaCockpitLaunch, int>>(() => FieldAccessor<RGD_LandmarkItem_TangaroaCockpitLaunch, int>.Create("z"));

		public static int GetX(this RGD_LandmarkItem_TangaroaCockpitLaunch __self) => _x.Value.GetValue(__self);
		public static void SetX(this RGD_LandmarkItem_TangaroaCockpitLaunch __self, int value) => _x.Value.SetValue(__self, value);
		public static int GetZ(this RGD_LandmarkItem_TangaroaCockpitLaunch __self) => _z.Value.GetValue(__self);
		public static void SetZ(this RGD_LandmarkItem_TangaroaCockpitLaunch __self, int value) => _z.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<RGD_LandmarkItem_TangaroaCockpitLaunch>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_LandmarkItem_TangaroaCockpitLaunch>>(() => MethodAccessor<RGD_LandmarkItem_TangaroaCockpitLaunch>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_LandmarkItem_TangaroaCockpitLaunch __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_LandmarkItem_TradingPost
	{

		private static readonly System.Lazy<MethodAccessor<RGD_LandmarkItem_TradingPost>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_LandmarkItem_TradingPost>>(() => MethodAccessor<RGD_LandmarkItem_TradingPost>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_LandmarkItem_TradingPost __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_LandmarkItem_VendingMachine
	{

		private static readonly System.Lazy<MethodAccessor<RGD_LandmarkItem_VendingMachine>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_LandmarkItem_VendingMachine>>(() => MethodAccessor<RGD_LandmarkItem_VendingMachine>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_LandmarkItem_VendingMachine __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_LandmarkItem_WaterLoggedHatch
	{

		private static readonly System.Lazy<FieldAccessor<RGD_LandmarkItem_WaterLoggedHatch, float>> _normalizedFill =
				new System.Lazy<FieldAccessor<RGD_LandmarkItem_WaterLoggedHatch, float>>(() => FieldAccessor<RGD_LandmarkItem_WaterLoggedHatch, float>.Create("normalizedFill"));

		public static float GetNormalizedFill(this RGD_LandmarkItem_WaterLoggedHatch __self) => _normalizedFill.Value.GetValue(__self);
		public static void SetNormalizedFill(this RGD_LandmarkItem_WaterLoggedHatch __self, float value) => _normalizedFill.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<RGD_LandmarkItem_WaterLoggedHatch>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_LandmarkItem_WaterLoggedHatch>>(() => MethodAccessor<RGD_LandmarkItem_WaterLoggedHatch>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_LandmarkItem_WaterLoggedHatch __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_LandmarkItem_WaterWell
	{

		private static readonly System.Lazy<FieldAccessor<RGD_LandmarkItem_WaterWell, float>> _fillAmount =
				new System.Lazy<FieldAccessor<RGD_LandmarkItem_WaterWell, float>>(() => FieldAccessor<RGD_LandmarkItem_WaterWell, float>.Create("fillAmount"));

		public static float GetFillAmount(this RGD_LandmarkItem_WaterWell __self) => _fillAmount.Value.GetValue(__self);
		public static void SetFillAmount(this RGD_LandmarkItem_WaterWell __self, float value) => _fillAmount.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<RGD_LandmarkItem_WaterWell>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_LandmarkItem_WaterWell>>(() => MethodAccessor<RGD_LandmarkItem_WaterWell>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_LandmarkItem_WaterWell __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_Landmark_Raft
	{

		private static readonly System.Lazy<MethodAccessor<RGD_Landmark_Raft>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_Landmark_Raft>>(() => MethodAccessor<RGD_Landmark_Raft>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_Landmark_Raft __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_MeshPath
	{

		private static readonly System.Lazy<MethodAccessor<RGD_MeshPath>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_MeshPath>>(() => MethodAccessor<RGD_MeshPath>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_MeshPath __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_MotorWheel
	{

		private static readonly System.Lazy<MethodAccessor<RGD_MotorWheel>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_MotorWheel>>(() => MethodAccessor<RGD_MotorWheel>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_MotorWheel __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_NetworkBehaviour
	{

		private static readonly System.Lazy<MethodAccessor<RGD_NetworkBehaviour>> _GetIndex3432761845 =
				new System.Lazy<MethodAccessor<RGD_NetworkBehaviour>>(() => MethodAccessor<RGD_NetworkBehaviour>.Create("GetIndex", typeof(System.Object)));
		private static readonly System.Lazy<MethodAccessor<RGD_NetworkBehaviour>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_NetworkBehaviour>>(() => MethodAccessor<RGD_NetworkBehaviour>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static int GetIndex(this RGD_NetworkBehaviour __self, System.Object value) => (int)_GetIndex3432761845.Value.Invoke(__self, value);
		public static void SetDefaults(this RGD_NetworkBehaviour __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_PickupItem
	{

		private static readonly System.Lazy<FieldAccessor<RGD_PickupItem, float>> _xPos =
				new System.Lazy<FieldAccessor<RGD_PickupItem, float>>(() => FieldAccessor<RGD_PickupItem, float>.Create("xPos"));
		private static readonly System.Lazy<FieldAccessor<RGD_PickupItem, float>> _yPos =
				new System.Lazy<FieldAccessor<RGD_PickupItem, float>>(() => FieldAccessor<RGD_PickupItem, float>.Create("yPos"));
		private static readonly System.Lazy<FieldAccessor<RGD_PickupItem, float>> _zPos =
				new System.Lazy<FieldAccessor<RGD_PickupItem, float>>(() => FieldAccessor<RGD_PickupItem, float>.Create("zPos"));
		private static readonly System.Lazy<FieldAccessor<RGD_PickupItem, float>> _xRot =
				new System.Lazy<FieldAccessor<RGD_PickupItem, float>>(() => FieldAccessor<RGD_PickupItem, float>.Create("xRot"));
		private static readonly System.Lazy<FieldAccessor<RGD_PickupItem, float>> _yRot =
				new System.Lazy<FieldAccessor<RGD_PickupItem, float>>(() => FieldAccessor<RGD_PickupItem, float>.Create("yRot"));
		private static readonly System.Lazy<FieldAccessor<RGD_PickupItem, float>> _zRot =
				new System.Lazy<FieldAccessor<RGD_PickupItem, float>>(() => FieldAccessor<RGD_PickupItem, float>.Create("zRot"));

		public static float GetXPos(this RGD_PickupItem __self) => _xPos.Value.GetValue(__self);
		public static void SetXPos(this RGD_PickupItem __self, float value) => _xPos.Value.SetValue(__self, value);
		public static float GetYPos(this RGD_PickupItem __self) => _yPos.Value.GetValue(__self);
		public static void SetYPos(this RGD_PickupItem __self, float value) => _yPos.Value.SetValue(__self, value);
		public static float GetZPos(this RGD_PickupItem __self) => _zPos.Value.GetValue(__self);
		public static void SetZPos(this RGD_PickupItem __self, float value) => _zPos.Value.SetValue(__self, value);
		public static float GetXRot(this RGD_PickupItem __self) => _xRot.Value.GetValue(__self);
		public static void SetXRot(this RGD_PickupItem __self, float value) => _xRot.Value.SetValue(__self, value);
		public static float GetYRot(this RGD_PickupItem __self) => _yRot.Value.GetValue(__self);
		public static void SetYRot(this RGD_PickupItem __self, float value) => _yRot.Value.SetValue(__self, value);
		public static float GetZRot(this RGD_PickupItem __self) => _zRot.Value.GetValue(__self);
		public static void SetZRot(this RGD_PickupItem __self, float value) => _zRot.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_RGD_Player
	{

		private static readonly System.Lazy<MethodAccessor<RGD_Player>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_Player>>(() => MethodAccessor<RGD_Player>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_Player __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_RadioPlayer
	{

		private static readonly System.Lazy<MethodAccessor<RGD_RadioPlayer>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_RadioPlayer>>(() => MethodAccessor<RGD_RadioPlayer>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_RadioPlayer __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_Reciever
	{

		private static readonly System.Lazy<MethodAccessor<RGD_Reciever>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_Reciever>>(() => MethodAccessor<RGD_Reciever>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_Reciever __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_RecieverFrequencies
	{

		private static readonly System.Lazy<MethodAccessor<RGD_RecieverFrequencies>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_RecieverFrequencies>>(() => MethodAccessor<RGD_RecieverFrequencies>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_RecieverFrequencies __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_Recycler
	{

		private static readonly System.Lazy<MethodAccessor<RGD_Recycler>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_Recycler>>(() => MethodAccessor<RGD_Recycler>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_Recycler __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_ResearchTable
	{

		private static readonly System.Lazy<MethodAccessor<RGD_ResearchTable>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_ResearchTable>>(() => MethodAccessor<RGD_ResearchTable>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_ResearchTable __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_ResearchTableWorld
	{

		private static readonly System.Lazy<MethodAccessor<RGD_ResearchTableWorld>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_ResearchTableWorld>>(() => MethodAccessor<RGD_ResearchTableWorld>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_ResearchTableWorld __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_RotationComponent
	{

		private static readonly System.Lazy<MethodAccessor<RGD_RotationComponent>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_RotationComponent>>(() => MethodAccessor<RGD_RotationComponent>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_RotationComponent __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_Sail
	{

		private static readonly System.Lazy<MethodAccessor<RGD_Sail>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_Sail>>(() => MethodAccessor<RGD_Sail>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_Sail __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_Scarecrow
	{

		private static readonly System.Lazy<MethodAccessor<RGD_Scarecrow>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_Scarecrow>>(() => MethodAccessor<RGD_Scarecrow>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_Scarecrow __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_Seagull
	{

		private static readonly System.Lazy<MethodAccessor<RGD_Seagull>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_Seagull>>(() => MethodAccessor<RGD_Seagull>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_Seagull __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_Shark
	{

		private static readonly System.Lazy<MethodAccessor<RGD_Shark>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_Shark>>(() => MethodAccessor<RGD_Shark>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_Shark __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_Shark_State_BiteRaft
	{

		private static readonly System.Lazy<MethodAccessor<RGD_Shark_State_BiteRaft>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_Shark_State_BiteRaft>>(() => MethodAccessor<RGD_Shark_State_BiteRaft>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_Shark_State_BiteRaft __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_Sharkbait
	{

		private static readonly System.Lazy<MethodAccessor<RGD_Sharkbait>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_Sharkbait>>(() => MethodAccessor<RGD_Sharkbait>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_Sharkbait __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_Snowmobile
	{

		private static readonly System.Lazy<MethodAccessor<RGD_Snowmobile>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_Snowmobile>>(() => MethodAccessor<RGD_Snowmobile>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_Snowmobile __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_SnowmobileSeat
	{

		private static readonly System.Lazy<MethodAccessor<RGD_SnowmobileSeat>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_SnowmobileSeat>>(() => MethodAccessor<RGD_SnowmobileSeat>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_SnowmobileSeat __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_Sprinkler
	{

		private static readonly System.Lazy<MethodAccessor<RGD_Sprinkler>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_Sprinkler>>(() => MethodAccessor<RGD_Sprinkler>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_Sprinkler __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_SteeringWheel
	{

		private static readonly System.Lazy<MethodAccessor<RGD_SteeringWheel>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_SteeringWheel>>(() => MethodAccessor<RGD_SteeringWheel>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_SteeringWheel __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_Tank
	{

		private static readonly System.Lazy<MethodAccessor<RGD_Tank>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_Tank>>(() => MethodAccessor<RGD_Tank>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_Tank __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_TextWriterObject
	{

		private static readonly System.Lazy<MethodAccessor<RGD_TextWriterObject>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_TextWriterObject>>(() => MethodAccessor<RGD_TextWriterObject>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_TextWriterObject __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_TradingPost
	{

		private static readonly System.Lazy<MethodAccessor<RGD_TradingPost>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_TradingPost>>(() => MethodAccessor<RGD_TradingPost>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_TradingPost __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_TreasurePoint
	{

		private static readonly System.Lazy<MethodAccessor<RGD_TreasurePoint>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_TreasurePoint>>(() => MethodAccessor<RGD_TreasurePoint>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_TreasurePoint __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_TreasurePoint_Landmark
	{

		private static readonly System.Lazy<MethodAccessor<RGD_TreasurePoint_Landmark>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_TreasurePoint_Landmark>>(() => MethodAccessor<RGD_TreasurePoint_Landmark>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_TreasurePoint_Landmark __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_TreasurePoint_Landmark_Networked
	{

		private static readonly System.Lazy<MethodAccessor<RGD_TreasurePoint_Landmark_Networked>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_TreasurePoint_Landmark_Networked>>(() => MethodAccessor<RGD_TreasurePoint_Landmark_Networked>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_TreasurePoint_Landmark_Networked __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_TreasurePoint_Networked
	{

		private static readonly System.Lazy<MethodAccessor<RGD_TreasurePoint_Networked>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_TreasurePoint_Networked>>(() => MethodAccessor<RGD_TreasurePoint_Networked>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_TreasurePoint_Networked __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_TriggerBoxAchievementUnlocker
	{

		private static readonly System.Lazy<MethodAccessor<RGD_TriggerBoxAchievementUnlocker>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_TriggerBoxAchievementUnlocker>>(() => MethodAccessor<RGD_TriggerBoxAchievementUnlocker>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_TriggerBoxAchievementUnlocker __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_Users
	{

		private static readonly System.Lazy<MethodAccessor<RGD_Users>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_Users>>(() => MethodAccessor<RGD_Users>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_Users __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_User
	{

		private static readonly System.Lazy<MethodAccessor<RGD_User>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_User>>(() => MethodAccessor<RGD_User>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_User __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_WindTurbine
	{

		private static readonly System.Lazy<MethodAccessor<RGD_WindTurbine>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_WindTurbine>>(() => MethodAccessor<RGD_WindTurbine>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_WindTurbine __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_World
	{

		private static readonly System.Lazy<MethodAccessor<RGD_World>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_World>>(() => MethodAccessor<RGD_World>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_World __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGD_ZiplinePath
	{

		private static readonly System.Lazy<MethodAccessor<RGD_ZiplinePath>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_ZiplinePath>>(() => MethodAccessor<RGD_ZiplinePath>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_ZiplinePath __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_SaveAndLoad
	{

		private static readonly System.Lazy<FieldAccessor<SaveAndLoad, System.String[]>> _invalidFileNameChars =
				new System.Lazy<FieldAccessor<SaveAndLoad, System.String[]>>(() => FieldAccessor<SaveAndLoad, System.String[]>.Create("invalidFileNameChars"));
		private static readonly System.Lazy<FieldAccessor<SaveAndLoad, float>> _autoSaveTimeDelay =
				new System.Lazy<FieldAccessor<SaveAndLoad, float>>(() => FieldAccessor<SaveAndLoad, float>.Create("autoSaveTimeDelay"));
		private static readonly System.Lazy<FieldAccessor<SaveAndLoad, float>> _autoSaveTimer =
				new System.Lazy<FieldAccessor<SaveAndLoad, float>>(() => FieldAccessor<SaveAndLoad, float>.Create("autoSaveTimer"));

		public static System.String[] GetInvalidFileNameChars(this SaveAndLoad __self) => _invalidFileNameChars.Value.GetValue(__self);
		public static void SetInvalidFileNameChars(this SaveAndLoad __self, System.String[] value) => _invalidFileNameChars.Value.SetValue(__self, value);
		public static float GetAutoSaveTimeDelay(this SaveAndLoad __self) => _autoSaveTimeDelay.Value.GetValue(__self);
		public static void SetAutoSaveTimeDelay(this SaveAndLoad __self, float value) => _autoSaveTimeDelay.Value.SetValue(__self, value);
		public static float GetAutoSaveTimer(this SaveAndLoad __self) => _autoSaveTimer.Value.GetValue(__self);
		public static void SetAutoSaveTimer(this SaveAndLoad __self, float value) => _autoSaveTimer.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<SaveAndLoad>> _Awake757602046 =
				new System.Lazy<MethodAccessor<SaveAndLoad>>(() => MethodAccessor<SaveAndLoad>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<SaveAndLoad>> _Start757602046 =
				new System.Lazy<MethodAccessor<SaveAndLoad>>(() => MethodAccessor<SaveAndLoad>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<SaveAndLoad>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<SaveAndLoad>>(() => MethodAccessor<SaveAndLoad>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<SaveAndLoad>> _Update757602046 =
				new System.Lazy<MethodAccessor<SaveAndLoad>>(() => MethodAccessor<SaveAndLoad>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<SaveAndLoad>> _HandleAutoSave757602046 =
				new System.Lazy<MethodAccessor<SaveAndLoad>>(() => MethodAccessor<SaveAndLoad>.Create("HandleAutoSave"));
		private static readonly System.Lazy<MethodAccessor<SaveAndLoad>> _GetLatestSaveDirectoryPath3454057852 =
				new System.Lazy<MethodAccessor<SaveAndLoad>>(() => MethodAccessor<SaveAndLoad>.Create("GetLatestSaveDirectoryPath", typeof(string)));
		private static readonly System.Lazy<MethodAccessor<SaveAndLoad>> _CheckSaveLimit1183613520 =
				new System.Lazy<MethodAccessor<SaveAndLoad>>(() => MethodAccessor<SaveAndLoad>.Create("CheckSaveLimit", typeof(string), typeof(int)));
		private static readonly System.Lazy<MethodAccessor<SaveAndLoad>> _IsDateTimeNewer355643980 =
				new System.Lazy<MethodAccessor<SaveAndLoad>>(() => MethodAccessor<SaveAndLoad>.Create("IsDateTimeNewer", typeof(System.DateTime), typeof(System.DateTime)));
		private static readonly System.Lazy<MethodAccessor<SaveAndLoad>> _CreateDirectoryAndMoveFile2054215474 =
				new System.Lazy<MethodAccessor<SaveAndLoad>>(() => MethodAccessor<SaveAndLoad>.Create("CreateDirectoryAndMoveFile", typeof(string), typeof(string)));
		private static readonly System.Lazy<MethodAccessor<SaveAndLoad>> _CreateDirectory3454057852 =
				new System.Lazy<MethodAccessor<SaveAndLoad>>(() => MethodAccessor<SaveAndLoad>.Create("CreateDirectory", typeof(string)));
		private static readonly System.Lazy<MethodAccessor<SaveAndLoad>> _CreateSaveDateFolderPath349950605 =
				new System.Lazy<MethodAccessor<SaveAndLoad>>(() => MethodAccessor<SaveAndLoad>.Create("CreateSaveDateFolderPath", typeof(string), typeof(System.DateTime)));
		private static readonly System.Lazy<MethodAccessor<SaveAndLoad>> _MoveDirectory2054215474 =
				new System.Lazy<MethodAccessor<SaveAndLoad>>(() => MethodAccessor<SaveAndLoad>.Create("MoveDirectory", typeof(string), typeof(string)));
		private static readonly System.Lazy<MethodAccessor<SaveAndLoad>> _ConvertOldSaveFileIntoNewFormat3440252333 =
				new System.Lazy<MethodAccessor<SaveAndLoad>>(() => MethodAccessor<SaveAndLoad>.Create("ConvertOldSaveFileIntoNewFormat", typeof(System.IO.FileInfo)));
		private static readonly System.Lazy<MethodAccessor<SaveAndLoad>> _SetNewGlobalObjectIndex3486186818 =
				new System.Lazy<MethodAccessor<SaveAndLoad>>(() => MethodAccessor<SaveAndLoad>.Create("SetNewGlobalObjectIndex", typeof(int)));
		private static readonly System.Lazy<MethodAccessor<SaveAndLoad>> _Save524832918 =
				new System.Lazy<MethodAccessor<SaveAndLoad>>(() => MethodAccessor<SaveAndLoad>.Create("Save", typeof(string), typeof(RGD)));
		private static readonly System.Lazy<MethodAccessor<SaveAndLoad>> _SaveUser757602046 =
				new System.Lazy<MethodAccessor<SaveAndLoad>>(() => MethodAccessor<SaveAndLoad>.Create("SaveUser"));
		private static readonly System.Lazy<MethodAccessor<SaveAndLoad>> _SaveWorld757602046 =
				new System.Lazy<MethodAccessor<SaveAndLoad>>(() => MethodAccessor<SaveAndLoad>.Create("SaveWorld"));
		private static readonly System.Lazy<MethodAccessor<SaveAndLoad>> _LoadTextWriterLate3651262468 =
				new System.Lazy<MethodAccessor<SaveAndLoad>>(() => MethodAccessor<SaveAndLoad>.Create("LoadTextWriterLate", typeof(RGD_TextWriterObject), typeof(float)));
		private static readonly System.Lazy<MethodAccessor<SaveAndLoad>> _RestoreBlock4054753682 =
				new System.Lazy<MethodAccessor<SaveAndLoad>>(() => MethodAccessor<SaveAndLoad>.Create("RestoreBlock", typeof(BlockCreator), typeof(RGD_Block)));
		private static readonly System.Lazy<MethodAccessor<SaveAndLoad>> _LoadRGDUsers757602046 =
				new System.Lazy<MethodAccessor<SaveAndLoad>>(() => MethodAccessor<SaveAndLoad>.Create("LoadRGDUsers"));
		private static readonly System.Lazy<MethodAccessor<SaveAndLoad>> _CreateRGDGame757602046 =
				new System.Lazy<MethodAccessor<SaveAndLoad>>(() => MethodAccessor<SaveAndLoad>.Create("CreateRGDGame"));

		public static void Awake(this SaveAndLoad __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this SaveAndLoad __self) => _Start757602046.Value.Invoke(__self);
		public static void OnDestroy(this SaveAndLoad __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void Update(this SaveAndLoad __self) => _Update757602046.Value.Invoke(__self);
		public static void HandleAutoSave(this SaveAndLoad __self) => _HandleAutoSave757602046.Value.Invoke(__self);
		public static string GetLatestSaveDirectoryPath(this SaveAndLoad __self, string folderPath) => (string)_GetLatestSaveDirectoryPath3454057852.Value.Invoke(__self, folderPath);
		public static void CheckSaveLimit(this SaveAndLoad __self, string folderPath, int limit) => _CheckSaveLimit1183613520.Value.Invoke(__self, folderPath, limit);
		public static bool IsDateTimeNewer(this SaveAndLoad __self, System.DateTime a, System.DateTime b) => (bool)_IsDateTimeNewer355643980.Value.Invoke(__self, a, b);
		public static void CreateDirectoryAndMoveFile(this SaveAndLoad __self, string filePath, string directoryPath) => _CreateDirectoryAndMoveFile2054215474.Value.Invoke(__self, filePath, directoryPath);
		public static System.IO.DirectoryInfo CreateDirectory(this SaveAndLoad __self, string path) => (System.IO.DirectoryInfo)_CreateDirectory3454057852.Value.Invoke(__self, path);
		public static string CreateSaveDateFolderPath(this SaveAndLoad __self, string rootFolderPath, System.DateTime time) => (string)_CreateSaveDateFolderPath349950605.Value.Invoke(__self, rootFolderPath, time);
		public static void MoveDirectory(this SaveAndLoad __self, string source, string target) => _MoveDirectory2054215474.Value.Invoke(__self, source, target);
		public static void ConvertOldSaveFileIntoNewFormat(this SaveAndLoad __self, System.IO.FileInfo fi) => _ConvertOldSaveFileIntoNewFormat3440252333.Value.Invoke(__self, fi);
		public static void SetNewGlobalObjectIndex(this SaveAndLoad __self, int newIndex) => _SetNewGlobalObjectIndex3486186818.Value.Invoke(__self, newIndex);
		public static void Save(this SaveAndLoad __self, string filename, RGD raftgamedata) => _Save524832918.Value.Invoke(__self, filename, raftgamedata);
		public static void SaveUser(this SaveAndLoad __self) => _SaveUser757602046.Value.Invoke(__self);
		public static void SaveWorld(this SaveAndLoad __self) => _SaveWorld757602046.Value.Invoke(__self);
		public static System.Collections.IEnumerator LoadTextWriterLate(this SaveAndLoad __self, RGD_TextWriterObject rgdTextWriter, float delay) => (System.Collections.IEnumerator)_LoadTextWriterLate3651262468.Value.Invoke(__self, rgdTextWriter, delay);
		public static Block RestoreBlock(this SaveAndLoad __self, BlockCreator blockCreator, RGD_Block rgdBlock) => (Block)_RestoreBlock4054753682.Value.Invoke(__self, blockCreator, rgdBlock);
		public static void LoadRGDUsers(this SaveAndLoad __self) => _LoadRGDUsers757602046.Value.Invoke(__self);
		public static RGD_Game CreateRGDGame(this SaveAndLoad __self) => (RGD_Game)_CreateRGDGame757602046.Value.Invoke(__self);

	}

	public static class Private_SaveAndLoad
	{

		private static readonly System.Lazy<StaticFieldAccessor<uint>> _globalObjectIndex =
				new System.Lazy<StaticFieldAccessor<uint>>(() => StaticFieldAccessor<uint>.Create(typeof(SaveAndLoad), "globalObjectIndex"));
		private static readonly System.Lazy<StaticFieldAccessor<bool>> _initialized =
				new System.Lazy<StaticFieldAccessor<bool>>(() => StaticFieldAccessor<bool>.Create(typeof(SaveAndLoad), "initialized"));
		private static readonly System.Lazy<StaticFieldAccessor<Network_Player>> _localPlayer =
				new System.Lazy<StaticFieldAccessor<Network_Player>>(() => StaticFieldAccessor<Network_Player>.Create(typeof(SaveAndLoad), "localPlayer"));
		private static readonly System.Lazy<StaticFieldAccessor<RGD_Users>> _rgd_users =
				new System.Lazy<StaticFieldAccessor<RGD_Users>>(() => StaticFieldAccessor<RGD_Users>.Create(typeof(SaveAndLoad), "rgd_users"));

		public static uint GetGlobalObjectIndex() => _globalObjectIndex.Value.GetValue();
		public static void SetGlobalObjectIndex(uint value) => _globalObjectIndex.Value.SetValue(value);
		public static bool GetInitialized() => _initialized.Value.GetValue();
		public static void SetInitialized(bool value) => _initialized.Value.SetValue(value);
		public static Network_Player GetLocalPlayer() => _localPlayer.Value.GetValue();
		public static void SetLocalPlayer(Network_Player value) => _localPlayer.Value.SetValue(value);
		public static RGD_Users GetRgd_users() => _rgd_users.Value.GetValue();
		public static void SetRgd_users(RGD_Users value) => _rgd_users.Value.SetValue(value);

	}

	public static class PrivateAccessor_Item_Base
	{

		private static readonly System.Lazy<FieldAccessor<Item_Base, string>> _uniqueName =
				new System.Lazy<FieldAccessor<Item_Base, string>>(() => FieldAccessor<Item_Base, string>.Create("uniqueName"));
		private static readonly System.Lazy<FieldAccessor<Item_Base, int>> _uniqueIndex =
				new System.Lazy<FieldAccessor<Item_Base, int>>(() => FieldAccessor<Item_Base, int>.Create("uniqueIndex"));
		private static readonly System.Lazy<FieldAccessor<Item_Base, bool>> _hasBeenInitialized =
				new System.Lazy<FieldAccessor<Item_Base, bool>>(() => FieldAccessor<Item_Base, bool>.Create("hasBeenInitialized"));
		private static readonly System.Lazy<FieldAccessor<Item_Base, int>> _maxUses =
				new System.Lazy<FieldAccessor<Item_Base, int>>(() => FieldAccessor<Item_Base, int>.Create("maxUses"));
		private static readonly System.Lazy<FieldAccessor<Item_Base, UnityEngine.Gradient>> _barGradient =
				new System.Lazy<FieldAccessor<Item_Base, UnityEngine.Gradient>>(() => FieldAccessor<Item_Base, UnityEngine.Gradient>.Create("barGradient"));

		public static string GetUniqueName(this Item_Base __self) => _uniqueName.Value.GetValue(__self);
		public static void SetUniqueName(this Item_Base __self, string value) => _uniqueName.Value.SetValue(__self, value);
		public static int GetUniqueIndex(this Item_Base __self) => _uniqueIndex.Value.GetValue(__self);
		public static void SetUniqueIndex(this Item_Base __self, int value) => _uniqueIndex.Value.SetValue(__self, value);
		public static bool GetHasBeenInitialized(this Item_Base __self) => _hasBeenInitialized.Value.GetValue(__self);
		public static void SetHasBeenInitialized(this Item_Base __self, bool value) => _hasBeenInitialized.Value.SetValue(__self, value);
		public static int GetMaxUses(this Item_Base __self) => _maxUses.Value.GetValue(__self);
		public static void SetMaxUses(this Item_Base __self, int value) => _maxUses.Value.SetValue(__self, value);
		public static UnityEngine.Gradient GetBarGradient(this Item_Base __self) => _barGradient.Value.GetValue(__self);
		public static void SetBarGradient(this Item_Base __self, UnityEngine.Gradient value) => _barGradient.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Item_Base>> _OnValidate757602046 =
				new System.Lazy<MethodAccessor<Item_Base>>(() => MethodAccessor<Item_Base>.Create("OnValidate"));

		public static void OnValidate(this Item_Base __self) => _OnValidate757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_SO_BlockCollisionMask
	{

		private static readonly System.Lazy<FieldAccessor<SO_BlockCollisionMask, System.Collections.Generic.List<Item_Base>>> _blockTypesToIgnore =
				new System.Lazy<FieldAccessor<SO_BlockCollisionMask, System.Collections.Generic.List<Item_Base>>>(() => FieldAccessor<SO_BlockCollisionMask, System.Collections.Generic.List<Item_Base>>.Create("blockTypesToIgnore"));

		public static System.Collections.Generic.List<Item_Base> GetBlockTypesToIgnore(this SO_BlockCollisionMask __self) => _blockTypesToIgnore.Value.GetValue(__self);
		public static void SetBlockTypesToIgnore(this SO_BlockCollisionMask __self, System.Collections.Generic.List<Item_Base> value) => _blockTypesToIgnore.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<SO_BlockCollisionMask>> _IgnorePlaceableValueChanged757602046 =
				new System.Lazy<MethodAccessor<SO_BlockCollisionMask>>(() => MethodAccessor<SO_BlockCollisionMask>.Create("IgnorePlaceableValueChanged"));

		public static void IgnorePlaceableValueChanged(this SO_BlockCollisionMask __self) => _IgnorePlaceableValueChanged757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_SO_BlockQuadType
	{

		private static readonly System.Lazy<FieldAccessor<SO_BlockQuadType, System.Collections.Generic.List<Item_Base>>> _acceptableBlockTypes =
				new System.Lazy<FieldAccessor<SO_BlockQuadType, System.Collections.Generic.List<Item_Base>>>(() => FieldAccessor<SO_BlockQuadType, System.Collections.Generic.List<Item_Base>>.Create("acceptableBlockTypes"));

		public static System.Collections.Generic.List<Item_Base> GetAcceptableBlockTypes(this SO_BlockQuadType __self) => _acceptableBlockTypes.Value.GetValue(__self);
		public static void SetAcceptableBlockTypes(this SO_BlockQuadType __self, System.Collections.Generic.List<Item_Base> value) => _acceptableBlockTypes.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_SO_Brush
	{

		private static readonly System.Lazy<FieldAccessor<SO_Brush, int>> _currentPrefabIndex =
				new System.Lazy<FieldAccessor<SO_Brush, int>>(() => FieldAccessor<SO_Brush, int>.Create("currentPrefabIndex"));

		public static int GetCurrentPrefabIndex(this SO_Brush __self) => _currentPrefabIndex.Value.GetValue(__self);
		public static void SetCurrentPrefabIndex(this SO_Brush __self, int value) => _currentPrefabIndex.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_SO_Buff
	{

		private static readonly System.Lazy<FieldAccessor<SO_Buff, uint>> _uniqueBuffIndex =
				new System.Lazy<FieldAccessor<SO_Buff, uint>>(() => FieldAccessor<SO_Buff, uint>.Create("uniqueBuffIndex"));
		private static readonly System.Lazy<FieldAccessor<SO_Buff, UnityEngine.Object>> _enemyBuffScriptType =
				new System.Lazy<FieldAccessor<SO_Buff, UnityEngine.Object>>(() => FieldAccessor<SO_Buff, UnityEngine.Object>.Create("enemyBuffScriptType"));
		private static readonly System.Lazy<FieldAccessor<SO_Buff, UnityEngine.Object>> _playerBuffScriptType =
				new System.Lazy<FieldAccessor<SO_Buff, UnityEngine.Object>>(() => FieldAccessor<SO_Buff, UnityEngine.Object>.Create("playerBuffScriptType"));
		private static readonly System.Lazy<FieldAccessor<SO_Buff, BuffType>> _buffType =
				new System.Lazy<FieldAccessor<SO_Buff, BuffType>>(() => FieldAccessor<SO_Buff, BuffType>.Create("buffType"));
		private static readonly System.Lazy<FieldAccessor<SO_Buff, BuffDisplayType>> _buffDisplayType =
				new System.Lazy<FieldAccessor<SO_Buff, BuffDisplayType>>(() => FieldAccessor<SO_Buff, BuffDisplayType>.Create("buffDisplayType"));
		private static readonly System.Lazy<FieldAccessor<SO_Buff, float>> _buffDuration =
				new System.Lazy<FieldAccessor<SO_Buff, float>>(() => FieldAccessor<SO_Buff, float>.Create("buffDuration"));
		private static readonly System.Lazy<FieldAccessor<SO_Buff, bool>> _canStack =
				new System.Lazy<FieldAccessor<SO_Buff, bool>>(() => FieldAccessor<SO_Buff, bool>.Create("canStack"));
		private static readonly System.Lazy<FieldAccessor<SO_Buff, bool>> _resetDurationOnSameBuffType =
				new System.Lazy<FieldAccessor<SO_Buff, bool>>(() => FieldAccessor<SO_Buff, bool>.Create("resetDurationOnSameBuffType"));
		private static readonly System.Lazy<FieldAccessor<SO_Buff, bool>> _modifyMovementSpeed =
				new System.Lazy<FieldAccessor<SO_Buff, bool>>(() => FieldAccessor<SO_Buff, bool>.Create("modifyMovementSpeed"));
		private static readonly System.Lazy<FieldAccessor<SO_Buff, float>> _groundMovementModifier =
				new System.Lazy<FieldAccessor<SO_Buff, float>>(() => FieldAccessor<SO_Buff, float>.Create("groundMovementModifier"));
		private static readonly System.Lazy<FieldAccessor<SO_Buff, float>> _waterMovementModifier =
				new System.Lazy<FieldAccessor<SO_Buff, float>>(() => FieldAccessor<SO_Buff, float>.Create("waterMovementModifier"));
		private static readonly System.Lazy<FieldAccessor<SO_Buff, bool>> _applyInvurnerability =
				new System.Lazy<FieldAccessor<SO_Buff, bool>>(() => FieldAccessor<SO_Buff, bool>.Create("applyInvurnerability"));
		private static readonly System.Lazy<FieldAccessor<SO_Buff, bool>> _applyDeathPrevention =
				new System.Lazy<FieldAccessor<SO_Buff, bool>>(() => FieldAccessor<SO_Buff, bool>.Create("applyDeathPrevention"));
		private static readonly System.Lazy<FieldAccessor<SO_Buff, bool>> _modifyOxygen =
				new System.Lazy<FieldAccessor<SO_Buff, bool>>(() => FieldAccessor<SO_Buff, bool>.Create("modifyOxygen"));
		private static readonly System.Lazy<FieldAccessor<SO_Buff, float>> _oxygenModifier =
				new System.Lazy<FieldAccessor<SO_Buff, float>>(() => FieldAccessor<SO_Buff, float>.Create("oxygenModifier"));

		public static uint GetUniqueBuffIndex(this SO_Buff __self) => _uniqueBuffIndex.Value.GetValue(__self);
		public static void SetUniqueBuffIndex(this SO_Buff __self, uint value) => _uniqueBuffIndex.Value.SetValue(__self, value);
		public static UnityEngine.Object GetEnemyBuffScriptType(this SO_Buff __self) => _enemyBuffScriptType.Value.GetValue(__self);
		public static void SetEnemyBuffScriptType(this SO_Buff __self, UnityEngine.Object value) => _enemyBuffScriptType.Value.SetValue(__self, value);
		public static UnityEngine.Object GetPlayerBuffScriptType(this SO_Buff __self) => _playerBuffScriptType.Value.GetValue(__self);
		public static void SetPlayerBuffScriptType(this SO_Buff __self, UnityEngine.Object value) => _playerBuffScriptType.Value.SetValue(__self, value);
		public static BuffType GetBuffType(this SO_Buff __self) => _buffType.Value.GetValue(__self);
		public static void SetBuffType(this SO_Buff __self, BuffType value) => _buffType.Value.SetValue(__self, value);
		public static BuffDisplayType GetBuffDisplayType(this SO_Buff __self) => _buffDisplayType.Value.GetValue(__self);
		public static void SetBuffDisplayType(this SO_Buff __self, BuffDisplayType value) => _buffDisplayType.Value.SetValue(__self, value);
		public static float GetBuffDuration(this SO_Buff __self) => _buffDuration.Value.GetValue(__self);
		public static void SetBuffDuration(this SO_Buff __self, float value) => _buffDuration.Value.SetValue(__self, value);
		public static bool GetCanStack(this SO_Buff __self) => _canStack.Value.GetValue(__self);
		public static void SetCanStack(this SO_Buff __self, bool value) => _canStack.Value.SetValue(__self, value);
		public static bool GetResetDurationOnSameBuffType(this SO_Buff __self) => _resetDurationOnSameBuffType.Value.GetValue(__self);
		public static void SetResetDurationOnSameBuffType(this SO_Buff __self, bool value) => _resetDurationOnSameBuffType.Value.SetValue(__self, value);
		public static bool GetModifyMovementSpeed(this SO_Buff __self) => _modifyMovementSpeed.Value.GetValue(__self);
		public static void SetModifyMovementSpeed(this SO_Buff __self, bool value) => _modifyMovementSpeed.Value.SetValue(__self, value);
		public static float GetGroundMovementModifier(this SO_Buff __self) => _groundMovementModifier.Value.GetValue(__self);
		public static void SetGroundMovementModifier(this SO_Buff __self, float value) => _groundMovementModifier.Value.SetValue(__self, value);
		public static float GetWaterMovementModifier(this SO_Buff __self) => _waterMovementModifier.Value.GetValue(__self);
		public static void SetWaterMovementModifier(this SO_Buff __self, float value) => _waterMovementModifier.Value.SetValue(__self, value);
		public static bool GetApplyInvurnerability(this SO_Buff __self) => _applyInvurnerability.Value.GetValue(__self);
		public static void SetApplyInvurnerability(this SO_Buff __self, bool value) => _applyInvurnerability.Value.SetValue(__self, value);
		public static bool GetApplyDeathPrevention(this SO_Buff __self) => _applyDeathPrevention.Value.GetValue(__self);
		public static void SetApplyDeathPrevention(this SO_Buff __self, bool value) => _applyDeathPrevention.Value.SetValue(__self, value);
		public static bool GetModifyOxygen(this SO_Buff __self) => _modifyOxygen.Value.GetValue(__self);
		public static void SetModifyOxygen(this SO_Buff __self, bool value) => _modifyOxygen.Value.SetValue(__self, value);
		public static float GetOxygenModifier(this SO_Buff __self) => _oxygenModifier.Value.GetValue(__self);
		public static void SetOxygenModifier(this SO_Buff __self, float value) => _oxygenModifier.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_SO_Buff_DOT
	{

		private static readonly System.Lazy<FieldAccessor<SO_Buff_DOT, int>> _tickDamage =
				new System.Lazy<FieldAccessor<SO_Buff_DOT, int>>(() => FieldAccessor<SO_Buff_DOT, int>.Create("tickDamage"));
		private static readonly System.Lazy<FieldAccessor<SO_Buff_DOT, float>> _tickRate =
				new System.Lazy<FieldAccessor<SO_Buff_DOT, float>>(() => FieldAccessor<SO_Buff_DOT, float>.Create("tickRate"));

		public static int GetTickDamage(this SO_Buff_DOT __self) => _tickDamage.Value.GetValue(__self);
		public static void SetTickDamage(this SO_Buff_DOT __self, int value) => _tickDamage.Value.SetValue(__self, value);
		public static float GetTickRate(this SO_Buff_DOT __self) => _tickRate.Value.GetValue(__self);
		public static void SetTickRate(this SO_Buff_DOT __self, float value) => _tickRate.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_SO_ChunkSpawnRuleAsset
	{

		private static readonly System.Lazy<FieldAccessor<SO_ChunkSpawnRuleAsset, ChunkPointType>> _chunkPointType =
				new System.Lazy<FieldAccessor<SO_ChunkSpawnRuleAsset, ChunkPointType>>(() => FieldAccessor<SO_ChunkSpawnRuleAsset, ChunkPointType>.Create("chunkPointType"));
		private static readonly System.Lazy<FieldAccessor<SO_ChunkSpawnRuleAsset, BiomeZone.BiomeZoneIdentifier>> _biomeZoneID =
				new System.Lazy<FieldAccessor<SO_ChunkSpawnRuleAsset, BiomeZone.BiomeZoneIdentifier>>(() => FieldAccessor<SO_ChunkSpawnRuleAsset, BiomeZone.BiomeZoneIdentifier>.Create("biomeZoneID"));
		private static readonly System.Lazy<FieldAccessor<SO_ChunkSpawnRuleAsset, float>> _biomeZoneRadius =
				new System.Lazy<FieldAccessor<SO_ChunkSpawnRuleAsset, float>>(() => FieldAccessor<SO_ChunkSpawnRuleAsset, float>.Create("biomeZoneRadius"));
		private static readonly System.Lazy<FieldAccessor<SO_ChunkSpawnRuleAsset, Interval_Int>> _spawnsPerChunk =
				new System.Lazy<FieldAccessor<SO_ChunkSpawnRuleAsset, Interval_Int>>(() => FieldAccessor<SO_ChunkSpawnRuleAsset, Interval_Int>.Create("spawnsPerChunk"));
		private static readonly System.Lazy<FieldAccessor<SO_ChunkSpawnRuleAsset, float>> _spawnChance =
				new System.Lazy<FieldAccessor<SO_ChunkSpawnRuleAsset, float>>(() => FieldAccessor<SO_ChunkSpawnRuleAsset, float>.Create("spawnChance"));
		private static readonly System.Lazy<FieldAccessor<SO_ChunkSpawnRuleAsset, float>> _collisionOverlapRadius =
				new System.Lazy<FieldAccessor<SO_ChunkSpawnRuleAsset, float>>(() => FieldAccessor<SO_ChunkSpawnRuleAsset, float>.Create("collisionOverlapRadius"));
		private static readonly System.Lazy<FieldAccessor<SO_ChunkSpawnRuleAsset, float>> _viewDistance =
				new System.Lazy<FieldAccessor<SO_ChunkSpawnRuleAsset, float>>(() => FieldAccessor<SO_ChunkSpawnRuleAsset, float>.Create("viewDistance"));
		private static readonly System.Lazy<FieldAccessor<SO_ChunkSpawnRuleAsset, bool>> _useMinDistance =
				new System.Lazy<FieldAccessor<SO_ChunkSpawnRuleAsset, bool>>(() => FieldAccessor<SO_ChunkSpawnRuleAsset, bool>.Create("useMinDistance"));
		private static readonly System.Lazy<FieldAccessor<SO_ChunkSpawnRuleAsset, System.Collections.Generic.List<ChunkPointType>>> _others =
				new System.Lazy<FieldAccessor<SO_ChunkSpawnRuleAsset, System.Collections.Generic.List<ChunkPointType>>>(() => FieldAccessor<SO_ChunkSpawnRuleAsset, System.Collections.Generic.List<ChunkPointType>>.Create("others"));
		private static readonly System.Lazy<FieldAccessor<SO_ChunkSpawnRuleAsset, float>> _minDistanceToOthers =
				new System.Lazy<FieldAccessor<SO_ChunkSpawnRuleAsset, float>>(() => FieldAccessor<SO_ChunkSpawnRuleAsset, float>.Create("minDistanceToOthers"));
		private static readonly System.Lazy<FieldAccessor<SO_ChunkSpawnRuleAsset, Interval_Float>> _spawnDistanceFromRaft =
				new System.Lazy<FieldAccessor<SO_ChunkSpawnRuleAsset, Interval_Float>>(() => FieldAccessor<SO_ChunkSpawnRuleAsset, Interval_Float>.Create("spawnDistanceFromRaft"));
		private static readonly System.Lazy<FieldAccessor<SO_ChunkSpawnRuleAsset, Interval_Float>> _spawnAngle =
				new System.Lazy<FieldAccessor<SO_ChunkSpawnRuleAsset, Interval_Float>>(() => FieldAccessor<SO_ChunkSpawnRuleAsset, Interval_Float>.Create("spawnAngle"));
		private static readonly System.Lazy<FieldAccessor<SO_ChunkSpawnRuleAsset, UnityEngine.Color>> _chunkPointGizmoColor =
				new System.Lazy<FieldAccessor<SO_ChunkSpawnRuleAsset, UnityEngine.Color>>(() => FieldAccessor<SO_ChunkSpawnRuleAsset, UnityEngine.Color>.Create("chunkPointGizmoColor"));

		public static ChunkPointType GetChunkPointType(this SO_ChunkSpawnRuleAsset __self) => _chunkPointType.Value.GetValue(__self);
		public static void SetChunkPointType(this SO_ChunkSpawnRuleAsset __self, ChunkPointType value) => _chunkPointType.Value.SetValue(__self, value);
		public static BiomeZone.BiomeZoneIdentifier GetBiomeZoneID(this SO_ChunkSpawnRuleAsset __self) => _biomeZoneID.Value.GetValue(__self);
		public static void SetBiomeZoneID(this SO_ChunkSpawnRuleAsset __self, BiomeZone.BiomeZoneIdentifier value) => _biomeZoneID.Value.SetValue(__self, value);
		public static float GetBiomeZoneRadius(this SO_ChunkSpawnRuleAsset __self) => _biomeZoneRadius.Value.GetValue(__self);
		public static void SetBiomeZoneRadius(this SO_ChunkSpawnRuleAsset __self, float value) => _biomeZoneRadius.Value.SetValue(__self, value);
		public static Interval_Int GetSpawnsPerChunk(this SO_ChunkSpawnRuleAsset __self) => _spawnsPerChunk.Value.GetValue(__self);
		public static void SetSpawnsPerChunk(this SO_ChunkSpawnRuleAsset __self, Interval_Int value) => _spawnsPerChunk.Value.SetValue(__self, value);
		public static float GetSpawnChance(this SO_ChunkSpawnRuleAsset __self) => _spawnChance.Value.GetValue(__self);
		public static void SetSpawnChance(this SO_ChunkSpawnRuleAsset __self, float value) => _spawnChance.Value.SetValue(__self, value);
		public static float GetCollisionOverlapRadius(this SO_ChunkSpawnRuleAsset __self) => _collisionOverlapRadius.Value.GetValue(__self);
		public static void SetCollisionOverlapRadius(this SO_ChunkSpawnRuleAsset __self, float value) => _collisionOverlapRadius.Value.SetValue(__self, value);
		public static float GetViewDistance(this SO_ChunkSpawnRuleAsset __self) => _viewDistance.Value.GetValue(__self);
		public static void SetViewDistance(this SO_ChunkSpawnRuleAsset __self, float value) => _viewDistance.Value.SetValue(__self, value);
		public static bool GetUseMinDistance(this SO_ChunkSpawnRuleAsset __self) => _useMinDistance.Value.GetValue(__self);
		public static void SetUseMinDistance(this SO_ChunkSpawnRuleAsset __self, bool value) => _useMinDistance.Value.SetValue(__self, value);
		public static System.Collections.Generic.List<ChunkPointType> GetOthers(this SO_ChunkSpawnRuleAsset __self) => _others.Value.GetValue(__self);
		public static void SetOthers(this SO_ChunkSpawnRuleAsset __self, System.Collections.Generic.List<ChunkPointType> value) => _others.Value.SetValue(__self, value);
		public static float GetMinDistanceToOthers(this SO_ChunkSpawnRuleAsset __self) => _minDistanceToOthers.Value.GetValue(__self);
		public static void SetMinDistanceToOthers(this SO_ChunkSpawnRuleAsset __self, float value) => _minDistanceToOthers.Value.SetValue(__self, value);
		public static Interval_Float GetSpawnDistanceFromRaft(this SO_ChunkSpawnRuleAsset __self) => _spawnDistanceFromRaft.Value.GetValue(__self);
		public static void SetSpawnDistanceFromRaft(this SO_ChunkSpawnRuleAsset __self, Interval_Float value) => _spawnDistanceFromRaft.Value.SetValue(__self, value);
		public static Interval_Float GetSpawnAngle(this SO_ChunkSpawnRuleAsset __self) => _spawnAngle.Value.GetValue(__self);
		public static void SetSpawnAngle(this SO_ChunkSpawnRuleAsset __self, Interval_Float value) => _spawnAngle.Value.SetValue(__self, value);
		public static UnityEngine.Color GetChunkPointGizmoColor(this SO_ChunkSpawnRuleAsset __self) => _chunkPointGizmoColor.Value.GetValue(__self);
		public static void SetChunkPointGizmoColor(this SO_ChunkSpawnRuleAsset __self, UnityEngine.Color value) => _chunkPointGizmoColor.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_SO_ColorValue
	{

		private static readonly System.Lazy<MethodAccessor<SO_ColorValue>> _OnValidate757602046 =
				new System.Lazy<MethodAccessor<SO_ColorValue>>(() => MethodAccessor<SO_ColorValue>.Create("OnValidate"));

		public static void OnValidate(this SO_ColorValue __self) => _OnValidate757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_SO_CookingTable_Recipe
	{

		private static readonly System.Lazy<FieldAccessor<SO_CookingTable_Recipe, CookingRecipeType>> _recipeType =
				new System.Lazy<FieldAccessor<SO_CookingTable_Recipe, CookingRecipeType>>(() => FieldAccessor<SO_CookingTable_Recipe, CookingRecipeType>.Create("recipeType"));
		private static readonly System.Lazy<FieldAccessor<SO_CookingTable_Recipe, uint>> _recipeIndex =
				new System.Lazy<FieldAccessor<SO_CookingTable_Recipe, uint>>(() => FieldAccessor<SO_CookingTable_Recipe, uint>.Create("recipeIndex"));
		private static readonly System.Lazy<FieldAccessor<SO_CookingTable_Recipe, Item_Base>> _result =
				new System.Lazy<FieldAccessor<SO_CookingTable_Recipe, Item_Base>>(() => FieldAccessor<SO_CookingTable_Recipe, Item_Base>.Create("result"));
		private static readonly System.Lazy<FieldAccessor<SO_CookingTable_Recipe, bool>> _isBuff =
				new System.Lazy<FieldAccessor<SO_CookingTable_Recipe, bool>>(() => FieldAccessor<SO_CookingTable_Recipe, bool>.Create("isBuff"));
		private static readonly System.Lazy<FieldAccessor<SO_CookingTable_Recipe, uint>> _portions =
				new System.Lazy<FieldAccessor<SO_CookingTable_Recipe, uint>>(() => FieldAccessor<SO_CookingTable_Recipe, uint>.Create("portions"));
		private static readonly System.Lazy<FieldAccessor<SO_CookingTable_Recipe, float>> _cookTime =
				new System.Lazy<FieldAccessor<SO_CookingTable_Recipe, float>>(() => FieldAccessor<SO_CookingTable_Recipe, float>.Create("cookTime"));
		private static readonly System.Lazy<FieldAccessor<SO_CookingTable_Recipe, CostMultiple[]>> _recipeCost =
				new System.Lazy<FieldAccessor<SO_CookingTable_Recipe, CostMultiple[]>>(() => FieldAccessor<SO_CookingTable_Recipe, CostMultiple[]>.Create("recipeCost"));

		public static CookingRecipeType GetRecipeType(this SO_CookingTable_Recipe __self) => _recipeType.Value.GetValue(__self);
		public static void SetRecipeType(this SO_CookingTable_Recipe __self, CookingRecipeType value) => _recipeType.Value.SetValue(__self, value);
		public static uint GetRecipeIndex(this SO_CookingTable_Recipe __self) => _recipeIndex.Value.GetValue(__self);
		public static void SetRecipeIndex(this SO_CookingTable_Recipe __self, uint value) => _recipeIndex.Value.SetValue(__self, value);
		public static Item_Base GetResult(this SO_CookingTable_Recipe __self) => _result.Value.GetValue(__self);
		public static void SetResult(this SO_CookingTable_Recipe __self, Item_Base value) => _result.Value.SetValue(__self, value);
		public static bool GetIsBuff(this SO_CookingTable_Recipe __self) => _isBuff.Value.GetValue(__self);
		public static void SetIsBuff(this SO_CookingTable_Recipe __self, bool value) => _isBuff.Value.SetValue(__self, value);
		public static uint GetPortions(this SO_CookingTable_Recipe __self) => _portions.Value.GetValue(__self);
		public static void SetPortions(this SO_CookingTable_Recipe __self, uint value) => _portions.Value.SetValue(__self, value);
		public static float GetCookTime(this SO_CookingTable_Recipe __self) => _cookTime.Value.GetValue(__self);
		public static void SetCookTime(this SO_CookingTable_Recipe __self, float value) => _cookTime.Value.SetValue(__self, value);
		public static CostMultiple[] GetRecipeCost(this SO_CookingTable_Recipe __self) => _recipeCost.Value.GetValue(__self);
		public static void SetRecipeCost(this SO_CookingTable_Recipe __self, CostMultiple[] value) => _recipeCost.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<SO_CookingTable_Recipe>> _CheckCost560062070 =
				new System.Lazy<MethodAccessor<SO_CookingTable_Recipe>>(() => MethodAccessor<SO_CookingTable_Recipe>.Create("CheckCost", typeof(CostMultiple), typeof(System.Collections.Generic.List<Item_Base>)));

		public static bool CheckCost(this SO_CookingTable_Recipe __self, CostMultiple cost, System.Collections.Generic.List<Item_Base> itemsToCheck) => (bool)_CheckCost560062070.Value.Invoke(__self, cost, itemsToCheck);

	}

	public static class PrivateAccessor_SO_ObjectSpawner
	{

		private static readonly System.Lazy<FieldAccessor<SO_ObjectSpawner, ObjectSpawnerAssetSettings[]>> _settings =
				new System.Lazy<FieldAccessor<SO_ObjectSpawner, ObjectSpawnerAssetSettings[]>>(() => FieldAccessor<SO_ObjectSpawner, ObjectSpawnerAssetSettings[]>.Create("settings"));

		public static ObjectSpawnerAssetSettings[] GetSettings(this SO_ObjectSpawner __self) => _settings.Value.GetValue(__self);
		public static void SetSettings(this SO_ObjectSpawner __self, ObjectSpawnerAssetSettings[] value) => _settings.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_SO_QuestItem
	{

		private static readonly System.Lazy<FieldAccessor<SO_QuestItem, string>> _displayTerm =
				new System.Lazy<FieldAccessor<SO_QuestItem, string>>(() => FieldAccessor<SO_QuestItem, string>.Create("displayTerm"));

		public static string GetDisplayTerm(this SO_QuestItem __self) => _displayTerm.Value.GetValue(__self);
		public static void SetDisplayTerm(this SO_QuestItem __self, string value) => _displayTerm.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_SO_TileBitmask
	{

		private static readonly System.Lazy<MethodAccessor<SO_TileBitmask>> _OnValidate757602046 =
				new System.Lazy<MethodAccessor<SO_TileBitmask>>(() => MethodAccessor<SO_TileBitmask>.Create("OnValidate"));

		public static void OnValidate(this SO_TileBitmask __self) => _OnValidate757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_SO_TradingPostSorter
	{

		private static readonly System.Lazy<FieldAccessor<SO_TradingPostSorter, System.Collections.Generic.List<SO_TradingPost_Buyable>>> _tier1 =
				new System.Lazy<FieldAccessor<SO_TradingPostSorter, System.Collections.Generic.List<SO_TradingPost_Buyable>>>(() => FieldAccessor<SO_TradingPostSorter, System.Collections.Generic.List<SO_TradingPost_Buyable>>.Create("tier1"));
		private static readonly System.Lazy<FieldAccessor<SO_TradingPostSorter, System.Collections.Generic.List<SO_TradingPost_Buyable>>> _tier2 =
				new System.Lazy<FieldAccessor<SO_TradingPostSorter, System.Collections.Generic.List<SO_TradingPost_Buyable>>>(() => FieldAccessor<SO_TradingPostSorter, System.Collections.Generic.List<SO_TradingPost_Buyable>>.Create("tier2"));
		private static readonly System.Lazy<FieldAccessor<SO_TradingPostSorter, System.Collections.Generic.List<SO_TradingPost_Buyable>>> _tier3 =
				new System.Lazy<FieldAccessor<SO_TradingPostSorter, System.Collections.Generic.List<SO_TradingPost_Buyable>>>(() => FieldAccessor<SO_TradingPostSorter, System.Collections.Generic.List<SO_TradingPost_Buyable>>.Create("tier3"));

		public static System.Collections.Generic.List<SO_TradingPost_Buyable> GetTier1(this SO_TradingPostSorter __self) => _tier1.Value.GetValue(__self);
		public static void SetTier1(this SO_TradingPostSorter __self, System.Collections.Generic.List<SO_TradingPost_Buyable> value) => _tier1.Value.SetValue(__self, value);
		public static System.Collections.Generic.List<SO_TradingPost_Buyable> GetTier2(this SO_TradingPostSorter __self) => _tier2.Value.GetValue(__self);
		public static void SetTier2(this SO_TradingPostSorter __self, System.Collections.Generic.List<SO_TradingPost_Buyable> value) => _tier2.Value.SetValue(__self, value);
		public static System.Collections.Generic.List<SO_TradingPost_Buyable> GetTier3(this SO_TradingPostSorter __self) => _tier3.Value.GetValue(__self);
		public static void SetTier3(this SO_TradingPostSorter __self, System.Collections.Generic.List<SO_TradingPost_Buyable> value) => _tier3.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_SO_Weather
	{

		private static readonly System.Lazy<FieldAccessor<SO_Weather, Interval_Float>> _weatherDuration =
				new System.Lazy<FieldAccessor<SO_Weather, Interval_Float>>(() => FieldAccessor<SO_Weather, Interval_Float>.Create("weatherDuration"));

		public static Interval_Float GetWeatherDuration(this SO_Weather __self) => _weatherDuration.Value.GetValue(__self);
		public static void SetWeatherDuration(this SO_Weather __self, Interval_Float value) => _weatherDuration.Value.SetValue(__self, value);

	}

	public static class Private_ItemManager
	{

		private static readonly System.Lazy<StaticFieldAccessor<System.Collections.Generic.List<Item_Base>>> _allAvailableItems =
				new System.Lazy<StaticFieldAccessor<System.Collections.Generic.List<Item_Base>>>(() => StaticFieldAccessor<System.Collections.Generic.List<Item_Base>>.Create(typeof(ItemManager), "allAvailableItems"));

		public static System.Collections.Generic.List<Item_Base> GetAllAvailableItems() => _allAvailableItems.Value.GetValue();
		public static void SetAllAvailableItems(System.Collections.Generic.List<Item_Base> value) => _allAvailableItems.Value.SetValue(value);

		private static readonly System.Lazy<StaticMethodAccessor> _LoadAllItems757602046 =
				new System.Lazy<StaticMethodAccessor>(() => StaticMethodAccessor.Create(typeof(ItemManager), "LoadAllItems"));

		public static void LoadAllItems() => _LoadAllItems757602046.Value.Invoke();

	}

	public static class PrivateAccessor_ChunkManager
	{

		private static readonly System.Lazy<FieldAccessor<ChunkManager, UnityEngine.Transform>> __raftTransform =
				new System.Lazy<FieldAccessor<ChunkManager, UnityEngine.Transform>>(() => FieldAccessor<ChunkManager, UnityEngine.Transform>.Create("_raftTransform"));
		private static readonly System.Lazy<FieldAccessor<ChunkManager, UnityEngine.Vector2Int>> _numberOfChunks =
				new System.Lazy<FieldAccessor<ChunkManager, UnityEngine.Vector2Int>>(() => FieldAccessor<ChunkManager, UnityEngine.Vector2Int>.Create("numberOfChunks"));
		private static readonly System.Lazy<FieldAccessor<ChunkManager, Interval_Int>> _emptyAtStartXInterval =
				new System.Lazy<FieldAccessor<ChunkManager, Interval_Int>>(() => FieldAccessor<ChunkManager, Interval_Int>.Create("emptyAtStartXInterval"));
		private static readonly System.Lazy<FieldAccessor<ChunkManager, Interval_Int>> _emptyAtStartYInterval =
				new System.Lazy<FieldAccessor<ChunkManager, Interval_Int>>(() => FieldAccessor<ChunkManager, Interval_Int>.Create("emptyAtStartYInterval"));
		private static readonly System.Lazy<FieldAccessor<ChunkManager, SO_ChunkSpawnRuleAsset[]>> _allChunkPointRules =
				new System.Lazy<FieldAccessor<ChunkManager, SO_ChunkSpawnRuleAsset[]>>(() => FieldAccessor<ChunkManager, SO_ChunkSpawnRuleAsset[]>.Create("allChunkPointRules"));
		private static readonly System.Lazy<FieldAccessor<ChunkManager, float>> _chunkCheckUpdateRate =
				new System.Lazy<FieldAccessor<ChunkManager, float>>(() => FieldAccessor<ChunkManager, float>.Create("chunkCheckUpdateRate"));
		private static readonly System.Lazy<FieldAccessor<ChunkManager, float>> _addbigIslandTimer =
				new System.Lazy<FieldAccessor<ChunkManager, float>>(() => FieldAccessor<ChunkManager, float>.Create("addbigIslandTimer"));
		private static readonly System.Lazy<FieldAccessor<ChunkManager, float>> _chunkCheckUpdateProgress =
				new System.Lazy<FieldAccessor<ChunkManager, float>>(() => FieldAccessor<ChunkManager, float>.Create("chunkCheckUpdateProgress"));
		private static readonly System.Lazy<FieldAccessor<ChunkManager, Raft_Network>> _network =
				new System.Lazy<FieldAccessor<ChunkManager, Raft_Network>>(() => FieldAccessor<ChunkManager, Raft_Network>.Create("network"));
		private static readonly System.Lazy<FieldAccessor<ChunkManager, Chunk[,]>> _chunks =
				new System.Lazy<FieldAccessor<ChunkManager, Chunk[,]>>(() => FieldAccessor<ChunkManager, Chunk[,]>.Create("chunks"));
		private static readonly System.Lazy<FieldAccessor<ChunkManager, System.Collections.Generic.Dictionary<ChunkPointType, System.Collections.Generic.List<ChunkPoint>>>> _chunkPoints =
				new System.Lazy<FieldAccessor<ChunkManager, System.Collections.Generic.Dictionary<ChunkPointType, System.Collections.Generic.List<ChunkPoint>>>>(() => FieldAccessor<ChunkManager, System.Collections.Generic.Dictionary<ChunkPointType, System.Collections.Generic.List<ChunkPoint>>>.Create("chunkPoints"));
		private static readonly System.Lazy<FieldAccessor<ChunkManager, bool>> _isDirty =
				new System.Lazy<FieldAccessor<ChunkManager, bool>>(() => FieldAccessor<ChunkManager, bool>.Create("isDirty"));

		public static UnityEngine.Transform Get_raftTransform(this ChunkManager __self) => __raftTransform.Value.GetValue(__self);
		public static void Set_raftTransform(this ChunkManager __self, UnityEngine.Transform value) => __raftTransform.Value.SetValue(__self, value);
		public static UnityEngine.Vector2Int GetNumberOfChunks(this ChunkManager __self) => _numberOfChunks.Value.GetValue(__self);
		public static void SetNumberOfChunks(this ChunkManager __self, UnityEngine.Vector2Int value) => _numberOfChunks.Value.SetValue(__self, value);
		public static Interval_Int GetEmptyAtStartXInterval(this ChunkManager __self) => _emptyAtStartXInterval.Value.GetValue(__self);
		public static void SetEmptyAtStartXInterval(this ChunkManager __self, Interval_Int value) => _emptyAtStartXInterval.Value.SetValue(__self, value);
		public static Interval_Int GetEmptyAtStartYInterval(this ChunkManager __self) => _emptyAtStartYInterval.Value.GetValue(__self);
		public static void SetEmptyAtStartYInterval(this ChunkManager __self, Interval_Int value) => _emptyAtStartYInterval.Value.SetValue(__self, value);
		public static SO_ChunkSpawnRuleAsset[] GetAllChunkPointRules(this ChunkManager __self) => _allChunkPointRules.Value.GetValue(__self);
		public static void SetAllChunkPointRules(this ChunkManager __self, SO_ChunkSpawnRuleAsset[] value) => _allChunkPointRules.Value.SetValue(__self, value);
		public static float GetChunkCheckUpdateRate(this ChunkManager __self) => _chunkCheckUpdateRate.Value.GetValue(__self);
		public static void SetChunkCheckUpdateRate(this ChunkManager __self, float value) => _chunkCheckUpdateRate.Value.SetValue(__self, value);
		public static float GetAddbigIslandTimer(this ChunkManager __self) => _addbigIslandTimer.Value.GetValue(__self);
		public static void SetAddbigIslandTimer(this ChunkManager __self, float value) => _addbigIslandTimer.Value.SetValue(__self, value);
		public static float GetChunkCheckUpdateProgress(this ChunkManager __self) => _chunkCheckUpdateProgress.Value.GetValue(__self);
		public static void SetChunkCheckUpdateProgress(this ChunkManager __self, float value) => _chunkCheckUpdateProgress.Value.SetValue(__self, value);
		public static Raft_Network GetNetwork(this ChunkManager __self) => _network.Value.GetValue(__self);
		public static void SetNetwork(this ChunkManager __self, Raft_Network value) => _network.Value.SetValue(__self, value);
		public static Chunk[,] GetChunks(this ChunkManager __self) => _chunks.Value.GetValue(__self);
		public static void SetChunks(this ChunkManager __self, Chunk[,] value) => _chunks.Value.SetValue(__self, value);
		public static System.Collections.Generic.Dictionary<ChunkPointType, System.Collections.Generic.List<ChunkPoint>> GetChunkPoints(this ChunkManager __self) => _chunkPoints.Value.GetValue(__self);
		public static void SetChunkPoints(this ChunkManager __self, System.Collections.Generic.Dictionary<ChunkPointType, System.Collections.Generic.List<ChunkPoint>> value) => _chunkPoints.Value.SetValue(__self, value);
		public static bool GetIsDirty(this ChunkManager __self) => _isDirty.Value.GetValue(__self);
		public static void SetIsDirty(this ChunkManager __self, bool value) => _isDirty.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<ChunkManager>> _Awake757602046 =
				new System.Lazy<MethodAccessor<ChunkManager>>(() => MethodAccessor<ChunkManager>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<ChunkManager>> _Start757602046 =
				new System.Lazy<MethodAccessor<ChunkManager>>(() => MethodAccessor<ChunkManager>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<ChunkManager>> _Update757602046 =
				new System.Lazy<MethodAccessor<ChunkManager>>(() => MethodAccessor<ChunkManager>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<ChunkManager>> _OnValidate757602046 =
				new System.Lazy<MethodAccessor<ChunkManager>>(() => MethodAccessor<ChunkManager>.Create("OnValidate"));
		private static readonly System.Lazy<MethodAccessor<ChunkManager>> _OnDrawGizmos757602046 =
				new System.Lazy<MethodAccessor<ChunkManager>>(() => MethodAccessor<ChunkManager>.Create("OnDrawGizmos"));
		private static readonly System.Lazy<MethodAccessor<ChunkManager>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<ChunkManager>>(() => MethodAccessor<ChunkManager>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<ChunkManager>> _OnWorldShift3429126434 =
				new System.Lazy<MethodAccessor<ChunkManager>>(() => MethodAccessor<ChunkManager>.Create("OnWorldShift", typeof(UnityEngine.Vector3)));
		private static readonly System.Lazy<MethodAccessor<ChunkManager>> _DelayedShift3640389019 =
				new System.Lazy<MethodAccessor<ChunkManager>>(() => MethodAccessor<ChunkManager>.Create("DelayedShift", typeof(UnityEngine.Vector3), typeof(float)));
		private static readonly System.Lazy<MethodAccessor<ChunkManager>> _SortSpawnersByPriority757602046 =
				new System.Lazy<MethodAccessor<ChunkManager>>(() => MethodAccessor<ChunkManager>.Create("SortSpawnersByPriority"));
		private static readonly System.Lazy<MethodAccessor<ChunkManager>> _InitializeChunks757602046 =
				new System.Lazy<MethodAccessor<ChunkManager>>(() => MethodAccessor<ChunkManager>.Create("InitializeChunks"));
		private static readonly System.Lazy<MethodAccessor<ChunkManager>> _GenerateChunkData1215742486 =
				new System.Lazy<MethodAccessor<ChunkManager>>(() => MethodAccessor<ChunkManager>.Create("GenerateChunkData", typeof(int), typeof(int)));
		private static readonly System.Lazy<MethodAccessor<ChunkManager>> _GenerateChunkData3474054585 =
				new System.Lazy<MethodAccessor<ChunkManager>>(() => MethodAccessor<ChunkManager>.Create("GenerateChunkData", typeof(Chunk)));
		private static readonly System.Lazy<MethodAccessor<ChunkManager>> _GenerateChunkData2782175727 =
				new System.Lazy<MethodAccessor<ChunkManager>>(() => MethodAccessor<ChunkManager>.Create("GenerateChunkData", typeof(Chunk), typeof(ChunkPointType)));
		private static readonly System.Lazy<MethodAccessor<ChunkManager>> _DoesPointFit3485424985 =
				new System.Lazy<MethodAccessor<ChunkManager>>(() => MethodAccessor<ChunkManager>.Create("DoesPointFit", typeof(ChunkPoint)));
		private static readonly System.Lazy<MethodAccessor<ChunkManager>> _ChunkIndexWithinRange1215742486 =
				new System.Lazy<MethodAccessor<ChunkManager>>(() => MethodAccessor<ChunkManager>.Create("ChunkIndexWithinRange", typeof(int), typeof(int)));
		private static readonly System.Lazy<MethodAccessor<ChunkManager>> _GetChunkFromWorldPosition3429126434 =
				new System.Lazy<MethodAccessor<ChunkManager>>(() => MethodAccessor<ChunkManager>.Create("GetChunkFromWorldPosition", typeof(UnityEngine.Vector3)));
		private static readonly System.Lazy<MethodAccessor<ChunkManager>> _SendMessageRefreshPoints757602046 =
				new System.Lazy<MethodAccessor<ChunkManager>>(() => MethodAccessor<ChunkManager>.Create("SendMessageRefreshPoints"));

		public static void Awake(this ChunkManager __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this ChunkManager __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this ChunkManager __self) => _Update757602046.Value.Invoke(__self);
		public static void OnValidate(this ChunkManager __self) => _OnValidate757602046.Value.Invoke(__self);
		public static void OnDrawGizmos(this ChunkManager __self) => _OnDrawGizmos757602046.Value.Invoke(__self);
		public static void OnDestroy(this ChunkManager __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void OnWorldShift(this ChunkManager __self, UnityEngine.Vector3 shift) => _OnWorldShift3429126434.Value.Invoke(__self, shift);
		public static System.Collections.IEnumerator DelayedShift(this ChunkManager __self, UnityEngine.Vector3 shift, float delay) => (System.Collections.IEnumerator)_DelayedShift3640389019.Value.Invoke(__self, shift, delay);
		public static void SortSpawnersByPriority(this ChunkManager __self) => _SortSpawnersByPriority757602046.Value.Invoke(__self);
		public static void InitializeChunks(this ChunkManager __self) => _InitializeChunks757602046.Value.Invoke(__self);
		public static System.Collections.Generic.List<ChunkPoint> GenerateChunkData(this ChunkManager __self, int chunkX, int chunkY) => (System.Collections.Generic.List<ChunkPoint>)_GenerateChunkData1215742486.Value.Invoke(__self, chunkX, chunkY);
		public static System.Collections.Generic.List<ChunkPoint> GenerateChunkData(this ChunkManager __self, Chunk chunk) => (System.Collections.Generic.List<ChunkPoint>)_GenerateChunkData3474054585.Value.Invoke(__self, chunk);
		public static System.Collections.Generic.List<ChunkPoint> GenerateChunkData(this ChunkManager __self, Chunk chunk, ChunkPointType pointType) => (System.Collections.Generic.List<ChunkPoint>)_GenerateChunkData2782175727.Value.Invoke(__self, chunk, pointType);
		public static bool DoesPointFit(this ChunkManager __self, ChunkPoint pointToCheck) => (bool)_DoesPointFit3485424985.Value.Invoke(__self, pointToCheck);
		public static bool ChunkIndexWithinRange(this ChunkManager __self, int xIndex, int yIndex) => (bool)_ChunkIndexWithinRange1215742486.Value.Invoke(__self, xIndex, yIndex);
		public static Chunk GetChunkFromWorldPosition(this ChunkManager __self, UnityEngine.Vector3 worldPosition) => (Chunk)_GetChunkFromWorldPosition3429126434.Value.Invoke(__self, worldPosition);
		public static void SendMessageRefreshPoints(this ChunkManager __self) => _SendMessageRefreshPoints757602046.Value.Invoke(__self);

	}

	public static class Private_ChunkManager
	{

		private static readonly System.Lazy<StaticFieldAccessor<int>> _ViewDistance =
				new System.Lazy<StaticFieldAccessor<int>>(() => StaticFieldAccessor<int>.Create(typeof(ChunkManager), "ViewDistance"));

		public static int GetViewDistance() => _ViewDistance.Value.GetValue();
		public static void SetViewDistance(int value) => _ViewDistance.Value.SetValue(value);

	}

	public static class PrivateAccessor_ChunkPoint
	{

		private static readonly System.Lazy<FieldAccessor<ChunkPoint, bool>> _hasStartedSpawning =
				new System.Lazy<FieldAccessor<ChunkPoint, bool>>(() => FieldAccessor<ChunkPoint, bool>.Create("hasStartedSpawning"));

		public static bool GetHasStartedSpawning(this ChunkPoint __self) => _hasStartedSpawning.Value.GetValue(__self);
		public static void SetHasStartedSpawning(this ChunkPoint __self, bool value) => _hasStartedSpawning.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_SpawnableFloatingObject
	{

		private static readonly System.Lazy<MethodAccessor<SpawnableFloatingObject>> _IsPrefab757602046 =
				new System.Lazy<MethodAccessor<SpawnableFloatingObject>>(() => MethodAccessor<SpawnableFloatingObject>.Create("IsPrefab"));
		private static readonly System.Lazy<MethodAccessor<SpawnableFloatingObject>> _IsPool757602046 =
				new System.Lazy<MethodAccessor<SpawnableFloatingObject>>(() => MethodAccessor<SpawnableFloatingObject>.Create("IsPool"));
		private static readonly System.Lazy<MethodAccessor<SpawnableFloatingObject>> _UseAssetBundleKey757602046 =
				new System.Lazy<MethodAccessor<SpawnableFloatingObject>>(() => MethodAccessor<SpawnableFloatingObject>.Create("UseAssetBundleKey"));

		public static bool IsPrefab(this SpawnableFloatingObject __self) => (bool)_IsPrefab757602046.Value.Invoke(__self);
		public static bool IsPool(this SpawnableFloatingObject __self) => (bool)_IsPool757602046.Value.Invoke(__self);
		public static bool UseAssetBundleKey(this SpawnableFloatingObject __self) => (bool)_UseAssetBundleKey757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_ObjectSpawner
	{

		private static readonly System.Lazy<FieldAccessor<ObjectSpawner, ObjectSpawnerManager>> _objectSpawnerManager =
				new System.Lazy<FieldAccessor<ObjectSpawner, ObjectSpawnerManager>>(() => FieldAccessor<ObjectSpawner, ObjectSpawnerManager>.Create("objectSpawnerManager"));
		private static readonly System.Lazy<FieldAccessor<ObjectSpawner, Raft_Network>> _network =
				new System.Lazy<FieldAccessor<ObjectSpawner, Raft_Network>>(() => FieldAccessor<ObjectSpawner, Raft_Network>.Create("network"));
		private static readonly System.Lazy<FieldAccessor<ObjectSpawner, AssetBundleHooker>> _assetBundleHooker =
				new System.Lazy<FieldAccessor<ObjectSpawner, AssetBundleHooker>>(() => FieldAccessor<ObjectSpawner, AssetBundleHooker>.Create("assetBundleHooker"));
		private static readonly System.Lazy<FieldAccessor<ObjectSpawner, SceneLoader>> _sceneLoader =
				new System.Lazy<FieldAccessor<ObjectSpawner, SceneLoader>>(() => FieldAccessor<ObjectSpawner, SceneLoader>.Create("sceneLoader"));
		private static readonly System.Lazy<FieldAccessor<ObjectSpawner, PoolManager>> _poolManager =
				new System.Lazy<FieldAccessor<ObjectSpawner, PoolManager>>(() => FieldAccessor<ObjectSpawner, PoolManager>.Create("poolManager"));

		public static ObjectSpawnerManager GetObjectSpawnerManager(this ObjectSpawner __self) => _objectSpawnerManager.Value.GetValue(__self);
		public static void SetObjectSpawnerManager(this ObjectSpawner __self, ObjectSpawnerManager value) => _objectSpawnerManager.Value.SetValue(__self, value);
		public static Raft_Network GetNetwork(this ObjectSpawner __self) => _network.Value.GetValue(__self);
		public static void SetNetwork(this ObjectSpawner __self, Raft_Network value) => _network.Value.SetValue(__self, value);
		public static AssetBundleHooker GetAssetBundleHooker(this ObjectSpawner __self) => _assetBundleHooker.Value.GetValue(__self);
		public static void SetAssetBundleHooker(this ObjectSpawner __self, AssetBundleHooker value) => _assetBundleHooker.Value.SetValue(__self, value);
		public static SceneLoader GetSceneLoader(this ObjectSpawner __self) => _sceneLoader.Value.GetValue(__self);
		public static void SetSceneLoader(this ObjectSpawner __self, SceneLoader value) => _sceneLoader.Value.SetValue(__self, value);
		public static PoolManager GetPoolManager(this ObjectSpawner __self) => _poolManager.Value.GetValue(__self);
		public static void SetPoolManager(this ObjectSpawner __self, PoolManager value) => _poolManager.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<ObjectSpawner>> _Start757602046 =
				new System.Lazy<MethodAccessor<ObjectSpawner>>(() => MethodAccessor<ObjectSpawner>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<ObjectSpawner>> _Update757602046 =
				new System.Lazy<MethodAccessor<ObjectSpawner>>(() => MethodAccessor<ObjectSpawner>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<ObjectSpawner>> _OnValidate757602046 =
				new System.Lazy<MethodAccessor<ObjectSpawner>>(() => MethodAccessor<ObjectSpawner>.Create("OnValidate"));

		public static void Start(this ObjectSpawner __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this ObjectSpawner __self) => _Update757602046.Value.Invoke(__self);
		public static void OnValidate(this ObjectSpawner __self) => _OnValidate757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Message_ObjectSpawner_SpawnItem
	{

		private static readonly System.Lazy<FieldAccessor<Message_ObjectSpawner_SpawnItem, float>> _xRot =
				new System.Lazy<FieldAccessor<Message_ObjectSpawner_SpawnItem, float>>(() => FieldAccessor<Message_ObjectSpawner_SpawnItem, float>.Create("xRot"));
		private static readonly System.Lazy<FieldAccessor<Message_ObjectSpawner_SpawnItem, float>> _yRot =
				new System.Lazy<FieldAccessor<Message_ObjectSpawner_SpawnItem, float>>(() => FieldAccessor<Message_ObjectSpawner_SpawnItem, float>.Create("yRot"));
		private static readonly System.Lazy<FieldAccessor<Message_ObjectSpawner_SpawnItem, float>> _zRot =
				new System.Lazy<FieldAccessor<Message_ObjectSpawner_SpawnItem, float>>(() => FieldAccessor<Message_ObjectSpawner_SpawnItem, float>.Create("zRot"));
		private static readonly System.Lazy<FieldAccessor<Message_ObjectSpawner_SpawnItem, float>> _xPos =
				new System.Lazy<FieldAccessor<Message_ObjectSpawner_SpawnItem, float>>(() => FieldAccessor<Message_ObjectSpawner_SpawnItem, float>.Create("xPos"));
		private static readonly System.Lazy<FieldAccessor<Message_ObjectSpawner_SpawnItem, float>> _yPos =
				new System.Lazy<FieldAccessor<Message_ObjectSpawner_SpawnItem, float>>(() => FieldAccessor<Message_ObjectSpawner_SpawnItem, float>.Create("yPos"));
		private static readonly System.Lazy<FieldAccessor<Message_ObjectSpawner_SpawnItem, float>> _zPos =
				new System.Lazy<FieldAccessor<Message_ObjectSpawner_SpawnItem, float>>(() => FieldAccessor<Message_ObjectSpawner_SpawnItem, float>.Create("zPos"));

		public static float GetXRot(this Message_ObjectSpawner_SpawnItem __self) => _xRot.Value.GetValue(__self);
		public static void SetXRot(this Message_ObjectSpawner_SpawnItem __self, float value) => _xRot.Value.SetValue(__self, value);
		public static float GetYRot(this Message_ObjectSpawner_SpawnItem __self) => _yRot.Value.GetValue(__self);
		public static void SetYRot(this Message_ObjectSpawner_SpawnItem __self, float value) => _yRot.Value.SetValue(__self, value);
		public static float GetZRot(this Message_ObjectSpawner_SpawnItem __self) => _zRot.Value.GetValue(__self);
		public static void SetZRot(this Message_ObjectSpawner_SpawnItem __self, float value) => _zRot.Value.SetValue(__self, value);
		public static float GetXPos(this Message_ObjectSpawner_SpawnItem __self) => _xPos.Value.GetValue(__self);
		public static void SetXPos(this Message_ObjectSpawner_SpawnItem __self, float value) => _xPos.Value.SetValue(__self, value);
		public static float GetYPos(this Message_ObjectSpawner_SpawnItem __self) => _yPos.Value.GetValue(__self);
		public static void SetYPos(this Message_ObjectSpawner_SpawnItem __self, float value) => _yPos.Value.SetValue(__self, value);
		public static float GetZPos(this Message_ObjectSpawner_SpawnItem __self) => _zPos.Value.GetValue(__self);
		public static void SetZPos(this Message_ObjectSpawner_SpawnItem __self, float value) => _zPos.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_ObjectSpawnerManager
	{

		private static readonly System.Lazy<FieldAccessor<ObjectSpawnerManager, Raft_Network>> _network =
				new System.Lazy<FieldAccessor<ObjectSpawnerManager, Raft_Network>>(() => FieldAccessor<ObjectSpawnerManager, Raft_Network>.Create("network"));
		private static readonly System.Lazy<FieldAccessor<ObjectSpawnerManager, Raft>> _raft =
				new System.Lazy<FieldAccessor<ObjectSpawnerManager, Raft>>(() => FieldAccessor<ObjectSpawnerManager, Raft>.Create("raft"));

		public static Raft_Network GetNetwork(this ObjectSpawnerManager __self) => _network.Value.GetValue(__self);
		public static void SetNetwork(this ObjectSpawnerManager __self, Raft_Network value) => _network.Value.SetValue(__self, value);
		public static Raft GetRaft(this ObjectSpawnerManager __self) => _raft.Value.GetValue(__self);
		public static void SetRaft(this ObjectSpawnerManager __self, Raft value) => _raft.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<ObjectSpawnerManager>> _Awake757602046 =
				new System.Lazy<MethodAccessor<ObjectSpawnerManager>>(() => MethodAccessor<ObjectSpawnerManager>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<ObjectSpawnerManager>> _Start757602046 =
				new System.Lazy<MethodAccessor<ObjectSpawnerManager>>(() => MethodAccessor<ObjectSpawnerManager>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<ObjectSpawnerManager>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<ObjectSpawnerManager>>(() => MethodAccessor<ObjectSpawnerManager>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<ObjectSpawnerManager>> _Update757602046 =
				new System.Lazy<MethodAccessor<ObjectSpawnerManager>>(() => MethodAccessor<ObjectSpawnerManager>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<ObjectSpawnerManager>> _OnWorldShift3429126434 =
				new System.Lazy<MethodAccessor<ObjectSpawnerManager>>(() => MethodAccessor<ObjectSpawnerManager>.Create("OnWorldShift", typeof(UnityEngine.Vector3)));

		public static void Awake(this ObjectSpawnerManager __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this ObjectSpawnerManager __self) => _Start757602046.Value.Invoke(__self);
		public static void OnDestroy(this ObjectSpawnerManager __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void Update(this ObjectSpawnerManager __self) => _Update757602046.Value.Invoke(__self);
		public static void OnWorldShift(this ObjectSpawnerManager __self, UnityEngine.Vector3 shift) => _OnWorldShift3429126434.Value.Invoke(__self, shift);

	}

	public static class PrivateAccessor_ObjectSpawnerNoSpawnZone
	{

		private static readonly System.Lazy<MethodAccessor<ObjectSpawnerNoSpawnZone>> _OnEnable757602046 =
				new System.Lazy<MethodAccessor<ObjectSpawnerNoSpawnZone>>(() => MethodAccessor<ObjectSpawnerNoSpawnZone>.Create("OnEnable"));
		private static readonly System.Lazy<MethodAccessor<ObjectSpawnerNoSpawnZone>> _OnDisable757602046 =
				new System.Lazy<MethodAccessor<ObjectSpawnerNoSpawnZone>>(() => MethodAccessor<ObjectSpawnerNoSpawnZone>.Create("OnDisable"));
		private static readonly System.Lazy<MethodAccessor<ObjectSpawnerNoSpawnZone>> _OnDrawGizmosSelected757602046 =
				new System.Lazy<MethodAccessor<ObjectSpawnerNoSpawnZone>>(() => MethodAccessor<ObjectSpawnerNoSpawnZone>.Create("OnDrawGizmosSelected"));

		public static void OnEnable(this ObjectSpawnerNoSpawnZone __self) => _OnEnable757602046.Value.Invoke(__self);
		public static void OnDisable(this ObjectSpawnerNoSpawnZone __self) => _OnDisable757602046.Value.Invoke(__self);
		public static void OnDrawGizmosSelected(this ObjectSpawnerNoSpawnZone __self) => _OnDrawGizmosSelected757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_ObjectSpawner_Chunk
	{

		private static readonly System.Lazy<FieldAccessor<ObjectSpawner_Chunk, ChunkPointType>> _chunkPointType =
				new System.Lazy<FieldAccessor<ObjectSpawner_Chunk, ChunkPointType>>(() => FieldAccessor<ObjectSpawner_Chunk, ChunkPointType>.Create("chunkPointType"));
		private static readonly System.Lazy<FieldAccessor<ObjectSpawner_Chunk, BiomeZone.BiomeZoneIdentifier>> _biomeZoneID =
				new System.Lazy<FieldAccessor<ObjectSpawner_Chunk, BiomeZone.BiomeZoneIdentifier>>(() => FieldAccessor<ObjectSpawner_Chunk, BiomeZone.BiomeZoneIdentifier>.Create("biomeZoneID"));
		private static readonly System.Lazy<FieldAccessor<ObjectSpawner_Chunk, int>> _priority =
				new System.Lazy<FieldAccessor<ObjectSpawner_Chunk, int>>(() => FieldAccessor<ObjectSpawner_Chunk, int>.Create("priority"));

		public static ChunkPointType GetChunkPointType(this ObjectSpawner_Chunk __self) => _chunkPointType.Value.GetValue(__self);
		public static void SetChunkPointType(this ObjectSpawner_Chunk __self, ChunkPointType value) => _chunkPointType.Value.SetValue(__self, value);
		public static BiomeZone.BiomeZoneIdentifier GetBiomeZoneID(this ObjectSpawner_Chunk __self) => _biomeZoneID.Value.GetValue(__self);
		public static void SetBiomeZoneID(this ObjectSpawner_Chunk __self, BiomeZone.BiomeZoneIdentifier value) => _biomeZoneID.Value.SetValue(__self, value);
		public static int GetPriority(this ObjectSpawner_Chunk __self) => _priority.Value.GetValue(__self);
		public static void SetPriority(this ObjectSpawner_Chunk __self, int value) => _priority.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_ObjectSpawner_Landmark
	{

		private static readonly System.Lazy<MethodAccessor<ObjectSpawner_Landmark>> _Start757602046 =
				new System.Lazy<MethodAccessor<ObjectSpawner_Landmark>>(() => MethodAccessor<ObjectSpawner_Landmark>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<ObjectSpawner_Landmark>> _OnRemoveSpawned3487180896 =
				new System.Lazy<MethodAccessor<ObjectSpawner_Landmark>>(() => MethodAccessor<ObjectSpawner_Landmark>.Create("OnRemoveSpawned", typeof(UnityEngine.GameObject)));

		public static void Start(this ObjectSpawner_Landmark __self) => _Start757602046.Value.Invoke(__self);
		public static void OnRemoveSpawned(this ObjectSpawner_Landmark __self, UnityEngine.GameObject removedObj) => _OnRemoveSpawned3487180896.Value.Invoke(__self, removedObj);

	}

	public static class PrivateAccessor_ObjectSpawner_RaftDirection
	{

		private static readonly System.Lazy<FieldAccessor<ObjectSpawner_RaftDirection, ObjectSpawnerAssetSettings>> _currentSettings =
				new System.Lazy<FieldAccessor<ObjectSpawner_RaftDirection, ObjectSpawnerAssetSettings>>(() => FieldAccessor<ObjectSpawner_RaftDirection, ObjectSpawnerAssetSettings>.Create("currentSettings"));
		private static readonly System.Lazy<FieldAccessor<ObjectSpawner_RaftDirection, UnityEngine.Vector3>> _spawnDirectionFromRaft =
				new System.Lazy<FieldAccessor<ObjectSpawner_RaftDirection, UnityEngine.Vector3>>(() => FieldAccessor<ObjectSpawner_RaftDirection, UnityEngine.Vector3>.Create("spawnDirectionFromRaft"));
		private static readonly System.Lazy<FieldAccessor<ObjectSpawner_RaftDirection, float>> _spawnTimer =
				new System.Lazy<FieldAccessor<ObjectSpawner_RaftDirection, float>>(() => FieldAccessor<ObjectSpawner_RaftDirection, float>.Create("spawnTimer"));
		private static readonly System.Lazy<FieldAccessor<ObjectSpawner_RaftDirection, float>> _spawnDelay =
				new System.Lazy<FieldAccessor<ObjectSpawner_RaftDirection, float>>(() => FieldAccessor<ObjectSpawner_RaftDirection, float>.Create("spawnDelay"));

		public static ObjectSpawnerAssetSettings GetCurrentSettings(this ObjectSpawner_RaftDirection __self) => _currentSettings.Value.GetValue(__self);
		public static void SetCurrentSettings(this ObjectSpawner_RaftDirection __self, ObjectSpawnerAssetSettings value) => _currentSettings.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetSpawnDirectionFromRaft(this ObjectSpawner_RaftDirection __self) => _spawnDirectionFromRaft.Value.GetValue(__self);
		public static void SetSpawnDirectionFromRaft(this ObjectSpawner_RaftDirection __self, UnityEngine.Vector3 value) => _spawnDirectionFromRaft.Value.SetValue(__self, value);
		public static float GetSpawnTimer(this ObjectSpawner_RaftDirection __self) => _spawnTimer.Value.GetValue(__self);
		public static void SetSpawnTimer(this ObjectSpawner_RaftDirection __self, float value) => _spawnTimer.Value.SetValue(__self, value);
		public static float GetSpawnDelay(this ObjectSpawner_RaftDirection __self) => _spawnDelay.Value.GetValue(__self);
		public static void SetSpawnDelay(this ObjectSpawner_RaftDirection __self, float value) => _spawnDelay.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<ObjectSpawner_RaftDirection>> _Start757602046 =
				new System.Lazy<MethodAccessor<ObjectSpawner_RaftDirection>>(() => MethodAccessor<ObjectSpawner_RaftDirection>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<ObjectSpawner_RaftDirection>> _Update757602046 =
				new System.Lazy<MethodAccessor<ObjectSpawner_RaftDirection>>(() => MethodAccessor<ObjectSpawner_RaftDirection>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<ObjectSpawner_RaftDirection>> _OnDrawGizmosSelected757602046 =
				new System.Lazy<MethodAccessor<ObjectSpawner_RaftDirection>>(() => MethodAccessor<ObjectSpawner_RaftDirection>.Create("OnDrawGizmosSelected"));
		private static readonly System.Lazy<MethodAccessor<ObjectSpawner_RaftDirection>> _IsSpawnPositionValid3429126434 =
				new System.Lazy<MethodAccessor<ObjectSpawner_RaftDirection>>(() => MethodAccessor<ObjectSpawner_RaftDirection>.Create("IsSpawnPositionValid", typeof(UnityEngine.Vector3)));
		private static readonly System.Lazy<MethodAccessor<ObjectSpawner_RaftDirection>> _RemoveItemsOutsideRange757602046 =
				new System.Lazy<MethodAccessor<ObjectSpawner_RaftDirection>>(() => MethodAccessor<ObjectSpawner_RaftDirection>.Create("RemoveItemsOutsideRange"));
		private static readonly System.Lazy<MethodAccessor<ObjectSpawner_RaftDirection>> _GetRandomSpawnPosition757602046 =
				new System.Lazy<MethodAccessor<ObjectSpawner_RaftDirection>>(() => MethodAccessor<ObjectSpawner_RaftDirection>.Create("GetRandomSpawnPosition"));

		public static void Start(this ObjectSpawner_RaftDirection __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this ObjectSpawner_RaftDirection __self) => _Update757602046.Value.Invoke(__self);
		public static void OnDrawGizmosSelected(this ObjectSpawner_RaftDirection __self) => _OnDrawGizmosSelected757602046.Value.Invoke(__self);
		public static bool IsSpawnPositionValid(this ObjectSpawner_RaftDirection __self, UnityEngine.Vector3 position) => (bool)_IsSpawnPositionValid3429126434.Value.Invoke(__self, position);
		public static void RemoveItemsOutsideRange(this ObjectSpawner_RaftDirection __self) => _RemoveItemsOutsideRange757602046.Value.Invoke(__self);
		public static SpawnPosition GetRandomSpawnPosition(this ObjectSpawner_RaftDirection __self) => (SpawnPosition)_GetRandomSpawnPosition757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_StateMachineBehaviour_PlaySoundOnExit
	{

		private static readonly System.Lazy<FieldAccessor<StateMachineBehaviour_PlaySoundOnExit, string>> _eventRef_sound =
				new System.Lazy<FieldAccessor<StateMachineBehaviour_PlaySoundOnExit, string>>(() => FieldAccessor<StateMachineBehaviour_PlaySoundOnExit, string>.Create("eventRef_sound"));

		public static string GetEventRef_sound(this StateMachineBehaviour_PlaySoundOnExit __self) => _eventRef_sound.Value.GetValue(__self);
		public static void SetEventRef_sound(this StateMachineBehaviour_PlaySoundOnExit __self, string value) => _eventRef_sound.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_GroundRaycaster
	{

		private static readonly System.Lazy<MethodAccessor<GroundRaycaster>> _Awake757602046 =
				new System.Lazy<MethodAccessor<GroundRaycaster>>(() => MethodAccessor<GroundRaycaster>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<GroundRaycaster>> _RayHitGround3464942049 =
				new System.Lazy<MethodAccessor<GroundRaycaster>>(() => MethodAccessor<GroundRaycaster>.Create("RayHitGround", typeof(UnityEngine.RaycastHit)));

		public static void Awake(this GroundRaycaster __self) => _Awake757602046.Value.Invoke(__self);
		public static void RayHitGround(this GroundRaycaster __self, UnityEngine.RaycastHit hit) => _RayHitGround3464942049.Value.Invoke(__self, hit);

	}

	public static class PrivateAccessor_TerrainDetector
	{

		private static readonly System.Lazy<FieldAccessor<TerrainDetector, SO_TerrainType>> __currentTerrainType =
				new System.Lazy<FieldAccessor<TerrainDetector, SO_TerrainType>>(() => FieldAccessor<TerrainDetector, SO_TerrainType>.Create("_currentTerrainType"));
		private static readonly System.Lazy<FieldAccessor<TerrainDetector, UnityEngine.TerrainData>> _terrainData =
				new System.Lazy<FieldAccessor<TerrainDetector, UnityEngine.TerrainData>>(() => FieldAccessor<TerrainDetector, UnityEngine.TerrainData>.Create("terrainData"));
		private static readonly System.Lazy<FieldAccessor<TerrainDetector, int>> _alphamapWidth =
				new System.Lazy<FieldAccessor<TerrainDetector, int>>(() => FieldAccessor<TerrainDetector, int>.Create("alphamapWidth"));
		private static readonly System.Lazy<FieldAccessor<TerrainDetector, int>> _alphamapHeight =
				new System.Lazy<FieldAccessor<TerrainDetector, int>>(() => FieldAccessor<TerrainDetector, int>.Create("alphamapHeight"));
		private static readonly System.Lazy<FieldAccessor<TerrainDetector, System.Single[,,]>> _splatmapData =
				new System.Lazy<FieldAccessor<TerrainDetector, System.Single[,,]>>(() => FieldAccessor<TerrainDetector, System.Single[,,]>.Create("splatmapData"));
		private static readonly System.Lazy<FieldAccessor<TerrainDetector, int>> _numTextures =
				new System.Lazy<FieldAccessor<TerrainDetector, int>>(() => FieldAccessor<TerrainDetector, int>.Create("numTextures"));

		public static SO_TerrainType Get_currentTerrainType(this TerrainDetector __self) => __currentTerrainType.Value.GetValue(__self);
		public static void Set_currentTerrainType(this TerrainDetector __self, SO_TerrainType value) => __currentTerrainType.Value.SetValue(__self, value);
		public static UnityEngine.TerrainData GetTerrainData(this TerrainDetector __self) => _terrainData.Value.GetValue(__self);
		public static void SetTerrainData(this TerrainDetector __self, UnityEngine.TerrainData value) => _terrainData.Value.SetValue(__self, value);
		public static int GetAlphamapWidth(this TerrainDetector __self) => _alphamapWidth.Value.GetValue(__self);
		public static void SetAlphamapWidth(this TerrainDetector __self, int value) => _alphamapWidth.Value.SetValue(__self, value);
		public static int GetAlphamapHeight(this TerrainDetector __self) => _alphamapHeight.Value.GetValue(__self);
		public static void SetAlphamapHeight(this TerrainDetector __self, int value) => _alphamapHeight.Value.SetValue(__self, value);
		public static System.Single[,,] GetSplatmapData(this TerrainDetector __self) => _splatmapData.Value.GetValue(__self);
		public static void SetSplatmapData(this TerrainDetector __self, System.Single[,,] value) => _splatmapData.Value.SetValue(__self, value);
		public static int GetNumTextures(this TerrainDetector __self) => _numTextures.Value.GetValue(__self);
		public static void SetNumTextures(this TerrainDetector __self, int value) => _numTextures.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<TerrainDetector>> _SetNewTerrain3453997727 =
				new System.Lazy<MethodAccessor<TerrainDetector>>(() => MethodAccessor<TerrainDetector>.Create("SetNewTerrain", typeof(UnityEngine.Terrain)));
		private static readonly System.Lazy<MethodAccessor<TerrainDetector>> _ConvertToSplatMapCoordinate3429126434 =
				new System.Lazy<MethodAccessor<TerrainDetector>>(() => MethodAccessor<TerrainDetector>.Create("ConvertToSplatMapCoordinate", typeof(UnityEngine.Vector3)));

		public static bool SetNewTerrain(this TerrainDetector __self, UnityEngine.Terrain terrain) => (bool)_SetNewTerrain3453997727.Value.Invoke(__self, terrain);
		public static UnityEngine.Vector3 ConvertToSplatMapCoordinate(this TerrainDetector __self, UnityEngine.Vector3 worldPosition) => (UnityEngine.Vector3)_ConvertToSplatMapCoordinate3429126434.Value.Invoke(__self, worldPosition);

	}

	public static class PrivateAccessor_TerrainNGroundManager
	{

		private static readonly System.Lazy<FieldAccessor<TerrainNGroundManager, System.Collections.Generic.List<SO_TerrainType>>> _terrainTypes =
				new System.Lazy<FieldAccessor<TerrainNGroundManager, System.Collections.Generic.List<SO_TerrainType>>>(() => FieldAccessor<TerrainNGroundManager, System.Collections.Generic.List<SO_TerrainType>>.Create("terrainTypes"));

		public static System.Collections.Generic.List<SO_TerrainType> GetTerrainTypes(this TerrainNGroundManager __self) => _terrainTypes.Value.GetValue(__self);
		public static void SetTerrainTypes(this TerrainNGroundManager __self, System.Collections.Generic.List<SO_TerrainType> value) => _terrainTypes.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<TerrainNGroundManager>> _Awake757602046 =
				new System.Lazy<MethodAccessor<TerrainNGroundManager>>(() => MethodAccessor<TerrainNGroundManager>.Create("Awake"));

		public static void Awake(this TerrainNGroundManager __self) => _Awake757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Terrain_GroundRaycaster
	{

		private static readonly System.Lazy<MethodAccessor<Terrain_GroundRaycaster>> _RayHitGround3464942049 =
				new System.Lazy<MethodAccessor<Terrain_GroundRaycaster>>(() => MethodAccessor<Terrain_GroundRaycaster>.Create("RayHitGround", typeof(UnityEngine.RaycastHit)));

		public static void RayHitGround(this Terrain_GroundRaycaster __self, UnityEngine.RaycastHit hit) => _RayHitGround3464942049.Value.Invoke(__self, hit);

	}

	public static class PrivateAccessor_BitmaskTile
	{

		private static readonly System.Lazy<FieldAccessor<BitmaskTile, TileBitmaskType>> _bitmaskType =
				new System.Lazy<FieldAccessor<BitmaskTile, TileBitmaskType>>(() => FieldAccessor<BitmaskTile, TileBitmaskType>.Create("bitmaskType"));
		private static readonly System.Lazy<FieldAccessor<BitmaskTile, bool>> _useRaycastNeighbourCheck =
				new System.Lazy<FieldAccessor<BitmaskTile, bool>>(() => FieldAccessor<BitmaskTile, bool>.Create("useRaycastNeighbourCheck"));
		private static readonly System.Lazy<FieldAccessor<BitmaskTile, string>> _acceptableCollisionTag =
				new System.Lazy<FieldAccessor<BitmaskTile, string>>(() => FieldAccessor<BitmaskTile, string>.Create("acceptableCollisionTag"));

		public static TileBitmaskType GetBitmaskType(this BitmaskTile __self) => _bitmaskType.Value.GetValue(__self);
		public static void SetBitmaskType(this BitmaskTile __self, TileBitmaskType value) => _bitmaskType.Value.SetValue(__self, value);
		public static bool GetUseRaycastNeighbourCheck(this BitmaskTile __self) => _useRaycastNeighbourCheck.Value.GetValue(__self);
		public static void SetUseRaycastNeighbourCheck(this BitmaskTile __self, bool value) => _useRaycastNeighbourCheck.Value.SetValue(__self, value);
		public static string GetAcceptableCollisionTag(this BitmaskTile __self) => _acceptableCollisionTag.Value.GetValue(__self);
		public static void SetAcceptableCollisionTag(this BitmaskTile __self, string value) => _acceptableCollisionTag.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<BitmaskTile>> _RefreshNeighbours3446946469 =
				new System.Lazy<MethodAccessor<BitmaskTile>>(() => MethodAccessor<BitmaskTile>.Create("RefreshNeighbours", typeof(BitmaskTile[])));
		private static readonly System.Lazy<MethodAccessor<BitmaskTile>> _CanConnectToBitmaskTile3458695754 =
				new System.Lazy<MethodAccessor<BitmaskTile>>(() => MethodAccessor<BitmaskTile>.Create("CanConnectToBitmaskTile", typeof(BitmaskTile)));
		private static readonly System.Lazy<MethodAccessor<BitmaskTile>> _GetBitmaskValueFromNeighbours3446946469 =
				new System.Lazy<MethodAccessor<BitmaskTile>>(() => MethodAccessor<BitmaskTile>.Create("GetBitmaskValueFromNeighbours", typeof(BitmaskTile[])));
		private static readonly System.Lazy<MethodAccessor<BitmaskTile>> _AssignMeshesFromConnection3442492090 =
				new System.Lazy<MethodAccessor<BitmaskTile>>(() => MethodAccessor<BitmaskTile>.Create("AssignMeshesFromConnection", typeof(TileBitmaskConnection)));
		private static readonly System.Lazy<MethodAccessor<BitmaskTile>> _HasVisionToBitmaskTile3458695754 =
				new System.Lazy<MethodAccessor<BitmaskTile>>(() => MethodAccessor<BitmaskTile>.Create("HasVisionToBitmaskTile", typeof(BitmaskTile)));

		public static void RefreshNeighbours(this BitmaskTile __self, BitmaskTile[] neighbours) => _RefreshNeighbours3446946469.Value.Invoke(__self, neighbours);
		public static bool CanConnectToBitmaskTile(this BitmaskTile __self, BitmaskTile otherBitmaskTile) => (bool)_CanConnectToBitmaskTile3458695754.Value.Invoke(__self, otherBitmaskTile);
		public static int GetBitmaskValueFromNeighbours(this BitmaskTile __self, BitmaskTile[] neighbours) => (int)_GetBitmaskValueFromNeighbours3446946469.Value.Invoke(__self, neighbours);
		public static void AssignMeshesFromConnection(this BitmaskTile __self, TileBitmaskConnection bitmaskConnection) => _AssignMeshesFromConnection3442492090.Value.Invoke(__self, bitmaskConnection);
		public static bool HasVisionToBitmaskTile(this BitmaskTile __self, BitmaskTile otherTile) => (bool)_HasVisionToBitmaskTile3458695754.Value.Invoke(__self, otherTile);

	}

	public static class Private_TileBitmaskManager
	{

		private static readonly System.Lazy<StaticFieldAccessor<System.Collections.Generic.Dictionary<TileBitmaskType, System.Collections.Generic.List<BitmaskTile>>>> _tileDictionary =
				new System.Lazy<StaticFieldAccessor<System.Collections.Generic.Dictionary<TileBitmaskType, System.Collections.Generic.List<BitmaskTile>>>>(() => StaticFieldAccessor<System.Collections.Generic.Dictionary<TileBitmaskType, System.Collections.Generic.List<BitmaskTile>>>.Create(typeof(TileBitmaskManager), "tileDictionary"));
		private static readonly System.Lazy<StaticFieldAccessor<SO_TileBitmask[]>> _bitmaskAssets =
				new System.Lazy<StaticFieldAccessor<SO_TileBitmask[]>>(() => StaticFieldAccessor<SO_TileBitmask[]>.Create(typeof(TileBitmaskManager), "bitmaskAssets"));

		public static System.Collections.Generic.Dictionary<TileBitmaskType, System.Collections.Generic.List<BitmaskTile>> GetTileDictionary() => _tileDictionary.Value.GetValue();
		public static void SetTileDictionary(System.Collections.Generic.Dictionary<TileBitmaskType, System.Collections.Generic.List<BitmaskTile>> value) => _tileDictionary.Value.SetValue(value);
		public static SO_TileBitmask[] GetBitmaskAssets() => _bitmaskAssets.Value.GetValue();
		public static void SetBitmaskAssets(SO_TileBitmask[] value) => _bitmaskAssets.Value.SetValue(value);

		private static readonly System.Lazy<StaticMethodAccessor> _LoadBitmaskAssets757602046 =
				new System.Lazy<StaticMethodAccessor>(() => StaticMethodAccessor.Create(typeof(TileBitmaskManager), "LoadBitmaskAssets"));

		public static void LoadBitmaskAssets() => _LoadBitmaskAssets757602046.Value.Invoke();

	}

	public static class PrivateAccessor_MetalDetector
	{

		private static readonly System.Lazy<FieldAccessor<MetalDetector, UnityEngine.MeshRenderer>> _lampRenderer =
				new System.Lazy<FieldAccessor<MetalDetector, UnityEngine.MeshRenderer>>(() => FieldAccessor<MetalDetector, UnityEngine.MeshRenderer>.Create("lampRenderer"));
		private static readonly System.Lazy<FieldAccessor<MetalDetector, FMODUnity.StudioEventEmitter>> _beepEmitter =
				new System.Lazy<FieldAccessor<MetalDetector, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<MetalDetector, FMODUnity.StudioEventEmitter>.Create("beepEmitter"));
		private static readonly System.Lazy<FieldAccessor<MetalDetector, FMODUnity.StudioEventEmitter>> _flatLineEmitter =
				new System.Lazy<FieldAccessor<MetalDetector, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<MetalDetector, FMODUnity.StudioEventEmitter>.Create("flatLineEmitter"));
		private static readonly System.Lazy<FieldAccessor<MetalDetector, FMODUnity.StudioEventEmitter>> _useToolEmitter =
				new System.Lazy<FieldAccessor<MetalDetector, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<MetalDetector, FMODUnity.StudioEventEmitter>.Create("useToolEmitter"));
		private static readonly System.Lazy<FieldAccessor<MetalDetector, TreasurePointManager>> _treasureManager =
				new System.Lazy<FieldAccessor<MetalDetector, TreasurePointManager>>(() => FieldAccessor<MetalDetector, TreasurePointManager>.Create("treasureManager"));
		private static readonly System.Lazy<FieldAccessor<MetalDetector, TreasurePoint>> _currentClosestPoint =
				new System.Lazy<FieldAccessor<MetalDetector, TreasurePoint>>(() => FieldAccessor<MetalDetector, TreasurePoint>.Create("currentClosestPoint"));
		private static readonly System.Lazy<FieldAccessor<MetalDetector, float>> _beepApexDistance =
				new System.Lazy<FieldAccessor<MetalDetector, float>>(() => FieldAccessor<MetalDetector, float>.Create("beepApexDistance"));
		private static readonly System.Lazy<FieldAccessor<MetalDetector, float>> _distanceToClosest =
				new System.Lazy<FieldAccessor<MetalDetector, float>>(() => FieldAccessor<MetalDetector, float>.Create("distanceToClosest"));
		private static readonly System.Lazy<FieldAccessor<MetalDetector, float>> _searchTimer =
				new System.Lazy<FieldAccessor<MetalDetector, float>>(() => FieldAccessor<MetalDetector, float>.Create("searchTimer"));
		private static readonly System.Lazy<FieldAccessor<MetalDetector, float>> _minimumSearchCooldown =
				new System.Lazy<FieldAccessor<MetalDetector, float>>(() => FieldAccessor<MetalDetector, float>.Create("minimumSearchCooldown"));
		private static readonly System.Lazy<FieldAccessor<MetalDetector, float>> _searchCooldown =
				new System.Lazy<FieldAccessor<MetalDetector, float>>(() => FieldAccessor<MetalDetector, float>.Create("searchCooldown"));
		private static readonly System.Lazy<FieldAccessor<MetalDetector, TimerEventer>> _durabilityTimer =
				new System.Lazy<FieldAccessor<MetalDetector, TimerEventer>>(() => FieldAccessor<MetalDetector, TimerEventer>.Create("durabilityTimer"));
		private static readonly System.Lazy<FieldAccessor<MetalDetector, bool>> _remote_shouldBeep =
				new System.Lazy<FieldAccessor<MetalDetector, bool>>(() => FieldAccessor<MetalDetector, bool>.Create("remote_shouldBeep"));
		private static readonly System.Lazy<FieldAccessor<MetalDetector, UnityEngine.MaterialPropertyBlock>> _mpbLamps =
				new System.Lazy<FieldAccessor<MetalDetector, UnityEngine.MaterialPropertyBlock>>(() => FieldAccessor<MetalDetector, UnityEngine.MaterialPropertyBlock>.Create("mpbLamps"));

		public static UnityEngine.MeshRenderer GetLampRenderer(this MetalDetector __self) => _lampRenderer.Value.GetValue(__self);
		public static void SetLampRenderer(this MetalDetector __self, UnityEngine.MeshRenderer value) => _lampRenderer.Value.SetValue(__self, value);
		public static FMODUnity.StudioEventEmitter GetBeepEmitter(this MetalDetector __self) => _beepEmitter.Value.GetValue(__self);
		public static void SetBeepEmitter(this MetalDetector __self, FMODUnity.StudioEventEmitter value) => _beepEmitter.Value.SetValue(__self, value);
		public static FMODUnity.StudioEventEmitter GetFlatLineEmitter(this MetalDetector __self) => _flatLineEmitter.Value.GetValue(__self);
		public static void SetFlatLineEmitter(this MetalDetector __self, FMODUnity.StudioEventEmitter value) => _flatLineEmitter.Value.SetValue(__self, value);
		public static FMODUnity.StudioEventEmitter GetUseToolEmitter(this MetalDetector __self) => _useToolEmitter.Value.GetValue(__self);
		public static void SetUseToolEmitter(this MetalDetector __self, FMODUnity.StudioEventEmitter value) => _useToolEmitter.Value.SetValue(__self, value);
		public static TreasurePointManager GetTreasureManager(this MetalDetector __self) => _treasureManager.Value.GetValue(__self);
		public static void SetTreasureManager(this MetalDetector __self, TreasurePointManager value) => _treasureManager.Value.SetValue(__self, value);
		public static TreasurePoint GetCurrentClosestPoint(this MetalDetector __self) => _currentClosestPoint.Value.GetValue(__self);
		public static void SetCurrentClosestPoint(this MetalDetector __self, TreasurePoint value) => _currentClosestPoint.Value.SetValue(__self, value);
		public static float GetBeepApexDistance(this MetalDetector __self) => _beepApexDistance.Value.GetValue(__self);
		public static void SetBeepApexDistance(this MetalDetector __self, float value) => _beepApexDistance.Value.SetValue(__self, value);
		public static float GetDistanceToClosest(this MetalDetector __self) => _distanceToClosest.Value.GetValue(__self);
		public static void SetDistanceToClosest(this MetalDetector __self, float value) => _distanceToClosest.Value.SetValue(__self, value);
		public static float GetSearchTimer(this MetalDetector __self) => _searchTimer.Value.GetValue(__self);
		public static void SetSearchTimer(this MetalDetector __self, float value) => _searchTimer.Value.SetValue(__self, value);
		public static float GetMinimumSearchCooldown(this MetalDetector __self) => _minimumSearchCooldown.Value.GetValue(__self);
		public static void SetMinimumSearchCooldown(this MetalDetector __self, float value) => _minimumSearchCooldown.Value.SetValue(__self, value);
		public static float GetSearchCooldown(this MetalDetector __self) => _searchCooldown.Value.GetValue(__self);
		public static void SetSearchCooldown(this MetalDetector __self, float value) => _searchCooldown.Value.SetValue(__self, value);
		public static TimerEventer GetDurabilityTimer(this MetalDetector __self) => _durabilityTimer.Value.GetValue(__self);
		public static void SetDurabilityTimer(this MetalDetector __self, TimerEventer value) => _durabilityTimer.Value.SetValue(__self, value);
		public static bool GetRemote_shouldBeep(this MetalDetector __self) => _remote_shouldBeep.Value.GetValue(__self);
		public static void SetRemote_shouldBeep(this MetalDetector __self, bool value) => _remote_shouldBeep.Value.SetValue(__self, value);
		public static UnityEngine.MaterialPropertyBlock GetMpbLamps(this MetalDetector __self) => _mpbLamps.Value.GetValue(__self);
		public static void SetMpbLamps(this MetalDetector __self, UnityEngine.MaterialPropertyBlock value) => _mpbLamps.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<MetalDetector>> _Start757602046 =
				new System.Lazy<MethodAccessor<MetalDetector>>(() => MethodAccessor<MetalDetector>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<MetalDetector>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<MetalDetector>>(() => MethodAccessor<MetalDetector>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<MetalDetector>> _Update757602046 =
				new System.Lazy<MethodAccessor<MetalDetector>>(() => MethodAccessor<MetalDetector>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<MetalDetector>> _UpdateLamps757602046 =
				new System.Lazy<MethodAccessor<MetalDetector>>(() => MethodAccessor<MetalDetector>.Create("UpdateLamps"));
		private static readonly System.Lazy<MethodAccessor<MetalDetector>> _UpdateBeepingSound757602046 =
				new System.Lazy<MethodAccessor<MetalDetector>>(() => MethodAccessor<MetalDetector>.Create("UpdateBeepingSound"));
		private static readonly System.Lazy<MethodAccessor<MetalDetector>> _PlayBeepSound3486905475 =
				new System.Lazy<MethodAccessor<MetalDetector>>(() => MethodAccessor<MetalDetector>.Create("PlayBeepSound", typeof(float)));
		private static readonly System.Lazy<MethodAccessor<MetalDetector>> _OnNetworkProperties3462541703 =
				new System.Lazy<MethodAccessor<MetalDetector>>(() => MethodAccessor<MetalDetector>.Create("OnNetworkProperties", typeof(Message_Player_Update)));

		public static void Start(this MetalDetector __self) => _Start757602046.Value.Invoke(__self);
		public static void OnDestroy(this MetalDetector __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static bool Update(this MetalDetector __self) => (bool)_Update757602046.Value.Invoke(__self);
		public static void UpdateLamps(this MetalDetector __self) => _UpdateLamps757602046.Value.Invoke(__self);
		public static void UpdateBeepingSound(this MetalDetector __self) => _UpdateBeepingSound757602046.Value.Invoke(__self);
		public static void PlayBeepSound(this MetalDetector __self, float distance) => _PlayBeepSound3486905475.Value.Invoke(__self, distance);
		public static void OnNetworkProperties(this MetalDetector __self, Message_Player_Update msg_Update) => _OnNetworkProperties3462541703.Value.Invoke(__self, msg_Update);

	}

	public static class Private_MetalDetector
	{

		private static readonly System.Lazy<StaticFieldAccessor<System.Single[]>> _lampThresholds =
				new System.Lazy<StaticFieldAccessor<System.Single[]>>(() => StaticFieldAccessor<System.Single[]>.Create(typeof(MetalDetector), "lampThresholds"));
		private static readonly System.Lazy<StaticFieldAccessor<float>> _searchRadius =
				new System.Lazy<StaticFieldAccessor<float>>(() => StaticFieldAccessor<float>.Create(typeof(MetalDetector), "searchRadius"));

		public static System.Single[] GetLampThresholds() => _lampThresholds.Value.GetValue();
		public static void SetLampThresholds(System.Single[] value) => _lampThresholds.Value.SetValue(value);
		public static float GetSearchRadius() => _searchRadius.Value.GetValue();
		public static void SetSearchRadius(float value) => _searchRadius.Value.SetValue(value);

	}

	public static class PrivateAccessor_TreasurePoint
	{

		private static readonly System.Lazy<FieldAccessor<TreasurePoint, UnityEngine.ParticleSystem>> _digParticles =
				new System.Lazy<FieldAccessor<TreasurePoint, UnityEngine.ParticleSystem>>(() => FieldAccessor<TreasurePoint, UnityEngine.ParticleSystem>.Create("digParticles"));
		private static readonly System.Lazy<FieldAccessor<TreasurePoint, TreasurePointDirt>> _dirt =
				new System.Lazy<FieldAccessor<TreasurePoint, TreasurePointDirt>>(() => FieldAccessor<TreasurePoint, TreasurePointDirt>.Create("dirt"));
		private static readonly System.Lazy<FieldAccessor<TreasurePoint, Raft_Network>> _network =
				new System.Lazy<FieldAccessor<TreasurePoint, Raft_Network>>(() => FieldAccessor<TreasurePoint, Raft_Network>.Create("network"));

		public static UnityEngine.ParticleSystem GetDigParticles(this TreasurePoint __self) => _digParticles.Value.GetValue(__self);
		public static void SetDigParticles(this TreasurePoint __self, UnityEngine.ParticleSystem value) => _digParticles.Value.SetValue(__self, value);
		public static TreasurePointDirt GetDirt(this TreasurePoint __self) => _dirt.Value.GetValue(__self);
		public static void SetDirt(this TreasurePoint __self, TreasurePointDirt value) => _dirt.Value.SetValue(__self, value);
		public static Raft_Network GetNetwork(this TreasurePoint __self) => _network.Value.GetValue(__self);
		public static void SetNetwork(this TreasurePoint __self, Raft_Network value) => _network.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<TreasurePoint>> _Start757602046 =
				new System.Lazy<MethodAccessor<TreasurePoint>>(() => MethodAccessor<TreasurePoint>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<TreasurePoint>> _Update757602046 =
				new System.Lazy<MethodAccessor<TreasurePoint>>(() => MethodAccessor<TreasurePoint>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<TreasurePoint>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<TreasurePoint>>(() => MethodAccessor<TreasurePoint>.Create("OnDestroy"));

		public static void Start(this TreasurePoint __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this TreasurePoint __self) => _Update757602046.Value.Invoke(__self);
		public static void OnDestroy(this TreasurePoint __self) => _OnDestroy757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_TreasurePointDirt
	{

		private static readonly System.Lazy<FieldAccessor<TreasurePointDirt, bool>> _isRemoved =
				new System.Lazy<FieldAccessor<TreasurePointDirt, bool>>(() => FieldAccessor<TreasurePointDirt, bool>.Create("isRemoved"));

		public static bool GetIsRemoved(this TreasurePointDirt __self) => _isRemoved.Value.GetValue(__self);
		public static void SetIsRemoved(this TreasurePointDirt __self, bool value) => _isRemoved.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<TreasurePointDirt>> _OnDisable757602046 =
				new System.Lazy<MethodAccessor<TreasurePointDirt>>(() => MethodAccessor<TreasurePointDirt>.Create("OnDisable"));
		private static readonly System.Lazy<MethodAccessor<TreasurePointDirt>> _OnEnable757602046 =
				new System.Lazy<MethodAccessor<TreasurePointDirt>>(() => MethodAccessor<TreasurePointDirt>.Create("OnEnable"));

		public static void OnDisable(this TreasurePointDirt __self) => _OnDisable757602046.Value.Invoke(__self);
		public static void OnEnable(this TreasurePointDirt __self) => _OnEnable757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_TreasurePointManager
	{

		private static readonly System.Lazy<FieldAccessor<TreasurePointManager, Raft_Network>> _network =
				new System.Lazy<FieldAccessor<TreasurePointManager, Raft_Network>>(() => FieldAccessor<TreasurePointManager, Raft_Network>.Create("network"));

		public static Raft_Network GetNetwork(this TreasurePointManager __self) => _network.Value.GetValue(__self);
		public static void SetNetwork(this TreasurePointManager __self, Raft_Network value) => _network.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<TreasurePointManager>> _Awake757602046 =
				new System.Lazy<MethodAccessor<TreasurePointManager>>(() => MethodAccessor<TreasurePointManager>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<TreasurePointManager>> _Start757602046 =
				new System.Lazy<MethodAccessor<TreasurePointManager>>(() => MethodAccessor<TreasurePointManager>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<TreasurePointManager>> _GetRandomTresurePrefab757602046 =
				new System.Lazy<MethodAccessor<TreasurePointManager>>(() => MethodAccessor<TreasurePointManager>.Create("GetRandomTresurePrefab"));
		private static readonly System.Lazy<MethodAccessor<TreasurePointManager>> _GetTreasurePrefabFromUniqueIndex3486186818 =
				new System.Lazy<MethodAccessor<TreasurePointManager>>(() => MethodAccessor<TreasurePointManager>.Create("GetTreasurePrefabFromUniqueIndex", typeof(int)));
		private static readonly System.Lazy<MethodAccessor<TreasurePointManager>> _ClearTreasurePoints757602046 =
				new System.Lazy<MethodAccessor<TreasurePointManager>>(() => MethodAccessor<TreasurePointManager>.Create("ClearTreasurePoints"));

		public static void Awake(this TreasurePointManager __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this TreasurePointManager __self) => _Start757602046.Value.Invoke(__self);
		public static TreasurePoint GetRandomTresurePrefab(this TreasurePointManager __self) => (TreasurePoint)_GetRandomTresurePrefab757602046.Value.Invoke(__self);
		public static TreasurePoint GetTreasurePrefabFromUniqueIndex(this TreasurePointManager __self, int uniqueTreasureIndex) => (TreasurePoint)_GetTreasurePrefabFromUniqueIndex3486186818.Value.Invoke(__self, uniqueTreasureIndex);
		public static void ClearTreasurePoints(this TreasurePointManager __self) => _ClearTreasurePoints757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_NametagToSign
	{

		private static readonly System.Lazy<MethodAccessor<NametagToSign>> _Start757602046 =
				new System.Lazy<MethodAccessor<NametagToSign>>(() => MethodAccessor<NametagToSign>.Create("Start"));

		public static void Start(this NametagToSign __self) => _Start757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_RGDTextwriter
	{

		private static readonly System.Lazy<MethodAccessor<RGDTextwriter>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGDTextwriter>>(() => MethodAccessor<RGDTextwriter>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGDTextwriter __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_RGDTrophyHolder
	{

		private static readonly System.Lazy<MethodAccessor<RGDTrophyHolder>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGDTrophyHolder>>(() => MethodAccessor<RGDTrophyHolder>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGDTrophyHolder __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_SignWriter
	{

		private static readonly System.Lazy<FieldAccessor<SignWriter, TextWriterObject>> _textWriter =
				new System.Lazy<FieldAccessor<SignWriter, TextWriterObject>>(() => FieldAccessor<SignWriter, TextWriterObject>.Create("textWriter"));

		public static TextWriterObject GetTextWriter(this SignWriter __self) => _textWriter.Value.GetValue(__self);
		public static void SetTextWriter(this SignWriter __self, TextWriterObject value) => _textWriter.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<SignWriter>> _Awake757602046 =
				new System.Lazy<MethodAccessor<SignWriter>>(() => MethodAccessor<SignWriter>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<SignWriter>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<SignWriter>>(() => MethodAccessor<SignWriter>.Create("OnDestroy"));

		public static void Awake(this SignWriter __self) => _Awake757602046.Value.Invoke(__self);
		public static void OnDestroy(this SignWriter __self) => _OnDestroy757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_TrophyHolder
	{

		private static readonly System.Lazy<FieldAccessor<TrophyHolder, ItemObjectEnabler>> _itemObjectEnabler =
				new System.Lazy<FieldAccessor<TrophyHolder, ItemObjectEnabler>>(() => FieldAccessor<TrophyHolder, ItemObjectEnabler>.Create("itemObjectEnabler"));
		private static readonly System.Lazy<FieldAccessor<TrophyHolder, Network_Player>> _player =
				new System.Lazy<FieldAccessor<TrophyHolder, Network_Player>>(() => FieldAccessor<TrophyHolder, Network_Player>.Create("player"));
		private static readonly System.Lazy<FieldAccessor<TrophyHolder, CanvasHelper>> _canvas =
				new System.Lazy<FieldAccessor<TrophyHolder, CanvasHelper>>(() => FieldAccessor<TrophyHolder, CanvasHelper>.Create("canvas"));
		private static readonly System.Lazy<FieldAccessor<TrophyHolder, bool>> _isShowingText =
				new System.Lazy<FieldAccessor<TrophyHolder, bool>>(() => FieldAccessor<TrophyHolder, bool>.Create("isShowingText"));
		private static readonly System.Lazy<FieldAccessor<TrophyHolder, Item_Base>> _currentObject =
				new System.Lazy<FieldAccessor<TrophyHolder, Item_Base>>(() => FieldAccessor<TrophyHolder, Item_Base>.Create("currentObject"));
		private static readonly System.Lazy<FieldAccessor<TrophyHolder, UnityEngine.BoxCollider>> _trophyTrigger =
				new System.Lazy<FieldAccessor<TrophyHolder, UnityEngine.BoxCollider>>(() => FieldAccessor<TrophyHolder, UnityEngine.BoxCollider>.Create("trophyTrigger"));
		private static readonly System.Lazy<FieldAccessor<TrophyHolder, Raft_Network>> _network =
				new System.Lazy<FieldAccessor<TrophyHolder, Raft_Network>>(() => FieldAccessor<TrophyHolder, Raft_Network>.Create("network"));
		private static readonly System.Lazy<FieldAccessor<TrophyHolder, UnityEngine.Vector3>> _colliderOccupiedOffset =
				new System.Lazy<FieldAccessor<TrophyHolder, UnityEngine.Vector3>>(() => FieldAccessor<TrophyHolder, UnityEngine.Vector3>.Create("colliderOccupiedOffset"));
		private static readonly System.Lazy<FieldAccessor<TrophyHolder, UnityEngine.Vector3>> _colliderEmptyOffset =
				new System.Lazy<FieldAccessor<TrophyHolder, UnityEngine.Vector3>>(() => FieldAccessor<TrophyHolder, UnityEngine.Vector3>.Create("colliderEmptyOffset"));
		private static readonly System.Lazy<FieldAccessor<TrophyHolder, UnityEngine.Vector3>> _colliderOccupiedScale =
				new System.Lazy<FieldAccessor<TrophyHolder, UnityEngine.Vector3>>(() => FieldAccessor<TrophyHolder, UnityEngine.Vector3>.Create("colliderOccupiedScale"));
		private static readonly System.Lazy<FieldAccessor<TrophyHolder, UnityEngine.Vector3>> _colliderEmptyScale =
				new System.Lazy<FieldAccessor<TrophyHolder, UnityEngine.Vector3>>(() => FieldAccessor<TrophyHolder, UnityEngine.Vector3>.Create("colliderEmptyScale"));
		private static readonly System.Lazy<FieldAccessor<TrophyHolder, string>> _refPlaceTrophySound =
				new System.Lazy<FieldAccessor<TrophyHolder, string>>(() => FieldAccessor<TrophyHolder, string>.Create("refPlaceTrophySound"));

		public static ItemObjectEnabler GetItemObjectEnabler(this TrophyHolder __self) => _itemObjectEnabler.Value.GetValue(__self);
		public static void SetItemObjectEnabler(this TrophyHolder __self, ItemObjectEnabler value) => _itemObjectEnabler.Value.SetValue(__self, value);
		public static Network_Player GetPlayer(this TrophyHolder __self) => _player.Value.GetValue(__self);
		public static void SetPlayer(this TrophyHolder __self, Network_Player value) => _player.Value.SetValue(__self, value);
		public static CanvasHelper GetCanvas(this TrophyHolder __self) => _canvas.Value.GetValue(__self);
		public static void SetCanvas(this TrophyHolder __self, CanvasHelper value) => _canvas.Value.SetValue(__self, value);
		public static bool GetIsShowingText(this TrophyHolder __self) => _isShowingText.Value.GetValue(__self);
		public static void SetIsShowingText(this TrophyHolder __self, bool value) => _isShowingText.Value.SetValue(__self, value);
		public static Item_Base GetCurrentObject(this TrophyHolder __self) => _currentObject.Value.GetValue(__self);
		public static void SetCurrentObject(this TrophyHolder __self, Item_Base value) => _currentObject.Value.SetValue(__self, value);
		public static UnityEngine.BoxCollider GetTrophyTrigger(this TrophyHolder __self) => _trophyTrigger.Value.GetValue(__self);
		public static void SetTrophyTrigger(this TrophyHolder __self, UnityEngine.BoxCollider value) => _trophyTrigger.Value.SetValue(__self, value);
		public static Raft_Network GetNetwork(this TrophyHolder __self) => _network.Value.GetValue(__self);
		public static void SetNetwork(this TrophyHolder __self, Raft_Network value) => _network.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetColliderOccupiedOffset(this TrophyHolder __self) => _colliderOccupiedOffset.Value.GetValue(__self);
		public static void SetColliderOccupiedOffset(this TrophyHolder __self, UnityEngine.Vector3 value) => _colliderOccupiedOffset.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetColliderEmptyOffset(this TrophyHolder __self) => _colliderEmptyOffset.Value.GetValue(__self);
		public static void SetColliderEmptyOffset(this TrophyHolder __self, UnityEngine.Vector3 value) => _colliderEmptyOffset.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetColliderOccupiedScale(this TrophyHolder __self) => _colliderOccupiedScale.Value.GetValue(__self);
		public static void SetColliderOccupiedScale(this TrophyHolder __self, UnityEngine.Vector3 value) => _colliderOccupiedScale.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetColliderEmptyScale(this TrophyHolder __self) => _colliderEmptyScale.Value.GetValue(__self);
		public static void SetColliderEmptyScale(this TrophyHolder __self, UnityEngine.Vector3 value) => _colliderEmptyScale.Value.SetValue(__self, value);
		public static string GetRefPlaceTrophySound(this TrophyHolder __self) => _refPlaceTrophySound.Value.GetValue(__self);
		public static void SetRefPlaceTrophySound(this TrophyHolder __self, string value) => _refPlaceTrophySound.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<TrophyHolder>> _Start757602046 =
				new System.Lazy<MethodAccessor<TrophyHolder>>(() => MethodAccessor<TrophyHolder>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<TrophyHolder>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<TrophyHolder>>(() => MethodAccessor<TrophyHolder>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<TrophyHolder>> _OnEnable757602046 =
				new System.Lazy<MethodAccessor<TrophyHolder>>(() => MethodAccessor<TrophyHolder>.Create("OnEnable"));
		private static readonly System.Lazy<MethodAccessor<TrophyHolder>> _RemoveTrophy3461878659 =
				new System.Lazy<MethodAccessor<TrophyHolder>>(() => MethodAccessor<TrophyHolder>.Create("RemoveTrophy", typeof(Network_Player)));
		private static readonly System.Lazy<MethodAccessor<TrophyHolder>> _ModifyColliderScaleAndPos3450040886 =
				new System.Lazy<MethodAccessor<TrophyHolder>>(() => MethodAccessor<TrophyHolder>.Create("ModifyColliderScaleAndPos", typeof(bool)));

		public static void Start(this TrophyHolder __self) => _Start757602046.Value.Invoke(__self);
		public static void OnDestroy(this TrophyHolder __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void OnEnable(this TrophyHolder __self) => _OnEnable757602046.Value.Invoke(__self);
		public static bool RemoveTrophy(this TrophyHolder __self, Network_Player p_player) => (bool)_RemoveTrophy3461878659.Value.Invoke(__self, p_player);
		public static void ModifyColliderScaleAndPos(this TrophyHolder __self, bool p_isOccupied) => _ModifyColliderScaleAndPos3450040886.Value.Invoke(__self, p_isOccupied);

	}

	public static class PrivateAccessor_Message_TrophyBoardCreate
	{

		private static readonly System.Lazy<MethodAccessor<Message_TrophyBoardCreate>> _GetTrophyHolderFromObjectIndex3505494740 =
				new System.Lazy<MethodAccessor<Message_TrophyBoardCreate>>(() => MethodAccessor<Message_TrophyBoardCreate>.Create("GetTrophyHolderFromObjectIndex", typeof(TrophyHolder[]), typeof(uint)));

		public static TrophyHolder GetTrophyHolderFromObjectIndex(this Message_TrophyBoardCreate __self, TrophyHolder[] p_trophyHolders, uint objectIndex) => (TrophyHolder)_GetTrophyHolderFromObjectIndex3505494740.Value.Invoke(__self, p_trophyHolders, objectIndex);

	}

	public static class PrivateAccessor_TrophyTextwriter
	{

		private static readonly System.Lazy<FieldAccessor<TrophyTextwriter, Raft_Network>> _network =
				new System.Lazy<FieldAccessor<TrophyTextwriter, Raft_Network>>(() => FieldAccessor<TrophyTextwriter, Raft_Network>.Create("network"));
		private static readonly System.Lazy<FieldAccessor<TrophyTextwriter, Network_Player>> _player =
				new System.Lazy<FieldAccessor<TrophyTextwriter, Network_Player>>(() => FieldAccessor<TrophyTextwriter, Network_Player>.Create("player"));
		private static readonly System.Lazy<FieldAccessor<TrophyTextwriter, ChatTextFieldController>> _chat =
				new System.Lazy<FieldAccessor<TrophyTextwriter, ChatTextFieldController>>(() => FieldAccessor<TrophyTextwriter, ChatTextFieldController>.Create("chat"));

		public static Raft_Network GetNetwork(this TrophyTextwriter __self) => _network.Value.GetValue(__self);
		public static void SetNetwork(this TrophyTextwriter __self, Raft_Network value) => _network.Value.SetValue(__self, value);
		public static Network_Player GetPlayer(this TrophyTextwriter __self) => _player.Value.GetValue(__self);
		public static void SetPlayer(this TrophyTextwriter __self, Network_Player value) => _player.Value.SetValue(__self, value);
		public static ChatTextFieldController GetChat(this TrophyTextwriter __self) => _chat.Value.GetValue(__self);
		public static void SetChat(this TrophyTextwriter __self, ChatTextFieldController value) => _chat.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<TrophyTextwriter>> _Start757602046 =
				new System.Lazy<MethodAccessor<TrophyTextwriter>>(() => MethodAccessor<TrophyTextwriter>.Create("Start"));

		public static void Start(this TrophyTextwriter __self) => _Start757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Unstuck_Point
	{

		private static readonly System.Lazy<MethodAccessor<Unstuck_Point>> _OnEnable757602046 =
				new System.Lazy<MethodAccessor<Unstuck_Point>>(() => MethodAccessor<Unstuck_Point>.Create("OnEnable"));
		private static readonly System.Lazy<MethodAccessor<Unstuck_Point>> _OnDisable757602046 =
				new System.Lazy<MethodAccessor<Unstuck_Point>>(() => MethodAccessor<Unstuck_Point>.Create("OnDisable"));

		public static void OnEnable(this Unstuck_Point __self) => _OnEnable757602046.Value.Invoke(__self);
		public static void OnDisable(this Unstuck_Point __self) => _OnDisable757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Unstuck_Tracker
	{

		private static readonly System.Lazy<FieldAccessor<Unstuck_Tracker, UnityEngine.Vector3>> _latestTrackedPos =
				new System.Lazy<FieldAccessor<Unstuck_Tracker, UnityEngine.Vector3>>(() => FieldAccessor<Unstuck_Tracker, UnityEngine.Vector3>.Create("latestTrackedPos"));
		private static readonly System.Lazy<FieldAccessor<Unstuck_Tracker, UnityEngine.Transform>> _tracked =
				new System.Lazy<FieldAccessor<Unstuck_Tracker, UnityEngine.Transform>>(() => FieldAccessor<Unstuck_Tracker, UnityEngine.Transform>.Create("tracked"));
		private static readonly System.Lazy<FieldAccessor<Unstuck_Tracker, float>> _trackedPosDistance =
				new System.Lazy<FieldAccessor<Unstuck_Tracker, float>>(() => FieldAccessor<Unstuck_Tracker, float>.Create("trackedPosDistance"));
		private static readonly System.Lazy<FieldAccessor<Unstuck_Tracker, float>> _stuckDurationRequiredSeconds =
				new System.Lazy<FieldAccessor<Unstuck_Tracker, float>>(() => FieldAccessor<Unstuck_Tracker, float>.Create("stuckDurationRequiredSeconds"));
		private static readonly System.Lazy<FieldAccessor<Unstuck_Tracker, float>> _stuckDurationRequiredDeadSeconds =
				new System.Lazy<FieldAccessor<Unstuck_Tracker, float>>(() => FieldAccessor<Unstuck_Tracker, float>.Create("stuckDurationRequiredDeadSeconds"));
		private static readonly System.Lazy<FieldAccessor<Unstuck_Tracker, float>> _teleportedPointDestinationYOffset =
				new System.Lazy<FieldAccessor<Unstuck_Tracker, float>>(() => FieldAccessor<Unstuck_Tracker, float>.Create("teleportedPointDestinationYOffset"));
		private static readonly System.Lazy<FieldAccessor<Unstuck_Tracker, float>> _currentStuckProgress =
				new System.Lazy<FieldAccessor<Unstuck_Tracker, float>>(() => FieldAccessor<Unstuck_Tracker, float>.Create("currentStuckProgress"));
		private static readonly System.Lazy<FieldAccessor<Unstuck_Tracker, bool>> _currentlyStuck =
				new System.Lazy<FieldAccessor<Unstuck_Tracker, bool>>(() => FieldAccessor<Unstuck_Tracker, bool>.Create("currentlyStuck"));
		private static readonly System.Lazy<FieldAccessor<Unstuck_Tracker, Raft_Network>> _network =
				new System.Lazy<FieldAccessor<Unstuck_Tracker, Raft_Network>>(() => FieldAccessor<Unstuck_Tracker, Raft_Network>.Create("network"));

		public static UnityEngine.Vector3 GetLatestTrackedPos(this Unstuck_Tracker __self) => _latestTrackedPos.Value.GetValue(__self);
		public static void SetLatestTrackedPos(this Unstuck_Tracker __self, UnityEngine.Vector3 value) => _latestTrackedPos.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetTracked(this Unstuck_Tracker __self) => _tracked.Value.GetValue(__self);
		public static void SetTracked(this Unstuck_Tracker __self, UnityEngine.Transform value) => _tracked.Value.SetValue(__self, value);
		public static float GetTrackedPosDistance(this Unstuck_Tracker __self) => _trackedPosDistance.Value.GetValue(__self);
		public static void SetTrackedPosDistance(this Unstuck_Tracker __self, float value) => _trackedPosDistance.Value.SetValue(__self, value);
		public static float GetStuckDurationRequiredSeconds(this Unstuck_Tracker __self) => _stuckDurationRequiredSeconds.Value.GetValue(__self);
		public static void SetStuckDurationRequiredSeconds(this Unstuck_Tracker __self, float value) => _stuckDurationRequiredSeconds.Value.SetValue(__self, value);
		public static float GetStuckDurationRequiredDeadSeconds(this Unstuck_Tracker __self) => _stuckDurationRequiredDeadSeconds.Value.GetValue(__self);
		public static void SetStuckDurationRequiredDeadSeconds(this Unstuck_Tracker __self, float value) => _stuckDurationRequiredDeadSeconds.Value.SetValue(__self, value);
		public static float GetTeleportedPointDestinationYOffset(this Unstuck_Tracker __self) => _teleportedPointDestinationYOffset.Value.GetValue(__self);
		public static void SetTeleportedPointDestinationYOffset(this Unstuck_Tracker __self, float value) => _teleportedPointDestinationYOffset.Value.SetValue(__self, value);
		public static float GetCurrentStuckProgress(this Unstuck_Tracker __self) => _currentStuckProgress.Value.GetValue(__self);
		public static void SetCurrentStuckProgress(this Unstuck_Tracker __self, float value) => _currentStuckProgress.Value.SetValue(__self, value);
		public static bool GetCurrentlyStuck(this Unstuck_Tracker __self) => _currentlyStuck.Value.GetValue(__self);
		public static void SetCurrentlyStuck(this Unstuck_Tracker __self, bool value) => _currentlyStuck.Value.SetValue(__self, value);
		public static Raft_Network GetNetwork(this Unstuck_Tracker __self) => _network.Value.GetValue(__self);
		public static void SetNetwork(this Unstuck_Tracker __self, Raft_Network value) => _network.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Unstuck_Tracker>> _TestStuckValueChanged1592449836 =
				new System.Lazy<MethodAccessor<Unstuck_Tracker>>(() => MethodAccessor<Unstuck_Tracker>.Create("TestStuckValueChanged", typeof(bool), typeof(Unstuck_Tracker)));
		private static readonly System.Lazy<MethodAccessor<Unstuck_Tracker>> _Start757602046 =
				new System.Lazy<MethodAccessor<Unstuck_Tracker>>(() => MethodAccessor<Unstuck_Tracker>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<Unstuck_Tracker>> _Update757602046 =
				new System.Lazy<MethodAccessor<Unstuck_Tracker>>(() => MethodAccessor<Unstuck_Tracker>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<Unstuck_Tracker>> _Teleport3429126434 =
				new System.Lazy<MethodAccessor<Unstuck_Tracker>>(() => MethodAccessor<Unstuck_Tracker>.Create("Teleport", typeof(UnityEngine.Vector3)));
		private static readonly System.Lazy<MethodAccessor<Unstuck_Tracker>> _SetIsStuck3450040886 =
				new System.Lazy<MethodAccessor<Unstuck_Tracker>>(() => MethodAccessor<Unstuck_Tracker>.Create("SetIsStuck", typeof(bool)));
		private static readonly System.Lazy<MethodAccessor<Unstuck_Tracker>> _ShouldTPToRaft1662569814 =
				new System.Lazy<MethodAccessor<Unstuck_Tracker>>(() => MethodAccessor<Unstuck_Tracker>.Create("ShouldTPToRaft", typeof(UnityEngine.Vector3), typeof(UnityEngine.Vector3)));
		private static readonly System.Lazy<MethodAccessor<Unstuck_Tracker>> _StuckFixTPRaft757602046 =
				new System.Lazy<MethodAccessor<Unstuck_Tracker>>(() => MethodAccessor<Unstuck_Tracker>.Create("StuckFixTPRaft"));
		private static readonly System.Lazy<MethodAccessor<Unstuck_Tracker>> _SendOnStuckValueChanged3450040886 =
				new System.Lazy<MethodAccessor<Unstuck_Tracker>>(() => MethodAccessor<Unstuck_Tracker>.Create("SendOnStuckValueChanged", typeof(bool)));
		private static readonly System.Lazy<MethodAccessor<Unstuck_Tracker>> _IsWithinDistanceOfPosition3098846995 =
				new System.Lazy<MethodAccessor<Unstuck_Tracker>>(() => MethodAccessor<Unstuck_Tracker>.Create("IsWithinDistanceOfPosition", typeof(UnityEngine.Vector3), typeof(UnityEngine.Transform)));

		public static void TestStuckValueChanged(this Unstuck_Tracker __self, bool value, Unstuck_Tracker tracker) => _TestStuckValueChanged1592449836.Value.Invoke(__self, value, tracker);
		public static void Start(this Unstuck_Tracker __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this Unstuck_Tracker __self) => _Update757602046.Value.Invoke(__self);
		public static void Teleport(this Unstuck_Tracker __self, UnityEngine.Vector3 point) => _Teleport3429126434.Value.Invoke(__self, point);
		public static void SetIsStuck(this Unstuck_Tracker __self, bool isStuck) => _SetIsStuck3450040886.Value.Invoke(__self, isStuck);
		public static bool ShouldTPToRaft(this Unstuck_Tracker __self, UnityEngine.Vector3 originPoint, UnityEngine.Vector3 destinationPoint) => (bool)_ShouldTPToRaft1662569814.Value.Invoke(__self, originPoint, destinationPoint);
		public static void StuckFixTPRaft(this Unstuck_Tracker __self) => _StuckFixTPRaft757602046.Value.Invoke(__self);
		public static void SendOnStuckValueChanged(this Unstuck_Tracker __self, bool value) => _SendOnStuckValueChanged3450040886.Value.Invoke(__self, value);
		public static bool IsWithinDistanceOfPosition(this Unstuck_Tracker __self, UnityEngine.Vector3 pos, UnityEngine.Transform tracked) => (bool)_IsWithinDistanceOfPosition3098846995.Value.Invoke(__self, pos, tracked);

	}

	public static class PrivateAccessor_Unstuck_Tracker_Player
	{

		private static readonly System.Lazy<FieldAccessor<Unstuck_Tracker_Player, Network_Player>> _trackedPlayer =
				new System.Lazy<FieldAccessor<Unstuck_Tracker_Player, Network_Player>>(() => FieldAccessor<Unstuck_Tracker_Player, Network_Player>.Create("trackedPlayer"));

		public static Network_Player GetTrackedPlayer(this Unstuck_Tracker_Player __self) => _trackedPlayer.Value.GetValue(__self);
		public static void SetTrackedPlayer(this Unstuck_Tracker_Player __self, Network_Player value) => _trackedPlayer.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Unstuck_Tracker_Player>> _Start757602046 =
				new System.Lazy<MethodAccessor<Unstuck_Tracker_Player>>(() => MethodAccessor<Unstuck_Tracker_Player>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<Unstuck_Tracker_Player>> _Teleport3429126434 =
				new System.Lazy<MethodAccessor<Unstuck_Tracker_Player>>(() => MethodAccessor<Unstuck_Tracker_Player>.Create("Teleport", typeof(UnityEngine.Vector3)));
		private static readonly System.Lazy<MethodAccessor<Unstuck_Tracker_Player>> _StuckFixTPRaft757602046 =
				new System.Lazy<MethodAccessor<Unstuck_Tracker_Player>>(() => MethodAccessor<Unstuck_Tracker_Player>.Create("StuckFixTPRaft"));
		private static readonly System.Lazy<MethodAccessor<Unstuck_Tracker_Player>> _ShouldTPToRaft1662569814 =
				new System.Lazy<MethodAccessor<Unstuck_Tracker_Player>>(() => MethodAccessor<Unstuck_Tracker_Player>.Create("ShouldTPToRaft", typeof(UnityEngine.Vector3), typeof(UnityEngine.Vector3)));

		public static void Start(this Unstuck_Tracker_Player __self) => _Start757602046.Value.Invoke(__self);
		public static void Teleport(this Unstuck_Tracker_Player __self, UnityEngine.Vector3 point) => _Teleport3429126434.Value.Invoke(__self, point);
		public static void StuckFixTPRaft(this Unstuck_Tracker_Player __self) => _StuckFixTPRaft757602046.Value.Invoke(__self);
		public static bool ShouldTPToRaft(this Unstuck_Tracker_Player __self, UnityEngine.Vector3 originPoint, UnityEngine.Vector3 destinationPoint) => (bool)_ShouldTPToRaft1662569814.Value.Invoke(__self, originPoint, destinationPoint);

	}

	public static class PrivateAccessor_Item_ApplyBuff
	{

		private static readonly System.Lazy<FieldAccessor<Item_ApplyBuff, Item_Base>> _itemToConsume =
				new System.Lazy<FieldAccessor<Item_ApplyBuff, Item_Base>>(() => FieldAccessor<Item_ApplyBuff, Item_Base>.Create("itemToConsume"));
		private static readonly System.Lazy<FieldAccessor<Item_ApplyBuff, string>> _eventRef_applyBuff =
				new System.Lazy<FieldAccessor<Item_ApplyBuff, string>>(() => FieldAccessor<Item_ApplyBuff, string>.Create("eventRef_applyBuff"));

		public static Item_Base GetItemToConsume(this Item_ApplyBuff __self) => _itemToConsume.Value.GetValue(__self);
		public static void SetItemToConsume(this Item_ApplyBuff __self, Item_Base value) => _itemToConsume.Value.SetValue(__self, value);
		public static string GetEventRef_applyBuff(this Item_ApplyBuff __self) => _eventRef_applyBuff.Value.GetValue(__self);
		public static void SetEventRef_applyBuff(this Item_ApplyBuff __self, string value) => _eventRef_applyBuff.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Item_ApplyBuff>> _Start757602046 =
				new System.Lazy<MethodAccessor<Item_ApplyBuff>>(() => MethodAccessor<Item_ApplyBuff>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<Item_ApplyBuff>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<Item_ApplyBuff>>(() => MethodAccessor<Item_ApplyBuff>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<Item_ApplyBuff>> _HandleChannelDelay757602046 =
				new System.Lazy<MethodAccessor<Item_ApplyBuff>>(() => MethodAccessor<Item_ApplyBuff>.Create("HandleChannelDelay"));
		private static readonly System.Lazy<MethodAccessor<Item_ApplyBuff>> _TriggerEffect757602046 =
				new System.Lazy<MethodAccessor<Item_ApplyBuff>>(() => MethodAccessor<Item_ApplyBuff>.Create("TriggerEffect"));

		public static void Start(this Item_ApplyBuff __self) => _Start757602046.Value.Invoke(__self);
		public static void OnDestroy(this Item_ApplyBuff __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void HandleChannelDelay(this Item_ApplyBuff __self) => _HandleChannelDelay757602046.Value.Invoke(__self);
		public static void TriggerEffect(this Item_ApplyBuff __self) => _TriggerEffect757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Item_HealingSalve
	{

		private static readonly System.Lazy<FieldAccessor<Item_HealingSalve, Item_Base>> _healingItemToConsume =
				new System.Lazy<FieldAccessor<Item_HealingSalve, Item_Base>>(() => FieldAccessor<Item_HealingSalve, Item_Base>.Create("healingItemToConsume"));
		private static readonly System.Lazy<FieldAccessor<Item_HealingSalve, string>> _eventRef_applySalve =
				new System.Lazy<FieldAccessor<Item_HealingSalve, string>>(() => FieldAccessor<Item_HealingSalve, string>.Create("eventRef_applySalve"));

		public static Item_Base GetHealingItemToConsume(this Item_HealingSalve __self) => _healingItemToConsume.Value.GetValue(__self);
		public static void SetHealingItemToConsume(this Item_HealingSalve __self, Item_Base value) => _healingItemToConsume.Value.SetValue(__self, value);
		public static string GetEventRef_applySalve(this Item_HealingSalve __self) => _eventRef_applySalve.Value.GetValue(__self);
		public static void SetEventRef_applySalve(this Item_HealingSalve __self, string value) => _eventRef_applySalve.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Item_HealingSalve>> _Start757602046 =
				new System.Lazy<MethodAccessor<Item_HealingSalve>>(() => MethodAccessor<Item_HealingSalve>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<Item_HealingSalve>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<Item_HealingSalve>>(() => MethodAccessor<Item_HealingSalve>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<Item_HealingSalve>> _HandleChannelDelay757602046 =
				new System.Lazy<MethodAccessor<Item_HealingSalve>>(() => MethodAccessor<Item_HealingSalve>.Create("HandleChannelDelay"));
		private static readonly System.Lazy<MethodAccessor<Item_HealingSalve>> _TriggerHeal757602046 =
				new System.Lazy<MethodAccessor<Item_HealingSalve>>(() => MethodAccessor<Item_HealingSalve>.Create("TriggerHeal"));

		public static void Start(this Item_HealingSalve __self) => _Start757602046.Value.Invoke(__self);
		public static void OnDestroy(this Item_HealingSalve __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void HandleChannelDelay(this Item_HealingSalve __self) => _HandleChannelDelay757602046.Value.Invoke(__self);
		public static void TriggerHeal(this Item_HealingSalve __self) => _TriggerHeal757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Item_MysteryPackage
	{

		private static readonly System.Lazy<FieldAccessor<Item_MysteryPackage, Item_Base>> _itemMysteryPackage =
				new System.Lazy<FieldAccessor<Item_MysteryPackage, Item_Base>>(() => FieldAccessor<Item_MysteryPackage, Item_Base>.Create("itemMysteryPackage"));
		private static readonly System.Lazy<FieldAccessor<Item_MysteryPackage, SO_MysteryPackageLoot>> _so_loot =
				new System.Lazy<FieldAccessor<Item_MysteryPackage, SO_MysteryPackageLoot>>(() => FieldAccessor<Item_MysteryPackage, SO_MysteryPackageLoot>.Create("so_loot"));
		private static readonly System.Lazy<FieldAccessor<Item_MysteryPackage, UnityEngine.ParticleSystem>> _openParticles =
				new System.Lazy<FieldAccessor<Item_MysteryPackage, UnityEngine.ParticleSystem>>(() => FieldAccessor<Item_MysteryPackage, UnityEngine.ParticleSystem>.Create("openParticles"));
		private static readonly System.Lazy<FieldAccessor<Item_MysteryPackage, FMODUnity.StudioEventEmitter>> _emitter_openPackage =
				new System.Lazy<FieldAccessor<Item_MysteryPackage, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<Item_MysteryPackage, FMODUnity.StudioEventEmitter>.Create("emitter_openPackage"));
		private static readonly System.Lazy<FieldAccessor<Item_MysteryPackage, Inventory_ResearchTable>> _researchTable =
				new System.Lazy<FieldAccessor<Item_MysteryPackage, Inventory_ResearchTable>>(() => FieldAccessor<Item_MysteryPackage, Inventory_ResearchTable>.Create("researchTable"));

		public static Item_Base GetItemMysteryPackage(this Item_MysteryPackage __self) => _itemMysteryPackage.Value.GetValue(__self);
		public static void SetItemMysteryPackage(this Item_MysteryPackage __self, Item_Base value) => _itemMysteryPackage.Value.SetValue(__self, value);
		public static SO_MysteryPackageLoot GetSo_loot(this Item_MysteryPackage __self) => _so_loot.Value.GetValue(__self);
		public static void SetSo_loot(this Item_MysteryPackage __self, SO_MysteryPackageLoot value) => _so_loot.Value.SetValue(__self, value);
		public static UnityEngine.ParticleSystem GetOpenParticles(this Item_MysteryPackage __self) => _openParticles.Value.GetValue(__self);
		public static void SetOpenParticles(this Item_MysteryPackage __self, UnityEngine.ParticleSystem value) => _openParticles.Value.SetValue(__self, value);
		public static FMODUnity.StudioEventEmitter GetEmitter_openPackage(this Item_MysteryPackage __self) => _emitter_openPackage.Value.GetValue(__self);
		public static void SetEmitter_openPackage(this Item_MysteryPackage __self, FMODUnity.StudioEventEmitter value) => _emitter_openPackage.Value.SetValue(__self, value);
		public static Inventory_ResearchTable GetResearchTable(this Item_MysteryPackage __self) => _researchTable.Value.GetValue(__self);
		public static void SetResearchTable(this Item_MysteryPackage __self, Inventory_ResearchTable value) => _researchTable.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Item_MysteryPackage>> _Start757602046 =
				new System.Lazy<MethodAccessor<Item_MysteryPackage>>(() => MethodAccessor<Item_MysteryPackage>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<Item_MysteryPackage>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<Item_MysteryPackage>>(() => MethodAccessor<Item_MysteryPackage>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<Item_MysteryPackage>> _UseButtonReleased757602046 =
				new System.Lazy<MethodAccessor<Item_MysteryPackage>>(() => MethodAccessor<Item_MysteryPackage>.Create("UseButtonReleased"));
		private static readonly System.Lazy<MethodAccessor<Item_MysteryPackage>> _ChannelFinished757602046 =
				new System.Lazy<MethodAccessor<Item_MysteryPackage>>(() => MethodAccessor<Item_MysteryPackage>.Create("ChannelFinished"));
		private static readonly System.Lazy<MethodAccessor<Item_MysteryPackage>> _OnStartChanneling757602046 =
				new System.Lazy<MethodAccessor<Item_MysteryPackage>>(() => MethodAccessor<Item_MysteryPackage>.Create("OnStartChanneling"));
		private static readonly System.Lazy<MethodAccessor<Item_MysteryPackage>> _PlayParticles757602046 =
				new System.Lazy<MethodAccessor<Item_MysteryPackage>>(() => MethodAccessor<Item_MysteryPackage>.Create("PlayParticles"));
		private static readonly System.Lazy<MethodAccessor<Item_MysteryPackage>> _StopParticles757602046 =
				new System.Lazy<MethodAccessor<Item_MysteryPackage>>(() => MethodAccessor<Item_MysteryPackage>.Create("StopParticles"));
		private static readonly System.Lazy<MethodAccessor<Item_MysteryPackage>> _ExtractLoot757602046 =
				new System.Lazy<MethodAccessor<Item_MysteryPackage>>(() => MethodAccessor<Item_MysteryPackage>.Create("ExtractLoot"));

		public static void Start(this Item_MysteryPackage __self) => _Start757602046.Value.Invoke(__self);
		public static void OnDestroy(this Item_MysteryPackage __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void UseButtonReleased(this Item_MysteryPackage __self) => _UseButtonReleased757602046.Value.Invoke(__self);
		public static void ChannelFinished(this Item_MysteryPackage __self) => _ChannelFinished757602046.Value.Invoke(__self);
		public static void OnStartChanneling(this Item_MysteryPackage __self) => _OnStartChanneling757602046.Value.Invoke(__self);
		public static void PlayParticles(this Item_MysteryPackage __self) => _PlayParticles757602046.Value.Invoke(__self);
		public static void StopParticles(this Item_MysteryPackage __self) => _StopParticles757602046.Value.Invoke(__self);
		public static void ExtractLoot(this Item_MysteryPackage __self) => _ExtractLoot757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_UseableItem
	{

		private static readonly System.Lazy<FieldAccessor<UseableItem, System.Action>> _OnChannelFinished =
				new System.Lazy<FieldAccessor<UseableItem, System.Action>>(() => FieldAccessor<UseableItem, System.Action>.Create("OnChannelFinished"));
		private static readonly System.Lazy<FieldAccessor<UseableItem, bool>> _isChanellingItem =
				new System.Lazy<FieldAccessor<UseableItem, bool>>(() => FieldAccessor<UseableItem, bool>.Create("isChanellingItem"));
		private static readonly System.Lazy<FieldAccessor<UseableItem, float>> _originItemChannelTime =
				new System.Lazy<FieldAccessor<UseableItem, float>>(() => FieldAccessor<UseableItem, float>.Create("originItemChannelTime"));
		private static readonly System.Lazy<FieldAccessor<UseableItem, bool>> _useCanvasLoadCircle =
				new System.Lazy<FieldAccessor<UseableItem, bool>>(() => FieldAccessor<UseableItem, bool>.Create("useCanvasLoadCircle"));
		private static readonly System.Lazy<FieldAccessor<UseableItem, bool>> _useDelayBetweenChannels =
				new System.Lazy<FieldAccessor<UseableItem, bool>>(() => FieldAccessor<UseableItem, bool>.Create("useDelayBetweenChannels"));
		private static readonly System.Lazy<FieldAccessor<UseableItem, float>> _channelDelay =
				new System.Lazy<FieldAccessor<UseableItem, float>>(() => FieldAccessor<UseableItem, float>.Create("channelDelay"));
		private static readonly System.Lazy<FieldAccessor<UseableItem, CanvasHelper>> _canvas =
				new System.Lazy<FieldAccessor<UseableItem, CanvasHelper>>(() => FieldAccessor<UseableItem, CanvasHelper>.Create("canvas"));
		private static readonly System.Lazy<FieldAccessor<UseableItem, float>> _currentItemChannelTime =
				new System.Lazy<FieldAccessor<UseableItem, float>>(() => FieldAccessor<UseableItem, float>.Create("currentItemChannelTime"));
		private static readonly System.Lazy<FieldAccessor<UseableItem, bool>> _canChannel =
				new System.Lazy<FieldAccessor<UseableItem, bool>>(() => FieldAccessor<UseableItem, bool>.Create("canChannel"));

		public static System.Action GetOnChannelFinished(this UseableItem __self) => _OnChannelFinished.Value.GetValue(__self);
		public static void SetOnChannelFinished(this UseableItem __self, System.Action value) => _OnChannelFinished.Value.SetValue(__self, value);
		public static bool GetIsChanellingItem(this UseableItem __self) => _isChanellingItem.Value.GetValue(__self);
		public static void SetIsChanellingItem(this UseableItem __self, bool value) => _isChanellingItem.Value.SetValue(__self, value);
		public static float GetOriginItemChannelTime(this UseableItem __self) => _originItemChannelTime.Value.GetValue(__self);
		public static void SetOriginItemChannelTime(this UseableItem __self, float value) => _originItemChannelTime.Value.SetValue(__self, value);
		public static bool GetUseCanvasLoadCircle(this UseableItem __self) => _useCanvasLoadCircle.Value.GetValue(__self);
		public static void SetUseCanvasLoadCircle(this UseableItem __self, bool value) => _useCanvasLoadCircle.Value.SetValue(__self, value);
		public static bool GetUseDelayBetweenChannels(this UseableItem __self) => _useDelayBetweenChannels.Value.GetValue(__self);
		public static void SetUseDelayBetweenChannels(this UseableItem __self, bool value) => _useDelayBetweenChannels.Value.SetValue(__self, value);
		public static float GetChannelDelay(this UseableItem __self) => _channelDelay.Value.GetValue(__self);
		public static void SetChannelDelay(this UseableItem __self, float value) => _channelDelay.Value.SetValue(__self, value);
		public static CanvasHelper GetCanvas(this UseableItem __self) => _canvas.Value.GetValue(__self);
		public static void SetCanvas(this UseableItem __self, CanvasHelper value) => _canvas.Value.SetValue(__self, value);
		public static float GetCurrentItemChannelTime(this UseableItem __self) => _currentItemChannelTime.Value.GetValue(__self);
		public static void SetCurrentItemChannelTime(this UseableItem __self, float value) => _currentItemChannelTime.Value.SetValue(__self, value);
		public static bool GetCanChannel(this UseableItem __self) => _canChannel.Value.GetValue(__self);
		public static void SetCanChannel(this UseableItem __self, bool value) => _canChannel.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<UseableItem>> _Start757602046 =
				new System.Lazy<MethodAccessor<UseableItem>>(() => MethodAccessor<UseableItem>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<UseableItem>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<UseableItem>>(() => MethodAccessor<UseableItem>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<UseableItem>> _Update757602046 =
				new System.Lazy<MethodAccessor<UseableItem>>(() => MethodAccessor<UseableItem>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<UseableItem>> _OnToolSelect757602046 =
				new System.Lazy<MethodAccessor<UseableItem>>(() => MethodAccessor<UseableItem>.Create("OnToolSelect"));
		private static readonly System.Lazy<MethodAccessor<UseableItem>> _OnToolDeSelect757602046 =
				new System.Lazy<MethodAccessor<UseableItem>>(() => MethodAccessor<UseableItem>.Create("OnToolDeSelect"));
		private static readonly System.Lazy<MethodAccessor<UseableItem>> _OnStartChanneling757602046 =
				new System.Lazy<MethodAccessor<UseableItem>>(() => MethodAccessor<UseableItem>.Create("OnStartChanneling"));
		private static readonly System.Lazy<MethodAccessor<UseableItem>> _ResetItemChannel757602046 =
				new System.Lazy<MethodAccessor<UseableItem>>(() => MethodAccessor<UseableItem>.Create("ResetItemChannel"));
		private static readonly System.Lazy<MethodAccessor<UseableItem>> _HandleChannelDelay757602046 =
				new System.Lazy<MethodAccessor<UseableItem>>(() => MethodAccessor<UseableItem>.Create("HandleChannelDelay"));
		private static readonly System.Lazy<MethodAccessor<UseableItem>> _UpdateLoadCircle757602046 =
				new System.Lazy<MethodAccessor<UseableItem>>(() => MethodAccessor<UseableItem>.Create("UpdateLoadCircle"));
		private static readonly System.Lazy<MethodAccessor<UseableItem>> _HideLoadCircle757602046 =
				new System.Lazy<MethodAccessor<UseableItem>>(() => MethodAccessor<UseableItem>.Create("HideLoadCircle"));

		public static void Start(this UseableItem __self) => _Start757602046.Value.Invoke(__self);
		public static void OnDestroy(this UseableItem __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static bool Update(this UseableItem __self) => (bool)_Update757602046.Value.Invoke(__self);
		public static void OnToolSelect(this UseableItem __self) => _OnToolSelect757602046.Value.Invoke(__self);
		public static void OnToolDeSelect(this UseableItem __self) => _OnToolDeSelect757602046.Value.Invoke(__self);
		public static void OnStartChanneling(this UseableItem __self) => _OnStartChanneling757602046.Value.Invoke(__self);
		public static void ResetItemChannel(this UseableItem __self) => _ResetItemChannel757602046.Value.Invoke(__self);
		public static void HandleChannelDelay(this UseableItem __self) => _HandleChannelDelay757602046.Value.Invoke(__self);
		public static void UpdateLoadCircle(this UseableItem __self) => _UpdateLoadCircle757602046.Value.Invoke(__self);
		public static void HideLoadCircle(this UseableItem __self) => _HideLoadCircle757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_ValidTerrainPointGenerator
	{

		private static readonly System.Lazy<FieldAccessor<ValidTerrainPointGenerator, UnityEngine.Vector2>> _generationBounds =
				new System.Lazy<FieldAccessor<ValidTerrainPointGenerator, UnityEngine.Vector2>>(() => FieldAccessor<ValidTerrainPointGenerator, UnityEngine.Vector2>.Create("generationBounds"));
		private static readonly System.Lazy<FieldAccessor<ValidTerrainPointGenerator, System.Collections.Generic.List<UnityEngine.Vector3>>> _validPoints =
				new System.Lazy<FieldAccessor<ValidTerrainPointGenerator, System.Collections.Generic.List<UnityEngine.Vector3>>>(() => FieldAccessor<ValidTerrainPointGenerator, System.Collections.Generic.List<UnityEngine.Vector3>>.Create("validPoints"));

		public static UnityEngine.Vector2 GetGenerationBounds(this ValidTerrainPointGenerator __self) => _generationBounds.Value.GetValue(__self);
		public static void SetGenerationBounds(this ValidTerrainPointGenerator __self, UnityEngine.Vector2 value) => _generationBounds.Value.SetValue(__self, value);
		public static System.Collections.Generic.List<UnityEngine.Vector3> GetValidPoints(this ValidTerrainPointGenerator __self) => _validPoints.Value.GetValue(__self);
		public static void SetValidPoints(this ValidTerrainPointGenerator __self, System.Collections.Generic.List<UnityEngine.Vector3> value) => _validPoints.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<ValidTerrainPointGenerator>> _Generate3486716628 =
				new System.Lazy<MethodAccessor<ValidTerrainPointGenerator>>(() => MethodAccessor<ValidTerrainPointGenerator>.Create("Generate", typeof(SO_ValidPointGeneratorSettings)));
		private static readonly System.Lazy<MethodAccessor<ValidTerrainPointGenerator>> _RaycastTowards539418256 =
				new System.Lazy<MethodAccessor<ValidTerrainPointGenerator>>(() => MethodAccessor<ValidTerrainPointGenerator>.Create("RaycastTowards", typeof(UnityEngine.Vector3), typeof(SO_ValidPointGeneratorSettings)));
		private static readonly System.Lazy<MethodAccessor<ValidTerrainPointGenerator>> _CheckPointHeightViability539418256 =
				new System.Lazy<MethodAccessor<ValidTerrainPointGenerator>>(() => MethodAccessor<ValidTerrainPointGenerator>.Create("CheckPointHeightViability", typeof(UnityEngine.Vector3), typeof(SO_ValidPointGeneratorSettings)));
		private static readonly System.Lazy<MethodAccessor<ValidTerrainPointGenerator>> _CheckPointNormalViability575233871 =
				new System.Lazy<MethodAccessor<ValidTerrainPointGenerator>>(() => MethodAccessor<ValidTerrainPointGenerator>.Create("CheckPointNormalViability", typeof(UnityEngine.RaycastHit), typeof(SO_ValidPointGeneratorSettings)));

		public static void Generate(this ValidTerrainPointGenerator __self, SO_ValidPointGeneratorSettings settings) => _Generate3486716628.Value.Invoke(__self, settings);
		public static void RaycastTowards(this ValidTerrainPointGenerator __self, UnityEngine.Vector3 from, SO_ValidPointGeneratorSettings settings) => _RaycastTowards539418256.Value.Invoke(__self, from, settings);
		public static bool CheckPointHeightViability(this ValidTerrainPointGenerator __self, UnityEngine.Vector3 point, SO_ValidPointGeneratorSettings parameters) => (bool)_CheckPointHeightViability539418256.Value.Invoke(__self, point, parameters);
		public static bool CheckPointNormalViability(this ValidTerrainPointGenerator __self, UnityEngine.RaycastHit hit, SO_ValidPointGeneratorSettings settings) => (bool)_CheckPointNormalViability575233871.Value.Invoke(__self, hit, settings);

	}

	public static class PrivateAccessor_WaterFloatDomesticRigidbody
	{

		private static readonly System.Lazy<FieldAccessor<WaterFloatDomesticRigidbody, AI_NetworkBehaviour_Domestic>> _domestic =
				new System.Lazy<FieldAccessor<WaterFloatDomesticRigidbody, AI_NetworkBehaviour_Domestic>>(() => FieldAccessor<WaterFloatDomesticRigidbody, AI_NetworkBehaviour_Domestic>.Create("domestic"));

		public static AI_NetworkBehaviour_Domestic GetDomestic(this WaterFloatDomesticRigidbody __self) => _domestic.Value.GetValue(__self);
		public static void SetDomestic(this WaterFloatDomesticRigidbody __self, AI_NetworkBehaviour_Domestic value) => _domestic.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<WaterFloatDomesticRigidbody>> _OnValidate757602046 =
				new System.Lazy<MethodAccessor<WaterFloatDomesticRigidbody>>(() => MethodAccessor<WaterFloatDomesticRigidbody>.Create("OnValidate"));
		private static readonly System.Lazy<MethodAccessor<WaterFloatDomesticRigidbody>> _Start757602046 =
				new System.Lazy<MethodAccessor<WaterFloatDomesticRigidbody>>(() => MethodAccessor<WaterFloatDomesticRigidbody>.Create("Start"));

		public static void OnValidate(this WaterFloatDomesticRigidbody __self) => _OnValidate757602046.Value.Invoke(__self);
		public static void Start(this WaterFloatDomesticRigidbody __self) => _Start757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_WaterFloatOxygenBounds
	{

		private static readonly System.Lazy<FieldAccessor<WaterFloatOxygenBounds, float>> _stationaryWaterFloatInRegionAmplitude =
				new System.Lazy<FieldAccessor<WaterFloatOxygenBounds, float>>(() => FieldAccessor<WaterFloatOxygenBounds, float>.Create("stationaryWaterFloatInRegionAmplitude"));
		private static readonly System.Lazy<FieldAccessor<WaterFloatOxygenBounds, Subregion>> _oxygenRegion =
				new System.Lazy<FieldAccessor<WaterFloatOxygenBounds, Subregion>>(() => FieldAccessor<WaterFloatOxygenBounds, Subregion>.Create("oxygenRegion"));
		private static readonly System.Lazy<FieldAccessor<WaterFloatOxygenBounds, UnityEngine.Transform>> _checkForRegionOffset =
				new System.Lazy<FieldAccessor<WaterFloatOxygenBounds, UnityEngine.Transform>>(() => FieldAccessor<WaterFloatOxygenBounds, UnityEngine.Transform>.Create("checkForRegionOffset"));
		private static readonly System.Lazy<FieldAccessor<WaterFloatOxygenBounds, bool>> _doAdditionalSurfaceRaycast =
				new System.Lazy<FieldAccessor<WaterFloatOxygenBounds, bool>>(() => FieldAccessor<WaterFloatOxygenBounds, bool>.Create("doAdditionalSurfaceRaycast"));
		private static readonly System.Lazy<FieldAccessor<WaterFloatOxygenBounds, TimerEventer>> _raycastTimer =
				new System.Lazy<FieldAccessor<WaterFloatOxygenBounds, TimerEventer>>(() => FieldAccessor<WaterFloatOxygenBounds, TimerEventer>.Create("raycastTimer"));
		private static readonly System.Lazy<FieldAccessor<WaterFloatOxygenBounds, float>> _surfaceRaycastUpwardsDistance =
				new System.Lazy<FieldAccessor<WaterFloatOxygenBounds, float>>(() => FieldAccessor<WaterFloatOxygenBounds, float>.Create("surfaceRaycastUpwardsDistance"));
		private static readonly System.Lazy<FieldAccessor<WaterFloatOxygenBounds, bool>> _hadRegionLastFrame =
				new System.Lazy<FieldAccessor<WaterFloatOxygenBounds, bool>>(() => FieldAccessor<WaterFloatOxygenBounds, bool>.Create("hadRegionLastFrame"));
		private static readonly System.Lazy<FieldAccessor<WaterFloatOxygenBounds, bool>> _hitRoof =
				new System.Lazy<FieldAccessor<WaterFloatOxygenBounds, bool>>(() => FieldAccessor<WaterFloatOxygenBounds, bool>.Create("hitRoof"));

		public static float GetStationaryWaterFloatInRegionAmplitude(this WaterFloatOxygenBounds __self) => _stationaryWaterFloatInRegionAmplitude.Value.GetValue(__self);
		public static void SetStationaryWaterFloatInRegionAmplitude(this WaterFloatOxygenBounds __self, float value) => _stationaryWaterFloatInRegionAmplitude.Value.SetValue(__self, value);
		public static Subregion GetOxygenRegion(this WaterFloatOxygenBounds __self) => _oxygenRegion.Value.GetValue(__self);
		public static void SetOxygenRegion(this WaterFloatOxygenBounds __self, Subregion value) => _oxygenRegion.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetCheckForRegionOffset(this WaterFloatOxygenBounds __self) => _checkForRegionOffset.Value.GetValue(__self);
		public static void SetCheckForRegionOffset(this WaterFloatOxygenBounds __self, UnityEngine.Transform value) => _checkForRegionOffset.Value.SetValue(__self, value);
		public static bool GetDoAdditionalSurfaceRaycast(this WaterFloatOxygenBounds __self) => _doAdditionalSurfaceRaycast.Value.GetValue(__self);
		public static void SetDoAdditionalSurfaceRaycast(this WaterFloatOxygenBounds __self, bool value) => _doAdditionalSurfaceRaycast.Value.SetValue(__self, value);
		public static TimerEventer GetRaycastTimer(this WaterFloatOxygenBounds __self) => _raycastTimer.Value.GetValue(__self);
		public static void SetRaycastTimer(this WaterFloatOxygenBounds __self, TimerEventer value) => _raycastTimer.Value.SetValue(__self, value);
		public static float GetSurfaceRaycastUpwardsDistance(this WaterFloatOxygenBounds __self) => _surfaceRaycastUpwardsDistance.Value.GetValue(__self);
		public static void SetSurfaceRaycastUpwardsDistance(this WaterFloatOxygenBounds __self, float value) => _surfaceRaycastUpwardsDistance.Value.SetValue(__self, value);
		public static bool GetHadRegionLastFrame(this WaterFloatOxygenBounds __self) => _hadRegionLastFrame.Value.GetValue(__self);
		public static void SetHadRegionLastFrame(this WaterFloatOxygenBounds __self, bool value) => _hadRegionLastFrame.Value.SetValue(__self, value);
		public static bool GetHitRoof(this WaterFloatOxygenBounds __self) => _hitRoof.Value.GetValue(__self);
		public static void SetHitRoof(this WaterFloatOxygenBounds __self, bool value) => _hitRoof.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<WaterFloatOxygenBounds>> _LateUpdate757602046 =
				new System.Lazy<MethodAccessor<WaterFloatOxygenBounds>>(() => MethodAccessor<WaterFloatOxygenBounds>.Create("LateUpdate"));
		private static readonly System.Lazy<MethodAccessor<WaterFloatOxygenBounds>> _SetToSurface757602046 =
				new System.Lazy<MethodAccessor<WaterFloatOxygenBounds>>(() => MethodAccessor<WaterFloatOxygenBounds>.Create("SetToSurface"));
		private static readonly System.Lazy<MethodAccessor<WaterFloatOxygenBounds>> _DisconnectCurrentRegion757602046 =
				new System.Lazy<MethodAccessor<WaterFloatOxygenBounds>>(() => MethodAccessor<WaterFloatOxygenBounds>.Create("DisconnectCurrentRegion"));
		private static readonly System.Lazy<MethodAccessor<WaterFloatOxygenBounds>> _SetToSurface_OxygenRegion757602046 =
				new System.Lazy<MethodAccessor<WaterFloatOxygenBounds>>(() => MethodAccessor<WaterFloatOxygenBounds>.Create("SetToSurface_OxygenRegion"));
		private static readonly System.Lazy<MethodAccessor<WaterFloatOxygenBounds>> _FindOxygenRegionAndComponent757602046 =
				new System.Lazy<MethodAccessor<WaterFloatOxygenBounds>>(() => MethodAccessor<WaterFloatOxygenBounds>.Create("FindOxygenRegionAndComponent"));
		private static readonly System.Lazy<MethodAccessor<WaterFloatOxygenBounds>> _RoofColliderInTheWay757602046 =
				new System.Lazy<MethodAccessor<WaterFloatOxygenBounds>>(() => MethodAccessor<WaterFloatOxygenBounds>.Create("RoofColliderInTheWay"));

		public static void LateUpdate(this WaterFloatOxygenBounds __self) => _LateUpdate757602046.Value.Invoke(__self);
		public static void SetToSurface(this WaterFloatOxygenBounds __self) => _SetToSurface757602046.Value.Invoke(__self);
		public static void DisconnectCurrentRegion(this WaterFloatOxygenBounds __self) => _DisconnectCurrentRegion757602046.Value.Invoke(__self);
		public static void SetToSurface_OxygenRegion(this WaterFloatOxygenBounds __self) => _SetToSurface_OxygenRegion757602046.Value.Invoke(__self);
		public static void FindOxygenRegionAndComponent(this WaterFloatOxygenBounds __self) => _FindOxygenRegionAndComponent757602046.Value.Invoke(__self);
		public static bool RoofColliderInTheWay(this WaterFloatOxygenBounds __self) => (bool)_RoofColliderInTheWay757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_WaterFloatSemih
	{

		private static readonly System.Lazy<FieldAccessor<WaterFloatSemih, float>> _updateTimer =
				new System.Lazy<FieldAccessor<WaterFloatSemih, float>>(() => FieldAccessor<WaterFloatSemih, float>.Create("updateTimer"));
		private static readonly System.Lazy<FieldAccessor<WaterFloatSemih, float>> _lastKnownWaterPos =
				new System.Lazy<FieldAccessor<WaterFloatSemih, float>>(() => FieldAccessor<WaterFloatSemih, float>.Create("lastKnownWaterPos"));
		private static readonly System.Lazy<FieldAccessor<WaterFloatSemih, WaterPointGetter>> _waterPointGetter =
				new System.Lazy<FieldAccessor<WaterFloatSemih, WaterPointGetter>>(() => FieldAccessor<WaterFloatSemih, WaterPointGetter>.Create("waterPointGetter"));

		public static float GetUpdateTimer(this WaterFloatSemih __self) => _updateTimer.Value.GetValue(__self);
		public static void SetUpdateTimer(this WaterFloatSemih __self, float value) => _updateTimer.Value.SetValue(__self, value);
		public static float GetLastKnownWaterPos(this WaterFloatSemih __self) => _lastKnownWaterPos.Value.GetValue(__self);
		public static void SetLastKnownWaterPos(this WaterFloatSemih __self, float value) => _lastKnownWaterPos.Value.SetValue(__self, value);
		public static WaterPointGetter GetWaterPointGetter(this WaterFloatSemih __self) => _waterPointGetter.Value.GetValue(__self);
		public static void SetWaterPointGetter(this WaterFloatSemih __self, WaterPointGetter value) => _waterPointGetter.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<WaterFloatSemih>> _Awake757602046 =
				new System.Lazy<MethodAccessor<WaterFloatSemih>>(() => MethodAccessor<WaterFloatSemih>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<WaterFloatSemih>> _Update757602046 =
				new System.Lazy<MethodAccessor<WaterFloatSemih>>(() => MethodAccessor<WaterFloatSemih>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<WaterFloatSemih>> _UpdateWaterPos757602046 =
				new System.Lazy<MethodAccessor<WaterFloatSemih>>(() => MethodAccessor<WaterFloatSemih>.Create("UpdateWaterPos"));
		private static readonly System.Lazy<MethodAccessor<WaterFloatSemih>> _SetToSurface757602046 =
				new System.Lazy<MethodAccessor<WaterFloatSemih>>(() => MethodAccessor<WaterFloatSemih>.Create("SetToSurface"));

		public static void Awake(this WaterFloatSemih __self) => _Awake757602046.Value.Invoke(__self);
		public static void Update(this WaterFloatSemih __self) => _Update757602046.Value.Invoke(__self);
		public static void UpdateWaterPos(this WaterFloatSemih __self) => _UpdateWaterPos757602046.Value.Invoke(__self);
		public static void SetToSurface(this WaterFloatSemih __self) => _SetToSurface757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_WaterFloatSemih2
	{

		private static readonly System.Lazy<FieldAccessor<WaterFloatSemih2, WaterFloatSemih2.DisplacementMode>> __DisplacementMode =
				new System.Lazy<FieldAccessor<WaterFloatSemih2, WaterFloatSemih2.DisplacementMode>>(() => FieldAccessor<WaterFloatSemih2, WaterFloatSemih2.DisplacementMode>.Create("_DisplacementMode"));
		private static readonly System.Lazy<FieldAccessor<WaterFloatSemih2, float>> _waterPrecision =
				new System.Lazy<FieldAccessor<WaterFloatSemih2, float>>(() => FieldAccessor<WaterFloatSemih2, float>.Create("waterPrecision"));
		private static readonly System.Lazy<FieldAccessor<WaterFloatSemih2, bool>> _floatTowardsSurfaceInOxygenRegion =
				new System.Lazy<FieldAccessor<WaterFloatSemih2, bool>>(() => FieldAccessor<WaterFloatSemih2, bool>.Create("floatTowardsSurfaceInOxygenRegion"));
		private static readonly System.Lazy<FieldAccessor<WaterFloatSemih2, bool>> _spawnedInOrUnderOxygenRegion =
				new System.Lazy<FieldAccessor<WaterFloatSemih2, bool>>(() => FieldAccessor<WaterFloatSemih2, bool>.Create("spawnedInOrUnderOxygenRegion"));
		private static readonly System.Lazy<FieldAccessor<WaterFloatSemih2, UnityEngine.Vector3>> _initialPosition =
				new System.Lazy<FieldAccessor<WaterFloatSemih2, UnityEngine.Vector3>>(() => FieldAccessor<WaterFloatSemih2, UnityEngine.Vector3>.Create("initialPosition"));
		private static readonly System.Lazy<FieldAccessor<WaterFloatSemih2, UnityEngine.Vector3>> _previousPosition =
				new System.Lazy<FieldAccessor<WaterFloatSemih2, UnityEngine.Vector3>>(() => FieldAccessor<WaterFloatSemih2, UnityEngine.Vector3>.Create("previousPosition"));
		private static readonly System.Lazy<FieldAccessor<WaterFloatSemih2, UltimateWater.WaterSample>> _sample =
				new System.Lazy<FieldAccessor<WaterFloatSemih2, UltimateWater.WaterSample>>(() => FieldAccessor<WaterFloatSemih2, UltimateWater.WaterSample>.Create("sample"));
		private static readonly System.Lazy<FieldAccessor<WaterFloatSemih2, System.Nullable<float>>> _lastYPosition =
				new System.Lazy<FieldAccessor<WaterFloatSemih2, System.Nullable<float>>>(() => FieldAccessor<WaterFloatSemih2, System.Nullable<float>>.Create("lastYPosition"));
		private static readonly System.Lazy<FieldAccessor<WaterFloatSemih2, System.Nullable<float>>> _smoothedYPosition =
				new System.Lazy<FieldAccessor<WaterFloatSemih2, System.Nullable<float>>>(() => FieldAccessor<WaterFloatSemih2, System.Nullable<float>>.Create("smoothedYPosition"));
		private static readonly System.Lazy<FieldAccessor<WaterFloatSemih2, float>> _waterInterpolationDelta =
				new System.Lazy<FieldAccessor<WaterFloatSemih2, float>>(() => FieldAccessor<WaterFloatSemih2, float>.Create("waterInterpolationDelta"));
		private static readonly System.Lazy<FieldAccessor<WaterFloatSemih2, bool>> _hitWaterLast =
				new System.Lazy<FieldAccessor<WaterFloatSemih2, bool>>(() => FieldAccessor<WaterFloatSemih2, bool>.Create("hitWaterLast"));

		public static WaterFloatSemih2.DisplacementMode Get_DisplacementMode(this WaterFloatSemih2 __self) => __DisplacementMode.Value.GetValue(__self);
		public static void Set_DisplacementMode(this WaterFloatSemih2 __self, WaterFloatSemih2.DisplacementMode value) => __DisplacementMode.Value.SetValue(__self, value);
		public static float GetWaterPrecision(this WaterFloatSemih2 __self) => _waterPrecision.Value.GetValue(__self);
		public static void SetWaterPrecision(this WaterFloatSemih2 __self, float value) => _waterPrecision.Value.SetValue(__self, value);
		public static bool GetFloatTowardsSurfaceInOxygenRegion(this WaterFloatSemih2 __self) => _floatTowardsSurfaceInOxygenRegion.Value.GetValue(__self);
		public static void SetFloatTowardsSurfaceInOxygenRegion(this WaterFloatSemih2 __self, bool value) => _floatTowardsSurfaceInOxygenRegion.Value.SetValue(__self, value);
		public static bool GetSpawnedInOrUnderOxygenRegion(this WaterFloatSemih2 __self) => _spawnedInOrUnderOxygenRegion.Value.GetValue(__self);
		public static void SetSpawnedInOrUnderOxygenRegion(this WaterFloatSemih2 __self, bool value) => _spawnedInOrUnderOxygenRegion.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetInitialPosition(this WaterFloatSemih2 __self) => _initialPosition.Value.GetValue(__self);
		public static void SetInitialPosition(this WaterFloatSemih2 __self, UnityEngine.Vector3 value) => _initialPosition.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetPreviousPosition(this WaterFloatSemih2 __self) => _previousPosition.Value.GetValue(__self);
		public static void SetPreviousPosition(this WaterFloatSemih2 __self, UnityEngine.Vector3 value) => _previousPosition.Value.SetValue(__self, value);
		public static UltimateWater.WaterSample GetSample(this WaterFloatSemih2 __self) => _sample.Value.GetValue(__self);
		public static void SetSample(this WaterFloatSemih2 __self, UltimateWater.WaterSample value) => _sample.Value.SetValue(__self, value);
		public static System.Nullable<float> GetLastYPosition(this WaterFloatSemih2 __self) => _lastYPosition.Value.GetValue(__self);
		public static void SetLastYPosition(this WaterFloatSemih2 __self, System.Nullable<float> value) => _lastYPosition.Value.SetValue(__self, value);
		public static System.Nullable<float> GetSmoothedYPosition(this WaterFloatSemih2 __self) => _smoothedYPosition.Value.GetValue(__self);
		public static void SetSmoothedYPosition(this WaterFloatSemih2 __self, System.Nullable<float> value) => _smoothedYPosition.Value.SetValue(__self, value);
		public static float GetWaterInterpolationDelta(this WaterFloatSemih2 __self) => _waterInterpolationDelta.Value.GetValue(__self);
		public static void SetWaterInterpolationDelta(this WaterFloatSemih2 __self, float value) => _waterInterpolationDelta.Value.SetValue(__self, value);
		public static bool GetHitWaterLast(this WaterFloatSemih2 __self) => _hitWaterLast.Value.GetValue(__self);
		public static void SetHitWaterLast(this WaterFloatSemih2 __self, bool value) => _hitWaterLast.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<WaterFloatSemih2>> _Awake757602046 =
				new System.Lazy<MethodAccessor<WaterFloatSemih2>>(() => MethodAccessor<WaterFloatSemih2>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<WaterFloatSemih2>> _Start757602046 =
				new System.Lazy<MethodAccessor<WaterFloatSemih2>>(() => MethodAccessor<WaterFloatSemih2>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<WaterFloatSemih2>> _OnDisable757602046 =
				new System.Lazy<MethodAccessor<WaterFloatSemih2>>(() => MethodAccessor<WaterFloatSemih2>.Create("OnDisable"));
		private static readonly System.Lazy<MethodAccessor<WaterFloatSemih2>> _OnEnable757602046 =
				new System.Lazy<MethodAccessor<WaterFloatSemih2>>(() => MethodAccessor<WaterFloatSemih2>.Create("OnEnable"));
		private static readonly System.Lazy<MethodAccessor<WaterFloatSemih2>> _Update757602046 =
				new System.Lazy<MethodAccessor<WaterFloatSemih2>>(() => MethodAccessor<WaterFloatSemih2>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<WaterFloatSemih2>> _LateUpdate757602046 =
				new System.Lazy<MethodAccessor<WaterFloatSemih2>>(() => MethodAccessor<WaterFloatSemih2>.Create("LateUpdate"));
		private static readonly System.Lazy<MethodAccessor<WaterFloatSemih2>> _SetToSurface757602046 =
				new System.Lazy<MethodAccessor<WaterFloatSemih2>>(() => MethodAccessor<WaterFloatSemih2>.Create("SetToSurface"));
		private static readonly System.Lazy<MethodAccessor<WaterFloatSemih2>> _ResetFloating757602046 =
				new System.Lazy<MethodAccessor<WaterFloatSemih2>>(() => MethodAccessor<WaterFloatSemih2>.Create("ResetFloating"));

		public static void Awake(this WaterFloatSemih2 __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this WaterFloatSemih2 __self) => _Start757602046.Value.Invoke(__self);
		public static void OnDisable(this WaterFloatSemih2 __self) => _OnDisable757602046.Value.Invoke(__self);
		public static void OnEnable(this WaterFloatSemih2 __self) => _OnEnable757602046.Value.Invoke(__self);
		public static void Update(this WaterFloatSemih2 __self) => _Update757602046.Value.Invoke(__self);
		public static void LateUpdate(this WaterFloatSemih2 __self) => _LateUpdate757602046.Value.Invoke(__self);
		public static void SetToSurface(this WaterFloatSemih2 __self) => _SetToSurface757602046.Value.Invoke(__self);
		public static void ResetFloating(this WaterFloatSemih2 __self) => _ResetFloating757602046.Value.Invoke(__self);

	}

	public static class Private_WaterFloatSemih2
	{

		private static readonly System.Lazy<StaticFieldAccessor<UltimateWater.Water>> _water =
				new System.Lazy<StaticFieldAccessor<UltimateWater.Water>>(() => StaticFieldAccessor<UltimateWater.Water>.Create(typeof(WaterFloatSemih2), "water"));

		public static UltimateWater.Water GetWater() => _water.Value.GetValue();
		public static void SetWater(UltimateWater.Water value) => _water.Value.SetValue(value);

	}

	public static class PrivateAccessor_WaterFloatSemih_Rigidbody
	{

		private static readonly System.Lazy<FieldAccessor<WaterFloatSemih_Rigidbody, bool>> __isVelocityZero =
				new System.Lazy<FieldAccessor<WaterFloatSemih_Rigidbody, bool>>(() => FieldAccessor<WaterFloatSemih_Rigidbody, bool>.Create("_isVelocityZero"));
		private static readonly System.Lazy<FieldAccessor<WaterFloatSemih_Rigidbody, bool>> _active =
				new System.Lazy<FieldAccessor<WaterFloatSemih_Rigidbody, bool>>(() => FieldAccessor<WaterFloatSemih_Rigidbody, bool>.Create("active"));
		private static readonly System.Lazy<FieldAccessor<WaterFloatSemih_Rigidbody, UnityEngine.Rigidbody>> _body =
				new System.Lazy<FieldAccessor<WaterFloatSemih_Rigidbody, UnityEngine.Rigidbody>>(() => FieldAccessor<WaterFloatSemih_Rigidbody, UnityEngine.Rigidbody>.Create("body"));
		private static readonly System.Lazy<FieldAccessor<WaterFloatSemih_Rigidbody, float>> _waterDrag =
				new System.Lazy<FieldAccessor<WaterFloatSemih_Rigidbody, float>>(() => FieldAccessor<WaterFloatSemih_Rigidbody, float>.Create("waterDrag"));
		private static readonly System.Lazy<FieldAccessor<WaterFloatSemih_Rigidbody, bool>> _cameFromAir =
				new System.Lazy<FieldAccessor<WaterFloatSemih_Rigidbody, bool>>(() => FieldAccessor<WaterFloatSemih_Rigidbody, bool>.Create("cameFromAir"));

		public static bool Get_isVelocityZero(this WaterFloatSemih_Rigidbody __self) => __isVelocityZero.Value.GetValue(__self);
		public static void Set_isVelocityZero(this WaterFloatSemih_Rigidbody __self, bool value) => __isVelocityZero.Value.SetValue(__self, value);
		public static bool GetActive(this WaterFloatSemih_Rigidbody __self) => _active.Value.GetValue(__self);
		public static void SetActive(this WaterFloatSemih_Rigidbody __self, bool value) => _active.Value.SetValue(__self, value);
		public static UnityEngine.Rigidbody GetBody(this WaterFloatSemih_Rigidbody __self) => _body.Value.GetValue(__self);
		public static void SetBody(this WaterFloatSemih_Rigidbody __self, UnityEngine.Rigidbody value) => _body.Value.SetValue(__self, value);
		public static float GetWaterDrag(this WaterFloatSemih_Rigidbody __self) => _waterDrag.Value.GetValue(__self);
		public static void SetWaterDrag(this WaterFloatSemih_Rigidbody __self, float value) => _waterDrag.Value.SetValue(__self, value);
		public static bool GetCameFromAir(this WaterFloatSemih_Rigidbody __self) => _cameFromAir.Value.GetValue(__self);
		public static void SetCameFromAir(this WaterFloatSemih_Rigidbody __self, bool value) => _cameFromAir.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<WaterFloatSemih_Rigidbody>> _Awake757602046 =
				new System.Lazy<MethodAccessor<WaterFloatSemih_Rigidbody>>(() => MethodAccessor<WaterFloatSemih_Rigidbody>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<WaterFloatSemih_Rigidbody>> _OnEnable757602046 =
				new System.Lazy<MethodAccessor<WaterFloatSemih_Rigidbody>>(() => MethodAccessor<WaterFloatSemih_Rigidbody>.Create("OnEnable"));
		private static readonly System.Lazy<MethodAccessor<WaterFloatSemih_Rigidbody>> _LateUpdate757602046 =
				new System.Lazy<MethodAccessor<WaterFloatSemih_Rigidbody>>(() => MethodAccessor<WaterFloatSemih_Rigidbody>.Create("LateUpdate"));

		public static void Awake(this WaterFloatSemih_Rigidbody __self) => _Awake757602046.Value.Invoke(__self);
		public static void OnEnable(this WaterFloatSemih_Rigidbody __self) => _OnEnable757602046.Value.Invoke(__self);
		public static void LateUpdate(this WaterFloatSemih_Rigidbody __self) => _LateUpdate757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_WaterPointGetter
	{

		private static readonly System.Lazy<MethodAccessor<WaterPointGetter>> _Start757602046 =
				new System.Lazy<MethodAccessor<WaterPointGetter>>(() => MethodAccessor<WaterPointGetter>.Create("Start"));

		public static void Start(this WaterPointGetter __self) => _Start757602046.Value.Invoke(__self);

	}

	public static class Private_WaterPointGetter
	{

		private static readonly System.Lazy<StaticFieldAccessor<UltimateWater.Water>> _water =
				new System.Lazy<StaticFieldAccessor<UltimateWater.Water>>(() => StaticFieldAccessor<UltimateWater.Water>.Create(typeof(WaterPointGetter), "water"));

		public static UltimateWater.Water GetWater() => _water.Value.GetValue();
		public static void SetWater(UltimateWater.Water value) => _water.Value.SetValue(value);

	}

	public static class PrivateAccessor_WaterSplash
	{

		private static readonly System.Lazy<FieldAccessor<WaterSplash, WaterPointGetter>> _waterPointGetter =
				new System.Lazy<FieldAccessor<WaterSplash, WaterPointGetter>>(() => FieldAccessor<WaterSplash, WaterPointGetter>.Create("waterPointGetter"));
		private static readonly System.Lazy<FieldAccessor<WaterSplash, float>> _customWaterLevel =
				new System.Lazy<FieldAccessor<WaterSplash, float>>(() => FieldAccessor<WaterSplash, float>.Create("customWaterLevel"));
		private static readonly System.Lazy<FieldAccessor<WaterSplash, UnityEngine.ParticleSystem>> _particleSystem =
				new System.Lazy<FieldAccessor<WaterSplash, UnityEngine.ParticleSystem>>(() => FieldAccessor<WaterSplash, UnityEngine.ParticleSystem>.Create("particleSystem"));
		private static readonly System.Lazy<FieldAccessor<WaterSplash, bool>> _onWayDown =
				new System.Lazy<FieldAccessor<WaterSplash, bool>>(() => FieldAccessor<WaterSplash, bool>.Create("onWayDown"));
		private static readonly System.Lazy<FieldAccessor<WaterSplash, bool>> _onWayUp =
				new System.Lazy<FieldAccessor<WaterSplash, bool>>(() => FieldAccessor<WaterSplash, bool>.Create("onWayUp"));
		private static readonly System.Lazy<FieldAccessor<WaterSplash, string>> _eventRef_upSound =
				new System.Lazy<FieldAccessor<WaterSplash, string>>(() => FieldAccessor<WaterSplash, string>.Create("eventRef_upSound"));
		private static readonly System.Lazy<FieldAccessor<WaterSplash, string>> _eventRef_downSound =
				new System.Lazy<FieldAccessor<WaterSplash, string>>(() => FieldAccessor<WaterSplash, string>.Create("eventRef_downSound"));
		private static readonly System.Lazy<FieldAccessor<WaterSplash, float>> _previousPosition =
				new System.Lazy<FieldAccessor<WaterSplash, float>>(() => FieldAccessor<WaterSplash, float>.Create("previousPosition"));

		public static WaterPointGetter GetWaterPointGetter(this WaterSplash __self) => _waterPointGetter.Value.GetValue(__self);
		public static void SetWaterPointGetter(this WaterSplash __self, WaterPointGetter value) => _waterPointGetter.Value.SetValue(__self, value);
		public static float GetCustomWaterLevel(this WaterSplash __self) => _customWaterLevel.Value.GetValue(__self);
		public static void SetCustomWaterLevel(this WaterSplash __self, float value) => _customWaterLevel.Value.SetValue(__self, value);
		public static UnityEngine.ParticleSystem GetParticleSystem(this WaterSplash __self) => _particleSystem.Value.GetValue(__self);
		public static void SetParticleSystem(this WaterSplash __self, UnityEngine.ParticleSystem value) => _particleSystem.Value.SetValue(__self, value);
		public static bool GetOnWayDown(this WaterSplash __self) => _onWayDown.Value.GetValue(__self);
		public static void SetOnWayDown(this WaterSplash __self, bool value) => _onWayDown.Value.SetValue(__self, value);
		public static bool GetOnWayUp(this WaterSplash __self) => _onWayUp.Value.GetValue(__self);
		public static void SetOnWayUp(this WaterSplash __self, bool value) => _onWayUp.Value.SetValue(__self, value);
		public static string GetEventRef_upSound(this WaterSplash __self) => _eventRef_upSound.Value.GetValue(__self);
		public static void SetEventRef_upSound(this WaterSplash __self, string value) => _eventRef_upSound.Value.SetValue(__self, value);
		public static string GetEventRef_downSound(this WaterSplash __self) => _eventRef_downSound.Value.GetValue(__self);
		public static void SetEventRef_downSound(this WaterSplash __self, string value) => _eventRef_downSound.Value.SetValue(__self, value);
		public static float GetPreviousPosition(this WaterSplash __self) => _previousPosition.Value.GetValue(__self);
		public static void SetPreviousPosition(this WaterSplash __self, float value) => _previousPosition.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<WaterSplash>> _LateUpdate757602046 =
				new System.Lazy<MethodAccessor<WaterSplash>>(() => MethodAccessor<WaterSplash>.Create("LateUpdate"));

		public static void LateUpdate(this WaterSplash __self) => _LateUpdate757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_WaterRoughnessManager
	{

		private static readonly System.Lazy<FieldAccessor<WaterRoughnessManager, UltimateWater.WaterProfileBlend>> _waterProfileBlend =
				new System.Lazy<FieldAccessor<WaterRoughnessManager, UltimateWater.WaterProfileBlend>>(() => FieldAccessor<WaterRoughnessManager, UltimateWater.WaterProfileBlend>.Create("waterProfileBlend"));
		private static readonly System.Lazy<FieldAccessor<WaterRoughnessManager, SoundManager>> _soundManager =
				new System.Lazy<FieldAccessor<WaterRoughnessManager, SoundManager>>(() => FieldAccessor<WaterRoughnessManager, SoundManager>.Create("soundManager"));
		private static readonly System.Lazy<FieldAccessor<WaterRoughnessManager, System.Collections.Generic.List<float>>> _weightMessage =
				new System.Lazy<FieldAccessor<WaterRoughnessManager, System.Collections.Generic.List<float>>>(() => FieldAccessor<WaterRoughnessManager, System.Collections.Generic.List<float>>.Create("weightMessage"));
		private static readonly System.Lazy<FieldAccessor<WaterRoughnessManager, System.Collections.Generic.List<float>>> _weightsCache =
				new System.Lazy<FieldAccessor<WaterRoughnessManager, System.Collections.Generic.List<float>>>(() => FieldAccessor<WaterRoughnessManager, System.Collections.Generic.List<float>>.Create("weightsCache"));

		public static UltimateWater.WaterProfileBlend GetWaterProfileBlend(this WaterRoughnessManager __self) => _waterProfileBlend.Value.GetValue(__self);
		public static void SetWaterProfileBlend(this WaterRoughnessManager __self, UltimateWater.WaterProfileBlend value) => _waterProfileBlend.Value.SetValue(__self, value);
		public static SoundManager GetSoundManager(this WaterRoughnessManager __self) => _soundManager.Value.GetValue(__self);
		public static void SetSoundManager(this WaterRoughnessManager __self, SoundManager value) => _soundManager.Value.SetValue(__self, value);
		public static System.Collections.Generic.List<float> GetWeightMessage(this WaterRoughnessManager __self) => _weightMessage.Value.GetValue(__self);
		public static void SetWeightMessage(this WaterRoughnessManager __self, System.Collections.Generic.List<float> value) => _weightMessage.Value.SetValue(__self, value);
		public static System.Collections.Generic.List<float> GetWeightsCache(this WaterRoughnessManager __self) => _weightsCache.Value.GetValue(__self);
		public static void SetWeightsCache(this WaterRoughnessManager __self, System.Collections.Generic.List<float> value) => _weightsCache.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<WaterRoughnessManager>> _Awake757602046 =
				new System.Lazy<MethodAccessor<WaterRoughnessManager>>(() => MethodAccessor<WaterRoughnessManager>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<WaterRoughnessManager>> _Start757602046 =
				new System.Lazy<MethodAccessor<WaterRoughnessManager>>(() => MethodAccessor<WaterRoughnessManager>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<WaterRoughnessManager>> _Update757602046 =
				new System.Lazy<MethodAccessor<WaterRoughnessManager>>(() => MethodAccessor<WaterRoughnessManager>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<WaterRoughnessManager>> _GetWaterWeightsFromWeather757602046 =
				new System.Lazy<MethodAccessor<WaterRoughnessManager>>(() => MethodAccessor<WaterRoughnessManager>.Create("GetWaterWeightsFromWeather"));
		private static readonly System.Lazy<MethodAccessor<WaterRoughnessManager>> _LerpWater3443471040 =
				new System.Lazy<MethodAccessor<WaterRoughnessManager>>(() => MethodAccessor<WaterRoughnessManager>.Create("LerpWater", typeof(System.Collections.Generic.List<float>)));

		public static void Awake(this WaterRoughnessManager __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this WaterRoughnessManager __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this WaterRoughnessManager __self) => _Update757602046.Value.Invoke(__self);
		public static System.Collections.Generic.List<float> GetWaterWeightsFromWeather(this WaterRoughnessManager __self) => (System.Collections.Generic.List<float>)_GetWaterWeightsFromWeather757602046.Value.Invoke(__self);
		public static void LerpWater(this WaterRoughnessManager __self, System.Collections.Generic.List<float> weights) => _LerpWater3443471040.Value.Invoke(__self, weights);

	}

	public static class Private_WaterRoughnessManager
	{

		private static readonly System.Lazy<StaticFieldAccessor<float>> _roughness =
				new System.Lazy<StaticFieldAccessor<float>>(() => StaticFieldAccessor<float>.Create(typeof(WaterRoughnessManager), "roughness"));
		private static readonly System.Lazy<StaticFieldAccessor<float>> _maxRoughness =
				new System.Lazy<StaticFieldAccessor<float>>(() => StaticFieldAccessor<float>.Create(typeof(WaterRoughnessManager), "maxRoughness"));

		public static float GetRoughness() => _roughness.Value.GetValue();
		public static void SetRoughness(float value) => _roughness.Value.SetValue(value);
		public static float GetMaxRoughness() => _maxRoughness.Value.GetValue();
		public static void SetMaxRoughness(float value) => _maxRoughness.Value.SetValue(value);

	}

	public static class PrivateAccessor_Weather
	{

		private static readonly System.Lazy<FieldAccessor<Weather, float>> _startTime =
				new System.Lazy<FieldAccessor<Weather, float>>(() => FieldAccessor<Weather, float>.Create("startTime"));

		public static float GetStartTime(this Weather __self) => _startTime.Value.GetValue(__self);
		public static void SetStartTime(this Weather __self, float value) => _startTime.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Weather>> _Awake757602046 =
				new System.Lazy<MethodAccessor<Weather>>(() => MethodAccessor<Weather>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<Weather>> _Start757602046 =
				new System.Lazy<MethodAccessor<Weather>>(() => MethodAccessor<Weather>.Create("Start"));

		public static void Awake(this Weather __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this Weather __self) => _Start757602046.Value.Invoke(__self);

	}

	public static class Private_Weather
	{

		private static readonly System.Lazy<StaticFieldAccessor<UnityEngine.AzureSky.AzureSkyController>> _azureSky =
				new System.Lazy<StaticFieldAccessor<UnityEngine.AzureSky.AzureSkyController>>(() => StaticFieldAccessor<UnityEngine.AzureSky.AzureSkyController>.Create(typeof(Weather), "azureSky"));

		public static UnityEngine.AzureSky.AzureSkyController GetAzureSky() => _azureSky.Value.GetValue();
		public static void SetAzureSky(UnityEngine.AzureSky.AzureSkyController value) => _azureSky.Value.SetValue(value);

	}

	public static class PrivateAccessor_WeatherManager
	{

		private static readonly System.Lazy<FieldAccessor<WeatherManager, Weather>> _startingWeather =
				new System.Lazy<FieldAccessor<WeatherManager, Weather>>(() => FieldAccessor<WeatherManager, Weather>.Create("startingWeather"));
		private static readonly System.Lazy<FieldAccessor<WeatherManager, System.Collections.Generic.List<WeatherPool>>> _weatherPools =
				new System.Lazy<FieldAccessor<WeatherManager, System.Collections.Generic.List<WeatherPool>>>(() => FieldAccessor<WeatherManager, System.Collections.Generic.List<WeatherPool>>.Create("weatherPools"));
		private static readonly System.Lazy<FieldAccessor<WeatherManager, Weather>> _currentWeather =
				new System.Lazy<FieldAccessor<WeatherManager, Weather>>(() => FieldAccessor<WeatherManager, Weather>.Create("currentWeather"));
		private static readonly System.Lazy<FieldAccessor<WeatherManager, bool>> _changingWeather =
				new System.Lazy<FieldAccessor<WeatherManager, bool>>(() => FieldAccessor<WeatherManager, bool>.Create("changingWeather"));
		private static readonly System.Lazy<FieldAccessor<WeatherManager, float>> _nextWeatherTimer =
				new System.Lazy<FieldAccessor<WeatherManager, float>>(() => FieldAccessor<WeatherManager, float>.Create("nextWeatherTimer"));
		private static readonly System.Lazy<FieldAccessor<WeatherManager, WeatherPoolType>> _currentPoolType =
				new System.Lazy<FieldAccessor<WeatherManager, WeatherPoolType>>(() => FieldAccessor<WeatherManager, WeatherPoolType>.Create("currentPoolType"));
		private static readonly System.Lazy<FieldAccessor<WeatherManager, Raft_Network>> _network =
				new System.Lazy<FieldAccessor<WeatherManager, Raft_Network>>(() => FieldAccessor<WeatherManager, Raft_Network>.Create("network"));
		private static readonly System.Lazy<FieldAccessor<WeatherManager, Network_Host>> _hostNetwork =
				new System.Lazy<FieldAccessor<WeatherManager, Network_Host>>(() => FieldAccessor<WeatherManager, Network_Host>.Create("hostNetwork"));
		private static readonly System.Lazy<FieldAccessor<WeatherManager, SO_GameModeValue>> _currentGameMode =
				new System.Lazy<FieldAccessor<WeatherManager, SO_GameModeValue>>(() => FieldAccessor<WeatherManager, SO_GameModeValue>.Create("currentGameMode"));
		private static readonly System.Lazy<FieldAccessor<WeatherManager, UnityEngine.Coroutine>> _weatherLoopRoutine =
				new System.Lazy<FieldAccessor<WeatherManager, UnityEngine.Coroutine>>(() => FieldAccessor<WeatherManager, UnityEngine.Coroutine>.Create("weatherLoopRoutine"));
		private static readonly System.Lazy<FieldAccessor<WeatherManager, UnityEngine.Coroutine>> _currentWeatherStartRoutine =
				new System.Lazy<FieldAccessor<WeatherManager, UnityEngine.Coroutine>>(() => FieldAccessor<WeatherManager, UnityEngine.Coroutine>.Create("currentWeatherStartRoutine"));

		public static Weather GetStartingWeather(this WeatherManager __self) => _startingWeather.Value.GetValue(__self);
		public static void SetStartingWeather(this WeatherManager __self, Weather value) => _startingWeather.Value.SetValue(__self, value);
		public static System.Collections.Generic.List<WeatherPool> GetWeatherPools(this WeatherManager __self) => _weatherPools.Value.GetValue(__self);
		public static void SetWeatherPools(this WeatherManager __self, System.Collections.Generic.List<WeatherPool> value) => _weatherPools.Value.SetValue(__self, value);
		public static Weather GetCurrentWeather(this WeatherManager __self) => _currentWeather.Value.GetValue(__self);
		public static void SetCurrentWeather(this WeatherManager __self, Weather value) => _currentWeather.Value.SetValue(__self, value);
		public static bool GetChangingWeather(this WeatherManager __self) => _changingWeather.Value.GetValue(__self);
		public static void SetChangingWeather(this WeatherManager __self, bool value) => _changingWeather.Value.SetValue(__self, value);
		public static float GetNextWeatherTimer(this WeatherManager __self) => _nextWeatherTimer.Value.GetValue(__self);
		public static void SetNextWeatherTimer(this WeatherManager __self, float value) => _nextWeatherTimer.Value.SetValue(__self, value);
		public static WeatherPoolType GetCurrentPoolType(this WeatherManager __self) => _currentPoolType.Value.GetValue(__self);
		public static void SetCurrentPoolType(this WeatherManager __self, WeatherPoolType value) => _currentPoolType.Value.SetValue(__self, value);
		public static Raft_Network GetNetwork(this WeatherManager __self) => _network.Value.GetValue(__self);
		public static void SetNetwork(this WeatherManager __self, Raft_Network value) => _network.Value.SetValue(__self, value);
		public static Network_Host GetHostNetwork(this WeatherManager __self) => _hostNetwork.Value.GetValue(__self);
		public static void SetHostNetwork(this WeatherManager __self, Network_Host value) => _hostNetwork.Value.SetValue(__self, value);
		public static SO_GameModeValue GetCurrentGameMode(this WeatherManager __self) => _currentGameMode.Value.GetValue(__self);
		public static void SetCurrentGameMode(this WeatherManager __self, SO_GameModeValue value) => _currentGameMode.Value.SetValue(__self, value);
		public static UnityEngine.Coroutine GetWeatherLoopRoutine(this WeatherManager __self) => _weatherLoopRoutine.Value.GetValue(__self);
		public static void SetWeatherLoopRoutine(this WeatherManager __self, UnityEngine.Coroutine value) => _weatherLoopRoutine.Value.SetValue(__self, value);
		public static UnityEngine.Coroutine GetCurrentWeatherStartRoutine(this WeatherManager __self) => _currentWeatherStartRoutine.Value.GetValue(__self);
		public static void SetCurrentWeatherStartRoutine(this WeatherManager __self, UnityEngine.Coroutine value) => _currentWeatherStartRoutine.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<WeatherManager>> _Awake757602046 =
				new System.Lazy<MethodAccessor<WeatherManager>>(() => MethodAccessor<WeatherManager>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<WeatherManager>> _Start757602046 =
				new System.Lazy<MethodAccessor<WeatherManager>>(() => MethodAccessor<WeatherManager>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<WeatherManager>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<WeatherManager>>(() => MethodAccessor<WeatherManager>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<WeatherManager>> _Update757602046 =
				new System.Lazy<MethodAccessor<WeatherManager>>(() => MethodAccessor<WeatherManager>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<WeatherManager>> _Button_RandomWeather757602046 =
				new System.Lazy<MethodAccessor<WeatherManager>>(() => MethodAccessor<WeatherManager>.Create("Button_RandomWeather"));
		private static readonly System.Lazy<MethodAccessor<WeatherManager>> _OnRegionChanged757602046 =
				new System.Lazy<MethodAccessor<WeatherManager>>(() => MethodAccessor<WeatherManager>.Create("OnRegionChanged"));
		private static readonly System.Lazy<MethodAccessor<WeatherManager>> _ActivateRandomWeather3482740415 =
				new System.Lazy<MethodAccessor<WeatherManager>>(() => MethodAccessor<WeatherManager>.Create("ActivateRandomWeather", typeof(WeatherPoolType)));
		private static readonly System.Lazy<MethodAccessor<WeatherManager>> _StartWeatherCoroutine3413266654 =
				new System.Lazy<MethodAccessor<WeatherManager>>(() => MethodAccessor<WeatherManager>.Create("StartWeatherCoroutine", typeof(Weather), typeof(bool)));
		private static readonly System.Lazy<MethodAccessor<WeatherManager>> _GetRandomWeather3456682967 =
				new System.Lazy<MethodAccessor<WeatherManager>>(() => MethodAccessor<WeatherManager>.Create("GetRandomWeather", typeof(WeatherPoolType), typeof(bool)));
		private static readonly System.Lazy<MethodAccessor<WeatherManager>> _GetPoolFromType3482740415 =
				new System.Lazy<MethodAccessor<WeatherManager>>(() => MethodAccessor<WeatherManager>.Create("GetPoolFromType", typeof(WeatherPoolType)));
		private static readonly System.Lazy<MethodAccessor<WeatherManager>> _StopCurrentWeatherRoutine757602046 =
				new System.Lazy<MethodAccessor<WeatherManager>>(() => MethodAccessor<WeatherManager>.Create("StopCurrentWeatherRoutine"));
		private static readonly System.Lazy<MethodAccessor<WeatherManager>> _ChangePoolType3482740415 =
				new System.Lazy<MethodAccessor<WeatherManager>>(() => MethodAccessor<WeatherManager>.Create("ChangePoolType", typeof(WeatherPoolType)));

		public static void Awake(this WeatherManager __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this WeatherManager __self) => _Start757602046.Value.Invoke(__self);
		public static void OnDestroy(this WeatherManager __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void Update(this WeatherManager __self) => _Update757602046.Value.Invoke(__self);
		public static void Button_RandomWeather(this WeatherManager __self) => _Button_RandomWeather757602046.Value.Invoke(__self);
		public static void OnRegionChanged(this WeatherManager __self) => _OnRegionChanged757602046.Value.Invoke(__self);
		public static void ActivateRandomWeather(this WeatherManager __self, WeatherPoolType newType) => _ActivateRandomWeather3482740415.Value.Invoke(__self, newType);
		public static System.Collections.IEnumerator StartWeatherCoroutine(this WeatherManager __self, Weather newWeather, bool instant) => (System.Collections.IEnumerator)_StartWeatherCoroutine3413266654.Value.Invoke(__self, newWeather, instant);
		public static Weather GetRandomWeather(this WeatherManager __self, WeatherPoolType poolType, bool excludeCurrentWeather) => (Weather)_GetRandomWeather3456682967.Value.Invoke(__self, poolType, excludeCurrentWeather);
		public static WeatherPool GetPoolFromType(this WeatherManager __self, WeatherPoolType type) => (WeatherPool)_GetPoolFromType3482740415.Value.Invoke(__self, type);
		public static void StopCurrentWeatherRoutine(this WeatherManager __self) => _StopCurrentWeatherRoutine757602046.Value.Invoke(__self);
		public static void ChangePoolType(this WeatherManager __self, WeatherPoolType newType) => _ChangePoolType3482740415.Value.Invoke(__self, newType);

	}

	public static class PrivateAccessor_Weather_Particle
	{

		private static readonly System.Lazy<FieldAccessor<Weather_Particle, UnityEngine.Vector3>> _localOffsetFromPlayer =
				new System.Lazy<FieldAccessor<Weather_Particle, UnityEngine.Vector3>>(() => FieldAccessor<Weather_Particle, UnityEngine.Vector3>.Create("localOffsetFromPlayer"));
		private static readonly System.Lazy<FieldAccessor<Weather_Particle, ParticleController>> _particleController =
				new System.Lazy<FieldAccessor<Weather_Particle, ParticleController>>(() => FieldAccessor<Weather_Particle, ParticleController>.Create("particleController"));
		private static readonly System.Lazy<FieldAccessor<Weather_Particle, ActivateUnderWater>> _activeUnderWaterScript =
				new System.Lazy<FieldAccessor<Weather_Particle, ActivateUnderWater>>(() => FieldAccessor<Weather_Particle, ActivateUnderWater>.Create("activeUnderWaterScript"));
		private static readonly System.Lazy<FieldAccessor<Weather_Particle, FMODUnity.StudioEventEmitter>> _eventEmitter =
				new System.Lazy<FieldAccessor<Weather_Particle, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<Weather_Particle, FMODUnity.StudioEventEmitter>.Create("eventEmitter"));
		private static readonly System.Lazy<FieldAccessor<Weather_Particle, Network_Player>> _localPlayer =
				new System.Lazy<FieldAccessor<Weather_Particle, Network_Player>>(() => FieldAccessor<Weather_Particle, Network_Player>.Create("localPlayer"));
		private static readonly System.Lazy<FieldAccessor<Weather_Particle, bool>> _isActive =
				new System.Lazy<FieldAccessor<Weather_Particle, bool>>(() => FieldAccessor<Weather_Particle, bool>.Create("isActive"));

		public static UnityEngine.Vector3 GetLocalOffsetFromPlayer(this Weather_Particle __self) => _localOffsetFromPlayer.Value.GetValue(__self);
		public static void SetLocalOffsetFromPlayer(this Weather_Particle __self, UnityEngine.Vector3 value) => _localOffsetFromPlayer.Value.SetValue(__self, value);
		public static ParticleController GetParticleController(this Weather_Particle __self) => _particleController.Value.GetValue(__self);
		public static void SetParticleController(this Weather_Particle __self, ParticleController value) => _particleController.Value.SetValue(__self, value);
		public static ActivateUnderWater GetActiveUnderWaterScript(this Weather_Particle __self) => _activeUnderWaterScript.Value.GetValue(__self);
		public static void SetActiveUnderWaterScript(this Weather_Particle __self, ActivateUnderWater value) => _activeUnderWaterScript.Value.SetValue(__self, value);
		public static FMODUnity.StudioEventEmitter GetEventEmitter(this Weather_Particle __self) => _eventEmitter.Value.GetValue(__self);
		public static void SetEventEmitter(this Weather_Particle __self, FMODUnity.StudioEventEmitter value) => _eventEmitter.Value.SetValue(__self, value);
		public static Network_Player GetLocalPlayer(this Weather_Particle __self) => _localPlayer.Value.GetValue(__self);
		public static void SetLocalPlayer(this Weather_Particle __self, Network_Player value) => _localPlayer.Value.SetValue(__self, value);
		public static bool GetIsActive(this Weather_Particle __self) => _isActive.Value.GetValue(__self);
		public static void SetIsActive(this Weather_Particle __self, bool value) => _isActive.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Weather_Particle>> _Awake757602046 =
				new System.Lazy<MethodAccessor<Weather_Particle>>(() => MethodAccessor<Weather_Particle>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<Weather_Particle>> _Start757602046 =
				new System.Lazy<MethodAccessor<Weather_Particle>>(() => MethodAccessor<Weather_Particle>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<Weather_Particle>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<Weather_Particle>>(() => MethodAccessor<Weather_Particle>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<Weather_Particle>> _Update757602046 =
				new System.Lazy<MethodAccessor<Weather_Particle>>(() => MethodAccessor<Weather_Particle>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<Weather_Particle>> _OnRegionChanged757602046 =
				new System.Lazy<MethodAccessor<Weather_Particle>>(() => MethodAccessor<Weather_Particle>.Create("OnRegionChanged"));
		private static readonly System.Lazy<MethodAccessor<Weather_Particle>> _HideParticles757602046 =
				new System.Lazy<MethodAccessor<Weather_Particle>>(() => MethodAccessor<Weather_Particle>.Create("HideParticles"));

		public static void Awake(this Weather_Particle __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this Weather_Particle __self) => _Start757602046.Value.Invoke(__self);
		public static void OnDestroy(this Weather_Particle __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void Update(this Weather_Particle __self) => _Update757602046.Value.Invoke(__self);
		public static void OnRegionChanged(this Weather_Particle __self) => _OnRegionChanged757602046.Value.Invoke(__self);
		public static void HideParticles(this Weather_Particle __self) => _HideParticles757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_CaptureAnimal
	{

		private static readonly System.Lazy<FieldAccessor<CaptureAnimal, bool>> __isCapturable =
				new System.Lazy<FieldAccessor<CaptureAnimal, bool>>(() => FieldAccessor<CaptureAnimal, bool>.Create("_isCapturable"));
		private static readonly System.Lazy<FieldAccessor<CaptureAnimal, bool>> __isCaptured =
				new System.Lazy<FieldAccessor<CaptureAnimal, bool>>(() => FieldAccessor<CaptureAnimal, bool>.Create("_isCaptured"));

		public static bool Get_isCapturable(this CaptureAnimal __self) => __isCapturable.Value.GetValue(__self);
		public static void Set_isCapturable(this CaptureAnimal __self, bool value) => __isCapturable.Value.SetValue(__self, value);
		public static bool Get_isCaptured(this CaptureAnimal __self) => __isCaptured.Value.GetValue(__self);
		public static void Set_isCaptured(this CaptureAnimal __self, bool value) => __isCaptured.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_Domestic_Carry
	{

		private static readonly System.Lazy<MethodAccessor<Domestic_Carry>> _HandleBeingCarried757602046 =
				new System.Lazy<MethodAccessor<Domestic_Carry>>(() => MethodAccessor<Domestic_Carry>.Create("HandleBeingCarried"));
		private static readonly System.Lazy<MethodAccessor<Domestic_Carry>> _HandleCarryInput757602046 =
				new System.Lazy<MethodAccessor<Domestic_Carry>>(() => MethodAccessor<Domestic_Carry>.Create("HandleCarryInput"));

		public static void HandleBeingCarried(this Domestic_Carry __self) => _HandleBeingCarried757602046.Value.Invoke(__self);
		public static void HandleCarryInput(this Domestic_Carry __self) => _HandleCarryInput757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Network_Entity
	{

		private static readonly System.Lazy<FieldAccessor<Network_Entity, Raft_Network>> _network =
				new System.Lazy<FieldAccessor<Network_Entity, Raft_Network>>(() => FieldAccessor<Network_Entity, Raft_Network>.Create("network"));
		private static readonly System.Lazy<FieldAccessor<Network_Entity, UnityEngine.MaterialPropertyBlock>> _materialPropertyBlock =
				new System.Lazy<FieldAccessor<Network_Entity, UnityEngine.MaterialPropertyBlock>>(() => FieldAccessor<Network_Entity, UnityEngine.MaterialPropertyBlock>.Create("materialPropertyBlock"));

		public static Raft_Network GetNetwork(this Network_Entity __self) => _network.Value.GetValue(__self);
		public static void SetNetwork(this Network_Entity __self, Raft_Network value) => _network.Value.SetValue(__self, value);
		public static UnityEngine.MaterialPropertyBlock GetMaterialPropertyBlock(this Network_Entity __self) => _materialPropertyBlock.Value.GetValue(__self);
		public static void SetMaterialPropertyBlock(this Network_Entity __self, UnityEngine.MaterialPropertyBlock value) => _materialPropertyBlock.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Network_Entity>> _Awake757602046 =
				new System.Lazy<MethodAccessor<Network_Entity>>(() => MethodAccessor<Network_Entity>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<Network_Entity>> _Start757602046 =
				new System.Lazy<MethodAccessor<Network_Entity>>(() => MethodAccessor<Network_Entity>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<Network_Entity>> _Update757602046 =
				new System.Lazy<MethodAccessor<Network_Entity>>(() => MethodAccessor<Network_Entity>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<Network_Entity>> _ShouldClearBuffs757602046 =
				new System.Lazy<MethodAccessor<Network_Entity>>(() => MethodAccessor<Network_Entity>.Create("ShouldClearBuffs"));

		public static void Awake(this Network_Entity __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this Network_Entity __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this Network_Entity __self) => _Update757602046.Value.Invoke(__self);
		public static bool ShouldClearBuffs(this Network_Entity __self) => (bool)_ShouldClearBuffs757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_PlaceableAnimalEntity
	{

		private static readonly System.Lazy<FieldAccessor<PlaceableAnimalEntity, bool>> _isPlaced =
				new System.Lazy<FieldAccessor<PlaceableAnimalEntity, bool>>(() => FieldAccessor<PlaceableAnimalEntity, bool>.Create("isPlaced"));

		public static bool GetIsPlaced(this PlaceableAnimalEntity __self) => _isPlaced.Value.GetValue(__self);
		public static void SetIsPlaced(this PlaceableAnimalEntity __self, bool value) => _isPlaced.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<PlaceableAnimalEntity>> _Start757602046 =
				new System.Lazy<MethodAccessor<PlaceableAnimalEntity>>(() => MethodAccessor<PlaceableAnimalEntity>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<PlaceableAnimalEntity>> _RemoveBlock3486905475 =
				new System.Lazy<MethodAccessor<PlaceableAnimalEntity>>(() => MethodAccessor<PlaceableAnimalEntity>.Create("RemoveBlock", typeof(float)));

		public static void Start(this PlaceableAnimalEntity __self) => _Start757602046.Value.Invoke(__self);
		public static System.Collections.IEnumerator RemoveBlock(this PlaceableAnimalEntity __self, float delay) => (System.Collections.IEnumerator)_RemoveBlock3486905475.Value.Invoke(__self, delay);

	}

	public static class Private_PlaceableAnimalEntity
	{

		private static readonly System.Lazy<StaticFieldAccessor<Network_Host_Entities>> _networkHostEntities =
				new System.Lazy<StaticFieldAccessor<Network_Host_Entities>>(() => StaticFieldAccessor<Network_Host_Entities>.Create(typeof(PlaceableAnimalEntity), "networkHostEntities"));

		public static Network_Host_Entities GetNetworkHostEntities() => _networkHostEntities.Value.GetValue();
		public static void SetNetworkHostEntities(Network_Host_Entities value) => _networkHostEntities.Value.SetValue(value);

	}

	public static class PrivateAccessor_Randomizer
	{

		private static readonly System.Lazy<FieldAccessor<Randomizer, UnityEngine.Object>> _componentType =
				new System.Lazy<FieldAccessor<Randomizer, UnityEngine.Object>>(() => FieldAccessor<Randomizer, UnityEngine.Object>.Create("componentType"));
		private static readonly System.Lazy<FieldAccessor<Randomizer, float>> _totalWeight =
				new System.Lazy<FieldAccessor<Randomizer, float>>(() => FieldAccessor<Randomizer, float>.Create("totalWeight"));

		public static UnityEngine.Object GetComponentType(this Randomizer __self) => _componentType.Value.GetValue(__self);
		public static void SetComponentType(this Randomizer __self, UnityEngine.Object value) => _componentType.Value.SetValue(__self, value);
		public static float GetTotalWeight(this Randomizer __self) => _totalWeight.Value.GetValue(__self);
		public static void SetTotalWeight(this Randomizer __self, float value) => _totalWeight.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Randomizer>> _InspectorGUI757602046 =
				new System.Lazy<MethodAccessor<Randomizer>>(() => MethodAccessor<Randomizer>.Create("InspectorGUI"));

		public static void InspectorGUI(this Randomizer __self) => _InspectorGUI757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_RareMaterial
	{

		private static readonly System.Lazy<FieldAccessor<RareMaterial, RendererMaterialConnection[]>> _materialConnections =
				new System.Lazy<FieldAccessor<RareMaterial, RendererMaterialConnection[]>>(() => FieldAccessor<RareMaterial, RendererMaterialConnection[]>.Create("materialConnections"));

		public static RendererMaterialConnection[] GetMaterialConnections(this RareMaterial __self) => _materialConnections.Value.GetValue(__self);
		public static void SetMaterialConnections(this RareMaterial __self, RendererMaterialConnection[] value) => _materialConnections.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<RareMaterial>> _Awake757602046 =
				new System.Lazy<MethodAccessor<RareMaterial>>(() => MethodAccessor<RareMaterial>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<RareMaterial>> _SaveOriginalMaterial757602046 =
				new System.Lazy<MethodAccessor<RareMaterial>>(() => MethodAccessor<RareMaterial>.Create("SaveOriginalMaterial"));

		public static void Awake(this RareMaterial __self) => _Awake757602046.Value.Invoke(__self);
		public static void SaveOriginalMaterial(this RareMaterial __self) => _SaveOriginalMaterial757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Seagull
	{

		private static readonly System.Lazy<FieldAccessor<Seagull, float>> _turnSpeed =
				new System.Lazy<FieldAccessor<Seagull, float>>(() => FieldAccessor<Seagull, float>.Create("turnSpeed"));
		private static readonly System.Lazy<FieldAccessor<Seagull, float>> _flightSpeed =
				new System.Lazy<FieldAccessor<Seagull, float>>(() => FieldAccessor<Seagull, float>.Create("flightSpeed"));
		private static readonly System.Lazy<FieldAccessor<Seagull, float>> _diveSpeed =
				new System.Lazy<FieldAccessor<Seagull, float>>(() => FieldAccessor<Seagull, float>.Create("diveSpeed"));
		private static readonly System.Lazy<FieldAccessor<Seagull, float>> _stopDiveDistance =
				new System.Lazy<FieldAccessor<Seagull, float>>(() => FieldAccessor<Seagull, float>.Create("stopDiveDistance"));
		private static readonly System.Lazy<FieldAccessor<Seagull, float>> _reachPointDistance =
				new System.Lazy<FieldAccessor<Seagull, float>>(() => FieldAccessor<Seagull, float>.Create("reachPointDistance"));
		private static readonly System.Lazy<FieldAccessor<Seagull, float>> _searchPlayerRadius =
				new System.Lazy<FieldAccessor<Seagull, float>>(() => FieldAccessor<Seagull, float>.Create("searchPlayerRadius"));
		private static readonly System.Lazy<FieldAccessor<Seagull, TimerEventer>> _searchPlayerTimer =
				new System.Lazy<FieldAccessor<Seagull, TimerEventer>>(() => FieldAccessor<Seagull, TimerEventer>.Create("searchPlayerTimer"));
		private static readonly System.Lazy<FieldAccessor<Seagull, float>> _searchScarecrowRadius =
				new System.Lazy<FieldAccessor<Seagull, float>>(() => FieldAccessor<Seagull, float>.Create("searchScarecrowRadius"));
		private static readonly System.Lazy<FieldAccessor<Seagull, float>> _raycastRadius =
				new System.Lazy<FieldAccessor<Seagull, float>>(() => FieldAccessor<Seagull, float>.Create("raycastRadius"));
		private static readonly System.Lazy<FieldAccessor<Seagull, float>> _broodTime =
				new System.Lazy<FieldAccessor<Seagull, float>>(() => FieldAccessor<Seagull, float>.Create("broodTime"));
		private static readonly System.Lazy<FieldAccessor<Seagull, float>> _removeDeadTime =
				new System.Lazy<FieldAccessor<Seagull, float>>(() => FieldAccessor<Seagull, float>.Create("removeDeadTime"));
		private static readonly System.Lazy<FieldAccessor<Seagull, Interval_Float>> _flyAwayTimeInterval =
				new System.Lazy<FieldAccessor<Seagull, Interval_Float>>(() => FieldAccessor<Seagull, Interval_Float>.Create("flyAwayTimeInterval"));
		private static readonly System.Lazy<FieldAccessor<Seagull, float>> _timeUntilEatCrop =
				new System.Lazy<FieldAccessor<Seagull, float>>(() => FieldAccessor<Seagull, float>.Create("timeUntilEatCrop"));
		private static readonly System.Lazy<FieldAccessor<Seagull, float>> _searchCropInterval =
				new System.Lazy<FieldAccessor<Seagull, float>>(() => FieldAccessor<Seagull, float>.Create("searchCropInterval"));
		private static readonly System.Lazy<FieldAccessor<Seagull, UnityEngine.LayerMask>> _itemSearchMask =
				new System.Lazy<FieldAccessor<Seagull, UnityEngine.LayerMask>>(() => FieldAccessor<Seagull, UnityEngine.LayerMask>.Create("itemSearchMask"));
		private static readonly System.Lazy<FieldAccessor<Seagull, UnityEngine.LayerMask>> _playerSearchMask =
				new System.Lazy<FieldAccessor<Seagull, UnityEngine.LayerMask>>(() => FieldAccessor<Seagull, UnityEngine.LayerMask>.Create("playerSearchMask"));
		private static readonly System.Lazy<FieldAccessor<Seagull, UnityEngine.LayerMask>> _hookSearchMask =
				new System.Lazy<FieldAccessor<Seagull, UnityEngine.LayerMask>>(() => FieldAccessor<Seagull, UnityEngine.LayerMask>.Create("hookSearchMask"));
		private static readonly System.Lazy<FieldAccessor<Seagull, bool>> _dropEggInNest =
				new System.Lazy<FieldAccessor<Seagull, bool>>(() => FieldAccessor<Seagull, bool>.Create("dropEggInNest"));
		private static readonly System.Lazy<FieldAccessor<Seagull, UnityEngine.Rigidbody>> _rigidBody =
				new System.Lazy<FieldAccessor<Seagull, UnityEngine.Rigidbody>>(() => FieldAccessor<Seagull, UnityEngine.Rigidbody>.Create("rigidBody"));
		private static readonly System.Lazy<FieldAccessor<Seagull, UnityEngine.Collider[]>> _deadColliders =
				new System.Lazy<FieldAccessor<Seagull, UnityEngine.Collider[]>>(() => FieldAccessor<Seagull, UnityEngine.Collider[]>.Create("deadColliders"));
		private static readonly System.Lazy<FieldAccessor<Seagull, float>> _currentSpeed =
				new System.Lazy<FieldAccessor<Seagull, float>>(() => FieldAccessor<Seagull, float>.Create("currentSpeed"));
		private static readonly System.Lazy<FieldAccessor<Seagull, bool>> _reachedAltitude =
				new System.Lazy<FieldAccessor<Seagull, bool>>(() => FieldAccessor<Seagull, bool>.Create("reachedAltitude"));
		private static readonly System.Lazy<FieldAccessor<Seagull, float>> _animFlySpeed =
				new System.Lazy<FieldAccessor<Seagull, float>>(() => FieldAccessor<Seagull, float>.Create("animFlySpeed"));
		private static readonly System.Lazy<FieldAccessor<Seagull, float>> _animFlySpeedTarget =
				new System.Lazy<FieldAccessor<Seagull, float>>(() => FieldAccessor<Seagull, float>.Create("animFlySpeedTarget"));
		private static readonly System.Lazy<FieldAccessor<Seagull, float>> _flyAwayTimer =
				new System.Lazy<FieldAccessor<Seagull, float>>(() => FieldAccessor<Seagull, float>.Create("flyAwayTimer"));
		private static readonly System.Lazy<FieldAccessor<Seagull, float>> _flyAwayTime =
				new System.Lazy<FieldAccessor<Seagull, float>>(() => FieldAccessor<Seagull, float>.Create("flyAwayTime"));
		private static readonly System.Lazy<FieldAccessor<Seagull, bool>> _sitting =
				new System.Lazy<FieldAccessor<Seagull, bool>>(() => FieldAccessor<Seagull, bool>.Create("sitting"));
		private static readonly System.Lazy<FieldAccessor<Seagull, UnityEngine.Vector3>> _flyAwayPoint =
				new System.Lazy<FieldAccessor<Seagull, UnityEngine.Vector3>>(() => FieldAccessor<Seagull, UnityEngine.Vector3>.Create("flyAwayPoint"));
		private static readonly System.Lazy<FieldAccessor<Seagull, UnityEngine.Transform>> _pointToFollow =
				new System.Lazy<FieldAccessor<Seagull, UnityEngine.Transform>>(() => FieldAccessor<Seagull, UnityEngine.Transform>.Create("pointToFollow"));
		private static readonly System.Lazy<FieldAccessor<Seagull, UnityEngine.Transform>> _raftFollowParent =
				new System.Lazy<FieldAccessor<Seagull, UnityEngine.Transform>>(() => FieldAccessor<Seagull, UnityEngine.Transform>.Create("raftFollowParent"));
		private static readonly System.Lazy<FieldAccessor<Seagull, UnityEngine.Transform>> _lockedPivotTransform =
				new System.Lazy<FieldAccessor<Seagull, UnityEngine.Transform>>(() => FieldAccessor<Seagull, UnityEngine.Transform>.Create("lockedPivotTransform"));
		private static readonly System.Lazy<FieldAccessor<Seagull, Raft_Network>> _network =
				new System.Lazy<FieldAccessor<Seagull, Raft_Network>>(() => FieldAccessor<Seagull, Raft_Network>.Create("network"));
		private static readonly System.Lazy<FieldAccessor<Seagull, PlantManager>> _localPlantManager =
				new System.Lazy<FieldAccessor<Seagull, PlantManager>>(() => FieldAccessor<Seagull, PlantManager>.Create("localPlantManager"));
		private static readonly System.Lazy<FieldAccessor<Seagull, Network_Host_Entities>> _host_Entities =
				new System.Lazy<FieldAccessor<Seagull, Network_Host_Entities>>(() => FieldAccessor<Seagull, Network_Host_Entities>.Create("host_Entities"));
		private static readonly System.Lazy<FieldAccessor<Seagull, TimerEventer>> _findNestTimer =
				new System.Lazy<FieldAccessor<Seagull, TimerEventer>>(() => FieldAccessor<Seagull, TimerEventer>.Create("findNestTimer"));
		private static readonly System.Lazy<FieldAccessor<Seagull, FMODUnity.StudioEventEmitter>> _eventEmitter_Damaged =
				new System.Lazy<FieldAccessor<Seagull, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<Seagull, FMODUnity.StudioEventEmitter>.Create("eventEmitter_Damaged"));
		private static readonly System.Lazy<FieldAccessor<Seagull, FMODUnity.StudioEventEmitter>> _eventEmitter_Wingflap =
				new System.Lazy<FieldAccessor<Seagull, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<Seagull, FMODUnity.StudioEventEmitter>.Create("eventEmitter_Wingflap"));
		private static readonly System.Lazy<FieldAccessor<Seagull, FMODUnity.StudioEventEmitter>> _eventEmitter_Peck =
				new System.Lazy<FieldAccessor<Seagull, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<Seagull, FMODUnity.StudioEventEmitter>.Create("eventEmitter_Peck"));
		private static readonly System.Lazy<FieldAccessor<Seagull, FMODUnity.StudioEventEmitter>> _eventEmitter_Scream =
				new System.Lazy<FieldAccessor<Seagull, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<Seagull, FMODUnity.StudioEventEmitter>.Create("eventEmitter_Scream"));
		private static readonly System.Lazy<FieldAccessor<Seagull, Interval_Float>> _screamInterval =
				new System.Lazy<FieldAccessor<Seagull, Interval_Float>>(() => FieldAccessor<Seagull, Interval_Float>.Create("screamInterval"));
		private static readonly System.Lazy<FieldAccessor<Seagull, float>> _netPosLerpSpeed =
				new System.Lazy<FieldAccessor<Seagull, float>>(() => FieldAccessor<Seagull, float>.Create("netPosLerpSpeed"));
		private static readonly System.Lazy<FieldAccessor<Seagull, float>> _netRotLerpSpeed =
				new System.Lazy<FieldAccessor<Seagull, float>>(() => FieldAccessor<Seagull, float>.Create("netRotLerpSpeed"));
		private static readonly System.Lazy<FieldAccessor<Seagull, UnityEngine.Vector3>> _networkPosition =
				new System.Lazy<FieldAccessor<Seagull, UnityEngine.Vector3>>(() => FieldAccessor<Seagull, UnityEngine.Vector3>.Create("networkPosition"));
		private static readonly System.Lazy<FieldAccessor<Seagull, UnityEngine.Vector3>> _networkForwardDirection =
				new System.Lazy<FieldAccessor<Seagull, UnityEngine.Vector3>>(() => FieldAccessor<Seagull, UnityEngine.Vector3>.Create("networkForwardDirection"));

		public static float GetTurnSpeed(this Seagull __self) => _turnSpeed.Value.GetValue(__self);
		public static void SetTurnSpeed(this Seagull __self, float value) => _turnSpeed.Value.SetValue(__self, value);
		public static float GetFlightSpeed(this Seagull __self) => _flightSpeed.Value.GetValue(__self);
		public static void SetFlightSpeed(this Seagull __self, float value) => _flightSpeed.Value.SetValue(__self, value);
		public static float GetDiveSpeed(this Seagull __self) => _diveSpeed.Value.GetValue(__self);
		public static void SetDiveSpeed(this Seagull __self, float value) => _diveSpeed.Value.SetValue(__self, value);
		public static float GetStopDiveDistance(this Seagull __self) => _stopDiveDistance.Value.GetValue(__self);
		public static void SetStopDiveDistance(this Seagull __self, float value) => _stopDiveDistance.Value.SetValue(__self, value);
		public static float GetReachPointDistance(this Seagull __self) => _reachPointDistance.Value.GetValue(__self);
		public static void SetReachPointDistance(this Seagull __self, float value) => _reachPointDistance.Value.SetValue(__self, value);
		public static float GetSearchPlayerRadius(this Seagull __self) => _searchPlayerRadius.Value.GetValue(__self);
		public static void SetSearchPlayerRadius(this Seagull __self, float value) => _searchPlayerRadius.Value.SetValue(__self, value);
		public static TimerEventer GetSearchPlayerTimer(this Seagull __self) => _searchPlayerTimer.Value.GetValue(__self);
		public static void SetSearchPlayerTimer(this Seagull __self, TimerEventer value) => _searchPlayerTimer.Value.SetValue(__self, value);
		public static float GetSearchScarecrowRadius(this Seagull __self) => _searchScarecrowRadius.Value.GetValue(__self);
		public static void SetSearchScarecrowRadius(this Seagull __self, float value) => _searchScarecrowRadius.Value.SetValue(__self, value);
		public static float GetRaycastRadius(this Seagull __self) => _raycastRadius.Value.GetValue(__self);
		public static void SetRaycastRadius(this Seagull __self, float value) => _raycastRadius.Value.SetValue(__self, value);
		public static float GetBroodTime(this Seagull __self) => _broodTime.Value.GetValue(__self);
		public static void SetBroodTime(this Seagull __self, float value) => _broodTime.Value.SetValue(__self, value);
		public static float GetRemoveDeadTime(this Seagull __self) => _removeDeadTime.Value.GetValue(__self);
		public static void SetRemoveDeadTime(this Seagull __self, float value) => _removeDeadTime.Value.SetValue(__self, value);
		public static Interval_Float GetFlyAwayTimeInterval(this Seagull __self) => _flyAwayTimeInterval.Value.GetValue(__self);
		public static void SetFlyAwayTimeInterval(this Seagull __self, Interval_Float value) => _flyAwayTimeInterval.Value.SetValue(__self, value);
		public static float GetTimeUntilEatCrop(this Seagull __self) => _timeUntilEatCrop.Value.GetValue(__self);
		public static void SetTimeUntilEatCrop(this Seagull __self, float value) => _timeUntilEatCrop.Value.SetValue(__self, value);
		public static float GetSearchCropInterval(this Seagull __self) => _searchCropInterval.Value.GetValue(__self);
		public static void SetSearchCropInterval(this Seagull __self, float value) => _searchCropInterval.Value.SetValue(__self, value);
		public static UnityEngine.LayerMask GetItemSearchMask(this Seagull __self) => _itemSearchMask.Value.GetValue(__self);
		public static void SetItemSearchMask(this Seagull __self, UnityEngine.LayerMask value) => _itemSearchMask.Value.SetValue(__self, value);
		public static UnityEngine.LayerMask GetPlayerSearchMask(this Seagull __self) => _playerSearchMask.Value.GetValue(__self);
		public static void SetPlayerSearchMask(this Seagull __self, UnityEngine.LayerMask value) => _playerSearchMask.Value.SetValue(__self, value);
		public static UnityEngine.LayerMask GetHookSearchMask(this Seagull __self) => _hookSearchMask.Value.GetValue(__self);
		public static void SetHookSearchMask(this Seagull __self, UnityEngine.LayerMask value) => _hookSearchMask.Value.SetValue(__self, value);
		public static bool GetDropEggInNest(this Seagull __self) => _dropEggInNest.Value.GetValue(__self);
		public static void SetDropEggInNest(this Seagull __self, bool value) => _dropEggInNest.Value.SetValue(__self, value);
		public static UnityEngine.Rigidbody GetRigidBody(this Seagull __self) => _rigidBody.Value.GetValue(__self);
		public static void SetRigidBody(this Seagull __self, UnityEngine.Rigidbody value) => _rigidBody.Value.SetValue(__self, value);
		public static UnityEngine.Collider[] GetDeadColliders(this Seagull __self) => _deadColliders.Value.GetValue(__self);
		public static void SetDeadColliders(this Seagull __self, UnityEngine.Collider[] value) => _deadColliders.Value.SetValue(__self, value);
		public static float GetCurrentSpeed(this Seagull __self) => _currentSpeed.Value.GetValue(__self);
		public static void SetCurrentSpeed(this Seagull __self, float value) => _currentSpeed.Value.SetValue(__self, value);
		public static bool GetReachedAltitude(this Seagull __self) => _reachedAltitude.Value.GetValue(__self);
		public static void SetReachedAltitude(this Seagull __self, bool value) => _reachedAltitude.Value.SetValue(__self, value);
		public static float GetAnimFlySpeed(this Seagull __self) => _animFlySpeed.Value.GetValue(__self);
		public static void SetAnimFlySpeed(this Seagull __self, float value) => _animFlySpeed.Value.SetValue(__self, value);
		public static float GetAnimFlySpeedTarget(this Seagull __self) => _animFlySpeedTarget.Value.GetValue(__self);
		public static void SetAnimFlySpeedTarget(this Seagull __self, float value) => _animFlySpeedTarget.Value.SetValue(__self, value);
		public static float GetFlyAwayTimer(this Seagull __self) => _flyAwayTimer.Value.GetValue(__self);
		public static void SetFlyAwayTimer(this Seagull __self, float value) => _flyAwayTimer.Value.SetValue(__self, value);
		public static float GetFlyAwayTime(this Seagull __self) => _flyAwayTime.Value.GetValue(__self);
		public static void SetFlyAwayTime(this Seagull __self, float value) => _flyAwayTime.Value.SetValue(__self, value);
		public static bool GetSitting(this Seagull __self) => _sitting.Value.GetValue(__self);
		public static void SetSitting(this Seagull __self, bool value) => _sitting.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetFlyAwayPoint(this Seagull __self) => _flyAwayPoint.Value.GetValue(__self);
		public static void SetFlyAwayPoint(this Seagull __self, UnityEngine.Vector3 value) => _flyAwayPoint.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetPointToFollow(this Seagull __self) => _pointToFollow.Value.GetValue(__self);
		public static void SetPointToFollow(this Seagull __self, UnityEngine.Transform value) => _pointToFollow.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetRaftFollowParent(this Seagull __self) => _raftFollowParent.Value.GetValue(__self);
		public static void SetRaftFollowParent(this Seagull __self, UnityEngine.Transform value) => _raftFollowParent.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetLockedPivotTransform(this Seagull __self) => _lockedPivotTransform.Value.GetValue(__self);
		public static void SetLockedPivotTransform(this Seagull __self, UnityEngine.Transform value) => _lockedPivotTransform.Value.SetValue(__self, value);
		public static Raft_Network GetNetwork(this Seagull __self) => _network.Value.GetValue(__self);
		public static void SetNetwork(this Seagull __self, Raft_Network value) => _network.Value.SetValue(__self, value);
		public static PlantManager GetLocalPlantManager(this Seagull __self) => _localPlantManager.Value.GetValue(__self);
		public static void SetLocalPlantManager(this Seagull __self, PlantManager value) => _localPlantManager.Value.SetValue(__self, value);
		public static Network_Host_Entities GetHost_Entities(this Seagull __self) => _host_Entities.Value.GetValue(__self);
		public static void SetHost_Entities(this Seagull __self, Network_Host_Entities value) => _host_Entities.Value.SetValue(__self, value);
		public static TimerEventer GetFindNestTimer(this Seagull __self) => _findNestTimer.Value.GetValue(__self);
		public static void SetFindNestTimer(this Seagull __self, TimerEventer value) => _findNestTimer.Value.SetValue(__self, value);
		public static FMODUnity.StudioEventEmitter GetEventEmitter_Damaged(this Seagull __self) => _eventEmitter_Damaged.Value.GetValue(__self);
		public static void SetEventEmitter_Damaged(this Seagull __self, FMODUnity.StudioEventEmitter value) => _eventEmitter_Damaged.Value.SetValue(__self, value);
		public static FMODUnity.StudioEventEmitter GetEventEmitter_Wingflap(this Seagull __self) => _eventEmitter_Wingflap.Value.GetValue(__self);
		public static void SetEventEmitter_Wingflap(this Seagull __self, FMODUnity.StudioEventEmitter value) => _eventEmitter_Wingflap.Value.SetValue(__self, value);
		public static FMODUnity.StudioEventEmitter GetEventEmitter_Peck(this Seagull __self) => _eventEmitter_Peck.Value.GetValue(__self);
		public static void SetEventEmitter_Peck(this Seagull __self, FMODUnity.StudioEventEmitter value) => _eventEmitter_Peck.Value.SetValue(__self, value);
		public static FMODUnity.StudioEventEmitter GetEventEmitter_Scream(this Seagull __self) => _eventEmitter_Scream.Value.GetValue(__self);
		public static void SetEventEmitter_Scream(this Seagull __self, FMODUnity.StudioEventEmitter value) => _eventEmitter_Scream.Value.SetValue(__self, value);
		public static Interval_Float GetScreamInterval(this Seagull __self) => _screamInterval.Value.GetValue(__self);
		public static void SetScreamInterval(this Seagull __self, Interval_Float value) => _screamInterval.Value.SetValue(__self, value);
		public static float GetNetPosLerpSpeed(this Seagull __self) => _netPosLerpSpeed.Value.GetValue(__self);
		public static void SetNetPosLerpSpeed(this Seagull __self, float value) => _netPosLerpSpeed.Value.SetValue(__self, value);
		public static float GetNetRotLerpSpeed(this Seagull __self) => _netRotLerpSpeed.Value.GetValue(__self);
		public static void SetNetRotLerpSpeed(this Seagull __self, float value) => _netRotLerpSpeed.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetNetworkPosition(this Seagull __self) => _networkPosition.Value.GetValue(__self);
		public static void SetNetworkPosition(this Seagull __self, UnityEngine.Vector3 value) => _networkPosition.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetNetworkForwardDirection(this Seagull __self) => _networkForwardDirection.Value.GetValue(__self);
		public static void SetNetworkForwardDirection(this Seagull __self, UnityEngine.Vector3 value) => _networkForwardDirection.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Seagull>> _SearchInstant757602046 =
				new System.Lazy<MethodAccessor<Seagull>>(() => MethodAccessor<Seagull>.Create("SearchInstant"));
		private static readonly System.Lazy<MethodAccessor<Seagull>> _Awake757602046 =
				new System.Lazy<MethodAccessor<Seagull>>(() => MethodAccessor<Seagull>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<Seagull>> _Start757602046 =
				new System.Lazy<MethodAccessor<Seagull>>(() => MethodAccessor<Seagull>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<Seagull>> _LateStart757602046 =
				new System.Lazy<MethodAccessor<Seagull>>(() => MethodAccessor<Seagull>.Create("LateStart"));
		private static readonly System.Lazy<MethodAccessor<Seagull>> _Update757602046 =
				new System.Lazy<MethodAccessor<Seagull>>(() => MethodAccessor<Seagull>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<Seagull>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<Seagull>>(() => MethodAccessor<Seagull>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<Seagull>> _OnDrawGizmosSelected757602046 =
				new System.Lazy<MethodAccessor<Seagull>>(() => MethodAccessor<Seagull>.Create("OnDrawGizmosSelected"));
		private static readonly System.Lazy<MethodAccessor<Seagull>> _OnWorldShift3429126434 =
				new System.Lazy<MethodAccessor<Seagull>>(() => MethodAccessor<Seagull>.Create("OnWorldShift", typeof(UnityEngine.Vector3)));
		private static readonly System.Lazy<MethodAccessor<Seagull>> _Update_Hover757602046 =
				new System.Lazy<MethodAccessor<Seagull>>(() => MethodAccessor<Seagull>.Create("Update_Hover"));
		private static readonly System.Lazy<MethodAccessor<Seagull>> _Update_FlyAway757602046 =
				new System.Lazy<MethodAccessor<Seagull>>(() => MethodAccessor<Seagull>.Create("Update_FlyAway"));
		private static readonly System.Lazy<MethodAccessor<Seagull>> _Update_Dive757602046 =
				new System.Lazy<MethodAccessor<Seagull>>(() => MethodAccessor<Seagull>.Create("Update_Dive"));
		private static readonly System.Lazy<MethodAccessor<Seagull>> _Update_Pick757602046 =
				new System.Lazy<MethodAccessor<Seagull>>(() => MethodAccessor<Seagull>.Create("Update_Pick"));
		private static readonly System.Lazy<MethodAccessor<Seagull>> _Update_Dead757602046 =
				new System.Lazy<MethodAccessor<Seagull>>(() => MethodAccessor<Seagull>.Create("Update_Dead"));
		private static readonly System.Lazy<MethodAccessor<Seagull>> _Update_Ruva757602046 =
				new System.Lazy<MethodAccessor<Seagull>>(() => MethodAccessor<Seagull>.Create("Update_Ruva"));
		private static readonly System.Lazy<MethodAccessor<Seagull>> _OnDamageTaken2475015728 =
				new System.Lazy<MethodAccessor<Seagull>>(() => MethodAccessor<Seagull>.Create("OnDamageTaken", typeof(float), typeof(UnityEngine.Vector3), typeof(UnityEngine.Vector3), typeof(EntityType)));
		private static readonly System.Lazy<MethodAccessor<Seagull>> _Peck757602046 =
				new System.Lazy<MethodAccessor<Seagull>>(() => MethodAccessor<Seagull>.Create("Peck"));
		private static readonly System.Lazy<MethodAccessor<Seagull>> _FindCropplotAndNest757602046 =
				new System.Lazy<MethodAccessor<Seagull>>(() => MethodAccessor<Seagull>.Create("FindCropplotAndNest"));
		private static readonly System.Lazy<MethodAccessor<Seagull>> _PlayerIsWithinVicinity3640389019 =
				new System.Lazy<MethodAccessor<Seagull>>(() => MethodAccessor<Seagull>.Create("PlayerIsWithinVicinity", typeof(UnityEngine.Vector3), typeof(float)));
		private static readonly System.Lazy<MethodAccessor<Seagull>> _SetFlySpeed757602046 =
				new System.Lazy<MethodAccessor<Seagull>>(() => MethodAccessor<Seagull>.Create("SetFlySpeed"));
		private static readonly System.Lazy<MethodAccessor<Seagull>> _RemoveFromGame3486905475 =
				new System.Lazy<MethodAccessor<Seagull>>(() => MethodAccessor<Seagull>.Create("RemoveFromGame", typeof(float)));
		private static readonly System.Lazy<MethodAccessor<Seagull>> _MoveTowardsPoint1664684420 =
				new System.Lazy<MethodAccessor<Seagull>>(() => MethodAccessor<Seagull>.Create("MoveTowardsPoint", typeof(UnityEngine.Vector3), typeof(float), typeof(float)));
		private static readonly System.Lazy<MethodAccessor<Seagull>> _MoveAndRotateTowardsPoint1664684420 =
				new System.Lazy<MethodAccessor<Seagull>>(() => MethodAccessor<Seagull>.Create("MoveAndRotateTowardsPoint", typeof(UnityEngine.Vector3), typeof(float), typeof(float)));
		private static readonly System.Lazy<MethodAccessor<Seagull>> _MoveForward3486905475 =
				new System.Lazy<MethodAccessor<Seagull>>(() => MethodAccessor<Seagull>.Create("MoveForward", typeof(float)));
		private static readonly System.Lazy<MethodAccessor<Seagull>> _RotateTowards3640389019 =
				new System.Lazy<MethodAccessor<Seagull>>(() => MethodAccessor<Seagull>.Create("RotateTowards", typeof(UnityEngine.Vector3), typeof(float)));
		private static readonly System.Lazy<MethodAccessor<Seagull>> _LeaveNest3450040886 =
				new System.Lazy<MethodAccessor<Seagull>>(() => MethodAccessor<Seagull>.Create("LeaveNest", typeof(bool)));
		private static readonly System.Lazy<MethodAccessor<Seagull>> _OnPickedUp757602046 =
				new System.Lazy<MethodAccessor<Seagull>>(() => MethodAccessor<Seagull>.Create("OnPickedUp"));
		private static readonly System.Lazy<MethodAccessor<Seagull>> _Scream757602046 =
				new System.Lazy<MethodAccessor<Seagull>>(() => MethodAccessor<Seagull>.Create("Scream"));

		public static void SearchInstant(this Seagull __self) => _SearchInstant757602046.Value.Invoke(__self);
		public static void Awake(this Seagull __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this Seagull __self) => _Start757602046.Value.Invoke(__self);
		public static void LateStart(this Seagull __self) => _LateStart757602046.Value.Invoke(__self);
		public static void Update(this Seagull __self) => _Update757602046.Value.Invoke(__self);
		public static void OnDestroy(this Seagull __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void OnDrawGizmosSelected(this Seagull __self) => _OnDrawGizmosSelected757602046.Value.Invoke(__self);
		public static void OnWorldShift(this Seagull __self, UnityEngine.Vector3 shift) => _OnWorldShift3429126434.Value.Invoke(__self, shift);
		public static void Update_Hover(this Seagull __self) => _Update_Hover757602046.Value.Invoke(__self);
		public static void Update_FlyAway(this Seagull __self) => _Update_FlyAway757602046.Value.Invoke(__self);
		public static void Update_Dive(this Seagull __self) => _Update_Dive757602046.Value.Invoke(__self);
		public static void Update_Pick(this Seagull __self) => _Update_Pick757602046.Value.Invoke(__self);
		public static void Update_Dead(this Seagull __self) => _Update_Dead757602046.Value.Invoke(__self);
		public static void Update_Ruva(this Seagull __self) => _Update_Ruva757602046.Value.Invoke(__self);
		public static void OnDamageTaken(this Seagull __self, float damage, UnityEngine.Vector3 hitPoint, UnityEngine.Vector3 hitNormal, EntityType damageType) => _OnDamageTaken2475015728.Value.Invoke(__self, damage, hitPoint, hitNormal, damageType);
		public static void Peck(this Seagull __self) => _Peck757602046.Value.Invoke(__self);
		public static void FindCropplotAndNest(this Seagull __self) => _FindCropplotAndNest757602046.Value.Invoke(__self);
		public static bool PlayerIsWithinVicinity(this Seagull __self, UnityEngine.Vector3 point, float radius) => (bool)_PlayerIsWithinVicinity3640389019.Value.Invoke(__self, point, radius);
		public static System.Collections.IEnumerator SetFlySpeed(this Seagull __self) => (System.Collections.IEnumerator)_SetFlySpeed757602046.Value.Invoke(__self);
		public static System.Collections.IEnumerator RemoveFromGame(this Seagull __self, float secondsDelay) => (System.Collections.IEnumerator)_RemoveFromGame3486905475.Value.Invoke(__self, secondsDelay);
		public static bool MoveTowardsPoint(this Seagull __self, UnityEngine.Vector3 point, float speed, float reachDistance) => (bool)_MoveTowardsPoint1664684420.Value.Invoke(__self, point, speed, reachDistance);
		public static bool MoveAndRotateTowardsPoint(this Seagull __self, UnityEngine.Vector3 point, float speed, float reachDistance) => (bool)_MoveAndRotateTowardsPoint1664684420.Value.Invoke(__self, point, speed, reachDistance);
		public static void MoveForward(this Seagull __self, float speed) => _MoveForward3486905475.Value.Invoke(__self, speed);
		public static void RotateTowards(this Seagull __self, UnityEngine.Vector3 direction, float speed) => _RotateTowards3640389019.Value.Invoke(__self, direction, speed);
		public static void LeaveNest(this Seagull __self, bool layEggs) => _LeaveNest3450040886.Value.Invoke(__self, layEggs);
		public static void OnPickedUp(this Seagull __self) => _OnPickedUp757602046.Value.Invoke(__self);
		public static void Scream(this Seagull __self) => _Scream757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Message_Seagull_Create
	{

		private static readonly System.Lazy<FieldAccessor<Message_Seagull_Create, int>> _x =
				new System.Lazy<FieldAccessor<Message_Seagull_Create, int>>(() => FieldAccessor<Message_Seagull_Create, int>.Create("x"));
		private static readonly System.Lazy<FieldAccessor<Message_Seagull_Create, int>> _y =
				new System.Lazy<FieldAccessor<Message_Seagull_Create, int>>(() => FieldAccessor<Message_Seagull_Create, int>.Create("y"));
		private static readonly System.Lazy<FieldAccessor<Message_Seagull_Create, int>> _z =
				new System.Lazy<FieldAccessor<Message_Seagull_Create, int>>(() => FieldAccessor<Message_Seagull_Create, int>.Create("z"));

		public static int GetX(this Message_Seagull_Create __self) => _x.Value.GetValue(__self);
		public static void SetX(this Message_Seagull_Create __self, int value) => _x.Value.SetValue(__self, value);
		public static int GetY(this Message_Seagull_Create __self) => _y.Value.GetValue(__self);
		public static void SetY(this Message_Seagull_Create __self, int value) => _y.Value.SetValue(__self, value);
		public static int GetZ(this Message_Seagull_Create __self) => _z.Value.GetValue(__self);
		public static void SetZ(this Message_Seagull_Create __self, int value) => _z.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_SeagullParent
	{

		private static readonly System.Lazy<FieldAccessor<SeagullParent, int>> _maxSeagullCount =
				new System.Lazy<FieldAccessor<SeagullParent, int>>(() => FieldAccessor<SeagullParent, int>.Create("maxSeagullCount"));
		private static readonly System.Lazy<FieldAccessor<SeagullParent, float>> _hoverHeightCenter =
				new System.Lazy<FieldAccessor<SeagullParent, float>>(() => FieldAccessor<SeagullParent, float>.Create("hoverHeightCenter"));
		private static readonly System.Lazy<FieldAccessor<SeagullParent, Interval_Float>> _hoverHeightAboveTop =
				new System.Lazy<FieldAccessor<SeagullParent, Interval_Float>>(() => FieldAccessor<SeagullParent, Interval_Float>.Create("hoverHeightAboveTop"));
		private static readonly System.Lazy<FieldAccessor<SeagullParent, Interval_Float>> _hoverCircleRadius =
				new System.Lazy<FieldAccessor<SeagullParent, Interval_Float>>(() => FieldAccessor<SeagullParent, Interval_Float>.Create("hoverCircleRadius"));
		private static readonly System.Lazy<FieldAccessor<SeagullParent, Interval_Float>> _spawnSeagullInterval =
				new System.Lazy<FieldAccessor<SeagullParent, Interval_Float>>(() => FieldAccessor<SeagullParent, Interval_Float>.Create("spawnSeagullInterval"));
		private static readonly System.Lazy<FieldAccessor<SeagullParent, float>> _spawnChance =
				new System.Lazy<FieldAccessor<SeagullParent, float>>(() => FieldAccessor<SeagullParent, float>.Create("spawnChance"));
		private static readonly System.Lazy<FieldAccessor<SeagullParent, Network_Host_Entities>> _networkEntities =
				new System.Lazy<FieldAccessor<SeagullParent, Network_Host_Entities>>(() => FieldAccessor<SeagullParent, Network_Host_Entities>.Create("networkEntities"));
		private static readonly System.Lazy<FieldAccessor<SeagullParent, SeagullPoint>> _seagullPointPrefab =
				new System.Lazy<FieldAccessor<SeagullParent, SeagullPoint>>(() => FieldAccessor<SeagullParent, SeagullPoint>.Create("seagullPointPrefab"));
		private static readonly System.Lazy<FieldAccessor<SeagullParent, Raft_Network>> _network =
				new System.Lazy<FieldAccessor<SeagullParent, Raft_Network>>(() => FieldAccessor<SeagullParent, Raft_Network>.Create("network"));
		private static readonly System.Lazy<FieldAccessor<SeagullParent, UnityEngine.Transform>> _raftTransform =
				new System.Lazy<FieldAccessor<SeagullParent, UnityEngine.Transform>>(() => FieldAccessor<SeagullParent, UnityEngine.Transform>.Create("raftTransform"));
		private static readonly System.Lazy<FieldAccessor<SeagullParent, float>> _spawnTimer =
				new System.Lazy<FieldAccessor<SeagullParent, float>>(() => FieldAccessor<SeagullParent, float>.Create("spawnTimer"));
		private static readonly System.Lazy<FieldAccessor<SeagullParent, float>> _spawnInterval =
				new System.Lazy<FieldAccessor<SeagullParent, float>>(() => FieldAccessor<SeagullParent, float>.Create("spawnInterval"));
		private static readonly System.Lazy<FieldAccessor<SeagullParent, ChatManager>> _chatManager =
				new System.Lazy<FieldAccessor<SeagullParent, ChatManager>>(() => FieldAccessor<SeagullParent, ChatManager>.Create("chatManager"));
		private static readonly System.Lazy<FieldAccessor<SeagullParent, Network_Player>> _localPlayer =
				new System.Lazy<FieldAccessor<SeagullParent, Network_Player>>(() => FieldAccessor<SeagullParent, Network_Player>.Create("localPlayer"));

		public static int GetMaxSeagullCount(this SeagullParent __self) => _maxSeagullCount.Value.GetValue(__self);
		public static void SetMaxSeagullCount(this SeagullParent __self, int value) => _maxSeagullCount.Value.SetValue(__self, value);
		public static float GetHoverHeightCenter(this SeagullParent __self) => _hoverHeightCenter.Value.GetValue(__self);
		public static void SetHoverHeightCenter(this SeagullParent __self, float value) => _hoverHeightCenter.Value.SetValue(__self, value);
		public static Interval_Float GetHoverHeightAboveTop(this SeagullParent __self) => _hoverHeightAboveTop.Value.GetValue(__self);
		public static void SetHoverHeightAboveTop(this SeagullParent __self, Interval_Float value) => _hoverHeightAboveTop.Value.SetValue(__self, value);
		public static Interval_Float GetHoverCircleRadius(this SeagullParent __self) => _hoverCircleRadius.Value.GetValue(__self);
		public static void SetHoverCircleRadius(this SeagullParent __self, Interval_Float value) => _hoverCircleRadius.Value.SetValue(__self, value);
		public static Interval_Float GetSpawnSeagullInterval(this SeagullParent __self) => _spawnSeagullInterval.Value.GetValue(__self);
		public static void SetSpawnSeagullInterval(this SeagullParent __self, Interval_Float value) => _spawnSeagullInterval.Value.SetValue(__self, value);
		public static float GetSpawnChance(this SeagullParent __self) => _spawnChance.Value.GetValue(__self);
		public static void SetSpawnChance(this SeagullParent __self, float value) => _spawnChance.Value.SetValue(__self, value);
		public static Network_Host_Entities GetNetworkEntities(this SeagullParent __self) => _networkEntities.Value.GetValue(__self);
		public static void SetNetworkEntities(this SeagullParent __self, Network_Host_Entities value) => _networkEntities.Value.SetValue(__self, value);
		public static SeagullPoint GetSeagullPointPrefab(this SeagullParent __self) => _seagullPointPrefab.Value.GetValue(__self);
		public static void SetSeagullPointPrefab(this SeagullParent __self, SeagullPoint value) => _seagullPointPrefab.Value.SetValue(__self, value);
		public static Raft_Network GetNetwork(this SeagullParent __self) => _network.Value.GetValue(__self);
		public static void SetNetwork(this SeagullParent __self, Raft_Network value) => _network.Value.SetValue(__self, value);
		public static UnityEngine.Transform GetRaftTransform(this SeagullParent __self) => _raftTransform.Value.GetValue(__self);
		public static void SetRaftTransform(this SeagullParent __self, UnityEngine.Transform value) => _raftTransform.Value.SetValue(__self, value);
		public static float GetSpawnTimer(this SeagullParent __self) => _spawnTimer.Value.GetValue(__self);
		public static void SetSpawnTimer(this SeagullParent __self, float value) => _spawnTimer.Value.SetValue(__self, value);
		public static float GetSpawnInterval(this SeagullParent __self) => _spawnInterval.Value.GetValue(__self);
		public static void SetSpawnInterval(this SeagullParent __self, float value) => _spawnInterval.Value.SetValue(__self, value);
		public static ChatManager GetChatManager(this SeagullParent __self) => _chatManager.Value.GetValue(__self);
		public static void SetChatManager(this SeagullParent __self, ChatManager value) => _chatManager.Value.SetValue(__self, value);
		public static Network_Player GetLocalPlayer(this SeagullParent __self) => _localPlayer.Value.GetValue(__self);
		public static void SetLocalPlayer(this SeagullParent __self, Network_Player value) => _localPlayer.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<SeagullParent>> _SpawnSeagullButton757602046 =
				new System.Lazy<MethodAccessor<SeagullParent>>(() => MethodAccessor<SeagullParent>.Create("SpawnSeagullButton"));
		private static readonly System.Lazy<MethodAccessor<SeagullParent>> _Awake757602046 =
				new System.Lazy<MethodAccessor<SeagullParent>>(() => MethodAccessor<SeagullParent>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<SeagullParent>> _Start757602046 =
				new System.Lazy<MethodAccessor<SeagullParent>>(() => MethodAccessor<SeagullParent>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<SeagullParent>> _Update757602046 =
				new System.Lazy<MethodAccessor<SeagullParent>>(() => MethodAccessor<SeagullParent>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<SeagullParent>> _OnDrawGizmosSelected757602046 =
				new System.Lazy<MethodAccessor<SeagullParent>>(() => MethodAccessor<SeagullParent>.Create("OnDrawGizmosSelected"));
		private static readonly System.Lazy<MethodAccessor<SeagullParent>> _SpawnSeagull757602046 =
				new System.Lazy<MethodAccessor<SeagullParent>>(() => MethodAccessor<SeagullParent>.Create("SpawnSeagull"));

		public static void SpawnSeagullButton(this SeagullParent __self) => _SpawnSeagullButton757602046.Value.Invoke(__self);
		public static void Awake(this SeagullParent __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this SeagullParent __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this SeagullParent __self) => _Update757602046.Value.Invoke(__self);
		public static void OnDrawGizmosSelected(this SeagullParent __self) => _OnDrawGizmosSelected757602046.Value.Invoke(__self);
		public static void SpawnSeagull(this SeagullParent __self) => _SpawnSeagull757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_SeagullPoint
	{

		private static readonly System.Lazy<FieldAccessor<SeagullPoint, Interval_Float>> _rotationSpeedInterval =
				new System.Lazy<FieldAccessor<SeagullPoint, Interval_Float>>(() => FieldAccessor<SeagullPoint, Interval_Float>.Create("rotationSpeedInterval"));
		private static readonly System.Lazy<FieldAccessor<SeagullPoint, float>> _rotationSpeed =
				new System.Lazy<FieldAccessor<SeagullPoint, float>>(() => FieldAccessor<SeagullPoint, float>.Create("rotationSpeed"));
		private static readonly System.Lazy<FieldAccessor<SeagullPoint, int>> _directionModifier =
				new System.Lazy<FieldAccessor<SeagullPoint, int>>(() => FieldAccessor<SeagullPoint, int>.Create("directionModifier"));

		public static Interval_Float GetRotationSpeedInterval(this SeagullPoint __self) => _rotationSpeedInterval.Value.GetValue(__self);
		public static void SetRotationSpeedInterval(this SeagullPoint __self, Interval_Float value) => _rotationSpeedInterval.Value.SetValue(__self, value);
		public static float GetRotationSpeed(this SeagullPoint __self) => _rotationSpeed.Value.GetValue(__self);
		public static void SetRotationSpeed(this SeagullPoint __self, float value) => _rotationSpeed.Value.SetValue(__self, value);
		public static int GetDirectionModifier(this SeagullPoint __self) => _directionModifier.Value.GetValue(__self);
		public static void SetDirectionModifier(this SeagullPoint __self, int value) => _directionModifier.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<SeagullPoint>> _Start757602046 =
				new System.Lazy<MethodAccessor<SeagullPoint>>(() => MethodAccessor<SeagullPoint>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<SeagullPoint>> _Update757602046 =
				new System.Lazy<MethodAccessor<SeagullPoint>>(() => MethodAccessor<SeagullPoint>.Create("Update"));

		public static void Start(this SeagullPoint __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this SeagullPoint __self) => _Update757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_Shark
	{

		private static readonly System.Lazy<FieldAccessor<Shark, float>> _newPointMinRadius =
				new System.Lazy<FieldAccessor<Shark, float>>(() => FieldAccessor<Shark, float>.Create("newPointMinRadius"));
		private static readonly System.Lazy<FieldAccessor<Shark, float>> _newPointMaxRadius =
				new System.Lazy<FieldAccessor<Shark, float>>(() => FieldAccessor<Shark, float>.Create("newPointMaxRadius"));
		private static readonly System.Lazy<FieldAccessor<Shark, float>> _rotationSpeed =
				new System.Lazy<FieldAccessor<Shark, float>>(() => FieldAccessor<Shark, float>.Create("rotationSpeed"));
		private static readonly System.Lazy<FieldAccessor<Shark, UnityEngine.AnimationCurve>> _swimSpeedCurve =
				new System.Lazy<FieldAccessor<Shark, UnityEngine.AnimationCurve>>(() => FieldAccessor<Shark, UnityEngine.AnimationCurve>.Create("swimSpeedCurve"));
		private static readonly System.Lazy<FieldAccessor<Shark, float>> _animationCurveTime =
				new System.Lazy<FieldAccessor<Shark, float>>(() => FieldAccessor<Shark, float>.Create("animationCurveTime"));
		private static readonly System.Lazy<FieldAccessor<Shark, float>> _originalSwimSpeed =
				new System.Lazy<FieldAccessor<Shark, float>>(() => FieldAccessor<Shark, float>.Create("originalSwimSpeed"));
		private static readonly System.Lazy<FieldAccessor<Shark, float>> _timeUntilSink =
				new System.Lazy<FieldAccessor<Shark, float>>(() => FieldAccessor<Shark, float>.Create("timeUntilSink"));
		private static readonly System.Lazy<FieldAccessor<Shark, float>> _sharkRespawnTime =
				new System.Lazy<FieldAccessor<Shark, float>>(() => FieldAccessor<Shark, float>.Create("sharkRespawnTime"));
		private static readonly System.Lazy<FieldAccessor<Shark, float>> _deadTimer =
				new System.Lazy<FieldAccessor<Shark, float>>(() => FieldAccessor<Shark, float>.Create("deadTimer"));
		private static readonly System.Lazy<FieldAccessor<Shark, float>> _biteRaftRange =
				new System.Lazy<FieldAccessor<Shark, float>>(() => FieldAccessor<Shark, float>.Create("biteRaftRange"));
		private static readonly System.Lazy<FieldAccessor<Shark, int>> _biteRaftDamage =
				new System.Lazy<FieldAccessor<Shark, int>>(() => FieldAccessor<Shark, int>.Create("biteRaftDamage"));
		private static readonly System.Lazy<FieldAccessor<Shark, float>> _biteRaftInterval =
				new System.Lazy<FieldAccessor<Shark, float>>(() => FieldAccessor<Shark, float>.Create("biteRaftInterval"));
		private static readonly System.Lazy<FieldAccessor<Shark, float>> _searchBlockInterval =
				new System.Lazy<FieldAccessor<Shark, float>>(() => FieldAccessor<Shark, float>.Create("searchBlockInterval"));
		private static readonly System.Lazy<FieldAccessor<Shark, UnityEngine.Vector3>> _biteRaftOffset =
				new System.Lazy<FieldAccessor<Shark, UnityEngine.Vector3>>(() => FieldAccessor<Shark, UnityEngine.Vector3>.Create("biteRaftOffset"));
		private static readonly System.Lazy<FieldAccessor<Shark, float>> _damageTakenUntilDive =
				new System.Lazy<FieldAccessor<Shark, float>>(() => FieldAccessor<Shark, float>.Create("damageTakenUntilDive"));
		private static readonly System.Lazy<FieldAccessor<Shark, float>> _hitByPlayerDamage =
				new System.Lazy<FieldAccessor<Shark, float>>(() => FieldAccessor<Shark, float>.Create("hitByPlayerDamage"));
		private static readonly System.Lazy<FieldAccessor<Shark, float>> _biteRaftTimer =
				new System.Lazy<FieldAccessor<Shark, float>>(() => FieldAccessor<Shark, float>.Create("biteRaftTimer"));
		private static readonly System.Lazy<FieldAccessor<Shark, float>> _searchBlockTimer =
				new System.Lazy<FieldAccessor<Shark, float>>(() => FieldAccessor<Shark, float>.Create("searchBlockTimer"));
		private static readonly System.Lazy<FieldAccessor<Shark, int>> _initialRaftMaxHealth =
				new System.Lazy<FieldAccessor<Shark, int>>(() => FieldAccessor<Shark, int>.Create("initialRaftMaxHealth"));
		private static readonly System.Lazy<FieldAccessor<Shark, int>> _initialRaftHealth =
				new System.Lazy<FieldAccessor<Shark, int>>(() => FieldAccessor<Shark, int>.Create("initialRaftHealth"));
		private static readonly System.Lazy<FieldAccessor<Shark, float>> _playerVisionRange =
				new System.Lazy<FieldAccessor<Shark, float>>(() => FieldAccessor<Shark, float>.Create("playerVisionRange"));
		private static readonly System.Lazy<FieldAccessor<Shark, float>> _bitePlayerRange =
				new System.Lazy<FieldAccessor<Shark, float>>(() => FieldAccessor<Shark, float>.Create("bitePlayerRange"));
		private static readonly System.Lazy<FieldAccessor<Shark, float>> _triggerAttackRange =
				new System.Lazy<FieldAccessor<Shark, float>>(() => FieldAccessor<Shark, float>.Create("triggerAttackRange"));
		private static readonly System.Lazy<FieldAccessor<Shark, float>> _driveByDistance =
				new System.Lazy<FieldAccessor<Shark, float>>(() => FieldAccessor<Shark, float>.Create("driveByDistance"));
		private static readonly System.Lazy<FieldAccessor<Shark, int>> _attackPlayerDamage =
				new System.Lazy<FieldAccessor<Shark, int>>(() => FieldAccessor<Shark, int>.Create("attackPlayerDamage"));
		private static readonly System.Lazy<FieldAccessor<Shark, float>> _attackSwimSpeedMultiplier =
				new System.Lazy<FieldAccessor<Shark, float>>(() => FieldAccessor<Shark, float>.Create("attackSwimSpeedMultiplier"));
		private static readonly System.Lazy<FieldAccessor<Shark, UnityEngine.Vector3>> _lastKnownPlayerPosition =
				new System.Lazy<FieldAccessor<Shark, UnityEngine.Vector3>>(() => FieldAccessor<Shark, UnityEngine.Vector3>.Create("lastKnownPlayerPosition"));
		private static readonly System.Lazy<FieldAccessor<Shark, bool>> _canAttack =
				new System.Lazy<FieldAccessor<Shark, bool>>(() => FieldAccessor<Shark, bool>.Create("canAttack"));
		private static readonly System.Lazy<FieldAccessor<Shark, float>> _baitVisionRange =
				new System.Lazy<FieldAccessor<Shark, float>>(() => FieldAccessor<Shark, float>.Create("baitVisionRange"));
		private static readonly System.Lazy<FieldAccessor<Shark, float>> _biteBaitCooldown =
				new System.Lazy<FieldAccessor<Shark, float>>(() => FieldAccessor<Shark, float>.Create("biteBaitCooldown"));
		private static readonly System.Lazy<FieldAccessor<Shark, float>> _biteBaitTimer =
				new System.Lazy<FieldAccessor<Shark, float>>(() => FieldAccessor<Shark, float>.Create("biteBaitTimer"));
		private static readonly System.Lazy<FieldAccessor<Shark, bool>> _damagedDuringBait =
				new System.Lazy<FieldAccessor<Shark, bool>>(() => FieldAccessor<Shark, bool>.Create("damagedDuringBait"));
		private static readonly System.Lazy<FieldAccessor<Shark, SharkBait>> _currentSharkBait =
				new System.Lazy<FieldAccessor<Shark, SharkBait>>(() => FieldAccessor<Shark, SharkBait>.Create("currentSharkBait"));
		private static readonly System.Lazy<FieldAccessor<Shark, UnityEngine.LayerMask>> _obstructionMask =
				new System.Lazy<FieldAccessor<Shark, UnityEngine.LayerMask>>(() => FieldAccessor<Shark, UnityEngine.LayerMask>.Create("obstructionMask"));
		private static readonly System.Lazy<FieldAccessor<Shark, ParticleController>> _woodParticles =
				new System.Lazy<FieldAccessor<Shark, ParticleController>>(() => FieldAccessor<Shark, ParticleController>.Create("woodParticles"));
		private static readonly System.Lazy<FieldAccessor<Shark, ParticleController>> _waterSplash =
				new System.Lazy<FieldAccessor<Shark, ParticleController>>(() => FieldAccessor<Shark, ParticleController>.Create("waterSplash"));
		private static readonly System.Lazy<FieldAccessor<Shark, string>> _eventRef_biteRaft =
				new System.Lazy<FieldAccessor<Shark, string>>(() => FieldAccessor<Shark, string>.Create("eventRef_biteRaft"));
		private static readonly System.Lazy<FieldAccessor<Shark, FMOD.Studio.EventInstance>> _eventInstance_biteRaft =
				new System.Lazy<FieldAccessor<Shark, FMOD.Studio.EventInstance>>(() => FieldAccessor<Shark, FMOD.Studio.EventInstance>.Create("eventInstance_biteRaft"));
		private static readonly System.Lazy<FieldAccessor<Shark, FMODUnity.StudioEventEmitter>> _soundemitter_bitePlayer =
				new System.Lazy<FieldAccessor<Shark, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<Shark, FMODUnity.StudioEventEmitter>.Create("soundemitter_bitePlayer"));
		private static readonly System.Lazy<FieldAccessor<Shark, FMODUnity.StudioEventEmitter>> _soundemitter_takeDamage =
				new System.Lazy<FieldAccessor<Shark, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<Shark, FMODUnity.StudioEventEmitter>.Create("soundemitter_takeDamage"));
		private static readonly System.Lazy<FieldAccessor<Shark, FMODUnity.StudioEventEmitter>> _soundemitter_idle =
				new System.Lazy<FieldAccessor<Shark, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<Shark, FMODUnity.StudioEventEmitter>.Create("soundemitter_idle"));
		private static readonly System.Lazy<FieldAccessor<Shark, FMODUnity.StudioEventEmitter>> _soundemitter_splash =
				new System.Lazy<FieldAccessor<Shark, FMODUnity.StudioEventEmitter>>(() => FieldAccessor<Shark, FMODUnity.StudioEventEmitter>.Create("soundemitter_splash"));
		private static readonly System.Lazy<FieldAccessor<Shark, float>> _networkMovementLerpSpeed =
				new System.Lazy<FieldAccessor<Shark, float>>(() => FieldAccessor<Shark, float>.Create("networkMovementLerpSpeed"));
		private static readonly System.Lazy<FieldAccessor<Shark, float>> _networkRotationLerpSpeed =
				new System.Lazy<FieldAccessor<Shark, float>>(() => FieldAccessor<Shark, float>.Create("networkRotationLerpSpeed"));
		private static readonly System.Lazy<FieldAccessor<Shark, UnityEngine.Vector2>> _networkTurnAngleLimit =
				new System.Lazy<FieldAccessor<Shark, UnityEngine.Vector2>>(() => FieldAccessor<Shark, UnityEngine.Vector2>.Create("networkTurnAngleLimit"));
		private static readonly System.Lazy<FieldAccessor<Shark, UnityEngine.Vector3>> _networkPosition =
				new System.Lazy<FieldAccessor<Shark, UnityEngine.Vector3>>(() => FieldAccessor<Shark, UnityEngine.Vector3>.Create("networkPosition"));
		private static readonly System.Lazy<FieldAccessor<Shark, UnityEngine.Vector3>> _networkRotation =
				new System.Lazy<FieldAccessor<Shark, UnityEngine.Vector3>>(() => FieldAccessor<Shark, UnityEngine.Vector3>.Create("networkRotation"));
		private static readonly System.Lazy<FieldAccessor<Shark, bool>> _bitingBait =
				new System.Lazy<FieldAccessor<Shark, bool>>(() => FieldAccessor<Shark, bool>.Create("bitingBait"));
		private static readonly System.Lazy<FieldAccessor<Shark, bool>> _hitWhileSwimming =
				new System.Lazy<FieldAccessor<Shark, bool>>(() => FieldAccessor<Shark, bool>.Create("hitWhileSwimming"));
		private static readonly System.Lazy<FieldAccessor<Shark, Network_Player>> _targetToAttack =
				new System.Lazy<FieldAccessor<Shark, Network_Player>>(() => FieldAccessor<Shark, Network_Player>.Create("targetToAttack"));
		private static readonly System.Lazy<FieldAccessor<Shark, WaterPointGetter>> _waterPoint =
				new System.Lazy<FieldAccessor<Shark, WaterPointGetter>>(() => FieldAccessor<Shark, WaterPointGetter>.Create("waterPoint"));
		private static readonly System.Lazy<FieldAccessor<Shark, float>> _swimcurveTimer =
				new System.Lazy<FieldAccessor<Shark, float>>(() => FieldAccessor<Shark, float>.Create("swimcurveTimer"));
		private static readonly System.Lazy<FieldAccessor<Shark, Raft_Network>> _network =
				new System.Lazy<FieldAccessor<Shark, Raft_Network>>(() => FieldAccessor<Shark, Raft_Network>.Create("network"));

		public static float GetNewPointMinRadius(this Shark __self) => _newPointMinRadius.Value.GetValue(__self);
		public static void SetNewPointMinRadius(this Shark __self, float value) => _newPointMinRadius.Value.SetValue(__self, value);
		public static float GetNewPointMaxRadius(this Shark __self) => _newPointMaxRadius.Value.GetValue(__self);
		public static void SetNewPointMaxRadius(this Shark __self, float value) => _newPointMaxRadius.Value.SetValue(__self, value);
		public static float GetRotationSpeed(this Shark __self) => _rotationSpeed.Value.GetValue(__self);
		public static void SetRotationSpeed(this Shark __self, float value) => _rotationSpeed.Value.SetValue(__self, value);
		public static UnityEngine.AnimationCurve GetSwimSpeedCurve(this Shark __self) => _swimSpeedCurve.Value.GetValue(__self);
		public static void SetSwimSpeedCurve(this Shark __self, UnityEngine.AnimationCurve value) => _swimSpeedCurve.Value.SetValue(__self, value);
		public static float GetAnimationCurveTime(this Shark __self) => _animationCurveTime.Value.GetValue(__self);
		public static void SetAnimationCurveTime(this Shark __self, float value) => _animationCurveTime.Value.SetValue(__self, value);
		public static float GetOriginalSwimSpeed(this Shark __self) => _originalSwimSpeed.Value.GetValue(__self);
		public static void SetOriginalSwimSpeed(this Shark __self, float value) => _originalSwimSpeed.Value.SetValue(__self, value);
		public static float GetTimeUntilSink(this Shark __self) => _timeUntilSink.Value.GetValue(__self);
		public static void SetTimeUntilSink(this Shark __self, float value) => _timeUntilSink.Value.SetValue(__self, value);
		public static float GetSharkRespawnTime(this Shark __self) => _sharkRespawnTime.Value.GetValue(__self);
		public static void SetSharkRespawnTime(this Shark __self, float value) => _sharkRespawnTime.Value.SetValue(__self, value);
		public static float GetDeadTimer(this Shark __self) => _deadTimer.Value.GetValue(__self);
		public static void SetDeadTimer(this Shark __self, float value) => _deadTimer.Value.SetValue(__self, value);
		public static float GetBiteRaftRange(this Shark __self) => _biteRaftRange.Value.GetValue(__self);
		public static void SetBiteRaftRange(this Shark __self, float value) => _biteRaftRange.Value.SetValue(__self, value);
		public static int GetBiteRaftDamage(this Shark __self) => _biteRaftDamage.Value.GetValue(__self);
		public static void SetBiteRaftDamage(this Shark __self, int value) => _biteRaftDamage.Value.SetValue(__self, value);
		public static float GetBiteRaftInterval(this Shark __self) => _biteRaftInterval.Value.GetValue(__self);
		public static void SetBiteRaftInterval(this Shark __self, float value) => _biteRaftInterval.Value.SetValue(__self, value);
		public static float GetSearchBlockInterval(this Shark __self) => _searchBlockInterval.Value.GetValue(__self);
		public static void SetSearchBlockInterval(this Shark __self, float value) => _searchBlockInterval.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetBiteRaftOffset(this Shark __self) => _biteRaftOffset.Value.GetValue(__self);
		public static void SetBiteRaftOffset(this Shark __self, UnityEngine.Vector3 value) => _biteRaftOffset.Value.SetValue(__self, value);
		public static float GetDamageTakenUntilDive(this Shark __self) => _damageTakenUntilDive.Value.GetValue(__self);
		public static void SetDamageTakenUntilDive(this Shark __self, float value) => _damageTakenUntilDive.Value.SetValue(__self, value);
		public static float GetHitByPlayerDamage(this Shark __self) => _hitByPlayerDamage.Value.GetValue(__self);
		public static void SetHitByPlayerDamage(this Shark __self, float value) => _hitByPlayerDamage.Value.SetValue(__self, value);
		public static float GetBiteRaftTimer(this Shark __self) => _biteRaftTimer.Value.GetValue(__self);
		public static void SetBiteRaftTimer(this Shark __self, float value) => _biteRaftTimer.Value.SetValue(__self, value);
		public static float GetSearchBlockTimer(this Shark __self) => _searchBlockTimer.Value.GetValue(__self);
		public static void SetSearchBlockTimer(this Shark __self, float value) => _searchBlockTimer.Value.SetValue(__self, value);
		public static int GetInitialRaftMaxHealth(this Shark __self) => _initialRaftMaxHealth.Value.GetValue(__self);
		public static void SetInitialRaftMaxHealth(this Shark __self, int value) => _initialRaftMaxHealth.Value.SetValue(__self, value);
		public static int GetInitialRaftHealth(this Shark __self) => _initialRaftHealth.Value.GetValue(__self);
		public static void SetInitialRaftHealth(this Shark __self, int value) => _initialRaftHealth.Value.SetValue(__self, value);
		public static float GetPlayerVisionRange(this Shark __self) => _playerVisionRange.Value.GetValue(__self);
		public static void SetPlayerVisionRange(this Shark __self, float value) => _playerVisionRange.Value.SetValue(__self, value);
		public static float GetBitePlayerRange(this Shark __self) => _bitePlayerRange.Value.GetValue(__self);
		public static void SetBitePlayerRange(this Shark __self, float value) => _bitePlayerRange.Value.SetValue(__self, value);
		public static float GetTriggerAttackRange(this Shark __self) => _triggerAttackRange.Value.GetValue(__self);
		public static void SetTriggerAttackRange(this Shark __self, float value) => _triggerAttackRange.Value.SetValue(__self, value);
		public static float GetDriveByDistance(this Shark __self) => _driveByDistance.Value.GetValue(__self);
		public static void SetDriveByDistance(this Shark __self, float value) => _driveByDistance.Value.SetValue(__self, value);
		public static int GetAttackPlayerDamage(this Shark __self) => _attackPlayerDamage.Value.GetValue(__self);
		public static void SetAttackPlayerDamage(this Shark __self, int value) => _attackPlayerDamage.Value.SetValue(__self, value);
		public static float GetAttackSwimSpeedMultiplier(this Shark __self) => _attackSwimSpeedMultiplier.Value.GetValue(__self);
		public static void SetAttackSwimSpeedMultiplier(this Shark __self, float value) => _attackSwimSpeedMultiplier.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetLastKnownPlayerPosition(this Shark __self) => _lastKnownPlayerPosition.Value.GetValue(__self);
		public static void SetLastKnownPlayerPosition(this Shark __self, UnityEngine.Vector3 value) => _lastKnownPlayerPosition.Value.SetValue(__self, value);
		public static bool GetCanAttack(this Shark __self) => _canAttack.Value.GetValue(__self);
		public static void SetCanAttack(this Shark __self, bool value) => _canAttack.Value.SetValue(__self, value);
		public static float GetBaitVisionRange(this Shark __self) => _baitVisionRange.Value.GetValue(__self);
		public static void SetBaitVisionRange(this Shark __self, float value) => _baitVisionRange.Value.SetValue(__self, value);
		public static float GetBiteBaitCooldown(this Shark __self) => _biteBaitCooldown.Value.GetValue(__self);
		public static void SetBiteBaitCooldown(this Shark __self, float value) => _biteBaitCooldown.Value.SetValue(__self, value);
		public static float GetBiteBaitTimer(this Shark __self) => _biteBaitTimer.Value.GetValue(__self);
		public static void SetBiteBaitTimer(this Shark __self, float value) => _biteBaitTimer.Value.SetValue(__self, value);
		public static bool GetDamagedDuringBait(this Shark __self) => _damagedDuringBait.Value.GetValue(__self);
		public static void SetDamagedDuringBait(this Shark __self, bool value) => _damagedDuringBait.Value.SetValue(__self, value);
		public static SharkBait GetCurrentSharkBait(this Shark __self) => _currentSharkBait.Value.GetValue(__self);
		public static void SetCurrentSharkBait(this Shark __self, SharkBait value) => _currentSharkBait.Value.SetValue(__self, value);
		public static UnityEngine.LayerMask GetObstructionMask(this Shark __self) => _obstructionMask.Value.GetValue(__self);
		public static void SetObstructionMask(this Shark __self, UnityEngine.LayerMask value) => _obstructionMask.Value.SetValue(__self, value);
		public static ParticleController GetWoodParticles(this Shark __self) => _woodParticles.Value.GetValue(__self);
		public static void SetWoodParticles(this Shark __self, ParticleController value) => _woodParticles.Value.SetValue(__self, value);
		public static ParticleController GetWaterSplash(this Shark __self) => _waterSplash.Value.GetValue(__self);
		public static void SetWaterSplash(this Shark __self, ParticleController value) => _waterSplash.Value.SetValue(__self, value);
		public static string GetEventRef_biteRaft(this Shark __self) => _eventRef_biteRaft.Value.GetValue(__self);
		public static void SetEventRef_biteRaft(this Shark __self, string value) => _eventRef_biteRaft.Value.SetValue(__self, value);
		public static FMOD.Studio.EventInstance GetEventInstance_biteRaft(this Shark __self) => _eventInstance_biteRaft.Value.GetValue(__self);
		public static void SetEventInstance_biteRaft(this Shark __self, FMOD.Studio.EventInstance value) => _eventInstance_biteRaft.Value.SetValue(__self, value);
		public static FMODUnity.StudioEventEmitter GetSoundemitter_bitePlayer(this Shark __self) => _soundemitter_bitePlayer.Value.GetValue(__self);
		public static void SetSoundemitter_bitePlayer(this Shark __self, FMODUnity.StudioEventEmitter value) => _soundemitter_bitePlayer.Value.SetValue(__self, value);
		public static FMODUnity.StudioEventEmitter GetSoundemitter_takeDamage(this Shark __self) => _soundemitter_takeDamage.Value.GetValue(__self);
		public static void SetSoundemitter_takeDamage(this Shark __self, FMODUnity.StudioEventEmitter value) => _soundemitter_takeDamage.Value.SetValue(__self, value);
		public static FMODUnity.StudioEventEmitter GetSoundemitter_idle(this Shark __self) => _soundemitter_idle.Value.GetValue(__self);
		public static void SetSoundemitter_idle(this Shark __self, FMODUnity.StudioEventEmitter value) => _soundemitter_idle.Value.SetValue(__self, value);
		public static FMODUnity.StudioEventEmitter GetSoundemitter_splash(this Shark __self) => _soundemitter_splash.Value.GetValue(__self);
		public static void SetSoundemitter_splash(this Shark __self, FMODUnity.StudioEventEmitter value) => _soundemitter_splash.Value.SetValue(__self, value);
		public static float GetNetworkMovementLerpSpeed(this Shark __self) => _networkMovementLerpSpeed.Value.GetValue(__self);
		public static void SetNetworkMovementLerpSpeed(this Shark __self, float value) => _networkMovementLerpSpeed.Value.SetValue(__self, value);
		public static float GetNetworkRotationLerpSpeed(this Shark __self) => _networkRotationLerpSpeed.Value.GetValue(__self);
		public static void SetNetworkRotationLerpSpeed(this Shark __self, float value) => _networkRotationLerpSpeed.Value.SetValue(__self, value);
		public static UnityEngine.Vector2 GetNetworkTurnAngleLimit(this Shark __self) => _networkTurnAngleLimit.Value.GetValue(__self);
		public static void SetNetworkTurnAngleLimit(this Shark __self, UnityEngine.Vector2 value) => _networkTurnAngleLimit.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetNetworkPosition(this Shark __self) => _networkPosition.Value.GetValue(__self);
		public static void SetNetworkPosition(this Shark __self, UnityEngine.Vector3 value) => _networkPosition.Value.SetValue(__self, value);
		public static UnityEngine.Vector3 GetNetworkRotation(this Shark __self) => _networkRotation.Value.GetValue(__self);
		public static void SetNetworkRotation(this Shark __self, UnityEngine.Vector3 value) => _networkRotation.Value.SetValue(__self, value);
		public static bool GetBitingBait(this Shark __self) => _bitingBait.Value.GetValue(__self);
		public static void SetBitingBait(this Shark __self, bool value) => _bitingBait.Value.SetValue(__self, value);
		public static bool GetHitWhileSwimming(this Shark __self) => _hitWhileSwimming.Value.GetValue(__self);
		public static void SetHitWhileSwimming(this Shark __self, bool value) => _hitWhileSwimming.Value.SetValue(__self, value);
		public static Network_Player GetTargetToAttack(this Shark __self) => _targetToAttack.Value.GetValue(__self);
		public static void SetTargetToAttack(this Shark __self, Network_Player value) => _targetToAttack.Value.SetValue(__self, value);
		public static WaterPointGetter GetWaterPoint(this Shark __self) => _waterPoint.Value.GetValue(__self);
		public static void SetWaterPoint(this Shark __self, WaterPointGetter value) => _waterPoint.Value.SetValue(__self, value);
		public static float GetSwimcurveTimer(this Shark __self) => _swimcurveTimer.Value.GetValue(__self);
		public static void SetSwimcurveTimer(this Shark __self, float value) => _swimcurveTimer.Value.SetValue(__self, value);
		public static Raft_Network GetNetwork(this Shark __self) => _network.Value.GetValue(__self);
		public static void SetNetwork(this Shark __self, Raft_Network value) => _network.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<Shark>> _Awake757602046 =
				new System.Lazy<MethodAccessor<Shark>>(() => MethodAccessor<Shark>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<Shark>> _Start757602046 =
				new System.Lazy<MethodAccessor<Shark>>(() => MethodAccessor<Shark>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<Shark>> _Update757602046 =
				new System.Lazy<MethodAccessor<Shark>>(() => MethodAccessor<Shark>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<Shark>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<Shark>>(() => MethodAccessor<Shark>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<Shark>> _OnDrawGizmos757602046 =
				new System.Lazy<MethodAccessor<Shark>>(() => MethodAccessor<Shark>.Create("OnDrawGizmos"));
		private static readonly System.Lazy<MethodAccessor<Shark>> _RandomizeStartingValues757602046 =
				new System.Lazy<MethodAccessor<Shark>>(() => MethodAccessor<Shark>.Create("RandomizeStartingValues"));
		private static readonly System.Lazy<MethodAccessor<Shark>> _DebugUpdate757602046 =
				new System.Lazy<MethodAccessor<Shark>>(() => MethodAccessor<Shark>.Create("DebugUpdate"));
		private static readonly System.Lazy<MethodAccessor<Shark>> _OnWorldShift3429126434 =
				new System.Lazy<MethodAccessor<Shark>>(() => MethodAccessor<Shark>.Create("OnWorldShift", typeof(UnityEngine.Vector3)));
		private static readonly System.Lazy<MethodAccessor<Shark>> _NoTargetUpdate757602046 =
				new System.Lazy<MethodAccessor<Shark>>(() => MethodAccessor<Shark>.Create("NoTargetUpdate"));
		private static readonly System.Lazy<MethodAccessor<Shark>> _PassiveSurfaceUpdate757602046 =
				new System.Lazy<MethodAccessor<Shark>>(() => MethodAccessor<Shark>.Create("PassiveSurfaceUpdate"));
		private static readonly System.Lazy<MethodAccessor<Shark>> _PassiveWaterUpdate757602046 =
				new System.Lazy<MethodAccessor<Shark>>(() => MethodAccessor<Shark>.Create("PassiveWaterUpdate"));
		private static readonly System.Lazy<MethodAccessor<Shark>> _AttackRaftUpdate757602046 =
				new System.Lazy<MethodAccessor<Shark>>(() => MethodAccessor<Shark>.Create("AttackRaftUpdate"));
		private static readonly System.Lazy<MethodAccessor<Shark>> _BaitUpdate757602046 =
				new System.Lazy<MethodAccessor<Shark>>(() => MethodAccessor<Shark>.Create("BaitUpdate"));
		private static readonly System.Lazy<MethodAccessor<Shark>> _DiveUpdate757602046 =
				new System.Lazy<MethodAccessor<Shark>>(() => MethodAccessor<Shark>.Create("DiveUpdate"));
		private static readonly System.Lazy<MethodAccessor<Shark>> _DeadUpdate757602046 =
				new System.Lazy<MethodAccessor<Shark>>(() => MethodAccessor<Shark>.Create("DeadUpdate"));
		private static readonly System.Lazy<MethodAccessor<Shark>> _DeadSinkUpdate757602046 =
				new System.Lazy<MethodAccessor<Shark>>(() => MethodAccessor<Shark>.Create("DeadSinkUpdate"));
		private static readonly System.Lazy<MethodAccessor<Shark>> _MoveTowards3640389019 =
				new System.Lazy<MethodAccessor<Shark>>(() => MethodAccessor<Shark>.Create("MoveTowards", typeof(UnityEngine.Vector3), typeof(float)));
		private static readonly System.Lazy<MethodAccessor<Shark>> _FindBlockToAttack757602046 =
				new System.Lazy<MethodAccessor<Shark>>(() => MethodAccessor<Shark>.Create("FindBlockToAttack"));
		private static readonly System.Lazy<MethodAccessor<Shark>> _GetRandomSurfacePointInVision3698168060 =
				new System.Lazy<MethodAccessor<Shark>>(() => MethodAccessor<Shark>.Create("GetRandomSurfacePointInVision", typeof(float), typeof(float)));
		private static readonly System.Lazy<MethodAccessor<Shark>> _GetRandomWaterPointInVision3553241911 =
				new System.Lazy<MethodAccessor<Shark>>(() => MethodAccessor<Shark>.Create("GetRandomWaterPointInVision", typeof(float), typeof(float), typeof(UnityEngine.Transform)));
		private static readonly System.Lazy<MethodAccessor<Shark>> _GetRandomPointInVisionAroundTarget1664684420 =
				new System.Lazy<MethodAccessor<Shark>>(() => MethodAccessor<Shark>.Create("GetRandomPointInVisionAroundTarget", typeof(UnityEngine.Vector3), typeof(float), typeof(float)));
		private static readonly System.Lazy<MethodAccessor<Shark>> _GetBaitInRange757602046 =
				new System.Lazy<MethodAccessor<Shark>>(() => MethodAccessor<Shark>.Create("GetBaitInRange"));
		private static readonly System.Lazy<MethodAccessor<Shark>> _CanSearchForBait757602046 =
				new System.Lazy<MethodAccessor<Shark>>(() => MethodAccessor<Shark>.Create("CanSearchForBait"));
		private static readonly System.Lazy<MethodAccessor<Shark>> _SetTargetToAttack757602046 =
				new System.Lazy<MethodAccessor<Shark>>(() => MethodAccessor<Shark>.Create("SetTargetToAttack"));
		private static readonly System.Lazy<MethodAccessor<Shark>> _TriggerAnimation3454057852 =
				new System.Lazy<MethodAccessor<Shark>>(() => MethodAccessor<Shark>.Create("TriggerAnimation", typeof(string)));
		private static readonly System.Lazy<MethodAccessor<Shark>> _CalculateTurning2193532270 =
				new System.Lazy<MethodAccessor<Shark>>(() => MethodAccessor<Shark>.Create("CalculateTurning", typeof(float), typeof(float), typeof(float), typeof(float)));
		private static readonly System.Lazy<MethodAccessor<Shark>> _WoodParticles757602046 =
				new System.Lazy<MethodAccessor<Shark>>(() => MethodAccessor<Shark>.Create("WoodParticles"));
		private static readonly System.Lazy<MethodAccessor<Shark>> _ResetHitWhileSwimming3486905475 =
				new System.Lazy<MethodAccessor<Shark>>(() => MethodAccessor<Shark>.Create("ResetHitWhileSwimming", typeof(float)));

		public static void Awake(this Shark __self) => _Awake757602046.Value.Invoke(__self);
		public static void Start(this Shark __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this Shark __self) => _Update757602046.Value.Invoke(__self);
		public static void OnDestroy(this Shark __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void OnDrawGizmos(this Shark __self) => _OnDrawGizmos757602046.Value.Invoke(__self);
		public static void RandomizeStartingValues(this Shark __self) => _RandomizeStartingValues757602046.Value.Invoke(__self);
		public static void DebugUpdate(this Shark __self) => _DebugUpdate757602046.Value.Invoke(__self);
		public static void OnWorldShift(this Shark __self, UnityEngine.Vector3 shift) => _OnWorldShift3429126434.Value.Invoke(__self, shift);
		public static void NoTargetUpdate(this Shark __self) => _NoTargetUpdate757602046.Value.Invoke(__self);
		public static void PassiveSurfaceUpdate(this Shark __self) => _PassiveSurfaceUpdate757602046.Value.Invoke(__self);
		public static void PassiveWaterUpdate(this Shark __self) => _PassiveWaterUpdate757602046.Value.Invoke(__self);
		public static void AttackRaftUpdate(this Shark __self) => _AttackRaftUpdate757602046.Value.Invoke(__self);
		public static void BaitUpdate(this Shark __self) => _BaitUpdate757602046.Value.Invoke(__self);
		public static void DiveUpdate(this Shark __self) => _DiveUpdate757602046.Value.Invoke(__self);
		public static void DeadUpdate(this Shark __self) => _DeadUpdate757602046.Value.Invoke(__self);
		public static void DeadSinkUpdate(this Shark __self) => _DeadSinkUpdate757602046.Value.Invoke(__self);
		public static bool MoveTowards(this Shark __self, UnityEngine.Vector3 point, float reachedPointDistance) => (bool)_MoveTowards3640389019.Value.Invoke(__self, point, reachedPointDistance);
		public static Block FindBlockToAttack(this Shark __self) => (Block)_FindBlockToAttack757602046.Value.Invoke(__self);
		public static UnityEngine.Vector3 GetRandomSurfacePointInVision(this Shark __self, float minRadius, float maxRadius) => (UnityEngine.Vector3)_GetRandomSurfacePointInVision3698168060.Value.Invoke(__self, minRadius, maxRadius);
		public static UnityEngine.Vector3 GetRandomWaterPointInVision(this Shark __self, float minRadius, float maxRadius, UnityEngine.Transform originTarget) => (UnityEngine.Vector3)_GetRandomWaterPointInVision3553241911.Value.Invoke(__self, minRadius, maxRadius, originTarget);
		public static UnityEngine.Vector3 GetRandomPointInVisionAroundTarget(this Shark __self, UnityEngine.Vector3 target, float minRadius, float maxRadius) => (UnityEngine.Vector3)_GetRandomPointInVisionAroundTarget1664684420.Value.Invoke(__self, target, minRadius, maxRadius);
		public static SharkBait GetBaitInRange(this Shark __self) => (SharkBait)_GetBaitInRange757602046.Value.Invoke(__self);
		public static bool CanSearchForBait(this Shark __self) => (bool)_CanSearchForBait757602046.Value.Invoke(__self);
		public static void SetTargetToAttack(this Shark __self) => _SetTargetToAttack757602046.Value.Invoke(__self);
		public static void TriggerAnimation(this Shark __self, string name) => _TriggerAnimation3454057852.Value.Invoke(__self, name);
		public static void CalculateTurning(this Shark __self, float previousY, float currentY, float previousX, float currentX) => _CalculateTurning2193532270.Value.Invoke(__self, previousY, currentY, previousX, currentX);
		public static void WoodParticles(this Shark __self) => _WoodParticles757602046.Value.Invoke(__self);
		public static System.Collections.IEnumerator ResetHitWhileSwimming(this Shark __self, float timeDelay) => (System.Collections.IEnumerator)_ResetHitWhileSwimming3486905475.Value.Invoke(__self, timeDelay);

	}

	public static class PrivateAccessor_Message_Shark
	{

		private static readonly System.Lazy<FieldAccessor<Message_Shark, float>> _posX =
				new System.Lazy<FieldAccessor<Message_Shark, float>>(() => FieldAccessor<Message_Shark, float>.Create("posX"));
		private static readonly System.Lazy<FieldAccessor<Message_Shark, float>> _posY =
				new System.Lazy<FieldAccessor<Message_Shark, float>>(() => FieldAccessor<Message_Shark, float>.Create("posY"));
		private static readonly System.Lazy<FieldAccessor<Message_Shark, float>> _posZ =
				new System.Lazy<FieldAccessor<Message_Shark, float>>(() => FieldAccessor<Message_Shark, float>.Create("posZ"));
		private static readonly System.Lazy<FieldAccessor<Message_Shark, float>> _rotX =
				new System.Lazy<FieldAccessor<Message_Shark, float>>(() => FieldAccessor<Message_Shark, float>.Create("rotX"));
		private static readonly System.Lazy<FieldAccessor<Message_Shark, float>> _rotY =
				new System.Lazy<FieldAccessor<Message_Shark, float>>(() => FieldAccessor<Message_Shark, float>.Create("rotY"));
		private static readonly System.Lazy<FieldAccessor<Message_Shark, float>> _rotZ =
				new System.Lazy<FieldAccessor<Message_Shark, float>>(() => FieldAccessor<Message_Shark, float>.Create("rotZ"));

		public static float GetPosX(this Message_Shark __self) => _posX.Value.GetValue(__self);
		public static void SetPosX(this Message_Shark __self, float value) => _posX.Value.SetValue(__self, value);
		public static float GetPosY(this Message_Shark __self) => _posY.Value.GetValue(__self);
		public static void SetPosY(this Message_Shark __self, float value) => _posY.Value.SetValue(__self, value);
		public static float GetPosZ(this Message_Shark __self) => _posZ.Value.GetValue(__self);
		public static void SetPosZ(this Message_Shark __self, float value) => _posZ.Value.SetValue(__self, value);
		public static float GetRotX(this Message_Shark __self) => _rotX.Value.GetValue(__self);
		public static void SetRotX(this Message_Shark __self, float value) => _rotX.Value.SetValue(__self, value);
		public static float GetRotY(this Message_Shark __self) => _rotY.Value.GetValue(__self);
		public static void SetRotY(this Message_Shark __self, float value) => _rotY.Value.SetValue(__self, value);
		public static float GetRotZ(this Message_Shark __self) => _rotZ.Value.GetValue(__self);
		public static void SetRotZ(this Message_Shark __self, float value) => _rotZ.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_SO_WorldEvent
	{

		private static readonly System.Lazy<FieldAccessor<SO_WorldEvent, WorldEvent>> _eventHandle =
				new System.Lazy<FieldAccessor<SO_WorldEvent, WorldEvent>>(() => FieldAccessor<SO_WorldEvent, WorldEvent>.Create("eventHandle"));

		public static WorldEvent GetEventHandle(this SO_WorldEvent __self) => _eventHandle.Value.GetValue(__self);
		public static void SetEventHandle(this SO_WorldEvent __self, WorldEvent value) => _eventHandle.Value.SetValue(__self, value);

	}

	public static class PrivateAccessor_WorldEventEngine
	{

		private static readonly System.Lazy<FieldAccessor<WorldEventEngine, float>> _startEventCooldown =
				new System.Lazy<FieldAccessor<WorldEventEngine, float>>(() => FieldAccessor<WorldEventEngine, float>.Create("startEventCooldown"));
		private static readonly System.Lazy<FieldAccessor<WorldEventEngine, WorldEventManager>> _worldEventHandler =
				new System.Lazy<FieldAccessor<WorldEventEngine, WorldEventManager>>(() => FieldAccessor<WorldEventEngine, WorldEventManager>.Create("worldEventHandler"));

		public static float GetStartEventCooldown(this WorldEventEngine __self) => _startEventCooldown.Value.GetValue(__self);
		public static void SetStartEventCooldown(this WorldEventEngine __self, float value) => _startEventCooldown.Value.SetValue(__self, value);
		public static WorldEventManager GetWorldEventHandler(this WorldEventEngine __self) => _worldEventHandler.Value.GetValue(__self);
		public static void SetWorldEventHandler(this WorldEventEngine __self, WorldEventManager value) => _worldEventHandler.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<WorldEventEngine>> _Start757602046 =
				new System.Lazy<MethodAccessor<WorldEventEngine>>(() => MethodAccessor<WorldEventEngine>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<WorldEventEngine>> _HandleEvents757602046 =
				new System.Lazy<MethodAccessor<WorldEventEngine>>(() => MethodAccessor<WorldEventEngine>.Create("HandleEvents"));
		private static readonly System.Lazy<MethodAccessor<WorldEventEngine>> _HandleEventStart757602046 =
				new System.Lazy<MethodAccessor<WorldEventEngine>>(() => MethodAccessor<WorldEventEngine>.Create("HandleEventStart"));
		private static readonly System.Lazy<MethodAccessor<WorldEventEngine>> _HandleEventEnd757602046 =
				new System.Lazy<MethodAccessor<WorldEventEngine>>(() => MethodAccessor<WorldEventEngine>.Create("HandleEventEnd"));

		public static void Start(this WorldEventEngine __self) => _Start757602046.Value.Invoke(__self);
		public static void HandleEvents(this WorldEventEngine __self) => _HandleEvents757602046.Value.Invoke(__self);
		public static void HandleEventStart(this WorldEventEngine __self) => _HandleEventStart757602046.Value.Invoke(__self);
		public static void HandleEventEnd(this WorldEventEngine __self) => _HandleEventEnd757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_WorldEventManager
	{

		private static readonly System.Lazy<MethodAccessor<WorldEventManager>> _WorldEventFromData3440675934 =
				new System.Lazy<MethodAccessor<WorldEventManager>>(() => MethodAccessor<WorldEventManager>.Create("WorldEventFromData", typeof(SO_WorldEvent)));

		public static WorldEvent WorldEventFromData(this WorldEventManager __self, SO_WorldEvent data) => (WorldEvent)_WorldEventFromData3440675934.Value.Invoke(__self, data);

	}

	public static class Private_WorldEventManager
	{

		private static readonly System.Lazy<StaticFieldAccessor<Raft_Network>> _network =
				new System.Lazy<StaticFieldAccessor<Raft_Network>>(() => StaticFieldAccessor<Raft_Network>.Create(typeof(WorldEventManager), "network"));

		public static Raft_Network GetNetwork() => _network.Value.GetValue();
		public static void SetNetwork(Raft_Network value) => _network.Value.SetValue(value);

	}

	public static class PrivateAccessor_Restriction_Cooldown
	{

		private static readonly System.Lazy<MethodAccessor<Restriction_Cooldown>> _IsInCooldown3453127287 =
				new System.Lazy<MethodAccessor<Restriction_Cooldown>>(() => MethodAccessor<Restriction_Cooldown>.Create("IsInCooldown", typeof(WorldEvent)));

		public static bool IsInCooldown(this Restriction_Cooldown __self, WorldEvent we) => (bool)_IsInCooldown3453127287.Value.Invoke(__self, we);

	}

	public static class PrivateAccessor_Restriction_Expiration
	{

		private static readonly System.Lazy<MethodAccessor<Restriction_Expiration>> _HasExpired3453127287 =
				new System.Lazy<MethodAccessor<Restriction_Expiration>>(() => MethodAccessor<Restriction_Expiration>.Create("HasExpired", typeof(WorldEvent)));

		public static bool HasExpired(this Restriction_Expiration __self, WorldEvent we) => (bool)_HasExpired3453127287.Value.Invoke(__self, we);

	}

	public static class PrivateAccessor_WorldEvent_Tracker
	{

		private static readonly System.Lazy<FieldAccessor<WorldEvent_Tracker, WorldEvent>> _worldEvent =
				new System.Lazy<FieldAccessor<WorldEvent_Tracker, WorldEvent>>(() => FieldAccessor<WorldEvent_Tracker, WorldEvent>.Create("worldEvent"));
		private static readonly System.Lazy<FieldAccessor<WorldEvent_Tracker, bool>> _initialized =
				new System.Lazy<FieldAccessor<WorldEvent_Tracker, bool>>(() => FieldAccessor<WorldEvent_Tracker, bool>.Create("initialized"));

		public static WorldEvent GetWorldEvent(this WorldEvent_Tracker __self) => _worldEvent.Value.GetValue(__self);
		public static void SetWorldEvent(this WorldEvent_Tracker __self, WorldEvent value) => _worldEvent.Value.SetValue(__self, value);
		public static bool GetInitialized(this WorldEvent_Tracker __self) => _initialized.Value.GetValue(__self);
		public static void SetInitialized(this WorldEvent_Tracker __self, bool value) => _initialized.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<WorldEvent_Tracker>> _EventEnd757602046 =
				new System.Lazy<MethodAccessor<WorldEvent_Tracker>>(() => MethodAccessor<WorldEvent_Tracker>.Create("EventEnd"));
		private static readonly System.Lazy<MethodAccessor<WorldEvent_Tracker>> _Untrack757602046 =
				new System.Lazy<MethodAccessor<WorldEvent_Tracker>>(() => MethodAccessor<WorldEvent_Tracker>.Create("Untrack"));

		public static void EventEnd(this WorldEvent_Tracker __self) => _EventEnd757602046.Value.Invoke(__self);
		public static void Untrack(this WorldEvent_Tracker __self) => _Untrack757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_WorldEvent_Tracker_AI
	{

		private static readonly System.Lazy<MethodAccessor<WorldEvent_Tracker_AI>> _EventEnd757602046 =
				new System.Lazy<MethodAccessor<WorldEvent_Tracker_AI>>(() => MethodAccessor<WorldEvent_Tracker_AI>.Create("EventEnd"));

		public static void EventEnd(this WorldEvent_Tracker_AI __self) => _EventEnd757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_RGD_WorldEvent
	{

		private static readonly System.Lazy<MethodAccessor<RGD_WorldEvent>> _SetDefaults3454810881 =
				new System.Lazy<MethodAccessor<RGD_WorldEvent>>(() => MethodAccessor<RGD_WorldEvent>.Create("SetDefaults", typeof(System.Runtime.Serialization.StreamingContext)));

		public static void SetDefaults(this RGD_WorldEvent __self, System.Runtime.Serialization.StreamingContext sc) => _SetDefaults3454810881.Value.Invoke(__self, sc);

	}

	public static class PrivateAccessor_WorldEvent
	{

		private static readonly System.Lazy<FieldAccessor<WorldEvent, WorldEventManager>> _handler =
				new System.Lazy<FieldAccessor<WorldEvent, WorldEventManager>>(() => FieldAccessor<WorldEvent, WorldEventManager>.Create("handler"));

		public static WorldEventManager GetHandler(this WorldEvent __self) => _handler.Value.GetValue(__self);
		public static void SetHandler(this WorldEvent __self, WorldEventManager value) => _handler.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<WorldEvent>> _SpawnEntity1666395641 =
				new System.Lazy<MethodAccessor<WorldEvent>>(() => MethodAccessor<WorldEvent>.Create("SpawnEntity", typeof(AI_NetworkBehaviourType), typeof(UnityEngine.Vector3)));
		private static readonly System.Lazy<MethodAccessor<WorldEvent>> _TrackBehaviour3457194759 =
				new System.Lazy<MethodAccessor<WorldEvent>>(() => MethodAccessor<WorldEvent>.Create("TrackBehaviour", typeof(AI_NetworkBehaviour)));

		public static AI_NetworkBehaviour SpawnEntity(this WorldEvent __self, AI_NetworkBehaviourType type, UnityEngine.Vector3 pos) => (AI_NetworkBehaviour)_SpawnEntity1666395641.Value.Invoke(__self, type, pos);
		public static void TrackBehaviour(this WorldEvent __self, AI_NetworkBehaviour behaviour) => _TrackBehaviour3457194759.Value.Invoke(__self, behaviour);

	}

	public static class PrivateAccessor_BootlegSpawner
	{

		private static readonly System.Lazy<MethodAccessor<BootlegSpawner>> _Update757602046 =
				new System.Lazy<MethodAccessor<BootlegSpawner>>(() => MethodAccessor<BootlegSpawner>.Create("Update"));

		public static void Update(this BootlegSpawner __self) => _Update757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_GabFmodSoundTesting
	{

		private static readonly System.Lazy<MethodAccessor<GabFmodSoundTesting>> _Update757602046 =
				new System.Lazy<MethodAccessor<GabFmodSoundTesting>>(() => MethodAccessor<GabFmodSoundTesting>.Create("Update"));
		private static readonly System.Lazy<MethodAccessor<GabFmodSoundTesting>> _PlaySound757602046 =
				new System.Lazy<MethodAccessor<GabFmodSoundTesting>>(() => MethodAccessor<GabFmodSoundTesting>.Create("PlaySound"));
		private static readonly System.Lazy<MethodAccessor<GabFmodSoundTesting>> _TriggerQueue757602046 =
				new System.Lazy<MethodAccessor<GabFmodSoundTesting>>(() => MethodAccessor<GabFmodSoundTesting>.Create("TriggerQueue"));
		private static readonly System.Lazy<MethodAccessor<GabFmodSoundTesting>> _Stop757602046 =
				new System.Lazy<MethodAccessor<GabFmodSoundTesting>>(() => MethodAccessor<GabFmodSoundTesting>.Create("Stop"));
		private static readonly System.Lazy<MethodAccessor<GabFmodSoundTesting>> _StopHARD757602046 =
				new System.Lazy<MethodAccessor<GabFmodSoundTesting>>(() => MethodAccessor<GabFmodSoundTesting>.Create("StopHARD"));

		public static void Update(this GabFmodSoundTesting __self) => _Update757602046.Value.Invoke(__self);
		public static void PlaySound(this GabFmodSoundTesting __self) => _PlaySound757602046.Value.Invoke(__self);
		public static void TriggerQueue(this GabFmodSoundTesting __self) => _TriggerQueue757602046.Value.Invoke(__self);
		public static void Stop(this GabFmodSoundTesting __self) => _Stop757602046.Value.Invoke(__self);
		public static void StopHARD(this GabFmodSoundTesting __self) => _StopHARD757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_SceneLoader
	{

		private static readonly System.Lazy<FieldAccessor<SceneLoader, int>> _loadedScenesCount =
				new System.Lazy<FieldAccessor<SceneLoader, int>>(() => FieldAccessor<SceneLoader, int>.Create("loadedScenesCount"));
		private static readonly System.Lazy<FieldAccessor<SceneLoader, int>> _scenesToLoadCount =
				new System.Lazy<FieldAccessor<SceneLoader, int>>(() => FieldAccessor<SceneLoader, int>.Create("scenesToLoadCount"));

		public static int GetLoadedScenesCount(this SceneLoader __self) => _loadedScenesCount.Value.GetValue(__self);
		public static void SetLoadedScenesCount(this SceneLoader __self, int value) => _loadedScenesCount.Value.SetValue(__self, value);
		public static int GetScenesToLoadCount(this SceneLoader __self) => _scenesToLoadCount.Value.GetValue(__self);
		public static void SetScenesToLoadCount(this SceneLoader __self, int value) => _scenesToLoadCount.Value.SetValue(__self, value);

		private static readonly System.Lazy<MethodAccessor<SceneLoader>> _Awake757602046 =
				new System.Lazy<MethodAccessor<SceneLoader>>(() => MethodAccessor<SceneLoader>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<SceneLoader>> _OnSceneActivate3427922869 =
				new System.Lazy<MethodAccessor<SceneLoader>>(() => MethodAccessor<SceneLoader>.Create("OnSceneActivate", typeof(UnityEngine.SceneManagement.Scene)));
		private static readonly System.Lazy<MethodAccessor<SceneLoader>> _AddLoadedLandmark1706831445 =
				new System.Lazy<MethodAccessor<SceneLoader>>(() => MethodAccessor<SceneLoader>.Create("AddLoadedLandmark", typeof(UnityEngine.GameObject), typeof(Landmark)));
		private static readonly System.Lazy<MethodAccessor<SceneLoader>> _TrackAddressableLandmark1499916879 =
				new System.Lazy<MethodAccessor<SceneLoader>>(() => MethodAccessor<SceneLoader>.Create("TrackAddressableLandmark", typeof(string), typeof(SceneLoader.LandmarkData)));
		private static readonly System.Lazy<MethodAccessor<SceneLoader>> _AddDictionairyConnection2073211019 =
				new System.Lazy<MethodAccessor<SceneLoader>>(() => MethodAccessor<SceneLoader>.Create("AddDictionairyConnection", typeof(SceneLoader.LandmarkData), typeof(string)));
		private static readonly System.Lazy<MethodAccessor<SceneLoader>> _InitializeLoadedLandmark3479119439 =
				new System.Lazy<MethodAccessor<SceneLoader>>(() => MethodAccessor<SceneLoader>.Create("InitializeLoadedLandmark", typeof(Landmark)));

		public static void Awake(this SceneLoader __self) => _Awake757602046.Value.Invoke(__self);
		public static void OnSceneActivate(this SceneLoader __self, UnityEngine.SceneManagement.Scene scene) => _OnSceneActivate3427922869.Value.Invoke(__self, scene);
		public static void AddLoadedLandmark(this SceneLoader __self, UnityEngine.GameObject go, Landmark landmark) => _AddLoadedLandmark1706831445.Value.Invoke(__self, go, landmark);
		public static void TrackAddressableLandmark(this SceneLoader __self, string assetBundleKey, SceneLoader.LandmarkData landmarkData) => _TrackAddressableLandmark1499916879.Value.Invoke(__self, assetBundleKey, landmarkData);
		public static void AddDictionairyConnection(this SceneLoader __self, SceneLoader.LandmarkData landmarkData, string landmarkName) => _AddDictionairyConnection2073211019.Value.Invoke(__self, landmarkData, landmarkName);
		public static void InitializeLoadedLandmark(this SceneLoader __self, Landmark landmark) => _InitializeLoadedLandmark3479119439.Value.Invoke(__self, landmark);

	}

	public static class Private_SceneLoader
	{

		private static readonly System.Lazy<StaticMethodAccessor> _NameFromIndex3486186818 =
				new System.Lazy<StaticMethodAccessor>(() => StaticMethodAccessor.Create(typeof(SceneLoader), "NameFromIndex", typeof(int)));

		public static string NameFromIndex(int BuildIndex) => (string)_NameFromIndex3486186818.Value.Invoke(BuildIndex);

	}

	public static class PrivateAccessor_TriggerArrowEnterStateChange
	{

		private static readonly System.Lazy<MethodAccessor<TriggerArrowEnterStateChange>> _Awake757602046 =
				new System.Lazy<MethodAccessor<TriggerArrowEnterStateChange>>(() => MethodAccessor<TriggerArrowEnterStateChange>.Create("Awake"));
		private static readonly System.Lazy<MethodAccessor<TriggerArrowEnterStateChange>> _OnDestroy757602046 =
				new System.Lazy<MethodAccessor<TriggerArrowEnterStateChange>>(() => MethodAccessor<TriggerArrowEnterStateChange>.Create("OnDestroy"));
		private static readonly System.Lazy<MethodAccessor<TriggerArrowEnterStateChange>> _ActiveArrowCheck3468606003 =
				new System.Lazy<MethodAccessor<TriggerArrowEnterStateChange>>(() => MethodAccessor<TriggerArrowEnterStateChange>.Create("ActiveArrowCheck", typeof(UnityEngine.Collider)));

		public static void Awake(this TriggerArrowEnterStateChange __self) => _Awake757602046.Value.Invoke(__self);
		public static void OnDestroy(this TriggerArrowEnterStateChange __self) => _OnDestroy757602046.Value.Invoke(__self);
		public static void ActiveArrowCheck(this TriggerArrowEnterStateChange __self, UnityEngine.Collider other) => _ActiveArrowCheck3468606003.Value.Invoke(__self, other);

	}

	public static class PrivateAccessor_WaterValidTargetChecker
	{

		private static readonly System.Lazy<MethodAccessor<WaterValidTargetChecker>> _Start757602046 =
				new System.Lazy<MethodAccessor<WaterValidTargetChecker>>(() => MethodAccessor<WaterValidTargetChecker>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<WaterValidTargetChecker>> _Update757602046 =
				new System.Lazy<MethodAccessor<WaterValidTargetChecker>>(() => MethodAccessor<WaterValidTargetChecker>.Create("Update"));

		public static void Start(this WaterValidTargetChecker __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this WaterValidTargetChecker __self) => _Update757602046.Value.Invoke(__self);

	}

	public static class PrivateAccessor_IlaydaTest
	{

		private static readonly System.Lazy<MethodAccessor<IlaydaTest>> _Start757602046 =
				new System.Lazy<MethodAccessor<IlaydaTest>>(() => MethodAccessor<IlaydaTest>.Create("Start"));
		private static readonly System.Lazy<MethodAccessor<IlaydaTest>> _Update757602046 =
				new System.Lazy<MethodAccessor<IlaydaTest>>(() => MethodAccessor<IlaydaTest>.Create("Update"));

		public static void Start(this IlaydaTest __self) => _Start757602046.Value.Invoke(__self);
		public static void Update(this IlaydaTest __self) => _Update757602046.Value.Invoke(__self);

	}


	internal class FieldAccessor<TObject, TField>
	{
		private readonly System.Reflection.FieldInfo _fieldInfo;

		public static FieldAccessor<TObject, TField> Create(string fieldName) => new FieldAccessor<TObject, TField>(fieldName);

		private FieldAccessor(string fieldName)
		{
			_fieldInfo = AccessCache.GetFieldInfo(typeof(TObject), fieldName);
		}

		public TField GetValue(TObject obj) => (TField)_fieldInfo.GetValue(obj);

		public void SetValue(TObject obj, TField value) => _fieldInfo.SetValue(obj, value, AccessCache.InstanceFlags, null, System.Globalization.CultureInfo.CurrentCulture);
	}

	internal class StaticFieldAccessor<TField>
	{
		private readonly System.Reflection.FieldInfo _fieldInfo;

		public static StaticFieldAccessor<TField> Create(System.Type objectType, string fieldName) => new StaticFieldAccessor<TField>(objectType, fieldName);

		private StaticFieldAccessor(System.Type objectType, string fieldName)
		{
			_fieldInfo = AccessCache.GetStaticFieldInfo(objectType, fieldName);
		}

		public TField GetValue() => (TField)_fieldInfo.GetValue(null);

		public void SetValue(TField value) => _fieldInfo.SetValue(null, value, AccessCache.InstanceFlags, null, System.Globalization.CultureInfo.CurrentCulture);
	}

	internal class MethodAccessor<TObject>
	{
		private readonly System.Reflection.MethodInfo _methodInfo;

		public static MethodAccessor<TObject> Create(string fieldName, params System.Type[] arguments) => new MethodAccessor<TObject>(fieldName, arguments);

		private MethodAccessor(string fieldName, System.Type[] arguments)
		{
			_methodInfo = AccessCache.GetMethodInfo(typeof(TObject), fieldName, arguments);
		}

		public object Invoke(TObject obj, params object[] arguments) => _methodInfo.Invoke(obj, arguments);

	}

	internal class StaticMethodAccessor
	{
		private readonly System.Reflection.MethodInfo _methodInfo;

		public static StaticMethodAccessor Create(System.Type objectType, string fieldName, params System.Type[] arguments) => new StaticMethodAccessor(objectType, fieldName, arguments);

		private StaticMethodAccessor(System.Type objectType, string fieldName, System.Type[] arguments)
		{
			_methodInfo = AccessCache.GetStaticMethodInfo(objectType, fieldName, arguments);
		}

		public object Invoke(params object[] arguments) => _methodInfo.Invoke(null, arguments);

	}

	internal static class AccessCache
	{
		internal const System.Reflection.BindingFlags InstanceFlags =
												System.Reflection.BindingFlags.DeclaredOnly |
												System.Reflection.BindingFlags.Instance |
												System.Reflection.BindingFlags.Public |
												System.Reflection.BindingFlags.NonPublic |
												System.Reflection.BindingFlags.GetField |
												System.Reflection.BindingFlags.SetField |
												System.Reflection.BindingFlags.GetProperty |
												System.Reflection.BindingFlags.SetProperty;

		internal const System.Reflection.BindingFlags StaticFlags =
												System.Reflection.BindingFlags.DeclaredOnly |
												System.Reflection.BindingFlags.Static |
												System.Reflection.BindingFlags.Public |
												System.Reflection.BindingFlags.NonPublic |
												System.Reflection.BindingFlags.GetField |
												System.Reflection.BindingFlags.SetField |
												System.Reflection.BindingFlags.GetProperty |
												System.Reflection.BindingFlags.SetProperty;

		private static readonly System.Collections.Generic.Dictionary<System.Type, System.Collections.Generic.Dictionary<string, System.Reflection.FieldInfo>> declaredFields = new System.Collections.Generic.Dictionary<System.Type, System.Collections.Generic.Dictionary<string, System.Reflection.FieldInfo>>();
		private static readonly System.Collections.Generic.Dictionary<System.Type, System.Collections.Generic.Dictionary<string, System.Reflection.PropertyInfo>> declaredProperties = new System.Collections.Generic.Dictionary<System.Type, System.Collections.Generic.Dictionary<string, System.Reflection.PropertyInfo>>();
		private static readonly System.Collections.Generic.Dictionary<System.Type, System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<int, System.Reflection.MethodInfo>>> declaredMethods = new System.Collections.Generic.Dictionary<System.Type, System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<int, System.Reflection.MethodInfo>>>();

		private static T GetField<T>(
			System.Collections.Generic.Dictionary<System.Type, System.Collections.Generic.Dictionary<string, T>> dict,
			System.Type type,
			string name,
			System.Func<T> generator
		)
		{
			if (!dict.TryGetValue(type, out var fieldDict))
			{
				fieldDict = new System.Collections.Generic.Dictionary<string, T>();
				dict[type] = fieldDict;
			}

			if (fieldDict.TryGetValue(name, out var field))
				return field;

			field = generator();
			fieldDict[name] = field;

			return field;
		}

		private static T GetMethod<T>(
		  System.Collections.Generic.Dictionary<System.Type, System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<int, T>>> dict,
		  System.Type type,
		  string name,
		  System.Type[] arguments,
		  System.Func<T> generator
		)
		{
			if (!dict.TryGetValue(type, out var methodNameDict))
			{
				methodNameDict = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<int, T>>();
				dict[type] = methodNameDict;
			}

			if (!methodNameDict.TryGetValue(name, out var methodHashDict))
			{
				methodHashDict = new System.Collections.Generic.Dictionary<int, T>();
				methodNameDict[name] = methodHashDict;
			}

			int key = CombinedHashCode(arguments);

			if (!methodHashDict.TryGetValue(key, out var method))
			{
				method = generator();
				methodHashDict[key] = method;
			}

			return method;
		}

		internal static System.Reflection.FieldInfo GetFieldInfo(System.Type type, string name)
		{
			return GetField(declaredFields, type, name, () => type.GetField(name, InstanceFlags));
		}

		internal static System.Reflection.FieldInfo GetStaticFieldInfo(System.Type type, string name)
		{
			return GetField(declaredFields, type, name, () => type.GetField(name, StaticFlags));
		}

		internal static System.Reflection.MethodInfo GetMethodInfo(System.Type type, string name, System.Type[] arguments)
		{
			return GetMethod<System.Reflection.MethodInfo>(declaredMethods, type, name, arguments, () => type.GetMethod(name, InstanceFlags, null, arguments, null));
		}

		internal static System.Reflection.MethodInfo GetStaticMethodInfo(System.Type type, string name, System.Type[] arguments)
		{
			return GetMethod<System.Reflection.MethodInfo>(declaredMethods, type, name, arguments, () => type.GetMethod(name, StaticFlags, null, arguments, null));
		}

		private static int CombinedHashCode(object[] objects)
		{
			const int prime = 5381;
			int h1 = (prime << 16) + prime;
			int h2 = h1;

			for (int i = 0, l = objects.Length; i < l; i++)
			{
				object obj = objects[i];

				if (i % 2 == 0)
				{
					h1 = (h1 << 5) + h1 + (h1 >> 27) ^ obj.GetHashCode();
				}
				else
				{
					h2 = (h2 << 5) + h2 + (h2 >> 27) ^ obj.GetHashCode();
				}
			}

			return h1 + h2 * 1566083941;
		}

	}

}
